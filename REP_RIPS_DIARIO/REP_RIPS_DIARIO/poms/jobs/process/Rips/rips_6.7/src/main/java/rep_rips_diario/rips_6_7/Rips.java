// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package rep_rips_diario.rips_6_7;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.Utils;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJava_5
	//import java.util.List;

	//the import part of tJava_6
	//import java.util.List;

	//the import part of tJava_7
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_8
	//import java.util.List;

	//the import part of tJava_9
	//import java.util.List;

	//the import part of tJava_12
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJava_13
	//import java.util.List;

	//the import part of tJava_10
	//import java.util.List;

	//the import part of tJava_11
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Rips Purpose: <br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status PROD
 */
public class Rips implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(CONDICION_ACTIVIDADES_CONSULTAS != null){
				
					this.setProperty("CONDICION_ACTIVIDADES_CONSULTAS", CONDICION_ACTIVIDADES_CONSULTAS.toString());
				
			}
			
			if(CONDICION_CONSULTAS != null){
				
					this.setProperty("CONDICION_CONSULTAS", CONDICION_CONSULTAS.toString());
				
			}
			
			if(CONDICION_FINDRISK_CONSULTAS != null){
				
					this.setProperty("CONDICION_FINDRISK_CONSULTAS", CONDICION_FINDRISK_CONSULTAS.toString());
				
			}
			
			if(CONDICION_HOSPITALIZACION != null){
				
					this.setProperty("CONDICION_HOSPITALIZACION", CONDICION_HOSPITALIZACION.toString());
				
			}
			
			if(CONDICION_MEDICAMENTOS != null){
				
					this.setProperty("CONDICION_MEDICAMENTOS", CONDICION_MEDICAMENTOS.toString());
				
			}
			
			if(CONDICION_OTROS_SERVICIOS != null){
				
					this.setProperty("CONDICION_OTROS_SERVICIOS", CONDICION_OTROS_SERVICIOS.toString());
				
			}
			
			if(CONDICION_OTROS_SERVICIOS2 != null){
				
					this.setProperty("CONDICION_OTROS_SERVICIOS2", CONDICION_OTROS_SERVICIOS2.toString());
				
			}
			
			if(CONDICION_PROCEDIMIENTOS_CGP != null){
				
					this.setProperty("CONDICION_PROCEDIMIENTOS_CGP", CONDICION_PROCEDIMIENTOS_CGP.toString());
				
			}
			
			if(CONDICION_PROCEDIMIENTOS_CGP2 != null){
				
					this.setProperty("CONDICION_PROCEDIMIENTOS_CGP2", CONDICION_PROCEDIMIENTOS_CGP2.toString());
				
			}
			
			if(CONDICION_PROCEDIMIENTOS_ODO != null){
				
					this.setProperty("CONDICION_PROCEDIMIENTOS_ODO", CONDICION_PROCEDIMIENTOS_ODO.toString());
				
			}
			
			if(CONDICION_PROCEDIMIENTOS_PQX != null){
				
					this.setProperty("CONDICION_PROCEDIMIENTOS_PQX", CONDICION_PROCEDIMIENTOS_PQX.toString());
				
			}
			
			if(CONDICION_PROCEDIMIENTOS_RCA != null){
				
					this.setProperty("CONDICION_PROCEDIMIENTOS_RCA", CONDICION_PROCEDIMIENTOS_RCA.toString());
				
			}
			
			if(CONDICION_SIGNOS_VITALES != null){
				
					this.setProperty("CONDICION_SIGNOS_VITALES", CONDICION_SIGNOS_VITALES.toString());
				
			}
			
			if(CONDICION_URGENCIAS != null){
				
					this.setProperty("CONDICION_URGENCIAS", CONDICION_URGENCIAS.toString());
				
			}
			
			if(CONDICION_USUARIOS != null){
				
					this.setProperty("CONDICION_USUARIOS", CONDICION_USUARIOS.toString());
				
			}
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(ACTUALIZACION_TOTAL != null){
				
					this.setProperty("ACTUALIZACION_TOTAL", ACTUALIZACION_TOTAL.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(ERROR != null){
				
					this.setProperty("ERROR", ERROR.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FANTERIOR != null){
				
					this.setProperty("FANTERIOR", FANTERIOR.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(ID_SOLICITUD != null){
				
					this.setProperty("ID_SOLICITUD", ID_SOLICITUD.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(mail_Message != null){
				
					this.setProperty("mail_Message", mail_Message.toString());
				
			}
			
			if(mail_Password != null){
				
					this.setProperty("mail_Password", mail_Password.toString());
				
			}
			
			if(mail_Sendername != null){
				
					this.setProperty("mail_Sendername", mail_Sendername.toString());
				
			}
			
			if(mail_SMTP_Host != null){
				
					this.setProperty("mail_SMTP_Host", mail_SMTP_Host.toString());
				
			}
			
			if(mail_SMTP_Port != null){
				
					this.setProperty("mail_SMTP_Port", mail_SMTP_Port.toString());
				
			}
			
			if(mail_Subject != null){
				
					this.setProperty("mail_Subject", mail_Subject.toString());
				
			}
			
			if(mail_To != null){
				
					this.setProperty("mail_To", mail_To.toString());
				
			}
			
			if(mail_User != null){
				
					this.setProperty("mail_User", mail_User.toString());
				
			}
			
			if(ARCONTROL_ID != null){
				
					this.setProperty("ARCONTROL_ID", ARCONTROL_ID.toString());
				
			}
			
			if(CODARCHIVO != null){
				
					this.setProperty("CODARCHIVO", CODARCHIVO.toString());
				
			}
			
			if(COUNT_OS != null){
				
					this.setProperty("COUNT_OS", COUNT_OS.toString());
				
			}
			
			if(DIFERENCIA_MES != null){
				
					this.setProperty("DIFERENCIA_MES", DIFERENCIA_MES.toString());
				
			}
			
			if(FECHA_INICIAL != null){
				
					this.setProperty("FECHA_INICIAL", FECHA_INICIAL.toString());
				
			}
			
			if(FREMISION != null){
				
					String pattern_FREMISION = "yyyy-MM-dd HH:mm:ss";
					String value_FREMISION = "";
					String[] parts_FREMISION = value_FREMISION.split(";");
					if(parts_FREMISION.length > 1){
						pattern_FREMISION = parts_FREMISION[0];
						this.setProperty("FREMISION", pattern_FREMISION + ";" + FormatterUtils.format_Date(FREMISION, pattern_FREMISION));
					}else{
						this.setProperty("FREMISION", FormatterUtils.format_Date(FREMISION, pattern_FREMISION));
					}
				
			}
			
			if(LAST_DAY != null){
				
					this.setProperty("LAST_DAY", LAST_DAY.toString());
				
			}
			
			if(PERIODO != null){
				
					this.setProperty("PERIODO", PERIODO.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String CONDICION_ACTIVIDADES_CONSULTAS;
public String getCONDICION_ACTIVIDADES_CONSULTAS(){
	return this.CONDICION_ACTIVIDADES_CONSULTAS;
}
public String CONDICION_CONSULTAS;
public String getCONDICION_CONSULTAS(){
	return this.CONDICION_CONSULTAS;
}
public String CONDICION_FINDRISK_CONSULTAS;
public String getCONDICION_FINDRISK_CONSULTAS(){
	return this.CONDICION_FINDRISK_CONSULTAS;
}
public String CONDICION_HOSPITALIZACION;
public String getCONDICION_HOSPITALIZACION(){
	return this.CONDICION_HOSPITALIZACION;
}
public String CONDICION_MEDICAMENTOS;
public String getCONDICION_MEDICAMENTOS(){
	return this.CONDICION_MEDICAMENTOS;
}
public String CONDICION_OTROS_SERVICIOS;
public String getCONDICION_OTROS_SERVICIOS(){
	return this.CONDICION_OTROS_SERVICIOS;
}
public String CONDICION_OTROS_SERVICIOS2;
public String getCONDICION_OTROS_SERVICIOS2(){
	return this.CONDICION_OTROS_SERVICIOS2;
}
public String CONDICION_PROCEDIMIENTOS_CGP;
public String getCONDICION_PROCEDIMIENTOS_CGP(){
	return this.CONDICION_PROCEDIMIENTOS_CGP;
}
public String CONDICION_PROCEDIMIENTOS_CGP2;
public String getCONDICION_PROCEDIMIENTOS_CGP2(){
	return this.CONDICION_PROCEDIMIENTOS_CGP2;
}
public String CONDICION_PROCEDIMIENTOS_ODO;
public String getCONDICION_PROCEDIMIENTOS_ODO(){
	return this.CONDICION_PROCEDIMIENTOS_ODO;
}
public String CONDICION_PROCEDIMIENTOS_PQX;
public String getCONDICION_PROCEDIMIENTOS_PQX(){
	return this.CONDICION_PROCEDIMIENTOS_PQX;
}
public String CONDICION_PROCEDIMIENTOS_RCA;
public String getCONDICION_PROCEDIMIENTOS_RCA(){
	return this.CONDICION_PROCEDIMIENTOS_RCA;
}
public String CONDICION_SIGNOS_VITALES;
public String getCONDICION_SIGNOS_VITALES(){
	return this.CONDICION_SIGNOS_VITALES;
}
public String CONDICION_URGENCIAS;
public String getCONDICION_URGENCIAS(){
	return this.CONDICION_URGENCIAS;
}
public String CONDICION_USUARIOS;
public String getCONDICION_USUARIOS(){
	return this.CONDICION_USUARIOS;
}
public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public String db_origen_Password;
public String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public Boolean ACTUALIZACION_TOTAL;
public Boolean getACTUALIZACION_TOTAL(){
	return this.ACTUALIZACION_TOTAL;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String ERROR;
public String getERROR(){
	return this.ERROR;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FANTERIOR;
public String getFANTERIOR(){
	return this.FANTERIOR;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public Integer ID_SOLICITUD;
public Integer getID_SOLICITUD(){
	return this.ID_SOLICITUD;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public String mail_Message;
public String getMail_Message(){
	return this.mail_Message;
}
public java.lang.String mail_Password;
public java.lang.String getMail_Password(){
	return this.mail_Password;
}
public String mail_Sendername;
public String getMail_Sendername(){
	return this.mail_Sendername;
}
public String mail_SMTP_Host;
public String getMail_SMTP_Host(){
	return this.mail_SMTP_Host;
}
public String mail_SMTP_Port;
public String getMail_SMTP_Port(){
	return this.mail_SMTP_Port;
}
public String mail_Subject;
public String getMail_Subject(){
	return this.mail_Subject;
}
public String mail_To;
public String getMail_To(){
	return this.mail_To;
}
public String mail_User;
public String getMail_User(){
	return this.mail_User;
}
public BigDecimal ARCONTROL_ID;
public BigDecimal getARCONTROL_ID(){
	return this.ARCONTROL_ID;
}
public String CODARCHIVO;
public String getCODARCHIVO(){
	return this.CODARCHIVO;
}
public Integer COUNT_OS;
public Integer getCOUNT_OS(){
	return this.COUNT_OS;
}
public Integer DIFERENCIA_MES;
public Integer getDIFERENCIA_MES(){
	return this.DIFERENCIA_MES;
}
public String FECHA_INICIAL;
public String getFECHA_INICIAL(){
	return this.FECHA_INICIAL;
}
public java.util.Date FREMISION;
public java.util.Date getFREMISION(){
	return this.FREMISION;
}
public Integer LAST_DAY;
public Integer getLAST_DAY(){
	return this.LAST_DAY;
}
public String PERIODO;
public String getPERIODO(){
	return this.PERIODO;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "6.7";
	private final String jobName = "Rips";
	private final String projectName = "REP_RIPS_DIARIO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Rips.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Rips.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tOracleInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleConnection_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleConnection_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDenormalize_1_DenormalizeOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tDenormalize_1_ArrayIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tDenormalize_1_ArrayIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public static class proc_outStruct implements routines.system.IPersistableRow<proc_outStruct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String CODFACTURA;

				public String getCODFACTURA () {
					return this.CODFACTURA;
				}

				public Boolean CODFACTURAIsNullable(){
				    return true;
				}
				public Boolean CODFACTURAIsKey(){
				    return false;
				}
				public Integer CODFACTURALength(){
				    return 100;
				}
				public Integer CODFACTURAPrecision(){
				    return 0;
				}
				public String CODFACTURADefault(){
				
					return null;
				
				}
				public String CODFACTURAComment(){
				
				    return "N\u00FAmero de la factura";
				
				}
				public String CODFACTURAPattern(){
				
					return "";
				
				}
				public String CODFACTURAOriginalDbColumnName(){
				
					return "CODFACTURA";
				
				}

				
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return null;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return null;
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return 100;
				}
				public Integer CODPRESTADORPrecision(){
				    return 0;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "C\u00F3digo del prestador de servicios de salud";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 50;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "Tipo de identificaci\u00F3n usuario";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "N\u00FAmero de identificaci\u00F3n del usuario en el Sistema";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return 250;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "N\u00FAmero de la autorizaci\u00F3n";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public String CODPROCEDIMIENTO;

				public String getCODPROCEDIMIENTO () {
					return this.CODPROCEDIMIENTO;
				}

				public Boolean CODPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean CODPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer CODPROCEDIMIENTOLength(){
				    return 50;
				}
				public Integer CODPROCEDIMIENTOPrecision(){
				    return 0;
				}
				public String CODPROCEDIMIENTODefault(){
				
					return null;
				
				}
				public String CODPROCEDIMIENTOComment(){
				
				    return "C\u00F3digo del procedimiento";
				
				}
				public String CODPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String CODPROCEDIMIENTOOriginalDbColumnName(){
				
					return "CODPROCEDIMIENTO";
				
				}

				
			    public String AMBITO;

				public String getAMBITO () {
					return this.AMBITO;
				}

				public Boolean AMBITOIsNullable(){
				    return true;
				}
				public Boolean AMBITOIsKey(){
				    return false;
				}
				public Integer AMBITOLength(){
				    return 100;
				}
				public Integer AMBITOPrecision(){
				    return 0;
				}
				public String AMBITODefault(){
				
					return null;
				
				}
				public String AMBITOComment(){
				
				    return "\u00C1mbito de realizaci\u00F3n del procedimiento";
				
				}
				public String AMBITOPattern(){
				
					return "";
				
				}
				public String AMBITOOriginalDbColumnName(){
				
					return "AMBITO";
				
				}

				
			    public String FINALIDAD;

				public String getFINALIDAD () {
					return this.FINALIDAD;
				}

				public Boolean FINALIDADIsNullable(){
				    return true;
				}
				public Boolean FINALIDADIsKey(){
				    return false;
				}
				public Integer FINALIDADLength(){
				    return 50;
				}
				public Integer FINALIDADPrecision(){
				    return 0;
				}
				public String FINALIDADDefault(){
				
					return null;
				
				}
				public String FINALIDADComment(){
				
				    return "Finalidad del procedimiento";
				
				}
				public String FINALIDADPattern(){
				
					return "";
				
				}
				public String FINALIDADOriginalDbColumnName(){
				
					return "FINALIDAD";
				
				}

				
			    public String PERSONAL;

				public String getPERSONAL () {
					return this.PERSONAL;
				}

				public Boolean PERSONALIsNullable(){
				    return true;
				}
				public Boolean PERSONALIsKey(){
				    return false;
				}
				public Integer PERSONALLength(){
				    return 400;
				}
				public Integer PERSONALPrecision(){
				    return 0;
				}
				public String PERSONALDefault(){
				
					return null;
				
				}
				public String PERSONALComment(){
				
				    return "Personal que atiende";
				
				}
				public String PERSONALPattern(){
				
					return "";
				
				}
				public String PERSONALOriginalDbColumnName(){
				
					return "PERSONAL";
				
				}

				
			    public String CODDIAGPPAL;

				public String getCODDIAGPPAL () {
					return this.CODDIAGPPAL;
				}

				public Boolean CODDIAGPPALIsNullable(){
				    return true;
				}
				public Boolean CODDIAGPPALIsKey(){
				    return false;
				}
				public Integer CODDIAGPPALLength(){
				    return 50;
				}
				public Integer CODDIAGPPALPrecision(){
				    return 0;
				}
				public String CODDIAGPPALDefault(){
				
					return null;
				
				}
				public String CODDIAGPPALComment(){
				
				    return "C\u00F3digo Diagn\u00F3stico principal";
				
				}
				public String CODDIAGPPALPattern(){
				
					return "";
				
				}
				public String CODDIAGPPALOriginalDbColumnName(){
				
					return "CODDIAGPPAL";
				
				}

				
			    public String CODDIAGNOSTICO1;

				public String getCODDIAGNOSTICO1 () {
					return this.CODDIAGNOSTICO1;
				}

				public Boolean CODDIAGNOSTICO1IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO1IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO1Length(){
				    return 10;
				}
				public Integer CODDIAGNOSTICO1Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO1Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO1Comment(){
				
				    return "C\u00F3digo Diagn\u00F3stico relacionado";
				
				}
				public String CODDIAGNOSTICO1Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO1OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO1";
				
				}

				
			    public String COMPLICACION;

				public String getCOMPLICACION () {
					return this.COMPLICACION;
				}

				public Boolean COMPLICACIONIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONIsKey(){
				    return false;
				}
				public Integer COMPLICACIONLength(){
				    return 50;
				}
				public Integer COMPLICACIONPrecision(){
				    return 0;
				}
				public String COMPLICACIONDefault(){
				
					return null;
				
				}
				public String COMPLICACIONComment(){
				
				    return "Complicaci\u00F3n";
				
				}
				public String COMPLICACIONPattern(){
				
					return "";
				
				}
				public String COMPLICACIONOriginalDbColumnName(){
				
					return "COMPLICACION";
				
				}

				
			    public String FORMA_QUIRURGICO;

				public String getFORMA_QUIRURGICO () {
					return this.FORMA_QUIRURGICO;
				}

				public Boolean FORMA_QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean FORMA_QUIRURGICOIsKey(){
				    return false;
				}
				public Integer FORMA_QUIRURGICOLength(){
				    return 50;
				}
				public Integer FORMA_QUIRURGICOPrecision(){
				    return 0;
				}
				public String FORMA_QUIRURGICODefault(){
				
					return null;
				
				}
				public String FORMA_QUIRURGICOComment(){
				
				    return "";
				
				}
				public String FORMA_QUIRURGICOPattern(){
				
					return "";
				
				}
				public String FORMA_QUIRURGICOOriginalDbColumnName(){
				
					return "FORMA_QUIRURGICO";
				
				}

				
			    public BigDecimal VPROCEDIMIENTO;

				public BigDecimal getVPROCEDIMIENTO () {
					return this.VPROCEDIMIENTO;
				}

				public Boolean VPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean VPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer VPROCEDIMIENTOLength(){
				    return 0;
				}
				public Integer VPROCEDIMIENTOPrecision(){
				    return null;
				}
				public String VPROCEDIMIENTODefault(){
				
					return null;
				
				}
				public String VPROCEDIMIENTOComment(){
				
				    return "Valor procedimiento";
				
				}
				public String VPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String VPROCEDIMIENTOOriginalDbColumnName(){
				
					return "VPROCEDIMIENTO";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 11;
				}
				public Integer FECHAPrecision(){
				    return 6;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha del procedimiento";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 7;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public String TRIPS;

				public String getTRIPS () {
					return this.TRIPS;
				}

				public Boolean TRIPSIsNullable(){
				    return true;
				}
				public Boolean TRIPSIsKey(){
				    return false;
				}
				public Integer TRIPSLength(){
				    return 10;
				}
				public Integer TRIPSPrecision(){
				    return 0;
				}
				public String TRIPSDefault(){
				
					return null;
				
				}
				public String TRIPSComment(){
				
				    return "Tipo RIPS";
				
				}
				public String TRIPSPattern(){
				
					return "";
				
				}
				public String TRIPSOriginalDbColumnName(){
				
					return "TRIPS";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "FK - BGEN_PERSONAS";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - BGEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "Id de la fuerza del ESM de atencion";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "Sigla del tipo de documento del profesional asistencial que atiende";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "N\u00FAmero de identificacion del profesional asistencial que atiende";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "Nombre de la especialidad que atiende";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String PESO;

				public String getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 10;
				}
				public Integer PESOPrecision(){
				    return 0;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "Peso del paciente al momento de la atenci\u00F3n";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return 10;
				}
				public Integer TALLAPrecision(){
				    return 0;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "Altura del paciente la momento de la atenci\u00F3n ";
				
				}
				public String TALLAPattern(){
				
					return "";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public String UMEDIDA_PESO;

				public String getUMEDIDA_PESO () {
					return this.UMEDIDA_PESO;
				}

				public Boolean UMEDIDA_PESOIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_PESOIsKey(){
				    return false;
				}
				public Integer UMEDIDA_PESOLength(){
				    return 10;
				}
				public Integer UMEDIDA_PESOPrecision(){
				    return 0;
				}
				public String UMEDIDA_PESODefault(){
				
					return null;
				
				}
				public String UMEDIDA_PESOComment(){
				
				    return "Unidad de medida del peso del paciente";
				
				}
				public String UMEDIDA_PESOPattern(){
				
					return "";
				
				}
				public String UMEDIDA_PESOOriginalDbColumnName(){
				
					return "UMEDIDA_PESO";
				
				}

				
			    public String UMEDIDA_TALLA;

				public String getUMEDIDA_TALLA () {
					return this.UMEDIDA_TALLA;
				}

				public Boolean UMEDIDA_TALLAIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_TALLAIsKey(){
				    return false;
				}
				public Integer UMEDIDA_TALLALength(){
				    return 10;
				}
				public Integer UMEDIDA_TALLAPrecision(){
				    return 0;
				}
				public String UMEDIDA_TALLADefault(){
				
					return null;
				
				}
				public String UMEDIDA_TALLAComment(){
				
				    return "Unidad de medida de la talla del paciente";
				
				}
				public String UMEDIDA_TALLAPattern(){
				
					return "";
				
				}
				public String UMEDIDA_TALLAOriginalDbColumnName(){
				
					return "UMEDIDA_TALLA";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return 10;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return 0;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "Forma en que se almaceno ( Cargue, Automatico)";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 100;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "Tipo de afiliado ( No cotizante, cotizante pensionado o retirado, cotizante activo, beneficiario)";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "EDAD SIMPLE DE LA PERSONA AL MOMENTO DE LA ATENCI\u00D3N";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 10;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "Unidad de medida de la edad simple (A\u00F1os, Meses)";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "C\u00F3digo del grado (filtrar)";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "DESCRIPCION DEL GRADO MILITAR";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 100;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "Descripci\u00F3n de la clasificaci\u00F3n del grado";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal ADMISION_ID;

				public BigDecimal getADMISION_ID () {
					return this.ADMISION_ID;
				}

				public Boolean ADMISION_IDIsNullable(){
				    return true;
				}
				public Boolean ADMISION_IDIsKey(){
				    return false;
				}
				public Integer ADMISION_IDLength(){
				    return 0;
				}
				public Integer ADMISION_IDPrecision(){
				    return null;
				}
				public String ADMISION_IDDefault(){
				
					return null;
				
				}
				public String ADMISION_IDComment(){
				
				    return "ID de la admisi\u00F3n";
				
				}
				public String ADMISION_IDPattern(){
				
					return "";
				
				}
				public String ADMISION_IDOriginalDbColumnName(){
				
					return "ADMISION_ID";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return 2;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return 0;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return null;
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "C\u00F3digo de la clasificaci\u00F3n del grado (Filtrar)";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "ID BGEN_ESPECIALIDADES (Filtrar)";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String QUIRURGICO;

				public String getQUIRURGICO () {
					return this.QUIRURGICO;
				}

				public Boolean QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean QUIRURGICOIsKey(){
				    return false;
				}
				public Integer QUIRURGICOLength(){
				    return 20;
				}
				public Integer QUIRURGICOPrecision(){
				    return 0;
				}
				public String QUIRURGICODefault(){
				
					return null;
				
				}
				public String QUIRURGICOComment(){
				
				    return "Quir\u00FArgico ('Si', 'No')";
				
				}
				public String QUIRURGICOPattern(){
				
					return "";
				
				}
				public String QUIRURGICOOriginalDbColumnName(){
				
					return "QUIRURGICO";
				
				}

				
			    public String CODDIAGNOSTICO2;

				public String getCODDIAGNOSTICO2 () {
					return this.CODDIAGNOSTICO2;
				}

				public Boolean CODDIAGNOSTICO2IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO2IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO2Length(){
				    return 10;
				}
				public Integer CODDIAGNOSTICO2Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO2Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO2Comment(){
				
				    return "";
				
				}
				public String CODDIAGNOSTICO2Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO2OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO2";
				
				}

				
			    public String CODDIAGNOSTICO3;

				public String getCODDIAGNOSTICO3 () {
					return this.CODDIAGNOSTICO3;
				}

				public Boolean CODDIAGNOSTICO3IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO3IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO3Length(){
				    return 10;
				}
				public Integer CODDIAGNOSTICO3Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO3Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO3Comment(){
				
				    return "";
				
				}
				public String CODDIAGNOSTICO3Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO3OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO3";
				
				}

				
			    public BigDecimal EJECACTIVIDADES_ID;

				public BigDecimal getEJECACTIVIDADES_ID () {
					return this.EJECACTIVIDADES_ID;
				}

				public Boolean EJECACTIVIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean EJECACTIVIDADES_IDIsKey(){
				    return false;
				}
				public Integer EJECACTIVIDADES_IDLength(){
				    return null;
				}
				public Integer EJECACTIVIDADES_IDPrecision(){
				    return null;
				}
				public String EJECACTIVIDADES_IDDefault(){
				
					return null;
				
				}
				public String EJECACTIVIDADES_IDComment(){
				
				    return "";
				
				}
				public String EJECACTIVIDADES_IDPattern(){
				
					return "";
				
				}
				public String EJECACTIVIDADES_IDOriginalDbColumnName(){
				
					return "EJECACTIVIDADES_ID";
				
				}

				
			    public String ESTADO_TRATAMIENTO;

				public String getESTADO_TRATAMIENTO () {
					return this.ESTADO_TRATAMIENTO;
				}

				public Boolean ESTADO_TRATAMIENTOIsNullable(){
				    return true;
				}
				public Boolean ESTADO_TRATAMIENTOIsKey(){
				    return false;
				}
				public Integer ESTADO_TRATAMIENTOLength(){
				    return null;
				}
				public Integer ESTADO_TRATAMIENTOPrecision(){
				    return null;
				}
				public String ESTADO_TRATAMIENTODefault(){
				
					return null;
				
				}
				public String ESTADO_TRATAMIENTOComment(){
				
				    return "";
				
				}
				public String ESTADO_TRATAMIENTOPattern(){
				
					return "";
				
				}
				public String ESTADO_TRATAMIENTOOriginalDbColumnName(){
				
					return "ESTADO_TRATAMIENTO";
				
				}

				
			    public String FINALIDAD_CONSULTA;

				public String getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return 200;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return 0;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return null;
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.CODDIAGNOSTICO1 = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.PERIODO = readString(dis);
					
					this.TRIPS = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_PESO = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.QUIRURGICO = readString(dis);
					
					this.CODDIAGNOSTICO2 = readString(dis);
					
					this.CODDIAGNOSTICO3 = readString(dis);
					
						this.EJECACTIVIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO_TRATAMIENTO = readString(dis);
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.CODDIAGNOSTICO1 = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.PERIODO = readString(dis);
					
					this.TRIPS = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_PESO = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.QUIRURGICO = readString(dis);
					
					this.CODDIAGNOSTICO2 = readString(dis);
					
					this.CODDIAGNOSTICO3 = readString(dis);
					
						this.EJECACTIVIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO_TRATAMIENTO = readString(dis);
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO1,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_PESO,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO2,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EJECACTIVIDADES_ID);
					
					// String
				
						writeString(this.ESTADO_TRATAMIENTO,dos);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO1,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_PESO,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO2,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO3,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EJECACTIVIDADES_ID);
					
					// String
				
						writeString(this.ESTADO_TRATAMIENTO,dos);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODFACTURA="+CODFACTURA);
		sb.append(",PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",CODPROCEDIMIENTO="+CODPROCEDIMIENTO);
		sb.append(",AMBITO="+AMBITO);
		sb.append(",FINALIDAD="+FINALIDAD);
		sb.append(",PERSONAL="+PERSONAL);
		sb.append(",CODDIAGPPAL="+CODDIAGPPAL);
		sb.append(",CODDIAGNOSTICO1="+CODDIAGNOSTICO1);
		sb.append(",COMPLICACION="+COMPLICACION);
		sb.append(",FORMA_QUIRURGICO="+FORMA_QUIRURGICO);
		sb.append(",VPROCEDIMIENTO="+String.valueOf(VPROCEDIMIENTO));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",PERIODO="+PERIODO);
		sb.append(",TRIPS="+TRIPS);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",PESO="+PESO);
		sb.append(",TALLA="+TALLA);
		sb.append(",UMEDIDA_PESO="+UMEDIDA_PESO);
		sb.append(",UMEDIDA_TALLA="+UMEDIDA_TALLA);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",ADMISION_ID="+String.valueOf(ADMISION_ID));
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",QUIRURGICO="+QUIRURGICO);
		sb.append(",CODDIAGNOSTICO2="+CODDIAGNOSTICO2);
		sb.append(",CODDIAGNOSTICO3="+CODDIAGNOSTICO3);
		sb.append(",EJECACTIVIDADES_ID="+String.valueOf(EJECACTIVIDADES_ID));
		sb.append(",ESTADO_TRATAMIENTO="+ESTADO_TRATAMIENTO);
		sb.append(",FINALIDAD_CONSULTA="+FINALIDAD_CONSULTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(proc_outStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String CODFACTURA;

				public String getCODFACTURA () {
					return this.CODFACTURA;
				}

				public Boolean CODFACTURAIsNullable(){
				    return true;
				}
				public Boolean CODFACTURAIsKey(){
				    return false;
				}
				public Integer CODFACTURALength(){
				    return 100;
				}
				public Integer CODFACTURAPrecision(){
				    return 0;
				}
				public String CODFACTURADefault(){
				
					return null;
				
				}
				public String CODFACTURAComment(){
				
				    return "N\u00FAmero de la factura";
				
				}
				public String CODFACTURAPattern(){
				
					return "";
				
				}
				public String CODFACTURAOriginalDbColumnName(){
				
					return "CODFACTURA";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return null;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return null;
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return 100;
				}
				public Integer CODPRESTADORPrecision(){
				    return 0;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "C\u00F3digo del prestador de servicios de salud";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 50;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "Tipo de identificaci\u00F3n usuario";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "N\u00FAmero de identificaci\u00F3n del usuario en el Sistema";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return 250;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "N\u00FAmero de la autorizaci\u00F3n";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public String CODPROCEDIMIENTO;

				public String getCODPROCEDIMIENTO () {
					return this.CODPROCEDIMIENTO;
				}

				public Boolean CODPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean CODPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer CODPROCEDIMIENTOLength(){
				    return 50;
				}
				public Integer CODPROCEDIMIENTOPrecision(){
				    return 0;
				}
				public String CODPROCEDIMIENTODefault(){
				
					return null;
				
				}
				public String CODPROCEDIMIENTOComment(){
				
				    return "C\u00F3digo del procedimiento";
				
				}
				public String CODPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String CODPROCEDIMIENTOOriginalDbColumnName(){
				
					return "CODPROCEDIMIENTO";
				
				}

				
			    public String AMBITO;

				public String getAMBITO () {
					return this.AMBITO;
				}

				public Boolean AMBITOIsNullable(){
				    return true;
				}
				public Boolean AMBITOIsKey(){
				    return false;
				}
				public Integer AMBITOLength(){
				    return 100;
				}
				public Integer AMBITOPrecision(){
				    return 0;
				}
				public String AMBITODefault(){
				
					return null;
				
				}
				public String AMBITOComment(){
				
				    return "\u00C1mbito de realizaci\u00F3n del procedimiento";
				
				}
				public String AMBITOPattern(){
				
					return "";
				
				}
				public String AMBITOOriginalDbColumnName(){
				
					return "AMBITO";
				
				}

				
			    public String FINALIDAD;

				public String getFINALIDAD () {
					return this.FINALIDAD;
				}

				public Boolean FINALIDADIsNullable(){
				    return true;
				}
				public Boolean FINALIDADIsKey(){
				    return false;
				}
				public Integer FINALIDADLength(){
				    return 50;
				}
				public Integer FINALIDADPrecision(){
				    return 0;
				}
				public String FINALIDADDefault(){
				
					return null;
				
				}
				public String FINALIDADComment(){
				
				    return "Finalidad del procedimiento";
				
				}
				public String FINALIDADPattern(){
				
					return "";
				
				}
				public String FINALIDADOriginalDbColumnName(){
				
					return "FINALIDAD";
				
				}

				
			    public String PERSONAL;

				public String getPERSONAL () {
					return this.PERSONAL;
				}

				public Boolean PERSONALIsNullable(){
				    return true;
				}
				public Boolean PERSONALIsKey(){
				    return false;
				}
				public Integer PERSONALLength(){
				    return 400;
				}
				public Integer PERSONALPrecision(){
				    return 0;
				}
				public String PERSONALDefault(){
				
					return null;
				
				}
				public String PERSONALComment(){
				
				    return "Personal que atiende";
				
				}
				public String PERSONALPattern(){
				
					return "";
				
				}
				public String PERSONALOriginalDbColumnName(){
				
					return "PERSONAL";
				
				}

				
			    public String CODDIAGPPAL;

				public String getCODDIAGPPAL () {
					return this.CODDIAGPPAL;
				}

				public Boolean CODDIAGPPALIsNullable(){
				    return true;
				}
				public Boolean CODDIAGPPALIsKey(){
				    return false;
				}
				public Integer CODDIAGPPALLength(){
				    return 50;
				}
				public Integer CODDIAGPPALPrecision(){
				    return 0;
				}
				public String CODDIAGPPALDefault(){
				
					return null;
				
				}
				public String CODDIAGPPALComment(){
				
				    return "C\u00F3digo Diagn\u00F3stico principal";
				
				}
				public String CODDIAGPPALPattern(){
				
					return "";
				
				}
				public String CODDIAGPPALOriginalDbColumnName(){
				
					return "CODDIAGPPAL";
				
				}

				
			    public String COMPLICACION;

				public String getCOMPLICACION () {
					return this.COMPLICACION;
				}

				public Boolean COMPLICACIONIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONIsKey(){
				    return false;
				}
				public Integer COMPLICACIONLength(){
				    return 50;
				}
				public Integer COMPLICACIONPrecision(){
				    return 0;
				}
				public String COMPLICACIONDefault(){
				
					return null;
				
				}
				public String COMPLICACIONComment(){
				
				    return "Complicaci\u00F3n";
				
				}
				public String COMPLICACIONPattern(){
				
					return "";
				
				}
				public String COMPLICACIONOriginalDbColumnName(){
				
					return "COMPLICACION";
				
				}

				
			    public String FORMA_QUIRURGICO;

				public String getFORMA_QUIRURGICO () {
					return this.FORMA_QUIRURGICO;
				}

				public Boolean FORMA_QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean FORMA_QUIRURGICOIsKey(){
				    return false;
				}
				public Integer FORMA_QUIRURGICOLength(){
				    return 50;
				}
				public Integer FORMA_QUIRURGICOPrecision(){
				    return 0;
				}
				public String FORMA_QUIRURGICODefault(){
				
					return null;
				
				}
				public String FORMA_QUIRURGICOComment(){
				
				    return "";
				
				}
				public String FORMA_QUIRURGICOPattern(){
				
					return "";
				
				}
				public String FORMA_QUIRURGICOOriginalDbColumnName(){
				
					return "FORMA_QUIRURGICO";
				
				}

				
			    public BigDecimal VPROCEDIMIENTO;

				public BigDecimal getVPROCEDIMIENTO () {
					return this.VPROCEDIMIENTO;
				}

				public Boolean VPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean VPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer VPROCEDIMIENTOLength(){
				    return 0;
				}
				public Integer VPROCEDIMIENTOPrecision(){
				    return null;
				}
				public String VPROCEDIMIENTODefault(){
				
					return null;
				
				}
				public String VPROCEDIMIENTOComment(){
				
				    return "Valor procedimiento";
				
				}
				public String VPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String VPROCEDIMIENTOOriginalDbColumnName(){
				
					return "VPROCEDIMIENTO";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 11;
				}
				public Integer FECHAPrecision(){
				    return 6;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha del procedimiento";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String CODDIAGREL1;

				public String getCODDIAGREL1 () {
					return this.CODDIAGREL1;
				}

				public Boolean CODDIAGREL1IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL1IsKey(){
				    return false;
				}
				public Integer CODDIAGREL1Length(){
				    return 50;
				}
				public Integer CODDIAGREL1Precision(){
				    return 0;
				}
				public String CODDIAGREL1Default(){
				
					return null;
				
				}
				public String CODDIAGREL1Comment(){
				
				    return "C\u00F3digo Diagn\u00F3stico relacionado";
				
				}
				public String CODDIAGREL1Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL1OriginalDbColumnName(){
				
					return "CODDIAGREL1";
				
				}

				
			    public String CODDIAGREL2;

				public String getCODDIAGREL2 () {
					return this.CODDIAGREL2;
				}

				public Boolean CODDIAGREL2IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL2IsKey(){
				    return false;
				}
				public Integer CODDIAGREL2Length(){
				    return 10;
				}
				public Integer CODDIAGREL2Precision(){
				    return 0;
				}
				public String CODDIAGREL2Default(){
				
					return null;
				
				}
				public String CODDIAGREL2Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL2Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL2OriginalDbColumnName(){
				
					return "CODDIAGREL2";
				
				}

				
			    public String CODDIAGREL3;

				public String getCODDIAGREL3 () {
					return this.CODDIAGREL3;
				}

				public Boolean CODDIAGREL3IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL3IsKey(){
				    return false;
				}
				public Integer CODDIAGREL3Length(){
				    return 10;
				}
				public Integer CODDIAGREL3Precision(){
				    return 0;
				}
				public String CODDIAGREL3Default(){
				
					return null;
				
				}
				public String CODDIAGREL3Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL3Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL3OriginalDbColumnName(){
				
					return "CODDIAGREL3";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 7;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public String TRIPS;

				public String getTRIPS () {
					return this.TRIPS;
				}

				public Boolean TRIPSIsNullable(){
				    return true;
				}
				public Boolean TRIPSIsKey(){
				    return false;
				}
				public Integer TRIPSLength(){
				    return 10;
				}
				public Integer TRIPSPrecision(){
				    return 0;
				}
				public String TRIPSDefault(){
				
					return null;
				
				}
				public String TRIPSComment(){
				
				    return "Tipo RIPS";
				
				}
				public String TRIPSPattern(){
				
					return "";
				
				}
				public String TRIPSOriginalDbColumnName(){
				
					return "TRIPS";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "FK - BGEN_PERSONAS";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - BGEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "Id de la fuerza del ESM de atencion";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "Sigla del tipo de documento del profesional asistencial que atiende";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "N\u00FAmero de identificacion del profesional asistencial que atiende";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "Nombre de la especialidad que atiende";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String PESO;

				public String getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 10;
				}
				public Integer PESOPrecision(){
				    return 0;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "Peso del paciente al momento de la atenci\u00F3n";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return 10;
				}
				public Integer TALLAPrecision(){
				    return 0;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "Altura del paciente la momento de la atenci\u00F3n ";
				
				}
				public String TALLAPattern(){
				
					return "";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public String UMEDIDA_PESO;

				public String getUMEDIDA_PESO () {
					return this.UMEDIDA_PESO;
				}

				public Boolean UMEDIDA_PESOIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_PESOIsKey(){
				    return false;
				}
				public Integer UMEDIDA_PESOLength(){
				    return 10;
				}
				public Integer UMEDIDA_PESOPrecision(){
				    return 0;
				}
				public String UMEDIDA_PESODefault(){
				
					return null;
				
				}
				public String UMEDIDA_PESOComment(){
				
				    return "Unidad de medida del peso del paciente";
				
				}
				public String UMEDIDA_PESOPattern(){
				
					return "";
				
				}
				public String UMEDIDA_PESOOriginalDbColumnName(){
				
					return "UMEDIDA_PESO";
				
				}

				
			    public String UMEDIDA_TALLA;

				public String getUMEDIDA_TALLA () {
					return this.UMEDIDA_TALLA;
				}

				public Boolean UMEDIDA_TALLAIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_TALLAIsKey(){
				    return false;
				}
				public Integer UMEDIDA_TALLALength(){
				    return 10;
				}
				public Integer UMEDIDA_TALLAPrecision(){
				    return 0;
				}
				public String UMEDIDA_TALLADefault(){
				
					return null;
				
				}
				public String UMEDIDA_TALLAComment(){
				
				    return "Unidad de medida de la talla del paciente";
				
				}
				public String UMEDIDA_TALLAPattern(){
				
					return "";
				
				}
				public String UMEDIDA_TALLAOriginalDbColumnName(){
				
					return "UMEDIDA_TALLA";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return 10;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return 0;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "Forma en que se almaceno ( Cargue, Automatico)";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 100;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "Tipo de afiliado ( No cotizante, cotizante pensionado o retirado, cotizante activo, beneficiario)";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "EDAD SIMPLE DE LA PERSONA AL MOMENTO DE LA ATENCI\u00D3N";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 10;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "Unidad de medida de la edad simple (A\u00F1os, Meses)";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "C\u00F3digo del grado (filtrar)";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "DESCRIPCION DEL GRADO MILITAR";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 100;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "Descripci\u00F3n de la clasificaci\u00F3n del grado";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal ADMISION_ID;

				public BigDecimal getADMISION_ID () {
					return this.ADMISION_ID;
				}

				public Boolean ADMISION_IDIsNullable(){
				    return true;
				}
				public Boolean ADMISION_IDIsKey(){
				    return false;
				}
				public Integer ADMISION_IDLength(){
				    return 0;
				}
				public Integer ADMISION_IDPrecision(){
				    return null;
				}
				public String ADMISION_IDDefault(){
				
					return null;
				
				}
				public String ADMISION_IDComment(){
				
				    return "ID de la admisi\u00F3n";
				
				}
				public String ADMISION_IDPattern(){
				
					return "";
				
				}
				public String ADMISION_IDOriginalDbColumnName(){
				
					return "ADMISION_ID";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return 2;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return 0;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return null;
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "C\u00F3digo de la clasificaci\u00F3n del grado (Filtrar)";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "ID BGEN_ESPECIALIDADES (Filtrar)";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String QUIRURGICO;

				public String getQUIRURGICO () {
					return this.QUIRURGICO;
				}

				public Boolean QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean QUIRURGICOIsKey(){
				    return false;
				}
				public Integer QUIRURGICOLength(){
				    return 20;
				}
				public Integer QUIRURGICOPrecision(){
				    return 0;
				}
				public String QUIRURGICODefault(){
				
					return null;
				
				}
				public String QUIRURGICOComment(){
				
				    return "Quir\u00FArgico ('Si', 'No')";
				
				}
				public String QUIRURGICOPattern(){
				
					return "";
				
				}
				public String QUIRURGICOOriginalDbColumnName(){
				
					return "QUIRURGICO";
				
				}

				
			    public BigDecimal EJECACTIVIDADES_ID;

				public BigDecimal getEJECACTIVIDADES_ID () {
					return this.EJECACTIVIDADES_ID;
				}

				public Boolean EJECACTIVIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean EJECACTIVIDADES_IDIsKey(){
				    return false;
				}
				public Integer EJECACTIVIDADES_IDLength(){
				    return null;
				}
				public Integer EJECACTIVIDADES_IDPrecision(){
				    return null;
				}
				public String EJECACTIVIDADES_IDDefault(){
				
					return null;
				
				}
				public String EJECACTIVIDADES_IDComment(){
				
				    return "";
				
				}
				public String EJECACTIVIDADES_IDPattern(){
				
					return "";
				
				}
				public String EJECACTIVIDADES_IDOriginalDbColumnName(){
				
					return "EJECACTIVIDADES_ID";
				
				}

				
			    public String ESTADO_TRATAMIENTO;

				public String getESTADO_TRATAMIENTO () {
					return this.ESTADO_TRATAMIENTO;
				}

				public Boolean ESTADO_TRATAMIENTOIsNullable(){
				    return true;
				}
				public Boolean ESTADO_TRATAMIENTOIsKey(){
				    return false;
				}
				public Integer ESTADO_TRATAMIENTOLength(){
				    return null;
				}
				public Integer ESTADO_TRATAMIENTOPrecision(){
				    return null;
				}
				public String ESTADO_TRATAMIENTODefault(){
				
					return null;
				
				}
				public String ESTADO_TRATAMIENTOComment(){
				
				    return "";
				
				}
				public String ESTADO_TRATAMIENTOPattern(){
				
					return "";
				
				}
				public String ESTADO_TRATAMIENTOOriginalDbColumnName(){
				
					return "ESTADO_TRATAMIENTO";
				
				}

				
			    public String FINALIDAD_CONSULTA;

				public String getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return 200;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return 0;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return null;
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
					this.PERIODO = readString(dis);
					
					this.TRIPS = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_PESO = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.QUIRURGICO = readString(dis);
					
						this.EJECACTIVIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO_TRATAMIENTO = readString(dis);
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
					this.PERIODO = readString(dis);
					
					this.TRIPS = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_PESO = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.QUIRURGICO = readString(dis);
					
						this.EJECACTIVIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO_TRATAMIENTO = readString(dis);
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_PESO,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EJECACTIVIDADES_ID);
					
					// String
				
						writeString(this.ESTADO_TRATAMIENTO,dos);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_PESO,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EJECACTIVIDADES_ID);
					
					// String
				
						writeString(this.ESTADO_TRATAMIENTO,dos);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODFACTURA="+CODFACTURA);
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",CODPROCEDIMIENTO="+CODPROCEDIMIENTO);
		sb.append(",AMBITO="+AMBITO);
		sb.append(",FINALIDAD="+FINALIDAD);
		sb.append(",PERSONAL="+PERSONAL);
		sb.append(",CODDIAGPPAL="+CODDIAGPPAL);
		sb.append(",COMPLICACION="+COMPLICACION);
		sb.append(",FORMA_QUIRURGICO="+FORMA_QUIRURGICO);
		sb.append(",VPROCEDIMIENTO="+String.valueOf(VPROCEDIMIENTO));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",CODDIAGREL1="+CODDIAGREL1);
		sb.append(",CODDIAGREL2="+CODDIAGREL2);
		sb.append(",CODDIAGREL3="+CODDIAGREL3);
		sb.append(",PERIODO="+PERIODO);
		sb.append(",TRIPS="+TRIPS);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",PESO="+PESO);
		sb.append(",TALLA="+TALLA);
		sb.append(",UMEDIDA_PESO="+UMEDIDA_PESO);
		sb.append(",UMEDIDA_TALLA="+UMEDIDA_TALLA);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",ADMISION_ID="+String.valueOf(ADMISION_ID));
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",QUIRURGICO="+QUIRURGICO);
		sb.append(",EJECACTIVIDADES_ID="+String.valueOf(EJECACTIVIDADES_ID));
		sb.append(",ESTADO_TRATAMIENTO="+ESTADO_TRATAMIENTO);
		sb.append(",FINALIDAD_CONSULTA="+FINALIDAD_CONSULTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class rca_inStruct implements routines.system.IPersistableRow<rca_inStruct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String CODFACTURA;

				public String getCODFACTURA () {
					return this.CODFACTURA;
				}

				public Boolean CODFACTURAIsNullable(){
				    return true;
				}
				public Boolean CODFACTURAIsKey(){
				    return false;
				}
				public Integer CODFACTURALength(){
				    return 100;
				}
				public Integer CODFACTURAPrecision(){
				    return 0;
				}
				public String CODFACTURADefault(){
				
					return null;
				
				}
				public String CODFACTURAComment(){
				
				    return "N\u00FAmero de la factura";
				
				}
				public String CODFACTURAPattern(){
				
					return "";
				
				}
				public String CODFACTURAOriginalDbColumnName(){
				
					return "CODFACTURA";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return null;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return null;
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return 100;
				}
				public Integer CODPRESTADORPrecision(){
				    return 0;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "C\u00F3digo del prestador de servicios de salud";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 50;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "Tipo de identificaci\u00F3n usuario";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "N\u00FAmero de identificaci\u00F3n del usuario en el Sistema";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return 250;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "N\u00FAmero de la autorizaci\u00F3n";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public String CODPROCEDIMIENTO;

				public String getCODPROCEDIMIENTO () {
					return this.CODPROCEDIMIENTO;
				}

				public Boolean CODPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean CODPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer CODPROCEDIMIENTOLength(){
				    return 50;
				}
				public Integer CODPROCEDIMIENTOPrecision(){
				    return 0;
				}
				public String CODPROCEDIMIENTODefault(){
				
					return null;
				
				}
				public String CODPROCEDIMIENTOComment(){
				
				    return "C\u00F3digo del procedimiento";
				
				}
				public String CODPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String CODPROCEDIMIENTOOriginalDbColumnName(){
				
					return "CODPROCEDIMIENTO";
				
				}

				
			    public String AMBITO;

				public String getAMBITO () {
					return this.AMBITO;
				}

				public Boolean AMBITOIsNullable(){
				    return true;
				}
				public Boolean AMBITOIsKey(){
				    return false;
				}
				public Integer AMBITOLength(){
				    return 100;
				}
				public Integer AMBITOPrecision(){
				    return 0;
				}
				public String AMBITODefault(){
				
					return null;
				
				}
				public String AMBITOComment(){
				
				    return "\u00C1mbito de realizaci\u00F3n del procedimiento";
				
				}
				public String AMBITOPattern(){
				
					return "";
				
				}
				public String AMBITOOriginalDbColumnName(){
				
					return "AMBITO";
				
				}

				
			    public String FINALIDAD;

				public String getFINALIDAD () {
					return this.FINALIDAD;
				}

				public Boolean FINALIDADIsNullable(){
				    return true;
				}
				public Boolean FINALIDADIsKey(){
				    return false;
				}
				public Integer FINALIDADLength(){
				    return 50;
				}
				public Integer FINALIDADPrecision(){
				    return 0;
				}
				public String FINALIDADDefault(){
				
					return null;
				
				}
				public String FINALIDADComment(){
				
				    return "Finalidad del procedimiento";
				
				}
				public String FINALIDADPattern(){
				
					return "";
				
				}
				public String FINALIDADOriginalDbColumnName(){
				
					return "FINALIDAD";
				
				}

				
			    public String PERSONAL;

				public String getPERSONAL () {
					return this.PERSONAL;
				}

				public Boolean PERSONALIsNullable(){
				    return true;
				}
				public Boolean PERSONALIsKey(){
				    return false;
				}
				public Integer PERSONALLength(){
				    return 400;
				}
				public Integer PERSONALPrecision(){
				    return 0;
				}
				public String PERSONALDefault(){
				
					return null;
				
				}
				public String PERSONALComment(){
				
				    return "Personal que atiende";
				
				}
				public String PERSONALPattern(){
				
					return "";
				
				}
				public String PERSONALOriginalDbColumnName(){
				
					return "PERSONAL";
				
				}

				
			    public String CODDIAGPPAL;

				public String getCODDIAGPPAL () {
					return this.CODDIAGPPAL;
				}

				public Boolean CODDIAGPPALIsNullable(){
				    return true;
				}
				public Boolean CODDIAGPPALIsKey(){
				    return false;
				}
				public Integer CODDIAGPPALLength(){
				    return 50;
				}
				public Integer CODDIAGPPALPrecision(){
				    return 0;
				}
				public String CODDIAGPPALDefault(){
				
					return null;
				
				}
				public String CODDIAGPPALComment(){
				
				    return "C\u00F3digo Diagn\u00F3stico principal";
				
				}
				public String CODDIAGPPALPattern(){
				
					return "";
				
				}
				public String CODDIAGPPALOriginalDbColumnName(){
				
					return "CODDIAGPPAL";
				
				}

				
			    public String COMPLICACION;

				public String getCOMPLICACION () {
					return this.COMPLICACION;
				}

				public Boolean COMPLICACIONIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONIsKey(){
				    return false;
				}
				public Integer COMPLICACIONLength(){
				    return 50;
				}
				public Integer COMPLICACIONPrecision(){
				    return 0;
				}
				public String COMPLICACIONDefault(){
				
					return null;
				
				}
				public String COMPLICACIONComment(){
				
				    return "Complicaci\u00F3n";
				
				}
				public String COMPLICACIONPattern(){
				
					return "";
				
				}
				public String COMPLICACIONOriginalDbColumnName(){
				
					return "COMPLICACION";
				
				}

				
			    public String FORMA_QUIRURGICO;

				public String getFORMA_QUIRURGICO () {
					return this.FORMA_QUIRURGICO;
				}

				public Boolean FORMA_QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean FORMA_QUIRURGICOIsKey(){
				    return false;
				}
				public Integer FORMA_QUIRURGICOLength(){
				    return 50;
				}
				public Integer FORMA_QUIRURGICOPrecision(){
				    return 0;
				}
				public String FORMA_QUIRURGICODefault(){
				
					return null;
				
				}
				public String FORMA_QUIRURGICOComment(){
				
				    return "";
				
				}
				public String FORMA_QUIRURGICOPattern(){
				
					return "";
				
				}
				public String FORMA_QUIRURGICOOriginalDbColumnName(){
				
					return "FORMA_QUIRURGICO";
				
				}

				
			    public BigDecimal VPROCEDIMIENTO;

				public BigDecimal getVPROCEDIMIENTO () {
					return this.VPROCEDIMIENTO;
				}

				public Boolean VPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean VPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer VPROCEDIMIENTOLength(){
				    return 0;
				}
				public Integer VPROCEDIMIENTOPrecision(){
				    return null;
				}
				public String VPROCEDIMIENTODefault(){
				
					return null;
				
				}
				public String VPROCEDIMIENTOComment(){
				
				    return "Valor procedimiento";
				
				}
				public String VPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String VPROCEDIMIENTOOriginalDbColumnName(){
				
					return "VPROCEDIMIENTO";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 11;
				}
				public Integer FECHAPrecision(){
				    return 6;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha del procedimiento";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String CODDIAGREL1;

				public String getCODDIAGREL1 () {
					return this.CODDIAGREL1;
				}

				public Boolean CODDIAGREL1IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL1IsKey(){
				    return false;
				}
				public Integer CODDIAGREL1Length(){
				    return 50;
				}
				public Integer CODDIAGREL1Precision(){
				    return 0;
				}
				public String CODDIAGREL1Default(){
				
					return null;
				
				}
				public String CODDIAGREL1Comment(){
				
				    return "C\u00F3digo Diagn\u00F3stico relacionado";
				
				}
				public String CODDIAGREL1Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL1OriginalDbColumnName(){
				
					return "CODDIAGREL1";
				
				}

				
			    public String CODDIAGREL2;

				public String getCODDIAGREL2 () {
					return this.CODDIAGREL2;
				}

				public Boolean CODDIAGREL2IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL2IsKey(){
				    return false;
				}
				public Integer CODDIAGREL2Length(){
				    return 10;
				}
				public Integer CODDIAGREL2Precision(){
				    return 0;
				}
				public String CODDIAGREL2Default(){
				
					return null;
				
				}
				public String CODDIAGREL2Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL2Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL2OriginalDbColumnName(){
				
					return "CODDIAGREL2";
				
				}

				
			    public String CODDIAGREL3;

				public String getCODDIAGREL3 () {
					return this.CODDIAGREL3;
				}

				public Boolean CODDIAGREL3IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL3IsKey(){
				    return false;
				}
				public Integer CODDIAGREL3Length(){
				    return 10;
				}
				public Integer CODDIAGREL3Precision(){
				    return 0;
				}
				public String CODDIAGREL3Default(){
				
					return null;
				
				}
				public String CODDIAGREL3Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL3Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL3OriginalDbColumnName(){
				
					return "CODDIAGREL3";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 7;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public String TRIPS;

				public String getTRIPS () {
					return this.TRIPS;
				}

				public Boolean TRIPSIsNullable(){
				    return true;
				}
				public Boolean TRIPSIsKey(){
				    return false;
				}
				public Integer TRIPSLength(){
				    return 10;
				}
				public Integer TRIPSPrecision(){
				    return 0;
				}
				public String TRIPSDefault(){
				
					return null;
				
				}
				public String TRIPSComment(){
				
				    return "Tipo RIPS";
				
				}
				public String TRIPSPattern(){
				
					return "";
				
				}
				public String TRIPSOriginalDbColumnName(){
				
					return "TRIPS";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "FK - BGEN_PERSONAS";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - BGEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "Id de la fuerza del ESM de atencion";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "Sigla del tipo de documento del profesional asistencial que atiende";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "N\u00FAmero de identificacion del profesional asistencial que atiende";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "Nombre de la especialidad que atiende";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String PESO;

				public String getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 10;
				}
				public Integer PESOPrecision(){
				    return 0;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "Peso del paciente al momento de la atenci\u00F3n";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return 10;
				}
				public Integer TALLAPrecision(){
				    return 0;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "Altura del paciente la momento de la atenci\u00F3n ";
				
				}
				public String TALLAPattern(){
				
					return "";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public String UMEDIDA_PESO;

				public String getUMEDIDA_PESO () {
					return this.UMEDIDA_PESO;
				}

				public Boolean UMEDIDA_PESOIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_PESOIsKey(){
				    return false;
				}
				public Integer UMEDIDA_PESOLength(){
				    return 10;
				}
				public Integer UMEDIDA_PESOPrecision(){
				    return 0;
				}
				public String UMEDIDA_PESODefault(){
				
					return null;
				
				}
				public String UMEDIDA_PESOComment(){
				
				    return "Unidad de medida del peso del paciente";
				
				}
				public String UMEDIDA_PESOPattern(){
				
					return "";
				
				}
				public String UMEDIDA_PESOOriginalDbColumnName(){
				
					return "UMEDIDA_PESO";
				
				}

				
			    public String UMEDIDA_TALLA;

				public String getUMEDIDA_TALLA () {
					return this.UMEDIDA_TALLA;
				}

				public Boolean UMEDIDA_TALLAIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_TALLAIsKey(){
				    return false;
				}
				public Integer UMEDIDA_TALLALength(){
				    return 10;
				}
				public Integer UMEDIDA_TALLAPrecision(){
				    return 0;
				}
				public String UMEDIDA_TALLADefault(){
				
					return null;
				
				}
				public String UMEDIDA_TALLAComment(){
				
				    return "Unidad de medida de la talla del paciente";
				
				}
				public String UMEDIDA_TALLAPattern(){
				
					return "";
				
				}
				public String UMEDIDA_TALLAOriginalDbColumnName(){
				
					return "UMEDIDA_TALLA";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return 10;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return 0;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "Forma en que se almaceno ( Cargue, Automatico)";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 100;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "Tipo de afiliado ( No cotizante, cotizante pensionado o retirado, cotizante activo, beneficiario)";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "EDAD SIMPLE DE LA PERSONA AL MOMENTO DE LA ATENCI\u00D3N";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 10;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "Unidad de medida de la edad simple (A\u00F1os, Meses)";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "C\u00F3digo del grado (filtrar)";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "DESCRIPCION DEL GRADO MILITAR";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 100;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "Descripci\u00F3n de la clasificaci\u00F3n del grado";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal ADMISION_ID;

				public BigDecimal getADMISION_ID () {
					return this.ADMISION_ID;
				}

				public Boolean ADMISION_IDIsNullable(){
				    return true;
				}
				public Boolean ADMISION_IDIsKey(){
				    return false;
				}
				public Integer ADMISION_IDLength(){
				    return 0;
				}
				public Integer ADMISION_IDPrecision(){
				    return null;
				}
				public String ADMISION_IDDefault(){
				
					return null;
				
				}
				public String ADMISION_IDComment(){
				
				    return "ID de la admisi\u00F3n";
				
				}
				public String ADMISION_IDPattern(){
				
					return "";
				
				}
				public String ADMISION_IDOriginalDbColumnName(){
				
					return "ADMISION_ID";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return 2;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return 0;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return null;
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "C\u00F3digo de la clasificaci\u00F3n del grado (Filtrar)";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "ID BGEN_ESPECIALIDADES (Filtrar)";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String QUIRURGICO;

				public String getQUIRURGICO () {
					return this.QUIRURGICO;
				}

				public Boolean QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean QUIRURGICOIsKey(){
				    return false;
				}
				public Integer QUIRURGICOLength(){
				    return 20;
				}
				public Integer QUIRURGICOPrecision(){
				    return 0;
				}
				public String QUIRURGICODefault(){
				
					return null;
				
				}
				public String QUIRURGICOComment(){
				
				    return "Quir\u00FArgico ('Si', 'No')";
				
				}
				public String QUIRURGICOPattern(){
				
					return "";
				
				}
				public String QUIRURGICOOriginalDbColumnName(){
				
					return "QUIRURGICO";
				
				}

				
			    public BigDecimal EJECACTIVIDADES_ID;

				public BigDecimal getEJECACTIVIDADES_ID () {
					return this.EJECACTIVIDADES_ID;
				}

				public Boolean EJECACTIVIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean EJECACTIVIDADES_IDIsKey(){
				    return false;
				}
				public Integer EJECACTIVIDADES_IDLength(){
				    return null;
				}
				public Integer EJECACTIVIDADES_IDPrecision(){
				    return null;
				}
				public String EJECACTIVIDADES_IDDefault(){
				
					return null;
				
				}
				public String EJECACTIVIDADES_IDComment(){
				
				    return "";
				
				}
				public String EJECACTIVIDADES_IDPattern(){
				
					return "";
				
				}
				public String EJECACTIVIDADES_IDOriginalDbColumnName(){
				
					return "EJECACTIVIDADES_ID";
				
				}

				
			    public String ESTADO_TRATAMIENTO;

				public String getESTADO_TRATAMIENTO () {
					return this.ESTADO_TRATAMIENTO;
				}

				public Boolean ESTADO_TRATAMIENTOIsNullable(){
				    return true;
				}
				public Boolean ESTADO_TRATAMIENTOIsKey(){
				    return false;
				}
				public Integer ESTADO_TRATAMIENTOLength(){
				    return null;
				}
				public Integer ESTADO_TRATAMIENTOPrecision(){
				    return null;
				}
				public String ESTADO_TRATAMIENTODefault(){
				
					return null;
				
				}
				public String ESTADO_TRATAMIENTOComment(){
				
				    return "";
				
				}
				public String ESTADO_TRATAMIENTOPattern(){
				
					return "";
				
				}
				public String ESTADO_TRATAMIENTOOriginalDbColumnName(){
				
					return "ESTADO_TRATAMIENTO";
				
				}

				
			    public String FINALIDAD_CONSULTA;

				public String getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return 200;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return 0;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return null;
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
					this.PERIODO = readString(dis);
					
					this.TRIPS = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_PESO = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.QUIRURGICO = readString(dis);
					
						this.EJECACTIVIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO_TRATAMIENTO = readString(dis);
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
					this.PERIODO = readString(dis);
					
					this.TRIPS = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_PESO = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.QUIRURGICO = readString(dis);
					
						this.EJECACTIVIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO_TRATAMIENTO = readString(dis);
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_PESO,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EJECACTIVIDADES_ID);
					
					// String
				
						writeString(this.ESTADO_TRATAMIENTO,dos);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_PESO,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EJECACTIVIDADES_ID);
					
					// String
				
						writeString(this.ESTADO_TRATAMIENTO,dos);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODFACTURA="+CODFACTURA);
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",CODPROCEDIMIENTO="+CODPROCEDIMIENTO);
		sb.append(",AMBITO="+AMBITO);
		sb.append(",FINALIDAD="+FINALIDAD);
		sb.append(",PERSONAL="+PERSONAL);
		sb.append(",CODDIAGPPAL="+CODDIAGPPAL);
		sb.append(",COMPLICACION="+COMPLICACION);
		sb.append(",FORMA_QUIRURGICO="+FORMA_QUIRURGICO);
		sb.append(",VPROCEDIMIENTO="+String.valueOf(VPROCEDIMIENTO));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",CODDIAGREL1="+CODDIAGREL1);
		sb.append(",CODDIAGREL2="+CODDIAGREL2);
		sb.append(",CODDIAGREL3="+CODDIAGREL3);
		sb.append(",PERIODO="+PERIODO);
		sb.append(",TRIPS="+TRIPS);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",PESO="+PESO);
		sb.append(",TALLA="+TALLA);
		sb.append(",UMEDIDA_PESO="+UMEDIDA_PESO);
		sb.append(",UMEDIDA_TALLA="+UMEDIDA_TALLA);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",ADMISION_ID="+String.valueOf(ADMISION_ID));
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",QUIRURGICO="+QUIRURGICO);
		sb.append(",EJECACTIVIDADES_ID="+String.valueOf(EJECACTIVIDADES_ID));
		sb.append(",ESTADO_TRATAMIENTO="+ESTADO_TRATAMIENTO);
		sb.append(",FINALIDAD_CONSULTA="+FINALIDAD_CONSULTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(rca_inStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String CODFACTURA;

				public String getCODFACTURA () {
					return this.CODFACTURA;
				}

				public Boolean CODFACTURAIsNullable(){
				    return true;
				}
				public Boolean CODFACTURAIsKey(){
				    return false;
				}
				public Integer CODFACTURALength(){
				    return 0;
				}
				public Integer CODFACTURAPrecision(){
				    return 0;
				}
				public String CODFACTURADefault(){
				
					return null;
				
				}
				public String CODFACTURAComment(){
				
				    return "";
				
				}
				public String CODFACTURAPattern(){
				
					return "";
				
				}
				public String CODFACTURAOriginalDbColumnName(){
				
					return "CODFACTURA";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return 100;
				}
				public Integer CODPRESTADORPrecision(){
				    return 0;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public BigDecimal PACIENTE_ID;

				public BigDecimal getPACIENTE_ID () {
					return this.PACIENTE_ID;
				}

				public Boolean PACIENTE_IDIsNullable(){
				    return false;
				}
				public Boolean PACIENTE_IDIsKey(){
				    return false;
				}
				public Integer PACIENTE_IDLength(){
				    return 0;
				}
				public Integer PACIENTE_IDPrecision(){
				    return null;
				}
				public String PACIENTE_IDDefault(){
				
					return "";
				
				}
				public String PACIENTE_IDComment(){
				
				    return "";
				
				}
				public String PACIENTE_IDPattern(){
				
					return "";
				
				}
				public String PACIENTE_IDOriginalDbColumnName(){
				
					return "PACIENTE_ID";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 5;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return false;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return 250;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public String CODPROCEDIMIENTO;

				public String getCODPROCEDIMIENTO () {
					return this.CODPROCEDIMIENTO;
				}

				public Boolean CODPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean CODPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer CODPROCEDIMIENTOLength(){
				    return 100;
				}
				public Integer CODPROCEDIMIENTOPrecision(){
				    return 0;
				}
				public String CODPROCEDIMIENTODefault(){
				
					return null;
				
				}
				public String CODPROCEDIMIENTOComment(){
				
				    return "";
				
				}
				public String CODPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String CODPROCEDIMIENTOOriginalDbColumnName(){
				
					return "CODPROCEDIMIENTO";
				
				}

				
			    public String AMBITO;

				public String getAMBITO () {
					return this.AMBITO;
				}

				public Boolean AMBITOIsNullable(){
				    return true;
				}
				public Boolean AMBITOIsKey(){
				    return false;
				}
				public Integer AMBITOLength(){
				    return 1;
				}
				public Integer AMBITOPrecision(){
				    return 0;
				}
				public String AMBITODefault(){
				
					return null;
				
				}
				public String AMBITOComment(){
				
				    return "";
				
				}
				public String AMBITOPattern(){
				
					return "";
				
				}
				public String AMBITOOriginalDbColumnName(){
				
					return "AMBITO";
				
				}

				
			    public String FINALIDAD;

				public String getFINALIDAD () {
					return this.FINALIDAD;
				}

				public Boolean FINALIDADIsNullable(){
				    return true;
				}
				public Boolean FINALIDADIsKey(){
				    return false;
				}
				public Integer FINALIDADLength(){
				    return 100;
				}
				public Integer FINALIDADPrecision(){
				    return 0;
				}
				public String FINALIDADDefault(){
				
					return null;
				
				}
				public String FINALIDADComment(){
				
				    return "";
				
				}
				public String FINALIDADPattern(){
				
					return "";
				
				}
				public String FINALIDADOriginalDbColumnName(){
				
					return "FINALIDAD";
				
				}

				
			    public String PERSONAL;

				public String getPERSONAL () {
					return this.PERSONAL;
				}

				public Boolean PERSONALIsNullable(){
				    return true;
				}
				public Boolean PERSONALIsKey(){
				    return false;
				}
				public Integer PERSONALLength(){
				    return 21;
				}
				public Integer PERSONALPrecision(){
				    return 0;
				}
				public String PERSONALDefault(){
				
					return null;
				
				}
				public String PERSONALComment(){
				
				    return "";
				
				}
				public String PERSONALPattern(){
				
					return "";
				
				}
				public String PERSONALOriginalDbColumnName(){
				
					return "PERSONAL";
				
				}

				
			    public String CODDIAGPPAL;

				public String getCODDIAGPPAL () {
					return this.CODDIAGPPAL;
				}

				public Boolean CODDIAGPPALIsNullable(){
				    return true;
				}
				public Boolean CODDIAGPPALIsKey(){
				    return false;
				}
				public Integer CODDIAGPPALLength(){
				    return 10;
				}
				public Integer CODDIAGPPALPrecision(){
				    return 0;
				}
				public String CODDIAGPPALDefault(){
				
					return null;
				
				}
				public String CODDIAGPPALComment(){
				
				    return "";
				
				}
				public String CODDIAGPPALPattern(){
				
					return "";
				
				}
				public String CODDIAGPPALOriginalDbColumnName(){
				
					return "CODDIAGPPAL";
				
				}

				
			    public String COMPLICACION;

				public String getCOMPLICACION () {
					return this.COMPLICACION;
				}

				public Boolean COMPLICACIONIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONIsKey(){
				    return false;
				}
				public Integer COMPLICACIONLength(){
				    return 10;
				}
				public Integer COMPLICACIONPrecision(){
				    return 0;
				}
				public String COMPLICACIONDefault(){
				
					return null;
				
				}
				public String COMPLICACIONComment(){
				
				    return "";
				
				}
				public String COMPLICACIONPattern(){
				
					return "";
				
				}
				public String COMPLICACIONOriginalDbColumnName(){
				
					return "COMPLICACION";
				
				}

				
			    public String QUIRURGICO;

				public String getQUIRURGICO () {
					return this.QUIRURGICO;
				}

				public Boolean QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean QUIRURGICOIsKey(){
				    return false;
				}
				public Integer QUIRURGICOLength(){
				    return 10;
				}
				public Integer QUIRURGICOPrecision(){
				    return 0;
				}
				public String QUIRURGICODefault(){
				
					return null;
				
				}
				public String QUIRURGICOComment(){
				
				    return "";
				
				}
				public String QUIRURGICOPattern(){
				
					return "";
				
				}
				public String QUIRURGICOOriginalDbColumnName(){
				
					return "QUIRURGICO";
				
				}

				
			    public String FORMA_QUIRURGICO;

				public String getFORMA_QUIRURGICO () {
					return this.FORMA_QUIRURGICO;
				}

				public Boolean FORMA_QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean FORMA_QUIRURGICOIsKey(){
				    return false;
				}
				public Integer FORMA_QUIRURGICOLength(){
				    return 100;
				}
				public Integer FORMA_QUIRURGICOPrecision(){
				    return 0;
				}
				public String FORMA_QUIRURGICODefault(){
				
					return null;
				
				}
				public String FORMA_QUIRURGICOComment(){
				
				    return "";
				
				}
				public String FORMA_QUIRURGICOPattern(){
				
					return "";
				
				}
				public String FORMA_QUIRURGICOOriginalDbColumnName(){
				
					return "FORMA_QUIRURGICO";
				
				}

				
			    public BigDecimal VPROCEDIMIENTO;

				public BigDecimal getVPROCEDIMIENTO () {
					return this.VPROCEDIMIENTO;
				}

				public Boolean VPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean VPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer VPROCEDIMIENTOLength(){
				    return 0;
				}
				public Integer VPROCEDIMIENTOPrecision(){
				    return null;
				}
				public String VPROCEDIMIENTODefault(){
				
					return "";
				
				}
				public String VPROCEDIMIENTOComment(){
				
				    return "";
				
				}
				public String VPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String VPROCEDIMIENTOOriginalDbColumnName(){
				
					return "VPROCEDIMIENTO";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String CODDIAGREL1;

				public String getCODDIAGREL1 () {
					return this.CODDIAGREL1;
				}

				public Boolean CODDIAGREL1IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL1IsKey(){
				    return false;
				}
				public Integer CODDIAGREL1Length(){
				    return 10;
				}
				public Integer CODDIAGREL1Precision(){
				    return 0;
				}
				public String CODDIAGREL1Default(){
				
					return null;
				
				}
				public String CODDIAGREL1Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL1Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL1OriginalDbColumnName(){
				
					return "CODDIAGREL1";
				
				}

				
			    public String CODDIAGREL2;

				public String getCODDIAGREL2 () {
					return this.CODDIAGREL2;
				}

				public Boolean CODDIAGREL2IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL2IsKey(){
				    return false;
				}
				public Integer CODDIAGREL2Length(){
				    return 10;
				}
				public Integer CODDIAGREL2Precision(){
				    return 0;
				}
				public String CODDIAGREL2Default(){
				
					return null;
				
				}
				public String CODDIAGREL2Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL2Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL2OriginalDbColumnName(){
				
					return "CODDIAGREL2";
				
				}

				
			    public String CODDIAGREL3;

				public String getCODDIAGREL3 () {
					return this.CODDIAGREL3;
				}

				public Boolean CODDIAGREL3IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL3IsKey(){
				    return false;
				}
				public Integer CODDIAGREL3Length(){
				    return 10;
				}
				public Integer CODDIAGREL3Precision(){
				    return 0;
				}
				public String CODDIAGREL3Default(){
				
					return null;
				
				}
				public String CODDIAGREL3Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL3Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL3OriginalDbColumnName(){
				
					return "CODDIAGREL3";
				
				}

				
			    public BigDecimal PROFESIONAL_ID;

				public BigDecimal getPROFESIONAL_ID () {
					return this.PROFESIONAL_ID;
				}

				public Boolean PROFESIONAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROFESIONAL_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONAL_IDLength(){
				    return 0;
				}
				public Integer PROFESIONAL_IDPrecision(){
				    return null;
				}
				public String PROFESIONAL_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONAL_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONAL_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONAL_IDOriginalDbColumnName(){
				
					return "PROFESIONAL_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 31;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return 0;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 5;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 100;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return 0;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return null;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				
			    public String FINALIDAD_CONSULTA;

				public String getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return 200;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return 0;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return null;
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTE_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.QUIRURGICO = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTE_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.QUIRURGICO = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PACIENTE_ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PACIENTE_ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODFACTURA="+CODFACTURA);
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",PACIENTE_ID="+String.valueOf(PACIENTE_ID));
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",CODPROCEDIMIENTO="+CODPROCEDIMIENTO);
		sb.append(",AMBITO="+AMBITO);
		sb.append(",FINALIDAD="+FINALIDAD);
		sb.append(",PERSONAL="+PERSONAL);
		sb.append(",CODDIAGPPAL="+CODDIAGPPAL);
		sb.append(",COMPLICACION="+COMPLICACION);
		sb.append(",QUIRURGICO="+QUIRURGICO);
		sb.append(",FORMA_QUIRURGICO="+FORMA_QUIRURGICO);
		sb.append(",VPROCEDIMIENTO="+String.valueOf(VPROCEDIMIENTO));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",CODDIAGREL1="+CODDIAGREL1);
		sb.append(",CODDIAGREL2="+CODDIAGREL2);
		sb.append(",CODDIAGREL3="+CODDIAGREL3);
		sb.append(",PROFESIONAL_ID="+String.valueOf(PROFESIONAL_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
		sb.append(",FINALIDAD_CONSULTA="+FINALIDAD_CONSULTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_13Struct implements routines.system.IPersistableRow<after_tOracleInput_13Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String CODFACTURA;

				public String getCODFACTURA () {
					return this.CODFACTURA;
				}

				public Boolean CODFACTURAIsNullable(){
				    return true;
				}
				public Boolean CODFACTURAIsKey(){
				    return false;
				}
				public Integer CODFACTURALength(){
				    return 0;
				}
				public Integer CODFACTURAPrecision(){
				    return 0;
				}
				public String CODFACTURADefault(){
				
					return null;
				
				}
				public String CODFACTURAComment(){
				
				    return "";
				
				}
				public String CODFACTURAPattern(){
				
					return "";
				
				}
				public String CODFACTURAOriginalDbColumnName(){
				
					return "CODFACTURA";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return 100;
				}
				public Integer CODPRESTADORPrecision(){
				    return 0;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public BigDecimal PACIENTE_ID;

				public BigDecimal getPACIENTE_ID () {
					return this.PACIENTE_ID;
				}

				public Boolean PACIENTE_IDIsNullable(){
				    return false;
				}
				public Boolean PACIENTE_IDIsKey(){
				    return false;
				}
				public Integer PACIENTE_IDLength(){
				    return 0;
				}
				public Integer PACIENTE_IDPrecision(){
				    return null;
				}
				public String PACIENTE_IDDefault(){
				
					return "";
				
				}
				public String PACIENTE_IDComment(){
				
				    return "";
				
				}
				public String PACIENTE_IDPattern(){
				
					return "";
				
				}
				public String PACIENTE_IDOriginalDbColumnName(){
				
					return "PACIENTE_ID";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 5;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return false;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return 250;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public String CODPROCEDIMIENTO;

				public String getCODPROCEDIMIENTO () {
					return this.CODPROCEDIMIENTO;
				}

				public Boolean CODPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean CODPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer CODPROCEDIMIENTOLength(){
				    return 100;
				}
				public Integer CODPROCEDIMIENTOPrecision(){
				    return 0;
				}
				public String CODPROCEDIMIENTODefault(){
				
					return null;
				
				}
				public String CODPROCEDIMIENTOComment(){
				
				    return "";
				
				}
				public String CODPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String CODPROCEDIMIENTOOriginalDbColumnName(){
				
					return "CODPROCEDIMIENTO";
				
				}

				
			    public String AMBITO;

				public String getAMBITO () {
					return this.AMBITO;
				}

				public Boolean AMBITOIsNullable(){
				    return true;
				}
				public Boolean AMBITOIsKey(){
				    return false;
				}
				public Integer AMBITOLength(){
				    return 1;
				}
				public Integer AMBITOPrecision(){
				    return 0;
				}
				public String AMBITODefault(){
				
					return null;
				
				}
				public String AMBITOComment(){
				
				    return "";
				
				}
				public String AMBITOPattern(){
				
					return "";
				
				}
				public String AMBITOOriginalDbColumnName(){
				
					return "AMBITO";
				
				}

				
			    public String FINALIDAD;

				public String getFINALIDAD () {
					return this.FINALIDAD;
				}

				public Boolean FINALIDADIsNullable(){
				    return true;
				}
				public Boolean FINALIDADIsKey(){
				    return false;
				}
				public Integer FINALIDADLength(){
				    return 100;
				}
				public Integer FINALIDADPrecision(){
				    return 0;
				}
				public String FINALIDADDefault(){
				
					return null;
				
				}
				public String FINALIDADComment(){
				
				    return "";
				
				}
				public String FINALIDADPattern(){
				
					return "";
				
				}
				public String FINALIDADOriginalDbColumnName(){
				
					return "FINALIDAD";
				
				}

				
			    public String PERSONAL;

				public String getPERSONAL () {
					return this.PERSONAL;
				}

				public Boolean PERSONALIsNullable(){
				    return true;
				}
				public Boolean PERSONALIsKey(){
				    return false;
				}
				public Integer PERSONALLength(){
				    return 21;
				}
				public Integer PERSONALPrecision(){
				    return 0;
				}
				public String PERSONALDefault(){
				
					return null;
				
				}
				public String PERSONALComment(){
				
				    return "";
				
				}
				public String PERSONALPattern(){
				
					return "";
				
				}
				public String PERSONALOriginalDbColumnName(){
				
					return "PERSONAL";
				
				}

				
			    public String CODDIAGPPAL;

				public String getCODDIAGPPAL () {
					return this.CODDIAGPPAL;
				}

				public Boolean CODDIAGPPALIsNullable(){
				    return true;
				}
				public Boolean CODDIAGPPALIsKey(){
				    return false;
				}
				public Integer CODDIAGPPALLength(){
				    return 10;
				}
				public Integer CODDIAGPPALPrecision(){
				    return 0;
				}
				public String CODDIAGPPALDefault(){
				
					return null;
				
				}
				public String CODDIAGPPALComment(){
				
				    return "";
				
				}
				public String CODDIAGPPALPattern(){
				
					return "";
				
				}
				public String CODDIAGPPALOriginalDbColumnName(){
				
					return "CODDIAGPPAL";
				
				}

				
			    public String COMPLICACION;

				public String getCOMPLICACION () {
					return this.COMPLICACION;
				}

				public Boolean COMPLICACIONIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONIsKey(){
				    return false;
				}
				public Integer COMPLICACIONLength(){
				    return 10;
				}
				public Integer COMPLICACIONPrecision(){
				    return 0;
				}
				public String COMPLICACIONDefault(){
				
					return null;
				
				}
				public String COMPLICACIONComment(){
				
				    return "";
				
				}
				public String COMPLICACIONPattern(){
				
					return "";
				
				}
				public String COMPLICACIONOriginalDbColumnName(){
				
					return "COMPLICACION";
				
				}

				
			    public String QUIRURGICO;

				public String getQUIRURGICO () {
					return this.QUIRURGICO;
				}

				public Boolean QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean QUIRURGICOIsKey(){
				    return false;
				}
				public Integer QUIRURGICOLength(){
				    return 10;
				}
				public Integer QUIRURGICOPrecision(){
				    return 0;
				}
				public String QUIRURGICODefault(){
				
					return null;
				
				}
				public String QUIRURGICOComment(){
				
				    return "";
				
				}
				public String QUIRURGICOPattern(){
				
					return "";
				
				}
				public String QUIRURGICOOriginalDbColumnName(){
				
					return "QUIRURGICO";
				
				}

				
			    public String FORMA_QUIRURGICO;

				public String getFORMA_QUIRURGICO () {
					return this.FORMA_QUIRURGICO;
				}

				public Boolean FORMA_QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean FORMA_QUIRURGICOIsKey(){
				    return false;
				}
				public Integer FORMA_QUIRURGICOLength(){
				    return 100;
				}
				public Integer FORMA_QUIRURGICOPrecision(){
				    return 0;
				}
				public String FORMA_QUIRURGICODefault(){
				
					return null;
				
				}
				public String FORMA_QUIRURGICOComment(){
				
				    return "";
				
				}
				public String FORMA_QUIRURGICOPattern(){
				
					return "";
				
				}
				public String FORMA_QUIRURGICOOriginalDbColumnName(){
				
					return "FORMA_QUIRURGICO";
				
				}

				
			    public BigDecimal VPROCEDIMIENTO;

				public BigDecimal getVPROCEDIMIENTO () {
					return this.VPROCEDIMIENTO;
				}

				public Boolean VPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean VPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer VPROCEDIMIENTOLength(){
				    return 0;
				}
				public Integer VPROCEDIMIENTOPrecision(){
				    return null;
				}
				public String VPROCEDIMIENTODefault(){
				
					return "";
				
				}
				public String VPROCEDIMIENTOComment(){
				
				    return "";
				
				}
				public String VPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String VPROCEDIMIENTOOriginalDbColumnName(){
				
					return "VPROCEDIMIENTO";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String CODDIAGREL1;

				public String getCODDIAGREL1 () {
					return this.CODDIAGREL1;
				}

				public Boolean CODDIAGREL1IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL1IsKey(){
				    return false;
				}
				public Integer CODDIAGREL1Length(){
				    return 10;
				}
				public Integer CODDIAGREL1Precision(){
				    return 0;
				}
				public String CODDIAGREL1Default(){
				
					return null;
				
				}
				public String CODDIAGREL1Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL1Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL1OriginalDbColumnName(){
				
					return "CODDIAGREL1";
				
				}

				
			    public String CODDIAGREL2;

				public String getCODDIAGREL2 () {
					return this.CODDIAGREL2;
				}

				public Boolean CODDIAGREL2IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL2IsKey(){
				    return false;
				}
				public Integer CODDIAGREL2Length(){
				    return 10;
				}
				public Integer CODDIAGREL2Precision(){
				    return 0;
				}
				public String CODDIAGREL2Default(){
				
					return null;
				
				}
				public String CODDIAGREL2Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL2Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL2OriginalDbColumnName(){
				
					return "CODDIAGREL2";
				
				}

				
			    public String CODDIAGREL3;

				public String getCODDIAGREL3 () {
					return this.CODDIAGREL3;
				}

				public Boolean CODDIAGREL3IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL3IsKey(){
				    return false;
				}
				public Integer CODDIAGREL3Length(){
				    return 10;
				}
				public Integer CODDIAGREL3Precision(){
				    return 0;
				}
				public String CODDIAGREL3Default(){
				
					return null;
				
				}
				public String CODDIAGREL3Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL3Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL3OriginalDbColumnName(){
				
					return "CODDIAGREL3";
				
				}

				
			    public BigDecimal PROFESIONAL_ID;

				public BigDecimal getPROFESIONAL_ID () {
					return this.PROFESIONAL_ID;
				}

				public Boolean PROFESIONAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROFESIONAL_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONAL_IDLength(){
				    return 0;
				}
				public Integer PROFESIONAL_IDPrecision(){
				    return null;
				}
				public String PROFESIONAL_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONAL_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONAL_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONAL_IDOriginalDbColumnName(){
				
					return "PROFESIONAL_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 31;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return 0;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 5;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 100;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return 0;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return null;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				
			    public String FINALIDAD_CONSULTA;

				public String getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return 200;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return 0;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return null;
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTE_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.QUIRURGICO = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTE_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.QUIRURGICO = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PACIENTE_ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PACIENTE_ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODFACTURA="+CODFACTURA);
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",PACIENTE_ID="+String.valueOf(PACIENTE_ID));
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",CODPROCEDIMIENTO="+CODPROCEDIMIENTO);
		sb.append(",AMBITO="+AMBITO);
		sb.append(",FINALIDAD="+FINALIDAD);
		sb.append(",PERSONAL="+PERSONAL);
		sb.append(",CODDIAGPPAL="+CODDIAGPPAL);
		sb.append(",COMPLICACION="+COMPLICACION);
		sb.append(",QUIRURGICO="+QUIRURGICO);
		sb.append(",FORMA_QUIRURGICO="+FORMA_QUIRURGICO);
		sb.append(",VPROCEDIMIENTO="+String.valueOf(VPROCEDIMIENTO));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",CODDIAGREL1="+CODDIAGREL1);
		sb.append(",CODDIAGREL2="+CODDIAGREL2);
		sb.append(",CODDIAGREL3="+CODDIAGREL3);
		sb.append(",PROFESIONAL_ID="+String.valueOf(PROFESIONAL_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
		sb.append(",FINALIDAD_CONSULTA="+FINALIDAD_CONSULTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class cgp_inStruct implements routines.system.IPersistableRow<cgp_inStruct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String CODFACTURA;

				public String getCODFACTURA () {
					return this.CODFACTURA;
				}

				public Boolean CODFACTURAIsNullable(){
				    return true;
				}
				public Boolean CODFACTURAIsKey(){
				    return false;
				}
				public Integer CODFACTURALength(){
				    return 100;
				}
				public Integer CODFACTURAPrecision(){
				    return 0;
				}
				public String CODFACTURADefault(){
				
					return null;
				
				}
				public String CODFACTURAComment(){
				
				    return "N\u00FAmero de la factura";
				
				}
				public String CODFACTURAPattern(){
				
					return "";
				
				}
				public String CODFACTURAOriginalDbColumnName(){
				
					return "CODFACTURA";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return null;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return null;
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return 100;
				}
				public Integer CODPRESTADORPrecision(){
				    return 0;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "C\u00F3digo del prestador de servicios de salud";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 50;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "Tipo de identificaci\u00F3n usuario";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "N\u00FAmero de identificaci\u00F3n del usuario en el Sistema";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return 250;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "N\u00FAmero de la autorizaci\u00F3n";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public String CODPROCEDIMIENTO;

				public String getCODPROCEDIMIENTO () {
					return this.CODPROCEDIMIENTO;
				}

				public Boolean CODPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean CODPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer CODPROCEDIMIENTOLength(){
				    return 50;
				}
				public Integer CODPROCEDIMIENTOPrecision(){
				    return 0;
				}
				public String CODPROCEDIMIENTODefault(){
				
					return null;
				
				}
				public String CODPROCEDIMIENTOComment(){
				
				    return "C\u00F3digo del procedimiento";
				
				}
				public String CODPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String CODPROCEDIMIENTOOriginalDbColumnName(){
				
					return "CODPROCEDIMIENTO";
				
				}

				
			    public String AMBITO;

				public String getAMBITO () {
					return this.AMBITO;
				}

				public Boolean AMBITOIsNullable(){
				    return true;
				}
				public Boolean AMBITOIsKey(){
				    return false;
				}
				public Integer AMBITOLength(){
				    return 100;
				}
				public Integer AMBITOPrecision(){
				    return 0;
				}
				public String AMBITODefault(){
				
					return null;
				
				}
				public String AMBITOComment(){
				
				    return "\u00C1mbito de realizaci\u00F3n del procedimiento";
				
				}
				public String AMBITOPattern(){
				
					return "";
				
				}
				public String AMBITOOriginalDbColumnName(){
				
					return "AMBITO";
				
				}

				
			    public String FINALIDAD;

				public String getFINALIDAD () {
					return this.FINALIDAD;
				}

				public Boolean FINALIDADIsNullable(){
				    return true;
				}
				public Boolean FINALIDADIsKey(){
				    return false;
				}
				public Integer FINALIDADLength(){
				    return 50;
				}
				public Integer FINALIDADPrecision(){
				    return 0;
				}
				public String FINALIDADDefault(){
				
					return null;
				
				}
				public String FINALIDADComment(){
				
				    return "Finalidad del procedimiento";
				
				}
				public String FINALIDADPattern(){
				
					return "";
				
				}
				public String FINALIDADOriginalDbColumnName(){
				
					return "FINALIDAD";
				
				}

				
			    public String PERSONAL;

				public String getPERSONAL () {
					return this.PERSONAL;
				}

				public Boolean PERSONALIsNullable(){
				    return true;
				}
				public Boolean PERSONALIsKey(){
				    return false;
				}
				public Integer PERSONALLength(){
				    return 400;
				}
				public Integer PERSONALPrecision(){
				    return 0;
				}
				public String PERSONALDefault(){
				
					return null;
				
				}
				public String PERSONALComment(){
				
				    return "Personal que atiende";
				
				}
				public String PERSONALPattern(){
				
					return "";
				
				}
				public String PERSONALOriginalDbColumnName(){
				
					return "PERSONAL";
				
				}

				
			    public String CODDIAGPPAL;

				public String getCODDIAGPPAL () {
					return this.CODDIAGPPAL;
				}

				public Boolean CODDIAGPPALIsNullable(){
				    return true;
				}
				public Boolean CODDIAGPPALIsKey(){
				    return false;
				}
				public Integer CODDIAGPPALLength(){
				    return 50;
				}
				public Integer CODDIAGPPALPrecision(){
				    return 0;
				}
				public String CODDIAGPPALDefault(){
				
					return null;
				
				}
				public String CODDIAGPPALComment(){
				
				    return "C\u00F3digo Diagn\u00F3stico principal";
				
				}
				public String CODDIAGPPALPattern(){
				
					return "";
				
				}
				public String CODDIAGPPALOriginalDbColumnName(){
				
					return "CODDIAGPPAL";
				
				}

				
			    public String COMPLICACION;

				public String getCOMPLICACION () {
					return this.COMPLICACION;
				}

				public Boolean COMPLICACIONIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONIsKey(){
				    return false;
				}
				public Integer COMPLICACIONLength(){
				    return 50;
				}
				public Integer COMPLICACIONPrecision(){
				    return 0;
				}
				public String COMPLICACIONDefault(){
				
					return null;
				
				}
				public String COMPLICACIONComment(){
				
				    return "Complicaci\u00F3n";
				
				}
				public String COMPLICACIONPattern(){
				
					return "";
				
				}
				public String COMPLICACIONOriginalDbColumnName(){
				
					return "COMPLICACION";
				
				}

				
			    public String FORMA_QUIRURGICO;

				public String getFORMA_QUIRURGICO () {
					return this.FORMA_QUIRURGICO;
				}

				public Boolean FORMA_QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean FORMA_QUIRURGICOIsKey(){
				    return false;
				}
				public Integer FORMA_QUIRURGICOLength(){
				    return 50;
				}
				public Integer FORMA_QUIRURGICOPrecision(){
				    return 0;
				}
				public String FORMA_QUIRURGICODefault(){
				
					return null;
				
				}
				public String FORMA_QUIRURGICOComment(){
				
				    return "";
				
				}
				public String FORMA_QUIRURGICOPattern(){
				
					return "";
				
				}
				public String FORMA_QUIRURGICOOriginalDbColumnName(){
				
					return "FORMA_QUIRURGICO";
				
				}

				
			    public BigDecimal VPROCEDIMIENTO;

				public BigDecimal getVPROCEDIMIENTO () {
					return this.VPROCEDIMIENTO;
				}

				public Boolean VPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean VPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer VPROCEDIMIENTOLength(){
				    return 0;
				}
				public Integer VPROCEDIMIENTOPrecision(){
				    return null;
				}
				public String VPROCEDIMIENTODefault(){
				
					return null;
				
				}
				public String VPROCEDIMIENTOComment(){
				
				    return "Valor procedimiento";
				
				}
				public String VPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String VPROCEDIMIENTOOriginalDbColumnName(){
				
					return "VPROCEDIMIENTO";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 11;
				}
				public Integer FECHAPrecision(){
				    return 6;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha del procedimiento";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String CODDIAGREL1;

				public String getCODDIAGREL1 () {
					return this.CODDIAGREL1;
				}

				public Boolean CODDIAGREL1IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL1IsKey(){
				    return false;
				}
				public Integer CODDIAGREL1Length(){
				    return 50;
				}
				public Integer CODDIAGREL1Precision(){
				    return 0;
				}
				public String CODDIAGREL1Default(){
				
					return null;
				
				}
				public String CODDIAGREL1Comment(){
				
				    return "C\u00F3digo Diagn\u00F3stico relacionado";
				
				}
				public String CODDIAGREL1Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL1OriginalDbColumnName(){
				
					return "CODDIAGREL1";
				
				}

				
			    public String CODDIAGREL2;

				public String getCODDIAGREL2 () {
					return this.CODDIAGREL2;
				}

				public Boolean CODDIAGREL2IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL2IsKey(){
				    return false;
				}
				public Integer CODDIAGREL2Length(){
				    return 10;
				}
				public Integer CODDIAGREL2Precision(){
				    return 0;
				}
				public String CODDIAGREL2Default(){
				
					return null;
				
				}
				public String CODDIAGREL2Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL2Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL2OriginalDbColumnName(){
				
					return "CODDIAGREL2";
				
				}

				
			    public String CODDIAGREL3;

				public String getCODDIAGREL3 () {
					return this.CODDIAGREL3;
				}

				public Boolean CODDIAGREL3IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL3IsKey(){
				    return false;
				}
				public Integer CODDIAGREL3Length(){
				    return 10;
				}
				public Integer CODDIAGREL3Precision(){
				    return 0;
				}
				public String CODDIAGREL3Default(){
				
					return null;
				
				}
				public String CODDIAGREL3Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL3Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL3OriginalDbColumnName(){
				
					return "CODDIAGREL3";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 7;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public String TRIPS;

				public String getTRIPS () {
					return this.TRIPS;
				}

				public Boolean TRIPSIsNullable(){
				    return true;
				}
				public Boolean TRIPSIsKey(){
				    return false;
				}
				public Integer TRIPSLength(){
				    return 10;
				}
				public Integer TRIPSPrecision(){
				    return 0;
				}
				public String TRIPSDefault(){
				
					return null;
				
				}
				public String TRIPSComment(){
				
				    return "Tipo RIPS";
				
				}
				public String TRIPSPattern(){
				
					return "";
				
				}
				public String TRIPSOriginalDbColumnName(){
				
					return "TRIPS";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "FK - BGEN_PERSONAS";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - BGEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "Id de la fuerza del ESM de atencion";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "Sigla del tipo de documento del profesional asistencial que atiende";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "N\u00FAmero de identificacion del profesional asistencial que atiende";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "Nombre de la especialidad que atiende";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String PESO;

				public String getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 10;
				}
				public Integer PESOPrecision(){
				    return 0;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "Peso del paciente al momento de la atenci\u00F3n";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return 10;
				}
				public Integer TALLAPrecision(){
				    return 0;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "Altura del paciente la momento de la atenci\u00F3n ";
				
				}
				public String TALLAPattern(){
				
					return "";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public String UMEDIDA_PESO;

				public String getUMEDIDA_PESO () {
					return this.UMEDIDA_PESO;
				}

				public Boolean UMEDIDA_PESOIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_PESOIsKey(){
				    return false;
				}
				public Integer UMEDIDA_PESOLength(){
				    return 10;
				}
				public Integer UMEDIDA_PESOPrecision(){
				    return 0;
				}
				public String UMEDIDA_PESODefault(){
				
					return null;
				
				}
				public String UMEDIDA_PESOComment(){
				
				    return "Unidad de medida del peso del paciente";
				
				}
				public String UMEDIDA_PESOPattern(){
				
					return "";
				
				}
				public String UMEDIDA_PESOOriginalDbColumnName(){
				
					return "UMEDIDA_PESO";
				
				}

				
			    public String UMEDIDA_TALLA;

				public String getUMEDIDA_TALLA () {
					return this.UMEDIDA_TALLA;
				}

				public Boolean UMEDIDA_TALLAIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_TALLAIsKey(){
				    return false;
				}
				public Integer UMEDIDA_TALLALength(){
				    return 10;
				}
				public Integer UMEDIDA_TALLAPrecision(){
				    return 0;
				}
				public String UMEDIDA_TALLADefault(){
				
					return null;
				
				}
				public String UMEDIDA_TALLAComment(){
				
				    return "Unidad de medida de la talla del paciente";
				
				}
				public String UMEDIDA_TALLAPattern(){
				
					return "";
				
				}
				public String UMEDIDA_TALLAOriginalDbColumnName(){
				
					return "UMEDIDA_TALLA";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return 10;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return 0;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "Forma en que se almaceno ( Cargue, Automatico)";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 100;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "Tipo de afiliado ( No cotizante, cotizante pensionado o retirado, cotizante activo, beneficiario)";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "EDAD SIMPLE DE LA PERSONA AL MOMENTO DE LA ATENCI\u00D3N";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 10;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "Unidad de medida de la edad simple (A\u00F1os, Meses)";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "C\u00F3digo del grado (filtrar)";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "DESCRIPCION DEL GRADO MILITAR";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 100;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "Descripci\u00F3n de la clasificaci\u00F3n del grado";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal ADMISION_ID;

				public BigDecimal getADMISION_ID () {
					return this.ADMISION_ID;
				}

				public Boolean ADMISION_IDIsNullable(){
				    return true;
				}
				public Boolean ADMISION_IDIsKey(){
				    return false;
				}
				public Integer ADMISION_IDLength(){
				    return 0;
				}
				public Integer ADMISION_IDPrecision(){
				    return null;
				}
				public String ADMISION_IDDefault(){
				
					return null;
				
				}
				public String ADMISION_IDComment(){
				
				    return "ID de la admisi\u00F3n";
				
				}
				public String ADMISION_IDPattern(){
				
					return "";
				
				}
				public String ADMISION_IDOriginalDbColumnName(){
				
					return "ADMISION_ID";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return 2;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return 0;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return null;
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "C\u00F3digo de la clasificaci\u00F3n del grado (Filtrar)";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "ID BGEN_ESPECIALIDADES (Filtrar)";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String QUIRURGICO;

				public String getQUIRURGICO () {
					return this.QUIRURGICO;
				}

				public Boolean QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean QUIRURGICOIsKey(){
				    return false;
				}
				public Integer QUIRURGICOLength(){
				    return 20;
				}
				public Integer QUIRURGICOPrecision(){
				    return 0;
				}
				public String QUIRURGICODefault(){
				
					return null;
				
				}
				public String QUIRURGICOComment(){
				
				    return "Quir\u00FArgico ('Si', 'No')";
				
				}
				public String QUIRURGICOPattern(){
				
					return "";
				
				}
				public String QUIRURGICOOriginalDbColumnName(){
				
					return "QUIRURGICO";
				
				}

				
			    public BigDecimal EJECACTIVIDADES_ID;

				public BigDecimal getEJECACTIVIDADES_ID () {
					return this.EJECACTIVIDADES_ID;
				}

				public Boolean EJECACTIVIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean EJECACTIVIDADES_IDIsKey(){
				    return false;
				}
				public Integer EJECACTIVIDADES_IDLength(){
				    return null;
				}
				public Integer EJECACTIVIDADES_IDPrecision(){
				    return null;
				}
				public String EJECACTIVIDADES_IDDefault(){
				
					return null;
				
				}
				public String EJECACTIVIDADES_IDComment(){
				
				    return "";
				
				}
				public String EJECACTIVIDADES_IDPattern(){
				
					return "";
				
				}
				public String EJECACTIVIDADES_IDOriginalDbColumnName(){
				
					return "EJECACTIVIDADES_ID";
				
				}

				
			    public String ESTADO_TRATAMIENTO;

				public String getESTADO_TRATAMIENTO () {
					return this.ESTADO_TRATAMIENTO;
				}

				public Boolean ESTADO_TRATAMIENTOIsNullable(){
				    return true;
				}
				public Boolean ESTADO_TRATAMIENTOIsKey(){
				    return false;
				}
				public Integer ESTADO_TRATAMIENTOLength(){
				    return null;
				}
				public Integer ESTADO_TRATAMIENTOPrecision(){
				    return null;
				}
				public String ESTADO_TRATAMIENTODefault(){
				
					return null;
				
				}
				public String ESTADO_TRATAMIENTOComment(){
				
				    return "";
				
				}
				public String ESTADO_TRATAMIENTOPattern(){
				
					return "";
				
				}
				public String ESTADO_TRATAMIENTOOriginalDbColumnName(){
				
					return "ESTADO_TRATAMIENTO";
				
				}

				
			    public String FINALIDAD_CONSULTA;

				public String getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return 200;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return 0;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return null;
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
					this.PERIODO = readString(dis);
					
					this.TRIPS = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_PESO = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.QUIRURGICO = readString(dis);
					
						this.EJECACTIVIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO_TRATAMIENTO = readString(dis);
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
					this.PERIODO = readString(dis);
					
					this.TRIPS = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_PESO = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.QUIRURGICO = readString(dis);
					
						this.EJECACTIVIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO_TRATAMIENTO = readString(dis);
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_PESO,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EJECACTIVIDADES_ID);
					
					// String
				
						writeString(this.ESTADO_TRATAMIENTO,dos);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_PESO,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EJECACTIVIDADES_ID);
					
					// String
				
						writeString(this.ESTADO_TRATAMIENTO,dos);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODFACTURA="+CODFACTURA);
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",CODPROCEDIMIENTO="+CODPROCEDIMIENTO);
		sb.append(",AMBITO="+AMBITO);
		sb.append(",FINALIDAD="+FINALIDAD);
		sb.append(",PERSONAL="+PERSONAL);
		sb.append(",CODDIAGPPAL="+CODDIAGPPAL);
		sb.append(",COMPLICACION="+COMPLICACION);
		sb.append(",FORMA_QUIRURGICO="+FORMA_QUIRURGICO);
		sb.append(",VPROCEDIMIENTO="+String.valueOf(VPROCEDIMIENTO));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",CODDIAGREL1="+CODDIAGREL1);
		sb.append(",CODDIAGREL2="+CODDIAGREL2);
		sb.append(",CODDIAGREL3="+CODDIAGREL3);
		sb.append(",PERIODO="+PERIODO);
		sb.append(",TRIPS="+TRIPS);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",PESO="+PESO);
		sb.append(",TALLA="+TALLA);
		sb.append(",UMEDIDA_PESO="+UMEDIDA_PESO);
		sb.append(",UMEDIDA_TALLA="+UMEDIDA_TALLA);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",ADMISION_ID="+String.valueOf(ADMISION_ID));
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",QUIRURGICO="+QUIRURGICO);
		sb.append(",EJECACTIVIDADES_ID="+String.valueOf(EJECACTIVIDADES_ID));
		sb.append(",ESTADO_TRATAMIENTO="+ESTADO_TRATAMIENTO);
		sb.append(",FINALIDAD_CONSULTA="+FINALIDAD_CONSULTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cgp_inStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String TIPO;

				public String getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 10;
				}
				public Integer TIPOPrecision(){
				    return 0;
				}
				public String TIPODefault(){
				
					return null;
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return 100;
				}
				public Integer CODPRESTADORPrecision(){
				    return 0;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 5;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return 0;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public String CODPROCEDIMIENTO;

				public String getCODPROCEDIMIENTO () {
					return this.CODPROCEDIMIENTO;
				}

				public Boolean CODPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean CODPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer CODPROCEDIMIENTOLength(){
				    return 100;
				}
				public Integer CODPROCEDIMIENTOPrecision(){
				    return 0;
				}
				public String CODPROCEDIMIENTODefault(){
				
					return null;
				
				}
				public String CODPROCEDIMIENTOComment(){
				
				    return "";
				
				}
				public String CODPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String CODPROCEDIMIENTOOriginalDbColumnName(){
				
					return "CODPROCEDIMIENTO";
				
				}

				
			    public String AMBITO;

				public String getAMBITO () {
					return this.AMBITO;
				}

				public Boolean AMBITOIsNullable(){
				    return true;
				}
				public Boolean AMBITOIsKey(){
				    return false;
				}
				public Integer AMBITOLength(){
				    return 11;
				}
				public Integer AMBITOPrecision(){
				    return 0;
				}
				public String AMBITODefault(){
				
					return null;
				
				}
				public String AMBITOComment(){
				
				    return "";
				
				}
				public String AMBITOPattern(){
				
					return "";
				
				}
				public String AMBITOOriginalDbColumnName(){
				
					return "AMBITO";
				
				}

				
			    public String FINALIDAD;

				public String getFINALIDAD () {
					return this.FINALIDAD;
				}

				public Boolean FINALIDADIsNullable(){
				    return true;
				}
				public Boolean FINALIDADIsKey(){
				    return false;
				}
				public Integer FINALIDADLength(){
				    return 0;
				}
				public Integer FINALIDADPrecision(){
				    return 0;
				}
				public String FINALIDADDefault(){
				
					return "";
				
				}
				public String FINALIDADComment(){
				
				    return "";
				
				}
				public String FINALIDADPattern(){
				
					return "";
				
				}
				public String FINALIDADOriginalDbColumnName(){
				
					return "FINALIDAD";
				
				}

				
			    public String PERSONAL;

				public String getPERSONAL () {
					return this.PERSONAL;
				}

				public Boolean PERSONALIsNullable(){
				    return true;
				}
				public Boolean PERSONALIsKey(){
				    return false;
				}
				public Integer PERSONALLength(){
				    return 21;
				}
				public Integer PERSONALPrecision(){
				    return 0;
				}
				public String PERSONALDefault(){
				
					return "";
				
				}
				public String PERSONALComment(){
				
				    return "";
				
				}
				public String PERSONALPattern(){
				
					return "";
				
				}
				public String PERSONALOriginalDbColumnName(){
				
					return "PERSONAL";
				
				}

				
			    public String CODDIAGPPAL;

				public String getCODDIAGPPAL () {
					return this.CODDIAGPPAL;
				}

				public Boolean CODDIAGPPALIsNullable(){
				    return true;
				}
				public Boolean CODDIAGPPALIsKey(){
				    return false;
				}
				public Integer CODDIAGPPALLength(){
				    return 10;
				}
				public Integer CODDIAGPPALPrecision(){
				    return 0;
				}
				public String CODDIAGPPALDefault(){
				
					return "";
				
				}
				public String CODDIAGPPALComment(){
				
				    return "";
				
				}
				public String CODDIAGPPALPattern(){
				
					return "";
				
				}
				public String CODDIAGPPALOriginalDbColumnName(){
				
					return "CODDIAGPPAL";
				
				}

				
			    public String COMPLICACION;

				public String getCOMPLICACION () {
					return this.COMPLICACION;
				}

				public Boolean COMPLICACIONIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONIsKey(){
				    return false;
				}
				public Integer COMPLICACIONLength(){
				    return 10;
				}
				public Integer COMPLICACIONPrecision(){
				    return 0;
				}
				public String COMPLICACIONDefault(){
				
					return "";
				
				}
				public String COMPLICACIONComment(){
				
				    return "";
				
				}
				public String COMPLICACIONPattern(){
				
					return "";
				
				}
				public String COMPLICACIONOriginalDbColumnName(){
				
					return "COMPLICACION";
				
				}

				
			    public String FORMA_QUIRURGICO;

				public String getFORMA_QUIRURGICO () {
					return this.FORMA_QUIRURGICO;
				}

				public Boolean FORMA_QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean FORMA_QUIRURGICOIsKey(){
				    return false;
				}
				public Integer FORMA_QUIRURGICOLength(){
				    return 0;
				}
				public Integer FORMA_QUIRURGICOPrecision(){
				    return 0;
				}
				public String FORMA_QUIRURGICODefault(){
				
					return "";
				
				}
				public String FORMA_QUIRURGICOComment(){
				
				    return "";
				
				}
				public String FORMA_QUIRURGICOPattern(){
				
					return "";
				
				}
				public String FORMA_QUIRURGICOOriginalDbColumnName(){
				
					return "FORMA_QUIRURGICO";
				
				}

				
			    public String VPROCEDIMIENTO;

				public String getVPROCEDIMIENTO () {
					return this.VPROCEDIMIENTO;
				}

				public Boolean VPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean VPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer VPROCEDIMIENTOLength(){
				    return 0;
				}
				public Integer VPROCEDIMIENTOPrecision(){
				    return 0;
				}
				public String VPROCEDIMIENTODefault(){
				
					return "";
				
				}
				public String VPROCEDIMIENTOComment(){
				
				    return "";
				
				}
				public String VPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String VPROCEDIMIENTOOriginalDbColumnName(){
				
					return "VPROCEDIMIENTO";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return "";
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String CODDIAGREL1;

				public String getCODDIAGREL1 () {
					return this.CODDIAGREL1;
				}

				public Boolean CODDIAGREL1IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL1IsKey(){
				    return false;
				}
				public Integer CODDIAGREL1Length(){
				    return 10;
				}
				public Integer CODDIAGREL1Precision(){
				    return 0;
				}
				public String CODDIAGREL1Default(){
				
					return "";
				
				}
				public String CODDIAGREL1Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL1Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL1OriginalDbColumnName(){
				
					return "CODDIAGREL1";
				
				}

				
			    public String CODDIAGREL2;

				public String getCODDIAGREL2 () {
					return this.CODDIAGREL2;
				}

				public Boolean CODDIAGREL2IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL2IsKey(){
				    return false;
				}
				public Integer CODDIAGREL2Length(){
				    return 10;
				}
				public Integer CODDIAGREL2Precision(){
				    return 0;
				}
				public String CODDIAGREL2Default(){
				
					return "";
				
				}
				public String CODDIAGREL2Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL2Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL2OriginalDbColumnName(){
				
					return "CODDIAGREL2";
				
				}

				
			    public String CODDIAGREL3;

				public String getCODDIAGREL3 () {
					return this.CODDIAGREL3;
				}

				public Boolean CODDIAGREL3IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL3IsKey(){
				    return false;
				}
				public Integer CODDIAGREL3Length(){
				    return 10;
				}
				public Integer CODDIAGREL3Precision(){
				    return 0;
				}
				public String CODDIAGREL3Default(){
				
					return "";
				
				}
				public String CODDIAGREL3Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL3Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL3OriginalDbColumnName(){
				
					return "CODDIAGREL3";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 31;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return "";
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 5;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return "";
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return "";
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return "";
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 100;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return "";
				
				}
				public String CLASEGRDComment(){
				
				    return "";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return 0;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return null;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				
			    public String ACTOQUIRURGICO;

				public String getACTOQUIRURGICO () {
					return this.ACTOQUIRURGICO;
				}

				public Boolean ACTOQUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean ACTOQUIRURGICOIsKey(){
				    return false;
				}
				public Integer ACTOQUIRURGICOLength(){
				    return 10;
				}
				public Integer ACTOQUIRURGICOPrecision(){
				    return 0;
				}
				public String ACTOQUIRURGICODefault(){
				
					return "";
				
				}
				public String ACTOQUIRURGICOComment(){
				
				    return "";
				
				}
				public String ACTOQUIRURGICOPattern(){
				
					return "";
				
				}
				public String ACTOQUIRURGICOOriginalDbColumnName(){
				
					return "ACTOQUIRURGICO";
				
				}

				
			    public BigDecimal EJECACTIVIDADES_ID;

				public BigDecimal getEJECACTIVIDADES_ID () {
					return this.EJECACTIVIDADES_ID;
				}

				public Boolean EJECACTIVIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean EJECACTIVIDADES_IDIsKey(){
				    return false;
				}
				public Integer EJECACTIVIDADES_IDLength(){
				    return 0;
				}
				public Integer EJECACTIVIDADES_IDPrecision(){
				    return null;
				}
				public String EJECACTIVIDADES_IDDefault(){
				
					return "";
				
				}
				public String EJECACTIVIDADES_IDComment(){
				
				    return "";
				
				}
				public String EJECACTIVIDADES_IDPattern(){
				
					return "";
				
				}
				public String EJECACTIVIDADES_IDOriginalDbColumnName(){
				
					return "EJECACTIVIDADES_ID";
				
				}

				
			    public String FINALIDAD_CONSULTA;

				public String getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return 200;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return 0;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.TIPO = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
					this.VPROCEDIMIENTO = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
					this.ACTOQUIRURGICO = readString(dis);
					
						this.EJECACTIVIDADES_ID = (BigDecimal) dis.readObject();
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.TIPO = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
					this.VPROCEDIMIENTO = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
					this.ACTOQUIRURGICO = readString(dis);
					
						this.EJECACTIVIDADES_ID = (BigDecimal) dis.readObject();
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TIPO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// String
				
						writeString(this.VPROCEDIMIENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
					// String
				
						writeString(this.ACTOQUIRURGICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EJECACTIVIDADES_ID);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.TIPO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// String
				
						writeString(this.VPROCEDIMIENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
					// String
				
						writeString(this.ACTOQUIRURGICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EJECACTIVIDADES_ID);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIPO="+TIPO);
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",CODPROCEDIMIENTO="+CODPROCEDIMIENTO);
		sb.append(",AMBITO="+AMBITO);
		sb.append(",FINALIDAD="+FINALIDAD);
		sb.append(",PERSONAL="+PERSONAL);
		sb.append(",CODDIAGPPAL="+CODDIAGPPAL);
		sb.append(",COMPLICACION="+COMPLICACION);
		sb.append(",FORMA_QUIRURGICO="+FORMA_QUIRURGICO);
		sb.append(",VPROCEDIMIENTO="+VPROCEDIMIENTO);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",CODDIAGREL1="+CODDIAGREL1);
		sb.append(",CODDIAGREL2="+CODDIAGREL2);
		sb.append(",CODDIAGREL3="+CODDIAGREL3);
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
		sb.append(",ACTOQUIRURGICO="+ACTOQUIRURGICO);
		sb.append(",EJECACTIVIDADES_ID="+String.valueOf(EJECACTIVIDADES_ID));
		sb.append(",FINALIDAD_CONSULTA="+FINALIDAD_CONSULTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class odo_inStruct implements routines.system.IPersistableRow<odo_inStruct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String CODFACTURA;

				public String getCODFACTURA () {
					return this.CODFACTURA;
				}

				public Boolean CODFACTURAIsNullable(){
				    return true;
				}
				public Boolean CODFACTURAIsKey(){
				    return false;
				}
				public Integer CODFACTURALength(){
				    return 100;
				}
				public Integer CODFACTURAPrecision(){
				    return 0;
				}
				public String CODFACTURADefault(){
				
					return null;
				
				}
				public String CODFACTURAComment(){
				
				    return "N\u00FAmero de la factura";
				
				}
				public String CODFACTURAPattern(){
				
					return "";
				
				}
				public String CODFACTURAOriginalDbColumnName(){
				
					return "CODFACTURA";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return null;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return null;
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return 100;
				}
				public Integer CODPRESTADORPrecision(){
				    return 0;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "C\u00F3digo del prestador de servicios de salud";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 50;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "Tipo de identificaci\u00F3n usuario";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "N\u00FAmero de identificaci\u00F3n del usuario en el Sistema";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return 250;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "N\u00FAmero de la autorizaci\u00F3n";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public String CODPROCEDIMIENTO;

				public String getCODPROCEDIMIENTO () {
					return this.CODPROCEDIMIENTO;
				}

				public Boolean CODPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean CODPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer CODPROCEDIMIENTOLength(){
				    return 50;
				}
				public Integer CODPROCEDIMIENTOPrecision(){
				    return 0;
				}
				public String CODPROCEDIMIENTODefault(){
				
					return null;
				
				}
				public String CODPROCEDIMIENTOComment(){
				
				    return "C\u00F3digo del procedimiento";
				
				}
				public String CODPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String CODPROCEDIMIENTOOriginalDbColumnName(){
				
					return "CODPROCEDIMIENTO";
				
				}

				
			    public String AMBITO;

				public String getAMBITO () {
					return this.AMBITO;
				}

				public Boolean AMBITOIsNullable(){
				    return true;
				}
				public Boolean AMBITOIsKey(){
				    return false;
				}
				public Integer AMBITOLength(){
				    return 100;
				}
				public Integer AMBITOPrecision(){
				    return 0;
				}
				public String AMBITODefault(){
				
					return null;
				
				}
				public String AMBITOComment(){
				
				    return "\u00C1mbito de realizaci\u00F3n del procedimiento";
				
				}
				public String AMBITOPattern(){
				
					return "";
				
				}
				public String AMBITOOriginalDbColumnName(){
				
					return "AMBITO";
				
				}

				
			    public String FINALIDAD;

				public String getFINALIDAD () {
					return this.FINALIDAD;
				}

				public Boolean FINALIDADIsNullable(){
				    return true;
				}
				public Boolean FINALIDADIsKey(){
				    return false;
				}
				public Integer FINALIDADLength(){
				    return 50;
				}
				public Integer FINALIDADPrecision(){
				    return 0;
				}
				public String FINALIDADDefault(){
				
					return null;
				
				}
				public String FINALIDADComment(){
				
				    return "Finalidad del procedimiento";
				
				}
				public String FINALIDADPattern(){
				
					return "";
				
				}
				public String FINALIDADOriginalDbColumnName(){
				
					return "FINALIDAD";
				
				}

				
			    public String PERSONAL;

				public String getPERSONAL () {
					return this.PERSONAL;
				}

				public Boolean PERSONALIsNullable(){
				    return true;
				}
				public Boolean PERSONALIsKey(){
				    return false;
				}
				public Integer PERSONALLength(){
				    return 400;
				}
				public Integer PERSONALPrecision(){
				    return 0;
				}
				public String PERSONALDefault(){
				
					return null;
				
				}
				public String PERSONALComment(){
				
				    return "Personal que atiende";
				
				}
				public String PERSONALPattern(){
				
					return "";
				
				}
				public String PERSONALOriginalDbColumnName(){
				
					return "PERSONAL";
				
				}

				
			    public String CODDIAGPPAL;

				public String getCODDIAGPPAL () {
					return this.CODDIAGPPAL;
				}

				public Boolean CODDIAGPPALIsNullable(){
				    return true;
				}
				public Boolean CODDIAGPPALIsKey(){
				    return false;
				}
				public Integer CODDIAGPPALLength(){
				    return 50;
				}
				public Integer CODDIAGPPALPrecision(){
				    return 0;
				}
				public String CODDIAGPPALDefault(){
				
					return null;
				
				}
				public String CODDIAGPPALComment(){
				
				    return "C\u00F3digo Diagn\u00F3stico principal";
				
				}
				public String CODDIAGPPALPattern(){
				
					return "";
				
				}
				public String CODDIAGPPALOriginalDbColumnName(){
				
					return "CODDIAGPPAL";
				
				}

				
			    public String COMPLICACION;

				public String getCOMPLICACION () {
					return this.COMPLICACION;
				}

				public Boolean COMPLICACIONIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONIsKey(){
				    return false;
				}
				public Integer COMPLICACIONLength(){
				    return 50;
				}
				public Integer COMPLICACIONPrecision(){
				    return 0;
				}
				public String COMPLICACIONDefault(){
				
					return null;
				
				}
				public String COMPLICACIONComment(){
				
				    return "Complicaci\u00F3n";
				
				}
				public String COMPLICACIONPattern(){
				
					return "";
				
				}
				public String COMPLICACIONOriginalDbColumnName(){
				
					return "COMPLICACION";
				
				}

				
			    public String FORMA_QUIRURGICO;

				public String getFORMA_QUIRURGICO () {
					return this.FORMA_QUIRURGICO;
				}

				public Boolean FORMA_QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean FORMA_QUIRURGICOIsKey(){
				    return false;
				}
				public Integer FORMA_QUIRURGICOLength(){
				    return 50;
				}
				public Integer FORMA_QUIRURGICOPrecision(){
				    return 0;
				}
				public String FORMA_QUIRURGICODefault(){
				
					return null;
				
				}
				public String FORMA_QUIRURGICOComment(){
				
				    return "";
				
				}
				public String FORMA_QUIRURGICOPattern(){
				
					return "";
				
				}
				public String FORMA_QUIRURGICOOriginalDbColumnName(){
				
					return "FORMA_QUIRURGICO";
				
				}

				
			    public BigDecimal VPROCEDIMIENTO;

				public BigDecimal getVPROCEDIMIENTO () {
					return this.VPROCEDIMIENTO;
				}

				public Boolean VPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean VPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer VPROCEDIMIENTOLength(){
				    return 0;
				}
				public Integer VPROCEDIMIENTOPrecision(){
				    return null;
				}
				public String VPROCEDIMIENTODefault(){
				
					return null;
				
				}
				public String VPROCEDIMIENTOComment(){
				
				    return "Valor procedimiento";
				
				}
				public String VPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String VPROCEDIMIENTOOriginalDbColumnName(){
				
					return "VPROCEDIMIENTO";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 11;
				}
				public Integer FECHAPrecision(){
				    return 6;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha del procedimiento";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String CODDIAGREL1;

				public String getCODDIAGREL1 () {
					return this.CODDIAGREL1;
				}

				public Boolean CODDIAGREL1IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL1IsKey(){
				    return false;
				}
				public Integer CODDIAGREL1Length(){
				    return 50;
				}
				public Integer CODDIAGREL1Precision(){
				    return 0;
				}
				public String CODDIAGREL1Default(){
				
					return null;
				
				}
				public String CODDIAGREL1Comment(){
				
				    return "C\u00F3digo Diagn\u00F3stico relacionado";
				
				}
				public String CODDIAGREL1Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL1OriginalDbColumnName(){
				
					return "CODDIAGREL1";
				
				}

				
			    public String CODDIAGREL2;

				public String getCODDIAGREL2 () {
					return this.CODDIAGREL2;
				}

				public Boolean CODDIAGREL2IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL2IsKey(){
				    return false;
				}
				public Integer CODDIAGREL2Length(){
				    return 10;
				}
				public Integer CODDIAGREL2Precision(){
				    return 0;
				}
				public String CODDIAGREL2Default(){
				
					return null;
				
				}
				public String CODDIAGREL2Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL2Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL2OriginalDbColumnName(){
				
					return "CODDIAGREL2";
				
				}

				
			    public String CODDIAGREL3;

				public String getCODDIAGREL3 () {
					return this.CODDIAGREL3;
				}

				public Boolean CODDIAGREL3IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL3IsKey(){
				    return false;
				}
				public Integer CODDIAGREL3Length(){
				    return 10;
				}
				public Integer CODDIAGREL3Precision(){
				    return 0;
				}
				public String CODDIAGREL3Default(){
				
					return null;
				
				}
				public String CODDIAGREL3Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL3Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL3OriginalDbColumnName(){
				
					return "CODDIAGREL3";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 7;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public String TRIPS;

				public String getTRIPS () {
					return this.TRIPS;
				}

				public Boolean TRIPSIsNullable(){
				    return true;
				}
				public Boolean TRIPSIsKey(){
				    return false;
				}
				public Integer TRIPSLength(){
				    return 10;
				}
				public Integer TRIPSPrecision(){
				    return 0;
				}
				public String TRIPSDefault(){
				
					return null;
				
				}
				public String TRIPSComment(){
				
				    return "Tipo RIPS";
				
				}
				public String TRIPSPattern(){
				
					return "";
				
				}
				public String TRIPSOriginalDbColumnName(){
				
					return "TRIPS";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "FK - BGEN_PERSONAS";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - BGEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "Id de la fuerza del ESM de atencion";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "Sigla del tipo de documento del profesional asistencial que atiende";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "N\u00FAmero de identificacion del profesional asistencial que atiende";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "Nombre de la especialidad que atiende";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String PESO;

				public String getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 10;
				}
				public Integer PESOPrecision(){
				    return 0;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "Peso del paciente al momento de la atenci\u00F3n";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return 10;
				}
				public Integer TALLAPrecision(){
				    return 0;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "Altura del paciente la momento de la atenci\u00F3n ";
				
				}
				public String TALLAPattern(){
				
					return "";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public String UMEDIDA_PESO;

				public String getUMEDIDA_PESO () {
					return this.UMEDIDA_PESO;
				}

				public Boolean UMEDIDA_PESOIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_PESOIsKey(){
				    return false;
				}
				public Integer UMEDIDA_PESOLength(){
				    return 10;
				}
				public Integer UMEDIDA_PESOPrecision(){
				    return 0;
				}
				public String UMEDIDA_PESODefault(){
				
					return null;
				
				}
				public String UMEDIDA_PESOComment(){
				
				    return "Unidad de medida del peso del paciente";
				
				}
				public String UMEDIDA_PESOPattern(){
				
					return "";
				
				}
				public String UMEDIDA_PESOOriginalDbColumnName(){
				
					return "UMEDIDA_PESO";
				
				}

				
			    public String UMEDIDA_TALLA;

				public String getUMEDIDA_TALLA () {
					return this.UMEDIDA_TALLA;
				}

				public Boolean UMEDIDA_TALLAIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_TALLAIsKey(){
				    return false;
				}
				public Integer UMEDIDA_TALLALength(){
				    return 10;
				}
				public Integer UMEDIDA_TALLAPrecision(){
				    return 0;
				}
				public String UMEDIDA_TALLADefault(){
				
					return null;
				
				}
				public String UMEDIDA_TALLAComment(){
				
				    return "Unidad de medida de la talla del paciente";
				
				}
				public String UMEDIDA_TALLAPattern(){
				
					return "";
				
				}
				public String UMEDIDA_TALLAOriginalDbColumnName(){
				
					return "UMEDIDA_TALLA";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return 10;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return 0;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "Forma en que se almaceno ( Cargue, Automatico)";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 100;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "Tipo de afiliado ( No cotizante, cotizante pensionado o retirado, cotizante activo, beneficiario)";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "EDAD SIMPLE DE LA PERSONA AL MOMENTO DE LA ATENCI\u00D3N";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 10;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "Unidad de medida de la edad simple (A\u00F1os, Meses)";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "C\u00F3digo del grado (filtrar)";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "DESCRIPCION DEL GRADO MILITAR";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 100;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "Descripci\u00F3n de la clasificaci\u00F3n del grado";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal ADMISION_ID;

				public BigDecimal getADMISION_ID () {
					return this.ADMISION_ID;
				}

				public Boolean ADMISION_IDIsNullable(){
				    return true;
				}
				public Boolean ADMISION_IDIsKey(){
				    return false;
				}
				public Integer ADMISION_IDLength(){
				    return 0;
				}
				public Integer ADMISION_IDPrecision(){
				    return null;
				}
				public String ADMISION_IDDefault(){
				
					return null;
				
				}
				public String ADMISION_IDComment(){
				
				    return "ID de la admisi\u00F3n";
				
				}
				public String ADMISION_IDPattern(){
				
					return "";
				
				}
				public String ADMISION_IDOriginalDbColumnName(){
				
					return "ADMISION_ID";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return 2;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return 0;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return null;
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "C\u00F3digo de la clasificaci\u00F3n del grado (Filtrar)";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "ID BGEN_ESPECIALIDADES (Filtrar)";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String QUIRURGICO;

				public String getQUIRURGICO () {
					return this.QUIRURGICO;
				}

				public Boolean QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean QUIRURGICOIsKey(){
				    return false;
				}
				public Integer QUIRURGICOLength(){
				    return 20;
				}
				public Integer QUIRURGICOPrecision(){
				    return 0;
				}
				public String QUIRURGICODefault(){
				
					return null;
				
				}
				public String QUIRURGICOComment(){
				
				    return "Quir\u00FArgico ('Si', 'No')";
				
				}
				public String QUIRURGICOPattern(){
				
					return "";
				
				}
				public String QUIRURGICOOriginalDbColumnName(){
				
					return "QUIRURGICO";
				
				}

				
			    public BigDecimal EJECACTIVIDADES_ID;

				public BigDecimal getEJECACTIVIDADES_ID () {
					return this.EJECACTIVIDADES_ID;
				}

				public Boolean EJECACTIVIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean EJECACTIVIDADES_IDIsKey(){
				    return false;
				}
				public Integer EJECACTIVIDADES_IDLength(){
				    return null;
				}
				public Integer EJECACTIVIDADES_IDPrecision(){
				    return null;
				}
				public String EJECACTIVIDADES_IDDefault(){
				
					return null;
				
				}
				public String EJECACTIVIDADES_IDComment(){
				
				    return "";
				
				}
				public String EJECACTIVIDADES_IDPattern(){
				
					return "";
				
				}
				public String EJECACTIVIDADES_IDOriginalDbColumnName(){
				
					return "EJECACTIVIDADES_ID";
				
				}

				
			    public String ESTADO_TRATAMIENTO;

				public String getESTADO_TRATAMIENTO () {
					return this.ESTADO_TRATAMIENTO;
				}

				public Boolean ESTADO_TRATAMIENTOIsNullable(){
				    return true;
				}
				public Boolean ESTADO_TRATAMIENTOIsKey(){
				    return false;
				}
				public Integer ESTADO_TRATAMIENTOLength(){
				    return null;
				}
				public Integer ESTADO_TRATAMIENTOPrecision(){
				    return null;
				}
				public String ESTADO_TRATAMIENTODefault(){
				
					return null;
				
				}
				public String ESTADO_TRATAMIENTOComment(){
				
				    return "";
				
				}
				public String ESTADO_TRATAMIENTOPattern(){
				
					return "";
				
				}
				public String ESTADO_TRATAMIENTOOriginalDbColumnName(){
				
					return "ESTADO_TRATAMIENTO";
				
				}

				
			    public String FINALIDAD_CONSULTA;

				public String getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return 200;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return 0;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return null;
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
					this.PERIODO = readString(dis);
					
					this.TRIPS = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_PESO = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.QUIRURGICO = readString(dis);
					
						this.EJECACTIVIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO_TRATAMIENTO = readString(dis);
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
					this.PERIODO = readString(dis);
					
					this.TRIPS = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_PESO = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.QUIRURGICO = readString(dis);
					
						this.EJECACTIVIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO_TRATAMIENTO = readString(dis);
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_PESO,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EJECACTIVIDADES_ID);
					
					// String
				
						writeString(this.ESTADO_TRATAMIENTO,dos);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_PESO,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EJECACTIVIDADES_ID);
					
					// String
				
						writeString(this.ESTADO_TRATAMIENTO,dos);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODFACTURA="+CODFACTURA);
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",CODPROCEDIMIENTO="+CODPROCEDIMIENTO);
		sb.append(",AMBITO="+AMBITO);
		sb.append(",FINALIDAD="+FINALIDAD);
		sb.append(",PERSONAL="+PERSONAL);
		sb.append(",CODDIAGPPAL="+CODDIAGPPAL);
		sb.append(",COMPLICACION="+COMPLICACION);
		sb.append(",FORMA_QUIRURGICO="+FORMA_QUIRURGICO);
		sb.append(",VPROCEDIMIENTO="+String.valueOf(VPROCEDIMIENTO));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",CODDIAGREL1="+CODDIAGREL1);
		sb.append(",CODDIAGREL2="+CODDIAGREL2);
		sb.append(",CODDIAGREL3="+CODDIAGREL3);
		sb.append(",PERIODO="+PERIODO);
		sb.append(",TRIPS="+TRIPS);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",PESO="+PESO);
		sb.append(",TALLA="+TALLA);
		sb.append(",UMEDIDA_PESO="+UMEDIDA_PESO);
		sb.append(",UMEDIDA_TALLA="+UMEDIDA_TALLA);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",ADMISION_ID="+String.valueOf(ADMISION_ID));
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",QUIRURGICO="+QUIRURGICO);
		sb.append(",EJECACTIVIDADES_ID="+String.valueOf(EJECACTIVIDADES_ID));
		sb.append(",ESTADO_TRATAMIENTO="+ESTADO_TRATAMIENTO);
		sb.append(",FINALIDAD_CONSULTA="+FINALIDAD_CONSULTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(odo_inStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String CODFACTURA;

				public String getCODFACTURA () {
					return this.CODFACTURA;
				}

				public Boolean CODFACTURAIsNullable(){
				    return true;
				}
				public Boolean CODFACTURAIsKey(){
				    return false;
				}
				public Integer CODFACTURALength(){
				    return 0;
				}
				public Integer CODFACTURAPrecision(){
				    return 0;
				}
				public String CODFACTURADefault(){
				
					return null;
				
				}
				public String CODFACTURAComment(){
				
				    return "";
				
				}
				public String CODFACTURAPattern(){
				
					return "";
				
				}
				public String CODFACTURAOriginalDbColumnName(){
				
					return "CODFACTURA";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public BigDecimal UORG_ATENCION;

				public BigDecimal getUORG_ATENCION () {
					return this.UORG_ATENCION;
				}

				public Boolean UORG_ATENCIONIsNullable(){
				    return false;
				}
				public Boolean UORG_ATENCIONIsKey(){
				    return false;
				}
				public Integer UORG_ATENCIONLength(){
				    return 0;
				}
				public Integer UORG_ATENCIONPrecision(){
				    return null;
				}
				public String UORG_ATENCIONDefault(){
				
					return "";
				
				}
				public String UORG_ATENCIONComment(){
				
				    return "";
				
				}
				public String UORG_ATENCIONPattern(){
				
					return "";
				
				}
				public String UORG_ATENCIONOriginalDbColumnName(){
				
					return "UORG_ATENCION";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return 100;
				}
				public Integer CODPRESTADORPrecision(){
				    return 0;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 5;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return 0;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public String CODPROCEDIMIENTO;

				public String getCODPROCEDIMIENTO () {
					return this.CODPROCEDIMIENTO;
				}

				public Boolean CODPROCEDIMIENTOIsNullable(){
				    return false;
				}
				public Boolean CODPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer CODPROCEDIMIENTOLength(){
				    return 100;
				}
				public Integer CODPROCEDIMIENTOPrecision(){
				    return 0;
				}
				public String CODPROCEDIMIENTODefault(){
				
					return null;
				
				}
				public String CODPROCEDIMIENTOComment(){
				
				    return "";
				
				}
				public String CODPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String CODPROCEDIMIENTOOriginalDbColumnName(){
				
					return "CODPROCEDIMIENTO";
				
				}

				
			    public String QUIRURGICO;

				public String getQUIRURGICO () {
					return this.QUIRURGICO;
				}

				public Boolean QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean QUIRURGICOIsKey(){
				    return false;
				}
				public Integer QUIRURGICOLength(){
				    return 10;
				}
				public Integer QUIRURGICOPrecision(){
				    return 0;
				}
				public String QUIRURGICODefault(){
				
					return null;
				
				}
				public String QUIRURGICOComment(){
				
				    return "";
				
				}
				public String QUIRURGICOPattern(){
				
					return "";
				
				}
				public String QUIRURGICOOriginalDbColumnName(){
				
					return "QUIRURGICO";
				
				}

				
			    public String AMBITO;

				public String getAMBITO () {
					return this.AMBITO;
				}

				public Boolean AMBITOIsNullable(){
				    return true;
				}
				public Boolean AMBITOIsKey(){
				    return false;
				}
				public Integer AMBITOLength(){
				    return 0;
				}
				public Integer AMBITOPrecision(){
				    return 0;
				}
				public String AMBITODefault(){
				
					return null;
				
				}
				public String AMBITOComment(){
				
				    return "";
				
				}
				public String AMBITOPattern(){
				
					return "";
				
				}
				public String AMBITOOriginalDbColumnName(){
				
					return "AMBITO";
				
				}

				
			    public String FINALIDAD;

				public String getFINALIDAD () {
					return this.FINALIDAD;
				}

				public Boolean FINALIDADIsNullable(){
				    return true;
				}
				public Boolean FINALIDADIsKey(){
				    return false;
				}
				public Integer FINALIDADLength(){
				    return 100;
				}
				public Integer FINALIDADPrecision(){
				    return 0;
				}
				public String FINALIDADDefault(){
				
					return null;
				
				}
				public String FINALIDADComment(){
				
				    return "";
				
				}
				public String FINALIDADPattern(){
				
					return "";
				
				}
				public String FINALIDADOriginalDbColumnName(){
				
					return "FINALIDAD";
				
				}

				
			    public String CODDIAGPPAL;

				public String getCODDIAGPPAL () {
					return this.CODDIAGPPAL;
				}

				public Boolean CODDIAGPPALIsNullable(){
				    return true;
				}
				public Boolean CODDIAGPPALIsKey(){
				    return false;
				}
				public Integer CODDIAGPPALLength(){
				    return 10;
				}
				public Integer CODDIAGPPALPrecision(){
				    return 0;
				}
				public String CODDIAGPPALDefault(){
				
					return null;
				
				}
				public String CODDIAGPPALComment(){
				
				    return "";
				
				}
				public String CODDIAGPPALPattern(){
				
					return "";
				
				}
				public String CODDIAGPPALOriginalDbColumnName(){
				
					return "CODDIAGPPAL";
				
				}

				
			    public String COMPLICACION;

				public String getCOMPLICACION () {
					return this.COMPLICACION;
				}

				public Boolean COMPLICACIONIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONIsKey(){
				    return false;
				}
				public Integer COMPLICACIONLength(){
				    return 10;
				}
				public Integer COMPLICACIONPrecision(){
				    return 0;
				}
				public String COMPLICACIONDefault(){
				
					return null;
				
				}
				public String COMPLICACIONComment(){
				
				    return "";
				
				}
				public String COMPLICACIONPattern(){
				
					return "";
				
				}
				public String COMPLICACIONOriginalDbColumnName(){
				
					return "COMPLICACION";
				
				}

				
			    public String FORMA_QUIRURGICO;

				public String getFORMA_QUIRURGICO () {
					return this.FORMA_QUIRURGICO;
				}

				public Boolean FORMA_QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean FORMA_QUIRURGICOIsKey(){
				    return false;
				}
				public Integer FORMA_QUIRURGICOLength(){
				    return 100;
				}
				public Integer FORMA_QUIRURGICOPrecision(){
				    return 0;
				}
				public String FORMA_QUIRURGICODefault(){
				
					return null;
				
				}
				public String FORMA_QUIRURGICOComment(){
				
				    return "";
				
				}
				public String FORMA_QUIRURGICOPattern(){
				
					return "";
				
				}
				public String FORMA_QUIRURGICOOriginalDbColumnName(){
				
					return "FORMA_QUIRURGICO";
				
				}

				
			    public String ACTOQUIRURGICO;

				public String getACTOQUIRURGICO () {
					return this.ACTOQUIRURGICO;
				}

				public Boolean ACTOQUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean ACTOQUIRURGICOIsKey(){
				    return false;
				}
				public Integer ACTOQUIRURGICOLength(){
				    return 10;
				}
				public Integer ACTOQUIRURGICOPrecision(){
				    return 0;
				}
				public String ACTOQUIRURGICODefault(){
				
					return null;
				
				}
				public String ACTOQUIRURGICOComment(){
				
				    return "";
				
				}
				public String ACTOQUIRURGICOPattern(){
				
					return "";
				
				}
				public String ACTOQUIRURGICOOriginalDbColumnName(){
				
					return "ACTOQUIRURGICO";
				
				}

				
			    public BigDecimal VPROCEDIMIENTO;

				public BigDecimal getVPROCEDIMIENTO () {
					return this.VPROCEDIMIENTO;
				}

				public Boolean VPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean VPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer VPROCEDIMIENTOLength(){
				    return 0;
				}
				public Integer VPROCEDIMIENTOPrecision(){
				    return null;
				}
				public String VPROCEDIMIENTODefault(){
				
					return "";
				
				}
				public String VPROCEDIMIENTOComment(){
				
				    return "";
				
				}
				public String VPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String VPROCEDIMIENTOOriginalDbColumnName(){
				
					return "VPROCEDIMIENTO";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal PACIENTE_ID;

				public BigDecimal getPACIENTE_ID () {
					return this.PACIENTE_ID;
				}

				public Boolean PACIENTE_IDIsNullable(){
				    return false;
				}
				public Boolean PACIENTE_IDIsKey(){
				    return false;
				}
				public Integer PACIENTE_IDLength(){
				    return 0;
				}
				public Integer PACIENTE_IDPrecision(){
				    return null;
				}
				public String PACIENTE_IDDefault(){
				
					return "";
				
				}
				public String PACIENTE_IDComment(){
				
				    return "";
				
				}
				public String PACIENTE_IDPattern(){
				
					return "";
				
				}
				public String PACIENTE_IDOriginalDbColumnName(){
				
					return "PACIENTE_ID";
				
				}

				
			    public String CODDIAGREL1;

				public String getCODDIAGREL1 () {
					return this.CODDIAGREL1;
				}

				public Boolean CODDIAGREL1IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL1IsKey(){
				    return false;
				}
				public Integer CODDIAGREL1Length(){
				    return 10;
				}
				public Integer CODDIAGREL1Precision(){
				    return 0;
				}
				public String CODDIAGREL1Default(){
				
					return null;
				
				}
				public String CODDIAGREL1Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL1Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL1OriginalDbColumnName(){
				
					return "CODDIAGREL1";
				
				}

				
			    public String CODDIAGREL2;

				public String getCODDIAGREL2 () {
					return this.CODDIAGREL2;
				}

				public Boolean CODDIAGREL2IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL2IsKey(){
				    return false;
				}
				public Integer CODDIAGREL2Length(){
				    return 10;
				}
				public Integer CODDIAGREL2Precision(){
				    return 0;
				}
				public String CODDIAGREL2Default(){
				
					return null;
				
				}
				public String CODDIAGREL2Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL2Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL2OriginalDbColumnName(){
				
					return "CODDIAGREL2";
				
				}

				
			    public String CODDIAGREL3;

				public String getCODDIAGREL3 () {
					return this.CODDIAGREL3;
				}

				public Boolean CODDIAGREL3IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL3IsKey(){
				    return false;
				}
				public Integer CODDIAGREL3Length(){
				    return 10;
				}
				public Integer CODDIAGREL3Precision(){
				    return 0;
				}
				public String CODDIAGREL3Default(){
				
					return null;
				
				}
				public String CODDIAGREL3Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL3Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL3OriginalDbColumnName(){
				
					return "CODDIAGREL3";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public BigDecimal PROFESIONAL_ID;

				public BigDecimal getPROFESIONAL_ID () {
					return this.PROFESIONAL_ID;
				}

				public Boolean PROFESIONAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROFESIONAL_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONAL_IDLength(){
				    return 0;
				}
				public Integer PROFESIONAL_IDPrecision(){
				    return null;
				}
				public String PROFESIONAL_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONAL_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONAL_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONAL_IDOriginalDbColumnName(){
				
					return "PROFESIONAL_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public String PERSONAL_ATIENDE;

				public String getPERSONAL_ATIENDE () {
					return this.PERSONAL_ATIENDE;
				}

				public Boolean PERSONAL_ATIENDEIsNullable(){
				    return true;
				}
				public Boolean PERSONAL_ATIENDEIsKey(){
				    return false;
				}
				public Integer PERSONAL_ATIENDELength(){
				    return 21;
				}
				public Integer PERSONAL_ATIENDEPrecision(){
				    return 0;
				}
				public String PERSONAL_ATIENDEDefault(){
				
					return null;
				
				}
				public String PERSONAL_ATIENDEComment(){
				
				    return "";
				
				}
				public String PERSONAL_ATIENDEPattern(){
				
					return "";
				
				}
				public String PERSONAL_ATIENDEOriginalDbColumnName(){
				
					return "PERSONAL_ATIENDE";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 31;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return 0;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 5;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 100;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return 0;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return null;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				
			    public String ESTADO_TRATAMIENTO;

				public String getESTADO_TRATAMIENTO () {
					return this.ESTADO_TRATAMIENTO;
				}

				public Boolean ESTADO_TRATAMIENTOIsNullable(){
				    return false;
				}
				public Boolean ESTADO_TRATAMIENTOIsKey(){
				    return false;
				}
				public Integer ESTADO_TRATAMIENTOLength(){
				    return 15;
				}
				public Integer ESTADO_TRATAMIENTOPrecision(){
				    return 0;
				}
				public String ESTADO_TRATAMIENTODefault(){
				
					return null;
				
				}
				public String ESTADO_TRATAMIENTOComment(){
				
				    return "";
				
				}
				public String ESTADO_TRATAMIENTOPattern(){
				
					return "";
				
				}
				public String ESTADO_TRATAMIENTOOriginalDbColumnName(){
				
					return "ESTADO_TRATAMIENTO";
				
				}

				
			    public String FINALIDAD_CONSULTA;

				public String getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return 200;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return 0;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return null;
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ATENCION = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.QUIRURGICO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
					this.ACTOQUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.PACIENTE_ID = (BigDecimal) dis.readObject();
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.PERSONAL_ATIENDE = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
					this.ESTADO_TRATAMIENTO = readString(dis);
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ATENCION = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.QUIRURGICO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
					this.ACTOQUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.PACIENTE_ID = (BigDecimal) dis.readObject();
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.PERSONAL_ATIENDE = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
					this.ESTADO_TRATAMIENTO = readString(dis);
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ATENCION);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// String
				
						writeString(this.ACTOQUIRURGICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PACIENTE_ID);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.PERSONAL_ATIENDE,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
					// String
				
						writeString(this.ESTADO_TRATAMIENTO,dos);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ATENCION);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// String
				
						writeString(this.ACTOQUIRURGICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PACIENTE_ID);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.PERSONAL_ATIENDE,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
					// String
				
						writeString(this.ESTADO_TRATAMIENTO,dos);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODFACTURA="+CODFACTURA);
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",UORG_ATENCION="+String.valueOf(UORG_ATENCION));
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",CODPROCEDIMIENTO="+CODPROCEDIMIENTO);
		sb.append(",QUIRURGICO="+QUIRURGICO);
		sb.append(",AMBITO="+AMBITO);
		sb.append(",FINALIDAD="+FINALIDAD);
		sb.append(",CODDIAGPPAL="+CODDIAGPPAL);
		sb.append(",COMPLICACION="+COMPLICACION);
		sb.append(",FORMA_QUIRURGICO="+FORMA_QUIRURGICO);
		sb.append(",ACTOQUIRURGICO="+ACTOQUIRURGICO);
		sb.append(",VPROCEDIMIENTO="+String.valueOf(VPROCEDIMIENTO));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",PACIENTE_ID="+String.valueOf(PACIENTE_ID));
		sb.append(",CODDIAGREL1="+CODDIAGREL1);
		sb.append(",CODDIAGREL2="+CODDIAGREL2);
		sb.append(",CODDIAGREL3="+CODDIAGREL3);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",PROFESIONAL_ID="+String.valueOf(PROFESIONAL_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",PERSONAL_ATIENDE="+PERSONAL_ATIENDE);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
		sb.append(",ESTADO_TRATAMIENTO="+ESTADO_TRATAMIENTO);
		sb.append(",FINALIDAD_CONSULTA="+FINALIDAD_CONSULTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class pqx_inStruct implements routines.system.IPersistableRow<pqx_inStruct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String CODFACTURA;

				public String getCODFACTURA () {
					return this.CODFACTURA;
				}

				public Boolean CODFACTURAIsNullable(){
				    return true;
				}
				public Boolean CODFACTURAIsKey(){
				    return false;
				}
				public Integer CODFACTURALength(){
				    return 100;
				}
				public Integer CODFACTURAPrecision(){
				    return 0;
				}
				public String CODFACTURADefault(){
				
					return null;
				
				}
				public String CODFACTURAComment(){
				
				    return "N\u00FAmero de la factura";
				
				}
				public String CODFACTURAPattern(){
				
					return "";
				
				}
				public String CODFACTURAOriginalDbColumnName(){
				
					return "CODFACTURA";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return null;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return null;
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return 100;
				}
				public Integer CODPRESTADORPrecision(){
				    return 0;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "C\u00F3digo del prestador de servicios de salud";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 50;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "Tipo de identificaci\u00F3n usuario";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "N\u00FAmero de identificaci\u00F3n del usuario en el Sistema";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return 250;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "N\u00FAmero de la autorizaci\u00F3n";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public String CODPROCEDIMIENTO;

				public String getCODPROCEDIMIENTO () {
					return this.CODPROCEDIMIENTO;
				}

				public Boolean CODPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean CODPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer CODPROCEDIMIENTOLength(){
				    return 50;
				}
				public Integer CODPROCEDIMIENTOPrecision(){
				    return 0;
				}
				public String CODPROCEDIMIENTODefault(){
				
					return null;
				
				}
				public String CODPROCEDIMIENTOComment(){
				
				    return "C\u00F3digo del procedimiento";
				
				}
				public String CODPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String CODPROCEDIMIENTOOriginalDbColumnName(){
				
					return "CODPROCEDIMIENTO";
				
				}

				
			    public String AMBITO;

				public String getAMBITO () {
					return this.AMBITO;
				}

				public Boolean AMBITOIsNullable(){
				    return true;
				}
				public Boolean AMBITOIsKey(){
				    return false;
				}
				public Integer AMBITOLength(){
				    return 100;
				}
				public Integer AMBITOPrecision(){
				    return 0;
				}
				public String AMBITODefault(){
				
					return null;
				
				}
				public String AMBITOComment(){
				
				    return "\u00C1mbito de realizaci\u00F3n del procedimiento";
				
				}
				public String AMBITOPattern(){
				
					return "";
				
				}
				public String AMBITOOriginalDbColumnName(){
				
					return "AMBITO";
				
				}

				
			    public String FINALIDAD;

				public String getFINALIDAD () {
					return this.FINALIDAD;
				}

				public Boolean FINALIDADIsNullable(){
				    return true;
				}
				public Boolean FINALIDADIsKey(){
				    return false;
				}
				public Integer FINALIDADLength(){
				    return 50;
				}
				public Integer FINALIDADPrecision(){
				    return 0;
				}
				public String FINALIDADDefault(){
				
					return null;
				
				}
				public String FINALIDADComment(){
				
				    return "Finalidad del procedimiento";
				
				}
				public String FINALIDADPattern(){
				
					return "";
				
				}
				public String FINALIDADOriginalDbColumnName(){
				
					return "FINALIDAD";
				
				}

				
			    public String PERSONAL;

				public String getPERSONAL () {
					return this.PERSONAL;
				}

				public Boolean PERSONALIsNullable(){
				    return true;
				}
				public Boolean PERSONALIsKey(){
				    return false;
				}
				public Integer PERSONALLength(){
				    return 400;
				}
				public Integer PERSONALPrecision(){
				    return 0;
				}
				public String PERSONALDefault(){
				
					return null;
				
				}
				public String PERSONALComment(){
				
				    return "Personal que atiende";
				
				}
				public String PERSONALPattern(){
				
					return "";
				
				}
				public String PERSONALOriginalDbColumnName(){
				
					return "PERSONAL";
				
				}

				
			    public String CODDIAGPPAL;

				public String getCODDIAGPPAL () {
					return this.CODDIAGPPAL;
				}

				public Boolean CODDIAGPPALIsNullable(){
				    return true;
				}
				public Boolean CODDIAGPPALIsKey(){
				    return false;
				}
				public Integer CODDIAGPPALLength(){
				    return 50;
				}
				public Integer CODDIAGPPALPrecision(){
				    return 0;
				}
				public String CODDIAGPPALDefault(){
				
					return null;
				
				}
				public String CODDIAGPPALComment(){
				
				    return "C\u00F3digo Diagn\u00F3stico principal";
				
				}
				public String CODDIAGPPALPattern(){
				
					return "";
				
				}
				public String CODDIAGPPALOriginalDbColumnName(){
				
					return "CODDIAGPPAL";
				
				}

				
			    public String COMPLICACION;

				public String getCOMPLICACION () {
					return this.COMPLICACION;
				}

				public Boolean COMPLICACIONIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONIsKey(){
				    return false;
				}
				public Integer COMPLICACIONLength(){
				    return 50;
				}
				public Integer COMPLICACIONPrecision(){
				    return 0;
				}
				public String COMPLICACIONDefault(){
				
					return null;
				
				}
				public String COMPLICACIONComment(){
				
				    return "Complicaci\u00F3n";
				
				}
				public String COMPLICACIONPattern(){
				
					return "";
				
				}
				public String COMPLICACIONOriginalDbColumnName(){
				
					return "COMPLICACION";
				
				}

				
			    public String FORMA_QUIRURGICO;

				public String getFORMA_QUIRURGICO () {
					return this.FORMA_QUIRURGICO;
				}

				public Boolean FORMA_QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean FORMA_QUIRURGICOIsKey(){
				    return false;
				}
				public Integer FORMA_QUIRURGICOLength(){
				    return 50;
				}
				public Integer FORMA_QUIRURGICOPrecision(){
				    return 0;
				}
				public String FORMA_QUIRURGICODefault(){
				
					return null;
				
				}
				public String FORMA_QUIRURGICOComment(){
				
				    return "";
				
				}
				public String FORMA_QUIRURGICOPattern(){
				
					return "";
				
				}
				public String FORMA_QUIRURGICOOriginalDbColumnName(){
				
					return "FORMA_QUIRURGICO";
				
				}

				
			    public BigDecimal VPROCEDIMIENTO;

				public BigDecimal getVPROCEDIMIENTO () {
					return this.VPROCEDIMIENTO;
				}

				public Boolean VPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean VPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer VPROCEDIMIENTOLength(){
				    return 0;
				}
				public Integer VPROCEDIMIENTOPrecision(){
				    return null;
				}
				public String VPROCEDIMIENTODefault(){
				
					return null;
				
				}
				public String VPROCEDIMIENTOComment(){
				
				    return "Valor procedimiento";
				
				}
				public String VPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String VPROCEDIMIENTOOriginalDbColumnName(){
				
					return "VPROCEDIMIENTO";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 11;
				}
				public Integer FECHAPrecision(){
				    return 6;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha del procedimiento";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String CODDIAGREL1;

				public String getCODDIAGREL1 () {
					return this.CODDIAGREL1;
				}

				public Boolean CODDIAGREL1IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL1IsKey(){
				    return false;
				}
				public Integer CODDIAGREL1Length(){
				    return 50;
				}
				public Integer CODDIAGREL1Precision(){
				    return 0;
				}
				public String CODDIAGREL1Default(){
				
					return null;
				
				}
				public String CODDIAGREL1Comment(){
				
				    return "C\u00F3digo Diagn\u00F3stico relacionado";
				
				}
				public String CODDIAGREL1Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL1OriginalDbColumnName(){
				
					return "CODDIAGREL1";
				
				}

				
			    public String CODDIAGREL2;

				public String getCODDIAGREL2 () {
					return this.CODDIAGREL2;
				}

				public Boolean CODDIAGREL2IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL2IsKey(){
				    return false;
				}
				public Integer CODDIAGREL2Length(){
				    return 10;
				}
				public Integer CODDIAGREL2Precision(){
				    return 0;
				}
				public String CODDIAGREL2Default(){
				
					return null;
				
				}
				public String CODDIAGREL2Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL2Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL2OriginalDbColumnName(){
				
					return "CODDIAGREL2";
				
				}

				
			    public String CODDIAGREL3;

				public String getCODDIAGREL3 () {
					return this.CODDIAGREL3;
				}

				public Boolean CODDIAGREL3IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL3IsKey(){
				    return false;
				}
				public Integer CODDIAGREL3Length(){
				    return 10;
				}
				public Integer CODDIAGREL3Precision(){
				    return 0;
				}
				public String CODDIAGREL3Default(){
				
					return null;
				
				}
				public String CODDIAGREL3Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL3Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL3OriginalDbColumnName(){
				
					return "CODDIAGREL3";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 7;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public String TRIPS;

				public String getTRIPS () {
					return this.TRIPS;
				}

				public Boolean TRIPSIsNullable(){
				    return true;
				}
				public Boolean TRIPSIsKey(){
				    return false;
				}
				public Integer TRIPSLength(){
				    return 10;
				}
				public Integer TRIPSPrecision(){
				    return 0;
				}
				public String TRIPSDefault(){
				
					return null;
				
				}
				public String TRIPSComment(){
				
				    return "Tipo RIPS";
				
				}
				public String TRIPSPattern(){
				
					return "";
				
				}
				public String TRIPSOriginalDbColumnName(){
				
					return "TRIPS";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "FK - BGEN_PERSONAS";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - BGEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "Id de la fuerza del ESM de atencion";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "Sigla del tipo de documento del profesional asistencial que atiende";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "N\u00FAmero de identificacion del profesional asistencial que atiende";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "Nombre de la especialidad que atiende";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String PESO;

				public String getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 10;
				}
				public Integer PESOPrecision(){
				    return 0;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "Peso del paciente al momento de la atenci\u00F3n";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return 10;
				}
				public Integer TALLAPrecision(){
				    return 0;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "Altura del paciente la momento de la atenci\u00F3n ";
				
				}
				public String TALLAPattern(){
				
					return "";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public String UMEDIDA_PESO;

				public String getUMEDIDA_PESO () {
					return this.UMEDIDA_PESO;
				}

				public Boolean UMEDIDA_PESOIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_PESOIsKey(){
				    return false;
				}
				public Integer UMEDIDA_PESOLength(){
				    return 10;
				}
				public Integer UMEDIDA_PESOPrecision(){
				    return 0;
				}
				public String UMEDIDA_PESODefault(){
				
					return null;
				
				}
				public String UMEDIDA_PESOComment(){
				
				    return "Unidad de medida del peso del paciente";
				
				}
				public String UMEDIDA_PESOPattern(){
				
					return "";
				
				}
				public String UMEDIDA_PESOOriginalDbColumnName(){
				
					return "UMEDIDA_PESO";
				
				}

				
			    public String UMEDIDA_TALLA;

				public String getUMEDIDA_TALLA () {
					return this.UMEDIDA_TALLA;
				}

				public Boolean UMEDIDA_TALLAIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_TALLAIsKey(){
				    return false;
				}
				public Integer UMEDIDA_TALLALength(){
				    return 10;
				}
				public Integer UMEDIDA_TALLAPrecision(){
				    return 0;
				}
				public String UMEDIDA_TALLADefault(){
				
					return null;
				
				}
				public String UMEDIDA_TALLAComment(){
				
				    return "Unidad de medida de la talla del paciente";
				
				}
				public String UMEDIDA_TALLAPattern(){
				
					return "";
				
				}
				public String UMEDIDA_TALLAOriginalDbColumnName(){
				
					return "UMEDIDA_TALLA";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return 10;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return 0;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "Forma en que se almaceno ( Cargue, Automatico)";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 100;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "Tipo de afiliado ( No cotizante, cotizante pensionado o retirado, cotizante activo, beneficiario)";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "EDAD SIMPLE DE LA PERSONA AL MOMENTO DE LA ATENCI\u00D3N";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 10;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "Unidad de medida de la edad simple (A\u00F1os, Meses)";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "C\u00F3digo del grado (filtrar)";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "DESCRIPCION DEL GRADO MILITAR";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 100;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "Descripci\u00F3n de la clasificaci\u00F3n del grado";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal ADMISION_ID;

				public BigDecimal getADMISION_ID () {
					return this.ADMISION_ID;
				}

				public Boolean ADMISION_IDIsNullable(){
				    return true;
				}
				public Boolean ADMISION_IDIsKey(){
				    return false;
				}
				public Integer ADMISION_IDLength(){
				    return 0;
				}
				public Integer ADMISION_IDPrecision(){
				    return null;
				}
				public String ADMISION_IDDefault(){
				
					return null;
				
				}
				public String ADMISION_IDComment(){
				
				    return "ID de la admisi\u00F3n";
				
				}
				public String ADMISION_IDPattern(){
				
					return "";
				
				}
				public String ADMISION_IDOriginalDbColumnName(){
				
					return "ADMISION_ID";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return 2;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return 0;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return null;
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "C\u00F3digo de la clasificaci\u00F3n del grado (Filtrar)";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "ID BGEN_ESPECIALIDADES (Filtrar)";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String QUIRURGICO;

				public String getQUIRURGICO () {
					return this.QUIRURGICO;
				}

				public Boolean QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean QUIRURGICOIsKey(){
				    return false;
				}
				public Integer QUIRURGICOLength(){
				    return 20;
				}
				public Integer QUIRURGICOPrecision(){
				    return 0;
				}
				public String QUIRURGICODefault(){
				
					return null;
				
				}
				public String QUIRURGICOComment(){
				
				    return "Quir\u00FArgico ('Si', 'No')";
				
				}
				public String QUIRURGICOPattern(){
				
					return "";
				
				}
				public String QUIRURGICOOriginalDbColumnName(){
				
					return "QUIRURGICO";
				
				}

				
			    public BigDecimal EJECACTIVIDADES_ID;

				public BigDecimal getEJECACTIVIDADES_ID () {
					return this.EJECACTIVIDADES_ID;
				}

				public Boolean EJECACTIVIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean EJECACTIVIDADES_IDIsKey(){
				    return false;
				}
				public Integer EJECACTIVIDADES_IDLength(){
				    return null;
				}
				public Integer EJECACTIVIDADES_IDPrecision(){
				    return null;
				}
				public String EJECACTIVIDADES_IDDefault(){
				
					return null;
				
				}
				public String EJECACTIVIDADES_IDComment(){
				
				    return "";
				
				}
				public String EJECACTIVIDADES_IDPattern(){
				
					return "";
				
				}
				public String EJECACTIVIDADES_IDOriginalDbColumnName(){
				
					return "EJECACTIVIDADES_ID";
				
				}

				
			    public String ESTADO_TRATAMIENTO;

				public String getESTADO_TRATAMIENTO () {
					return this.ESTADO_TRATAMIENTO;
				}

				public Boolean ESTADO_TRATAMIENTOIsNullable(){
				    return true;
				}
				public Boolean ESTADO_TRATAMIENTOIsKey(){
				    return false;
				}
				public Integer ESTADO_TRATAMIENTOLength(){
				    return null;
				}
				public Integer ESTADO_TRATAMIENTOPrecision(){
				    return null;
				}
				public String ESTADO_TRATAMIENTODefault(){
				
					return null;
				
				}
				public String ESTADO_TRATAMIENTOComment(){
				
				    return "";
				
				}
				public String ESTADO_TRATAMIENTOPattern(){
				
					return "";
				
				}
				public String ESTADO_TRATAMIENTOOriginalDbColumnName(){
				
					return "ESTADO_TRATAMIENTO";
				
				}

				
			    public String FINALIDAD_CONSULTA;

				public String getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return 200;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return 0;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return null;
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
					this.PERIODO = readString(dis);
					
					this.TRIPS = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_PESO = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.QUIRURGICO = readString(dis);
					
						this.EJECACTIVIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO_TRATAMIENTO = readString(dis);
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
					this.PERIODO = readString(dis);
					
					this.TRIPS = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_PESO = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.QUIRURGICO = readString(dis);
					
						this.EJECACTIVIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO_TRATAMIENTO = readString(dis);
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_PESO,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EJECACTIVIDADES_ID);
					
					// String
				
						writeString(this.ESTADO_TRATAMIENTO,dos);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_PESO,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EJECACTIVIDADES_ID);
					
					// String
				
						writeString(this.ESTADO_TRATAMIENTO,dos);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODFACTURA="+CODFACTURA);
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",CODPROCEDIMIENTO="+CODPROCEDIMIENTO);
		sb.append(",AMBITO="+AMBITO);
		sb.append(",FINALIDAD="+FINALIDAD);
		sb.append(",PERSONAL="+PERSONAL);
		sb.append(",CODDIAGPPAL="+CODDIAGPPAL);
		sb.append(",COMPLICACION="+COMPLICACION);
		sb.append(",FORMA_QUIRURGICO="+FORMA_QUIRURGICO);
		sb.append(",VPROCEDIMIENTO="+String.valueOf(VPROCEDIMIENTO));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",CODDIAGREL1="+CODDIAGREL1);
		sb.append(",CODDIAGREL2="+CODDIAGREL2);
		sb.append(",CODDIAGREL3="+CODDIAGREL3);
		sb.append(",PERIODO="+PERIODO);
		sb.append(",TRIPS="+TRIPS);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",PESO="+PESO);
		sb.append(",TALLA="+TALLA);
		sb.append(",UMEDIDA_PESO="+UMEDIDA_PESO);
		sb.append(",UMEDIDA_TALLA="+UMEDIDA_TALLA);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",ADMISION_ID="+String.valueOf(ADMISION_ID));
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",QUIRURGICO="+QUIRURGICO);
		sb.append(",EJECACTIVIDADES_ID="+String.valueOf(EJECACTIVIDADES_ID));
		sb.append(",ESTADO_TRATAMIENTO="+ESTADO_TRATAMIENTO);
		sb.append(",FINALIDAD_CONSULTA="+FINALIDAD_CONSULTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(pqx_inStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String CODFACTURA;

				public String getCODFACTURA () {
					return this.CODFACTURA;
				}

				public Boolean CODFACTURAIsNullable(){
				    return true;
				}
				public Boolean CODFACTURAIsKey(){
				    return false;
				}
				public Integer CODFACTURALength(){
				    return 0;
				}
				public Integer CODFACTURAPrecision(){
				    return 0;
				}
				public String CODFACTURADefault(){
				
					return null;
				
				}
				public String CODFACTURAComment(){
				
				    return "";
				
				}
				public String CODFACTURAPattern(){
				
					return "";
				
				}
				public String CODFACTURAOriginalDbColumnName(){
				
					return "CODFACTURA";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return 100;
				}
				public Integer CODPRESTADORPrecision(){
				    return 0;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public BigDecimal PACIENTE_ID;

				public BigDecimal getPACIENTE_ID () {
					return this.PACIENTE_ID;
				}

				public Boolean PACIENTE_IDIsNullable(){
				    return false;
				}
				public Boolean PACIENTE_IDIsKey(){
				    return false;
				}
				public Integer PACIENTE_IDLength(){
				    return 0;
				}
				public Integer PACIENTE_IDPrecision(){
				    return null;
				}
				public String PACIENTE_IDDefault(){
				
					return "";
				
				}
				public String PACIENTE_IDComment(){
				
				    return "";
				
				}
				public String PACIENTE_IDPattern(){
				
					return "";
				
				}
				public String PACIENTE_IDOriginalDbColumnName(){
				
					return "PACIENTE_ID";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 5;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return false;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return 250;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID1;

				public BigDecimal getPROCESOSASISTENCIALES_ID1 () {
					return this.PROCESOSASISTENCIALES_ID1;
				}

				public Boolean PROCESOSASISTENCIALES_ID1IsNullable(){
				    return false;
				}
				public Boolean PROCESOSASISTENCIALES_ID1IsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_ID1Length(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_ID1Precision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_ID1Default(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_ID1Comment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_ID1Pattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_ID1OriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public String CODPROCEDIMIENTO;

				public String getCODPROCEDIMIENTO () {
					return this.CODPROCEDIMIENTO;
				}

				public Boolean CODPROCEDIMIENTOIsNullable(){
				    return false;
				}
				public Boolean CODPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer CODPROCEDIMIENTOLength(){
				    return 100;
				}
				public Integer CODPROCEDIMIENTOPrecision(){
				    return 0;
				}
				public String CODPROCEDIMIENTODefault(){
				
					return null;
				
				}
				public String CODPROCEDIMIENTOComment(){
				
				    return "";
				
				}
				public String CODPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String CODPROCEDIMIENTOOriginalDbColumnName(){
				
					return "CODPROCEDIMIENTO";
				
				}

				
			    public String AMBITO;

				public String getAMBITO () {
					return this.AMBITO;
				}

				public Boolean AMBITOIsNullable(){
				    return true;
				}
				public Boolean AMBITOIsKey(){
				    return false;
				}
				public Integer AMBITOLength(){
				    return 11;
				}
				public Integer AMBITOPrecision(){
				    return 0;
				}
				public String AMBITODefault(){
				
					return null;
				
				}
				public String AMBITOComment(){
				
				    return "";
				
				}
				public String AMBITOPattern(){
				
					return "";
				
				}
				public String AMBITOOriginalDbColumnName(){
				
					return "AMBITO";
				
				}

				
			    public String FINALIDAD;

				public String getFINALIDAD () {
					return this.FINALIDAD;
				}

				public Boolean FINALIDADIsNullable(){
				    return true;
				}
				public Boolean FINALIDADIsKey(){
				    return false;
				}
				public Integer FINALIDADLength(){
				    return 1;
				}
				public Integer FINALIDADPrecision(){
				    return 0;
				}
				public String FINALIDADDefault(){
				
					return null;
				
				}
				public String FINALIDADComment(){
				
				    return "";
				
				}
				public String FINALIDADPattern(){
				
					return "";
				
				}
				public String FINALIDADOriginalDbColumnName(){
				
					return "FINALIDAD";
				
				}

				
			    public String PERSONAL;

				public String getPERSONAL () {
					return this.PERSONAL;
				}

				public Boolean PERSONALIsNullable(){
				    return true;
				}
				public Boolean PERSONALIsKey(){
				    return false;
				}
				public Integer PERSONALLength(){
				    return 21;
				}
				public Integer PERSONALPrecision(){
				    return 0;
				}
				public String PERSONALDefault(){
				
					return null;
				
				}
				public String PERSONALComment(){
				
				    return "";
				
				}
				public String PERSONALPattern(){
				
					return "";
				
				}
				public String PERSONALOriginalDbColumnName(){
				
					return "PERSONAL";
				
				}

				
			    public String CODDIAGPPAL;

				public String getCODDIAGPPAL () {
					return this.CODDIAGPPAL;
				}

				public Boolean CODDIAGPPALIsNullable(){
				    return false;
				}
				public Boolean CODDIAGPPALIsKey(){
				    return false;
				}
				public Integer CODDIAGPPALLength(){
				    return 10;
				}
				public Integer CODDIAGPPALPrecision(){
				    return 0;
				}
				public String CODDIAGPPALDefault(){
				
					return null;
				
				}
				public String CODDIAGPPALComment(){
				
				    return "";
				
				}
				public String CODDIAGPPALPattern(){
				
					return "";
				
				}
				public String CODDIAGPPALOriginalDbColumnName(){
				
					return "CODDIAGPPAL";
				
				}

				
			    public String COMPLICACION;

				public String getCOMPLICACION () {
					return this.COMPLICACION;
				}

				public Boolean COMPLICACIONIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONIsKey(){
				    return false;
				}
				public Integer COMPLICACIONLength(){
				    return 10;
				}
				public Integer COMPLICACIONPrecision(){
				    return 0;
				}
				public String COMPLICACIONDefault(){
				
					return null;
				
				}
				public String COMPLICACIONComment(){
				
				    return "";
				
				}
				public String COMPLICACIONPattern(){
				
					return "";
				
				}
				public String COMPLICACIONOriginalDbColumnName(){
				
					return "COMPLICACION";
				
				}

				
			    public String FORMA_QUIRURGICO;

				public String getFORMA_QUIRURGICO () {
					return this.FORMA_QUIRURGICO;
				}

				public Boolean FORMA_QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean FORMA_QUIRURGICOIsKey(){
				    return false;
				}
				public Integer FORMA_QUIRURGICOLength(){
				    return 11;
				}
				public Integer FORMA_QUIRURGICOPrecision(){
				    return 0;
				}
				public String FORMA_QUIRURGICODefault(){
				
					return null;
				
				}
				public String FORMA_QUIRURGICOComment(){
				
				    return "";
				
				}
				public String FORMA_QUIRURGICOPattern(){
				
					return "";
				
				}
				public String FORMA_QUIRURGICOOriginalDbColumnName(){
				
					return "FORMA_QUIRURGICO";
				
				}

				
			    public String QUIRURGICO;

				public String getQUIRURGICO () {
					return this.QUIRURGICO;
				}

				public Boolean QUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean QUIRURGICOIsKey(){
				    return false;
				}
				public Integer QUIRURGICOLength(){
				    return 2;
				}
				public Integer QUIRURGICOPrecision(){
				    return 0;
				}
				public String QUIRURGICODefault(){
				
					return null;
				
				}
				public String QUIRURGICOComment(){
				
				    return "";
				
				}
				public String QUIRURGICOPattern(){
				
					return "";
				
				}
				public String QUIRURGICOOriginalDbColumnName(){
				
					return "QUIRURGICO";
				
				}

				
			    public BigDecimal VPROCEDIMIENTO;

				public BigDecimal getVPROCEDIMIENTO () {
					return this.VPROCEDIMIENTO;
				}

				public Boolean VPROCEDIMIENTOIsNullable(){
				    return true;
				}
				public Boolean VPROCEDIMIENTOIsKey(){
				    return false;
				}
				public Integer VPROCEDIMIENTOLength(){
				    return 0;
				}
				public Integer VPROCEDIMIENTOPrecision(){
				    return null;
				}
				public String VPROCEDIMIENTODefault(){
				
					return "";
				
				}
				public String VPROCEDIMIENTOComment(){
				
				    return "";
				
				}
				public String VPROCEDIMIENTOPattern(){
				
					return "";
				
				}
				public String VPROCEDIMIENTOOriginalDbColumnName(){
				
					return "VPROCEDIMIENTO";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String CODDIAGREL1;

				public String getCODDIAGREL1 () {
					return this.CODDIAGREL1;
				}

				public Boolean CODDIAGREL1IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL1IsKey(){
				    return false;
				}
				public Integer CODDIAGREL1Length(){
				    return 10;
				}
				public Integer CODDIAGREL1Precision(){
				    return 0;
				}
				public String CODDIAGREL1Default(){
				
					return null;
				
				}
				public String CODDIAGREL1Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL1Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL1OriginalDbColumnName(){
				
					return "CODDIAGREL1";
				
				}

				
			    public String CODDIAGREL2;

				public String getCODDIAGREL2 () {
					return this.CODDIAGREL2;
				}

				public Boolean CODDIAGREL2IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL2IsKey(){
				    return false;
				}
				public Integer CODDIAGREL2Length(){
				    return 10;
				}
				public Integer CODDIAGREL2Precision(){
				    return 0;
				}
				public String CODDIAGREL2Default(){
				
					return null;
				
				}
				public String CODDIAGREL2Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL2Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL2OriginalDbColumnName(){
				
					return "CODDIAGREL2";
				
				}

				
			    public String CODDIAGREL3;

				public String getCODDIAGREL3 () {
					return this.CODDIAGREL3;
				}

				public Boolean CODDIAGREL3IsNullable(){
				    return true;
				}
				public Boolean CODDIAGREL3IsKey(){
				    return false;
				}
				public Integer CODDIAGREL3Length(){
				    return 10;
				}
				public Integer CODDIAGREL3Precision(){
				    return 0;
				}
				public String CODDIAGREL3Default(){
				
					return null;
				
				}
				public String CODDIAGREL3Comment(){
				
				    return "";
				
				}
				public String CODDIAGREL3Pattern(){
				
					return "";
				
				}
				public String CODDIAGREL3OriginalDbColumnName(){
				
					return "CODDIAGREL3";
				
				}

				
			    public BigDecimal PROFESIONAL_ID;

				public BigDecimal getPROFESIONAL_ID () {
					return this.PROFESIONAL_ID;
				}

				public Boolean PROFESIONAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROFESIONAL_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONAL_IDLength(){
				    return 0;
				}
				public Integer PROFESIONAL_IDPrecision(){
				    return null;
				}
				public String PROFESIONAL_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONAL_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONAL_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONAL_IDOriginalDbColumnName(){
				
					return "PROFESIONAL_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 31;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return 0;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 5;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 100;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return 0;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return null;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				
			    public String ACTOQUIRURGICO;

				public String getACTOQUIRURGICO () {
					return this.ACTOQUIRURGICO;
				}

				public Boolean ACTOQUIRURGICOIsNullable(){
				    return true;
				}
				public Boolean ACTOQUIRURGICOIsKey(){
				    return false;
				}
				public Integer ACTOQUIRURGICOLength(){
				    return 2;
				}
				public Integer ACTOQUIRURGICOPrecision(){
				    return 0;
				}
				public String ACTOQUIRURGICODefault(){
				
					return null;
				
				}
				public String ACTOQUIRURGICOComment(){
				
				    return "";
				
				}
				public String ACTOQUIRURGICOPattern(){
				
					return "";
				
				}
				public String ACTOQUIRURGICOOriginalDbColumnName(){
				
					return "ACTOQUIRURGICO";
				
				}

				
			    public String FINALIDAD_CONSULTA;

				public String getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return 200;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return 0;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return null;
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTE_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID1 = (BigDecimal) dis.readObject();
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
					this.QUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
					this.ACTOQUIRURGICO = readString(dis);
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTE_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID1 = (BigDecimal) dis.readObject();
					
					this.CODPROCEDIMIENTO = readString(dis);
					
					this.AMBITO = readString(dis);
					
					this.FINALIDAD = readString(dis);
					
					this.PERSONAL = readString(dis);
					
					this.CODDIAGPPAL = readString(dis);
					
					this.COMPLICACION = readString(dis);
					
					this.FORMA_QUIRURGICO = readString(dis);
					
					this.QUIRURGICO = readString(dis);
					
						this.VPROCEDIMIENTO = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.CODDIAGREL1 = readString(dis);
					
					this.CODDIAGREL2 = readString(dis);
					
					this.CODDIAGREL3 = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
					this.ACTOQUIRURGICO = readString(dis);
					
					this.FINALIDAD_CONSULTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PACIENTE_ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID1);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
					// String
				
						writeString(this.ACTOQUIRURGICO,dos);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PACIENTE_ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID1);
					
					// String
				
						writeString(this.CODPROCEDIMIENTO,dos);
					
					// String
				
						writeString(this.AMBITO,dos);
					
					// String
				
						writeString(this.FINALIDAD,dos);
					
					// String
				
						writeString(this.PERSONAL,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL,dos);
					
					// String
				
						writeString(this.COMPLICACION,dos);
					
					// String
				
						writeString(this.FORMA_QUIRURGICO,dos);
					
					// String
				
						writeString(this.QUIRURGICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPROCEDIMIENTO);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODDIAGREL1,dos);
					
					// String
				
						writeString(this.CODDIAGREL2,dos);
					
					// String
				
						writeString(this.CODDIAGREL3,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
					// String
				
						writeString(this.ACTOQUIRURGICO,dos);
					
					// String
				
						writeString(this.FINALIDAD_CONSULTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODFACTURA="+CODFACTURA);
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",PACIENTE_ID="+String.valueOf(PACIENTE_ID));
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",PROCESOSASISTENCIALES_ID1="+String.valueOf(PROCESOSASISTENCIALES_ID1));
		sb.append(",CODPROCEDIMIENTO="+CODPROCEDIMIENTO);
		sb.append(",AMBITO="+AMBITO);
		sb.append(",FINALIDAD="+FINALIDAD);
		sb.append(",PERSONAL="+PERSONAL);
		sb.append(",CODDIAGPPAL="+CODDIAGPPAL);
		sb.append(",COMPLICACION="+COMPLICACION);
		sb.append(",FORMA_QUIRURGICO="+FORMA_QUIRURGICO);
		sb.append(",QUIRURGICO="+QUIRURGICO);
		sb.append(",VPROCEDIMIENTO="+String.valueOf(VPROCEDIMIENTO));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",CODDIAGREL1="+CODDIAGREL1);
		sb.append(",CODDIAGREL2="+CODDIAGREL2);
		sb.append(",CODDIAGREL3="+CODDIAGREL3);
		sb.append(",PROFESIONAL_ID="+String.valueOf(PROFESIONAL_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
		sb.append(",ACTOQUIRURGICO="+ACTOQUIRURGICO);
		sb.append(",FINALIDAD_CONSULTA="+FINALIDAD_CONSULTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_5Process(globalMap);

		row19Struct row19 = new row19Struct();
rca_inStruct rca_in = new rca_inStruct();

		row17Struct row17 = new row17Struct();
cgp_inStruct cgp_in = new cgp_inStruct();

		row18Struct row18 = new row18Struct();
odo_inStruct odo_in = new odo_inStruct();

		row20Struct row20 = new row20Struct();
pqx_inStruct pqx_in = new pqx_inStruct();

			row16Struct row16 = new row16Struct();
proc_outStruct proc_out = new proc_outStruct();





	
	/**
	 * [tOracleOutput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_15", false);
		start_Hash.put("tOracleOutput_15", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"proc_out");
					}
				
		int tos_count_tOracleOutput_15 = 0;
		






    
    int nb_line_tOracleOutput_15 = 0;
    int nb_line_update_tOracleOutput_15 = 0;
    int nb_line_inserted_tOracleOutput_15 = 0;
    int nb_line_deleted_tOracleOutput_15 = 0;
    int nb_line_rejected_tOracleOutput_15 = 0;

    int tmp_batchUpdateCount_tOracleOutput_15 = 0;

    int deletedCount_tOracleOutput_15=0;
    int updatedCount_tOracleOutput_15=0;
    int insertedCount_tOracleOutput_15=0;
    int rowsToCommitCount_tOracleOutput_15=0;
    int rejectedCount_tOracleOutput_15=0;

    boolean whetherReject_tOracleOutput_15 = false;

    java.sql.Connection conn_tOracleOutput_15 = null;

    //optional table
    String dbschema_tOracleOutput_15 = null;
    String tableName_tOracleOutput_15 = null;
                    String driverClass_tOracleOutput_15 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_15);
                String url_tOracleOutput_15 = null;
                    url_tOracleOutput_15 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_15 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_15 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_15 = decryptedPassword_tOracleOutput_15;
                dbschema_tOracleOutput_15 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_15 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_15.put("user",dbUser_tOracleOutput_15);
                    atnParamsPrope_tOracleOutput_15.put("password",dbPwd_tOracleOutput_15);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_15.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_15 = java.sql.DriverManager.getConnection(url_tOracleOutput_15, atnParamsPrope_tOracleOutput_15);
        resourceMap.put("conn_tOracleOutput_15", conn_tOracleOutput_15);
            conn_tOracleOutput_15.setAutoCommit(false);
            int commitEvery_tOracleOutput_15 = 1000;
            int commitCounter_tOracleOutput_15 = 0;
        int batchSize_tOracleOutput_15 = 1000;
        int batchSizeCounter_tOracleOutput_15=0;
        int count_tOracleOutput_15=0;

        if(dbschema_tOracleOutput_15 == null || dbschema_tOracleOutput_15.trim().length() == 0) {
            tableName_tOracleOutput_15 = ("BRIPS_PROCEDIMIENTOS");
        } else {
            tableName_tOracleOutput_15 = dbschema_tOracleOutput_15 + "." + ("BRIPS_PROCEDIMIENTOS");
        }
                String insert_tOracleOutput_15 = "INSERT INTO " + tableName_tOracleOutput_15 + " (CODFACTURA,PROCESOASISTENCIAL_ID,CODPRESTADOR,TDOCUMENTO,DOCUMENTO,CODAUTORIZACION,CODPROCEDIMIENTO,AMBITO,FINALIDAD,PERSONAL,CODDIAGPPAL,CODDIAGNOSTICO1,COMPLICACION,FORMA_QUIRURGICO,VPROCEDIMIENTO,FECHA,PERIODO,TRIPS,PERSONAS_ID,UORG_ID,FUERZA_ID,TDOCUMENTO_PROFESIONAL,DOCUMENTO_PROFESIONAL,ESPECIALIDAD,PESO,TALLA,UMEDIDA_PESO,UMEDIDA_TALLA,TIPO_GENERACION,TIPO_USUARIO,EDAD,UMEDIDA_EDAD,GRADO_CODIGO,GRADO,CLASEGRD,ADMISION_ID,CLASEGRD_CODIGO,ESPECIALIDADES_ID,QUIRURGICO,CODDIAGNOSTICO2,CODDIAGNOSTICO3,EJECACTIVIDADES_ID,ESTADO_TRATAMIENTO,FINALIDAD_CONSULTA) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_15 = conn_tOracleOutput_15.prepareStatement(insert_tOracleOutput_15);
                        resourceMap.put("pstmt_tOracleOutput_15", pstmt_tOracleOutput_15);





 



/**
 * [tOracleOutput_15 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
proc_outStruct proc_out_tmp = new proc_outStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"cgp_in","rca_in","pqx_in","odo_in");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */

	
	/**
	 * [tMap_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_21", false);
		start_Hash.put("tMap_21", System.currentTimeMillis());
		
	
	currentComponent="tMap_21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tMap_21 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_21__Struct  {
}
Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
// ###############################

// ###############################
// # Outputs initialization
rca_inStruct rca_in_tmp = new rca_inStruct();
// ###############################

        
        



        









 



/**
 * [tMap_21 begin ] stop
 */



	
	/**
	 * [tOracleInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_13", false);
		start_Hash.put("tOracleInput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_13";
	
	
		int tos_count_tOracleInput_13 = 0;
		
	


	
		    int nb_line_tOracleInput_13 = 0;
		    java.sql.Connection conn_tOracleInput_13 = null;
				conn_tOracleInput_13 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
				
                boolean isTimeZoneNull_tOracleInput_13 = false;
				boolean isConnectionWrapped_tOracleInput_13 = !(conn_tOracleInput_13 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_13.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_13 = null;
                if (isConnectionWrapped_tOracleInput_13) {
					unwrappedOraConn_tOracleInput_13 = conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_13 != null) {
                        isTimeZoneNull_tOracleInput_13 = (unwrappedOraConn_tOracleInput_13.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_13 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_13).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_13) {
					java.sql.Statement stmtGetTZ_tOracleInput_13 = conn_tOracleInput_13.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_13 = stmtGetTZ_tOracleInput_13.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_13 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_13.next()) {
						sessionTimezone_tOracleInput_13 = rsGetTZ_tOracleInput_13.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_13 && unwrappedOraConn_tOracleInput_13 != null) {
                        unwrappedOraConn_tOracleInput_13.setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_13).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_13 = conn_tOracleInput_13.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_13.setFetchSize(1000);


		    String dbquery_tOracleInput_13 = "SELECT\n'' AS CODFACTURA,\nINF.PROCESOSASISTENCIALES_ID,\nHP.UORG_ID,\nGUORG.CODIGO AS CODPRESTADOR,\nGUORG.FUERZA_ID,"
+"\nHP.PERSONAS_ID AS PACIENTE_ID,\nGT.SIGLA AS TDOCUMENTO,\nGP.DOCUMENTO AS DOCUMENTO,\nRA.CONSECUTIVO AS CODAUTORIZACION,"
+"\nCUPS.CODIGO AS CODPROCEDIMIENTO,\nCASE\nWHEN SER.SIGLA = 'A' THEN '1'\nWHEN SER.SIGLA = 'HG' THEN '2'\nWHEN SER.SIGLA "
+"= 'U' THEN '3'\nWHEN SER.SIGLA = 'UCI' THEN '2'\nEND AS AMBITO,\nRF.NOMBRE AS FINALIDAD,\nCASE\nWHEN GC.NOMBRE LIKE 'Méd"
+"ico%' AND GC.NOMBRE NOT LIKE '%Especialista%' THEN 'Médico'\nWHEN GC.NOMBRE LIKE '%Especialista%' THEN 'Médico Especiali"
+"sta'\nWHEN GC.NOMBRE LIKE 'Enfermer%' AND GC.NOMBRE NOT LIKE '%(auxiliar)%' THEN 'Enfermero(a)'\nWHEN GC.NOMBRE LIKE '%("
+"auxiliar)%' THEN 'Enfermero(a) auxiliar'\nELSE 'No registra'\nEND AS PERSONAL,\nCIEPPAL.CODIGO AS CODDIAGPPAL,\nCIE.CODI"
+"GO AS COMPLICACION,\nCUPS.ACTOQUIRURGICO AS QUIRURGICO,\nRFR.NOMBRE AS FORMA_QUIRURGICO,\n0 AS VPROCEDIMIENTO,\nRR.FTOMA"
+" AS FECHA,\nRELACIONADOS.UNO AS CODDIAGREL1,\nRELACIONADOS.DOS AS CODDIAGREL2,\nRELACIONADOS.TRES AS CODDIAGREL3,\nINF.P"
+"ROFESIONAL_ID,\nGTS.SIGLA AS TDOCUMENTO_PROFESIONAL,\nGPP.DOCUMENTO AS DOCUMENTO_PROFESIONAL,\nAE.ESPECIALIDADES_ID,\nES"
+"P.NOMBRE AS ESPECIALIDAD,\n\nCASE \nWHEN PLANAFI.CODIGO = '2' THEN 'No cotizante'\nWHEN PLANAFI.CODIGO IN ('1','3','4','"
+"5','6','7','8','9','10') AND ATC.SIGLA='ACT' THEN 'Cotizante Activo' \nWHEN PLANAFI.CODIGO IN ('1','3','4','5','6','7','"
+"8','9','10') AND ATC.SIGLA IN ('RET','PEN') THEN 'Cotizante Pensionado / Retirado' \nWHEN PLANAFI.CODIGO IN ('11','12','"
+"13','14','15','16','17','18') THEN 'Beneficiario' \nWHEN PLANAFI.CODIGO IN ('1','3','4','5','6','7','8','9','10') AND AT"
+"C.SIGLA IN ('PAR','NOC') THEN 'Otro cotizante'\nEND AS TIPO_USUARIO,\nCASE\nWHEN TRUNC(MONTHS_BETWEEN (RR.FTOMA,GP.FECHA"
+"_NACIMIENTO)/12)<1\nTHEN TRUNC(MONTHS_BETWEEN (RR.FTOMA,GP.FECHA_NACIMIENTO))\nELSE TRUNC(MONTHS_BETWEEN (RR.FTOMA,GP.FE"
+"CHA_NACIMIENTO)/12) \nEND AS EDAD,\nCASE \nWHEN TRUNC(MONTHS_BETWEEN (RR.FTOMA,GP.FECHA_NACIMIENTO)/12)<1\nTHEN 'Meses'"
+"\nWHEN TRUNC(MONTHS_BETWEEN (RR.FTOMA,GP.FECHA_NACIMIENTO)/12)>=1\nTHEN 'Años'\nEND UMEDIDA_EDAD,\nGRA.CODIGO AS GRADO_CO"
+"DIGO,\nGRA.NOMBRE AS GRADO,\nCLAGR.DESCRIPCION  AS CLASEGRD,\nCLAGR.CODIGO  AS CLASEGRD_CODIGO,\nFINC.NOMBRE  AS  FINALI"
+"DAD_CONSULTA\n\nFROM RCA_RESULTADOSCUPS RR \nLEFT JOIN RCA_CUPSOLICITADOS SOL ON SOL.ID = RR.CUPSOLICITADOS_ID AND SOL.E"
+"STREGISTRO_ID = 1\nLEFT JOIN RCA_INFGENERAL INF ON INF.ID = SOL.INFGENERAL_ID AND INF.ESTREGISTRO_ID = 1\nINNER JOIN GEN"
+"_PERSONAS GPP ON GPP.ID=INF.PROFESIONAL_ID\nINNER JOIN GEN_TDOCUMENTOS GTS ON GTS.ID=GPP.TDOCUMENTOS_ID\nINNER JOIN RCA_"
+"AUTORIZACION RA ON RA.INFGENEREAL_ID=INF.ID\nINNER JOIN HCL_PROCESOSASISTENCIALES HP ON HP.ID = INF.PROCESOSASISTENCIALE"
+"S_ID\nLEFT JOIN HCL_VALORACIONES VAL ON VAL.PROCESOSASISTENCIALES_ID=HP.ID AND HP.ESTREGISTRO_ID =1 AND VAL.ESTREGISTRO_"
+"ID =1\nLEFT JOIN GEN_FINALIDADCONSULTA FINC ON FINC.ID=VAL.FINALIDADCONSULTA_ID\nINNER JOIN GEN_UORG GUORG ON GUORG.ID=H"
+"P.UORG_ID\nINNER JOIN ADM_ESPTRATANTES AE ON AE.ID=HP.ESPTRATANTES_ID\n/*LEFT JOIN ADM_ESPTRATANTES ESP ON ESP.ID = HP.E"
+"SPTRATANTES_ID*/\nLEFT JOIN ADM_SERVTRATANTES SERV ON SERV.ID = AE.SERVTRATANTES_ID\nLEFT JOIN GEN_SERVICIOS SER ON SER."
+"ID = SERV.SERVICIOS_ID\nINNER JOIN GEN_ESPECIALIDADES ESP ON ESP.ID = AE.ESPECIALIDADES_ID\nINNER JOIN GEN_AFILIADOS GA "
+"ON GA.PERSONAS_ID = HP.PERSONAS_ID AND GA.ESTREGISTRO_ID =1\nINNER JOIN GEN_AFILIADOS_ENTAPORTANTE AEA ON ((AEA.AFILIADO"
+"S_ID = GA.ID AND GA.PADRE_ID IS NULL) OR AEA.AFILIADOS_ID = GA.PADRE_ID) AND AEA.PRINCIPAL = 1 AND AEA.ESTREGISTRO_ID =1"
+" \nLEFT JOIN GEN_GRDMILITARES GRA ON GRA.ID = AEA.GRDMILITARES_ID\nLEFT JOIN GEN_CLASEGRD CLAGR ON CLAGR.ID = GRA.CLASEG"
+"RD_ID\nINNER JOIN GEN_PERSONAS GP ON GP.ID=GA.PERSONAS_ID\nINNER JOIN GEN_TDOCUMENTOS GT ON GT.ID=GP.TDOCUMENTOS_ID\nLEF"
+"T JOIN AFI_TVINCULACIONES AT ON AT.ID=AEA.TVINCULACIONES_ID\nLEFT JOIN AFI_TCOTIZACION ATC ON ATC.ID=AT.TCOTIZACION_ID\n"
+"LEFT JOIN AFI_PLANAFILIACIONES PLANAFI ON PLANAFI.ID = GA.PLANAFILIACIONES_ID AND PLANAFI.ESTREGISTRO_ID=1\nLEFT JOIN RC"
+"A_CUPSOLICITADOS RCS ON RCS.ID=RR.CUPSOLICITADOS_ID\nLEFT JOIN GEN_CUPS CUPS ON CUPS.ID = RCS.CUPS_ID\nLEFT JOIN RCA_FIN"
+"ALIDADES RF ON RR.FINALIDADES_ID=RF.ID\nLEFT JOIN GEN_PERSONAS GP2 ON GP2.ID=INF.PROFESIONAL_ID\nLEFT JOIN GEN_CARGOS GC"
+" ON GC.ID=GP2.CARGOS_ID\nLEFT JOIN HCL_DIAGNOSTICOS HD ON HD.PROCESOSASISTENCIALES_ID=RR.PROCESOSASISTENCIALES_ID\nLEFT "
+"JOIN GEN_CIE10 CIEPPAL ON CIEPPAL.ID = HD.CIE10_ID\nLEFT JOIN (SELECT * FROM (SELECT RELA.CIE10,NUM.NUMERO AS NUMERO_123"
+",RELA.DIAGNOSTICOS_ID FROM (\nSELECT \nROW_NUMBER()OVER (PARTITION BY DIAG.ID_DI ORDER BY DIAG.ID_DI) AS NUMERO ,\nDIAG."
+"ID_DI AS DIAGNOSTICOS_ID,\nCIE.CODIGO AS CIE10\nFROM (SELECT \nDI.ID AS ID_DI\nFROM HCL_DIAGNOSTICOS DI \n) DIAG\nINNER "
+"JOIN HCL_DIAGRELACIONADOS RE ON RE.DIAGNOSTICOS_ID = DIAG.ID_DI\nINNER JOIN GEN_CIE10 CIE ON CIE.ID = RE.CIE10_ID\n) REL"
+"A\n\nRIGHT JOIN (SELECT '1' AS NUMERO FROM DUAL\nUNION\nSELECT '2' AS NUMERO FROM DUAL\nUNION \nSELECT '3' AS NUMERO FRO"
+"M DUAL \n) NUM ON NUM.NUMERO = RELA.NUMERO\n) \nPIVOT \n(\nMIN(CIE10)\nFOR NUMERO_123\nIN ( '1' UNO, '2' DOS,'3' TRES) "
+"\n)) RELACIONADOS ON RELACIONADOS.DIAGNOSTICOS_ID=HD.ID\nLEFT JOIN HCL_DIAGRELACIONADOS HDR ON HDR.DIAGNOSTICOS_ID=HD.ID "
+"AND HDR.TIPO='Complicacion'\nLEFT JOIN GEN_CIE10 CIE ON CIE.ID = HDR.CIE10_ID\nLEFT JOIN RCA_FORMAREALIZACION RFR ON RR."
+"FORMAREALIZACION_ID=RFR.ID \nWHERE RR.ESTREGISTRO_ID=1 "+context.CONDICION_PROCEDIMIENTOS_RCA;
		    

		    globalMap.put("tOracleInput_13_QUERY",dbquery_tOracleInput_13);

		    java.sql.ResultSet rs_tOracleInput_13 = null;

		    try {
		    	rs_tOracleInput_13 = stmt_tOracleInput_13.executeQuery(dbquery_tOracleInput_13);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_13 = rs_tOracleInput_13.getMetaData();
		    	int colQtyInRs_tOracleInput_13 = rsmd_tOracleInput_13.getColumnCount();

		    String tmpContent_tOracleInput_13 = null;
		    
		    
		    while (rs_tOracleInput_13.next()) {
		        nb_line_tOracleInput_13++;
		        
							if(colQtyInRs_tOracleInput_13 < 1) {
								row19.CODFACTURA = null;
							} else {
	                         		
        	row19.CODFACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 2) {
								row19.PROCESOSASISTENCIALES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(2) != null) {
						row19.PROCESOSASISTENCIALES_ID = rs_tOracleInput_13.getBigDecimal(2);
					} else {
				
						row19.PROCESOSASISTENCIALES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 3) {
								row19.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(3) != null) {
						row19.UORG_ID = rs_tOracleInput_13.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 4) {
								row19.CODPRESTADOR = null;
							} else {
	                         		
        	row19.CODPRESTADOR = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 5) {
								row19.FUERZA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(5) != null) {
						row19.FUERZA_ID = rs_tOracleInput_13.getBigDecimal(5);
					} else {
				
						row19.FUERZA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 6) {
								row19.PACIENTE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(6) != null) {
						row19.PACIENTE_ID = rs_tOracleInput_13.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 7) {
								row19.TDOCUMENTO = null;
							} else {
	                         		
        	row19.TDOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 8) {
								row19.DOCUMENTO = null;
							} else {
	                         		
        	row19.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 9) {
								row19.CODAUTORIZACION = null;
							} else {
	                         		
        	row19.CODAUTORIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 10) {
								row19.CODPROCEDIMIENTO = null;
							} else {
	                         		
        	row19.CODPROCEDIMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 11) {
								row19.AMBITO = null;
							} else {
	                         		
        	row19.AMBITO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 12) {
								row19.FINALIDAD = null;
							} else {
	                         		
        	row19.FINALIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 13) {
								row19.PERSONAL = null;
							} else {
	                         		
        	row19.PERSONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 14) {
								row19.CODDIAGPPAL = null;
							} else {
	                         		
        	row19.CODDIAGPPAL = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 15) {
								row19.COMPLICACION = null;
							} else {
	                         		
        	row19.COMPLICACION = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 16) {
								row19.QUIRURGICO = null;
							} else {
	                         		
        	row19.QUIRURGICO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 17) {
								row19.FORMA_QUIRURGICO = null;
							} else {
	                         		
        	row19.FORMA_QUIRURGICO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 17, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 18) {
								row19.VPROCEDIMIENTO = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(18) != null) {
						row19.VPROCEDIMIENTO = rs_tOracleInput_13.getBigDecimal(18);
					} else {
				
						row19.VPROCEDIMIENTO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 19) {
								row19.FECHA = null;
							} else {
										
			row19.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_13, 19);
		                    }
							if(colQtyInRs_tOracleInput_13 < 20) {
								row19.CODDIAGREL1 = null;
							} else {
	                         		
        	row19.CODDIAGREL1 = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 20, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 21) {
								row19.CODDIAGREL2 = null;
							} else {
	                         		
        	row19.CODDIAGREL2 = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 21, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 22) {
								row19.CODDIAGREL3 = null;
							} else {
	                         		
        	row19.CODDIAGREL3 = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 22, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 23) {
								row19.PROFESIONAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(23) != null) {
						row19.PROFESIONAL_ID = rs_tOracleInput_13.getBigDecimal(23);
					} else {
				
						row19.PROFESIONAL_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 24) {
								row19.TDOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row19.TDOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 24, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 25) {
								row19.DOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row19.DOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 25, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 26) {
								row19.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(26) != null) {
						row19.ESPECIALIDADES_ID = rs_tOracleInput_13.getBigDecimal(26);
					} else {
				
						row19.ESPECIALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 27) {
								row19.ESPECIALIDAD = null;
							} else {
	                         		
        	row19.ESPECIALIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 27, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 28) {
								row19.TIPO_USUARIO = null;
							} else {
	                         		
        	row19.TIPO_USUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 28, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 29) {
								row19.EDAD = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(29) != null) {
						row19.EDAD = rs_tOracleInput_13.getBigDecimal(29);
					} else {
				
						row19.EDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 30) {
								row19.UMEDIDA_EDAD = null;
							} else {
	                         		
        	row19.UMEDIDA_EDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 30, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 31) {
								row19.GRADO_CODIGO = null;
							} else {
	                         		
        	row19.GRADO_CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 31, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 32) {
								row19.GRADO = null;
							} else {
	                         		
        	row19.GRADO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 32, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 33) {
								row19.CLASEGRD = null;
							} else {
	                         		
        	row19.CLASEGRD = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 33, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 34) {
								row19.CLASEGRD_CODIGO = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(34) != null) {
						row19.CLASEGRD_CODIGO = rs_tOracleInput_13.getBigDecimal(34);
					} else {
				
						row19.CLASEGRD_CODIGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 35) {
								row19.FINALIDAD_CONSULTA = null;
							} else {
	                         		
        	row19.FINALIDAD_CONSULTA = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 35, false);
		                    }
					




 



/**
 * [tOracleInput_13 begin ] stop
 */
	
	/**
	 * [tOracleInput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 


	tos_count_tOracleInput_13++;

/**
 * [tOracleInput_13 main ] stop
 */
	
	/**
	 * [tOracleInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tMap_21 main ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_21 = false;
		boolean mainRowRejected_tMap_21 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
        // ###############################
        // # Output tables

rca_in = null;


// # Output table : 'rca_in'
rca_in_tmp.CODFACTURA = null;
rca_in_tmp.PROCESOSASISTENCIALES_ID = row19.PROCESOSASISTENCIALES_ID ;
rca_in_tmp.CODPRESTADOR = row19.CODPRESTADOR ;
rca_in_tmp.TDOCUMENTO = row19.TDOCUMENTO ;
rca_in_tmp.DOCUMENTO = row19.DOCUMENTO ;
rca_in_tmp.CODAUTORIZACION = row19.CODAUTORIZACION ;
rca_in_tmp.CODPROCEDIMIENTO = row19.CODPROCEDIMIENTO ;
rca_in_tmp.AMBITO = row19.AMBITO ;
rca_in_tmp.FINALIDAD = row19.FINALIDAD ;
rca_in_tmp.PERSONAL = row19.PERSONAL ;
rca_in_tmp.CODDIAGPPAL = row19.CODDIAGPPAL ;
rca_in_tmp.COMPLICACION = row19.COMPLICACION ;
rca_in_tmp.FORMA_QUIRURGICO = row19.FORMA_QUIRURGICO ;
rca_in_tmp.VPROCEDIMIENTO = null;
rca_in_tmp.FECHA = row19.FECHA ;
rca_in_tmp.CODDIAGREL1 = row19.CODDIAGREL1 ;
rca_in_tmp.CODDIAGREL2 = row19.CODDIAGREL2 ;
rca_in_tmp.CODDIAGREL3 = row19.CODDIAGREL3 ;
rca_in_tmp.PERIODO = TalendDate.formatDate("yyyy-MM",row19.FECHA);
rca_in_tmp.TRIPS = "Interna";
rca_in_tmp.PERSONAS_ID = row19.PACIENTE_ID ;
rca_in_tmp.UORG_ID = row19.UORG_ID ;
rca_in_tmp.FUERZA_ID = row19.FUERZA_ID ;
rca_in_tmp.TDOCUMENTO_PROFESIONAL = row19.TDOCUMENTO_PROFESIONAL ;
rca_in_tmp.DOCUMENTO_PROFESIONAL = row19.DOCUMENTO_PROFESIONAL ;
rca_in_tmp.ESPECIALIDAD = row19.ESPECIALIDAD ;
rca_in_tmp.PESO = null;
rca_in_tmp.TALLA = null;
rca_in_tmp.UMEDIDA_PESO = null;
rca_in_tmp.UMEDIDA_TALLA = null;
rca_in_tmp.TIPO_GENERACION = "Automatico";
rca_in_tmp.TIPO_USUARIO = row19.TIPO_USUARIO ;
rca_in_tmp.EDAD = row19.EDAD ;
rca_in_tmp.UMEDIDA_EDAD = row19.UMEDIDA_EDAD ;
rca_in_tmp.GRADO_CODIGO = row19.GRADO_CODIGO ;
rca_in_tmp.GRADO = row19.GRADO ;
rca_in_tmp.CLASEGRD = row19.CLASEGRD ;
rca_in_tmp.ADMISION_ID = null;
rca_in_tmp.CLASEGRD_CODIGO = row19.CLASEGRD_CODIGO ;
rca_in_tmp.ESPECIALIDADES_ID = row19.ESPECIALIDADES_ID ;
rca_in_tmp.QUIRURGICO = row19.QUIRURGICO ;
rca_in_tmp.EJECACTIVIDADES_ID = null;
rca_in_tmp.ESTADO_TRATAMIENTO = null;
rca_in_tmp.FINALIDAD_CONSULTA = row19.FINALIDAD_CONSULTA ;
rca_in = rca_in_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_21 = false;










 


	tos_count_tMap_21++;

/**
 * [tMap_21 main ] stop
 */
	
	/**
	 * [tMap_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	

 



/**
 * [tMap_21 process_data_begin ] stop
 */
// Start of branch "rca_in"
if(rca_in != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"rca_in"
									
							);
						}
						
//////////
 

// for output
			row16 = new row16Struct();
								
			row16.CODFACTURA = rca_in.CODFACTURA;								
			row16.PROCESOSASISTENCIALES_ID = rca_in.PROCESOSASISTENCIALES_ID;								
			row16.CODPRESTADOR = rca_in.CODPRESTADOR;								
			row16.TDOCUMENTO = rca_in.TDOCUMENTO;								
			row16.DOCUMENTO = rca_in.DOCUMENTO;								
			row16.CODAUTORIZACION = rca_in.CODAUTORIZACION;								
			row16.CODPROCEDIMIENTO = rca_in.CODPROCEDIMIENTO;								
			row16.AMBITO = rca_in.AMBITO;								
			row16.FINALIDAD = rca_in.FINALIDAD;								
			row16.PERSONAL = rca_in.PERSONAL;								
			row16.CODDIAGPPAL = rca_in.CODDIAGPPAL;								
			row16.COMPLICACION = rca_in.COMPLICACION;								
			row16.FORMA_QUIRURGICO = rca_in.FORMA_QUIRURGICO;								
			row16.VPROCEDIMIENTO = rca_in.VPROCEDIMIENTO;								
			row16.FECHA = rca_in.FECHA;								
			row16.CODDIAGREL1 = rca_in.CODDIAGREL1;								
			row16.CODDIAGREL2 = rca_in.CODDIAGREL2;								
			row16.CODDIAGREL3 = rca_in.CODDIAGREL3;								
			row16.PERIODO = rca_in.PERIODO;								
			row16.TRIPS = rca_in.TRIPS;								
			row16.PERSONAS_ID = rca_in.PERSONAS_ID;								
			row16.UORG_ID = rca_in.UORG_ID;								
			row16.FUERZA_ID = rca_in.FUERZA_ID;								
			row16.TDOCUMENTO_PROFESIONAL = rca_in.TDOCUMENTO_PROFESIONAL;								
			row16.DOCUMENTO_PROFESIONAL = rca_in.DOCUMENTO_PROFESIONAL;								
			row16.ESPECIALIDAD = rca_in.ESPECIALIDAD;								
			row16.PESO = rca_in.PESO;								
			row16.TALLA = rca_in.TALLA;								
			row16.UMEDIDA_PESO = rca_in.UMEDIDA_PESO;								
			row16.UMEDIDA_TALLA = rca_in.UMEDIDA_TALLA;								
			row16.TIPO_GENERACION = rca_in.TIPO_GENERACION;								
			row16.TIPO_USUARIO = rca_in.TIPO_USUARIO;								
			row16.EDAD = rca_in.EDAD;								
			row16.UMEDIDA_EDAD = rca_in.UMEDIDA_EDAD;								
			row16.GRADO_CODIGO = rca_in.GRADO_CODIGO;								
			row16.GRADO = rca_in.GRADO;								
			row16.CLASEGRD = rca_in.CLASEGRD;								
			row16.ADMISION_ID = rca_in.ADMISION_ID;								
			row16.CLASEGRD_CODIGO = rca_in.CLASEGRD_CODIGO;								
			row16.ESPECIALIDADES_ID = rca_in.ESPECIALIDADES_ID;								
			row16.QUIRURGICO = rca_in.QUIRURGICO;								
			row16.EJECACTIVIDADES_ID = rca_in.EJECACTIVIDADES_ID;								
			row16.ESTADO_TRATAMIENTO = rca_in.ESTADO_TRATAMIENTO;								
			row16.FINALIDAD_CONSULTA = rca_in.FINALIDAD_CONSULTA;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row13Struct row13 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row13HashKey.PROCESOSASISTENCIALES_ID = row16.PROCESOSASISTENCIALES_ID ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.PROCESOSASISTENCIALES_ID = '" + row13HashKey.PROCESOSASISTENCIALES_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

proc_out = null;


// # Output table : 'proc_out'
proc_out_tmp.CODFACTURA = row16.CODFACTURA ;
proc_out_tmp.PROCESOASISTENCIAL_ID = row16.PROCESOSASISTENCIALES_ID ;
proc_out_tmp.CODPRESTADOR = row16.CODPRESTADOR ;
proc_out_tmp.TDOCUMENTO = row16.TDOCUMENTO ;
proc_out_tmp.DOCUMENTO = row16.DOCUMENTO ;
proc_out_tmp.CODAUTORIZACION = row16.CODAUTORIZACION ;
proc_out_tmp.CODPROCEDIMIENTO = row16.CODPROCEDIMIENTO ;
proc_out_tmp.AMBITO = row16.AMBITO ;
proc_out_tmp.FINALIDAD = row16.FINALIDAD ;
proc_out_tmp.PERSONAL = row16.PERSONAL ;
proc_out_tmp.CODDIAGPPAL = row16.CODDIAGPPAL ;
proc_out_tmp.CODDIAGNOSTICO1 = row16.CODDIAGREL1 ;
proc_out_tmp.COMPLICACION = row16.COMPLICACION ;
proc_out_tmp.FORMA_QUIRURGICO = row16.FORMA_QUIRURGICO ;
proc_out_tmp.VPROCEDIMIENTO = row16.VPROCEDIMIENTO ;
proc_out_tmp.FECHA = row16.FECHA ;
proc_out_tmp.PERIODO = row16.PERIODO ;
proc_out_tmp.TRIPS = row16.TRIPS ;
proc_out_tmp.PERSONAS_ID = row16.PERSONAS_ID ;
proc_out_tmp.UORG_ID = row16.UORG_ID ;
proc_out_tmp.FUERZA_ID = row16.FUERZA_ID ;
proc_out_tmp.TDOCUMENTO_PROFESIONAL = row16.TDOCUMENTO_PROFESIONAL ;
proc_out_tmp.DOCUMENTO_PROFESIONAL = row16.DOCUMENTO_PROFESIONAL ;
proc_out_tmp.ESPECIALIDAD = row16.ESPECIALIDAD ;
proc_out_tmp.PESO = row13.PESO_VALOR;
proc_out_tmp.TALLA = row13.ESTATURA_VALOR;
proc_out_tmp.UMEDIDA_PESO = row13.PESO_UMEDIDA ;
proc_out_tmp.UMEDIDA_TALLA = row13.ESTATURA_UMEDIDA ;
proc_out_tmp.TIPO_GENERACION = row16.TIPO_GENERACION ;
proc_out_tmp.TIPO_USUARIO = row16.TIPO_USUARIO ;
proc_out_tmp.EDAD = row16.EDAD ;
proc_out_tmp.UMEDIDA_EDAD = row16.UMEDIDA_EDAD ;
proc_out_tmp.GRADO_CODIGO = row16.GRADO_CODIGO ;
proc_out_tmp.GRADO = row16.GRADO ;
proc_out_tmp.CLASEGRD = row16.CLASEGRD ;
proc_out_tmp.ADMISION_ID = row16.ADMISION_ID ;
proc_out_tmp.CLASEGRD_CODIGO = row16.CLASEGRD_CODIGO ;
proc_out_tmp.ESPECIALIDADES_ID = row16.ESPECIALIDADES_ID ;
proc_out_tmp.QUIRURGICO = row16.QUIRURGICO ;
proc_out_tmp.CODDIAGNOSTICO2 = row16.CODDIAGREL2 ;
proc_out_tmp.CODDIAGNOSTICO3 = row16.CODDIAGREL3 ;
proc_out_tmp.EJECACTIVIDADES_ID = row16.EJECACTIVIDADES_ID ;
proc_out_tmp.ESTADO_TRATAMIENTO = row16.ESTADO_TRATAMIENTO ;
proc_out_tmp.FINALIDAD_CONSULTA = row16.FINALIDAD_CONSULTA ;
proc_out = proc_out_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "proc_out"
if(proc_out != null) { 



	
	/**
	 * [tOracleOutput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"proc_out"
						
						);
					}
					



        whetherReject_tOracleOutput_15 = false;
                        if(proc_out.CODFACTURA == null) {
pstmt_tOracleOutput_15.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(1, proc_out.CODFACTURA);
}

                        pstmt_tOracleOutput_15.setBigDecimal(2, proc_out.PROCESOASISTENCIAL_ID);

                        if(proc_out.CODPRESTADOR == null) {
pstmt_tOracleOutput_15.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(3, proc_out.CODPRESTADOR);
}

                        if(proc_out.TDOCUMENTO == null) {
pstmt_tOracleOutput_15.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(4, proc_out.TDOCUMENTO);
}

                        if(proc_out.DOCUMENTO == null) {
pstmt_tOracleOutput_15.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(5, proc_out.DOCUMENTO);
}

                        if(proc_out.CODAUTORIZACION == null) {
pstmt_tOracleOutput_15.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(6, proc_out.CODAUTORIZACION);
}

                        if(proc_out.CODPROCEDIMIENTO == null) {
pstmt_tOracleOutput_15.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(7, proc_out.CODPROCEDIMIENTO);
}

                        if(proc_out.AMBITO == null) {
pstmt_tOracleOutput_15.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(8, proc_out.AMBITO);
}

                        if(proc_out.FINALIDAD == null) {
pstmt_tOracleOutput_15.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(9, proc_out.FINALIDAD);
}

                        if(proc_out.PERSONAL == null) {
pstmt_tOracleOutput_15.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(10, proc_out.PERSONAL);
}

                        if(proc_out.CODDIAGPPAL == null) {
pstmt_tOracleOutput_15.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(11, proc_out.CODDIAGPPAL);
}

                        if(proc_out.CODDIAGNOSTICO1 == null) {
pstmt_tOracleOutput_15.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(12, proc_out.CODDIAGNOSTICO1);
}

                        if(proc_out.COMPLICACION == null) {
pstmt_tOracleOutput_15.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(13, proc_out.COMPLICACION);
}

                        if(proc_out.FORMA_QUIRURGICO == null) {
pstmt_tOracleOutput_15.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(14, proc_out.FORMA_QUIRURGICO);
}

                        pstmt_tOracleOutput_15.setBigDecimal(15, proc_out.VPROCEDIMIENTO);

                        if(proc_out.FECHA != null) {
pstmt_tOracleOutput_15.setTimestamp(16, new java.sql.Timestamp(proc_out.FECHA.getTime()));
} else {
pstmt_tOracleOutput_15.setNull(16, java.sql.Types.DATE);
}

                        if(proc_out.PERIODO == null) {
pstmt_tOracleOutput_15.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(17, proc_out.PERIODO);
}

                        if(proc_out.TRIPS == null) {
pstmt_tOracleOutput_15.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(18, proc_out.TRIPS);
}

                        pstmt_tOracleOutput_15.setBigDecimal(19, proc_out.PERSONAS_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(20, proc_out.UORG_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(21, proc_out.FUERZA_ID);

                        if(proc_out.TDOCUMENTO_PROFESIONAL == null) {
pstmt_tOracleOutput_15.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(22, proc_out.TDOCUMENTO_PROFESIONAL);
}

                        if(proc_out.DOCUMENTO_PROFESIONAL == null) {
pstmt_tOracleOutput_15.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(23, proc_out.DOCUMENTO_PROFESIONAL);
}

                        if(proc_out.ESPECIALIDAD == null) {
pstmt_tOracleOutput_15.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(24, proc_out.ESPECIALIDAD);
}

                        if(proc_out.PESO == null) {
pstmt_tOracleOutput_15.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(25, proc_out.PESO);
}

                        if(proc_out.TALLA == null) {
pstmt_tOracleOutput_15.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(26, proc_out.TALLA);
}

                        if(proc_out.UMEDIDA_PESO == null) {
pstmt_tOracleOutput_15.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(27, proc_out.UMEDIDA_PESO);
}

                        if(proc_out.UMEDIDA_TALLA == null) {
pstmt_tOracleOutput_15.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(28, proc_out.UMEDIDA_TALLA);
}

                        if(proc_out.TIPO_GENERACION == null) {
pstmt_tOracleOutput_15.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(29, proc_out.TIPO_GENERACION);
}

                        if(proc_out.TIPO_USUARIO == null) {
pstmt_tOracleOutput_15.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(30, proc_out.TIPO_USUARIO);
}

                        pstmt_tOracleOutput_15.setBigDecimal(31, proc_out.EDAD);

                        if(proc_out.UMEDIDA_EDAD == null) {
pstmt_tOracleOutput_15.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(32, proc_out.UMEDIDA_EDAD);
}

                        if(proc_out.GRADO_CODIGO == null) {
pstmt_tOracleOutput_15.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(33, proc_out.GRADO_CODIGO);
}

                        if(proc_out.GRADO == null) {
pstmt_tOracleOutput_15.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(34, proc_out.GRADO);
}

                        if(proc_out.CLASEGRD == null) {
pstmt_tOracleOutput_15.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(35, proc_out.CLASEGRD);
}

                        pstmt_tOracleOutput_15.setBigDecimal(36, proc_out.ADMISION_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(37, proc_out.CLASEGRD_CODIGO);

                        pstmt_tOracleOutput_15.setBigDecimal(38, proc_out.ESPECIALIDADES_ID);

                        if(proc_out.QUIRURGICO == null) {
pstmt_tOracleOutput_15.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(39, proc_out.QUIRURGICO);
}

                        if(proc_out.CODDIAGNOSTICO2 == null) {
pstmt_tOracleOutput_15.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(40, proc_out.CODDIAGNOSTICO2);
}

                        if(proc_out.CODDIAGNOSTICO3 == null) {
pstmt_tOracleOutput_15.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(41, proc_out.CODDIAGNOSTICO3);
}

                        pstmt_tOracleOutput_15.setBigDecimal(42, proc_out.EJECACTIVIDADES_ID);

                        if(proc_out.ESTADO_TRATAMIENTO == null) {
pstmt_tOracleOutput_15.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(43, proc_out.ESTADO_TRATAMIENTO);
}

                        if(proc_out.FINALIDAD_CONSULTA == null) {
pstmt_tOracleOutput_15.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(44, proc_out.FINALIDAD_CONSULTA);
}

                pstmt_tOracleOutput_15.addBatch();
                nb_line_tOracleOutput_15++;
                batchSizeCounter_tOracleOutput_15++;
            if (batchSize_tOracleOutput_15 > 0 &&  batchSize_tOracleOutput_15 <= batchSizeCounter_tOracleOutput_15) {
                try {
                    pstmt_tOracleOutput_15.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_15){
globalMap.put("tOracleOutput_15_ERROR_MESSAGE",e_tOracleOutput_15.getMessage());
			        java.sql.SQLException ne_tOracleOutput_15 = e_tOracleOutput_15.getNextException(),sqle_tOracleOutput_15=null;
			    	String errormessage_tOracleOutput_15;
					if (ne_tOracleOutput_15 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_15 = new java.sql.SQLException(e_tOracleOutput_15.getMessage() + "\ncaused by: " + ne_tOracleOutput_15.getMessage(), ne_tOracleOutput_15.getSQLState(), ne_tOracleOutput_15.getErrorCode(), ne_tOracleOutput_15);
						errormessage_tOracleOutput_15 = sqle_tOracleOutput_15.getMessage();
					}else{
						errormessage_tOracleOutput_15 = e_tOracleOutput_15.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_15);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_15 = pstmt_tOracleOutput_15.getUpdateCount();
                    insertedCount_tOracleOutput_15
                += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                rowsToCommitCount_tOracleOutput_15 += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                batchSizeCounter_tOracleOutput_15 = 0;
            }
                commitCounter_tOracleOutput_15++;
                if(commitEvery_tOracleOutput_15 <= commitCounter_tOracleOutput_15) {
                    if(batchSizeCounter_tOracleOutput_15 > 0) {
                        try {
                            pstmt_tOracleOutput_15.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_15){
globalMap.put("tOracleOutput_15_ERROR_MESSAGE",e_tOracleOutput_15.getMessage());
					        java.sql.SQLException ne_tOracleOutput_15 = e_tOracleOutput_15.getNextException(),sqle_tOracleOutput_15=null;
					    	String errormessage_tOracleOutput_15;
							if (ne_tOracleOutput_15 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_15 = new java.sql.SQLException(e_tOracleOutput_15.getMessage() + "\ncaused by: " + ne_tOracleOutput_15.getMessage(), ne_tOracleOutput_15.getSQLState(), ne_tOracleOutput_15.getErrorCode(), ne_tOracleOutput_15);
								errormessage_tOracleOutput_15 = sqle_tOracleOutput_15.getMessage();
							}else{
								errormessage_tOracleOutput_15 = e_tOracleOutput_15.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_15);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_15 = pstmt_tOracleOutput_15.getUpdateCount();
                            insertedCount_tOracleOutput_15
                        += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                        rowsToCommitCount_tOracleOutput_15 += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_15 != 0){
                    	
                    }
                    conn_tOracleOutput_15.commit();
                    if(rowsToCommitCount_tOracleOutput_15 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_15 = 0;
                    }
                    commitCounter_tOracleOutput_15=0;
                    	batchSizeCounter_tOracleOutput_15=0;
                }

 


	tos_count_tOracleOutput_15++;

/**
 * [tOracleOutput_15 main ] stop
 */
	
	/**
	 * [tOracleOutput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	

 



/**
 * [tOracleOutput_15 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	

 



/**
 * [tOracleOutput_15 process_data_end ] stop
 */

} // End of branch "proc_out"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "rca_in"




	
	/**
	 * [tMap_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	

 



/**
 * [tMap_21 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

}
}finally{
	if (rs_tOracleInput_13 != null) {
		rs_tOracleInput_13.close();
	}
	if (stmt_tOracleInput_13 != null) {
		stmt_tOracleInput_13.close();
	}
}

globalMap.put("tOracleInput_13_NB_LINE",nb_line_tOracleInput_13);
 

ok_Hash.put("tOracleInput_13", true);
end_Hash.put("tOracleInput_13", System.currentTimeMillis());




/**
 * [tOracleInput_13 end ] stop
 */

	
	/**
	 * [tMap_21 end ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tMap_21", true);
end_Hash.put("tMap_21", System.currentTimeMillis());




/**
 * [tMap_21 end ] stop
 */




	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
cgp_inStruct cgp_in_tmp = new cgp_inStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_8", false);
		start_Hash.put("tOracleInput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_8";
	
	
		int tos_count_tOracleInput_8 = 0;
		
	


	
		    int nb_line_tOracleInput_8 = 0;
		    java.sql.Connection conn_tOracleInput_8 = null;
				conn_tOracleInput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
				
                boolean isTimeZoneNull_tOracleInput_8 = false;
				boolean isConnectionWrapped_tOracleInput_8 = !(conn_tOracleInput_8 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_8.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_8 = null;
                if (isConnectionWrapped_tOracleInput_8) {
					unwrappedOraConn_tOracleInput_8 = conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_8 != null) {
                        isTimeZoneNull_tOracleInput_8 = (unwrappedOraConn_tOracleInput_8.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_8 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_8).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_8) {
					java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_8 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_8.next()) {
						sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_8 && unwrappedOraConn_tOracleInput_8 != null) {
                        unwrappedOraConn_tOracleInput_8.setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_8).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_8.setFetchSize(1000);


		    String dbquery_tOracleInput_8 = " SELECT\n  'Grupal' AS TIPO,\n  NULL AS PROCESOSASISTENCIALES_ID,\n  CEA.UORG_ID,\n  GU.CODIGO AS CODPRESTADOR,\n  GU.F"
+"UERZA_ID,\n  CDA.PERSONAS_ID,\n  GT.SIGLA AS TDOCUMENTO,\n  GP.DOCUMENTO AS DOCUMENTO,\n  '' AS CODAUTORIZACION,\n  GC.C"
+"ODIGO AS CODPROCEDIMIENTO,\n  'Ambulatorio' AS AMBITO,\n  '' AS FINALIDAD,\n  'No registra' AS PERSONAL,\n  '' AS CODDIA"
+"GPPAL,  \n  '' AS COMPLICACION,\n  '' AS FORMA_QUIRURGICO,\n  '' AS VPROCEDIMIENTO,\n  CDA.FREGISTRO AS FECHA,\n  '' AS "
+"CODDIAGREL1,\n  '' AS CODDIAGREL2,\n  '' AS CODDIAGREL3,\n  CASE\n    WHEN CEA.DOCUMENTO_PROFESIONAL IS NULL THEN ''\n  "
+"  ELSE 'CC'\n    END AS TDOCUMENTO_PROFESIONAL,\n  TO_CHAR(CEA.DOCUMENTO_PROFESIONAL) AS DOCUMENTO_PROFESIONAL,\n  TO_NU"
+"MBER('') AS ESPECIALIDADES_ID,\n  '' AS ESPECIALIDAD,\n  CASE \n    WHEN PLANAFI.CODIGO = '2' THEN 'No cotizante'\n    W"
+"HEN PLANAFI.CODIGO IN ('1','3','4','5','6','7','8','9','10') AND ATC.SIGLA='ACT' THEN 'Cotizante Activo' \n    WHEN PLAN"
+"AFI.CODIGO IN ('1','3','4','5','6','7','8','9','10') AND ATC.SIGLA IN ('RET','PEN') THEN 'Cotizante Pensionado / Retirad"
+"o' \n    WHEN PLANAFI.CODIGO IN ('11','12','13','14','15','16','17','18') THEN 'Beneficiario' \n    WHEN PLANAFI.CODIGO "
+"IN ('1','3','4','5','6','7','8','9','10') AND ATC.SIGLA IN ('PAR','NOC') THEN 'Otro cotizante'\n  END TIPO_USUARIO,\n  C"
+"ASE\n    WHEN TRUNC(MONTHS_BETWEEN (CDA.FREGISTRO,GP.FECHA_NACIMIENTO)/12)<1\n    THEN TRUNC(MONTHS_BETWEEN (CDA.FREGIST"
+"RO,GP.FECHA_NACIMIENTO))\n    ELSE TRUNC(MONTHS_BETWEEN (CDA.FREGISTRO,GP.FECHA_NACIMIENTO)/12) \n  END AS EDAD,\n  CASE"
+"       \n    WHEN TRUNC(MONTHS_BETWEEN (CDA.FREGISTRO,GP.FECHA_NACIMIENTO)/12)<1\n    THEN 'Meses'\n    WHEN TRUNC(MONTH"
+"S_BETWEEN (CDA.FREGISTRO,GP.FECHA_NACIMIENTO)/12)>=1\n    THEN 'Años'\n  END UMEDIDA_EDAD,\n  GRA.CODIGO AS GRADO_CODIGO"
+",\n  GRA.NOMBRE AS GRADO,\n  CLAGR.DESCRIPCION AS CLASEGRD,\n  CLAGR.CODIGO AS CLASEGRD_CODIGO,\n  '' AS ACTOQUIRURGICO,"
+"\n  CDA.EJECACTIVIDADES_ID,\n  ' ' AS FINALIDAD_CONSULTA\n\nFROM CGP_DEJECACTIVIDADES CDA \nINNER JOIN CGP_EJECACTIVIDAD"
+"ES CEA ON CDA.EJECACTIVIDADES_ID=CEA.ID AND CEA.ESTREGISTRO_ID=1\nINNER JOIN GEN_AFILIADOS GA ON GA.PERSONAS_ID = CDA.PE"
+"RSONAS_ID AND GA.ESTREGISTRO_ID =1 \nINNER JOIN GEN_PERSONAS GP ON GP.ID=GA.PERSONAS_ID\nINNER JOIN GEN_TDOCUMENTOS GT O"
+"N GT.ID=GP.TDOCUMENTOS_ID\nINNER JOIN GEN_AFILIADOS_ENTAPORTANTE AEA ON ((AEA.AFILIADOS_ID = GA.ID AND GA.PADRE_ID IS NU"
+"LL) OR AEA.AFILIADOS_ID = GA.PADRE_ID) AND AEA.PRINCIPAL = 1 AND AEA.ESTREGISTRO_ID =1 \nLEFT JOIN GEN_GRDMILITARES GRA "
+"ON GRA.ID = AEA.GRDMILITARES_ID\nLEFT JOIN GEN_CLASEGRD CLAGR ON CLAGR.ID = GRA.CLASEGRD_ID\nLEFT JOIN AFI_TVINCULACIONE"
+"S AT ON AT.ID=AEA.TVINCULACIONES_ID\nLEFT JOIN AFI_TCOTIZACION ATC ON ATC.ID=AT.TCOTIZACION_ID\nLEFT JOIN AFI_PLANAFILIA"
+"CIONES PLANAFI ON PLANAFI.ID = GA.PLANAFILIACIONES_ID AND PLANAFI.ESTREGISTRO_ID=1\nINNER JOIN CGP_ACTIVIDADES CA ON CDA"
+".ACTIVIDADES_ID=CA.ID AND CA.ESTREGISTRO_ID=1\nLEFT JOIN GEN_CUPS GC ON GC.ID=CA.CUPSGRUPAL_ID\nINNER JOIN GEN_UORG GU O"
+"N GU.ID=CEA.UORG_ID\n    \nWHERE CDA.ESTREGISTRO_ID=1\n "+context.CONDICION_PROCEDIMIENTOS_CGP+" \n\nUNION ALL\n\nSELECT \n  'Individual' AS TIPO,\n  CDA.PROCESOSASISTENCIALES_ID,\n  HP.UORG_ID, \n  GUORG.CODIGO AS "
+"CODPRESTADOR,\n  GUORG.FUERZA_ID,\n  CDA.PERSONAS_ID,\n  GT.SIGLA AS TDOCUMENTO,\n  GP.DOCUMENTO AS DOCUMENTO,\n  '' AS "
+"CODAUTORIZACION,\n  CUPS.CODIGO AS CODPROCEDIMIENTO,\n  'Ambulatorio' AS AMBITO,\n  '' AS FINALIDAD,\n  CASE\n    WHEN G"
+"C.NOMBRE LIKE 'Médico%' AND GC.NOMBRE NOT LIKE '%Especialista%' THEN 'Médico'\n    WHEN GC.NOMBRE LIKE '%Especialista%' "
+"THEN 'Médico Especialista'\n    WHEN GC.NOMBRE LIKE 'Enfermer%' AND GC.NOMBRE NOT LIKE '%(auxiliar)%' THEN 'Enfermero(a)"
+"'\n    WHEN GC.NOMBRE LIKE '%(auxiliar)%' THEN 'Enfermero(a) auxiliar'\n    ELSE 'No registra'\n  END AS PERSONAL,\n  CI"
+"EPPAL.CODIGO AS CODDIAGPPAL,\n  CIE.CODIGO AS COMPLICACION,\n  '' AS FORMA_QUIRURGICO,\n  '' AS VPROCEDIMIENTO,\n  CDA.F"
+"REGISTRO AS FECHA,\n  RELACIONADOS.UNO AS CODDIAGREL1,\n  RELACIONADOS.DOS AS CODDIAGREL2,\n  RELACIONADOS.TRES AS CODDI"
+"AGREL3,\n  GTS.SIGLA AS TDOCUMENTO_PROFESIONAL,\n  GP2.DOCUMENTO AS DOCUMENTO_PROFESIONAL,\n  AE.ESPECIALIDADES_ID,\n  E"
+"SP.NOMBRE AS ESPECIALIDAD,\n  CASE \n      WHEN PLANAFI.CODIGO = '2' THEN 'No cotizante'\n      WHEN PLANAFI.CODIGO IN ("
+"'1','3','4','5','6','7','8','9','10') AND ATC.SIGLA='ACT' THEN 'Cotizante Activo' \n      WHEN PLANAFI.CODIGO IN ('1','3"
+"','4','5','6','7','8','9','10') AND ATC.SIGLA IN ('RET','PEN') THEN 'Cotizante Pensionado / Retirado' \n      WHEN PLANA"
+"FI.CODIGO IN ('11','12','13','14','15','16','17','18') THEN 'Beneficiario' \n      WHEN PLANAFI.CODIGO IN ('1','3','4','"
+"5','6','7','8','9','10') THEN 'Cotizante' \n    END AS TIPO_USUARIO,\n  CASE\n    WHEN TRUNC(MONTHS_BETWEEN (CDA.FREGIST"
+"RO,GP.FECHA_NACIMIENTO)/12)<1\n    THEN TRUNC(MONTHS_BETWEEN (CDA.FREGISTRO,GP.FECHA_NACIMIENTO))\n    ELSE TRUNC(MONTHS"
+"_BETWEEN (CDA.FREGISTRO,GP.FECHA_NACIMIENTO)/12) \n  END AS EDAD,\n  CASE       \n    WHEN TRUNC(MONTHS_BETWEEN (CDA.FRE"
+"GISTRO,GP.FECHA_NACIMIENTO)/12)<1\n    THEN 'Meses'\n    WHEN TRUNC(MONTHS_BETWEEN (CDA.FREGISTRO,GP.FECHA_NACIMIENTO)/1"
+"2)>=1\n    THEN 'Años'\n  END UMEDIDA_EDAD,\n  GRA.CODIGO AS GRADO_CODIGO,\n  GRA.NOMBRE AS GRADO,\n  CLAGR.DESCRIPCION "
+"AS CLASEGRD,\n  CLAGR.CODIGO AS CLASEGRD_CODIGO,\n  CUPS.ACTOQUIRURGICO AS QUIRURGICO,\n  NULL AS EJECACTIVIDADES_ID,\n "
+" FIN.NOMBRE AS FINALIDAD_CONSULTA\n        \nFROM CGP_DEJECACTIVIDADES CDA \nINNER JOIN HCL_PROCESOSASISTENCIALES HP ON "
+"CDA.PROCESOSASISTENCIALES_ID=HP.ID AND HP.ESTREGISTRO_ID=1\nLEFT JOIN HCL_VALORACIONES VAL ON VAL.PROCESOSASISTENCIALES_"
+"ID = HP.ID  AND VAL.ESTREGISTRO_ID = 1\nLEFT JOIN GEN_FINALIDADCONSULTA FIN ON FIN.ID = VAL.FINALIDADCONSULTA_ID \nLEFT "
+"JOIN HCL_DIAGNOSTICOS HD ON HD.PROCESOSASISTENCIALES_ID=CDA.PROCESOSASISTENCIALES_ID\nLEFT JOIN GEN_CIE10 CIEPPAL ON CIE"
+"PPAL.ID = HD.CIE10_ID\nLEFT JOIN (SELECT * FROM (SELECT RELA.CIE10,NUM.NUMERO AS NUMERO_123,RELA.DIAGNOSTICOS_ID FROM ("
+"\n              SELECT \n              ROW_NUMBER()OVER (PARTITION BY DIAG.ID_DI ORDER BY DIAG.ID_DI) AS NUMERO ,\n      "
+"        DIAG.ID_DI AS DIAGNOSTICOS_ID,\n              CIE.CODIGO AS CIE10\n              FROM (SELECT \n                "
+"    DI.ID AS ID_DI\n                    FROM  HCL_DIAGNOSTICOS DI \n                     ) DIAG\n              INNER JOI"
+"N HCL_DIAGRELACIONADOS RE ON RE.DIAGNOSTICOS_ID = DIAG.ID_DI\n              INNER JOIN GEN_CIE10 CIE ON CIE.ID = RE.CIE1"
+"0_ID\n              ) RELA\n\n              RIGHT JOIN (SELECT '1' AS NUMERO FROM DUAL\n                          UNION"
+"\n                          SELECT '2' AS NUMERO FROM DUAL\n                          UNION \n                          S"
+"ELECT '3' AS NUMERO FROM DUAL \n                          ) NUM ON NUM.NUMERO = RELA.NUMERO\n                           "
+"     ) \n              PIVOT \n              (\n                MIN(CIE10)\n                FOR NUMERO_123\n            "
+"    IN ( '1' UNO, '2' DOS,'3' TRES) \n              )) RELACIONADOS ON RELACIONADOS.DIAGNOSTICOS_ID=HD.ID\nLEFT JOIN HCL"
+"_DIAGRELACIONADOS HDR ON HDR.DIAGNOSTICOS_ID=HD.ID AND HDR.TIPO='Complicacion'\nLEFT JOIN GEN_CIE10 CIE ON CIE.ID = HDR."
+"CIE10_ID\nLEFT JOIN GEN_USUARIOS GU ON GU.ID=HP.USUARIOS_ID\nINNER JOIN GEN_PERSONAS GP2 ON GP2.ID=GU.PERSONAS_ID\nINNER"
+" JOIN GEN_TDOCUMENTOS GTS ON GTS.ID=GP2.TDOCUMENTOS_ID\nLEFT JOIN GEN_AFILIADOS GA ON GA.PERSONAS_ID = CDA.PERSONAS_ID A"
+"ND GA.ESTREGISTRO_ID =1 \nINNER JOIN GEN_PERSONAS GP ON GP.ID=GA.PERSONAS_ID\nINNER JOIN GEN_TDOCUMENTOS GT ON GT.ID=GP."
+"TDOCUMENTOS_ID\nLEFT JOIN GEN_AFILIADOS_ENTAPORTANTE AEA ON ((AEA.AFILIADOS_ID = GA.ID AND GA.PADRE_ID IS NULL) OR AEA.A"
+"FILIADOS_ID = GA.PADRE_ID) AND AEA.PRINCIPAL = 1 AND AEA.ESTREGISTRO_ID =1 \nLEFT JOIN GEN_GRDMILITARES GRA ON GRA.ID = "
+"AEA.GRDMILITARES_ID\nLEFT JOIN GEN_CLASEGRD CLAGR ON CLAGR.ID = GRA.CLASEGRD_ID\nLEFT JOIN AFI_TVINCULACIONES AT ON AT.I"
+"D=AEA.TVINCULACIONES_ID\nLEFT JOIN AFI_TCOTIZACION ATC ON ATC.ID=AT.TCOTIZACION_ID\nLEFT JOIN AFI_PLANAFILIACIONES PLANA"
+"FI ON PLANAFI.ID = GA.PLANAFILIACIONES_ID AND PLANAFI.ESTREGISTRO_ID=1\nLEFT JOIN CGP_ACTIVIDADES CA ON CDA.ACTIVIDADES_"
+"ID=CA.ID AND CA.ESTREGISTRO_ID=1\nLEFT JOIN GEN_CUPS CUPS ON CUPS.ID = CA.CUPS_ID\nLEFT JOIN GEN_UORG GUORG ON GUORG.ID="
+"HP.UORG_ID\nLEFT JOIN ADM_ESPTRATANTES AE ON AE.ID=HP.ESPTRATANTES_ID\nLEFT JOIN GEN_ESPECIALIDADES ESP ON ESP.ID = AE.E"
+"SPECIALIDADES_ID\nLEFT JOIN GEN_CARGOS GC ON GC.ID=GP2.CARGOS_ID\n\nWHERE CDA.ESTREGISTRO_ID=1\n " +context.CONDICION_PROCEDIMIENTOS_CGP2;
		    

		    globalMap.put("tOracleInput_8_QUERY",dbquery_tOracleInput_8);

		    java.sql.ResultSet rs_tOracleInput_8 = null;

		    try {
		    	rs_tOracleInput_8 = stmt_tOracleInput_8.executeQuery(dbquery_tOracleInput_8);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8.getMetaData();
		    	int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8.getColumnCount();

		    String tmpContent_tOracleInput_8 = null;
		    
		    
		    while (rs_tOracleInput_8.next()) {
		        nb_line_tOracleInput_8++;
		        
							if(colQtyInRs_tOracleInput_8 < 1) {
								row17.TIPO = null;
							} else {
	                         		
        	row17.TIPO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 2) {
								row17.PROCESOSASISTENCIALES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(2) != null) {
						row17.PROCESOSASISTENCIALES_ID = rs_tOracleInput_8.getBigDecimal(2);
					} else {
				
						row17.PROCESOSASISTENCIALES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 3) {
								row17.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(3) != null) {
						row17.UORG_ID = rs_tOracleInput_8.getBigDecimal(3);
					} else {
				
						row17.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 4) {
								row17.CODPRESTADOR = null;
							} else {
	                         		
        	row17.CODPRESTADOR = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 5) {
								row17.FUERZA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(5) != null) {
						row17.FUERZA_ID = rs_tOracleInput_8.getBigDecimal(5);
					} else {
				
						row17.FUERZA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 6) {
								row17.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(6) != null) {
						row17.PERSONAS_ID = rs_tOracleInput_8.getBigDecimal(6);
					} else {
				
						row17.PERSONAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 7) {
								row17.TDOCUMENTO = null;
							} else {
	                         		
        	row17.TDOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 8) {
								row17.DOCUMENTO = null;
							} else {
	                         		
        	row17.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 9) {
								row17.CODAUTORIZACION = null;
							} else {
	                         		
        	row17.CODAUTORIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 10) {
								row17.CODPROCEDIMIENTO = null;
							} else {
	                         		
        	row17.CODPROCEDIMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 11) {
								row17.AMBITO = null;
							} else {
	                         		
        	row17.AMBITO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 12) {
								row17.FINALIDAD = null;
							} else {
	                         		
        	row17.FINALIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 13) {
								row17.PERSONAL = null;
							} else {
	                         		
        	row17.PERSONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 14) {
								row17.CODDIAGPPAL = null;
							} else {
	                         		
        	row17.CODDIAGPPAL = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 15) {
								row17.COMPLICACION = null;
							} else {
	                         		
        	row17.COMPLICACION = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 16) {
								row17.FORMA_QUIRURGICO = null;
							} else {
	                         		
        	row17.FORMA_QUIRURGICO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 17) {
								row17.VPROCEDIMIENTO = null;
							} else {
	                         		
        	row17.VPROCEDIMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 17, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 18) {
								row17.FECHA = null;
							} else {
										
			row17.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_8, 18);
		                    }
							if(colQtyInRs_tOracleInput_8 < 19) {
								row17.CODDIAGREL1 = null;
							} else {
	                         		
        	row17.CODDIAGREL1 = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 19, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 20) {
								row17.CODDIAGREL2 = null;
							} else {
	                         		
        	row17.CODDIAGREL2 = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 20, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 21) {
								row17.CODDIAGREL3 = null;
							} else {
	                         		
        	row17.CODDIAGREL3 = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 21, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 22) {
								row17.TDOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row17.TDOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 22, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 23) {
								row17.DOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row17.DOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 23, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 24) {
								row17.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(24) != null) {
						row17.ESPECIALIDADES_ID = rs_tOracleInput_8.getBigDecimal(24);
					} else {
				
						row17.ESPECIALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 25) {
								row17.ESPECIALIDAD = null;
							} else {
	                         		
        	row17.ESPECIALIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 25, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 26) {
								row17.TIPO_USUARIO = null;
							} else {
	                         		
        	row17.TIPO_USUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 26, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 27) {
								row17.EDAD = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(27) != null) {
						row17.EDAD = rs_tOracleInput_8.getBigDecimal(27);
					} else {
				
						row17.EDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 28) {
								row17.UMEDIDA_EDAD = null;
							} else {
	                         		
        	row17.UMEDIDA_EDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 28, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 29) {
								row17.GRADO_CODIGO = null;
							} else {
	                         		
        	row17.GRADO_CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 29, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 30) {
								row17.GRADO = null;
							} else {
	                         		
        	row17.GRADO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 30, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 31) {
								row17.CLASEGRD = null;
							} else {
	                         		
        	row17.CLASEGRD = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 31, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 32) {
								row17.CLASEGRD_CODIGO = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(32) != null) {
						row17.CLASEGRD_CODIGO = rs_tOracleInput_8.getBigDecimal(32);
					} else {
				
						row17.CLASEGRD_CODIGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 33) {
								row17.ACTOQUIRURGICO = null;
							} else {
	                         		
        	row17.ACTOQUIRURGICO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 33, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 34) {
								row17.EJECACTIVIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(34) != null) {
						row17.EJECACTIVIDADES_ID = rs_tOracleInput_8.getBigDecimal(34);
					} else {
				
						row17.EJECACTIVIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 35) {
								row17.FINALIDAD_CONSULTA = null;
							} else {
	                         		
        	row17.FINALIDAD_CONSULTA = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 35, false);
		                    }
					




 



/**
 * [tOracleInput_8 begin ] stop
 */
	
	/**
	 * [tOracleInput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 


	tos_count_tOracleInput_8++;

/**
 * [tOracleInput_8 main ] stop
 */
	
	/**
	 * [tOracleInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

cgp_in = null;


// # Output table : 'cgp_in'
cgp_in_tmp.CODFACTURA = null;
cgp_in_tmp.PROCESOSASISTENCIALES_ID = row17.PROCESOSASISTENCIALES_ID ;
cgp_in_tmp.CODPRESTADOR = row17.CODPRESTADOR ;
cgp_in_tmp.TDOCUMENTO = row17.TDOCUMENTO ;
cgp_in_tmp.DOCUMENTO = row17.DOCUMENTO ;
cgp_in_tmp.CODAUTORIZACION = null;
cgp_in_tmp.CODPROCEDIMIENTO = row17.CODPROCEDIMIENTO ;
cgp_in_tmp.AMBITO = row17.AMBITO ;
cgp_in_tmp.FINALIDAD = row17.FINALIDAD ;
cgp_in_tmp.PERSONAL = row17.PERSONAL ;
cgp_in_tmp.CODDIAGPPAL = row17.CODDIAGPPAL ;
cgp_in_tmp.COMPLICACION = row17.COMPLICACION ;
cgp_in_tmp.FORMA_QUIRURGICO = row17.FORMA_QUIRURGICO ;
cgp_in_tmp.VPROCEDIMIENTO = null;
cgp_in_tmp.FECHA = row17.FECHA ;
cgp_in_tmp.CODDIAGREL1 = row17.CODDIAGREL1 ;
cgp_in_tmp.CODDIAGREL2 = row17.CODDIAGREL2 ;
cgp_in_tmp.CODDIAGREL3 = row17.CODDIAGREL3 ;
cgp_in_tmp.PERIODO = null;
cgp_in_tmp.TRIPS = "Interna";
cgp_in_tmp.PERSONAS_ID = row17.PERSONAS_ID ;
cgp_in_tmp.UORG_ID = row17.UORG_ID ;
cgp_in_tmp.FUERZA_ID = row17.FUERZA_ID ;
cgp_in_tmp.TDOCUMENTO_PROFESIONAL = row17.TDOCUMENTO_PROFESIONAL ;
cgp_in_tmp.DOCUMENTO_PROFESIONAL = row17.DOCUMENTO_PROFESIONAL;
cgp_in_tmp.ESPECIALIDAD =  row17.ESPECIALIDAD ;
cgp_in_tmp.PESO = null;
cgp_in_tmp.TALLA = null;
cgp_in_tmp.UMEDIDA_PESO = null;
cgp_in_tmp.UMEDIDA_TALLA = null;
cgp_in_tmp.TIPO_GENERACION = "Automatico";
cgp_in_tmp.TIPO_USUARIO = row17.TIPO_USUARIO ;
cgp_in_tmp.EDAD = row17.EDAD ;
cgp_in_tmp.UMEDIDA_EDAD = row17.UMEDIDA_EDAD ;
cgp_in_tmp.GRADO_CODIGO = row17.GRADO_CODIGO ;
cgp_in_tmp.GRADO = row17.GRADO ;
cgp_in_tmp.CLASEGRD = row17.CLASEGRD ;
cgp_in_tmp.ADMISION_ID = null;
cgp_in_tmp.CLASEGRD_CODIGO = row17.CLASEGRD_CODIGO ;
cgp_in_tmp.ESPECIALIDADES_ID = row17.ESPECIALIDADES_ID ;
cgp_in_tmp.QUIRURGICO = row17.ACTOQUIRURGICO ;
cgp_in_tmp.EJECACTIVIDADES_ID = row17.EJECACTIVIDADES_ID ;
cgp_in_tmp.ESTADO_TRATAMIENTO = null;
cgp_in_tmp.FINALIDAD_CONSULTA = row17.FINALIDAD_CONSULTA ;
cgp_in = cgp_in_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "cgp_in"
if(cgp_in != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"cgp_in"
									
							);
						}
						
//////////
 

// for output
			row16 = new row16Struct();
								
			row16.CODFACTURA = cgp_in.CODFACTURA;								
			row16.PROCESOSASISTENCIALES_ID = cgp_in.PROCESOSASISTENCIALES_ID;								
			row16.CODPRESTADOR = cgp_in.CODPRESTADOR;								
			row16.TDOCUMENTO = cgp_in.TDOCUMENTO;								
			row16.DOCUMENTO = cgp_in.DOCUMENTO;								
			row16.CODAUTORIZACION = cgp_in.CODAUTORIZACION;								
			row16.CODPROCEDIMIENTO = cgp_in.CODPROCEDIMIENTO;								
			row16.AMBITO = cgp_in.AMBITO;								
			row16.FINALIDAD = cgp_in.FINALIDAD;								
			row16.PERSONAL = cgp_in.PERSONAL;								
			row16.CODDIAGPPAL = cgp_in.CODDIAGPPAL;								
			row16.COMPLICACION = cgp_in.COMPLICACION;								
			row16.FORMA_QUIRURGICO = cgp_in.FORMA_QUIRURGICO;								
			row16.VPROCEDIMIENTO = cgp_in.VPROCEDIMIENTO;								
			row16.FECHA = cgp_in.FECHA;								
			row16.CODDIAGREL1 = cgp_in.CODDIAGREL1;								
			row16.CODDIAGREL2 = cgp_in.CODDIAGREL2;								
			row16.CODDIAGREL3 = cgp_in.CODDIAGREL3;								
			row16.PERIODO = cgp_in.PERIODO;								
			row16.TRIPS = cgp_in.TRIPS;								
			row16.PERSONAS_ID = cgp_in.PERSONAS_ID;								
			row16.UORG_ID = cgp_in.UORG_ID;								
			row16.FUERZA_ID = cgp_in.FUERZA_ID;								
			row16.TDOCUMENTO_PROFESIONAL = cgp_in.TDOCUMENTO_PROFESIONAL;								
			row16.DOCUMENTO_PROFESIONAL = cgp_in.DOCUMENTO_PROFESIONAL;								
			row16.ESPECIALIDAD = cgp_in.ESPECIALIDAD;								
			row16.PESO = cgp_in.PESO;								
			row16.TALLA = cgp_in.TALLA;								
			row16.UMEDIDA_PESO = cgp_in.UMEDIDA_PESO;								
			row16.UMEDIDA_TALLA = cgp_in.UMEDIDA_TALLA;								
			row16.TIPO_GENERACION = cgp_in.TIPO_GENERACION;								
			row16.TIPO_USUARIO = cgp_in.TIPO_USUARIO;								
			row16.EDAD = cgp_in.EDAD;								
			row16.UMEDIDA_EDAD = cgp_in.UMEDIDA_EDAD;								
			row16.GRADO_CODIGO = cgp_in.GRADO_CODIGO;								
			row16.GRADO = cgp_in.GRADO;								
			row16.CLASEGRD = cgp_in.CLASEGRD;								
			row16.ADMISION_ID = cgp_in.ADMISION_ID;								
			row16.CLASEGRD_CODIGO = cgp_in.CLASEGRD_CODIGO;								
			row16.ESPECIALIDADES_ID = cgp_in.ESPECIALIDADES_ID;								
			row16.QUIRURGICO = cgp_in.QUIRURGICO;								
			row16.EJECACTIVIDADES_ID = cgp_in.EJECACTIVIDADES_ID;								
			row16.ESTADO_TRATAMIENTO = cgp_in.ESTADO_TRATAMIENTO;								
			row16.FINALIDAD_CONSULTA = cgp_in.FINALIDAD_CONSULTA;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row13Struct row13 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row13HashKey.PROCESOSASISTENCIALES_ID = row16.PROCESOSASISTENCIALES_ID ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.PROCESOSASISTENCIALES_ID = '" + row13HashKey.PROCESOSASISTENCIALES_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

proc_out = null;


// # Output table : 'proc_out'
proc_out_tmp.CODFACTURA = row16.CODFACTURA ;
proc_out_tmp.PROCESOASISTENCIAL_ID = row16.PROCESOSASISTENCIALES_ID ;
proc_out_tmp.CODPRESTADOR = row16.CODPRESTADOR ;
proc_out_tmp.TDOCUMENTO = row16.TDOCUMENTO ;
proc_out_tmp.DOCUMENTO = row16.DOCUMENTO ;
proc_out_tmp.CODAUTORIZACION = row16.CODAUTORIZACION ;
proc_out_tmp.CODPROCEDIMIENTO = row16.CODPROCEDIMIENTO ;
proc_out_tmp.AMBITO = row16.AMBITO ;
proc_out_tmp.FINALIDAD = row16.FINALIDAD ;
proc_out_tmp.PERSONAL = row16.PERSONAL ;
proc_out_tmp.CODDIAGPPAL = row16.CODDIAGPPAL ;
proc_out_tmp.CODDIAGNOSTICO1 = row16.CODDIAGREL1 ;
proc_out_tmp.COMPLICACION = row16.COMPLICACION ;
proc_out_tmp.FORMA_QUIRURGICO = row16.FORMA_QUIRURGICO ;
proc_out_tmp.VPROCEDIMIENTO = row16.VPROCEDIMIENTO ;
proc_out_tmp.FECHA = row16.FECHA ;
proc_out_tmp.PERIODO = row16.PERIODO ;
proc_out_tmp.TRIPS = row16.TRIPS ;
proc_out_tmp.PERSONAS_ID = row16.PERSONAS_ID ;
proc_out_tmp.UORG_ID = row16.UORG_ID ;
proc_out_tmp.FUERZA_ID = row16.FUERZA_ID ;
proc_out_tmp.TDOCUMENTO_PROFESIONAL = row16.TDOCUMENTO_PROFESIONAL ;
proc_out_tmp.DOCUMENTO_PROFESIONAL = row16.DOCUMENTO_PROFESIONAL ;
proc_out_tmp.ESPECIALIDAD = row16.ESPECIALIDAD ;
proc_out_tmp.PESO = row13.PESO_VALOR;
proc_out_tmp.TALLA = row13.ESTATURA_VALOR;
proc_out_tmp.UMEDIDA_PESO = row13.PESO_UMEDIDA ;
proc_out_tmp.UMEDIDA_TALLA = row13.ESTATURA_UMEDIDA ;
proc_out_tmp.TIPO_GENERACION = row16.TIPO_GENERACION ;
proc_out_tmp.TIPO_USUARIO = row16.TIPO_USUARIO ;
proc_out_tmp.EDAD = row16.EDAD ;
proc_out_tmp.UMEDIDA_EDAD = row16.UMEDIDA_EDAD ;
proc_out_tmp.GRADO_CODIGO = row16.GRADO_CODIGO ;
proc_out_tmp.GRADO = row16.GRADO ;
proc_out_tmp.CLASEGRD = row16.CLASEGRD ;
proc_out_tmp.ADMISION_ID = row16.ADMISION_ID ;
proc_out_tmp.CLASEGRD_CODIGO = row16.CLASEGRD_CODIGO ;
proc_out_tmp.ESPECIALIDADES_ID = row16.ESPECIALIDADES_ID ;
proc_out_tmp.QUIRURGICO = row16.QUIRURGICO ;
proc_out_tmp.CODDIAGNOSTICO2 = row16.CODDIAGREL2 ;
proc_out_tmp.CODDIAGNOSTICO3 = row16.CODDIAGREL3 ;
proc_out_tmp.EJECACTIVIDADES_ID = row16.EJECACTIVIDADES_ID ;
proc_out_tmp.ESTADO_TRATAMIENTO = row16.ESTADO_TRATAMIENTO ;
proc_out_tmp.FINALIDAD_CONSULTA = row16.FINALIDAD_CONSULTA ;
proc_out = proc_out_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "proc_out"
if(proc_out != null) { 



	
	/**
	 * [tOracleOutput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"proc_out"
						
						);
					}
					



        whetherReject_tOracleOutput_15 = false;
                        if(proc_out.CODFACTURA == null) {
pstmt_tOracleOutput_15.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(1, proc_out.CODFACTURA);
}

                        pstmt_tOracleOutput_15.setBigDecimal(2, proc_out.PROCESOASISTENCIAL_ID);

                        if(proc_out.CODPRESTADOR == null) {
pstmt_tOracleOutput_15.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(3, proc_out.CODPRESTADOR);
}

                        if(proc_out.TDOCUMENTO == null) {
pstmt_tOracleOutput_15.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(4, proc_out.TDOCUMENTO);
}

                        if(proc_out.DOCUMENTO == null) {
pstmt_tOracleOutput_15.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(5, proc_out.DOCUMENTO);
}

                        if(proc_out.CODAUTORIZACION == null) {
pstmt_tOracleOutput_15.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(6, proc_out.CODAUTORIZACION);
}

                        if(proc_out.CODPROCEDIMIENTO == null) {
pstmt_tOracleOutput_15.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(7, proc_out.CODPROCEDIMIENTO);
}

                        if(proc_out.AMBITO == null) {
pstmt_tOracleOutput_15.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(8, proc_out.AMBITO);
}

                        if(proc_out.FINALIDAD == null) {
pstmt_tOracleOutput_15.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(9, proc_out.FINALIDAD);
}

                        if(proc_out.PERSONAL == null) {
pstmt_tOracleOutput_15.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(10, proc_out.PERSONAL);
}

                        if(proc_out.CODDIAGPPAL == null) {
pstmt_tOracleOutput_15.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(11, proc_out.CODDIAGPPAL);
}

                        if(proc_out.CODDIAGNOSTICO1 == null) {
pstmt_tOracleOutput_15.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(12, proc_out.CODDIAGNOSTICO1);
}

                        if(proc_out.COMPLICACION == null) {
pstmt_tOracleOutput_15.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(13, proc_out.COMPLICACION);
}

                        if(proc_out.FORMA_QUIRURGICO == null) {
pstmt_tOracleOutput_15.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(14, proc_out.FORMA_QUIRURGICO);
}

                        pstmt_tOracleOutput_15.setBigDecimal(15, proc_out.VPROCEDIMIENTO);

                        if(proc_out.FECHA != null) {
pstmt_tOracleOutput_15.setTimestamp(16, new java.sql.Timestamp(proc_out.FECHA.getTime()));
} else {
pstmt_tOracleOutput_15.setNull(16, java.sql.Types.DATE);
}

                        if(proc_out.PERIODO == null) {
pstmt_tOracleOutput_15.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(17, proc_out.PERIODO);
}

                        if(proc_out.TRIPS == null) {
pstmt_tOracleOutput_15.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(18, proc_out.TRIPS);
}

                        pstmt_tOracleOutput_15.setBigDecimal(19, proc_out.PERSONAS_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(20, proc_out.UORG_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(21, proc_out.FUERZA_ID);

                        if(proc_out.TDOCUMENTO_PROFESIONAL == null) {
pstmt_tOracleOutput_15.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(22, proc_out.TDOCUMENTO_PROFESIONAL);
}

                        if(proc_out.DOCUMENTO_PROFESIONAL == null) {
pstmt_tOracleOutput_15.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(23, proc_out.DOCUMENTO_PROFESIONAL);
}

                        if(proc_out.ESPECIALIDAD == null) {
pstmt_tOracleOutput_15.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(24, proc_out.ESPECIALIDAD);
}

                        if(proc_out.PESO == null) {
pstmt_tOracleOutput_15.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(25, proc_out.PESO);
}

                        if(proc_out.TALLA == null) {
pstmt_tOracleOutput_15.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(26, proc_out.TALLA);
}

                        if(proc_out.UMEDIDA_PESO == null) {
pstmt_tOracleOutput_15.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(27, proc_out.UMEDIDA_PESO);
}

                        if(proc_out.UMEDIDA_TALLA == null) {
pstmt_tOracleOutput_15.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(28, proc_out.UMEDIDA_TALLA);
}

                        if(proc_out.TIPO_GENERACION == null) {
pstmt_tOracleOutput_15.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(29, proc_out.TIPO_GENERACION);
}

                        if(proc_out.TIPO_USUARIO == null) {
pstmt_tOracleOutput_15.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(30, proc_out.TIPO_USUARIO);
}

                        pstmt_tOracleOutput_15.setBigDecimal(31, proc_out.EDAD);

                        if(proc_out.UMEDIDA_EDAD == null) {
pstmt_tOracleOutput_15.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(32, proc_out.UMEDIDA_EDAD);
}

                        if(proc_out.GRADO_CODIGO == null) {
pstmt_tOracleOutput_15.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(33, proc_out.GRADO_CODIGO);
}

                        if(proc_out.GRADO == null) {
pstmt_tOracleOutput_15.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(34, proc_out.GRADO);
}

                        if(proc_out.CLASEGRD == null) {
pstmt_tOracleOutput_15.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(35, proc_out.CLASEGRD);
}

                        pstmt_tOracleOutput_15.setBigDecimal(36, proc_out.ADMISION_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(37, proc_out.CLASEGRD_CODIGO);

                        pstmt_tOracleOutput_15.setBigDecimal(38, proc_out.ESPECIALIDADES_ID);

                        if(proc_out.QUIRURGICO == null) {
pstmt_tOracleOutput_15.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(39, proc_out.QUIRURGICO);
}

                        if(proc_out.CODDIAGNOSTICO2 == null) {
pstmt_tOracleOutput_15.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(40, proc_out.CODDIAGNOSTICO2);
}

                        if(proc_out.CODDIAGNOSTICO3 == null) {
pstmt_tOracleOutput_15.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(41, proc_out.CODDIAGNOSTICO3);
}

                        pstmt_tOracleOutput_15.setBigDecimal(42, proc_out.EJECACTIVIDADES_ID);

                        if(proc_out.ESTADO_TRATAMIENTO == null) {
pstmt_tOracleOutput_15.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(43, proc_out.ESTADO_TRATAMIENTO);
}

                        if(proc_out.FINALIDAD_CONSULTA == null) {
pstmt_tOracleOutput_15.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(44, proc_out.FINALIDAD_CONSULTA);
}

                pstmt_tOracleOutput_15.addBatch();
                nb_line_tOracleOutput_15++;
                batchSizeCounter_tOracleOutput_15++;
            if (batchSize_tOracleOutput_15 > 0 &&  batchSize_tOracleOutput_15 <= batchSizeCounter_tOracleOutput_15) {
                try {
                    pstmt_tOracleOutput_15.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_15){
globalMap.put("tOracleOutput_15_ERROR_MESSAGE",e_tOracleOutput_15.getMessage());
			        java.sql.SQLException ne_tOracleOutput_15 = e_tOracleOutput_15.getNextException(),sqle_tOracleOutput_15=null;
			    	String errormessage_tOracleOutput_15;
					if (ne_tOracleOutput_15 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_15 = new java.sql.SQLException(e_tOracleOutput_15.getMessage() + "\ncaused by: " + ne_tOracleOutput_15.getMessage(), ne_tOracleOutput_15.getSQLState(), ne_tOracleOutput_15.getErrorCode(), ne_tOracleOutput_15);
						errormessage_tOracleOutput_15 = sqle_tOracleOutput_15.getMessage();
					}else{
						errormessage_tOracleOutput_15 = e_tOracleOutput_15.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_15);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_15 = pstmt_tOracleOutput_15.getUpdateCount();
                    insertedCount_tOracleOutput_15
                += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                rowsToCommitCount_tOracleOutput_15 += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                batchSizeCounter_tOracleOutput_15 = 0;
            }
                commitCounter_tOracleOutput_15++;
                if(commitEvery_tOracleOutput_15 <= commitCounter_tOracleOutput_15) {
                    if(batchSizeCounter_tOracleOutput_15 > 0) {
                        try {
                            pstmt_tOracleOutput_15.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_15){
globalMap.put("tOracleOutput_15_ERROR_MESSAGE",e_tOracleOutput_15.getMessage());
					        java.sql.SQLException ne_tOracleOutput_15 = e_tOracleOutput_15.getNextException(),sqle_tOracleOutput_15=null;
					    	String errormessage_tOracleOutput_15;
							if (ne_tOracleOutput_15 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_15 = new java.sql.SQLException(e_tOracleOutput_15.getMessage() + "\ncaused by: " + ne_tOracleOutput_15.getMessage(), ne_tOracleOutput_15.getSQLState(), ne_tOracleOutput_15.getErrorCode(), ne_tOracleOutput_15);
								errormessage_tOracleOutput_15 = sqle_tOracleOutput_15.getMessage();
							}else{
								errormessage_tOracleOutput_15 = e_tOracleOutput_15.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_15);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_15 = pstmt_tOracleOutput_15.getUpdateCount();
                            insertedCount_tOracleOutput_15
                        += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                        rowsToCommitCount_tOracleOutput_15 += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_15 != 0){
                    	
                    }
                    conn_tOracleOutput_15.commit();
                    if(rowsToCommitCount_tOracleOutput_15 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_15 = 0;
                    }
                    commitCounter_tOracleOutput_15=0;
                    	batchSizeCounter_tOracleOutput_15=0;
                }

 


	tos_count_tOracleOutput_15++;

/**
 * [tOracleOutput_15 main ] stop
 */
	
	/**
	 * [tOracleOutput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	

 



/**
 * [tOracleOutput_15 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	

 



/**
 * [tOracleOutput_15 process_data_end ] stop
 */

} // End of branch "proc_out"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "cgp_in"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

}
}finally{
	if (rs_tOracleInput_8 != null) {
		rs_tOracleInput_8.close();
	}
	if (stmt_tOracleInput_8 != null) {
		stmt_tOracleInput_8.close();
	}
}

globalMap.put("tOracleInput_8_NB_LINE",nb_line_tOracleInput_8);
 

ok_Hash.put("tOracleInput_8", true);
end_Hash.put("tOracleInput_8", System.currentTimeMillis());




/**
 * [tOracleInput_8 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */




	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
odo_inStruct odo_in_tmp = new odo_inStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_5.setFetchSize(1000);


		    String dbquery_tOracleInput_5 = "SELECT \n  \n  '' AS CODFACTURA,\n  OH.PROCESOSASISTENCIALES_ID,\n  GUORG.ID AS UORG_ATENCION, \n  GUORG.CODIGO AS CODP"
+"RESTADOR,\n  GUORG.FUERZA_ID,\n  HP.PERSONAS_ID,\n  GT.SIGLA AS TDOCUMENTO,\n  GP.DOCUMENTO AS DOCUMENTO,\n  '' AS CODAU"
+"TORIZACION,\n  GCUPS.CODIGO AS CODPROCEDIMIENTO,\n  GCUPS.ACTOQUIRURGICO AS QUIRURGICO,  \n  '' AS AMBITO,\n  RF.NOMBRE "
+"AS FINALIDAD,  \n  CIEP.CODIGO AS CODDIAGPPAL,\n  CIE.CODIGO  AS COMPLICACION,\n  RFR.NOMBRE AS FORMA_QUIRURGICO,\n  GCU"
+"PS.ACTOQUIRURGICO,\n  0 AS VPROCEDIMIENTO,\n  ODH.FTRATAMIENTO AS FECHA,\n  HP.PERSONAS_ID AS PACIENTE_ID,\n  RELACIONAD"
+"OS.UNO AS CODDIAGREL1,\n  RELACIONADOS.DOS AS CODDIAGREL2,\n  RELACIONADOS.TRES AS CODDIAGREL3,\n  AE.ESPECIALIDADES_ID,"
+"\n  ESP.NOMBRE AS ESPECIALIDAD,\n  GU.PERSONAS_ID AS PROFESIONAL_ID,\n  GT2.SIGLA AS TDOCUMENTO_PROFESIONAL,\n  GP2.DOCU"
+"MENTO AS DOCUMENTO_PROFESIONAL,\n  CASE\n    WHEN GC.NOMBRE LIKE 'Médico%' AND GC.NOMBRE NOT LIKE '%Especialista%' THEN "
+"'Médico'\n    WHEN GC.NOMBRE LIKE '%Especialista%' THEN 'Médico Especialista'\n    WHEN GC.NOMBRE LIKE 'Enfermer%' AND G"
+"C.NOMBRE NOT LIKE '%(auxiliar)%' THEN 'Enfermero(a)'\n    WHEN GC.NOMBRE LIKE '%(auxiliar)%' THEN 'Enfermero(a) auxiliar"
+"'\n    ELSE 'No registra'\n  END PERSONAL_ATIENDE, \n  CASE \n      WHEN PLANAFI.CODIGO = '2' THEN 'No cotizante'\n     "
+" WHEN PLANAFI.CODIGO IN ('1','3','4','5','6','7','8','9','10') AND ATC.SIGLA='ACT' THEN 'Cotizante Activo' \n      WHEN "
+"PLANAFI.CODIGO IN ('1','3','4','5','6','7','8','9','10') AND ATC.SIGLA IN ('RET','PEN') THEN 'Cotizante Pensionado / Ret"
+"irado' \n      WHEN PLANAFI.CODIGO IN ('11','12','13','14','15','16','17','18') THEN 'Beneficiario' \n      WHEN PLANAFI"
+".CODIGO IN ('1','3','4','5','6','7','8','9','10') AND ATC.SIGLA IN ('PAR','NOC') THEN 'Otro cotizante'\n    END  AS TIPO"
+"_USUARIO,  \n  CASE\n    WHEN TRUNC(MONTHS_BETWEEN (HP.FINICIAL,GP.FECHA_NACIMIENTO)/12)<1\n    THEN TRUNC(MONTHS_BETWEE"
+"N (HP.FINICIAL,GP.FECHA_NACIMIENTO))\n    ELSE TRUNC(MONTHS_BETWEEN (HP.FINICIAL,GP.FECHA_NACIMIENTO)/12) \n  END AS EDA"
+"D,\n  CASE       \n    WHEN TRUNC(MONTHS_BETWEEN (HP.FINICIAL,GP.FECHA_NACIMIENTO)/12)<1\n    THEN 'Meses'\n    WHEN TRU"
+"NC(MONTHS_BETWEEN (HP.FINICIAL,GP.FECHA_NACIMIENTO)/12)>=1\n    THEN 'Años'\n  END UMEDIDA_EDAD,\n  GRA.CODIGO AS GRADO_"
+"CODIGO,\n  GRA.NOMBRE AS GRADO,\n  CLAGR.DESCRIPCION AS CLASEGRD,\n  CLAGR.CODIGO AS CLASEGRD_CODIGO,\n  OPT.ESTADO AS  "
+"ESTADO_TRATAMIENTO,\n  FIN.NOMBRE AS FINALIDAD_CONSULTA\n      \nFROM ODO_HPLANTRATAMIENTO OH\nINNER JOIN ODO_DHPLANTRAT"
+"AMIENTO ODH ON ODH.HPLANTRATAMIENTO_ID=OH.ID AND ODH.ESTADO='Finalizado'\nINNER JOIN ODO_PLANTRATAMIENTO OPT ON OH.PLANT"
+"RATAMIENTO_ID=OPT.ID\nINNER JOIN HCL_PROCESOSASISTENCIALES HP ON OH.PROCESOSASISTENCIALES_ID=HP.ID\nINNER JOIN GEN_UORG "
+"GUORG ON GUORG.ID=HP.UORG_ID\nINNER JOIN GEN_USUARIOS GU ON GU.ID=ODH.USUARIOS_ID\nINNER JOIN ADM_ESPTRATANTES AE ON AE."
+"ID=HP.ESPTRATANTES_ID\nINNER JOIN GEN_ESPECIALIDADES ESP ON ESP.ID = AE.ESPECIALIDADES_ID\nINNER JOIN GEN_PERSONAS GP ON"
+" GP.ID=HP.PERSONAS_ID\nINNER JOIN GEN_TDOCUMENTOS GT ON GT.ID=GP.TDOCUMENTOS_ID\nINNER JOIN GEN_AFILIADOS GA ON GA.PERSO"
+"NAS_ID = GP.ID AND GA.ESTREGISTRO_ID =1\nINNER JOIN GEN_AFILIADOS_ENTAPORTANTE AEA ON ((AEA.AFILIADOS_ID = GA.ID AND GA."
+"PADRE_ID IS NULL) OR AEA.AFILIADOS_ID = GA.PADRE_ID) AND AEA.PRINCIPAL = 1 AND AEA.ESTREGISTRO_ID =1 \nLEFT JOIN HCL_VAL"
+"ORACIONES VAL ON VAL.PROCESOSASISTENCIALES_ID = HP.ID  AND VAL.ESTREGISTRO_ID = 1\nLEFT JOIN GEN_FINALIDADCONSULTA FIN O"
+"N FIN.ID = VAL.FINALIDADCONSULTA_ID \nLEFT JOIN GEN_GRDMILITARES GRA ON GRA.ID=AEA.GRDMILITARES_ID\nLEFT JOIN GEN_CLASEG"
+"RD CLAGR ON CLAGR.ID=GRA.CLASEGRD_ID\nLEFT JOIN AFI_TVINCULACIONES AT ON AT.ID=AEA.TVINCULACIONES_ID\nLEFT JOIN AFI_TCOT"
+"IZACION ATC ON ATC.ID=AT.TCOTIZACION_ID\nLEFT JOIN AFI_PLANAFILIACIONES PLANAFI ON PLANAFI.ID = GA.PLANAFILIACIONES_ID A"
+"ND PLANAFI.ESTREGISTRO_ID=1\nLEFT JOIN RCA_FINALIDADES RF ON ODH.FINALIDADES_ID=RF.ID\nLEFT JOIN GEN_PERSONAS GP2 ON GP2"
+".ID=GU.PERSONAS_ID\nLEFT JOIN GEN_TDOCUMENTOS GT2 ON GT2.ID=GP2.TDOCUMENTOS_ID\nLEFT JOIN GEN_CARGOS GC ON GC.ID=GP2.CAR"
+"GOS_ID\nLEFT JOIN HCL_DIAGNOSTICOS HD ON HD.PROCESOSASISTENCIALES_ID=OH.PROCESOSASISTENCIALES_ID\nLEFT JOIN GEN_CIE10 CI"
+"EP ON CIEP.ID = HD.CIE10_ID\nLEFT JOIN (SELECT * FROM (SELECT RELA.CIE10,NUM.NUMERO AS NUMERO_123,RELA.DIAGNOSTICOS_ID F"
+"ROM (\n              SELECT \n              ROW_NUMBER()OVER (PARTITION BY DIAG.ID_DI ORDER BY DIAG.ID_DI) AS NUMERO ,\n"
+"              DIAG.ID_DI AS DIAGNOSTICOS_ID,\n              CIE.CODIGO AS CIE10\n              FROM (SELECT \n          "
+"          DI.ID AS ID_DI\n                    FROM  HCL_DIAGNOSTICOS DI \n                     ) DIAG\n              INN"
+"ER JOIN HCL_DIAGRELACIONADOS RE ON RE.DIAGNOSTICOS_ID = DIAG.ID_DI\n              INNER JOIN GEN_CIE10 CIE ON CIE.ID = R"
+"E.CIE10_ID\n              ) RELA\n              \n              RIGHT JOIN (SELECT '1' AS NUMERO FROM DUAL\n            "
+"              UNION\n                          SELECT '2' AS NUMERO FROM DUAL\n                          UNION \n       "
+"                   SELECT '3' AS NUMERO FROM DUAL \n                          ) NUM ON NUM.NUMERO = RELA.NUMERO\n       "
+"                         ) \n              PIVOT \n              (\n                MIN(CIE10)\n                FOR NUME"
+"RO_123\n                IN ( '1' UNO, '2' DOS,'3' TRES) \n              )) RELACIONADOS ON RELACIONADOS.DIAGNOSTICOS_ID="
+"HD.ID\nLEFT JOIN HCL_DIAGRELACIONADOS HDR ON HDR.DIAGNOSTICOS_ID=HD.ID AND HDR.TIPO='Complicacion'\nLEFT JOIN GEN_CIE10 "
+"CIE ON CIE.ID = HDR.CIE10_ID\nLEFT JOIN RCA_FORMAREALIZACION RFR ON ODH.FORMAREALIZACION_ID=RFR.ID \nINNER JOIN GEN_CUPS"
+" GCUPS ON GCUPS.ID=ODH.CUPS_ID\nWHERE OH.ESTREGISTRO_ID=1\n "+context.CONDICION_PROCEDIMIENTOS_ODO;
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row18.CODFACTURA = null;
							} else {
	                         		
        	row18.CODFACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row18.PROCESOSASISTENCIALES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(2) != null) {
						row18.PROCESOSASISTENCIALES_ID = rs_tOracleInput_5.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 3) {
								row18.UORG_ATENCION = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(3) != null) {
						row18.UORG_ATENCION = rs_tOracleInput_5.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 4) {
								row18.CODPRESTADOR = null;
							} else {
	                         		
        	row18.CODPRESTADOR = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 5) {
								row18.FUERZA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(5) != null) {
						row18.FUERZA_ID = rs_tOracleInput_5.getBigDecimal(5);
					} else {
				
						row18.FUERZA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 6) {
								row18.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(6) != null) {
						row18.PERSONAS_ID = rs_tOracleInput_5.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 7) {
								row18.TDOCUMENTO = null;
							} else {
	                         		
        	row18.TDOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 8) {
								row18.DOCUMENTO = null;
							} else {
	                         		
        	row18.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 9) {
								row18.CODAUTORIZACION = null;
							} else {
	                         		
        	row18.CODAUTORIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 10) {
								row18.CODPROCEDIMIENTO = null;
							} else {
	                         		
        	row18.CODPROCEDIMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 11) {
								row18.QUIRURGICO = null;
							} else {
	                         		
        	row18.QUIRURGICO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 12) {
								row18.AMBITO = null;
							} else {
	                         		
        	row18.AMBITO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 13) {
								row18.FINALIDAD = null;
							} else {
	                         		
        	row18.FINALIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 14) {
								row18.CODDIAGPPAL = null;
							} else {
	                         		
        	row18.CODDIAGPPAL = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 15) {
								row18.COMPLICACION = null;
							} else {
	                         		
        	row18.COMPLICACION = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 16) {
								row18.FORMA_QUIRURGICO = null;
							} else {
	                         		
        	row18.FORMA_QUIRURGICO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 17) {
								row18.ACTOQUIRURGICO = null;
							} else {
	                         		
        	row18.ACTOQUIRURGICO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 17, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 18) {
								row18.VPROCEDIMIENTO = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(18) != null) {
						row18.VPROCEDIMIENTO = rs_tOracleInput_5.getBigDecimal(18);
					} else {
				
						row18.VPROCEDIMIENTO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 19) {
								row18.FECHA = null;
							} else {
										
			row18.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_5, 19);
		                    }
							if(colQtyInRs_tOracleInput_5 < 20) {
								row18.PACIENTE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(20) != null) {
						row18.PACIENTE_ID = rs_tOracleInput_5.getBigDecimal(20);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 21) {
								row18.CODDIAGREL1 = null;
							} else {
	                         		
        	row18.CODDIAGREL1 = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 21, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 22) {
								row18.CODDIAGREL2 = null;
							} else {
	                         		
        	row18.CODDIAGREL2 = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 22, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 23) {
								row18.CODDIAGREL3 = null;
							} else {
	                         		
        	row18.CODDIAGREL3 = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 23, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 24) {
								row18.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(24) != null) {
						row18.ESPECIALIDADES_ID = rs_tOracleInput_5.getBigDecimal(24);
					} else {
				
						row18.ESPECIALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 25) {
								row18.ESPECIALIDAD = null;
							} else {
	                         		
        	row18.ESPECIALIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 25, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 26) {
								row18.PROFESIONAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(26) != null) {
						row18.PROFESIONAL_ID = rs_tOracleInput_5.getBigDecimal(26);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 27) {
								row18.TDOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row18.TDOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 27, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 28) {
								row18.DOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row18.DOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 28, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 29) {
								row18.PERSONAL_ATIENDE = null;
							} else {
	                         		
        	row18.PERSONAL_ATIENDE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 29, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 30) {
								row18.TIPO_USUARIO = null;
							} else {
	                         		
        	row18.TIPO_USUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 30, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 31) {
								row18.EDAD = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(31) != null) {
						row18.EDAD = rs_tOracleInput_5.getBigDecimal(31);
					} else {
				
						row18.EDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 32) {
								row18.UMEDIDA_EDAD = null;
							} else {
	                         		
        	row18.UMEDIDA_EDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 32, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 33) {
								row18.GRADO_CODIGO = null;
							} else {
	                         		
        	row18.GRADO_CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 33, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 34) {
								row18.GRADO = null;
							} else {
	                         		
        	row18.GRADO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 34, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 35) {
								row18.CLASEGRD = null;
							} else {
	                         		
        	row18.CLASEGRD = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 35, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 36) {
								row18.CLASEGRD_CODIGO = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(36) != null) {
						row18.CLASEGRD_CODIGO = rs_tOracleInput_5.getBigDecimal(36);
					} else {
				
						row18.CLASEGRD_CODIGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 37) {
								row18.ESTADO_TRATAMIENTO = null;
							} else {
	                         		
        	row18.ESTADO_TRATAMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 37, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 38) {
								row18.FINALIDAD_CONSULTA = null;
							} else {
	                         		
        	row18.FINALIDAD_CONSULTA = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 38, false);
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

odo_in = null;


// # Output table : 'odo_in'
odo_in_tmp.CODFACTURA = null;
odo_in_tmp.PROCESOSASISTENCIALES_ID = row18.PROCESOSASISTENCIALES_ID ;
odo_in_tmp.CODPRESTADOR = row18.CODPRESTADOR ;
odo_in_tmp.TDOCUMENTO = row18.TDOCUMENTO ;
odo_in_tmp.DOCUMENTO = row18.DOCUMENTO ;
odo_in_tmp.CODAUTORIZACION = row18.CODAUTORIZACION ;
odo_in_tmp.CODPROCEDIMIENTO = row18.CODPROCEDIMIENTO ;
odo_in_tmp.AMBITO = row18.AMBITO ;
odo_in_tmp.FINALIDAD = row18.FINALIDAD ;
odo_in_tmp.PERSONAL = row18.PERSONAL_ATIENDE ;
odo_in_tmp.CODDIAGPPAL = row18.CODDIAGPPAL ;
odo_in_tmp.COMPLICACION = row18.COMPLICACION ;
odo_in_tmp.FORMA_QUIRURGICO = row18.FORMA_QUIRURGICO;
odo_in_tmp.VPROCEDIMIENTO = null;
odo_in_tmp.FECHA = row18.FECHA ;
odo_in_tmp.CODDIAGREL1 = row18.CODDIAGREL1 ;
odo_in_tmp.CODDIAGREL2 = row18.CODDIAGREL2;
odo_in_tmp.CODDIAGREL3 = row18.CODDIAGREL3 ;
odo_in_tmp.PERIODO = null;
odo_in_tmp.TRIPS = "Interna";
odo_in_tmp.PERSONAS_ID = row18.PERSONAS_ID ;
odo_in_tmp.UORG_ID = row18.UORG_ATENCION ;
odo_in_tmp.FUERZA_ID = row18.FUERZA_ID ;
odo_in_tmp.TDOCUMENTO_PROFESIONAL = row18.TDOCUMENTO_PROFESIONAL ;
odo_in_tmp.DOCUMENTO_PROFESIONAL = row18.DOCUMENTO_PROFESIONAL;
odo_in_tmp.ESPECIALIDAD = row18.ESPECIALIDAD ;
odo_in_tmp.PESO = null;
odo_in_tmp.TALLA = null;
odo_in_tmp.UMEDIDA_PESO = null;
odo_in_tmp.UMEDIDA_TALLA = null;
odo_in_tmp.TIPO_GENERACION = "Automatico";
odo_in_tmp.TIPO_USUARIO = row18.TIPO_USUARIO ;
odo_in_tmp.EDAD = row18.EDAD ;
odo_in_tmp.UMEDIDA_EDAD = row18.UMEDIDA_EDAD ;
odo_in_tmp.GRADO_CODIGO = row18.GRADO_CODIGO ;
odo_in_tmp.GRADO = row18.GRADO ;
odo_in_tmp.CLASEGRD = row18.CLASEGRD ;
odo_in_tmp.ADMISION_ID = null;
odo_in_tmp.CLASEGRD_CODIGO = row18.CLASEGRD_CODIGO ;
odo_in_tmp.ESPECIALIDADES_ID = row18.ESPECIALIDADES_ID ;
odo_in_tmp.QUIRURGICO = row18.QUIRURGICO ;
odo_in_tmp.EJECACTIVIDADES_ID = null;
odo_in_tmp.ESTADO_TRATAMIENTO = row18.ESTADO_TRATAMIENTO ;
odo_in_tmp.FINALIDAD_CONSULTA = row18.FINALIDAD_CONSULTA ;
odo_in = odo_in_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "odo_in"
if(odo_in != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"odo_in"
									
							);
						}
						
//////////
 

// for output
			row16 = new row16Struct();
								
			row16.CODFACTURA = odo_in.CODFACTURA;								
			row16.PROCESOSASISTENCIALES_ID = odo_in.PROCESOSASISTENCIALES_ID;								
			row16.CODPRESTADOR = odo_in.CODPRESTADOR;								
			row16.TDOCUMENTO = odo_in.TDOCUMENTO;								
			row16.DOCUMENTO = odo_in.DOCUMENTO;								
			row16.CODAUTORIZACION = odo_in.CODAUTORIZACION;								
			row16.CODPROCEDIMIENTO = odo_in.CODPROCEDIMIENTO;								
			row16.AMBITO = odo_in.AMBITO;								
			row16.FINALIDAD = odo_in.FINALIDAD;								
			row16.PERSONAL = odo_in.PERSONAL;								
			row16.CODDIAGPPAL = odo_in.CODDIAGPPAL;								
			row16.COMPLICACION = odo_in.COMPLICACION;								
			row16.FORMA_QUIRURGICO = odo_in.FORMA_QUIRURGICO;								
			row16.VPROCEDIMIENTO = odo_in.VPROCEDIMIENTO;								
			row16.FECHA = odo_in.FECHA;								
			row16.CODDIAGREL1 = odo_in.CODDIAGREL1;								
			row16.CODDIAGREL2 = odo_in.CODDIAGREL2;								
			row16.CODDIAGREL3 = odo_in.CODDIAGREL3;								
			row16.PERIODO = odo_in.PERIODO;								
			row16.TRIPS = odo_in.TRIPS;								
			row16.PERSONAS_ID = odo_in.PERSONAS_ID;								
			row16.UORG_ID = odo_in.UORG_ID;								
			row16.FUERZA_ID = odo_in.FUERZA_ID;								
			row16.TDOCUMENTO_PROFESIONAL = odo_in.TDOCUMENTO_PROFESIONAL;								
			row16.DOCUMENTO_PROFESIONAL = odo_in.DOCUMENTO_PROFESIONAL;								
			row16.ESPECIALIDAD = odo_in.ESPECIALIDAD;								
			row16.PESO = odo_in.PESO;								
			row16.TALLA = odo_in.TALLA;								
			row16.UMEDIDA_PESO = odo_in.UMEDIDA_PESO;								
			row16.UMEDIDA_TALLA = odo_in.UMEDIDA_TALLA;								
			row16.TIPO_GENERACION = odo_in.TIPO_GENERACION;								
			row16.TIPO_USUARIO = odo_in.TIPO_USUARIO;								
			row16.EDAD = odo_in.EDAD;								
			row16.UMEDIDA_EDAD = odo_in.UMEDIDA_EDAD;								
			row16.GRADO_CODIGO = odo_in.GRADO_CODIGO;								
			row16.GRADO = odo_in.GRADO;								
			row16.CLASEGRD = odo_in.CLASEGRD;								
			row16.ADMISION_ID = odo_in.ADMISION_ID;								
			row16.CLASEGRD_CODIGO = odo_in.CLASEGRD_CODIGO;								
			row16.ESPECIALIDADES_ID = odo_in.ESPECIALIDADES_ID;								
			row16.QUIRURGICO = odo_in.QUIRURGICO;								
			row16.EJECACTIVIDADES_ID = odo_in.EJECACTIVIDADES_ID;								
			row16.ESTADO_TRATAMIENTO = odo_in.ESTADO_TRATAMIENTO;								
			row16.FINALIDAD_CONSULTA = odo_in.FINALIDAD_CONSULTA;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row13Struct row13 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row13HashKey.PROCESOSASISTENCIALES_ID = row16.PROCESOSASISTENCIALES_ID ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.PROCESOSASISTENCIALES_ID = '" + row13HashKey.PROCESOSASISTENCIALES_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

proc_out = null;


// # Output table : 'proc_out'
proc_out_tmp.CODFACTURA = row16.CODFACTURA ;
proc_out_tmp.PROCESOASISTENCIAL_ID = row16.PROCESOSASISTENCIALES_ID ;
proc_out_tmp.CODPRESTADOR = row16.CODPRESTADOR ;
proc_out_tmp.TDOCUMENTO = row16.TDOCUMENTO ;
proc_out_tmp.DOCUMENTO = row16.DOCUMENTO ;
proc_out_tmp.CODAUTORIZACION = row16.CODAUTORIZACION ;
proc_out_tmp.CODPROCEDIMIENTO = row16.CODPROCEDIMIENTO ;
proc_out_tmp.AMBITO = row16.AMBITO ;
proc_out_tmp.FINALIDAD = row16.FINALIDAD ;
proc_out_tmp.PERSONAL = row16.PERSONAL ;
proc_out_tmp.CODDIAGPPAL = row16.CODDIAGPPAL ;
proc_out_tmp.CODDIAGNOSTICO1 = row16.CODDIAGREL1 ;
proc_out_tmp.COMPLICACION = row16.COMPLICACION ;
proc_out_tmp.FORMA_QUIRURGICO = row16.FORMA_QUIRURGICO ;
proc_out_tmp.VPROCEDIMIENTO = row16.VPROCEDIMIENTO ;
proc_out_tmp.FECHA = row16.FECHA ;
proc_out_tmp.PERIODO = row16.PERIODO ;
proc_out_tmp.TRIPS = row16.TRIPS ;
proc_out_tmp.PERSONAS_ID = row16.PERSONAS_ID ;
proc_out_tmp.UORG_ID = row16.UORG_ID ;
proc_out_tmp.FUERZA_ID = row16.FUERZA_ID ;
proc_out_tmp.TDOCUMENTO_PROFESIONAL = row16.TDOCUMENTO_PROFESIONAL ;
proc_out_tmp.DOCUMENTO_PROFESIONAL = row16.DOCUMENTO_PROFESIONAL ;
proc_out_tmp.ESPECIALIDAD = row16.ESPECIALIDAD ;
proc_out_tmp.PESO = row13.PESO_VALOR;
proc_out_tmp.TALLA = row13.ESTATURA_VALOR;
proc_out_tmp.UMEDIDA_PESO = row13.PESO_UMEDIDA ;
proc_out_tmp.UMEDIDA_TALLA = row13.ESTATURA_UMEDIDA ;
proc_out_tmp.TIPO_GENERACION = row16.TIPO_GENERACION ;
proc_out_tmp.TIPO_USUARIO = row16.TIPO_USUARIO ;
proc_out_tmp.EDAD = row16.EDAD ;
proc_out_tmp.UMEDIDA_EDAD = row16.UMEDIDA_EDAD ;
proc_out_tmp.GRADO_CODIGO = row16.GRADO_CODIGO ;
proc_out_tmp.GRADO = row16.GRADO ;
proc_out_tmp.CLASEGRD = row16.CLASEGRD ;
proc_out_tmp.ADMISION_ID = row16.ADMISION_ID ;
proc_out_tmp.CLASEGRD_CODIGO = row16.CLASEGRD_CODIGO ;
proc_out_tmp.ESPECIALIDADES_ID = row16.ESPECIALIDADES_ID ;
proc_out_tmp.QUIRURGICO = row16.QUIRURGICO ;
proc_out_tmp.CODDIAGNOSTICO2 = row16.CODDIAGREL2 ;
proc_out_tmp.CODDIAGNOSTICO3 = row16.CODDIAGREL3 ;
proc_out_tmp.EJECACTIVIDADES_ID = row16.EJECACTIVIDADES_ID ;
proc_out_tmp.ESTADO_TRATAMIENTO = row16.ESTADO_TRATAMIENTO ;
proc_out_tmp.FINALIDAD_CONSULTA = row16.FINALIDAD_CONSULTA ;
proc_out = proc_out_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "proc_out"
if(proc_out != null) { 



	
	/**
	 * [tOracleOutput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"proc_out"
						
						);
					}
					



        whetherReject_tOracleOutput_15 = false;
                        if(proc_out.CODFACTURA == null) {
pstmt_tOracleOutput_15.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(1, proc_out.CODFACTURA);
}

                        pstmt_tOracleOutput_15.setBigDecimal(2, proc_out.PROCESOASISTENCIAL_ID);

                        if(proc_out.CODPRESTADOR == null) {
pstmt_tOracleOutput_15.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(3, proc_out.CODPRESTADOR);
}

                        if(proc_out.TDOCUMENTO == null) {
pstmt_tOracleOutput_15.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(4, proc_out.TDOCUMENTO);
}

                        if(proc_out.DOCUMENTO == null) {
pstmt_tOracleOutput_15.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(5, proc_out.DOCUMENTO);
}

                        if(proc_out.CODAUTORIZACION == null) {
pstmt_tOracleOutput_15.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(6, proc_out.CODAUTORIZACION);
}

                        if(proc_out.CODPROCEDIMIENTO == null) {
pstmt_tOracleOutput_15.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(7, proc_out.CODPROCEDIMIENTO);
}

                        if(proc_out.AMBITO == null) {
pstmt_tOracleOutput_15.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(8, proc_out.AMBITO);
}

                        if(proc_out.FINALIDAD == null) {
pstmt_tOracleOutput_15.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(9, proc_out.FINALIDAD);
}

                        if(proc_out.PERSONAL == null) {
pstmt_tOracleOutput_15.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(10, proc_out.PERSONAL);
}

                        if(proc_out.CODDIAGPPAL == null) {
pstmt_tOracleOutput_15.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(11, proc_out.CODDIAGPPAL);
}

                        if(proc_out.CODDIAGNOSTICO1 == null) {
pstmt_tOracleOutput_15.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(12, proc_out.CODDIAGNOSTICO1);
}

                        if(proc_out.COMPLICACION == null) {
pstmt_tOracleOutput_15.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(13, proc_out.COMPLICACION);
}

                        if(proc_out.FORMA_QUIRURGICO == null) {
pstmt_tOracleOutput_15.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(14, proc_out.FORMA_QUIRURGICO);
}

                        pstmt_tOracleOutput_15.setBigDecimal(15, proc_out.VPROCEDIMIENTO);

                        if(proc_out.FECHA != null) {
pstmt_tOracleOutput_15.setTimestamp(16, new java.sql.Timestamp(proc_out.FECHA.getTime()));
} else {
pstmt_tOracleOutput_15.setNull(16, java.sql.Types.DATE);
}

                        if(proc_out.PERIODO == null) {
pstmt_tOracleOutput_15.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(17, proc_out.PERIODO);
}

                        if(proc_out.TRIPS == null) {
pstmt_tOracleOutput_15.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(18, proc_out.TRIPS);
}

                        pstmt_tOracleOutput_15.setBigDecimal(19, proc_out.PERSONAS_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(20, proc_out.UORG_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(21, proc_out.FUERZA_ID);

                        if(proc_out.TDOCUMENTO_PROFESIONAL == null) {
pstmt_tOracleOutput_15.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(22, proc_out.TDOCUMENTO_PROFESIONAL);
}

                        if(proc_out.DOCUMENTO_PROFESIONAL == null) {
pstmt_tOracleOutput_15.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(23, proc_out.DOCUMENTO_PROFESIONAL);
}

                        if(proc_out.ESPECIALIDAD == null) {
pstmt_tOracleOutput_15.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(24, proc_out.ESPECIALIDAD);
}

                        if(proc_out.PESO == null) {
pstmt_tOracleOutput_15.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(25, proc_out.PESO);
}

                        if(proc_out.TALLA == null) {
pstmt_tOracleOutput_15.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(26, proc_out.TALLA);
}

                        if(proc_out.UMEDIDA_PESO == null) {
pstmt_tOracleOutput_15.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(27, proc_out.UMEDIDA_PESO);
}

                        if(proc_out.UMEDIDA_TALLA == null) {
pstmt_tOracleOutput_15.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(28, proc_out.UMEDIDA_TALLA);
}

                        if(proc_out.TIPO_GENERACION == null) {
pstmt_tOracleOutput_15.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(29, proc_out.TIPO_GENERACION);
}

                        if(proc_out.TIPO_USUARIO == null) {
pstmt_tOracleOutput_15.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(30, proc_out.TIPO_USUARIO);
}

                        pstmt_tOracleOutput_15.setBigDecimal(31, proc_out.EDAD);

                        if(proc_out.UMEDIDA_EDAD == null) {
pstmt_tOracleOutput_15.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(32, proc_out.UMEDIDA_EDAD);
}

                        if(proc_out.GRADO_CODIGO == null) {
pstmt_tOracleOutput_15.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(33, proc_out.GRADO_CODIGO);
}

                        if(proc_out.GRADO == null) {
pstmt_tOracleOutput_15.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(34, proc_out.GRADO);
}

                        if(proc_out.CLASEGRD == null) {
pstmt_tOracleOutput_15.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(35, proc_out.CLASEGRD);
}

                        pstmt_tOracleOutput_15.setBigDecimal(36, proc_out.ADMISION_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(37, proc_out.CLASEGRD_CODIGO);

                        pstmt_tOracleOutput_15.setBigDecimal(38, proc_out.ESPECIALIDADES_ID);

                        if(proc_out.QUIRURGICO == null) {
pstmt_tOracleOutput_15.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(39, proc_out.QUIRURGICO);
}

                        if(proc_out.CODDIAGNOSTICO2 == null) {
pstmt_tOracleOutput_15.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(40, proc_out.CODDIAGNOSTICO2);
}

                        if(proc_out.CODDIAGNOSTICO3 == null) {
pstmt_tOracleOutput_15.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(41, proc_out.CODDIAGNOSTICO3);
}

                        pstmt_tOracleOutput_15.setBigDecimal(42, proc_out.EJECACTIVIDADES_ID);

                        if(proc_out.ESTADO_TRATAMIENTO == null) {
pstmt_tOracleOutput_15.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(43, proc_out.ESTADO_TRATAMIENTO);
}

                        if(proc_out.FINALIDAD_CONSULTA == null) {
pstmt_tOracleOutput_15.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(44, proc_out.FINALIDAD_CONSULTA);
}

                pstmt_tOracleOutput_15.addBatch();
                nb_line_tOracleOutput_15++;
                batchSizeCounter_tOracleOutput_15++;
            if (batchSize_tOracleOutput_15 > 0 &&  batchSize_tOracleOutput_15 <= batchSizeCounter_tOracleOutput_15) {
                try {
                    pstmt_tOracleOutput_15.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_15){
globalMap.put("tOracleOutput_15_ERROR_MESSAGE",e_tOracleOutput_15.getMessage());
			        java.sql.SQLException ne_tOracleOutput_15 = e_tOracleOutput_15.getNextException(),sqle_tOracleOutput_15=null;
			    	String errormessage_tOracleOutput_15;
					if (ne_tOracleOutput_15 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_15 = new java.sql.SQLException(e_tOracleOutput_15.getMessage() + "\ncaused by: " + ne_tOracleOutput_15.getMessage(), ne_tOracleOutput_15.getSQLState(), ne_tOracleOutput_15.getErrorCode(), ne_tOracleOutput_15);
						errormessage_tOracleOutput_15 = sqle_tOracleOutput_15.getMessage();
					}else{
						errormessage_tOracleOutput_15 = e_tOracleOutput_15.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_15);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_15 = pstmt_tOracleOutput_15.getUpdateCount();
                    insertedCount_tOracleOutput_15
                += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                rowsToCommitCount_tOracleOutput_15 += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                batchSizeCounter_tOracleOutput_15 = 0;
            }
                commitCounter_tOracleOutput_15++;
                if(commitEvery_tOracleOutput_15 <= commitCounter_tOracleOutput_15) {
                    if(batchSizeCounter_tOracleOutput_15 > 0) {
                        try {
                            pstmt_tOracleOutput_15.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_15){
globalMap.put("tOracleOutput_15_ERROR_MESSAGE",e_tOracleOutput_15.getMessage());
					        java.sql.SQLException ne_tOracleOutput_15 = e_tOracleOutput_15.getNextException(),sqle_tOracleOutput_15=null;
					    	String errormessage_tOracleOutput_15;
							if (ne_tOracleOutput_15 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_15 = new java.sql.SQLException(e_tOracleOutput_15.getMessage() + "\ncaused by: " + ne_tOracleOutput_15.getMessage(), ne_tOracleOutput_15.getSQLState(), ne_tOracleOutput_15.getErrorCode(), ne_tOracleOutput_15);
								errormessage_tOracleOutput_15 = sqle_tOracleOutput_15.getMessage();
							}else{
								errormessage_tOracleOutput_15 = e_tOracleOutput_15.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_15);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_15 = pstmt_tOracleOutput_15.getUpdateCount();
                            insertedCount_tOracleOutput_15
                        += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                        rowsToCommitCount_tOracleOutput_15 += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_15 != 0){
                    	
                    }
                    conn_tOracleOutput_15.commit();
                    if(rowsToCommitCount_tOracleOutput_15 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_15 = 0;
                    }
                    commitCounter_tOracleOutput_15=0;
                    	batchSizeCounter_tOracleOutput_15=0;
                }

 


	tos_count_tOracleOutput_15++;

/**
 * [tOracleOutput_15 main ] stop
 */
	
	/**
	 * [tOracleOutput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	

 



/**
 * [tOracleOutput_15 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	

 



/**
 * [tOracleOutput_15 process_data_end ] stop
 */

} // End of branch "proc_out"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "odo_in"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */




	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
pqx_inStruct pqx_in_tmp = new pqx_inStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_10", false);
		start_Hash.put("tOracleInput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_10";
	
	
		int tos_count_tOracleInput_10 = 0;
		
	


	
		    int nb_line_tOracleInput_10 = 0;
		    java.sql.Connection conn_tOracleInput_10 = null;
				conn_tOracleInput_10 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
				
                boolean isTimeZoneNull_tOracleInput_10 = false;
				boolean isConnectionWrapped_tOracleInput_10 = !(conn_tOracleInput_10 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_10.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_10 = null;
                if (isConnectionWrapped_tOracleInput_10) {
					unwrappedOraConn_tOracleInput_10 = conn_tOracleInput_10.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_10 != null) {
                        isTimeZoneNull_tOracleInput_10 = (unwrappedOraConn_tOracleInput_10.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_10 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_10).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_10) {
					java.sql.Statement stmtGetTZ_tOracleInput_10 = conn_tOracleInput_10.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_10 = stmtGetTZ_tOracleInput_10.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_10 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_10.next()) {
						sessionTimezone_tOracleInput_10 = rsGetTZ_tOracleInput_10.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_10 && unwrappedOraConn_tOracleInput_10 != null) {
                        unwrappedOraConn_tOracleInput_10.setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_10).setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_10 = conn_tOracleInput_10.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_10.setFetchSize(1000);


		    String dbquery_tOracleInput_10 = "SELECT \n'' AS CODFACTURA,\nPPC.PROCESOSASISTENCIALES_ID,\nHP.UORG_ID,\nGUORG.CODIGO AS CODPRESTADOR,\nGUORG.FUERZA_ID,"
+"\nHP.PERSONAS_ID AS PACIENTE_ID,\nGT.SIGLA AS TDOCUMENTO,\nGP.DOCUMENTO AS DOCUMENTO,\nRA.CONSECUTIVO AS CODAUTORIZACION"
+",\nPPC.PROCESOSASISTENCIALES_ID,\nGC.CODIGO AS CODPROCEDIMIENTO,\n'Ambulatorio' AS AMBITO,\n' ' AS FINALIDAD,\nCASE\nWHE"
+"N GCS.NOMBRE LIKE 'Médico%' AND GCS.NOMBRE NOT LIKE '%Especialista%' THEN 'Médico'\nWHEN GCS.NOMBRE LIKE '%Especialista%"
+"' THEN 'Médico Especialista'\nWHEN GCS.NOMBRE LIKE 'Enfermer%' AND GCS.NOMBRE NOT LIKE '%(auxiliar)%' THEN 'Enfermero(a)"
+"'\nWHEN GCS.NOMBRE LIKE '%(auxiliar)%' THEN 'Enfermero(a) auxiliar'\nELSE 'No registra'\nEND AS PERSONAL,\nCIEP.CODIGO A"
+"S CODDIAGPPAL,\nCIE.CODIGO AS COMPLICACION,\n'No registra' AS FORMA_QUIRURGICO, \n'Si' AS QUIRURGICO,\n0 AS VPROCEDIMIEN"
+"TO,\nPPC.FREGISTRO AS FECHA,\nRELACIONADOS.UNO CODDIAGREL1,\nRELACIONADOS.DOS AS CODDIAGREL2,\nRELACIONADOS.TRES AS CODD"
+"IAGREL3,\nGU.PERSONAS_ID AS PROFESIONAL_ID,\nGT2.SIGLA AS TDOCUMENTO_PROFESIONAL,\nGP2.DOCUMENTO AS DOCUMENTO_PROFESIONA"
+"L,\nAE.ESPECIALIDADES_ID,\nESP.NOMBRE AS ESPECIALIDAD,\nCASE \nWHEN PLANAFI.CODIGO = '2' THEN 'No cotizante'\nWHEN PLANA"
+"FI.CODIGO IN ('1','3','4','5','6','7','8','9','10') AND ATC.SIGLA='ACT' THEN 'Cotizante Activo' \nWHEN PLANAFI.CODIGO IN"
+" ('1','3','4','5','6','7','8','9','10') AND ATC.SIGLA IN ('RET','PEN') THEN 'Cotizante Pensionado / Retirado' \nWHEN PLA"
+"NAFI.CODIGO IN ('11','12','13','14','15','16','17','18') THEN 'Beneficiario' \nWHEN PLANAFI.CODIGO IN ('1','3','4','5','"
+"6','7','8','9','10') AND ATC.SIGLA IN ('PAR','NOC') THEN 'Otro cotizante'\nEND AS TIPO_USUARIO,\nCASE\nWHEN TRUNC(MONTHS"
+"_BETWEEN (PPC.FREGISTRO,GP.FECHA_NACIMIENTO)/12)<1\nTHEN TRUNC(MONTHS_BETWEEN (PPC.FREGISTRO,GP.FECHA_NACIMIENTO))\nELSE"
+" TRUNC(MONTHS_BETWEEN (PPC.FREGISTRO,GP.FECHA_NACIMIENTO)/12) \nEND AS EDAD,\nCASE \nWHEN TRUNC(MONTHS_BETWEEN (PPC.FREG"
+"ISTRO,GP.FECHA_NACIMIENTO)/12)<1\nTHEN 'Meses'\nWHEN TRUNC(MONTHS_BETWEEN (PPC.FREGISTRO,GP.FECHA_NACIMIENTO)/12)>=1\nTH"
+"EN 'Años'\nEND UMEDIDA_EDAD,\nGRA.CODIGO AS GRADO_CODIGO,\nGRA.NOMBRE AS GRADO,\nCLAGR.DESCRIPCION AS CLASEGRD,\nCLAGR.C"
+"ODIGO AS CLASEGRD_CODIGO,\n'Si' AS ACTOQUIRURGICO,\nFINC.NOMBRE  AS FINALIDAD_CONSULTA\n\nFROM PQX_PROCEDIMIENTOCIRUGIA "
+"PPC\nINNER JOIN HCL_PROCESOSASISTENCIALES HP ON PPC.PROCESOSASISTENCIALES_ID=HP.ID\nINNER JOIN GEN_UORG GUORG ON GUORG.I"
+"D=HP.UORG_ID\nINNER JOIN GEN_USUARIOS GU ON GU.ID=PPC.USUARIOS_ID\nINNER JOIN ADM_ESPTRATANTES AE ON AE.ID=HP.ESPTRATANT"
+"ES_ID\nINNER JOIN GEN_ESPECIALIDADES ESP ON ESP.ID = AE.ESPECIALIDADES_ID \nINNER JOIN GEN_AFILIADOS GA ON GA.PERSONAS_I"
+"D = HP.PERSONAS_ID AND GA.ESTREGISTRO_ID =1\nINNER JOIN GEN_AFILIADOS_ENTAPORTANTE AEA ON ((AEA.AFILIADOS_ID = GA.ID AND"
+" GA.PADRE_ID IS NULL) OR AEA.AFILIADOS_ID = GA.PADRE_ID) AND AEA.PRINCIPAL = 1 AND AEA.ESTREGISTRO_ID =1 \nLEFT JOIN GEN"
+"_GRDMILITARES GRA ON GRA.ID = AEA.GRDMILITARES_ID\nLEFT JOIN GEN_CLASEGRD CLAGR ON CLAGR.ID = GRA.CLASEGRD_ID\nINNER JOI"
+"N GEN_PERSONAS GP ON GP.ID=HP.PERSONAS_ID\nINNER JOIN GEN_TDOCUMENTOS GT ON GT.ID=GP.TDOCUMENTOS_ID\nLEFT JOIN AFI_TVINC"
+"ULACIONES AT ON AT.ID=AEA.TVINCULACIONES_ID\nLEFT JOIN AFI_TCOTIZACION ATC ON ATC.ID=AT.TCOTIZACION_ID\nLEFT JOIN AFI_PL"
+"ANAFILIACIONES PLANAFI ON PLANAFI.ID = GA.PLANAFILIACIONES_ID AND PLANAFI.ESTREGISTRO_ID=1\nINNER JOIN PQX_PROGRAMADAS P"
+"P ON PP.ID=PPC.PROGRAMADAS_ID\nINNER JOIN PQX_CONDUCTAS PC ON PC.ID=PP.CONDUCTAS_ID\nINNER JOIN HCL_PROCESOSASISTENCIALE"
+"S HP2 ON PC.VALPREQUIRURGICA=HP2.ID\nLEFT JOIN HCL_VALORACIONES VAL ON VAL.PROCESOSASISTENCIALES_ID=HP2.ID AND HP2.ESTRE"
+"GISTRO_ID =1 AND VAL.ESTREGISTRO_ID =1\nLEFT JOIN GEN_FINALIDADCONSULTA FINC ON FINC.ID=VAL.FINALIDADCONSULTA_ID\nINNER "
+"JOIN RCA_INFGENERAL RI ON HP2.ID=RI.PROCESOSASISTENCIALES_ID AND RI.ESTREGISTRO_ID=1\nINNER JOIN RCA_CUPSOLICITADOS RCS "
+"ON RCS.INFGENERAL_ID=RI.ID \nINNER JOIN RCA_AUTORIZACION RA ON RA.ID=RCS.AUTORIZACION_ID AND RA.ESTREGISTRO_ID=1 and RCS"
+".AUTORIZACION_ID IS NOT NULL \nINNER JOIN GEN_ESPECIALIDADES GE ON GE.ID=RCS.ESPECIALIDADES_ID AND GE.SIGLA='CIRGEN'\nIN"
+"NER JOIN GEN_CUPS GC ON GC.ID=RCS.CUPS_ID\nLEFT JOIN GEN_PERSONAS GP2 ON GP2.ID=GU.PERSONAS_ID\nLEFT JOIN GEN_TDOCUMENTO"
+"S GT2 ON GT2.ID=GP2.TDOCUMENTOS_ID\nLEFT JOIN GEN_CARGOS GCS ON GCS.ID=GP2.CARGOS_ID\nINNER JOIN HCL_DIAGNOSTICOS HD ON "
+"HD.PROCESOSASISTENCIALES_ID=PPC.PROCESOSASISTENCIALES_ID\nINNER JOIN GEN_CIE10 CIEP ON CIEP.ID = HD.CIE10_ID\nLEFT JOIN "
+"(SELECT * FROM (SELECT RELA.CIE10,NUM.NUMERO AS NUMERO_123,RELA.DIAGNOSTICOS_ID FROM (\nSELECT \nROW_NUMBER()OVER (PARTI"
+"TION BY DIAG.ID_DI ORDER BY DIAG.ID_DI) AS NUMERO ,\nDIAG.ID_DI AS DIAGNOSTICOS_ID,\nCIE.CODIGO AS CIE10\nFROM (SELECT "
+"\nDI.ID AS ID_DI\nFROM HCL_DIAGNOSTICOS DI \n) DIAG\nINNER JOIN HCL_DIAGRELACIONADOS RE ON RE.DIAGNOSTICOS_ID = DIAG.ID_D"
+"I\nINNER JOIN GEN_CIE10 CIE ON CIE.ID = RE.CIE10_ID\n) RELA\n\nRIGHT JOIN (SELECT '1' AS NUMERO FROM DUAL\nUNION\nSELECT"
+" '2' AS NUMERO FROM DUAL\nUNION \nSELECT '3' AS NUMERO FROM DUAL \n) NUM ON NUM.NUMERO = RELA.NUMERO\n) \nPIVOT \n(\nMIN"
+"(CIE10)\nFOR NUMERO_123\nIN ( '1' UNO, '2' DOS,'3' TRES) \n)) RELACIONADOS ON RELACIONADOS.DIAGNOSTICOS_ID=HD.ID\nLEFT J"
+"OIN HCL_DIAGRELACIONADOS HDR ON HDR.DIAGNOSTICOS_ID=HD.ID AND HDR.TIPO='Complicacion'\nLEFT JOIN GEN_CIE10 CIE ON CIE.ID"
+" = HDR.CIE10_ID\nINNER JOIN (SELECT \nMAX(HD.ID) AS DIAG_ID\nFROM PQX_PROGRAMADAS PROM\nINNER JOIN PQX_PROCEDIMIENTOCIRU"
+"GIA PPC ON PPC.PROGRAMADAS_ID = PROM.ID\nINNER JOIN HCL_PROCESOSASISTENCIALES HP ON PPC.PROCESOSASISTENCIALES_ID=HP.ID\n"
+"INNER JOIN HCL_DIAGNOSTICOS HD ON HD.PROCESOSASISTENCIALES_ID=PPC.PROCESOSASISTENCIALES_ID\nWHERE PROM.ESTADO='Finalizad"
+"a' AND HP.ESTADO = 'Registrado'\nGROUP BY PROM.ID) PPP ON PPP.DIAG_ID = HD.ID\nWHERE PP.ESTADO='Finalizada' AND HP.ESTAD"
+"O = 'Registrado' \nAND PPC.ESTREGISTRO_ID=1 AND GE.CIRUGIA='Si'\n "+context.CONDICION_PROCEDIMIENTOS_PQX;
		    

		    globalMap.put("tOracleInput_10_QUERY",dbquery_tOracleInput_10);

		    java.sql.ResultSet rs_tOracleInput_10 = null;

		    try {
		    	rs_tOracleInput_10 = stmt_tOracleInput_10.executeQuery(dbquery_tOracleInput_10);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_10 = rs_tOracleInput_10.getMetaData();
		    	int colQtyInRs_tOracleInput_10 = rsmd_tOracleInput_10.getColumnCount();

		    String tmpContent_tOracleInput_10 = null;
		    
		    
		    while (rs_tOracleInput_10.next()) {
		        nb_line_tOracleInput_10++;
		        
							if(colQtyInRs_tOracleInput_10 < 1) {
								row20.CODFACTURA = null;
							} else {
	                         		
        	row20.CODFACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 2) {
								row20.PROCESOSASISTENCIALES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(2) != null) {
						row20.PROCESOSASISTENCIALES_ID = rs_tOracleInput_10.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 3) {
								row20.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(3) != null) {
						row20.UORG_ID = rs_tOracleInput_10.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 4) {
								row20.CODPRESTADOR = null;
							} else {
	                         		
        	row20.CODPRESTADOR = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 5) {
								row20.FUERZA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(5) != null) {
						row20.FUERZA_ID = rs_tOracleInput_10.getBigDecimal(5);
					} else {
				
						row20.FUERZA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 6) {
								row20.PACIENTE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(6) != null) {
						row20.PACIENTE_ID = rs_tOracleInput_10.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 7) {
								row20.TDOCUMENTO = null;
							} else {
	                         		
        	row20.TDOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 8) {
								row20.DOCUMENTO = null;
							} else {
	                         		
        	row20.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 9) {
								row20.CODAUTORIZACION = null;
							} else {
	                         		
        	row20.CODAUTORIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 10) {
								row20.PROCESOSASISTENCIALES_ID1 = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(10) != null) {
						row20.PROCESOSASISTENCIALES_ID1 = rs_tOracleInput_10.getBigDecimal(10);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 11) {
								row20.CODPROCEDIMIENTO = null;
							} else {
	                         		
        	row20.CODPROCEDIMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 12) {
								row20.AMBITO = null;
							} else {
	                         		
        	row20.AMBITO = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 13) {
								row20.FINALIDAD = null;
							} else {
	                         		
        	row20.FINALIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 14) {
								row20.PERSONAL = null;
							} else {
	                         		
        	row20.PERSONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 15) {
								row20.CODDIAGPPAL = null;
							} else {
	                         		
        	row20.CODDIAGPPAL = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 16) {
								row20.COMPLICACION = null;
							} else {
	                         		
        	row20.COMPLICACION = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 17) {
								row20.FORMA_QUIRURGICO = null;
							} else {
	                         		
        	row20.FORMA_QUIRURGICO = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 17, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 18) {
								row20.QUIRURGICO = null;
							} else {
	                         		
        	row20.QUIRURGICO = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 18, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 19) {
								row20.VPROCEDIMIENTO = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(19) != null) {
						row20.VPROCEDIMIENTO = rs_tOracleInput_10.getBigDecimal(19);
					} else {
				
						row20.VPROCEDIMIENTO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 20) {
								row20.FECHA = null;
							} else {
										
			row20.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_10, 20);
		                    }
							if(colQtyInRs_tOracleInput_10 < 21) {
								row20.CODDIAGREL1 = null;
							} else {
	                         		
        	row20.CODDIAGREL1 = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 21, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 22) {
								row20.CODDIAGREL2 = null;
							} else {
	                         		
        	row20.CODDIAGREL2 = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 22, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 23) {
								row20.CODDIAGREL3 = null;
							} else {
	                         		
        	row20.CODDIAGREL3 = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 23, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 24) {
								row20.PROFESIONAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(24) != null) {
						row20.PROFESIONAL_ID = rs_tOracleInput_10.getBigDecimal(24);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 25) {
								row20.TDOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row20.TDOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 25, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 26) {
								row20.DOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row20.DOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 26, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 27) {
								row20.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(27) != null) {
						row20.ESPECIALIDADES_ID = rs_tOracleInput_10.getBigDecimal(27);
					} else {
				
						row20.ESPECIALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 28) {
								row20.ESPECIALIDAD = null;
							} else {
	                         		
        	row20.ESPECIALIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 28, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 29) {
								row20.TIPO_USUARIO = null;
							} else {
	                         		
        	row20.TIPO_USUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 29, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 30) {
								row20.EDAD = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(30) != null) {
						row20.EDAD = rs_tOracleInput_10.getBigDecimal(30);
					} else {
				
						row20.EDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 31) {
								row20.UMEDIDA_EDAD = null;
							} else {
	                         		
        	row20.UMEDIDA_EDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 31, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 32) {
								row20.GRADO_CODIGO = null;
							} else {
	                         		
        	row20.GRADO_CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 32, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 33) {
								row20.GRADO = null;
							} else {
	                         		
        	row20.GRADO = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 33, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 34) {
								row20.CLASEGRD = null;
							} else {
	                         		
        	row20.CLASEGRD = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 34, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 35) {
								row20.CLASEGRD_CODIGO = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(35) != null) {
						row20.CLASEGRD_CODIGO = rs_tOracleInput_10.getBigDecimal(35);
					} else {
				
						row20.CLASEGRD_CODIGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 36) {
								row20.ACTOQUIRURGICO = null;
							} else {
	                         		
        	row20.ACTOQUIRURGICO = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 36, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 37) {
								row20.FINALIDAD_CONSULTA = null;
							} else {
	                         		
        	row20.FINALIDAD_CONSULTA = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 37, false);
		                    }
					




 



/**
 * [tOracleInput_10 begin ] stop
 */
	
	/**
	 * [tOracleInput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 


	tos_count_tOracleInput_10++;

/**
 * [tOracleInput_10 main ] stop
 */
	
	/**
	 * [tOracleInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

pqx_in = null;


// # Output table : 'pqx_in'
pqx_in_tmp.CODFACTURA = null;
pqx_in_tmp.PROCESOSASISTENCIALES_ID = null;
pqx_in_tmp.CODPRESTADOR = row20.CODPRESTADOR ;
pqx_in_tmp.TDOCUMENTO = row20.TDOCUMENTO ;
pqx_in_tmp.DOCUMENTO = row20.DOCUMENTO ;
pqx_in_tmp.CODAUTORIZACION = null;
pqx_in_tmp.CODPROCEDIMIENTO = row20.CODPROCEDIMIENTO ;
pqx_in_tmp.AMBITO = row20.AMBITO ;
pqx_in_tmp.FINALIDAD = row20.FINALIDAD ;
pqx_in_tmp.PERSONAL = row20.PERSONAL ;
pqx_in_tmp.CODDIAGPPAL = row20.CODDIAGPPAL ;
pqx_in_tmp.COMPLICACION = row20.COMPLICACION ;
pqx_in_tmp.FORMA_QUIRURGICO = row20.FORMA_QUIRURGICO ;
pqx_in_tmp.VPROCEDIMIENTO = null;
pqx_in_tmp.FECHA = row20.FECHA ;
pqx_in_tmp.CODDIAGREL1 = row20.CODDIAGREL1 ;
pqx_in_tmp.CODDIAGREL2 = row20.CODDIAGREL2 ;
pqx_in_tmp.CODDIAGREL3 = row20.CODDIAGREL3 ;
pqx_in_tmp.PERIODO = null;
pqx_in_tmp.TRIPS = "Interna";
pqx_in_tmp.PERSONAS_ID = row20.PACIENTE_ID ;
pqx_in_tmp.UORG_ID = row20.UORG_ID ;
pqx_in_tmp.FUERZA_ID = row20.FUERZA_ID ;
pqx_in_tmp.TDOCUMENTO_PROFESIONAL = row20.TDOCUMENTO_PROFESIONAL ;
pqx_in_tmp.DOCUMENTO_PROFESIONAL = row20.DOCUMENTO_PROFESIONAL ;
pqx_in_tmp.ESPECIALIDAD = row20.ESPECIALIDAD ;
pqx_in_tmp.PESO = null;
pqx_in_tmp.TALLA = null;
pqx_in_tmp.UMEDIDA_PESO = null;
pqx_in_tmp.UMEDIDA_TALLA = null;
pqx_in_tmp.TIPO_GENERACION = "Automatico";
pqx_in_tmp.TIPO_USUARIO = row20.TIPO_USUARIO ;
pqx_in_tmp.EDAD = row20.EDAD ;
pqx_in_tmp.UMEDIDA_EDAD = row20.UMEDIDA_EDAD ;
pqx_in_tmp.GRADO_CODIGO = row20.GRADO_CODIGO ;
pqx_in_tmp.GRADO = row20.GRADO ;
pqx_in_tmp.CLASEGRD = row20.CLASEGRD ;
pqx_in_tmp.ADMISION_ID = null;
pqx_in_tmp.CLASEGRD_CODIGO = row20.CLASEGRD_CODIGO ;
pqx_in_tmp.ESPECIALIDADES_ID = row20.ESPECIALIDADES_ID ;
pqx_in_tmp.QUIRURGICO = row20.QUIRURGICO ;
pqx_in_tmp.EJECACTIVIDADES_ID = null;
pqx_in_tmp.ESTADO_TRATAMIENTO = null;
pqx_in_tmp.FINALIDAD_CONSULTA = row20.FINALIDAD_CONSULTA ;
pqx_in = pqx_in_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "pqx_in"
if(pqx_in != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"pqx_in"
									
							);
						}
						
//////////
 

// for output
			row16 = new row16Struct();
								
			row16.CODFACTURA = pqx_in.CODFACTURA;								
			row16.PROCESOSASISTENCIALES_ID = pqx_in.PROCESOSASISTENCIALES_ID;								
			row16.CODPRESTADOR = pqx_in.CODPRESTADOR;								
			row16.TDOCUMENTO = pqx_in.TDOCUMENTO;								
			row16.DOCUMENTO = pqx_in.DOCUMENTO;								
			row16.CODAUTORIZACION = pqx_in.CODAUTORIZACION;								
			row16.CODPROCEDIMIENTO = pqx_in.CODPROCEDIMIENTO;								
			row16.AMBITO = pqx_in.AMBITO;								
			row16.FINALIDAD = pqx_in.FINALIDAD;								
			row16.PERSONAL = pqx_in.PERSONAL;								
			row16.CODDIAGPPAL = pqx_in.CODDIAGPPAL;								
			row16.COMPLICACION = pqx_in.COMPLICACION;								
			row16.FORMA_QUIRURGICO = pqx_in.FORMA_QUIRURGICO;								
			row16.VPROCEDIMIENTO = pqx_in.VPROCEDIMIENTO;								
			row16.FECHA = pqx_in.FECHA;								
			row16.CODDIAGREL1 = pqx_in.CODDIAGREL1;								
			row16.CODDIAGREL2 = pqx_in.CODDIAGREL2;								
			row16.CODDIAGREL3 = pqx_in.CODDIAGREL3;								
			row16.PERIODO = pqx_in.PERIODO;								
			row16.TRIPS = pqx_in.TRIPS;								
			row16.PERSONAS_ID = pqx_in.PERSONAS_ID;								
			row16.UORG_ID = pqx_in.UORG_ID;								
			row16.FUERZA_ID = pqx_in.FUERZA_ID;								
			row16.TDOCUMENTO_PROFESIONAL = pqx_in.TDOCUMENTO_PROFESIONAL;								
			row16.DOCUMENTO_PROFESIONAL = pqx_in.DOCUMENTO_PROFESIONAL;								
			row16.ESPECIALIDAD = pqx_in.ESPECIALIDAD;								
			row16.PESO = pqx_in.PESO;								
			row16.TALLA = pqx_in.TALLA;								
			row16.UMEDIDA_PESO = pqx_in.UMEDIDA_PESO;								
			row16.UMEDIDA_TALLA = pqx_in.UMEDIDA_TALLA;								
			row16.TIPO_GENERACION = pqx_in.TIPO_GENERACION;								
			row16.TIPO_USUARIO = pqx_in.TIPO_USUARIO;								
			row16.EDAD = pqx_in.EDAD;								
			row16.UMEDIDA_EDAD = pqx_in.UMEDIDA_EDAD;								
			row16.GRADO_CODIGO = pqx_in.GRADO_CODIGO;								
			row16.GRADO = pqx_in.GRADO;								
			row16.CLASEGRD = pqx_in.CLASEGRD;								
			row16.ADMISION_ID = pqx_in.ADMISION_ID;								
			row16.CLASEGRD_CODIGO = pqx_in.CLASEGRD_CODIGO;								
			row16.ESPECIALIDADES_ID = pqx_in.ESPECIALIDADES_ID;								
			row16.QUIRURGICO = pqx_in.QUIRURGICO;								
			row16.EJECACTIVIDADES_ID = pqx_in.EJECACTIVIDADES_ID;								
			row16.ESTADO_TRATAMIENTO = pqx_in.ESTADO_TRATAMIENTO;								
			row16.FINALIDAD_CONSULTA = pqx_in.FINALIDAD_CONSULTA;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row13Struct row13 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row13HashKey.PROCESOSASISTENCIALES_ID = row16.PROCESOSASISTENCIALES_ID ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.PROCESOSASISTENCIALES_ID = '" + row13HashKey.PROCESOSASISTENCIALES_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

proc_out = null;


// # Output table : 'proc_out'
proc_out_tmp.CODFACTURA = row16.CODFACTURA ;
proc_out_tmp.PROCESOASISTENCIAL_ID = row16.PROCESOSASISTENCIALES_ID ;
proc_out_tmp.CODPRESTADOR = row16.CODPRESTADOR ;
proc_out_tmp.TDOCUMENTO = row16.TDOCUMENTO ;
proc_out_tmp.DOCUMENTO = row16.DOCUMENTO ;
proc_out_tmp.CODAUTORIZACION = row16.CODAUTORIZACION ;
proc_out_tmp.CODPROCEDIMIENTO = row16.CODPROCEDIMIENTO ;
proc_out_tmp.AMBITO = row16.AMBITO ;
proc_out_tmp.FINALIDAD = row16.FINALIDAD ;
proc_out_tmp.PERSONAL = row16.PERSONAL ;
proc_out_tmp.CODDIAGPPAL = row16.CODDIAGPPAL ;
proc_out_tmp.CODDIAGNOSTICO1 = row16.CODDIAGREL1 ;
proc_out_tmp.COMPLICACION = row16.COMPLICACION ;
proc_out_tmp.FORMA_QUIRURGICO = row16.FORMA_QUIRURGICO ;
proc_out_tmp.VPROCEDIMIENTO = row16.VPROCEDIMIENTO ;
proc_out_tmp.FECHA = row16.FECHA ;
proc_out_tmp.PERIODO = row16.PERIODO ;
proc_out_tmp.TRIPS = row16.TRIPS ;
proc_out_tmp.PERSONAS_ID = row16.PERSONAS_ID ;
proc_out_tmp.UORG_ID = row16.UORG_ID ;
proc_out_tmp.FUERZA_ID = row16.FUERZA_ID ;
proc_out_tmp.TDOCUMENTO_PROFESIONAL = row16.TDOCUMENTO_PROFESIONAL ;
proc_out_tmp.DOCUMENTO_PROFESIONAL = row16.DOCUMENTO_PROFESIONAL ;
proc_out_tmp.ESPECIALIDAD = row16.ESPECIALIDAD ;
proc_out_tmp.PESO = row13.PESO_VALOR;
proc_out_tmp.TALLA = row13.ESTATURA_VALOR;
proc_out_tmp.UMEDIDA_PESO = row13.PESO_UMEDIDA ;
proc_out_tmp.UMEDIDA_TALLA = row13.ESTATURA_UMEDIDA ;
proc_out_tmp.TIPO_GENERACION = row16.TIPO_GENERACION ;
proc_out_tmp.TIPO_USUARIO = row16.TIPO_USUARIO ;
proc_out_tmp.EDAD = row16.EDAD ;
proc_out_tmp.UMEDIDA_EDAD = row16.UMEDIDA_EDAD ;
proc_out_tmp.GRADO_CODIGO = row16.GRADO_CODIGO ;
proc_out_tmp.GRADO = row16.GRADO ;
proc_out_tmp.CLASEGRD = row16.CLASEGRD ;
proc_out_tmp.ADMISION_ID = row16.ADMISION_ID ;
proc_out_tmp.CLASEGRD_CODIGO = row16.CLASEGRD_CODIGO ;
proc_out_tmp.ESPECIALIDADES_ID = row16.ESPECIALIDADES_ID ;
proc_out_tmp.QUIRURGICO = row16.QUIRURGICO ;
proc_out_tmp.CODDIAGNOSTICO2 = row16.CODDIAGREL2 ;
proc_out_tmp.CODDIAGNOSTICO3 = row16.CODDIAGREL3 ;
proc_out_tmp.EJECACTIVIDADES_ID = row16.EJECACTIVIDADES_ID ;
proc_out_tmp.ESTADO_TRATAMIENTO = row16.ESTADO_TRATAMIENTO ;
proc_out_tmp.FINALIDAD_CONSULTA = row16.FINALIDAD_CONSULTA ;
proc_out = proc_out_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "proc_out"
if(proc_out != null) { 



	
	/**
	 * [tOracleOutput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"proc_out"
						
						);
					}
					



        whetherReject_tOracleOutput_15 = false;
                        if(proc_out.CODFACTURA == null) {
pstmt_tOracleOutput_15.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(1, proc_out.CODFACTURA);
}

                        pstmt_tOracleOutput_15.setBigDecimal(2, proc_out.PROCESOASISTENCIAL_ID);

                        if(proc_out.CODPRESTADOR == null) {
pstmt_tOracleOutput_15.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(3, proc_out.CODPRESTADOR);
}

                        if(proc_out.TDOCUMENTO == null) {
pstmt_tOracleOutput_15.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(4, proc_out.TDOCUMENTO);
}

                        if(proc_out.DOCUMENTO == null) {
pstmt_tOracleOutput_15.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(5, proc_out.DOCUMENTO);
}

                        if(proc_out.CODAUTORIZACION == null) {
pstmt_tOracleOutput_15.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(6, proc_out.CODAUTORIZACION);
}

                        if(proc_out.CODPROCEDIMIENTO == null) {
pstmt_tOracleOutput_15.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(7, proc_out.CODPROCEDIMIENTO);
}

                        if(proc_out.AMBITO == null) {
pstmt_tOracleOutput_15.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(8, proc_out.AMBITO);
}

                        if(proc_out.FINALIDAD == null) {
pstmt_tOracleOutput_15.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(9, proc_out.FINALIDAD);
}

                        if(proc_out.PERSONAL == null) {
pstmt_tOracleOutput_15.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(10, proc_out.PERSONAL);
}

                        if(proc_out.CODDIAGPPAL == null) {
pstmt_tOracleOutput_15.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(11, proc_out.CODDIAGPPAL);
}

                        if(proc_out.CODDIAGNOSTICO1 == null) {
pstmt_tOracleOutput_15.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(12, proc_out.CODDIAGNOSTICO1);
}

                        if(proc_out.COMPLICACION == null) {
pstmt_tOracleOutput_15.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(13, proc_out.COMPLICACION);
}

                        if(proc_out.FORMA_QUIRURGICO == null) {
pstmt_tOracleOutput_15.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(14, proc_out.FORMA_QUIRURGICO);
}

                        pstmt_tOracleOutput_15.setBigDecimal(15, proc_out.VPROCEDIMIENTO);

                        if(proc_out.FECHA != null) {
pstmt_tOracleOutput_15.setTimestamp(16, new java.sql.Timestamp(proc_out.FECHA.getTime()));
} else {
pstmt_tOracleOutput_15.setNull(16, java.sql.Types.DATE);
}

                        if(proc_out.PERIODO == null) {
pstmt_tOracleOutput_15.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(17, proc_out.PERIODO);
}

                        if(proc_out.TRIPS == null) {
pstmt_tOracleOutput_15.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(18, proc_out.TRIPS);
}

                        pstmt_tOracleOutput_15.setBigDecimal(19, proc_out.PERSONAS_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(20, proc_out.UORG_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(21, proc_out.FUERZA_ID);

                        if(proc_out.TDOCUMENTO_PROFESIONAL == null) {
pstmt_tOracleOutput_15.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(22, proc_out.TDOCUMENTO_PROFESIONAL);
}

                        if(proc_out.DOCUMENTO_PROFESIONAL == null) {
pstmt_tOracleOutput_15.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(23, proc_out.DOCUMENTO_PROFESIONAL);
}

                        if(proc_out.ESPECIALIDAD == null) {
pstmt_tOracleOutput_15.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(24, proc_out.ESPECIALIDAD);
}

                        if(proc_out.PESO == null) {
pstmt_tOracleOutput_15.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(25, proc_out.PESO);
}

                        if(proc_out.TALLA == null) {
pstmt_tOracleOutput_15.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(26, proc_out.TALLA);
}

                        if(proc_out.UMEDIDA_PESO == null) {
pstmt_tOracleOutput_15.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(27, proc_out.UMEDIDA_PESO);
}

                        if(proc_out.UMEDIDA_TALLA == null) {
pstmt_tOracleOutput_15.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(28, proc_out.UMEDIDA_TALLA);
}

                        if(proc_out.TIPO_GENERACION == null) {
pstmt_tOracleOutput_15.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(29, proc_out.TIPO_GENERACION);
}

                        if(proc_out.TIPO_USUARIO == null) {
pstmt_tOracleOutput_15.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(30, proc_out.TIPO_USUARIO);
}

                        pstmt_tOracleOutput_15.setBigDecimal(31, proc_out.EDAD);

                        if(proc_out.UMEDIDA_EDAD == null) {
pstmt_tOracleOutput_15.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(32, proc_out.UMEDIDA_EDAD);
}

                        if(proc_out.GRADO_CODIGO == null) {
pstmt_tOracleOutput_15.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(33, proc_out.GRADO_CODIGO);
}

                        if(proc_out.GRADO == null) {
pstmt_tOracleOutput_15.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(34, proc_out.GRADO);
}

                        if(proc_out.CLASEGRD == null) {
pstmt_tOracleOutput_15.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(35, proc_out.CLASEGRD);
}

                        pstmt_tOracleOutput_15.setBigDecimal(36, proc_out.ADMISION_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(37, proc_out.CLASEGRD_CODIGO);

                        pstmt_tOracleOutput_15.setBigDecimal(38, proc_out.ESPECIALIDADES_ID);

                        if(proc_out.QUIRURGICO == null) {
pstmt_tOracleOutput_15.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(39, proc_out.QUIRURGICO);
}

                        if(proc_out.CODDIAGNOSTICO2 == null) {
pstmt_tOracleOutput_15.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(40, proc_out.CODDIAGNOSTICO2);
}

                        if(proc_out.CODDIAGNOSTICO3 == null) {
pstmt_tOracleOutput_15.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(41, proc_out.CODDIAGNOSTICO3);
}

                        pstmt_tOracleOutput_15.setBigDecimal(42, proc_out.EJECACTIVIDADES_ID);

                        if(proc_out.ESTADO_TRATAMIENTO == null) {
pstmt_tOracleOutput_15.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(43, proc_out.ESTADO_TRATAMIENTO);
}

                        if(proc_out.FINALIDAD_CONSULTA == null) {
pstmt_tOracleOutput_15.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(44, proc_out.FINALIDAD_CONSULTA);
}

                pstmt_tOracleOutput_15.addBatch();
                nb_line_tOracleOutput_15++;
                batchSizeCounter_tOracleOutput_15++;
            if (batchSize_tOracleOutput_15 > 0 &&  batchSize_tOracleOutput_15 <= batchSizeCounter_tOracleOutput_15) {
                try {
                    pstmt_tOracleOutput_15.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_15){
globalMap.put("tOracleOutput_15_ERROR_MESSAGE",e_tOracleOutput_15.getMessage());
			        java.sql.SQLException ne_tOracleOutput_15 = e_tOracleOutput_15.getNextException(),sqle_tOracleOutput_15=null;
			    	String errormessage_tOracleOutput_15;
					if (ne_tOracleOutput_15 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_15 = new java.sql.SQLException(e_tOracleOutput_15.getMessage() + "\ncaused by: " + ne_tOracleOutput_15.getMessage(), ne_tOracleOutput_15.getSQLState(), ne_tOracleOutput_15.getErrorCode(), ne_tOracleOutput_15);
						errormessage_tOracleOutput_15 = sqle_tOracleOutput_15.getMessage();
					}else{
						errormessage_tOracleOutput_15 = e_tOracleOutput_15.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_15);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_15 = pstmt_tOracleOutput_15.getUpdateCount();
                    insertedCount_tOracleOutput_15
                += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                rowsToCommitCount_tOracleOutput_15 += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                batchSizeCounter_tOracleOutput_15 = 0;
            }
                commitCounter_tOracleOutput_15++;
                if(commitEvery_tOracleOutput_15 <= commitCounter_tOracleOutput_15) {
                    if(batchSizeCounter_tOracleOutput_15 > 0) {
                        try {
                            pstmt_tOracleOutput_15.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_15){
globalMap.put("tOracleOutput_15_ERROR_MESSAGE",e_tOracleOutput_15.getMessage());
					        java.sql.SQLException ne_tOracleOutput_15 = e_tOracleOutput_15.getNextException(),sqle_tOracleOutput_15=null;
					    	String errormessage_tOracleOutput_15;
							if (ne_tOracleOutput_15 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_15 = new java.sql.SQLException(e_tOracleOutput_15.getMessage() + "\ncaused by: " + ne_tOracleOutput_15.getMessage(), ne_tOracleOutput_15.getSQLState(), ne_tOracleOutput_15.getErrorCode(), ne_tOracleOutput_15);
								errormessage_tOracleOutput_15 = sqle_tOracleOutput_15.getMessage();
							}else{
								errormessage_tOracleOutput_15 = e_tOracleOutput_15.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_15);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_15 = pstmt_tOracleOutput_15.getUpdateCount();
                            insertedCount_tOracleOutput_15
                        += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                        rowsToCommitCount_tOracleOutput_15 += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_15 != 0){
                    	
                    }
                    conn_tOracleOutput_15.commit();
                    if(rowsToCommitCount_tOracleOutput_15 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_15 = 0;
                    }
                    commitCounter_tOracleOutput_15=0;
                    	batchSizeCounter_tOracleOutput_15=0;
                }

 


	tos_count_tOracleOutput_15++;

/**
 * [tOracleOutput_15 main ] stop
 */
	
	/**
	 * [tOracleOutput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	

 



/**
 * [tOracleOutput_15 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	

 



/**
 * [tOracleOutput_15 process_data_end ] stop
 */

} // End of branch "proc_out"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "pqx_in"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

}
}finally{
	if (rs_tOracleInput_10 != null) {
		rs_tOracleInput_10.close();
	}
	if (stmt_tOracleInput_10 != null) {
		stmt_tOracleInput_10.close();
	}
}

globalMap.put("tOracleInput_10_NB_LINE",nb_line_tOracleInput_10);
 

ok_Hash.put("tOracleInput_10", true);
end_Hash.put("tOracleInput_10", System.currentTimeMillis());




/**
 * [tOracleInput_10 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */



	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"cgp_in","rca_in","pqx_in","odo_in");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tOracleOutput_15 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_15 > 0) {
            try {
            	if (pstmt_tOracleOutput_15 != null) {
					
					pstmt_tOracleOutput_15.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_15){
globalMap.put("tOracleOutput_15_ERROR_MESSAGE",e_tOracleOutput_15.getMessage());
		        java.sql.SQLException ne_tOracleOutput_15 = e_tOracleOutput_15.getNextException(),sqle_tOracleOutput_15=null;
		    	String errormessage_tOracleOutput_15;
				if (ne_tOracleOutput_15 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_15 = new java.sql.SQLException(e_tOracleOutput_15.getMessage() + "\ncaused by: " + ne_tOracleOutput_15.getMessage(), ne_tOracleOutput_15.getSQLState(), ne_tOracleOutput_15.getErrorCode(), ne_tOracleOutput_15);
					errormessage_tOracleOutput_15 = sqle_tOracleOutput_15.getMessage();
				}else{
					errormessage_tOracleOutput_15 = e_tOracleOutput_15.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_15);
            	
        	}
        	if (pstmt_tOracleOutput_15 != null) {
            	tmp_batchUpdateCount_tOracleOutput_15 = pstmt_tOracleOutput_15.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_15
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
				rowsToCommitCount_tOracleOutput_15 += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
            }
        }
        if(pstmt_tOracleOutput_15 != null) {
			
				pstmt_tOracleOutput_15.close();
				resourceMap.remove("pstmt_tOracleOutput_15");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_15", true);
		if(commitCounter_tOracleOutput_15 > 0 && rowsToCommitCount_tOracleOutput_15 != 0) {
			
		}
		conn_tOracleOutput_15.commit();
		if(commitCounter_tOracleOutput_15 > 0 && rowsToCommitCount_tOracleOutput_15 != 0) {
			
			rowsToCommitCount_tOracleOutput_15 = 0;
		}
		commitCounter_tOracleOutput_15 = 0;
		
		
		conn_tOracleOutput_15 .close();
		
		resourceMap.put("finish_tOracleOutput_15", true);
   	

	
	nb_line_deleted_tOracleOutput_15=nb_line_deleted_tOracleOutput_15+ deletedCount_tOracleOutput_15;
	nb_line_update_tOracleOutput_15=nb_line_update_tOracleOutput_15 + updatedCount_tOracleOutput_15;
	nb_line_inserted_tOracleOutput_15=nb_line_inserted_tOracleOutput_15 + insertedCount_tOracleOutput_15;
	nb_line_rejected_tOracleOutput_15=nb_line_rejected_tOracleOutput_15 + rejectedCount_tOracleOutput_15;
	
        globalMap.put("tOracleOutput_15_NB_LINE",nb_line_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_UPDATED",nb_line_update_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_15);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"proc_out");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_15", true);
end_Hash.put("tOracleOutput_15", System.currentTimeMillis());




/**
 * [tOracleOutput_15 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_13:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tJava_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 finally ] stop
 */

	
	/**
	 * [tMap_21 finally ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	

 



/**
 * [tMap_21 finally ] stop
 */



	
	/**
	 * [tOracleInput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */



	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */



	
	/**
	 * [tOracleInput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */



	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tOracleOutput_15 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_15") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_15 = null;
                if ((pstmtToClose_tOracleOutput_15 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_15")) != null) {
                    pstmtToClose_tOracleOutput_15.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_15") == null){
            java.sql.Connection ctn_tOracleOutput_15 = null;
            if((ctn_tOracleOutput_15 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_15")) != null){
                try {
                    ctn_tOracleOutput_15.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_15) {
                    String errorMessage_tOracleOutput_15 = "failed to close the connection in tOracleOutput_15 :" + sqlEx_tOracleOutput_15.getMessage();
                    System.err.println(errorMessage_tOracleOutput_15);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_15 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


/*System.out.println("ReturnValueExampleChildJob_NB_LINE=" + ((BigDecimal) ((java.util.Map) globalMap.get("sharedMap")).get("ReturnValueExampleChildJob_NB_LINE")));

*/

context.CODARCHIVO = "AT";
System.out.println("        - Otros servicios: " + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );

/*context.ARCONTROL_ID = (BigDecimal) ((java.util.Map) globalMap.get("sharedMap")).get("ReturnValueAC_ID");
System.out.println("ARCONTROL_ID AT : " + context.ARCONTROL_ID );*/
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tOracleInput_1Process(globalMap);



/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class insert_osStruct implements routines.system.IPersistableRow<insert_osStruct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String CODFACTURA;

				public String getCODFACTURA () {
					return this.CODFACTURA;
				}

				public Boolean CODFACTURAIsNullable(){
				    return true;
				}
				public Boolean CODFACTURAIsKey(){
				    return false;
				}
				public Integer CODFACTURALength(){
				    return 100;
				}
				public Integer CODFACTURAPrecision(){
				    return 0;
				}
				public String CODFACTURADefault(){
				
					return null;
				
				}
				public String CODFACTURAComment(){
				
				    return "";
				
				}
				public String CODFACTURAPattern(){
				
					return "";
				
				}
				public String CODFACTURAOriginalDbColumnName(){
				
					return "CODFACTURA";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return 100;
				}
				public Integer CODPRESTADORPrecision(){
				    return 0;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 50;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return 250;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public BigDecimal TSERVICIO;

				public BigDecimal getTSERVICIO () {
					return this.TSERVICIO;
				}

				public Boolean TSERVICIOIsNullable(){
				    return true;
				}
				public Boolean TSERVICIOIsKey(){
				    return false;
				}
				public Integer TSERVICIOLength(){
				    return 0;
				}
				public Integer TSERVICIOPrecision(){
				    return null;
				}
				public String TSERVICIODefault(){
				
					return null;
				
				}
				public String TSERVICIOComment(){
				
				    return "";
				
				}
				public String TSERVICIOPattern(){
				
					return "";
				
				}
				public String TSERVICIOOriginalDbColumnName(){
				
					return "TSERVICIO";
				
				}

				
			    public String CODSERVICIO;

				public String getCODSERVICIO () {
					return this.CODSERVICIO;
				}

				public Boolean CODSERVICIOIsNullable(){
				    return true;
				}
				public Boolean CODSERVICIOIsKey(){
				    return false;
				}
				public Integer CODSERVICIOLength(){
				    return 50;
				}
				public Integer CODSERVICIOPrecision(){
				    return 0;
				}
				public String CODSERVICIODefault(){
				
					return null;
				
				}
				public String CODSERVICIOComment(){
				
				    return "";
				
				}
				public String CODSERVICIOPattern(){
				
					return "";
				
				}
				public String CODSERVICIOOriginalDbColumnName(){
				
					return "CODSERVICIO";
				
				}

				
			    public String NOMBRE_SERVICIO;

				public String getNOMBRE_SERVICIO () {
					return this.NOMBRE_SERVICIO;
				}

				public Boolean NOMBRE_SERVICIOIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_SERVICIOIsKey(){
				    return false;
				}
				public Integer NOMBRE_SERVICIOLength(){
				    return 500;
				}
				public Integer NOMBRE_SERVICIOPrecision(){
				    return 0;
				}
				public String NOMBRE_SERVICIODefault(){
				
					return null;
				
				}
				public String NOMBRE_SERVICIOComment(){
				
				    return "";
				
				}
				public String NOMBRE_SERVICIOPattern(){
				
					return "";
				
				}
				public String NOMBRE_SERVICIOOriginalDbColumnName(){
				
					return "NOMBRE_SERVICIO";
				
				}

				
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return 0;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return null;
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 0;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return null;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public BigDecimal VALOR_TOTAL;

				public BigDecimal getVALOR_TOTAL () {
					return this.VALOR_TOTAL;
				}

				public Boolean VALOR_TOTALIsNullable(){
				    return true;
				}
				public Boolean VALOR_TOTALIsKey(){
				    return false;
				}
				public Integer VALOR_TOTALLength(){
				    return 0;
				}
				public Integer VALOR_TOTALPrecision(){
				    return null;
				}
				public String VALOR_TOTALDefault(){
				
					return null;
				
				}
				public String VALOR_TOTALComment(){
				
				    return "";
				
				}
				public String VALOR_TOTALPattern(){
				
					return "";
				
				}
				public String VALOR_TOTALOriginalDbColumnName(){
				
					return "VALOR_TOTAL";
				
				}

				
			    public String TRIPS;

				public String getTRIPS () {
					return this.TRIPS;
				}

				public Boolean TRIPSIsNullable(){
				    return true;
				}
				public Boolean TRIPSIsKey(){
				    return false;
				}
				public Integer TRIPSLength(){
				    return 10;
				}
				public Integer TRIPSPrecision(){
				    return 0;
				}
				public String TRIPSDefault(){
				
					return null;
				
				}
				public String TRIPSComment(){
				
				    return "";
				
				}
				public String TRIPSPattern(){
				
					return "";
				
				}
				public String TRIPSOriginalDbColumnName(){
				
					return "TRIPS";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 7;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return null;
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "FK - BGEN_PERSONAS";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - BGEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "EDAD SIMPLE DE LA PERSONA AL MOMENTO DE LA ATENCI\u00D3N";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 10;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "Unidad de medida de la edad simple (A\u00F1os, Meses)";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
						this.TSERVICIO = (BigDecimal) dis.readObject();
					
					this.CODSERVICIO = readString(dis);
					
					this.NOMBRE_SERVICIO = readString(dis);
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.VALOR_TOTAL = (BigDecimal) dis.readObject();
					
					this.TRIPS = readString(dis);
					
					this.PERIODO = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
						this.TSERVICIO = (BigDecimal) dis.readObject();
					
					this.CODSERVICIO = readString(dis);
					
					this.NOMBRE_SERVICIO = readString(dis);
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.VALOR_TOTAL = (BigDecimal) dis.readObject();
					
					this.TRIPS = readString(dis);
					
					this.PERIODO = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TSERVICIO);
					
					// String
				
						writeString(this.CODSERVICIO,dos);
					
					// String
				
						writeString(this.NOMBRE_SERVICIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_TOTAL);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TSERVICIO);
					
					// String
				
						writeString(this.CODSERVICIO,dos);
					
					// String
				
						writeString(this.NOMBRE_SERVICIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_TOTAL);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODFACTURA="+CODFACTURA);
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",TSERVICIO="+String.valueOf(TSERVICIO));
		sb.append(",CODSERVICIO="+CODSERVICIO);
		sb.append(",NOMBRE_SERVICIO="+NOMBRE_SERVICIO);
		sb.append(",CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",VALOR_TOTAL="+String.valueOf(VALOR_TOTAL));
		sb.append(",TRIPS="+TRIPS);
		sb.append(",PERIODO="+PERIODO);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_osStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return 40;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return 0;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String CODIGO_PRESTADOR;

				public String getCODIGO_PRESTADOR () {
					return this.CODIGO_PRESTADOR;
				}

				public Boolean CODIGO_PRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODIGO_PRESTADORIsKey(){
				    return false;
				}
				public Integer CODIGO_PRESTADORLength(){
				    return 0;
				}
				public Integer CODIGO_PRESTADORPrecision(){
				    return null;
				}
				public String CODIGO_PRESTADORDefault(){
				
					return null;
				
				}
				public String CODIGO_PRESTADORComment(){
				
				    return "";
				
				}
				public String CODIGO_PRESTADORPattern(){
				
					return "";
				
				}
				public String CODIGO_PRESTADOROriginalDbColumnName(){
				
					return "CODIGO_PRESTADOR";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 5;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String CONSECUTIVO;

				public String getCONSECUTIVO () {
					return this.CONSECUTIVO;
				}

				public Boolean CONSECUTIVOIsNullable(){
				    return true;
				}
				public Boolean CONSECUTIVOIsKey(){
				    return false;
				}
				public Integer CONSECUTIVOLength(){
				    return 250;
				}
				public Integer CONSECUTIVOPrecision(){
				    return 0;
				}
				public String CONSECUTIVODefault(){
				
					return null;
				
				}
				public String CONSECUTIVOComment(){
				
				    return "";
				
				}
				public String CONSECUTIVOPattern(){
				
					return "";
				
				}
				public String CONSECUTIVOOriginalDbColumnName(){
				
					return "CONSECUTIVO";
				
				}

				
			    public BigDecimal TIPO_SERVICIO;

				public BigDecimal getTIPO_SERVICIO () {
					return this.TIPO_SERVICIO;
				}

				public Boolean TIPO_SERVICIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_SERVICIOIsKey(){
				    return false;
				}
				public Integer TIPO_SERVICIOLength(){
				    return 0;
				}
				public Integer TIPO_SERVICIOPrecision(){
				    return null;
				}
				public String TIPO_SERVICIODefault(){
				
					return "";
				
				}
				public String TIPO_SERVICIOComment(){
				
				    return "";
				
				}
				public String TIPO_SERVICIOPattern(){
				
					return "";
				
				}
				public String TIPO_SERVICIOOriginalDbColumnName(){
				
					return "TIPO_SERVICIO";
				
				}

				
			    public String CODIGO_SERVICIO;

				public String getCODIGO_SERVICIO () {
					return this.CODIGO_SERVICIO;
				}

				public Boolean CODIGO_SERVICIOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_SERVICIOIsKey(){
				    return false;
				}
				public Integer CODIGO_SERVICIOLength(){
				    return 100;
				}
				public Integer CODIGO_SERVICIOPrecision(){
				    return 0;
				}
				public String CODIGO_SERVICIODefault(){
				
					return null;
				
				}
				public String CODIGO_SERVICIOComment(){
				
				    return "";
				
				}
				public String CODIGO_SERVICIOPattern(){
				
					return "";
				
				}
				public String CODIGO_SERVICIOOriginalDbColumnName(){
				
					return "CODIGO_SERVICIO";
				
				}

				
			    public String NOMBRE_SERVICIO;

				public String getNOMBRE_SERVICIO () {
					return this.NOMBRE_SERVICIO;
				}

				public Boolean NOMBRE_SERVICIOIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_SERVICIOIsKey(){
				    return false;
				}
				public Integer NOMBRE_SERVICIOLength(){
				    return 500;
				}
				public Integer NOMBRE_SERVICIOPrecision(){
				    return 0;
				}
				public String NOMBRE_SERVICIODefault(){
				
					return null;
				
				}
				public String NOMBRE_SERVICIOComment(){
				
				    return "";
				
				}
				public String NOMBRE_SERVICIOPattern(){
				
					return "";
				
				}
				public String NOMBRE_SERVICIOOriginalDbColumnName(){
				
					return "NOMBRE_SERVICIO";
				
				}

				
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return 0;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return "";
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 0;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return null;
				}
				public String VALOR_UNITARIODefault(){
				
					return "";
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public BigDecimal VALOR_TOTAL;

				public BigDecimal getVALOR_TOTAL () {
					return this.VALOR_TOTAL;
				}

				public Boolean VALOR_TOTALIsNullable(){
				    return true;
				}
				public Boolean VALOR_TOTALIsKey(){
				    return false;
				}
				public Integer VALOR_TOTALLength(){
				    return 0;
				}
				public Integer VALOR_TOTALPrecision(){
				    return null;
				}
				public String VALOR_TOTALDefault(){
				
					return "";
				
				}
				public String VALOR_TOTALComment(){
				
				    return "";
				
				}
				public String VALOR_TOTALPattern(){
				
					return "";
				
				}
				public String VALOR_TOTALOriginalDbColumnName(){
				
					return "VALOR_TOTAL";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 5;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO_PRESTADOR = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CONSECUTIVO = readString(dis);
					
						this.TIPO_SERVICIO = (BigDecimal) dis.readObject();
					
					this.CODIGO_SERVICIO = readString(dis);
					
					this.NOMBRE_SERVICIO = readString(dis);
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.VALOR_TOTAL = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO_PRESTADOR = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CONSECUTIVO = readString(dis);
					
						this.TIPO_SERVICIO = (BigDecimal) dis.readObject();
					
					this.CODIGO_SERVICIO = readString(dis);
					
					this.NOMBRE_SERVICIO = readString(dis);
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.VALOR_TOTAL = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CODIGO_PRESTADOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CONSECUTIVO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO_SERVICIO);
					
					// String
				
						writeString(this.CODIGO_SERVICIO,dos);
					
					// String
				
						writeString(this.NOMBRE_SERVICIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_TOTAL);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CODIGO_PRESTADOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CONSECUTIVO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO_SERVICIO);
					
					// String
				
						writeString(this.CODIGO_SERVICIO,dos);
					
					// String
				
						writeString(this.NOMBRE_SERVICIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_TOTAL);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CODIGO_PRESTADOR="+CODIGO_PRESTADOR);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",CONSECUTIVO="+CONSECUTIVO);
		sb.append(",TIPO_SERVICIO="+String.valueOf(TIPO_SERVICIO));
		sb.append(",CODIGO_SERVICIO="+CODIGO_SERVICIO);
		sb.append(",NOMBRE_SERVICIO="+NOMBRE_SERVICIO);
		sb.append(",CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",VALOR_TOTAL="+String.valueOf(VALOR_TOTAL));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
insert_osStruct insert_os = new insert_osStruct();





	
	/**
	 * [tOracleOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_11", false);
		start_Hash.put("tOracleOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_os");
					}
				
		int tos_count_tOracleOutput_11 = 0;
		






    
    int nb_line_tOracleOutput_11 = 0;
    int nb_line_update_tOracleOutput_11 = 0;
    int nb_line_inserted_tOracleOutput_11 = 0;
    int nb_line_deleted_tOracleOutput_11 = 0;
    int nb_line_rejected_tOracleOutput_11 = 0;

    int tmp_batchUpdateCount_tOracleOutput_11 = 0;

    int deletedCount_tOracleOutput_11=0;
    int updatedCount_tOracleOutput_11=0;
    int insertedCount_tOracleOutput_11=0;
    int rowsToCommitCount_tOracleOutput_11=0;
    int rejectedCount_tOracleOutput_11=0;

    boolean whetherReject_tOracleOutput_11 = false;

    java.sql.Connection conn_tOracleOutput_11 = null;

    //optional table
    String dbschema_tOracleOutput_11 = null;
    String tableName_tOracleOutput_11 = null;
                    String driverClass_tOracleOutput_11 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_11);
                String url_tOracleOutput_11 = null;
                    url_tOracleOutput_11 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_11 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_11 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_11 = decryptedPassword_tOracleOutput_11;
                dbschema_tOracleOutput_11 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_11 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_11.put("user",dbUser_tOracleOutput_11);
                    atnParamsPrope_tOracleOutput_11.put("password",dbPwd_tOracleOutput_11);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_11.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_11 = java.sql.DriverManager.getConnection(url_tOracleOutput_11, atnParamsPrope_tOracleOutput_11);
        resourceMap.put("conn_tOracleOutput_11", conn_tOracleOutput_11);
            conn_tOracleOutput_11.setAutoCommit(false);
            int commitEvery_tOracleOutput_11 = 1000;
            int commitCounter_tOracleOutput_11 = 0;
        int batchSize_tOracleOutput_11 = 1000;
        int batchSizeCounter_tOracleOutput_11=0;
        int count_tOracleOutput_11=0;

        if(dbschema_tOracleOutput_11 == null || dbschema_tOracleOutput_11.trim().length() == 0) {
            tableName_tOracleOutput_11 = ("BRIPS_OTROSSERVICIOS");
        } else {
            tableName_tOracleOutput_11 = dbschema_tOracleOutput_11 + "." + ("BRIPS_OTROSSERVICIOS");
        }
                String insert_tOracleOutput_11 = "INSERT INTO " + tableName_tOracleOutput_11 + " (CODFACTURA,CODPRESTADOR,TDOCUMENTO,DOCUMENTO,CODAUTORIZACION,TSERVICIO,CODSERVICIO,NOMBRE_SERVICIO,CANTIDAD,VALOR_UNITARIO,VALOR_TOTAL,TRIPS,PERIODO,FECHA,PROCESOASISTENCIAL_ID,PERSONAS_ID,UORG_ID,EDAD,UMEDIDA_EDAD) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_11 = conn_tOracleOutput_11.prepareStatement(insert_tOracleOutput_11);
                        resourceMap.put("pstmt_tOracleOutput_11", pstmt_tOracleOutput_11);





 



/**
 * [tOracleOutput_11 begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_13 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_osStruct insert_os_tmp = new insert_osStruct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_1.setFetchSize(1000);


		    String dbquery_tOracleInput_1 = "SELECT \n  PROC.ID AS PROCESOASISTENCIAL_ID,\n  '' AS NUMERO_FACTURA,\n   UORG.ID AS  UORG_ID,\n  UORG.CODIGO AS CODIGO"
+"_PRESTADOR,\n  PER.ID AS PERSONAS_ID,\n  TDOC.SIGLA AS TIPO_DOCUMENTO,\n  PER.DOCUMENTO,\n  AUT.CONSECUTIVO,\n  3 AS TIP"
+"O_SERVICIO,\n  CUPS.CODIGO AS CODIGO_SERVICIO,\n  CUPS.NOMBRE AS NOMBRE_sERVICIO,\n  TRUNC(ALTA.FECHA-SERV.FECHA) AS CAN"
+"TIDAD,\n  TO_NUMBER('') AS VALOR_UNITARIO,\n  TO_NUMBER('') AS VALOR_TOTAL,\n  ADM.FECHA,\n  CASE\n    WHEN TRUNC(MONTHS"
+"_BETWEEN (PROC.FINICIAL,PER.FECHA_NACIMIENTO)/12)<1\n    THEN TRUNC(MONTHS_BETWEEN (PROC.FINICIAL,PER.FECHA_NACIMIENTO))"
+"\n    ELSE TRUNC(MONTHS_BETWEEN (PROC.FINICIAL,PER.FECHA_NACIMIENTO)/12) \n  END AS EDAD,\n  CASE\n    WHEN TRUNC(MONTHS"
+"_BETWEEN (PROC.FINICIAL,PER.FECHA_NACIMIENTO)/12)<1\n    THEN 'Meses'\n    ELSE 'Años' \n  END UMEDIDA_EDAD  \n\nFROM AD"
+"M_ADMISIONES ADM\nINNER JOIN ADM_SERVTRATANTES SERV ON SERV.ADMISIONES_ID = ADM.ID\nINNER JOIN GEN_SERVICIOS SER ON SER."
+"ID = SERV.SERVICIOS_ID AND SER.SIGLA IN ('U','H','HG','UCI')\nLEFT JOIN RCA_AUTORIZACION AUT ON AUT.ID = SERV.AUTORIZACI"
+"ON_ID\nINNER JOIN HCL_PROCESOSASISTENCIALES PROC ON PROC.ID = (SELECT \n                                                "
+"         MIN(PROCESO.ID) \n                                                        FROM HCL_PROCESOSASISTENCIALES PROCES"
+"O \n                                                        INNER JOIN ADM_ESPTRATANTES ESP ON ESP.ID  = PROCESO.ESPTRAT"
+"ANTES_ID\n                                                        INNER JOIN ADM_SERVTRATANTES SRV on SRV.id = ESP.SERVT"
+"RATANTES_ID\n                                                        WHERE SRV.ADMISIONES_ID = ADM.ID /*ESP.SERVTRATANTE"
+"S_ID = SERV.ID*/ )                                                                                                      "
+"                                                             \nINNER JOIN HCL_VALORACIONES VAL ON VAL.PROCESOSASISTENCIA"
+"LES_ID = PROC.ID\nINNER JOIN GEN_CUPS CUPS ON CUPS.ID = VAL.CUPS_ID\nINNER JOIN GEN_UORG UORG ON UORG.ID = PROC.UORG_ID"
+"\nINNER JOIN GEN_PERSONAS PER ON PER.ID = PROC.PERSONAS_ID\nINNER JOIN GEN_TDOCUMENTOS TDOC ON TDOC.ID = PER.TDOCUMENTOS_"
+"ID \nINNER JOIN (SELECT  HALTA.FECHA, TALTA.NOMBRE , AD.ID , ALTA.ID AS ALTA_ID FROM ADM_ALTASADMTVS ALTA\n            I"
+"NNER  JOIN ADM_HALTASADMTVS HALTA ON HALTA.ALTASADMTVS_ID = ALTA.ID AND HALTA.ESTREGISTRO_ID = 1 AND HALTA.ESTADO = 'Ace"
+"ptada'\n            INNER JOIN ADM_TALTASMEDICAS TALTA ON TALTA.ID = ALTA.TALTASMEDICAS_ID AND TALTA.ESTREGISTRO_ID = 1"
+"\n            INNER JOIN HCL_PROCESOSASISTENCIALES PROC ON PROC.ID = ALTA.PROCESOSASISTENCIALES_ID\n            INNER JOI"
+"N ADM_ESPTRATANTES ESP ON ESP.ID = PROC.ESPTRATANTES_ID\n            INNER JOIN ADM_SERVTRATANTES S ON S.ID = ESP.SERVTR"
+"ATANTES_ID\n            INNER JOIN ADM_ADMISIONES AD ON AD.ID = S.ADMISIONES_ID\n            ) ALTA ON ALTA.ID =  ADM.ID"
+" \n\n"+context.CONDICION_OTROS_SERVICIOS+"\n\nUNION ALL\n\nSELECT \n  PROC.ID AS PROCESOASISTENCIAL_ID,\n  TO_CHAR(SERV.ADMISIONES_ID) AS NUMERO_FACTURA,\n  UORG"
+".ID AS  UORG_ID, \n  UORG.CODIGO AS CODIGO_PRESTADOR,\n  PER.ID AS PERSONAS_ID,\n  TDOC.SIGLA AS TIPO_DOCUMENTO,\n  PER."
+"DOCUMENTO,\n  AUT.CONSECUTIVO,\n  2 AS TIPO_SERVICIO,\n  CUPS.CODIGO AS CODIGO_SERVICIO,\n  CUPS.NOMBRE NOMBRE_SERVICIO,"
+"\n  CU.CANTIDAD ,\n  CU.VALOR_UNITARIO,\n  CU.VALOR_TOTAL,\n  AUT.FECHA,\n  CASE\n    WHEN TRUNC(MONTHS_BETWEEN (PROC.FI"
+"NICIAL,PER.FECHA_NACIMIENTO)/12)<1\n    THEN TRUNC(MONTHS_BETWEEN (PROC.FINICIAL,PER.FECHA_NACIMIENTO))\n    ELSE TRUNC("
+"MONTHS_BETWEEN (PROC.FINICIAL,PER.FECHA_NACIMIENTO)/12) \n  END AS EDAD,\n  CASE\n    WHEN TRUNC(MONTHS_BETWEEN (PROC.FI"
+"NICIAL,PER.FECHA_NACIMIENTO)/12)<1\n    THEN 'Meses'\n    ELSE 'Años' \n  END UMEDIDA_EDAD\n  \nFROM RCA_INFGENERAL INF"
+"\nINNER JOIN RCA_INFCONTROLTRASLADO INFC ON INFC.INFGENERAL_ID = INF.ID\nINNER JOIN RCA_CUPSOLICITADOS CU ON CU.INFGENERA"
+"L_ID = INF.ID\nINNER JOIN GEN_CUPS CUPS ON CUPS.ID = CU.CUPS_ID\nINNER JOIN GEN_PERSONAS PER ON PER.ID = INF.PACIENTE\nI"
+"NNER JOIN GEN_TDOCUMENTOS TDOC ON TDOC.ID = PER.TDOCUMENTOS_ID\nINNER JOIN GEN_UORG UORG ON UORG.ID = INF.UORG_ID \nINNE"
+"R JOIN HCL_PROCESOSASISTENCIALES PROC ON PROC.ID = INF.PROCESOSASISTENCIALES_ID\nLEFT JOIN ADM_ESPTRATANTES ESP ON ESP.I"
+"D = PROC.ESPTRATANTES_ID\nLEFT JOIN ADM_SERVTRATANTES SERV ON SERV.ID = ESP.SERVTRATANTES_ID\nINNER JOIN RCA_AUTORIZACIO"
+"N AUT ON AUT.INFGENEREAL_ID = INF.ID\n"+context.CONDICION_OTROS_SERVICIOS2
;
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row1.PROCESOASISTENCIAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row1.PROCESOASISTENCIAL_ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
						row1.PROCESOASISTENCIAL_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row1.NUMERO_FACTURA = null;
							} else {
	                         		
        	row1.NUMERO_FACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row1.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(3) != null) {
						row1.UORG_ID = rs_tOracleInput_1.getBigDecimal(3);
					} else {
				
						row1.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 4) {
								row1.CODIGO_PRESTADOR = null;
							} else {
	                         		
        	row1.CODIGO_PRESTADOR = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 5) {
								row1.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(5) != null) {
						row1.PERSONAS_ID = rs_tOracleInput_1.getBigDecimal(5);
					} else {
				
						row1.PERSONAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 6) {
								row1.TIPO_DOCUMENTO = null;
							} else {
	                         		
        	row1.TIPO_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 7) {
								row1.DOCUMENTO = null;
							} else {
	                         		
        	row1.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 8) {
								row1.CONSECUTIVO = null;
							} else {
	                         		
        	row1.CONSECUTIVO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 9) {
								row1.TIPO_SERVICIO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(9) != null) {
						row1.TIPO_SERVICIO = rs_tOracleInput_1.getBigDecimal(9);
					} else {
				
						row1.TIPO_SERVICIO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 10) {
								row1.CODIGO_SERVICIO = null;
							} else {
	                         		
        	row1.CODIGO_SERVICIO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 11) {
								row1.NOMBRE_SERVICIO = null;
							} else {
	                         		
        	row1.NOMBRE_SERVICIO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 12) {
								row1.CANTIDAD = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(12) != null) {
						row1.CANTIDAD = rs_tOracleInput_1.getBigDecimal(12);
					} else {
				
						row1.CANTIDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 13) {
								row1.VALOR_UNITARIO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(13) != null) {
						row1.VALOR_UNITARIO = rs_tOracleInput_1.getBigDecimal(13);
					} else {
				
						row1.VALOR_UNITARIO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 14) {
								row1.VALOR_TOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(14) != null) {
						row1.VALOR_TOTAL = rs_tOracleInput_1.getBigDecimal(14);
					} else {
				
						row1.VALOR_TOTAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 15) {
								row1.FECHA = null;
							} else {
										
			row1.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 15);
		                    }
							if(colQtyInRs_tOracleInput_1 < 16) {
								row1.EDAD = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(16) != null) {
						row1.EDAD = rs_tOracleInput_1.getBigDecimal(16);
					} else {
				
						row1.EDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 17) {
								row1.UMEDIDA_EDAD = null;
							} else {
	                         		
        	row1.UMEDIDA_EDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 17, false);
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_13 = false;
		boolean mainRowRejected_tMap_13 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
        // ###############################
        // # Output tables

insert_os = null;


// # Output table : 'insert_os'
insert_os_tmp.CODFACTURA = row1.NUMERO_FACTURA ;
insert_os_tmp.CODPRESTADOR = row1.CODIGO_PRESTADOR ;
insert_os_tmp.TDOCUMENTO = row1.TIPO_DOCUMENTO ;
insert_os_tmp.DOCUMENTO = row1.DOCUMENTO ;
insert_os_tmp.CODAUTORIZACION = row1.CONSECUTIVO ;
insert_os_tmp.TSERVICIO = row1.TIPO_SERVICIO ;
insert_os_tmp.CODSERVICIO = row1.CODIGO_SERVICIO ;
insert_os_tmp.NOMBRE_SERVICIO = row1.NOMBRE_SERVICIO ;
insert_os_tmp.CANTIDAD = row1.CANTIDAD ;
insert_os_tmp.VALOR_UNITARIO = row1.VALOR_UNITARIO ;
insert_os_tmp.VALOR_TOTAL = row1.VALOR_TOTAL ;
insert_os_tmp.TRIPS = "Interna";
insert_os_tmp.PERIODO = TalendDate.formatDate("yyyy-MM",row1.FECHA);
insert_os_tmp.FECHA = row1.FECHA ;
insert_os_tmp.PROCESOASISTENCIAL_ID = row1.PROCESOASISTENCIAL_ID ;
insert_os_tmp.PERSONAS_ID = row1.PERSONAS_ID ;
insert_os_tmp.UORG_ID = row1.UORG_ID ;
insert_os_tmp.EDAD = row1.EDAD ;
insert_os_tmp.UMEDIDA_EDAD = row1.UMEDIDA_EDAD ;
insert_os = insert_os_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
	
	/**
	 * [tMap_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	

 



/**
 * [tMap_13 process_data_begin ] stop
 */
// Start of branch "insert_os"
if(insert_os != null) { 



	
	/**
	 * [tOracleOutput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_os"
						
						);
					}
					



        whetherReject_tOracleOutput_11 = false;
                        if(insert_os.CODFACTURA == null) {
pstmt_tOracleOutput_11.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_11.setString(1, insert_os.CODFACTURA);
}

                        if(insert_os.CODPRESTADOR == null) {
pstmt_tOracleOutput_11.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_11.setString(2, insert_os.CODPRESTADOR);
}

                        if(insert_os.TDOCUMENTO == null) {
pstmt_tOracleOutput_11.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_11.setString(3, insert_os.TDOCUMENTO);
}

                        if(insert_os.DOCUMENTO == null) {
pstmt_tOracleOutput_11.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_11.setString(4, insert_os.DOCUMENTO);
}

                        if(insert_os.CODAUTORIZACION == null) {
pstmt_tOracleOutput_11.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_11.setString(5, insert_os.CODAUTORIZACION);
}

                        pstmt_tOracleOutput_11.setBigDecimal(6, insert_os.TSERVICIO);

                        if(insert_os.CODSERVICIO == null) {
pstmt_tOracleOutput_11.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_11.setString(7, insert_os.CODSERVICIO);
}

                        if(insert_os.NOMBRE_SERVICIO == null) {
pstmt_tOracleOutput_11.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_11.setString(8, insert_os.NOMBRE_SERVICIO);
}

                        pstmt_tOracleOutput_11.setBigDecimal(9, insert_os.CANTIDAD);

                        pstmt_tOracleOutput_11.setBigDecimal(10, insert_os.VALOR_UNITARIO);

                        pstmt_tOracleOutput_11.setBigDecimal(11, insert_os.VALOR_TOTAL);

                        if(insert_os.TRIPS == null) {
pstmt_tOracleOutput_11.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_11.setString(12, insert_os.TRIPS);
}

                        if(insert_os.PERIODO == null) {
pstmt_tOracleOutput_11.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_11.setString(13, insert_os.PERIODO);
}

                        if(insert_os.FECHA != null) {
pstmt_tOracleOutput_11.setObject(14, new java.sql.Timestamp(insert_os.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_11.setNull(14, java.sql.Types.DATE);
}

                        pstmt_tOracleOutput_11.setBigDecimal(15, insert_os.PROCESOASISTENCIAL_ID);

                        pstmt_tOracleOutput_11.setBigDecimal(16, insert_os.PERSONAS_ID);

                        pstmt_tOracleOutput_11.setBigDecimal(17, insert_os.UORG_ID);

                        pstmt_tOracleOutput_11.setBigDecimal(18, insert_os.EDAD);

                        if(insert_os.UMEDIDA_EDAD == null) {
pstmt_tOracleOutput_11.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_11.setString(19, insert_os.UMEDIDA_EDAD);
}

                pstmt_tOracleOutput_11.addBatch();
                nb_line_tOracleOutput_11++;
                batchSizeCounter_tOracleOutput_11++;
            if (batchSize_tOracleOutput_11 > 0 &&  batchSize_tOracleOutput_11 <= batchSizeCounter_tOracleOutput_11) {
                try {
                    pstmt_tOracleOutput_11.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_11){
globalMap.put("tOracleOutput_11_ERROR_MESSAGE",e_tOracleOutput_11.getMessage());
			        java.sql.SQLException ne_tOracleOutput_11 = e_tOracleOutput_11.getNextException(),sqle_tOracleOutput_11=null;
			    	String errormessage_tOracleOutput_11;
					if (ne_tOracleOutput_11 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_11 = new java.sql.SQLException(e_tOracleOutput_11.getMessage() + "\ncaused by: " + ne_tOracleOutput_11.getMessage(), ne_tOracleOutput_11.getSQLState(), ne_tOracleOutput_11.getErrorCode(), ne_tOracleOutput_11);
						errormessage_tOracleOutput_11 = sqle_tOracleOutput_11.getMessage();
					}else{
						errormessage_tOracleOutput_11 = e_tOracleOutput_11.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_11);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_11 = pstmt_tOracleOutput_11.getUpdateCount();
                    insertedCount_tOracleOutput_11
                += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                rowsToCommitCount_tOracleOutput_11 += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                batchSizeCounter_tOracleOutput_11 = 0;
            }
                commitCounter_tOracleOutput_11++;
                if(commitEvery_tOracleOutput_11 <= commitCounter_tOracleOutput_11) {
                    if(batchSizeCounter_tOracleOutput_11 > 0) {
                        try {
                            pstmt_tOracleOutput_11.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_11){
globalMap.put("tOracleOutput_11_ERROR_MESSAGE",e_tOracleOutput_11.getMessage());
					        java.sql.SQLException ne_tOracleOutput_11 = e_tOracleOutput_11.getNextException(),sqle_tOracleOutput_11=null;
					    	String errormessage_tOracleOutput_11;
							if (ne_tOracleOutput_11 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_11 = new java.sql.SQLException(e_tOracleOutput_11.getMessage() + "\ncaused by: " + ne_tOracleOutput_11.getMessage(), ne_tOracleOutput_11.getSQLState(), ne_tOracleOutput_11.getErrorCode(), ne_tOracleOutput_11);
								errormessage_tOracleOutput_11 = sqle_tOracleOutput_11.getMessage();
							}else{
								errormessage_tOracleOutput_11 = e_tOracleOutput_11.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_11);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_11 = pstmt_tOracleOutput_11.getUpdateCount();
                            insertedCount_tOracleOutput_11
                        += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                        rowsToCommitCount_tOracleOutput_11 += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_11 != 0){
                    	
                    }
                    conn_tOracleOutput_11.commit();
                    if(rowsToCommitCount_tOracleOutput_11 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_11 = 0;
                    }
                    commitCounter_tOracleOutput_11=0;
                    	batchSizeCounter_tOracleOutput_11=0;
                }

 


	tos_count_tOracleOutput_11++;

/**
 * [tOracleOutput_11 main ] stop
 */
	
	/**
	 * [tOracleOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	

 



/**
 * [tOracleOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	

 



/**
 * [tOracleOutput_11 process_data_end ] stop
 */

} // End of branch "insert_os"




	
	/**
	 * [tMap_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	

 



/**
 * [tMap_13 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tOracleOutput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_11 > 0) {
            try {
            	if (pstmt_tOracleOutput_11 != null) {
					
					pstmt_tOracleOutput_11.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_11){
globalMap.put("tOracleOutput_11_ERROR_MESSAGE",e_tOracleOutput_11.getMessage());
		        java.sql.SQLException ne_tOracleOutput_11 = e_tOracleOutput_11.getNextException(),sqle_tOracleOutput_11=null;
		    	String errormessage_tOracleOutput_11;
				if (ne_tOracleOutput_11 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_11 = new java.sql.SQLException(e_tOracleOutput_11.getMessage() + "\ncaused by: " + ne_tOracleOutput_11.getMessage(), ne_tOracleOutput_11.getSQLState(), ne_tOracleOutput_11.getErrorCode(), ne_tOracleOutput_11);
					errormessage_tOracleOutput_11 = sqle_tOracleOutput_11.getMessage();
				}else{
					errormessage_tOracleOutput_11 = e_tOracleOutput_11.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_11);
            	
        	}
        	if (pstmt_tOracleOutput_11 != null) {
            	tmp_batchUpdateCount_tOracleOutput_11 = pstmt_tOracleOutput_11.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_11
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
				rowsToCommitCount_tOracleOutput_11 += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
            }
        }
        if(pstmt_tOracleOutput_11 != null) {
			
				pstmt_tOracleOutput_11.close();
				resourceMap.remove("pstmt_tOracleOutput_11");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_11", true);
		if(commitCounter_tOracleOutput_11 > 0 && rowsToCommitCount_tOracleOutput_11 != 0) {
			
		}
		conn_tOracleOutput_11.commit();
		if(commitCounter_tOracleOutput_11 > 0 && rowsToCommitCount_tOracleOutput_11 != 0) {
			
			rowsToCommitCount_tOracleOutput_11 = 0;
		}
		commitCounter_tOracleOutput_11 = 0;
		
		
		conn_tOracleOutput_11 .close();
		
		resourceMap.put("finish_tOracleOutput_11", true);
   	

	
	nb_line_deleted_tOracleOutput_11=nb_line_deleted_tOracleOutput_11+ deletedCount_tOracleOutput_11;
	nb_line_update_tOracleOutput_11=nb_line_update_tOracleOutput_11 + updatedCount_tOracleOutput_11;
	nb_line_inserted_tOracleOutput_11=nb_line_inserted_tOracleOutput_11 + insertedCount_tOracleOutput_11;
	nb_line_rejected_tOracleOutput_11=nb_line_rejected_tOracleOutput_11 + rejectedCount_tOracleOutput_11;
	
        globalMap.put("tOracleOutput_11_NB_LINE",nb_line_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_UPDATED",nb_line_update_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_11);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_os");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_11", true);
end_Hash.put("tOracleOutput_11", System.currentTimeMillis());




/**
 * [tOracleOutput_11 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tJava_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tOracleOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_11") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_11 = null;
                if ((pstmtToClose_tOracleOutput_11 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_11")) != null) {
                    pstmtToClose_tOracleOutput_11.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_11") == null){
            java.sql.Connection ctn_tOracleOutput_11 = null;
            if((ctn_tOracleOutput_11 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_11")) != null){
                try {
                    ctn_tOracleOutput_11.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_11) {
                    String errorMessage_tOracleOutput_11 = "failed to close the connection in tOracleOutput_11 :" + sqlEx_tOracleOutput_11.getMessage();
                    System.err.println(errorMessage_tOracleOutput_11);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_11 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


/*System.out.println("ReturnValueExampleChildJob_NB_LINE=" + ((BigDecimal) ((java.util.Map) globalMap.get("sharedMap")).get("ReturnValueExampleChildJob_NB_LINE")));

*/

context.CODARCHIVO = "AH";
System.out.println("        - Hospitalizacion: " + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );

/*context.ARCONTROL_ID = (BigDecimal) ((java.util.Map) globalMap.get("sharedMap")).get("ReturnValueAC_ID");
System.out.println("ARCONTROL_ID AH : " + context.ARCONTROL_ID );*/
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk20", 0, "ok");
				}
				tOracleInput_3Process(globalMap);



/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class insert_hStruct implements routines.system.IPersistableRow<insert_hStruct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String CODFACTURA;

				public String getCODFACTURA () {
					return this.CODFACTURA;
				}

				public Boolean CODFACTURAIsNullable(){
				    return true;
				}
				public Boolean CODFACTURAIsKey(){
				    return false;
				}
				public Integer CODFACTURALength(){
				    return 100;
				}
				public Integer CODFACTURAPrecision(){
				    return 0;
				}
				public String CODFACTURADefault(){
				
					return null;
				
				}
				public String CODFACTURAComment(){
				
				    return "N\u00FAmero de la factura";
				
				}
				public String CODFACTURAPattern(){
				
					return "";
				
				}
				public String CODFACTURAOriginalDbColumnName(){
				
					return "CODFACTURA";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return 100;
				}
				public Integer CODPRESTADORPrecision(){
				    return 0;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "C\u00F3digo del prestador de servicios de salud";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 50;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "Tipo de identificaci\u00F3n del usuario";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "N\u00FAmero de identificaci\u00F3n del usuario en el Sistema";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal VIA_INGRESO;

				public BigDecimal getVIA_INGRESO () {
					return this.VIA_INGRESO;
				}

				public Boolean VIA_INGRESOIsNullable(){
				    return true;
				}
				public Boolean VIA_INGRESOIsKey(){
				    return false;
				}
				public Integer VIA_INGRESOLength(){
				    return 0;
				}
				public Integer VIA_INGRESOPrecision(){
				    return null;
				}
				public String VIA_INGRESODefault(){
				
					return null;
				
				}
				public String VIA_INGRESOComment(){
				
				    return "V\u00EDa de ingreso a la instituci\u00F3n";
				
				}
				public String VIA_INGRESOPattern(){
				
					return "";
				
				}
				public String VIA_INGRESOOriginalDbColumnName(){
				
					return "VIA_INGRESO";
				
				}

				
			    public java.util.Date FECHA_INGRESO;

				public java.util.Date getFECHA_INGRESO () {
					return this.FECHA_INGRESO;
				}

				public Boolean FECHA_INGRESOIsNullable(){
				    return true;
				}
				public Boolean FECHA_INGRESOIsKey(){
				    return false;
				}
				public Integer FECHA_INGRESOLength(){
				    return 7;
				}
				public Integer FECHA_INGRESOPrecision(){
				    return 0;
				}
				public String FECHA_INGRESODefault(){
				
					return null;
				
				}
				public String FECHA_INGRESOComment(){
				
				    return "Fecha de ingreso del usuario a la instituci\u00F3n";
				
				}
				public String FECHA_INGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_INGRESOOriginalDbColumnName(){
				
					return "FECHA_INGRESO";
				
				}

				
			    public java.util.Date HORA_INGRESO;

				public java.util.Date getHORA_INGRESO () {
					return this.HORA_INGRESO;
				}

				public Boolean HORA_INGRESOIsNullable(){
				    return true;
				}
				public Boolean HORA_INGRESOIsKey(){
				    return false;
				}
				public Integer HORA_INGRESOLength(){
				    return 7;
				}
				public Integer HORA_INGRESOPrecision(){
				    return 0;
				}
				public String HORA_INGRESODefault(){
				
					return null;
				
				}
				public String HORA_INGRESOComment(){
				
				    return "Hora de ingreso del usuario a la instituci\u00F3n";
				
				}
				public String HORA_INGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HORA_INGRESOOriginalDbColumnName(){
				
					return "HORA_INGRESO";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return 250;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "N\u00FAmero de autorizaci\u00F3n";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public BigDecimal FINALIDAD;

				public BigDecimal getFINALIDAD () {
					return this.FINALIDAD;
				}

				public Boolean FINALIDADIsNullable(){
				    return true;
				}
				public Boolean FINALIDADIsKey(){
				    return false;
				}
				public Integer FINALIDADLength(){
				    return 0;
				}
				public Integer FINALIDADPrecision(){
				    return null;
				}
				public String FINALIDADDefault(){
				
					return "";
				
				}
				public String FINALIDADComment(){
				
				    return "";
				
				}
				public String FINALIDADPattern(){
				
					return "";
				
				}
				public String FINALIDADOriginalDbColumnName(){
				
					return "FINALIDAD";
				
				}

				
			    public BigDecimal CAUSA_EXTERNA;

				public BigDecimal getCAUSA_EXTERNA () {
					return this.CAUSA_EXTERNA;
				}

				public Boolean CAUSA_EXTERNAIsNullable(){
				    return true;
				}
				public Boolean CAUSA_EXTERNAIsKey(){
				    return false;
				}
				public Integer CAUSA_EXTERNALength(){
				    return 0;
				}
				public Integer CAUSA_EXTERNAPrecision(){
				    return null;
				}
				public String CAUSA_EXTERNADefault(){
				
					return null;
				
				}
				public String CAUSA_EXTERNAComment(){
				
				    return "Causa externa";
				
				}
				public String CAUSA_EXTERNAPattern(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAOriginalDbColumnName(){
				
					return "CAUSA_EXTERNA";
				
				}

				
			    public String CODDIAGPPAL_INGRESO;

				public String getCODDIAGPPAL_INGRESO () {
					return this.CODDIAGPPAL_INGRESO;
				}

				public Boolean CODDIAGPPAL_INGRESOIsNullable(){
				    return true;
				}
				public Boolean CODDIAGPPAL_INGRESOIsKey(){
				    return false;
				}
				public Integer CODDIAGPPAL_INGRESOLength(){
				    return 10;
				}
				public Integer CODDIAGPPAL_INGRESOPrecision(){
				    return 0;
				}
				public String CODDIAGPPAL_INGRESODefault(){
				
					return null;
				
				}
				public String CODDIAGPPAL_INGRESOComment(){
				
				    return "C\u00F3digo Diagn\u00F3stico principal de ingreso";
				
				}
				public String CODDIAGPPAL_INGRESOPattern(){
				
					return "";
				
				}
				public String CODDIAGPPAL_INGRESOOriginalDbColumnName(){
				
					return "CODDIAGPPAL_INGRESO";
				
				}

				
			    public String CODDIAGPPAL_EGRESO;

				public String getCODDIAGPPAL_EGRESO () {
					return this.CODDIAGPPAL_EGRESO;
				}

				public Boolean CODDIAGPPAL_EGRESOIsNullable(){
				    return true;
				}
				public Boolean CODDIAGPPAL_EGRESOIsKey(){
				    return false;
				}
				public Integer CODDIAGPPAL_EGRESOLength(){
				    return 10;
				}
				public Integer CODDIAGPPAL_EGRESOPrecision(){
				    return 0;
				}
				public String CODDIAGPPAL_EGRESODefault(){
				
					return null;
				
				}
				public String CODDIAGPPAL_EGRESOComment(){
				
				    return "C\u00F3digo Diagn\u00F3stico principal de egreso";
				
				}
				public String CODDIAGPPAL_EGRESOPattern(){
				
					return "";
				
				}
				public String CODDIAGPPAL_EGRESOOriginalDbColumnName(){
				
					return "CODDIAGPPAL_EGRESO";
				
				}

				
			    public String CODDIAGNOSTICO1;

				public String getCODDIAGNOSTICO1 () {
					return this.CODDIAGNOSTICO1;
				}

				public Boolean CODDIAGNOSTICO1IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO1IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO1Length(){
				    return 10;
				}
				public Integer CODDIAGNOSTICO1Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO1Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO1Comment(){
				
				    return "Diagn\u00F3stico relacionado Nro. 1 de egreso";
				
				}
				public String CODDIAGNOSTICO1Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO1OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO1";
				
				}

				
			    public String CODDIAGNOSTICO2;

				public String getCODDIAGNOSTICO2 () {
					return this.CODDIAGNOSTICO2;
				}

				public Boolean CODDIAGNOSTICO2IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO2IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO2Length(){
				    return 10;
				}
				public Integer CODDIAGNOSTICO2Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO2Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO2Comment(){
				
				    return "Diagn\u00F3stico relacionado Nro. 2 de egreso";
				
				}
				public String CODDIAGNOSTICO2Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO2OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO2";
				
				}

				
			    public String CODDIAGNOSTICO3;

				public String getCODDIAGNOSTICO3 () {
					return this.CODDIAGNOSTICO3;
				}

				public Boolean CODDIAGNOSTICO3IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO3IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO3Length(){
				    return 10;
				}
				public Integer CODDIAGNOSTICO3Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO3Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO3Comment(){
				
				    return "Diagn\u00F3stico relacionado Nro. 3 de egreso";
				
				}
				public String CODDIAGNOSTICO3Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO3OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO3";
				
				}

				
			    public String CODDIAG_COMPL;

				public String getCODDIAG_COMPL () {
					return this.CODDIAG_COMPL;
				}

				public Boolean CODDIAG_COMPLIsNullable(){
				    return true;
				}
				public Boolean CODDIAG_COMPLIsKey(){
				    return false;
				}
				public Integer CODDIAG_COMPLLength(){
				    return 10;
				}
				public Integer CODDIAG_COMPLPrecision(){
				    return 0;
				}
				public String CODDIAG_COMPLDefault(){
				
					return null;
				
				}
				public String CODDIAG_COMPLComment(){
				
				    return "Diagn\u00F3stico de complicaci\u00F3n";
				
				}
				public String CODDIAG_COMPLPattern(){
				
					return "";
				
				}
				public String CODDIAG_COMPLOriginalDbColumnName(){
				
					return "CODDIAG_COMPL";
				
				}

				
			    public String ESTADO_SALIDA;

				public String getESTADO_SALIDA () {
					return this.ESTADO_SALIDA;
				}

				public Boolean ESTADO_SALIDAIsNullable(){
				    return true;
				}
				public Boolean ESTADO_SALIDAIsKey(){
				    return false;
				}
				public Integer ESTADO_SALIDALength(){
				    return 100;
				}
				public Integer ESTADO_SALIDAPrecision(){
				    return 0;
				}
				public String ESTADO_SALIDADefault(){
				
					return null;
				
				}
				public String ESTADO_SALIDAComment(){
				
				    return "Estado a la salida";
				
				}
				public String ESTADO_SALIDAPattern(){
				
					return "";
				
				}
				public String ESTADO_SALIDAOriginalDbColumnName(){
				
					return "ESTADO_SALIDA";
				
				}

				
			    public String CAUSA_MUERTE;

				public String getCAUSA_MUERTE () {
					return this.CAUSA_MUERTE;
				}

				public Boolean CAUSA_MUERTEIsNullable(){
				    return true;
				}
				public Boolean CAUSA_MUERTEIsKey(){
				    return false;
				}
				public Integer CAUSA_MUERTELength(){
				    return 100;
				}
				public Integer CAUSA_MUERTEPrecision(){
				    return 0;
				}
				public String CAUSA_MUERTEDefault(){
				
					return null;
				
				}
				public String CAUSA_MUERTEComment(){
				
				    return "Causa de la muerte";
				
				}
				public String CAUSA_MUERTEPattern(){
				
					return "";
				
				}
				public String CAUSA_MUERTEOriginalDbColumnName(){
				
					return "CAUSA_MUERTE";
				
				}

				
			    public java.util.Date FECHA_EGRESO;

				public java.util.Date getFECHA_EGRESO () {
					return this.FECHA_EGRESO;
				}

				public Boolean FECHA_EGRESOIsNullable(){
				    return true;
				}
				public Boolean FECHA_EGRESOIsKey(){
				    return false;
				}
				public Integer FECHA_EGRESOLength(){
				    return 7;
				}
				public Integer FECHA_EGRESOPrecision(){
				    return 0;
				}
				public String FECHA_EGRESODefault(){
				
					return null;
				
				}
				public String FECHA_EGRESOComment(){
				
				    return "Fecha de egreso";
				
				}
				public String FECHA_EGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_EGRESOOriginalDbColumnName(){
				
					return "FECHA_EGRESO";
				
				}

				
			    public java.util.Date HORA_EGRESO;

				public java.util.Date getHORA_EGRESO () {
					return this.HORA_EGRESO;
				}

				public Boolean HORA_EGRESOIsNullable(){
				    return true;
				}
				public Boolean HORA_EGRESOIsKey(){
				    return false;
				}
				public Integer HORA_EGRESOLength(){
				    return 7;
				}
				public Integer HORA_EGRESOPrecision(){
				    return 0;
				}
				public String HORA_EGRESODefault(){
				
					return null;
				
				}
				public String HORA_EGRESOComment(){
				
				    return "Hora de egreso";
				
				}
				public String HORA_EGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HORA_EGRESOOriginalDbColumnName(){
				
					return "HORA_EGRESO";
				
				}

				
			    public BigDecimal VPAGAR;

				public BigDecimal getVPAGAR () {
					return this.VPAGAR;
				}

				public Boolean VPAGARIsNullable(){
				    return true;
				}
				public Boolean VPAGARIsKey(){
				    return false;
				}
				public Integer VPAGARLength(){
				    return 0;
				}
				public Integer VPAGARPrecision(){
				    return null;
				}
				public String VPAGARDefault(){
				
					return null;
				
				}
				public String VPAGARComment(){
				
				    return "Valor a pagar";
				
				}
				public String VPAGARPattern(){
				
					return "";
				
				}
				public String VPAGAROriginalDbColumnName(){
				
					return "VPAGAR";
				
				}

				
			    public String TRIPS;

				public String getTRIPS () {
					return this.TRIPS;
				}

				public Boolean TRIPSIsNullable(){
				    return true;
				}
				public Boolean TRIPSIsKey(){
				    return false;
				}
				public Integer TRIPSLength(){
				    return 10;
				}
				public Integer TRIPSPrecision(){
				    return 0;
				}
				public String TRIPSDefault(){
				
					return null;
				
				}
				public String TRIPSComment(){
				
				    return "";
				
				}
				public String TRIPSPattern(){
				
					return "";
				
				}
				public String TRIPSOriginalDbColumnName(){
				
					return "TRIPS";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 7;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "FK - BGEN_PERSONAS";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "UORG de atenci\u00F3n";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return null;
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "Id de la fuerza del ESM de atencion";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "Sigla del tipo de documento del profesional asistencial que atiende";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "N\u00FAmero de identificacion del profesional asistencial que atiende";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "Nombre de la especialidad que atiende";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String PESO;

				public String getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 10;
				}
				public Integer PESOPrecision(){
				    return 0;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "Peso del paciente al momento de la atenci\u00F3n";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return 10;
				}
				public Integer TALLAPrecision(){
				    return 0;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "Altura del paciente la momento de la atenci\u00F3n ";
				
				}
				public String TALLAPattern(){
				
					return "";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public String UMEDIDA_PESO;

				public String getUMEDIDA_PESO () {
					return this.UMEDIDA_PESO;
				}

				public Boolean UMEDIDA_PESOIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_PESOIsKey(){
				    return false;
				}
				public Integer UMEDIDA_PESOLength(){
				    return 10;
				}
				public Integer UMEDIDA_PESOPrecision(){
				    return 0;
				}
				public String UMEDIDA_PESODefault(){
				
					return null;
				
				}
				public String UMEDIDA_PESOComment(){
				
				    return "Unidad de medida del peso del paciente";
				
				}
				public String UMEDIDA_PESOPattern(){
				
					return "";
				
				}
				public String UMEDIDA_PESOOriginalDbColumnName(){
				
					return "UMEDIDA_PESO";
				
				}

				
			    public String UMEDIDA_TALLA;

				public String getUMEDIDA_TALLA () {
					return this.UMEDIDA_TALLA;
				}

				public Boolean UMEDIDA_TALLAIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_TALLAIsKey(){
				    return false;
				}
				public Integer UMEDIDA_TALLALength(){
				    return 10;
				}
				public Integer UMEDIDA_TALLAPrecision(){
				    return 0;
				}
				public String UMEDIDA_TALLADefault(){
				
					return null;
				
				}
				public String UMEDIDA_TALLAComment(){
				
				    return "Unidad de medida de la talla del paciente";
				
				}
				public String UMEDIDA_TALLAPattern(){
				
					return "";
				
				}
				public String UMEDIDA_TALLAOriginalDbColumnName(){
				
					return "UMEDIDA_TALLA";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 100;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "Tipo de afiliado ( No cotizante, cotizante pensionado o retirado, cotizante activo, beneficiario)";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return 10;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return 0;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "Forma en que se almaceno ( Cargue, Automatico)";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public BigDecimal DIAS_ESTANCIA;

				public BigDecimal getDIAS_ESTANCIA () {
					return this.DIAS_ESTANCIA;
				}

				public Boolean DIAS_ESTANCIAIsNullable(){
				    return true;
				}
				public Boolean DIAS_ESTANCIAIsKey(){
				    return false;
				}
				public Integer DIAS_ESTANCIALength(){
				    return 0;
				}
				public Integer DIAS_ESTANCIAPrecision(){
				    return null;
				}
				public String DIAS_ESTANCIADefault(){
				
					return null;
				
				}
				public String DIAS_ESTANCIAComment(){
				
				    return "N\u00FAmero de dias en la estancia";
				
				}
				public String DIAS_ESTANCIAPattern(){
				
					return "";
				
				}
				public String DIAS_ESTANCIAOriginalDbColumnName(){
				
					return "DIAS_ESTANCIA";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "EDAD SIMPLE DE LA PERSONA AL MOMENTO DE LA ATENCI\u00D3N";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 10;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "Unidad de medida de la edad simple (A\u00F1os, Meses)";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public String CUPS;

				public String getCUPS () {
					return this.CUPS;
				}

				public Boolean CUPSIsNullable(){
				    return true;
				}
				public Boolean CUPSIsKey(){
				    return false;
				}
				public Integer CUPSLength(){
				    return 20;
				}
				public Integer CUPSPrecision(){
				    return 0;
				}
				public String CUPSDefault(){
				
					return null;
				
				}
				public String CUPSComment(){
				
				    return "C\u00F3digo CUPS de la valoracion";
				
				}
				public String CUPSPattern(){
				
					return "";
				
				}
				public String CUPSOriginalDbColumnName(){
				
					return "CUPS";
				
				}

				
			    public BigDecimal ADMISION_ID;

				public BigDecimal getADMISION_ID () {
					return this.ADMISION_ID;
				}

				public Boolean ADMISION_IDIsNullable(){
				    return true;
				}
				public Boolean ADMISION_IDIsKey(){
				    return false;
				}
				public Integer ADMISION_IDLength(){
				    return 0;
				}
				public Integer ADMISION_IDPrecision(){
				    return null;
				}
				public String ADMISION_IDDefault(){
				
					return null;
				
				}
				public String ADMISION_IDComment(){
				
				    return "ID de la admisi\u00F3n";
				
				}
				public String ADMISION_IDPattern(){
				
					return "";
				
				}
				public String ADMISION_IDOriginalDbColumnName(){
				
					return "ADMISION_ID";
				
				}

				
			    public BigDecimal TDIAGNOSTICO;

				public BigDecimal getTDIAGNOSTICO () {
					return this.TDIAGNOSTICO;
				}

				public Boolean TDIAGNOSTICOIsNullable(){
				    return true;
				}
				public Boolean TDIAGNOSTICOIsKey(){
				    return false;
				}
				public Integer TDIAGNOSTICOLength(){
				    return 0;
				}
				public Integer TDIAGNOSTICOPrecision(){
				    return null;
				}
				public String TDIAGNOSTICODefault(){
				
					return null;
				
				}
				public String TDIAGNOSTICOComment(){
				
				    return "Tipo de diagnotico de ingreso FK -";
				
				}
				public String TDIAGNOSTICOPattern(){
				
					return "";
				
				}
				public String TDIAGNOSTICOOriginalDbColumnName(){
				
					return "TDIAGNOSTICO";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 0;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return null;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 100;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return 0;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return null;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.VIA_INGRESO = (BigDecimal) dis.readObject();
					
					this.FECHA_INGRESO = readDate(dis);
					
					this.HORA_INGRESO = readDate(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
						this.FINALIDAD = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.CODDIAGPPAL_INGRESO = readString(dis);
					
					this.CODDIAGPPAL_EGRESO = readString(dis);
					
					this.CODDIAGNOSTICO1 = readString(dis);
					
					this.CODDIAGNOSTICO2 = readString(dis);
					
					this.CODDIAGNOSTICO3 = readString(dis);
					
					this.CODDIAG_COMPL = readString(dis);
					
					this.ESTADO_SALIDA = readString(dis);
					
					this.CAUSA_MUERTE = readString(dis);
					
					this.FECHA_EGRESO = readDate(dis);
					
					this.HORA_EGRESO = readDate(dis);
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
					this.TRIPS = readString(dis);
					
					this.PERIODO = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_PESO = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
						this.DIAS_ESTANCIA = (BigDecimal) dis.readObject();
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.TDIAGNOSTICO = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.VIA_INGRESO = (BigDecimal) dis.readObject();
					
					this.FECHA_INGRESO = readDate(dis);
					
					this.HORA_INGRESO = readDate(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
						this.FINALIDAD = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.CODDIAGPPAL_INGRESO = readString(dis);
					
					this.CODDIAGPPAL_EGRESO = readString(dis);
					
					this.CODDIAGNOSTICO1 = readString(dis);
					
					this.CODDIAGNOSTICO2 = readString(dis);
					
					this.CODDIAGNOSTICO3 = readString(dis);
					
					this.CODDIAG_COMPL = readString(dis);
					
					this.ESTADO_SALIDA = readString(dis);
					
					this.CAUSA_MUERTE = readString(dis);
					
					this.FECHA_EGRESO = readDate(dis);
					
					this.HORA_EGRESO = readDate(dis);
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
					this.TRIPS = readString(dis);
					
					this.PERIODO = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_PESO = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
						this.DIAS_ESTANCIA = (BigDecimal) dis.readObject();
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.TDIAGNOSTICO = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VIA_INGRESO);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_INGRESO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FINALIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.CODDIAGPPAL_INGRESO,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL_EGRESO,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO1,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO2,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO3,dos);
					
					// String
				
						writeString(this.CODDIAG_COMPL,dos);
					
					// String
				
						writeString(this.ESTADO_SALIDA,dos);
					
					// String
				
						writeString(this.CAUSA_MUERTE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EGRESO,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_EGRESO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPAGAR);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_PESO,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAS_ESTANCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDIAGNOSTICO);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VIA_INGRESO);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_INGRESO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FINALIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.CODDIAGPPAL_INGRESO,dos);
					
					// String
				
						writeString(this.CODDIAGPPAL_EGRESO,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO1,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO2,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO3,dos);
					
					// String
				
						writeString(this.CODDIAG_COMPL,dos);
					
					// String
				
						writeString(this.ESTADO_SALIDA,dos);
					
					// String
				
						writeString(this.CAUSA_MUERTE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EGRESO,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_EGRESO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPAGAR);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_PESO,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAS_ESTANCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDIAGNOSTICO);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODFACTURA="+CODFACTURA);
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",VIA_INGRESO="+String.valueOf(VIA_INGRESO));
		sb.append(",FECHA_INGRESO="+String.valueOf(FECHA_INGRESO));
		sb.append(",HORA_INGRESO="+String.valueOf(HORA_INGRESO));
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",FINALIDAD="+String.valueOf(FINALIDAD));
		sb.append(",CAUSA_EXTERNA="+String.valueOf(CAUSA_EXTERNA));
		sb.append(",CODDIAGPPAL_INGRESO="+CODDIAGPPAL_INGRESO);
		sb.append(",CODDIAGPPAL_EGRESO="+CODDIAGPPAL_EGRESO);
		sb.append(",CODDIAGNOSTICO1="+CODDIAGNOSTICO1);
		sb.append(",CODDIAGNOSTICO2="+CODDIAGNOSTICO2);
		sb.append(",CODDIAGNOSTICO3="+CODDIAGNOSTICO3);
		sb.append(",CODDIAG_COMPL="+CODDIAG_COMPL);
		sb.append(",ESTADO_SALIDA="+ESTADO_SALIDA);
		sb.append(",CAUSA_MUERTE="+CAUSA_MUERTE);
		sb.append(",FECHA_EGRESO="+String.valueOf(FECHA_EGRESO));
		sb.append(",HORA_EGRESO="+String.valueOf(HORA_EGRESO));
		sb.append(",VPAGAR="+String.valueOf(VPAGAR));
		sb.append(",TRIPS="+TRIPS);
		sb.append(",PERIODO="+PERIODO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",PESO="+PESO);
		sb.append(",TALLA="+TALLA);
		sb.append(",UMEDIDA_PESO="+UMEDIDA_PESO);
		sb.append(",UMEDIDA_TALLA="+UMEDIDA_TALLA);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",DIAS_ESTANCIA="+String.valueOf(DIAS_ESTANCIA));
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",CUPS="+CUPS);
		sb.append(",ADMISION_ID="+String.valueOf(ADMISION_ID));
		sb.append(",TDIAGNOSTICO="+String.valueOf(TDIAGNOSTICO));
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_hStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return false;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return 0;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return null;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public String FACTURA;

				public String getFACTURA () {
					return this.FACTURA;
				}

				public Boolean FACTURAIsNullable(){
				    return true;
				}
				public Boolean FACTURAIsKey(){
				    return false;
				}
				public Integer FACTURALength(){
				    return 0;
				}
				public Integer FACTURAPrecision(){
				    return 0;
				}
				public String FACTURADefault(){
				
					return null;
				
				}
				public String FACTURAComment(){
				
				    return "";
				
				}
				public String FACTURAPattern(){
				
					return "";
				
				}
				public String FACTURAOriginalDbColumnName(){
				
					return "FACTURA";
				
				}

				
			    public String CODIGO_PRESTADOR;

				public String getCODIGO_PRESTADOR () {
					return this.CODIGO_PRESTADOR;
				}

				public Boolean CODIGO_PRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODIGO_PRESTADORIsKey(){
				    return false;
				}
				public Integer CODIGO_PRESTADORLength(){
				    return 100;
				}
				public Integer CODIGO_PRESTADORPrecision(){
				    return 0;
				}
				public String CODIGO_PRESTADORDefault(){
				
					return null;
				
				}
				public String CODIGO_PRESTADORComment(){
				
				    return "";
				
				}
				public String CODIGO_PRESTADORPattern(){
				
					return "";
				
				}
				public String CODIGO_PRESTADOROriginalDbColumnName(){
				
					return "CODIGO_PRESTADOR";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 5;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TIPO_ADM;

				public BigDecimal getTIPO_ADM () {
					return this.TIPO_ADM;
				}

				public Boolean TIPO_ADMIsNullable(){
				    return true;
				}
				public Boolean TIPO_ADMIsKey(){
				    return false;
				}
				public Integer TIPO_ADMLength(){
				    return 0;
				}
				public Integer TIPO_ADMPrecision(){
				    return 0;
				}
				public String TIPO_ADMDefault(){
				
					return "";
				
				}
				public String TIPO_ADMComment(){
				
				    return "";
				
				}
				public String TIPO_ADMPattern(){
				
					return "";
				
				}
				public String TIPO_ADMOriginalDbColumnName(){
				
					return "TIPO_ADM";
				
				}

				
			    public java.util.Date FECHA_INGRESO;

				public java.util.Date getFECHA_INGRESO () {
					return this.FECHA_INGRESO;
				}

				public Boolean FECHA_INGRESOIsNullable(){
				    return false;
				}
				public Boolean FECHA_INGRESOIsKey(){
				    return false;
				}
				public Integer FECHA_INGRESOLength(){
				    return 0;
				}
				public Integer FECHA_INGRESOPrecision(){
				    return 0;
				}
				public String FECHA_INGRESODefault(){
				
					return null;
				
				}
				public String FECHA_INGRESOComment(){
				
				    return "";
				
				}
				public String FECHA_INGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_INGRESOOriginalDbColumnName(){
				
					return "FECHA_INGRESO";
				
				}

				
			    public java.util.Date HORA_INGRESO;

				public java.util.Date getHORA_INGRESO () {
					return this.HORA_INGRESO;
				}

				public Boolean HORA_INGRESOIsNullable(){
				    return true;
				}
				public Boolean HORA_INGRESOIsKey(){
				    return false;
				}
				public Integer HORA_INGRESOLength(){
				    return 0;
				}
				public Integer HORA_INGRESOPrecision(){
				    return 0;
				}
				public String HORA_INGRESODefault(){
				
					return null;
				
				}
				public String HORA_INGRESOComment(){
				
				    return "";
				
				}
				public String HORA_INGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HORA_INGRESOOriginalDbColumnName(){
				
					return "HORA_INGRESO";
				
				}

				
			    public String NUMERO_AUTORIZACION;

				public String getNUMERO_AUTORIZACION () {
					return this.NUMERO_AUTORIZACION;
				}

				public Boolean NUMERO_AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean NUMERO_AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer NUMERO_AUTORIZACIONLength(){
				    return 250;
				}
				public Integer NUMERO_AUTORIZACIONPrecision(){
				    return 0;
				}
				public String NUMERO_AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String NUMERO_AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String NUMERO_AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String NUMERO_AUTORIZACIONOriginalDbColumnName(){
				
					return "NUMERO_AUTORIZACION";
				
				}

				
			    public BigDecimal VALORACION_ID;

				public BigDecimal getVALORACION_ID () {
					return this.VALORACION_ID;
				}

				public Boolean VALORACION_IDIsNullable(){
				    return false;
				}
				public Boolean VALORACION_IDIsKey(){
				    return false;
				}
				public Integer VALORACION_IDLength(){
				    return 0;
				}
				public Integer VALORACION_IDPrecision(){
				    return null;
				}
				public String VALORACION_IDDefault(){
				
					return "";
				
				}
				public String VALORACION_IDComment(){
				
				    return "";
				
				}
				public String VALORACION_IDPattern(){
				
					return "";
				
				}
				public String VALORACION_IDOriginalDbColumnName(){
				
					return "VALORACION_ID";
				
				}

				
			    public BigDecimal FINALIDAD_CONSULTA;

				public BigDecimal getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return 0;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return null;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				
			    public BigDecimal CAUSA_EXTERNA;

				public BigDecimal getCAUSA_EXTERNA () {
					return this.CAUSA_EXTERNA;
				}

				public Boolean CAUSA_EXTERNAIsNullable(){
				    return true;
				}
				public Boolean CAUSA_EXTERNAIsKey(){
				    return false;
				}
				public Integer CAUSA_EXTERNALength(){
				    return 0;
				}
				public Integer CAUSA_EXTERNAPrecision(){
				    return 0;
				}
				public String CAUSA_EXTERNADefault(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAComment(){
				
				    return "";
				
				}
				public String CAUSA_EXTERNAPattern(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAOriginalDbColumnName(){
				
					return "CAUSA_EXTERNA";
				
				}

				
			    public String DIAG_PRINCIPAL_INGRESO;

				public String getDIAG_PRINCIPAL_INGRESO () {
					return this.DIAG_PRINCIPAL_INGRESO;
				}

				public Boolean DIAG_PRINCIPAL_INGRESOIsNullable(){
				    return false;
				}
				public Boolean DIAG_PRINCIPAL_INGRESOIsKey(){
				    return false;
				}
				public Integer DIAG_PRINCIPAL_INGRESOLength(){
				    return 10;
				}
				public Integer DIAG_PRINCIPAL_INGRESOPrecision(){
				    return 0;
				}
				public String DIAG_PRINCIPAL_INGRESODefault(){
				
					return null;
				
				}
				public String DIAG_PRINCIPAL_INGRESOComment(){
				
				    return "";
				
				}
				public String DIAG_PRINCIPAL_INGRESOPattern(){
				
					return "";
				
				}
				public String DIAG_PRINCIPAL_INGRESOOriginalDbColumnName(){
				
					return "DIAG_PRINCIPAL_INGRESO";
				
				}

				
			    public String DIAG_PRINCIPAL_EGRESO;

				public String getDIAG_PRINCIPAL_EGRESO () {
					return this.DIAG_PRINCIPAL_EGRESO;
				}

				public Boolean DIAG_PRINCIPAL_EGRESOIsNullable(){
				    return false;
				}
				public Boolean DIAG_PRINCIPAL_EGRESOIsKey(){
				    return false;
				}
				public Integer DIAG_PRINCIPAL_EGRESOLength(){
				    return 10;
				}
				public Integer DIAG_PRINCIPAL_EGRESOPrecision(){
				    return 0;
				}
				public String DIAG_PRINCIPAL_EGRESODefault(){
				
					return null;
				
				}
				public String DIAG_PRINCIPAL_EGRESOComment(){
				
				    return "";
				
				}
				public String DIAG_PRINCIPAL_EGRESOPattern(){
				
					return "";
				
				}
				public String DIAG_PRINCIPAL_EGRESOOriginalDbColumnName(){
				
					return "DIAG_PRINCIPAL_EGRESO";
				
				}

				
			    public String DIAGR_1;

				public String getDIAGR_1 () {
					return this.DIAGR_1;
				}

				public Boolean DIAGR_1IsNullable(){
				    return true;
				}
				public Boolean DIAGR_1IsKey(){
				    return false;
				}
				public Integer DIAGR_1Length(){
				    return 10;
				}
				public Integer DIAGR_1Precision(){
				    return 0;
				}
				public String DIAGR_1Default(){
				
					return null;
				
				}
				public String DIAGR_1Comment(){
				
				    return "";
				
				}
				public String DIAGR_1Pattern(){
				
					return "";
				
				}
				public String DIAGR_1OriginalDbColumnName(){
				
					return "DIAGR_1";
				
				}

				
			    public String DIAGR_2;

				public String getDIAGR_2 () {
					return this.DIAGR_2;
				}

				public Boolean DIAGR_2IsNullable(){
				    return true;
				}
				public Boolean DIAGR_2IsKey(){
				    return false;
				}
				public Integer DIAGR_2Length(){
				    return 10;
				}
				public Integer DIAGR_2Precision(){
				    return 0;
				}
				public String DIAGR_2Default(){
				
					return null;
				
				}
				public String DIAGR_2Comment(){
				
				    return "";
				
				}
				public String DIAGR_2Pattern(){
				
					return "";
				
				}
				public String DIAGR_2OriginalDbColumnName(){
				
					return "DIAGR_2";
				
				}

				
			    public String DIAGR_3;

				public String getDIAGR_3 () {
					return this.DIAGR_3;
				}

				public Boolean DIAGR_3IsNullable(){
				    return true;
				}
				public Boolean DIAGR_3IsKey(){
				    return false;
				}
				public Integer DIAGR_3Length(){
				    return 10;
				}
				public Integer DIAGR_3Precision(){
				    return 0;
				}
				public String DIAGR_3Default(){
				
					return null;
				
				}
				public String DIAGR_3Comment(){
				
				    return "";
				
				}
				public String DIAGR_3Pattern(){
				
					return "";
				
				}
				public String DIAGR_3OriginalDbColumnName(){
				
					return "DIAGR_3";
				
				}

				
			    public String DIAG_COMPLICACION;

				public String getDIAG_COMPLICACION () {
					return this.DIAG_COMPLICACION;
				}

				public Boolean DIAG_COMPLICACIONIsNullable(){
				    return true;
				}
				public Boolean DIAG_COMPLICACIONIsKey(){
				    return false;
				}
				public Integer DIAG_COMPLICACIONLength(){
				    return 0;
				}
				public Integer DIAG_COMPLICACIONPrecision(){
				    return 0;
				}
				public String DIAG_COMPLICACIONDefault(){
				
					return null;
				
				}
				public String DIAG_COMPLICACIONComment(){
				
				    return "";
				
				}
				public String DIAG_COMPLICACIONPattern(){
				
					return "";
				
				}
				public String DIAG_COMPLICACIONOriginalDbColumnName(){
				
					return "DIAG_COMPLICACION";
				
				}

				
			    public String ESTADO_SALIDA;

				public String getESTADO_SALIDA () {
					return this.ESTADO_SALIDA;
				}

				public Boolean ESTADO_SALIDAIsNullable(){
				    return true;
				}
				public Boolean ESTADO_SALIDAIsKey(){
				    return false;
				}
				public Integer ESTADO_SALIDALength(){
				    return 1;
				}
				public Integer ESTADO_SALIDAPrecision(){
				    return 0;
				}
				public String ESTADO_SALIDADefault(){
				
					return null;
				
				}
				public String ESTADO_SALIDAComment(){
				
				    return "";
				
				}
				public String ESTADO_SALIDAPattern(){
				
					return "";
				
				}
				public String ESTADO_SALIDAOriginalDbColumnName(){
				
					return "ESTADO_SALIDA";
				
				}

				
			    public String DIAG_MUERTO;

				public String getDIAG_MUERTO () {
					return this.DIAG_MUERTO;
				}

				public Boolean DIAG_MUERTOIsNullable(){
				    return true;
				}
				public Boolean DIAG_MUERTOIsKey(){
				    return false;
				}
				public Integer DIAG_MUERTOLength(){
				    return 10;
				}
				public Integer DIAG_MUERTOPrecision(){
				    return 0;
				}
				public String DIAG_MUERTODefault(){
				
					return null;
				
				}
				public String DIAG_MUERTOComment(){
				
				    return "";
				
				}
				public String DIAG_MUERTOPattern(){
				
					return "";
				
				}
				public String DIAG_MUERTOOriginalDbColumnName(){
				
					return "DIAG_MUERTO";
				
				}

				
			    public java.util.Date FECHA_EGRESO;

				public java.util.Date getFECHA_EGRESO () {
					return this.FECHA_EGRESO;
				}

				public Boolean FECHA_EGRESOIsNullable(){
				    return false;
				}
				public Boolean FECHA_EGRESOIsKey(){
				    return false;
				}
				public Integer FECHA_EGRESOLength(){
				    return 0;
				}
				public Integer FECHA_EGRESOPrecision(){
				    return 0;
				}
				public String FECHA_EGRESODefault(){
				
					return null;
				
				}
				public String FECHA_EGRESOComment(){
				
				    return "";
				
				}
				public String FECHA_EGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_EGRESOOriginalDbColumnName(){
				
					return "FECHA_EGRESO";
				
				}

				
			    public java.util.Date HORA_SALIDA;

				public java.util.Date getHORA_SALIDA () {
					return this.HORA_SALIDA;
				}

				public Boolean HORA_SALIDAIsNullable(){
				    return true;
				}
				public Boolean HORA_SALIDAIsKey(){
				    return false;
				}
				public Integer HORA_SALIDALength(){
				    return 0;
				}
				public Integer HORA_SALIDAPrecision(){
				    return 0;
				}
				public String HORA_SALIDADefault(){
				
					return null;
				
				}
				public String HORA_SALIDAComment(){
				
				    return "";
				
				}
				public String HORA_SALIDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HORA_SALIDAOriginalDbColumnName(){
				
					return "HORA_SALIDA";
				
				}

				
			    public BigDecimal VALOR_PAGAR;

				public BigDecimal getVALOR_PAGAR () {
					return this.VALOR_PAGAR;
				}

				public Boolean VALOR_PAGARIsNullable(){
				    return true;
				}
				public Boolean VALOR_PAGARIsKey(){
				    return false;
				}
				public Integer VALOR_PAGARLength(){
				    return 0;
				}
				public Integer VALOR_PAGARPrecision(){
				    return 0;
				}
				public String VALOR_PAGARDefault(){
				
					return "";
				
				}
				public String VALOR_PAGARComment(){
				
				    return "";
				
				}
				public String VALOR_PAGARPattern(){
				
					return "";
				
				}
				public String VALOR_PAGAROriginalDbColumnName(){
				
					return "VALOR_PAGAR";
				
				}

				
			    public BigDecimal PERSONAS_ID1;

				public BigDecimal getPERSONAS_ID1 () {
					return this.PERSONAS_ID1;
				}

				public Boolean PERSONAS_ID1IsNullable(){
				    return false;
				}
				public Boolean PERSONAS_ID1IsKey(){
				    return false;
				}
				public Integer PERSONAS_ID1Length(){
				    return 0;
				}
				public Integer PERSONAS_ID1Precision(){
				    return null;
				}
				public String PERSONAS_ID1Default(){
				
					return "";
				
				}
				public String PERSONAS_ID1Comment(){
				
				    return "";
				
				}
				public String PERSONAS_ID1Pattern(){
				
					return "";
				
				}
				public String PERSONAS_ID1OriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 31;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return 10;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return 0;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public BigDecimal DIAS_ESTANCIA;

				public BigDecimal getDIAS_ESTANCIA () {
					return this.DIAS_ESTANCIA;
				}

				public Boolean DIAS_ESTANCIAIsNullable(){
				    return true;
				}
				public Boolean DIAS_ESTANCIAIsKey(){
				    return false;
				}
				public Integer DIAS_ESTANCIALength(){
				    return 0;
				}
				public Integer DIAS_ESTANCIAPrecision(){
				    return 0;
				}
				public String DIAS_ESTANCIADefault(){
				
					return "";
				
				}
				public String DIAS_ESTANCIAComment(){
				
				    return "";
				
				}
				public String DIAS_ESTANCIAPattern(){
				
					return "";
				
				}
				public String DIAS_ESTANCIAOriginalDbColumnName(){
				
					return "DIAS_ESTANCIA";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return 0;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 5;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public String CUPS;

				public String getCUPS () {
					return this.CUPS;
				}

				public Boolean CUPSIsNullable(){
				    return false;
				}
				public Boolean CUPSIsKey(){
				    return false;
				}
				public Integer CUPSLength(){
				    return 100;
				}
				public Integer CUPSPrecision(){
				    return 0;
				}
				public String CUPSDefault(){
				
					return null;
				
				}
				public String CUPSComment(){
				
				    return "";
				
				}
				public String CUPSPattern(){
				
					return "";
				
				}
				public String CUPSOriginalDbColumnName(){
				
					return "CUPS";
				
				}

				
			    public BigDecimal ADMISION_ID;

				public BigDecimal getADMISION_ID () {
					return this.ADMISION_ID;
				}

				public Boolean ADMISION_IDIsNullable(){
				    return false;
				}
				public Boolean ADMISION_IDIsKey(){
				    return false;
				}
				public Integer ADMISION_IDLength(){
				    return 0;
				}
				public Integer ADMISION_IDPrecision(){
				    return null;
				}
				public String ADMISION_IDDefault(){
				
					return "";
				
				}
				public String ADMISION_IDComment(){
				
				    return "";
				
				}
				public String ADMISION_IDPattern(){
				
					return "";
				
				}
				public String ADMISION_IDOriginalDbColumnName(){
				
					return "ADMISION_ID";
				
				}

				
			    public BigDecimal TDIAGNOSTICO;

				public BigDecimal getTDIAGNOSTICO () {
					return this.TDIAGNOSTICO;
				}

				public Boolean TDIAGNOSTICOIsNullable(){
				    return true;
				}
				public Boolean TDIAGNOSTICOIsKey(){
				    return false;
				}
				public Integer TDIAGNOSTICOLength(){
				    return 0;
				}
				public Integer TDIAGNOSTICOPrecision(){
				    return 0;
				}
				public String TDIAGNOSTICODefault(){
				
					return "";
				
				}
				public String TDIAGNOSTICOComment(){
				
				    return "";
				
				}
				public String TDIAGNOSTICOPattern(){
				
					return "";
				
				}
				public String TDIAGNOSTICOOriginalDbColumnName(){
				
					return "TDIAGNOSTICO";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 100;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return 0;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return null;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				
			    public String PESO;

				public String getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return null;
				}
				public Integer PESOPrecision(){
				    return null;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return null;
				}
				public Integer TALLAPrecision(){
				    return null;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "";
				
				}
				public String TALLAPattern(){
				
					return "";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
					this.FACTURA = readString(dis);
					
					this.CODIGO_PRESTADOR = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TIPO_ADM = (BigDecimal) dis.readObject();
					
					this.FECHA_INGRESO = readDate(dis);
					
					this.HORA_INGRESO = readDate(dis);
					
					this.NUMERO_AUTORIZACION = readString(dis);
					
						this.VALORACION_ID = (BigDecimal) dis.readObject();
					
						this.FINALIDAD_CONSULTA = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.DIAG_PRINCIPAL_INGRESO = readString(dis);
					
					this.DIAG_PRINCIPAL_EGRESO = readString(dis);
					
					this.DIAGR_1 = readString(dis);
					
					this.DIAGR_2 = readString(dis);
					
					this.DIAGR_3 = readString(dis);
					
					this.DIAG_COMPLICACION = readString(dis);
					
					this.ESTADO_SALIDA = readString(dis);
					
					this.DIAG_MUERTO = readString(dis);
					
					this.FECHA_EGRESO = readDate(dis);
					
					this.HORA_SALIDA = readDate(dis);
					
						this.VALOR_PAGAR = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID1 = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
						this.DIAS_ESTANCIA = (BigDecimal) dis.readObject();
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.TDIAGNOSTICO = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
					this.FACTURA = readString(dis);
					
					this.CODIGO_PRESTADOR = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TIPO_ADM = (BigDecimal) dis.readObject();
					
					this.FECHA_INGRESO = readDate(dis);
					
					this.HORA_INGRESO = readDate(dis);
					
					this.NUMERO_AUTORIZACION = readString(dis);
					
						this.VALORACION_ID = (BigDecimal) dis.readObject();
					
						this.FINALIDAD_CONSULTA = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.DIAG_PRINCIPAL_INGRESO = readString(dis);
					
					this.DIAG_PRINCIPAL_EGRESO = readString(dis);
					
					this.DIAGR_1 = readString(dis);
					
					this.DIAGR_2 = readString(dis);
					
					this.DIAGR_3 = readString(dis);
					
					this.DIAG_COMPLICACION = readString(dis);
					
					this.ESTADO_SALIDA = readString(dis);
					
					this.DIAG_MUERTO = readString(dis);
					
					this.FECHA_EGRESO = readDate(dis);
					
					this.HORA_SALIDA = readDate(dis);
					
						this.VALOR_PAGAR = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID1 = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
						this.DIAS_ESTANCIA = (BigDecimal) dis.readObject();
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.TDIAGNOSTICO = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// String
				
						writeString(this.FACTURA,dos);
					
					// String
				
						writeString(this.CODIGO_PRESTADOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO_ADM);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_INGRESO,dos);
					
					// String
				
						writeString(this.NUMERO_AUTORIZACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALORACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FINALIDAD_CONSULTA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.DIAG_PRINCIPAL_INGRESO,dos);
					
					// String
				
						writeString(this.DIAG_PRINCIPAL_EGRESO,dos);
					
					// String
				
						writeString(this.DIAGR_1,dos);
					
					// String
				
						writeString(this.DIAGR_2,dos);
					
					// String
				
						writeString(this.DIAGR_3,dos);
					
					// String
				
						writeString(this.DIAG_COMPLICACION,dos);
					
					// String
				
						writeString(this.ESTADO_SALIDA,dos);
					
					// String
				
						writeString(this.DIAG_MUERTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EGRESO,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_SALIDA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_PAGAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAS_ESTANCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDIAGNOSTICO);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// String
				
						writeString(this.FACTURA,dos);
					
					// String
				
						writeString(this.CODIGO_PRESTADOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO_ADM);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_INGRESO,dos);
					
					// String
				
						writeString(this.NUMERO_AUTORIZACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALORACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FINALIDAD_CONSULTA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.DIAG_PRINCIPAL_INGRESO,dos);
					
					// String
				
						writeString(this.DIAG_PRINCIPAL_EGRESO,dos);
					
					// String
				
						writeString(this.DIAGR_1,dos);
					
					// String
				
						writeString(this.DIAGR_2,dos);
					
					// String
				
						writeString(this.DIAGR_3,dos);
					
					// String
				
						writeString(this.DIAG_COMPLICACION,dos);
					
					// String
				
						writeString(this.ESTADO_SALIDA,dos);
					
					// String
				
						writeString(this.DIAG_MUERTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EGRESO,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_SALIDA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_PAGAR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAS_ESTANCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDIAGNOSTICO);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",FACTURA="+FACTURA);
		sb.append(",CODIGO_PRESTADOR="+CODIGO_PRESTADOR);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TIPO_ADM="+String.valueOf(TIPO_ADM));
		sb.append(",FECHA_INGRESO="+String.valueOf(FECHA_INGRESO));
		sb.append(",HORA_INGRESO="+String.valueOf(HORA_INGRESO));
		sb.append(",NUMERO_AUTORIZACION="+NUMERO_AUTORIZACION);
		sb.append(",VALORACION_ID="+String.valueOf(VALORACION_ID));
		sb.append(",FINALIDAD_CONSULTA="+String.valueOf(FINALIDAD_CONSULTA));
		sb.append(",CAUSA_EXTERNA="+String.valueOf(CAUSA_EXTERNA));
		sb.append(",DIAG_PRINCIPAL_INGRESO="+DIAG_PRINCIPAL_INGRESO);
		sb.append(",DIAG_PRINCIPAL_EGRESO="+DIAG_PRINCIPAL_EGRESO);
		sb.append(",DIAGR_1="+DIAGR_1);
		sb.append(",DIAGR_2="+DIAGR_2);
		sb.append(",DIAGR_3="+DIAGR_3);
		sb.append(",DIAG_COMPLICACION="+DIAG_COMPLICACION);
		sb.append(",ESTADO_SALIDA="+ESTADO_SALIDA);
		sb.append(",DIAG_MUERTO="+DIAG_MUERTO);
		sb.append(",FECHA_EGRESO="+String.valueOf(FECHA_EGRESO));
		sb.append(",HORA_SALIDA="+String.valueOf(HORA_SALIDA));
		sb.append(",VALOR_PAGAR="+String.valueOf(VALOR_PAGAR));
		sb.append(",PERSONAS_ID1="+String.valueOf(PERSONAS_ID1));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",DIAS_ESTANCIA="+String.valueOf(DIAS_ESTANCIA));
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",CUPS="+CUPS);
		sb.append(",ADMISION_ID="+String.valueOf(ADMISION_ID));
		sb.append(",TDIAGNOSTICO="+String.valueOf(TDIAGNOSTICO));
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
		sb.append(",PESO="+PESO);
		sb.append(",TALLA="+TALLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
insert_hStruct insert_h = new insert_hStruct();





	
	/**
	 * [tOracleOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_10", false);
		start_Hash.put("tOracleOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_h");
					}
				
		int tos_count_tOracleOutput_10 = 0;
		






    
    int nb_line_tOracleOutput_10 = 0;
    int nb_line_update_tOracleOutput_10 = 0;
    int nb_line_inserted_tOracleOutput_10 = 0;
    int nb_line_deleted_tOracleOutput_10 = 0;
    int nb_line_rejected_tOracleOutput_10 = 0;

    int tmp_batchUpdateCount_tOracleOutput_10 = 0;

    int deletedCount_tOracleOutput_10=0;
    int updatedCount_tOracleOutput_10=0;
    int insertedCount_tOracleOutput_10=0;
    int rowsToCommitCount_tOracleOutput_10=0;
    int rejectedCount_tOracleOutput_10=0;

    boolean whetherReject_tOracleOutput_10 = false;

    java.sql.Connection conn_tOracleOutput_10 = null;

    //optional table
    String dbschema_tOracleOutput_10 = null;
    String tableName_tOracleOutput_10 = null;
                    String driverClass_tOracleOutput_10 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_10);
                String url_tOracleOutput_10 = null;
                    url_tOracleOutput_10 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_10 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_10 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_10 = decryptedPassword_tOracleOutput_10;
                dbschema_tOracleOutput_10 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_10 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_10.put("user",dbUser_tOracleOutput_10);
                    atnParamsPrope_tOracleOutput_10.put("password",dbPwd_tOracleOutput_10);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_10.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_10 = java.sql.DriverManager.getConnection(url_tOracleOutput_10, atnParamsPrope_tOracleOutput_10);
        resourceMap.put("conn_tOracleOutput_10", conn_tOracleOutput_10);
            conn_tOracleOutput_10.setAutoCommit(false);
            int commitEvery_tOracleOutput_10 = 1000;
            int commitCounter_tOracleOutput_10 = 0;
        int batchSize_tOracleOutput_10 = 1000;
        int batchSizeCounter_tOracleOutput_10=0;
        int count_tOracleOutput_10=0;

        if(dbschema_tOracleOutput_10 == null || dbschema_tOracleOutput_10.trim().length() == 0) {
            tableName_tOracleOutput_10 = ("BRIPS_HOSPITALIZACION");
        } else {
            tableName_tOracleOutput_10 = dbschema_tOracleOutput_10 + "." + ("BRIPS_HOSPITALIZACION");
        }
                String insert_tOracleOutput_10 = "INSERT INTO " + tableName_tOracleOutput_10 + " (CODFACTURA,CODPRESTADOR,TDOCUMENTO,DOCUMENTO,VIA_INGRESO,FECHA_INGRESO,HORA_INGRESO,CODAUTORIZACION,FINALIDAD,CAUSA_EXTERNA,CODDIAGPPAL_INGRESO,CODDIAGPPAL_EGRESO,CODDIAGNOSTICO1,CODDIAGNOSTICO2,CODDIAGNOSTICO3,CODDIAG_COMPL,ESTADO_SALIDA,CAUSA_MUERTE,FECHA_EGRESO,HORA_EGRESO,VPAGAR,TRIPS,PERIODO,PERSONAS_ID,UORG_ID,PROCESOASISTENCIAL_ID,FUERZA_ID,TDOCUMENTO_PROFESIONAL,DOCUMENTO_PROFESIONAL,ESPECIALIDADES_ID,ESPECIALIDAD,PESO,TALLA,UMEDIDA_PESO,UMEDIDA_TALLA,TIPO_USUARIO,TIPO_GENERACION,DIAS_ESTANCIA,EDAD,UMEDIDA_EDAD,CUPS,ADMISION_ID,TDIAGNOSTICO,GRADO_CODIGO,GRADO,CLASEGRD,CLASEGRD_CODIGO) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_10 = conn_tOracleOutput_10.prepareStatement(insert_tOracleOutput_10);
                        resourceMap.put("pstmt_tOracleOutput_10", pstmt_tOracleOutput_10);





 



/**
 * [tOracleOutput_10 begin ] stop
 */



	
	/**
	 * [tMap_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_14", false);
		start_Hash.put("tMap_14", System.currentTimeMillis());
		
	
	currentComponent="tMap_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_14 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_14__Struct  {
	String Peso_Val;
	String Peso_Uni;
	String Talla_Val;
	String Talla_Uni;
}
Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_hStruct insert_h_tmp = new insert_hStruct();
// ###############################

        
        



        









 



/**
 * [tMap_14 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_3.setFetchSize(1000);


		    String dbquery_tOracleInput_3 = "SELECT \nVAL.PROCESOSASISTENCIALES_ID AS PROCESOASISTENCIAL_ID,\nSERV.ID AS SERVICIOS_ID,\n'' AS FACTURA,\nUORG.CODIGO "
+"AS CODIGO_PRESTADOR,\nPER.ID AS PERSONAS_ID,\nTDOC.SIGLA AS TIPO_DOCUMENTO,\nPER.DOCUMENTO AS DOCUMENTO,\nCASE TADM.TIPO"
+"\nWHEN 'Urgencias' THEN TO_NUMBER('1')\nWHEN 'Consulta' THEN TO_NUMBER('2')\nWHEN 'Procedimiento' THEN TO_NUMBER('3')\nW"
+"HEN 'Programado' THEN TO_NUMBER('4')\nWHEN 'Nacimiento' THEN TO_NUMBER('5')\nEND AS TIPO_ADM,\nADM.FECHA AS FECHA_INGRES"
+"O,\nTO_DATE(TO_CHAR(ADM.FECHA,'hh24:mi'),'hh24:mi') AS HORA_INGRESO,	\nAUT.CONSECUTIVO AS NUMERO_AUTORIZACION,\nVAL.ID A"
+"S VALORACION_ID,\nFINA.CODIGO AS FINALIDAD_CONSULTA,\nTO_NUMBER(CAUSA.CODIGO) AS CAUSA_EXTERNA,\nCIE10.CODIGO AS DIAG_PR"
+"INCIPAL_INGRESO,\nCIE102.CODIGO AS DIAG_PRINCIPAL_EGRESO,\nRELACIONADOS.UNO as DIAGR_1 ,\nRELACIONADOS.DOS AS DIAGR_2,\n"
+"RELACIONADOS.TRES as DIAGR_3 ,\n'' AS DIAG_COMPLICACION ,\nCASE ALTA.NOMBRE\nWHEN 'Muerto' THEN '2'\nWHEN null THEN null"
+"\nELSE '1' END AS ESTADO_SALIDA,\nCASE ALTA.NOMBRE\nWHEN 'Muerto' THEN CIE10.CODIGO\nELSE NULL END AS DIAG_MUERTO,\nALTA"
+".FECHA AS FECHA_EGRESO,\nTO_DATE(TO_CHAR(ALTA.FECHA,'hh24:mi'),'hh24:mi') AS HORA_SALIDA,\nTO_NUMBER(null) AS VALOR_PAGA"
+"R,\nADM.PERSONAS_ID,\nADM.UORG_ID,\nUORG.FUERZA_ID,\nTDOC.SIGLA AS TDOCUMENTO_PROFESIONAL,\nPRO.DOCUMENTO AS DOCUMENTO_P"
+"ROFESIONAL, \nESPD.ID AS ESPECIALIDADES_ID,\nESPD.NOMBRE AS ESPECIALIDAD,\nAF.TIPO_USUARIO, \n'Automatico' AS TIPO_GENER"
+"ACION, \nTRUNC(ALTA.FECHA-ADM.FECHA,0) AS DIAS_ESTANCIA, \nCASE\nWHEN TRUNC(MONTHS_BETWEEN (PROC.FINICIAL,PER.FECHA_NACI"
+"MIENTO)/12)<1\nTHEN TRUNC(MONTHS_BETWEEN (PROC.FINICIAL,PER.FECHA_NACIMIENTO))\nELSE TRUNC(MONTHS_BETWEEN (PROC.FINICIAL"
+",PER.FECHA_NACIMIENTO)/12) \nEND AS EDAD,\nCASE \nWHEN TRUNC(MONTHS_BETWEEN (PROC.FINICIAL,PER.FECHA_NACIMIENTO)/12)<1\n"
+"THEN 'Meses'\nWHEN TRUNC(MONTHS_BETWEEN (PROC.FINICIAL,PER.FECHA_NACIMIENTO)/12)>=1\nTHEN 'Años'\nEND UMEDIDA_EDAD,\nCUP"
+"S.CODIGO AS CUPS,\nADM.ID AS ADMISION_ID, \nCASE \nWHEN DIAG.TDIAGNOSTICO = 'Impresión Diagnóstica' THEN TO_NUMBER('1')"
+"\nWHEN DIAG.TDIAGNOSTICO = 'Confirmado Nuevo' THEN TO_NUMBER('2')\nWHEN DIAG.TDIAGNOSTICO = 'Confirmado Repetido' THEN TO"
+"_NUMBER('3')\nEND AS TDIAGNOSTICO, \nAF.GRADO_CODIGO AS GRADO_CODIGO,\nAF.GRADO AS GRADO,\nAF.CLASEGRD AS CLASEGRD,\nAF."
+"CLASEGRD_CODIGO,\nSIG.PESO,\nSIG.TALLA\nFROM ADM_ADMISIONES ADM\nINNER JOIN ADM_SERVTRATANTES SERV ON SERV.ID = (SELECT "
+"MAX(SERVC.ID) FROM ADM_SERVTRATANTES SERVC\nINNER JOIN GEN_SERVICIOS SER ON SER.ID = SERVC.SERVICIOS_ID AND SER.ESTREGIS"
+"TRO_ID = 1 AND SER.SIGLA IN ('HG','UCI','H')\nWHERE SERVC.ADMISIONES_ID = ADM.ID) \nLEFT JOIN RCA_AUTORIZACION AUT ON AU"
+"T.ID = SERV.AUTORIZACION_ID\nINNER JOIN GEN_UORG UORG ON UORG.ID = ADM.UORG_ID \nINNER JOIN GEN_PERSONAS PER ON PER.ID ="
+" ADM.PERSONAS_ID\nINNER JOIN GEN_TDOCUMENTOS TDOC ON TDOC.ID = PER.TDOCUMENTOS_ID\nINNER JOIN ADM_TADMISIONES TADM ON TA"
+"DM.ID = ADM.TADMISIONES_ID\nINNER JOIN HCL_VALORACIONES VAL ON VAL.ID = (SELECT MIN (V.ID) FROM \nHCL_PROCESOSASISTENCIA"
+"LES P \nINNER JOIN HCL_VALORACIONES V ON V.PROCESOSASISTENCIALES_ID = P.ID\nWHERE P.ADMISIONES_ID = ADM.ID)\nINNER JOIN "
+"HCL_PROCESOSASISTENCIALES PROC ON PROC.ID = VAL.PROCESOSASISTENCIALES_ID\nINNER JOIN GEN_CUPS CUPS ON CUPS.ID = VAL.CUPS"
+"_ID\nINNER JOIN GEN_USUARIOS USU ON USU.ID = PROC.USUARIOS_ID\nINNER JOIN GEN_PERSONAS PRO ON PRO.ID = USU.PERSONAS_ID "
+"\nINNER JOIN GEN_TDOCUMENTOS TDOC ON TDOC.ID = PRO.TDOCUMENTOS_ID\nINNER JOIN ADM_ESPTRATANTES ESPT ON ESPT.ID = PROC.ESP"
+"TRATANTES_ID\nINNER JOIN GEN_ESPECIALIDADES ESPD ON ESPD.ID = ESPT.ESPECIALIDADES_ID\nINNER JOIN (SELECT \nPERSONAS_ID,"
+"\nCASE \nWHEN PL = '2' THEN 'No cotizante'\nWHEN PL IN ('1','3','4','5','6','7','8','9','10') AND SIGLA_TCOTIZACION='ACT'"
+" THEN 'Cotizante Activo' \nWHEN PL IN ('1','3','4','5','6','7','8','9','10') AND SIGLA_TCOTIZACION IN ('RET','PEN') THEN"
+" 'Cotizante Pensionado / Retirado' \nWHEN PL IN ('11','12','13','14','15','16','17','18') THEN 'Beneficiario' \nWHEN PL "
+"IN ('1','3','4','5','6','7','8','9','10') AND SIGLA_TCOTIZACION IN ('PAR','NOC') THEN 'Otro cotizante'\nEND AS TIPO_USUA"
+"RIO,\nCODIGO_GRADO AS GRADO_CODIGO,\nGRDMILITARES AS GRADO,\nCLASEGRD,\nCASE \nWHEN CLASEGRD = 'OFICIAL' THEN '1'\nWHEN "
+"CLASEGRD = 'SUBOFICIAL' THEN '2'\nWHEN CLASEGRD = 'SOLDADO' THEN '3'\nWHEN CLASEGRD = 'CIVIL' THEN '4'\nWHEN CLASEGRD = "
+"'ALUMNO' THEN '5'\nWHEN CLASEGRD = 'PEN' THEN '6'\nWHEN CLASEGRD = 'PONAL' THEN '7'\nEND AS CLASEGRD_CODIGO\nfrom vm_per"
+"sonas ) AF ON AF.PERSONAS_ID = PER.ID \nINNER JOIN GEN_CAUSAEXTERNA CAUSA ON CAUSA.ID = VAL.CAUSAEXTERNA_ID\nINNER JOIN "
+"GEN_FINALIDADCONSULTA FINA ON FINA.ID = VAL.FINALIDADCONSULTA_ID \nINNER JOIN HCL_DIAGNOSTICOS DIAG ON DIAG.PROCESOSASIS"
+"TENCIALES_ID = VAL.PROCESOSASISTENCIALES_ID\nINNER JOIN (SELECT HALTA.FECHA, TALTA.NOMBRE , ALTA.ID AS ALTA_ID, PROC.ADM"
+"ISIONES_ID, PROC.ID FROM ADM_ALTASADMTVS ALTA\nINNER JOIN ADM_HALTASADMTVS HALTA ON HALTA.ALTASADMTVS_ID = ALTA.ID AND H"
+"ALTA.ESTREGISTRO_ID = 1 AND HALTA.ESTADO = 'Aceptada'\nINNER JOIN ADM_TALTASMEDICAS TALTA ON TALTA.ID = ALTA.TALTASMEDIC"
+"AS_ID AND TALTA.ESTREGISTRO_ID = 1\nINNER JOIN HCL_PROCESOSASISTENCIALES PROC ON PROC.ID = ALTA.PROCESOSASISTENCIALES_ID"
+") ALTA ON ALTA.ADMISIONES_ID = ADM.ID \nINNER JOIN HCL_DIAGNOSTICOS DIAG2 ON DIAG2.PROCESOSASISTENCIALES_ID	= ALTA.ID\nL"
+"EFT JOIN ( SELECT * FROM (SELECT RELA.CIE10,NUM.NUMERO AS NUMERO_123,RELA.DIAGNOSTICOS_ID FROM (\nSELECT \nROW_NUMBER()O"
+"VER (PARTITION BY DIAG.ID_DI ORDER BY DIAG.ID_DI) AS NUMERO ,\nDIAG.ID_DI AS DIAGNOSTICOS_ID,\nCIE.CODIGO AS CIE10\nFROM"
+" (SELECT \nDI.ID AS ID_DI\nFROM HCL_DIAGNOSTICOS DI \n) DIAG\nINNER JOIN HCL_DIAGRELACIONADOS RE ON RE.DIAGNOSTICOS_ID ="
+" DIAG.ID_DI\nINNER JOIN GEN_CIE10 CIE ON CIE.ID = RE.CIE10_ID\n) RELA \n\nRIGHT JOIN (SELECT '1' AS NUMERO FROM DUAL\nUN"
+"ION\nSELECT '2' AS NUMERO FROM DUAL\nUNION \nSELECT '3' AS NUMERO FROM DUAL \n) NUM ON NUM.NUMERO = RELA.NUMERO\n) \nPIV"
+"OT \n(\nMIN(CIE10)\nFOR NUMERO_123\nIN ( '1' UNO, '2' DOS,'3' TRES) \n)) RELACIONADOS ON RELACIONADOS.DIAGNOSTICOS_ID = "
+"DIAG2.ID\nINNER JOIN GEN_CIE10 CIE10 ON CIE10.ID = DIAG.CIE10_ID\nINNER JOIN GEN_CIE10 CIE102 ON CIE102.ID = DIAG2.CIE10"
+"_ID\nLEFT JOIN (SELECT \nMSIG.PROCESOSASISTENCIALES_ID, \n(SELECT \nTO_CHAR(HSV.VALOR) || '#' || TSIG.UMEDIDA AS VALOR\n"
+"FROM GEN_HSIGNOSVITALES HSV\nINNER JOIN (SELECT * FROM GEN_TSIGNOSVITALES TSIG1 WHERE TSIG1.SIGLA IN ('PESO') ) TSIG ON "
+"TSIG.ID = HSV.TSIGNOSVITALES_ID AND HSV.ESTREGISTRO_ID =1 \nWHERE HSV.MSIGNOSVITALES_ID = MSIG.ID\n) AS PESO,\n(SELECT "
+"\nTO_CHAR(HSV.VALOR) || '#' || TSIG.UMEDIDA AS VALOR\nFROM GEN_HSIGNOSVITALES HSV\nINNER JOIN (SELECT * FROM GEN_TSIGNOSV"
+"ITALES TSIG1 WHERE TSIG1.SIGLA IN ('E') ) TSIG ON TSIG.ID = HSV.TSIGNOSVITALES_ID AND HSV.ESTREGISTRO_ID =1 \nWHERE HSV."
+"MSIGNOSVITALES_ID = MSIG.ID\n) AS TALLA\nFROM GEN_MSIGNOSVITALES MSIG) SIG ON SIG.PROCESOSASISTENCIALES_ID = PROC.ID\nWH"
+"ERE ADM.ESTREGISTRO_ID = 1"+context.CONDICION_HOSPITALIZACION;
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row3.PROCESOASISTENCIAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row3.PROCESOASISTENCIAL_ID = rs_tOracleInput_3.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row3.SERVICIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(2) != null) {
						row3.SERVICIOS_ID = rs_tOracleInput_3.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 3) {
								row3.FACTURA = null;
							} else {
	                         		
        	row3.FACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 3, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 4) {
								row3.CODIGO_PRESTADOR = null;
							} else {
	                         		
        	row3.CODIGO_PRESTADOR = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 4, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 5) {
								row3.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(5) != null) {
						row3.PERSONAS_ID = rs_tOracleInput_3.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 6) {
								row3.TIPO_DOCUMENTO = null;
							} else {
	                         		
        	row3.TIPO_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 6, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 7) {
								row3.DOCUMENTO = null;
							} else {
	                         		
        	row3.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 7, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 8) {
								row3.TIPO_ADM = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(8) != null) {
						row3.TIPO_ADM = rs_tOracleInput_3.getBigDecimal(8);
					} else {
				
						row3.TIPO_ADM = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 9) {
								row3.FECHA_INGRESO = null;
							} else {
										
			row3.FECHA_INGRESO = routines.system.JDBCUtil.getDate(rs_tOracleInput_3, 9);
		                    }
							if(colQtyInRs_tOracleInput_3 < 10) {
								row3.HORA_INGRESO = null;
							} else {
										
			row3.HORA_INGRESO = routines.system.JDBCUtil.getDate(rs_tOracleInput_3, 10);
		                    }
							if(colQtyInRs_tOracleInput_3 < 11) {
								row3.NUMERO_AUTORIZACION = null;
							} else {
	                         		
        	row3.NUMERO_AUTORIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 11, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 12) {
								row3.VALORACION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(12) != null) {
						row3.VALORACION_ID = rs_tOracleInput_3.getBigDecimal(12);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 13) {
								row3.FINALIDAD_CONSULTA = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(13) != null) {
						row3.FINALIDAD_CONSULTA = rs_tOracleInput_3.getBigDecimal(13);
					} else {
				
						row3.FINALIDAD_CONSULTA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 14) {
								row3.CAUSA_EXTERNA = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(14) != null) {
						row3.CAUSA_EXTERNA = rs_tOracleInput_3.getBigDecimal(14);
					} else {
				
						row3.CAUSA_EXTERNA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 15) {
								row3.DIAG_PRINCIPAL_INGRESO = null;
							} else {
	                         		
        	row3.DIAG_PRINCIPAL_INGRESO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 15, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 16) {
								row3.DIAG_PRINCIPAL_EGRESO = null;
							} else {
	                         		
        	row3.DIAG_PRINCIPAL_EGRESO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 16, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 17) {
								row3.DIAGR_1 = null;
							} else {
	                         		
        	row3.DIAGR_1 = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 17, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 18) {
								row3.DIAGR_2 = null;
							} else {
	                         		
        	row3.DIAGR_2 = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 18, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 19) {
								row3.DIAGR_3 = null;
							} else {
	                         		
        	row3.DIAGR_3 = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 19, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 20) {
								row3.DIAG_COMPLICACION = null;
							} else {
	                         		
        	row3.DIAG_COMPLICACION = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 20, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 21) {
								row3.ESTADO_SALIDA = null;
							} else {
	                         		
        	row3.ESTADO_SALIDA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 21, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 22) {
								row3.DIAG_MUERTO = null;
							} else {
	                         		
        	row3.DIAG_MUERTO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 22, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 23) {
								row3.FECHA_EGRESO = null;
							} else {
										
			row3.FECHA_EGRESO = routines.system.JDBCUtil.getDate(rs_tOracleInput_3, 23);
		                    }
							if(colQtyInRs_tOracleInput_3 < 24) {
								row3.HORA_SALIDA = null;
							} else {
										
			row3.HORA_SALIDA = routines.system.JDBCUtil.getDate(rs_tOracleInput_3, 24);
		                    }
							if(colQtyInRs_tOracleInput_3 < 25) {
								row3.VALOR_PAGAR = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(25) != null) {
						row3.VALOR_PAGAR = rs_tOracleInput_3.getBigDecimal(25);
					} else {
				
						row3.VALOR_PAGAR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 26) {
								row3.PERSONAS_ID1 = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(26) != null) {
						row3.PERSONAS_ID1 = rs_tOracleInput_3.getBigDecimal(26);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 27) {
								row3.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(27) != null) {
						row3.UORG_ID = rs_tOracleInput_3.getBigDecimal(27);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 28) {
								row3.FUERZA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(28) != null) {
						row3.FUERZA_ID = rs_tOracleInput_3.getBigDecimal(28);
					} else {
				
						row3.FUERZA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 29) {
								row3.TDOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row3.TDOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 29, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 30) {
								row3.DOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row3.DOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 30, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 31) {
								row3.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(31) != null) {
						row3.ESPECIALIDADES_ID = rs_tOracleInput_3.getBigDecimal(31);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 32) {
								row3.ESPECIALIDAD = null;
							} else {
	                         		
        	row3.ESPECIALIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 32, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 33) {
								row3.TIPO_USUARIO = null;
							} else {
	                         		
        	row3.TIPO_USUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 33, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 34) {
								row3.TIPO_GENERACION = null;
							} else {
	                         		
        	row3.TIPO_GENERACION = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 34, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 35) {
								row3.DIAS_ESTANCIA = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(35) != null) {
						row3.DIAS_ESTANCIA = rs_tOracleInput_3.getBigDecimal(35);
					} else {
				
						row3.DIAS_ESTANCIA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 36) {
								row3.EDAD = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(36) != null) {
						row3.EDAD = rs_tOracleInput_3.getBigDecimal(36);
					} else {
				
						row3.EDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 37) {
								row3.UMEDIDA_EDAD = null;
							} else {
	                         		
        	row3.UMEDIDA_EDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 37, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 38) {
								row3.CUPS = null;
							} else {
	                         		
        	row3.CUPS = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 38, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 39) {
								row3.ADMISION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(39) != null) {
						row3.ADMISION_ID = rs_tOracleInput_3.getBigDecimal(39);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 40) {
								row3.TDIAGNOSTICO = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(40) != null) {
						row3.TDIAGNOSTICO = rs_tOracleInput_3.getBigDecimal(40);
					} else {
				
						row3.TDIAGNOSTICO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 41) {
								row3.GRADO_CODIGO = null;
							} else {
	                         		
        	row3.GRADO_CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 41, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 42) {
								row3.GRADO = null;
							} else {
	                         		
        	row3.GRADO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 42, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 43) {
								row3.CLASEGRD = null;
							} else {
	                         		
        	row3.CLASEGRD = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 43, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 44) {
								row3.CLASEGRD_CODIGO = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(44) != null) {
						row3.CLASEGRD_CODIGO = rs_tOracleInput_3.getBigDecimal(44);
					} else {
				
						row3.CLASEGRD_CODIGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 45) {
								row3.PESO = null;
							} else {
	                         		
        	row3.PESO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 45, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 46) {
								row3.TALLA = null;
							} else {
	                         		
        	row3.TALLA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 46, true);
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_14 main ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_14 = false;
		boolean mainRowRejected_tMap_14 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_14__Struct Var = Var__tMap_14;
Var.Peso_Val = Utils.empty(row3.PESO) ? "" : row3.PESO.split("#")[0] ;
Var.Peso_Uni = Utils.empty(row3.PESO) ? "" : row3.PESO.split("#")[1] ;
Var.Talla_Val = Utils.empty(row3.TALLA ) ? "" : row3.TALLA .split("#")[0] ;
Var.Talla_Uni = Utils.empty(row3.TALLA ) ? "" : row3.TALLA .split("#")[1] ;// ###############################
        // ###############################
        // # Output tables

insert_h = null;


// # Output table : 'insert_h'
insert_h_tmp.CODFACTURA = row3.FACTURA ;
insert_h_tmp.CODPRESTADOR = row3.CODIGO_PRESTADOR ;
insert_h_tmp.TDOCUMENTO = row3.TIPO_DOCUMENTO;
insert_h_tmp.DOCUMENTO = row3.DOCUMENTO ;
insert_h_tmp.VIA_INGRESO = row3.TIPO_ADM ;
insert_h_tmp.FECHA_INGRESO = row3.FECHA_INGRESO ;
insert_h_tmp.HORA_INGRESO = row3.HORA_INGRESO ;
insert_h_tmp.CODAUTORIZACION = row3.NUMERO_AUTORIZACION ;
insert_h_tmp.FINALIDAD = row3.FINALIDAD_CONSULTA ;
insert_h_tmp.CAUSA_EXTERNA = row3.CAUSA_EXTERNA ;
insert_h_tmp.CODDIAGPPAL_INGRESO = row3.DIAG_PRINCIPAL_INGRESO ;
insert_h_tmp.CODDIAGPPAL_EGRESO = row3.DIAG_PRINCIPAL_EGRESO ;
insert_h_tmp.CODDIAGNOSTICO1 = row3.DIAGR_1 ;
insert_h_tmp.CODDIAGNOSTICO2 = row3.DIAGR_2 ;
insert_h_tmp.CODDIAGNOSTICO3 = row3.DIAGR_3 ;
insert_h_tmp.CODDIAG_COMPL = row3.DIAG_COMPLICACION ;
insert_h_tmp.ESTADO_SALIDA = row3.ESTADO_SALIDA ;
insert_h_tmp.CAUSA_MUERTE = row3.DIAG_MUERTO ;
insert_h_tmp.FECHA_EGRESO = row3.FECHA_EGRESO ;
insert_h_tmp.HORA_EGRESO = row3.HORA_SALIDA ;
insert_h_tmp.VPAGAR = row3.VALOR_PAGAR ;
insert_h_tmp.TRIPS = "Interna";
insert_h_tmp.PERIODO = TalendDate.formatDate("yyyy-MM",row3.FECHA_EGRESO);
insert_h_tmp.PERSONAS_ID = row3.PERSONAS_ID ;
insert_h_tmp.UORG_ID = row3.UORG_ID ;
insert_h_tmp.PROCESOASISTENCIAL_ID = row3.PROCESOASISTENCIAL_ID ;
insert_h_tmp.FUERZA_ID = row3.FUERZA_ID ;
insert_h_tmp.TDOCUMENTO_PROFESIONAL = row3.TDOCUMENTO_PROFESIONAL ;
insert_h_tmp.DOCUMENTO_PROFESIONAL = row3.DOCUMENTO_PROFESIONAL ;
insert_h_tmp.ESPECIALIDADES_ID = row3.ESPECIALIDADES_ID ;
insert_h_tmp.ESPECIALIDAD = row3.ESPECIALIDAD ;
insert_h_tmp.PESO = Var.Peso_Val ;
insert_h_tmp.TALLA = Var.Talla_Val ;
insert_h_tmp.UMEDIDA_PESO = Var.Peso_Uni ;
insert_h_tmp.UMEDIDA_TALLA = Var.Talla_Uni ;
insert_h_tmp.TIPO_USUARIO = row3.TIPO_USUARIO ;
insert_h_tmp.TIPO_GENERACION = row3.TIPO_GENERACION ;
insert_h_tmp.DIAS_ESTANCIA = row3.DIAS_ESTANCIA ;
insert_h_tmp.EDAD = row3.EDAD ;
insert_h_tmp.UMEDIDA_EDAD = row3.UMEDIDA_EDAD ;
insert_h_tmp.CUPS = row3.CUPS ;
insert_h_tmp.ADMISION_ID = row3.ADMISION_ID ;
insert_h_tmp.TDIAGNOSTICO = row3.TDIAGNOSTICO ;
insert_h_tmp.GRADO_CODIGO = row3.GRADO_CODIGO ;
insert_h_tmp.GRADO = row3.GRADO ;
insert_h_tmp.CLASEGRD = row3.CLASEGRD ;
insert_h_tmp.CLASEGRD_CODIGO = row3.CLASEGRD_CODIGO ;
insert_h = insert_h_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_14 = false;










 


	tos_count_tMap_14++;

/**
 * [tMap_14 main ] stop
 */
	
	/**
	 * [tMap_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	

 



/**
 * [tMap_14 process_data_begin ] stop
 */
// Start of branch "insert_h"
if(insert_h != null) { 



	
	/**
	 * [tOracleOutput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_h"
						
						);
					}
					



        whetherReject_tOracleOutput_10 = false;
                        if(insert_h.CODFACTURA == null) {
pstmt_tOracleOutput_10.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(1, insert_h.CODFACTURA);
}

                        if(insert_h.CODPRESTADOR == null) {
pstmt_tOracleOutput_10.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(2, insert_h.CODPRESTADOR);
}

                        if(insert_h.TDOCUMENTO == null) {
pstmt_tOracleOutput_10.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(3, insert_h.TDOCUMENTO);
}

                        if(insert_h.DOCUMENTO == null) {
pstmt_tOracleOutput_10.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(4, insert_h.DOCUMENTO);
}

                        pstmt_tOracleOutput_10.setBigDecimal(5, insert_h.VIA_INGRESO);

                        if(insert_h.FECHA_INGRESO != null) {
pstmt_tOracleOutput_10.setObject(6, new java.sql.Timestamp(insert_h.FECHA_INGRESO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_10.setNull(6, java.sql.Types.DATE);
}

                        if(insert_h.HORA_INGRESO != null) {
pstmt_tOracleOutput_10.setObject(7, new java.sql.Timestamp(insert_h.HORA_INGRESO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_10.setNull(7, java.sql.Types.DATE);
}

                        if(insert_h.CODAUTORIZACION == null) {
pstmt_tOracleOutput_10.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(8, insert_h.CODAUTORIZACION);
}

                        pstmt_tOracleOutput_10.setBigDecimal(9, insert_h.FINALIDAD);

                        pstmt_tOracleOutput_10.setBigDecimal(10, insert_h.CAUSA_EXTERNA);

                        if(insert_h.CODDIAGPPAL_INGRESO == null) {
pstmt_tOracleOutput_10.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(11, insert_h.CODDIAGPPAL_INGRESO);
}

                        if(insert_h.CODDIAGPPAL_EGRESO == null) {
pstmt_tOracleOutput_10.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(12, insert_h.CODDIAGPPAL_EGRESO);
}

                        if(insert_h.CODDIAGNOSTICO1 == null) {
pstmt_tOracleOutput_10.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(13, insert_h.CODDIAGNOSTICO1);
}

                        if(insert_h.CODDIAGNOSTICO2 == null) {
pstmt_tOracleOutput_10.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(14, insert_h.CODDIAGNOSTICO2);
}

                        if(insert_h.CODDIAGNOSTICO3 == null) {
pstmt_tOracleOutput_10.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(15, insert_h.CODDIAGNOSTICO3);
}

                        if(insert_h.CODDIAG_COMPL == null) {
pstmt_tOracleOutput_10.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(16, insert_h.CODDIAG_COMPL);
}

                        if(insert_h.ESTADO_SALIDA == null) {
pstmt_tOracleOutput_10.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(17, insert_h.ESTADO_SALIDA);
}

                        if(insert_h.CAUSA_MUERTE == null) {
pstmt_tOracleOutput_10.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(18, insert_h.CAUSA_MUERTE);
}

                        if(insert_h.FECHA_EGRESO != null) {
pstmt_tOracleOutput_10.setObject(19, new java.sql.Timestamp(insert_h.FECHA_EGRESO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_10.setNull(19, java.sql.Types.DATE);
}

                        if(insert_h.HORA_EGRESO != null) {
pstmt_tOracleOutput_10.setObject(20, new java.sql.Timestamp(insert_h.HORA_EGRESO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_10.setNull(20, java.sql.Types.DATE);
}

                        pstmt_tOracleOutput_10.setBigDecimal(21, insert_h.VPAGAR);

                        if(insert_h.TRIPS == null) {
pstmt_tOracleOutput_10.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(22, insert_h.TRIPS);
}

                        if(insert_h.PERIODO == null) {
pstmt_tOracleOutput_10.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(23, insert_h.PERIODO);
}

                        pstmt_tOracleOutput_10.setBigDecimal(24, insert_h.PERSONAS_ID);

                        pstmt_tOracleOutput_10.setBigDecimal(25, insert_h.UORG_ID);

                        pstmt_tOracleOutput_10.setBigDecimal(26, insert_h.PROCESOASISTENCIAL_ID);

                        pstmt_tOracleOutput_10.setBigDecimal(27, insert_h.FUERZA_ID);

                        if(insert_h.TDOCUMENTO_PROFESIONAL == null) {
pstmt_tOracleOutput_10.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(28, insert_h.TDOCUMENTO_PROFESIONAL);
}

                        if(insert_h.DOCUMENTO_PROFESIONAL == null) {
pstmt_tOracleOutput_10.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(29, insert_h.DOCUMENTO_PROFESIONAL);
}

                        pstmt_tOracleOutput_10.setBigDecimal(30, insert_h.ESPECIALIDADES_ID);

                        if(insert_h.ESPECIALIDAD == null) {
pstmt_tOracleOutput_10.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(31, insert_h.ESPECIALIDAD);
}

                        if(insert_h.PESO == null) {
pstmt_tOracleOutput_10.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(32, insert_h.PESO);
}

                        if(insert_h.TALLA == null) {
pstmt_tOracleOutput_10.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(33, insert_h.TALLA);
}

                        if(insert_h.UMEDIDA_PESO == null) {
pstmt_tOracleOutput_10.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(34, insert_h.UMEDIDA_PESO);
}

                        if(insert_h.UMEDIDA_TALLA == null) {
pstmt_tOracleOutput_10.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(35, insert_h.UMEDIDA_TALLA);
}

                        if(insert_h.TIPO_USUARIO == null) {
pstmt_tOracleOutput_10.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(36, insert_h.TIPO_USUARIO);
}

                        if(insert_h.TIPO_GENERACION == null) {
pstmt_tOracleOutput_10.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(37, insert_h.TIPO_GENERACION);
}

                        pstmt_tOracleOutput_10.setBigDecimal(38, insert_h.DIAS_ESTANCIA);

                        pstmt_tOracleOutput_10.setBigDecimal(39, insert_h.EDAD);

                        if(insert_h.UMEDIDA_EDAD == null) {
pstmt_tOracleOutput_10.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(40, insert_h.UMEDIDA_EDAD);
}

                        if(insert_h.CUPS == null) {
pstmt_tOracleOutput_10.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(41, insert_h.CUPS);
}

                        pstmt_tOracleOutput_10.setBigDecimal(42, insert_h.ADMISION_ID);

                        pstmt_tOracleOutput_10.setBigDecimal(43, insert_h.TDIAGNOSTICO);

                        if(insert_h.GRADO_CODIGO == null) {
pstmt_tOracleOutput_10.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(44, insert_h.GRADO_CODIGO);
}

                        if(insert_h.GRADO == null) {
pstmt_tOracleOutput_10.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(45, insert_h.GRADO);
}

                        if(insert_h.CLASEGRD == null) {
pstmt_tOracleOutput_10.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(46, insert_h.CLASEGRD);
}

                        pstmt_tOracleOutput_10.setBigDecimal(47, insert_h.CLASEGRD_CODIGO);

                pstmt_tOracleOutput_10.addBatch();
                nb_line_tOracleOutput_10++;
                batchSizeCounter_tOracleOutput_10++;
            if (batchSize_tOracleOutput_10 > 0 &&  batchSize_tOracleOutput_10 <= batchSizeCounter_tOracleOutput_10) {
                try {
                    pstmt_tOracleOutput_10.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_10){
globalMap.put("tOracleOutput_10_ERROR_MESSAGE",e_tOracleOutput_10.getMessage());
			        java.sql.SQLException ne_tOracleOutput_10 = e_tOracleOutput_10.getNextException(),sqle_tOracleOutput_10=null;
			    	String errormessage_tOracleOutput_10;
					if (ne_tOracleOutput_10 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_10 = new java.sql.SQLException(e_tOracleOutput_10.getMessage() + "\ncaused by: " + ne_tOracleOutput_10.getMessage(), ne_tOracleOutput_10.getSQLState(), ne_tOracleOutput_10.getErrorCode(), ne_tOracleOutput_10);
						errormessage_tOracleOutput_10 = sqle_tOracleOutput_10.getMessage();
					}else{
						errormessage_tOracleOutput_10 = e_tOracleOutput_10.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_10);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_10 = pstmt_tOracleOutput_10.getUpdateCount();
                    insertedCount_tOracleOutput_10
                += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                rowsToCommitCount_tOracleOutput_10 += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                batchSizeCounter_tOracleOutput_10 = 0;
            }
                commitCounter_tOracleOutput_10++;
                if(commitEvery_tOracleOutput_10 <= commitCounter_tOracleOutput_10) {
                    if(batchSizeCounter_tOracleOutput_10 > 0) {
                        try {
                            pstmt_tOracleOutput_10.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_10){
globalMap.put("tOracleOutput_10_ERROR_MESSAGE",e_tOracleOutput_10.getMessage());
					        java.sql.SQLException ne_tOracleOutput_10 = e_tOracleOutput_10.getNextException(),sqle_tOracleOutput_10=null;
					    	String errormessage_tOracleOutput_10;
							if (ne_tOracleOutput_10 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_10 = new java.sql.SQLException(e_tOracleOutput_10.getMessage() + "\ncaused by: " + ne_tOracleOutput_10.getMessage(), ne_tOracleOutput_10.getSQLState(), ne_tOracleOutput_10.getErrorCode(), ne_tOracleOutput_10);
								errormessage_tOracleOutput_10 = sqle_tOracleOutput_10.getMessage();
							}else{
								errormessage_tOracleOutput_10 = e_tOracleOutput_10.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_10);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_10 = pstmt_tOracleOutput_10.getUpdateCount();
                            insertedCount_tOracleOutput_10
                        += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                        rowsToCommitCount_tOracleOutput_10 += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_10 != 0){
                    	
                    }
                    conn_tOracleOutput_10.commit();
                    if(rowsToCommitCount_tOracleOutput_10 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_10 = 0;
                    }
                    commitCounter_tOracleOutput_10=0;
                    	batchSizeCounter_tOracleOutput_10=0;
                }

 


	tos_count_tOracleOutput_10++;

/**
 * [tOracleOutput_10 main ] stop
 */
	
	/**
	 * [tOracleOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	

 



/**
 * [tOracleOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	

 



/**
 * [tOracleOutput_10 process_data_end ] stop
 */

} // End of branch "insert_h"




	
	/**
	 * [tMap_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	

 



/**
 * [tMap_14 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tMap_14 end ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_14", true);
end_Hash.put("tMap_14", System.currentTimeMillis());




/**
 * [tMap_14 end ] stop
 */

	
	/**
	 * [tOracleOutput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_10 > 0) {
            try {
            	if (pstmt_tOracleOutput_10 != null) {
					
					pstmt_tOracleOutput_10.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_10){
globalMap.put("tOracleOutput_10_ERROR_MESSAGE",e_tOracleOutput_10.getMessage());
		        java.sql.SQLException ne_tOracleOutput_10 = e_tOracleOutput_10.getNextException(),sqle_tOracleOutput_10=null;
		    	String errormessage_tOracleOutput_10;
				if (ne_tOracleOutput_10 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_10 = new java.sql.SQLException(e_tOracleOutput_10.getMessage() + "\ncaused by: " + ne_tOracleOutput_10.getMessage(), ne_tOracleOutput_10.getSQLState(), ne_tOracleOutput_10.getErrorCode(), ne_tOracleOutput_10);
					errormessage_tOracleOutput_10 = sqle_tOracleOutput_10.getMessage();
				}else{
					errormessage_tOracleOutput_10 = e_tOracleOutput_10.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_10);
            	
        	}
        	if (pstmt_tOracleOutput_10 != null) {
            	tmp_batchUpdateCount_tOracleOutput_10 = pstmt_tOracleOutput_10.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_10
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
				rowsToCommitCount_tOracleOutput_10 += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
            }
        }
        if(pstmt_tOracleOutput_10 != null) {
			
				pstmt_tOracleOutput_10.close();
				resourceMap.remove("pstmt_tOracleOutput_10");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_10", true);
		if(commitCounter_tOracleOutput_10 > 0 && rowsToCommitCount_tOracleOutput_10 != 0) {
			
		}
		conn_tOracleOutput_10.commit();
		if(commitCounter_tOracleOutput_10 > 0 && rowsToCommitCount_tOracleOutput_10 != 0) {
			
			rowsToCommitCount_tOracleOutput_10 = 0;
		}
		commitCounter_tOracleOutput_10 = 0;
		
		
		conn_tOracleOutput_10 .close();
		
		resourceMap.put("finish_tOracleOutput_10", true);
   	

	
	nb_line_deleted_tOracleOutput_10=nb_line_deleted_tOracleOutput_10+ deletedCount_tOracleOutput_10;
	nb_line_update_tOracleOutput_10=nb_line_update_tOracleOutput_10 + updatedCount_tOracleOutput_10;
	nb_line_inserted_tOracleOutput_10=nb_line_inserted_tOracleOutput_10 + insertedCount_tOracleOutput_10;
	nb_line_rejected_tOracleOutput_10=nb_line_rejected_tOracleOutput_10 + rejectedCount_tOracleOutput_10;
	
        globalMap.put("tOracleOutput_10_NB_LINE",nb_line_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_UPDATED",nb_line_update_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_10);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_h");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_10", true);
end_Hash.put("tOracleOutput_10", System.currentTimeMillis());




/**
 * [tOracleOutput_10 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tJava_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tMap_14 finally ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	

 



/**
 * [tMap_14 finally ] stop
 */

	
	/**
	 * [tOracleOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_10") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_10 = null;
                if ((pstmtToClose_tOracleOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_10")) != null) {
                    pstmtToClose_tOracleOutput_10.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_10") == null){
            java.sql.Connection ctn_tOracleOutput_10 = null;
            if((ctn_tOracleOutput_10 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_10")) != null){
                try {
                    ctn_tOracleOutput_10.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_10) {
                    String errorMessage_tOracleOutput_10 = "failed to close the connection in tOracleOutput_10 :" + sqlEx_tOracleOutput_10.getMessage();
                    System.err.println(errorMessage_tOracleOutput_10);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_10 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
		int tos_count_tJava_4 = 0;
		


/*System.out.println("ReturnValueExampleChildJob_NB_LINE=" + ((BigDecimal) ((java.util.Map) globalMap.get("sharedMap")).get("ReturnValueExampleChildJob_NB_LINE")));

*/

context.CODARCHIVO = "AU";
System.out.println("        - Urgencias: " + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );
/*context.ARCONTROL_ID = (BigDecimal) ((java.util.Map) globalMap.get("sharedMap")).get("ReturnValueAC_ID");

System.out.println("ARCONTROL_ID AU : " + context.ARCONTROL_ID );*/
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tOracleInput_4Process(globalMap);



/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class insert_uStruct implements routines.system.IPersistableRow<insert_uStruct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String CODFACTURA;

				public String getCODFACTURA () {
					return this.CODFACTURA;
				}

				public Boolean CODFACTURAIsNullable(){
				    return true;
				}
				public Boolean CODFACTURAIsKey(){
				    return false;
				}
				public Integer CODFACTURALength(){
				    return 100;
				}
				public Integer CODFACTURAPrecision(){
				    return 0;
				}
				public String CODFACTURADefault(){
				
					return null;
				
				}
				public String CODFACTURAComment(){
				
				    return "N\u00FAmero de la factura";
				
				}
				public String CODFACTURAPattern(){
				
					return "";
				
				}
				public String CODFACTURAOriginalDbColumnName(){
				
					return "CODFACTURA";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return 100;
				}
				public Integer CODPRESTADORPrecision(){
				    return 0;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "C\u00F3digo del prestador de servicios de salud";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public String TIPODOCUMENTO;

				public String getTIPODOCUMENTO () {
					return this.TIPODOCUMENTO;
				}

				public Boolean TIPODOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPODOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPODOCUMENTOLength(){
				    return 50;
				}
				public Integer TIPODOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPODOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPODOCUMENTOComment(){
				
				    return "Tipo de identificaci\u00F3n del usuario";
				
				}
				public String TIPODOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPODOCUMENTOOriginalDbColumnName(){
				
					return "TIPODOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "N\u00FAmero de identificaci\u00F3n del usuario en el sistema";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public java.util.Date FECHA_INGRESO;

				public java.util.Date getFECHA_INGRESO () {
					return this.FECHA_INGRESO;
				}

				public Boolean FECHA_INGRESOIsNullable(){
				    return true;
				}
				public Boolean FECHA_INGRESOIsKey(){
				    return false;
				}
				public Integer FECHA_INGRESOLength(){
				    return 7;
				}
				public Integer FECHA_INGRESOPrecision(){
				    return 0;
				}
				public String FECHA_INGRESODefault(){
				
					return null;
				
				}
				public String FECHA_INGRESOComment(){
				
				    return "Fecha de ingreso a observaci\u00F3n";
				
				}
				public String FECHA_INGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_INGRESOOriginalDbColumnName(){
				
					return "FECHA_INGRESO";
				
				}

				
			    public java.util.Date HORA_INGRESO;

				public java.util.Date getHORA_INGRESO () {
					return this.HORA_INGRESO;
				}

				public Boolean HORA_INGRESOIsNullable(){
				    return true;
				}
				public Boolean HORA_INGRESOIsKey(){
				    return false;
				}
				public Integer HORA_INGRESOLength(){
				    return 7;
				}
				public Integer HORA_INGRESOPrecision(){
				    return 0;
				}
				public String HORA_INGRESODefault(){
				
					return null;
				
				}
				public String HORA_INGRESOComment(){
				
				    return "Hora de ingreso a observaci\u00F3n";
				
				}
				public String HORA_INGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HORA_INGRESOOriginalDbColumnName(){
				
					return "HORA_INGRESO";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return 250;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "N\u00FAmero de autorizaci\u00F3n";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public BigDecimal FINALIDAD;

				public BigDecimal getFINALIDAD () {
					return this.FINALIDAD;
				}

				public Boolean FINALIDADIsNullable(){
				    return true;
				}
				public Boolean FINALIDADIsKey(){
				    return false;
				}
				public Integer FINALIDADLength(){
				    return 0;
				}
				public Integer FINALIDADPrecision(){
				    return null;
				}
				public String FINALIDADDefault(){
				
					return "";
				
				}
				public String FINALIDADComment(){
				
				    return "";
				
				}
				public String FINALIDADPattern(){
				
					return "";
				
				}
				public String FINALIDADOriginalDbColumnName(){
				
					return "FINALIDAD";
				
				}

				
			    public BigDecimal CAUSA_EXTERNA;

				public BigDecimal getCAUSA_EXTERNA () {
					return this.CAUSA_EXTERNA;
				}

				public Boolean CAUSA_EXTERNAIsNullable(){
				    return true;
				}
				public Boolean CAUSA_EXTERNAIsKey(){
				    return false;
				}
				public Integer CAUSA_EXTERNALength(){
				    return 0;
				}
				public Integer CAUSA_EXTERNAPrecision(){
				    return null;
				}
				public String CAUSA_EXTERNADefault(){
				
					return null;
				
				}
				public String CAUSA_EXTERNAComment(){
				
				    return "Causa externa";
				
				}
				public String CAUSA_EXTERNAPattern(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAOriginalDbColumnName(){
				
					return "CAUSA_EXTERNA";
				
				}

				
			    public String CODDIAGSALIDA;

				public String getCODDIAGSALIDA () {
					return this.CODDIAGSALIDA;
				}

				public Boolean CODDIAGSALIDAIsNullable(){
				    return true;
				}
				public Boolean CODDIAGSALIDAIsKey(){
				    return false;
				}
				public Integer CODDIAGSALIDALength(){
				    return 10;
				}
				public Integer CODDIAGSALIDAPrecision(){
				    return 0;
				}
				public String CODDIAGSALIDADefault(){
				
					return null;
				
				}
				public String CODDIAGSALIDAComment(){
				
				    return "C\u00F3digo Diagn\u00F3stico principal a la salida";
				
				}
				public String CODDIAGSALIDAPattern(){
				
					return "";
				
				}
				public String CODDIAGSALIDAOriginalDbColumnName(){
				
					return "CODDIAGSALIDA";
				
				}

				
			    public String DIAGNOSTICO1;

				public String getDIAGNOSTICO1 () {
					return this.DIAGNOSTICO1;
				}

				public Boolean DIAGNOSTICO1IsNullable(){
				    return true;
				}
				public Boolean DIAGNOSTICO1IsKey(){
				    return false;
				}
				public Integer DIAGNOSTICO1Length(){
				    return 10;
				}
				public Integer DIAGNOSTICO1Precision(){
				    return 0;
				}
				public String DIAGNOSTICO1Default(){
				
					return null;
				
				}
				public String DIAGNOSTICO1Comment(){
				
				    return "Diagn\u00F3stico relacionado Nro.1 a la salida";
				
				}
				public String DIAGNOSTICO1Pattern(){
				
					return "";
				
				}
				public String DIAGNOSTICO1OriginalDbColumnName(){
				
					return "DIAGNOSTICO1";
				
				}

				
			    public String DIAGNOSTICO2;

				public String getDIAGNOSTICO2 () {
					return this.DIAGNOSTICO2;
				}

				public Boolean DIAGNOSTICO2IsNullable(){
				    return true;
				}
				public Boolean DIAGNOSTICO2IsKey(){
				    return false;
				}
				public Integer DIAGNOSTICO2Length(){
				    return 10;
				}
				public Integer DIAGNOSTICO2Precision(){
				    return 0;
				}
				public String DIAGNOSTICO2Default(){
				
					return null;
				
				}
				public String DIAGNOSTICO2Comment(){
				
				    return "Diagn\u00F3stico relacionado Nro.2 a la salida";
				
				}
				public String DIAGNOSTICO2Pattern(){
				
					return "";
				
				}
				public String DIAGNOSTICO2OriginalDbColumnName(){
				
					return "DIAGNOSTICO2";
				
				}

				
			    public String DIAGNOSTICO3;

				public String getDIAGNOSTICO3 () {
					return this.DIAGNOSTICO3;
				}

				public Boolean DIAGNOSTICO3IsNullable(){
				    return true;
				}
				public Boolean DIAGNOSTICO3IsKey(){
				    return false;
				}
				public Integer DIAGNOSTICO3Length(){
				    return 10;
				}
				public Integer DIAGNOSTICO3Precision(){
				    return 0;
				}
				public String DIAGNOSTICO3Default(){
				
					return null;
				
				}
				public String DIAGNOSTICO3Comment(){
				
				    return "Diagn\u00F3stico relacionado Nro.3 a la salida";
				
				}
				public String DIAGNOSTICO3Pattern(){
				
					return "";
				
				}
				public String DIAGNOSTICO3OriginalDbColumnName(){
				
					return "DIAGNOSTICO3";
				
				}

				
			    public BigDecimal DESTINO;

				public BigDecimal getDESTINO () {
					return this.DESTINO;
				}

				public Boolean DESTINOIsNullable(){
				    return true;
				}
				public Boolean DESTINOIsKey(){
				    return false;
				}
				public Integer DESTINOLength(){
				    return 0;
				}
				public Integer DESTINOPrecision(){
				    return null;
				}
				public String DESTINODefault(){
				
					return null;
				
				}
				public String DESTINOComment(){
				
				    return "Destino del usuario a la salida de observaci\u00F3n";
				
				}
				public String DESTINOPattern(){
				
					return "";
				
				}
				public String DESTINOOriginalDbColumnName(){
				
					return "DESTINO";
				
				}

				
			    public BigDecimal ESTADO_SALIDA;

				public BigDecimal getESTADO_SALIDA () {
					return this.ESTADO_SALIDA;
				}

				public Boolean ESTADO_SALIDAIsNullable(){
				    return true;
				}
				public Boolean ESTADO_SALIDAIsKey(){
				    return false;
				}
				public Integer ESTADO_SALIDALength(){
				    return 0;
				}
				public Integer ESTADO_SALIDAPrecision(){
				    return null;
				}
				public String ESTADO_SALIDADefault(){
				
					return null;
				
				}
				public String ESTADO_SALIDAComment(){
				
				    return "Estado a la salida";
				
				}
				public String ESTADO_SALIDAPattern(){
				
					return "";
				
				}
				public String ESTADO_SALIDAOriginalDbColumnName(){
				
					return "ESTADO_SALIDA";
				
				}

				
			    public String CAUSA_MUERTE;

				public String getCAUSA_MUERTE () {
					return this.CAUSA_MUERTE;
				}

				public Boolean CAUSA_MUERTEIsNullable(){
				    return true;
				}
				public Boolean CAUSA_MUERTEIsKey(){
				    return false;
				}
				public Integer CAUSA_MUERTELength(){
				    return 100;
				}
				public Integer CAUSA_MUERTEPrecision(){
				    return 0;
				}
				public String CAUSA_MUERTEDefault(){
				
					return null;
				
				}
				public String CAUSA_MUERTEComment(){
				
				    return "Causa b\u00E1sica de muerte en urgencias";
				
				}
				public String CAUSA_MUERTEPattern(){
				
					return "";
				
				}
				public String CAUSA_MUERTEOriginalDbColumnName(){
				
					return "CAUSA_MUERTE";
				
				}

				
			    public java.util.Date FECHA_SALIDA;

				public java.util.Date getFECHA_SALIDA () {
					return this.FECHA_SALIDA;
				}

				public Boolean FECHA_SALIDAIsNullable(){
				    return true;
				}
				public Boolean FECHA_SALIDAIsKey(){
				    return false;
				}
				public Integer FECHA_SALIDALength(){
				    return 7;
				}
				public Integer FECHA_SALIDAPrecision(){
				    return 0;
				}
				public String FECHA_SALIDADefault(){
				
					return null;
				
				}
				public String FECHA_SALIDAComment(){
				
				    return "Fecha de la salida del usuario";
				
				}
				public String FECHA_SALIDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_SALIDAOriginalDbColumnName(){
				
					return "FECHA_SALIDA";
				
				}

				
			    public java.util.Date HORA_SALIDA;

				public java.util.Date getHORA_SALIDA () {
					return this.HORA_SALIDA;
				}

				public Boolean HORA_SALIDAIsNullable(){
				    return true;
				}
				public Boolean HORA_SALIDAIsKey(){
				    return false;
				}
				public Integer HORA_SALIDALength(){
				    return 7;
				}
				public Integer HORA_SALIDAPrecision(){
				    return 0;
				}
				public String HORA_SALIDADefault(){
				
					return null;
				
				}
				public String HORA_SALIDAComment(){
				
				    return "Hora de la salida del usuario";
				
				}
				public String HORA_SALIDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HORA_SALIDAOriginalDbColumnName(){
				
					return "HORA_SALIDA";
				
				}

				
			    public String TRIPS;

				public String getTRIPS () {
					return this.TRIPS;
				}

				public Boolean TRIPSIsNullable(){
				    return true;
				}
				public Boolean TRIPSIsKey(){
				    return false;
				}
				public Integer TRIPSLength(){
				    return 10;
				}
				public Integer TRIPSPrecision(){
				    return 0;
				}
				public String TRIPSDefault(){
				
					return null;
				
				}
				public String TRIPSComment(){
				
				    return "";
				
				}
				public String TRIPSPattern(){
				
					return "";
				
				}
				public String TRIPSOriginalDbColumnName(){
				
					return "TRIPS";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 7;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "FK - BGEN_PERSONAS";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "UORG de atenci\u00F3n";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return null;
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "Id de la fuerza del ESM de atencion";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "Sigla del tipo de documento del profesional asistencial que atiende";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "N\u00FAmero de identificacion del profesional asistencial que atiende";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "Nombre de la especialidad que atiende";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String PESO;

				public String getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 10;
				}
				public Integer PESOPrecision(){
				    return 0;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "Peso del paciente al momento de la atenci\u00F3n";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return 10;
				}
				public Integer TALLAPrecision(){
				    return 0;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "Altura del paciente la momento de la atenci\u00F3n ";
				
				}
				public String TALLAPattern(){
				
					return "";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public String UMEDIDA_PESO;

				public String getUMEDIDA_PESO () {
					return this.UMEDIDA_PESO;
				}

				public Boolean UMEDIDA_PESOIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_PESOIsKey(){
				    return false;
				}
				public Integer UMEDIDA_PESOLength(){
				    return 10;
				}
				public Integer UMEDIDA_PESOPrecision(){
				    return 0;
				}
				public String UMEDIDA_PESODefault(){
				
					return null;
				
				}
				public String UMEDIDA_PESOComment(){
				
				    return "Unidad de medida del peso del paciente";
				
				}
				public String UMEDIDA_PESOPattern(){
				
					return "";
				
				}
				public String UMEDIDA_PESOOriginalDbColumnName(){
				
					return "UMEDIDA_PESO";
				
				}

				
			    public String UMEDIDA_TALLA;

				public String getUMEDIDA_TALLA () {
					return this.UMEDIDA_TALLA;
				}

				public Boolean UMEDIDA_TALLAIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_TALLAIsKey(){
				    return false;
				}
				public Integer UMEDIDA_TALLALength(){
				    return 10;
				}
				public Integer UMEDIDA_TALLAPrecision(){
				    return 0;
				}
				public String UMEDIDA_TALLADefault(){
				
					return null;
				
				}
				public String UMEDIDA_TALLAComment(){
				
				    return "Unidad de medida de la talla del paciente";
				
				}
				public String UMEDIDA_TALLAPattern(){
				
					return "";
				
				}
				public String UMEDIDA_TALLAOriginalDbColumnName(){
				
					return "UMEDIDA_TALLA";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 100;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "Tipo de afiliado ( No cotizante, cotizante pensionado o retirado, cotizante activo, beneficiario)";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return 10;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return 0;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "Forma en que se almaceno ( Cargue, Automatico)";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public BigDecimal DIAS_ESTANCIA;

				public BigDecimal getDIAS_ESTANCIA () {
					return this.DIAS_ESTANCIA;
				}

				public Boolean DIAS_ESTANCIAIsNullable(){
				    return true;
				}
				public Boolean DIAS_ESTANCIAIsKey(){
				    return false;
				}
				public Integer DIAS_ESTANCIALength(){
				    return 0;
				}
				public Integer DIAS_ESTANCIAPrecision(){
				    return null;
				}
				public String DIAS_ESTANCIADefault(){
				
					return null;
				
				}
				public String DIAS_ESTANCIAComment(){
				
				    return "N\u00FAmero de dias en la estancia";
				
				}
				public String DIAS_ESTANCIAPattern(){
				
					return "";
				
				}
				public String DIAS_ESTANCIAOriginalDbColumnName(){
				
					return "DIAS_ESTANCIA";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "EDAD SIMPLE DE LA PERSONA AL MOMENTO DE LA ATENCI\u00D3N";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 10;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "Unidad de medida de la edad simple (A\u00F1os, Meses)";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public String CUPS;

				public String getCUPS () {
					return this.CUPS;
				}

				public Boolean CUPSIsNullable(){
				    return true;
				}
				public Boolean CUPSIsKey(){
				    return false;
				}
				public Integer CUPSLength(){
				    return 20;
				}
				public Integer CUPSPrecision(){
				    return 0;
				}
				public String CUPSDefault(){
				
					return null;
				
				}
				public String CUPSComment(){
				
				    return "C\u00F3digo CUPS de la valoracion";
				
				}
				public String CUPSPattern(){
				
					return "";
				
				}
				public String CUPSOriginalDbColumnName(){
				
					return "CUPS";
				
				}

				
			    public BigDecimal ADMISION_ID;

				public BigDecimal getADMISION_ID () {
					return this.ADMISION_ID;
				}

				public Boolean ADMISION_IDIsNullable(){
				    return true;
				}
				public Boolean ADMISION_IDIsKey(){
				    return false;
				}
				public Integer ADMISION_IDLength(){
				    return 0;
				}
				public Integer ADMISION_IDPrecision(){
				    return null;
				}
				public String ADMISION_IDDefault(){
				
					return null;
				
				}
				public String ADMISION_IDComment(){
				
				    return "ID de la admisi\u00F3n";
				
				}
				public String ADMISION_IDPattern(){
				
					return "";
				
				}
				public String ADMISION_IDOriginalDbColumnName(){
				
					return "ADMISION_ID";
				
				}

				
			    public BigDecimal TDIAGNOSTICO;

				public BigDecimal getTDIAGNOSTICO () {
					return this.TDIAGNOSTICO;
				}

				public Boolean TDIAGNOSTICOIsNullable(){
				    return true;
				}
				public Boolean TDIAGNOSTICOIsKey(){
				    return false;
				}
				public Integer TDIAGNOSTICOLength(){
				    return 0;
				}
				public Integer TDIAGNOSTICOPrecision(){
				    return null;
				}
				public String TDIAGNOSTICODefault(){
				
					return null;
				
				}
				public String TDIAGNOSTICOComment(){
				
				    return "Tipo de diagnotico de salida";
				
				}
				public String TDIAGNOSTICOPattern(){
				
					return "";
				
				}
				public String TDIAGNOSTICOOriginalDbColumnName(){
				
					return "TDIAGNOSTICO";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 0;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return null;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "C\u00F3digo del grado (filtrar)";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "DESCRIPCION DEL GRADO MILITAR";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 100;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "Descripci\u00F3n de la clasificaci\u00F3n del grado";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return 0;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return null;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
					this.CODPRESTADOR = readString(dis);
					
					this.TIPODOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.FECHA_INGRESO = readDate(dis);
					
					this.HORA_INGRESO = readDate(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
						this.FINALIDAD = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.CODDIAGSALIDA = readString(dis);
					
					this.DIAGNOSTICO1 = readString(dis);
					
					this.DIAGNOSTICO2 = readString(dis);
					
					this.DIAGNOSTICO3 = readString(dis);
					
						this.DESTINO = (BigDecimal) dis.readObject();
					
						this.ESTADO_SALIDA = (BigDecimal) dis.readObject();
					
					this.CAUSA_MUERTE = readString(dis);
					
					this.FECHA_SALIDA = readDate(dis);
					
					this.HORA_SALIDA = readDate(dis);
					
					this.TRIPS = readString(dis);
					
					this.PERIODO = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_PESO = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
						this.DIAS_ESTANCIA = (BigDecimal) dis.readObject();
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.TDIAGNOSTICO = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
					this.CODPRESTADOR = readString(dis);
					
					this.TIPODOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.FECHA_INGRESO = readDate(dis);
					
					this.HORA_INGRESO = readDate(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
						this.FINALIDAD = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.CODDIAGSALIDA = readString(dis);
					
					this.DIAGNOSTICO1 = readString(dis);
					
					this.DIAGNOSTICO2 = readString(dis);
					
					this.DIAGNOSTICO3 = readString(dis);
					
						this.DESTINO = (BigDecimal) dis.readObject();
					
						this.ESTADO_SALIDA = (BigDecimal) dis.readObject();
					
					this.CAUSA_MUERTE = readString(dis);
					
					this.FECHA_SALIDA = readDate(dis);
					
					this.HORA_SALIDA = readDate(dis);
					
					this.TRIPS = readString(dis);
					
					this.PERIODO = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_PESO = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
						this.DIAS_ESTANCIA = (BigDecimal) dis.readObject();
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.TDIAGNOSTICO = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TIPODOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_INGRESO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FINALIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.CODDIAGSALIDA,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO1,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO2,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DESTINO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO_SALIDA);
					
					// String
				
						writeString(this.CAUSA_MUERTE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_SALIDA,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_SALIDA,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_PESO,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAS_ESTANCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDIAGNOSTICO);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TIPODOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_INGRESO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FINALIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.CODDIAGSALIDA,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO1,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO2,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO3,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DESTINO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO_SALIDA);
					
					// String
				
						writeString(this.CAUSA_MUERTE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_SALIDA,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_SALIDA,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_PESO,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAS_ESTANCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDIAGNOSTICO);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODFACTURA="+CODFACTURA);
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",TIPODOCUMENTO="+TIPODOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",FECHA_INGRESO="+String.valueOf(FECHA_INGRESO));
		sb.append(",HORA_INGRESO="+String.valueOf(HORA_INGRESO));
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",FINALIDAD="+String.valueOf(FINALIDAD));
		sb.append(",CAUSA_EXTERNA="+String.valueOf(CAUSA_EXTERNA));
		sb.append(",CODDIAGSALIDA="+CODDIAGSALIDA);
		sb.append(",DIAGNOSTICO1="+DIAGNOSTICO1);
		sb.append(",DIAGNOSTICO2="+DIAGNOSTICO2);
		sb.append(",DIAGNOSTICO3="+DIAGNOSTICO3);
		sb.append(",DESTINO="+String.valueOf(DESTINO));
		sb.append(",ESTADO_SALIDA="+String.valueOf(ESTADO_SALIDA));
		sb.append(",CAUSA_MUERTE="+CAUSA_MUERTE);
		sb.append(",FECHA_SALIDA="+String.valueOf(FECHA_SALIDA));
		sb.append(",HORA_SALIDA="+String.valueOf(HORA_SALIDA));
		sb.append(",TRIPS="+TRIPS);
		sb.append(",PERIODO="+PERIODO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",PESO="+PESO);
		sb.append(",TALLA="+TALLA);
		sb.append(",UMEDIDA_PESO="+UMEDIDA_PESO);
		sb.append(",UMEDIDA_TALLA="+UMEDIDA_TALLA);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",DIAS_ESTANCIA="+String.valueOf(DIAS_ESTANCIA));
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",CUPS="+CUPS);
		sb.append(",ADMISION_ID="+String.valueOf(ADMISION_ID));
		sb.append(",TDIAGNOSTICO="+String.valueOf(TDIAGNOSTICO));
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_uStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return 0;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return 0;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String CODIGO_PRESTADOR;

				public String getCODIGO_PRESTADOR () {
					return this.CODIGO_PRESTADOR;
				}

				public Boolean CODIGO_PRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODIGO_PRESTADORIsKey(){
				    return false;
				}
				public Integer CODIGO_PRESTADORLength(){
				    return 100;
				}
				public Integer CODIGO_PRESTADORPrecision(){
				    return 0;
				}
				public String CODIGO_PRESTADORDefault(){
				
					return null;
				
				}
				public String CODIGO_PRESTADORComment(){
				
				    return "";
				
				}
				public String CODIGO_PRESTADORPattern(){
				
					return "";
				
				}
				public String CODIGO_PRESTADOROriginalDbColumnName(){
				
					return "CODIGO_PRESTADOR";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 5;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public java.util.Date FECHA_INGRESO;

				public java.util.Date getFECHA_INGRESO () {
					return this.FECHA_INGRESO;
				}

				public Boolean FECHA_INGRESOIsNullable(){
				    return false;
				}
				public Boolean FECHA_INGRESOIsKey(){
				    return false;
				}
				public Integer FECHA_INGRESOLength(){
				    return 0;
				}
				public Integer FECHA_INGRESOPrecision(){
				    return 0;
				}
				public String FECHA_INGRESODefault(){
				
					return null;
				
				}
				public String FECHA_INGRESOComment(){
				
				    return "";
				
				}
				public String FECHA_INGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_INGRESOOriginalDbColumnName(){
				
					return "FECHA_INGRESO";
				
				}

				
			    public java.util.Date HORA_INGRESO;

				public java.util.Date getHORA_INGRESO () {
					return this.HORA_INGRESO;
				}

				public Boolean HORA_INGRESOIsNullable(){
				    return false;
				}
				public Boolean HORA_INGRESOIsKey(){
				    return false;
				}
				public Integer HORA_INGRESOLength(){
				    return 0;
				}
				public Integer HORA_INGRESOPrecision(){
				    return 0;
				}
				public String HORA_INGRESODefault(){
				
					return null;
				
				}
				public String HORA_INGRESOComment(){
				
				    return "";
				
				}
				public String HORA_INGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HORA_INGRESOOriginalDbColumnName(){
				
					return "HORA_INGRESO";
				
				}

				
			    public String CONSECUTIVO;

				public String getCONSECUTIVO () {
					return this.CONSECUTIVO;
				}

				public Boolean CONSECUTIVOIsNullable(){
				    return true;
				}
				public Boolean CONSECUTIVOIsKey(){
				    return false;
				}
				public Integer CONSECUTIVOLength(){
				    return 40;
				}
				public Integer CONSECUTIVOPrecision(){
				    return 0;
				}
				public String CONSECUTIVODefault(){
				
					return null;
				
				}
				public String CONSECUTIVOComment(){
				
				    return "";
				
				}
				public String CONSECUTIVOPattern(){
				
					return "";
				
				}
				public String CONSECUTIVOOriginalDbColumnName(){
				
					return "CONSECUTIVO";
				
				}

				
			    public BigDecimal FINALIDAD_CONSULTA;

				public BigDecimal getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return 0;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return null;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				
			    public BigDecimal CAUSA_EXTERNA;

				public BigDecimal getCAUSA_EXTERNA () {
					return this.CAUSA_EXTERNA;
				}

				public Boolean CAUSA_EXTERNAIsNullable(){
				    return true;
				}
				public Boolean CAUSA_EXTERNAIsKey(){
				    return false;
				}
				public Integer CAUSA_EXTERNALength(){
				    return 0;
				}
				public Integer CAUSA_EXTERNAPrecision(){
				    return 0;
				}
				public String CAUSA_EXTERNADefault(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAComment(){
				
				    return "";
				
				}
				public String CAUSA_EXTERNAPattern(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAOriginalDbColumnName(){
				
					return "CAUSA_EXTERNA";
				
				}

				
			    public String DIAG_SALIDA;

				public String getDIAG_SALIDA () {
					return this.DIAG_SALIDA;
				}

				public Boolean DIAG_SALIDAIsNullable(){
				    return true;
				}
				public Boolean DIAG_SALIDAIsKey(){
				    return false;
				}
				public Integer DIAG_SALIDALength(){
				    return 10;
				}
				public Integer DIAG_SALIDAPrecision(){
				    return 0;
				}
				public String DIAG_SALIDADefault(){
				
					return null;
				
				}
				public String DIAG_SALIDAComment(){
				
				    return "";
				
				}
				public String DIAG_SALIDAPattern(){
				
					return "";
				
				}
				public String DIAG_SALIDAOriginalDbColumnName(){
				
					return "DIAG_SALIDA";
				
				}

				
			    public String DIAGR_1;

				public String getDIAGR_1 () {
					return this.DIAGR_1;
				}

				public Boolean DIAGR_1IsNullable(){
				    return true;
				}
				public Boolean DIAGR_1IsKey(){
				    return false;
				}
				public Integer DIAGR_1Length(){
				    return 10;
				}
				public Integer DIAGR_1Precision(){
				    return 0;
				}
				public String DIAGR_1Default(){
				
					return null;
				
				}
				public String DIAGR_1Comment(){
				
				    return "";
				
				}
				public String DIAGR_1Pattern(){
				
					return "";
				
				}
				public String DIAGR_1OriginalDbColumnName(){
				
					return "DIAGR_1";
				
				}

				
			    public String DIAGR_2;

				public String getDIAGR_2 () {
					return this.DIAGR_2;
				}

				public Boolean DIAGR_2IsNullable(){
				    return true;
				}
				public Boolean DIAGR_2IsKey(){
				    return false;
				}
				public Integer DIAGR_2Length(){
				    return 10;
				}
				public Integer DIAGR_2Precision(){
				    return 0;
				}
				public String DIAGR_2Default(){
				
					return null;
				
				}
				public String DIAGR_2Comment(){
				
				    return "";
				
				}
				public String DIAGR_2Pattern(){
				
					return "";
				
				}
				public String DIAGR_2OriginalDbColumnName(){
				
					return "DIAGR_2";
				
				}

				
			    public String DIAGR_3;

				public String getDIAGR_3 () {
					return this.DIAGR_3;
				}

				public Boolean DIAGR_3IsNullable(){
				    return true;
				}
				public Boolean DIAGR_3IsKey(){
				    return false;
				}
				public Integer DIAGR_3Length(){
				    return 10;
				}
				public Integer DIAGR_3Precision(){
				    return 0;
				}
				public String DIAGR_3Default(){
				
					return null;
				
				}
				public String DIAGR_3Comment(){
				
				    return "";
				
				}
				public String DIAGR_3Pattern(){
				
					return "";
				
				}
				public String DIAGR_3OriginalDbColumnName(){
				
					return "DIAGR_3";
				
				}

				
			    public BigDecimal DESTINO;

				public BigDecimal getDESTINO () {
					return this.DESTINO;
				}

				public Boolean DESTINOIsNullable(){
				    return true;
				}
				public Boolean DESTINOIsKey(){
				    return false;
				}
				public Integer DESTINOLength(){
				    return 0;
				}
				public Integer DESTINOPrecision(){
				    return 0;
				}
				public String DESTINODefault(){
				
					return "";
				
				}
				public String DESTINOComment(){
				
				    return "";
				
				}
				public String DESTINOPattern(){
				
					return "";
				
				}
				public String DESTINOOriginalDbColumnName(){
				
					return "DESTINO";
				
				}

				
			    public BigDecimal ESTADO_SALIDA;

				public BigDecimal getESTADO_SALIDA () {
					return this.ESTADO_SALIDA;
				}

				public Boolean ESTADO_SALIDAIsNullable(){
				    return true;
				}
				public Boolean ESTADO_SALIDAIsKey(){
				    return false;
				}
				public Integer ESTADO_SALIDALength(){
				    return 0;
				}
				public Integer ESTADO_SALIDAPrecision(){
				    return 0;
				}
				public String ESTADO_SALIDADefault(){
				
					return "";
				
				}
				public String ESTADO_SALIDAComment(){
				
				    return "";
				
				}
				public String ESTADO_SALIDAPattern(){
				
					return "";
				
				}
				public String ESTADO_SALIDAOriginalDbColumnName(){
				
					return "ESTADO_SALIDA";
				
				}

				
			    public String CAUSA_MUERTE;

				public String getCAUSA_MUERTE () {
					return this.CAUSA_MUERTE;
				}

				public Boolean CAUSA_MUERTEIsNullable(){
				    return true;
				}
				public Boolean CAUSA_MUERTEIsKey(){
				    return false;
				}
				public Integer CAUSA_MUERTELength(){
				    return 10;
				}
				public Integer CAUSA_MUERTEPrecision(){
				    return 0;
				}
				public String CAUSA_MUERTEDefault(){
				
					return null;
				
				}
				public String CAUSA_MUERTEComment(){
				
				    return "";
				
				}
				public String CAUSA_MUERTEPattern(){
				
					return "";
				
				}
				public String CAUSA_MUERTEOriginalDbColumnName(){
				
					return "CAUSA_MUERTE";
				
				}

				
			    public java.util.Date FECHA_SALIDA;

				public java.util.Date getFECHA_SALIDA () {
					return this.FECHA_SALIDA;
				}

				public Boolean FECHA_SALIDAIsNullable(){
				    return false;
				}
				public Boolean FECHA_SALIDAIsKey(){
				    return false;
				}
				public Integer FECHA_SALIDALength(){
				    return 0;
				}
				public Integer FECHA_SALIDAPrecision(){
				    return 0;
				}
				public String FECHA_SALIDADefault(){
				
					return null;
				
				}
				public String FECHA_SALIDAComment(){
				
				    return "";
				
				}
				public String FECHA_SALIDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_SALIDAOriginalDbColumnName(){
				
					return "FECHA_SALIDA";
				
				}

				
			    public java.util.Date HORA_SALIDA;

				public java.util.Date getHORA_SALIDA () {
					return this.HORA_SALIDA;
				}

				public Boolean HORA_SALIDAIsNullable(){
				    return false;
				}
				public Boolean HORA_SALIDAIsKey(){
				    return false;
				}
				public Integer HORA_SALIDALength(){
				    return 0;
				}
				public Integer HORA_SALIDAPrecision(){
				    return 0;
				}
				public String HORA_SALIDADefault(){
				
					return null;
				
				}
				public String HORA_SALIDAComment(){
				
				    return "";
				
				}
				public String HORA_SALIDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HORA_SALIDAOriginalDbColumnName(){
				
					return "HORA_SALIDA";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public BigDecimal PROCESOASISTENCIAL_ID_IN;

				public BigDecimal getPROCESOASISTENCIAL_ID_IN () {
					return this.PROCESOASISTENCIAL_ID_IN;
				}

				public Boolean PROCESOASISTENCIAL_ID_INIsNullable(){
				    return false;
				}
				public Boolean PROCESOASISTENCIAL_ID_INIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_ID_INLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_ID_INPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_ID_INDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_ID_INComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_ID_INPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_ID_INOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID_IN";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 31;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return 10;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return 0;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public BigDecimal DIAS_ESTANCIA;

				public BigDecimal getDIAS_ESTANCIA () {
					return this.DIAS_ESTANCIA;
				}

				public Boolean DIAS_ESTANCIAIsNullable(){
				    return true;
				}
				public Boolean DIAS_ESTANCIAIsKey(){
				    return false;
				}
				public Integer DIAS_ESTANCIALength(){
				    return 0;
				}
				public Integer DIAS_ESTANCIAPrecision(){
				    return 0;
				}
				public String DIAS_ESTANCIADefault(){
				
					return "";
				
				}
				public String DIAS_ESTANCIAComment(){
				
				    return "";
				
				}
				public String DIAS_ESTANCIAPattern(){
				
					return "";
				
				}
				public String DIAS_ESTANCIAOriginalDbColumnName(){
				
					return "DIAS_ESTANCIA";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return 0;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 5;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public String CUPS;

				public String getCUPS () {
					return this.CUPS;
				}

				public Boolean CUPSIsNullable(){
				    return true;
				}
				public Boolean CUPSIsKey(){
				    return false;
				}
				public Integer CUPSLength(){
				    return 100;
				}
				public Integer CUPSPrecision(){
				    return 0;
				}
				public String CUPSDefault(){
				
					return null;
				
				}
				public String CUPSComment(){
				
				    return "";
				
				}
				public String CUPSPattern(){
				
					return "";
				
				}
				public String CUPSOriginalDbColumnName(){
				
					return "CUPS";
				
				}

				
			    public BigDecimal ADMISION_ID;

				public BigDecimal getADMISION_ID () {
					return this.ADMISION_ID;
				}

				public Boolean ADMISION_IDIsNullable(){
				    return false;
				}
				public Boolean ADMISION_IDIsKey(){
				    return false;
				}
				public Integer ADMISION_IDLength(){
				    return 0;
				}
				public Integer ADMISION_IDPrecision(){
				    return null;
				}
				public String ADMISION_IDDefault(){
				
					return "";
				
				}
				public String ADMISION_IDComment(){
				
				    return "";
				
				}
				public String ADMISION_IDPattern(){
				
					return "";
				
				}
				public String ADMISION_IDOriginalDbColumnName(){
				
					return "ADMISION_ID";
				
				}

				
			    public BigDecimal TDIAGNOSTICO;

				public BigDecimal getTDIAGNOSTICO () {
					return this.TDIAGNOSTICO;
				}

				public Boolean TDIAGNOSTICOIsNullable(){
				    return true;
				}
				public Boolean TDIAGNOSTICOIsKey(){
				    return false;
				}
				public Integer TDIAGNOSTICOLength(){
				    return 0;
				}
				public Integer TDIAGNOSTICOPrecision(){
				    return 0;
				}
				public String TDIAGNOSTICODefault(){
				
					return "";
				
				}
				public String TDIAGNOSTICOComment(){
				
				    return "";
				
				}
				public String TDIAGNOSTICOPattern(){
				
					return "";
				
				}
				public String TDIAGNOSTICOOriginalDbColumnName(){
				
					return "TDIAGNOSTICO";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 100;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return 0;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return null;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.CODIGO_PRESTADOR = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.FECHA_INGRESO = readDate(dis);
					
					this.HORA_INGRESO = readDate(dis);
					
					this.CONSECUTIVO = readString(dis);
					
						this.FINALIDAD_CONSULTA = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.DIAG_SALIDA = readString(dis);
					
					this.DIAGR_1 = readString(dis);
					
					this.DIAGR_2 = readString(dis);
					
					this.DIAGR_3 = readString(dis);
					
						this.DESTINO = (BigDecimal) dis.readObject();
					
						this.ESTADO_SALIDA = (BigDecimal) dis.readObject();
					
					this.CAUSA_MUERTE = readString(dis);
					
					this.FECHA_SALIDA = readDate(dis);
					
					this.HORA_SALIDA = readDate(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOASISTENCIAL_ID_IN = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
						this.DIAS_ESTANCIA = (BigDecimal) dis.readObject();
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.TDIAGNOSTICO = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.CODIGO_PRESTADOR = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.FECHA_INGRESO = readDate(dis);
					
					this.HORA_INGRESO = readDate(dis);
					
					this.CONSECUTIVO = readString(dis);
					
						this.FINALIDAD_CONSULTA = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.DIAG_SALIDA = readString(dis);
					
					this.DIAGR_1 = readString(dis);
					
					this.DIAGR_2 = readString(dis);
					
					this.DIAGR_3 = readString(dis);
					
						this.DESTINO = (BigDecimal) dis.readObject();
					
						this.ESTADO_SALIDA = (BigDecimal) dis.readObject();
					
					this.CAUSA_MUERTE = readString(dis);
					
					this.FECHA_SALIDA = readDate(dis);
					
					this.HORA_SALIDA = readDate(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOASISTENCIAL_ID_IN = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
						this.DIAS_ESTANCIA = (BigDecimal) dis.readObject();
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.TDIAGNOSTICO = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.CODIGO_PRESTADOR,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_INGRESO,dos);
					
					// String
				
						writeString(this.CONSECUTIVO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FINALIDAD_CONSULTA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.DIAG_SALIDA,dos);
					
					// String
				
						writeString(this.DIAGR_1,dos);
					
					// String
				
						writeString(this.DIAGR_2,dos);
					
					// String
				
						writeString(this.DIAGR_3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DESTINO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO_SALIDA);
					
					// String
				
						writeString(this.CAUSA_MUERTE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_SALIDA,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_SALIDA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID_IN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAS_ESTANCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDIAGNOSTICO);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.CODIGO_PRESTADOR,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_INGRESO,dos);
					
					// String
				
						writeString(this.CONSECUTIVO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FINALIDAD_CONSULTA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.DIAG_SALIDA,dos);
					
					// String
				
						writeString(this.DIAGR_1,dos);
					
					// String
				
						writeString(this.DIAGR_2,dos);
					
					// String
				
						writeString(this.DIAGR_3,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DESTINO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO_SALIDA);
					
					// String
				
						writeString(this.CAUSA_MUERTE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_SALIDA,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_SALIDA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID_IN);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAS_ESTANCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDIAGNOSTICO);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",CODIGO_PRESTADOR="+CODIGO_PRESTADOR);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",FECHA_INGRESO="+String.valueOf(FECHA_INGRESO));
		sb.append(",HORA_INGRESO="+String.valueOf(HORA_INGRESO));
		sb.append(",CONSECUTIVO="+CONSECUTIVO);
		sb.append(",FINALIDAD_CONSULTA="+String.valueOf(FINALIDAD_CONSULTA));
		sb.append(",CAUSA_EXTERNA="+String.valueOf(CAUSA_EXTERNA));
		sb.append(",DIAG_SALIDA="+DIAG_SALIDA);
		sb.append(",DIAGR_1="+DIAGR_1);
		sb.append(",DIAGR_2="+DIAGR_2);
		sb.append(",DIAGR_3="+DIAGR_3);
		sb.append(",DESTINO="+String.valueOf(DESTINO));
		sb.append(",ESTADO_SALIDA="+String.valueOf(ESTADO_SALIDA));
		sb.append(",CAUSA_MUERTE="+CAUSA_MUERTE);
		sb.append(",FECHA_SALIDA="+String.valueOf(FECHA_SALIDA));
		sb.append(",HORA_SALIDA="+String.valueOf(HORA_SALIDA));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",PROCESOASISTENCIAL_ID_IN="+String.valueOf(PROCESOASISTENCIAL_ID_IN));
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",DIAS_ESTANCIA="+String.valueOf(DIAS_ESTANCIA));
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",CUPS="+CUPS);
		sb.append(",ADMISION_ID="+String.valueOf(ADMISION_ID));
		sb.append(",TDIAGNOSTICO="+String.valueOf(TDIAGNOSTICO));
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_4Struct implements routines.system.IPersistableRow<after_tOracleInput_4Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return 0;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return 0;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String CODIGO_PRESTADOR;

				public String getCODIGO_PRESTADOR () {
					return this.CODIGO_PRESTADOR;
				}

				public Boolean CODIGO_PRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODIGO_PRESTADORIsKey(){
				    return false;
				}
				public Integer CODIGO_PRESTADORLength(){
				    return 100;
				}
				public Integer CODIGO_PRESTADORPrecision(){
				    return 0;
				}
				public String CODIGO_PRESTADORDefault(){
				
					return null;
				
				}
				public String CODIGO_PRESTADORComment(){
				
				    return "";
				
				}
				public String CODIGO_PRESTADORPattern(){
				
					return "";
				
				}
				public String CODIGO_PRESTADOROriginalDbColumnName(){
				
					return "CODIGO_PRESTADOR";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 5;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public java.util.Date FECHA_INGRESO;

				public java.util.Date getFECHA_INGRESO () {
					return this.FECHA_INGRESO;
				}

				public Boolean FECHA_INGRESOIsNullable(){
				    return false;
				}
				public Boolean FECHA_INGRESOIsKey(){
				    return false;
				}
				public Integer FECHA_INGRESOLength(){
				    return 0;
				}
				public Integer FECHA_INGRESOPrecision(){
				    return 0;
				}
				public String FECHA_INGRESODefault(){
				
					return null;
				
				}
				public String FECHA_INGRESOComment(){
				
				    return "";
				
				}
				public String FECHA_INGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_INGRESOOriginalDbColumnName(){
				
					return "FECHA_INGRESO";
				
				}

				
			    public java.util.Date HORA_INGRESO;

				public java.util.Date getHORA_INGRESO () {
					return this.HORA_INGRESO;
				}

				public Boolean HORA_INGRESOIsNullable(){
				    return false;
				}
				public Boolean HORA_INGRESOIsKey(){
				    return false;
				}
				public Integer HORA_INGRESOLength(){
				    return 0;
				}
				public Integer HORA_INGRESOPrecision(){
				    return 0;
				}
				public String HORA_INGRESODefault(){
				
					return null;
				
				}
				public String HORA_INGRESOComment(){
				
				    return "";
				
				}
				public String HORA_INGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HORA_INGRESOOriginalDbColumnName(){
				
					return "HORA_INGRESO";
				
				}

				
			    public String CONSECUTIVO;

				public String getCONSECUTIVO () {
					return this.CONSECUTIVO;
				}

				public Boolean CONSECUTIVOIsNullable(){
				    return true;
				}
				public Boolean CONSECUTIVOIsKey(){
				    return false;
				}
				public Integer CONSECUTIVOLength(){
				    return 40;
				}
				public Integer CONSECUTIVOPrecision(){
				    return 0;
				}
				public String CONSECUTIVODefault(){
				
					return null;
				
				}
				public String CONSECUTIVOComment(){
				
				    return "";
				
				}
				public String CONSECUTIVOPattern(){
				
					return "";
				
				}
				public String CONSECUTIVOOriginalDbColumnName(){
				
					return "CONSECUTIVO";
				
				}

				
			    public BigDecimal FINALIDAD_CONSULTA;

				public BigDecimal getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return 0;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return null;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				
			    public BigDecimal CAUSA_EXTERNA;

				public BigDecimal getCAUSA_EXTERNA () {
					return this.CAUSA_EXTERNA;
				}

				public Boolean CAUSA_EXTERNAIsNullable(){
				    return true;
				}
				public Boolean CAUSA_EXTERNAIsKey(){
				    return false;
				}
				public Integer CAUSA_EXTERNALength(){
				    return 0;
				}
				public Integer CAUSA_EXTERNAPrecision(){
				    return 0;
				}
				public String CAUSA_EXTERNADefault(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAComment(){
				
				    return "";
				
				}
				public String CAUSA_EXTERNAPattern(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAOriginalDbColumnName(){
				
					return "CAUSA_EXTERNA";
				
				}

				
			    public String DIAG_SALIDA;

				public String getDIAG_SALIDA () {
					return this.DIAG_SALIDA;
				}

				public Boolean DIAG_SALIDAIsNullable(){
				    return true;
				}
				public Boolean DIAG_SALIDAIsKey(){
				    return false;
				}
				public Integer DIAG_SALIDALength(){
				    return 10;
				}
				public Integer DIAG_SALIDAPrecision(){
				    return 0;
				}
				public String DIAG_SALIDADefault(){
				
					return null;
				
				}
				public String DIAG_SALIDAComment(){
				
				    return "";
				
				}
				public String DIAG_SALIDAPattern(){
				
					return "";
				
				}
				public String DIAG_SALIDAOriginalDbColumnName(){
				
					return "DIAG_SALIDA";
				
				}

				
			    public String DIAGR_1;

				public String getDIAGR_1 () {
					return this.DIAGR_1;
				}

				public Boolean DIAGR_1IsNullable(){
				    return true;
				}
				public Boolean DIAGR_1IsKey(){
				    return false;
				}
				public Integer DIAGR_1Length(){
				    return 10;
				}
				public Integer DIAGR_1Precision(){
				    return 0;
				}
				public String DIAGR_1Default(){
				
					return null;
				
				}
				public String DIAGR_1Comment(){
				
				    return "";
				
				}
				public String DIAGR_1Pattern(){
				
					return "";
				
				}
				public String DIAGR_1OriginalDbColumnName(){
				
					return "DIAGR_1";
				
				}

				
			    public String DIAGR_2;

				public String getDIAGR_2 () {
					return this.DIAGR_2;
				}

				public Boolean DIAGR_2IsNullable(){
				    return true;
				}
				public Boolean DIAGR_2IsKey(){
				    return false;
				}
				public Integer DIAGR_2Length(){
				    return 10;
				}
				public Integer DIAGR_2Precision(){
				    return 0;
				}
				public String DIAGR_2Default(){
				
					return null;
				
				}
				public String DIAGR_2Comment(){
				
				    return "";
				
				}
				public String DIAGR_2Pattern(){
				
					return "";
				
				}
				public String DIAGR_2OriginalDbColumnName(){
				
					return "DIAGR_2";
				
				}

				
			    public String DIAGR_3;

				public String getDIAGR_3 () {
					return this.DIAGR_3;
				}

				public Boolean DIAGR_3IsNullable(){
				    return true;
				}
				public Boolean DIAGR_3IsKey(){
				    return false;
				}
				public Integer DIAGR_3Length(){
				    return 10;
				}
				public Integer DIAGR_3Precision(){
				    return 0;
				}
				public String DIAGR_3Default(){
				
					return null;
				
				}
				public String DIAGR_3Comment(){
				
				    return "";
				
				}
				public String DIAGR_3Pattern(){
				
					return "";
				
				}
				public String DIAGR_3OriginalDbColumnName(){
				
					return "DIAGR_3";
				
				}

				
			    public BigDecimal DESTINO;

				public BigDecimal getDESTINO () {
					return this.DESTINO;
				}

				public Boolean DESTINOIsNullable(){
				    return true;
				}
				public Boolean DESTINOIsKey(){
				    return false;
				}
				public Integer DESTINOLength(){
				    return 0;
				}
				public Integer DESTINOPrecision(){
				    return 0;
				}
				public String DESTINODefault(){
				
					return "";
				
				}
				public String DESTINOComment(){
				
				    return "";
				
				}
				public String DESTINOPattern(){
				
					return "";
				
				}
				public String DESTINOOriginalDbColumnName(){
				
					return "DESTINO";
				
				}

				
			    public BigDecimal ESTADO_SALIDA;

				public BigDecimal getESTADO_SALIDA () {
					return this.ESTADO_SALIDA;
				}

				public Boolean ESTADO_SALIDAIsNullable(){
				    return true;
				}
				public Boolean ESTADO_SALIDAIsKey(){
				    return false;
				}
				public Integer ESTADO_SALIDALength(){
				    return 0;
				}
				public Integer ESTADO_SALIDAPrecision(){
				    return 0;
				}
				public String ESTADO_SALIDADefault(){
				
					return "";
				
				}
				public String ESTADO_SALIDAComment(){
				
				    return "";
				
				}
				public String ESTADO_SALIDAPattern(){
				
					return "";
				
				}
				public String ESTADO_SALIDAOriginalDbColumnName(){
				
					return "ESTADO_SALIDA";
				
				}

				
			    public String CAUSA_MUERTE;

				public String getCAUSA_MUERTE () {
					return this.CAUSA_MUERTE;
				}

				public Boolean CAUSA_MUERTEIsNullable(){
				    return true;
				}
				public Boolean CAUSA_MUERTEIsKey(){
				    return false;
				}
				public Integer CAUSA_MUERTELength(){
				    return 10;
				}
				public Integer CAUSA_MUERTEPrecision(){
				    return 0;
				}
				public String CAUSA_MUERTEDefault(){
				
					return null;
				
				}
				public String CAUSA_MUERTEComment(){
				
				    return "";
				
				}
				public String CAUSA_MUERTEPattern(){
				
					return "";
				
				}
				public String CAUSA_MUERTEOriginalDbColumnName(){
				
					return "CAUSA_MUERTE";
				
				}

				
			    public java.util.Date FECHA_SALIDA;

				public java.util.Date getFECHA_SALIDA () {
					return this.FECHA_SALIDA;
				}

				public Boolean FECHA_SALIDAIsNullable(){
				    return false;
				}
				public Boolean FECHA_SALIDAIsKey(){
				    return false;
				}
				public Integer FECHA_SALIDALength(){
				    return 0;
				}
				public Integer FECHA_SALIDAPrecision(){
				    return 0;
				}
				public String FECHA_SALIDADefault(){
				
					return null;
				
				}
				public String FECHA_SALIDAComment(){
				
				    return "";
				
				}
				public String FECHA_SALIDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_SALIDAOriginalDbColumnName(){
				
					return "FECHA_SALIDA";
				
				}

				
			    public java.util.Date HORA_SALIDA;

				public java.util.Date getHORA_SALIDA () {
					return this.HORA_SALIDA;
				}

				public Boolean HORA_SALIDAIsNullable(){
				    return false;
				}
				public Boolean HORA_SALIDAIsKey(){
				    return false;
				}
				public Integer HORA_SALIDALength(){
				    return 0;
				}
				public Integer HORA_SALIDAPrecision(){
				    return 0;
				}
				public String HORA_SALIDADefault(){
				
					return null;
				
				}
				public String HORA_SALIDAComment(){
				
				    return "";
				
				}
				public String HORA_SALIDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HORA_SALIDAOriginalDbColumnName(){
				
					return "HORA_SALIDA";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public BigDecimal PROCESOASISTENCIAL_ID_IN;

				public BigDecimal getPROCESOASISTENCIAL_ID_IN () {
					return this.PROCESOASISTENCIAL_ID_IN;
				}

				public Boolean PROCESOASISTENCIAL_ID_INIsNullable(){
				    return false;
				}
				public Boolean PROCESOASISTENCIAL_ID_INIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_ID_INLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_ID_INPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_ID_INDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_ID_INComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_ID_INPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_ID_INOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID_IN";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 31;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return 10;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return 0;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public BigDecimal DIAS_ESTANCIA;

				public BigDecimal getDIAS_ESTANCIA () {
					return this.DIAS_ESTANCIA;
				}

				public Boolean DIAS_ESTANCIAIsNullable(){
				    return true;
				}
				public Boolean DIAS_ESTANCIAIsKey(){
				    return false;
				}
				public Integer DIAS_ESTANCIALength(){
				    return 0;
				}
				public Integer DIAS_ESTANCIAPrecision(){
				    return 0;
				}
				public String DIAS_ESTANCIADefault(){
				
					return "";
				
				}
				public String DIAS_ESTANCIAComment(){
				
				    return "";
				
				}
				public String DIAS_ESTANCIAPattern(){
				
					return "";
				
				}
				public String DIAS_ESTANCIAOriginalDbColumnName(){
				
					return "DIAS_ESTANCIA";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return 0;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 5;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public String CUPS;

				public String getCUPS () {
					return this.CUPS;
				}

				public Boolean CUPSIsNullable(){
				    return true;
				}
				public Boolean CUPSIsKey(){
				    return false;
				}
				public Integer CUPSLength(){
				    return 100;
				}
				public Integer CUPSPrecision(){
				    return 0;
				}
				public String CUPSDefault(){
				
					return null;
				
				}
				public String CUPSComment(){
				
				    return "";
				
				}
				public String CUPSPattern(){
				
					return "";
				
				}
				public String CUPSOriginalDbColumnName(){
				
					return "CUPS";
				
				}

				
			    public BigDecimal ADMISION_ID;

				public BigDecimal getADMISION_ID () {
					return this.ADMISION_ID;
				}

				public Boolean ADMISION_IDIsNullable(){
				    return false;
				}
				public Boolean ADMISION_IDIsKey(){
				    return false;
				}
				public Integer ADMISION_IDLength(){
				    return 0;
				}
				public Integer ADMISION_IDPrecision(){
				    return null;
				}
				public String ADMISION_IDDefault(){
				
					return "";
				
				}
				public String ADMISION_IDComment(){
				
				    return "";
				
				}
				public String ADMISION_IDPattern(){
				
					return "";
				
				}
				public String ADMISION_IDOriginalDbColumnName(){
				
					return "ADMISION_ID";
				
				}

				
			    public BigDecimal TDIAGNOSTICO;

				public BigDecimal getTDIAGNOSTICO () {
					return this.TDIAGNOSTICO;
				}

				public Boolean TDIAGNOSTICOIsNullable(){
				    return true;
				}
				public Boolean TDIAGNOSTICOIsKey(){
				    return false;
				}
				public Integer TDIAGNOSTICOLength(){
				    return 0;
				}
				public Integer TDIAGNOSTICOPrecision(){
				    return 0;
				}
				public String TDIAGNOSTICODefault(){
				
					return "";
				
				}
				public String TDIAGNOSTICOComment(){
				
				    return "";
				
				}
				public String TDIAGNOSTICOPattern(){
				
					return "";
				
				}
				public String TDIAGNOSTICOOriginalDbColumnName(){
				
					return "TDIAGNOSTICO";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 100;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return 0;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return null;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.CODIGO_PRESTADOR = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.FECHA_INGRESO = readDate(dis);
					
					this.HORA_INGRESO = readDate(dis);
					
					this.CONSECUTIVO = readString(dis);
					
						this.FINALIDAD_CONSULTA = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.DIAG_SALIDA = readString(dis);
					
					this.DIAGR_1 = readString(dis);
					
					this.DIAGR_2 = readString(dis);
					
					this.DIAGR_3 = readString(dis);
					
						this.DESTINO = (BigDecimal) dis.readObject();
					
						this.ESTADO_SALIDA = (BigDecimal) dis.readObject();
					
					this.CAUSA_MUERTE = readString(dis);
					
					this.FECHA_SALIDA = readDate(dis);
					
					this.HORA_SALIDA = readDate(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOASISTENCIAL_ID_IN = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
						this.DIAS_ESTANCIA = (BigDecimal) dis.readObject();
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.TDIAGNOSTICO = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.CODIGO_PRESTADOR = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.FECHA_INGRESO = readDate(dis);
					
					this.HORA_INGRESO = readDate(dis);
					
					this.CONSECUTIVO = readString(dis);
					
						this.FINALIDAD_CONSULTA = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.DIAG_SALIDA = readString(dis);
					
					this.DIAGR_1 = readString(dis);
					
					this.DIAGR_2 = readString(dis);
					
					this.DIAGR_3 = readString(dis);
					
						this.DESTINO = (BigDecimal) dis.readObject();
					
						this.ESTADO_SALIDA = (BigDecimal) dis.readObject();
					
					this.CAUSA_MUERTE = readString(dis);
					
					this.FECHA_SALIDA = readDate(dis);
					
					this.HORA_SALIDA = readDate(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOASISTENCIAL_ID_IN = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
						this.DIAS_ESTANCIA = (BigDecimal) dis.readObject();
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.TDIAGNOSTICO = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.CODIGO_PRESTADOR,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_INGRESO,dos);
					
					// String
				
						writeString(this.CONSECUTIVO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FINALIDAD_CONSULTA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.DIAG_SALIDA,dos);
					
					// String
				
						writeString(this.DIAGR_1,dos);
					
					// String
				
						writeString(this.DIAGR_2,dos);
					
					// String
				
						writeString(this.DIAGR_3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DESTINO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO_SALIDA);
					
					// String
				
						writeString(this.CAUSA_MUERTE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_SALIDA,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_SALIDA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID_IN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAS_ESTANCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDIAGNOSTICO);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.CODIGO_PRESTADOR,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_INGRESO,dos);
					
					// String
				
						writeString(this.CONSECUTIVO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FINALIDAD_CONSULTA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.DIAG_SALIDA,dos);
					
					// String
				
						writeString(this.DIAGR_1,dos);
					
					// String
				
						writeString(this.DIAGR_2,dos);
					
					// String
				
						writeString(this.DIAGR_3,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DESTINO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO_SALIDA);
					
					// String
				
						writeString(this.CAUSA_MUERTE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_SALIDA,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_SALIDA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID_IN);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAS_ESTANCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDIAGNOSTICO);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",CODIGO_PRESTADOR="+CODIGO_PRESTADOR);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",FECHA_INGRESO="+String.valueOf(FECHA_INGRESO));
		sb.append(",HORA_INGRESO="+String.valueOf(HORA_INGRESO));
		sb.append(",CONSECUTIVO="+CONSECUTIVO);
		sb.append(",FINALIDAD_CONSULTA="+String.valueOf(FINALIDAD_CONSULTA));
		sb.append(",CAUSA_EXTERNA="+String.valueOf(CAUSA_EXTERNA));
		sb.append(",DIAG_SALIDA="+DIAG_SALIDA);
		sb.append(",DIAGR_1="+DIAGR_1);
		sb.append(",DIAGR_2="+DIAGR_2);
		sb.append(",DIAGR_3="+DIAGR_3);
		sb.append(",DESTINO="+String.valueOf(DESTINO));
		sb.append(",ESTADO_SALIDA="+String.valueOf(ESTADO_SALIDA));
		sb.append(",CAUSA_MUERTE="+CAUSA_MUERTE);
		sb.append(",FECHA_SALIDA="+String.valueOf(FECHA_SALIDA));
		sb.append(",HORA_SALIDA="+String.valueOf(HORA_SALIDA));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",PROCESOASISTENCIAL_ID_IN="+String.valueOf(PROCESOASISTENCIAL_ID_IN));
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",DIAS_ESTANCIA="+String.valueOf(DIAS_ESTANCIA));
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",CUPS="+CUPS);
		sb.append(",ADMISION_ID="+String.valueOf(ADMISION_ID));
		sb.append(",TDIAGNOSTICO="+String.valueOf(TDIAGNOSTICO));
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_6Process(globalMap);

		row6Struct row6 = new row6Struct();
insert_uStruct insert_u = new insert_uStruct();





	
	/**
	 * [tOracleOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_9", false);
		start_Hash.put("tOracleOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_u");
					}
				
		int tos_count_tOracleOutput_9 = 0;
		






    
    int nb_line_tOracleOutput_9 = 0;
    int nb_line_update_tOracleOutput_9 = 0;
    int nb_line_inserted_tOracleOutput_9 = 0;
    int nb_line_deleted_tOracleOutput_9 = 0;
    int nb_line_rejected_tOracleOutput_9 = 0;

    int tmp_batchUpdateCount_tOracleOutput_9 = 0;

    int deletedCount_tOracleOutput_9=0;
    int updatedCount_tOracleOutput_9=0;
    int insertedCount_tOracleOutput_9=0;
    int rowsToCommitCount_tOracleOutput_9=0;
    int rejectedCount_tOracleOutput_9=0;

    boolean whetherReject_tOracleOutput_9 = false;

    java.sql.Connection conn_tOracleOutput_9 = null;

    //optional table
    String dbschema_tOracleOutput_9 = null;
    String tableName_tOracleOutput_9 = null;
                    String driverClass_tOracleOutput_9 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_9);
                String url_tOracleOutput_9 = null;
                    url_tOracleOutput_9 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_9 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_9 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_9 = decryptedPassword_tOracleOutput_9;
                dbschema_tOracleOutput_9 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_9 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_9.put("user",dbUser_tOracleOutput_9);
                    atnParamsPrope_tOracleOutput_9.put("password",dbPwd_tOracleOutput_9);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_9.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_9 = java.sql.DriverManager.getConnection(url_tOracleOutput_9, atnParamsPrope_tOracleOutput_9);
        resourceMap.put("conn_tOracleOutput_9", conn_tOracleOutput_9);
            conn_tOracleOutput_9.setAutoCommit(false);
            int commitEvery_tOracleOutput_9 = 1000;
            int commitCounter_tOracleOutput_9 = 0;
        int batchSize_tOracleOutput_9 = 1000;
        int batchSizeCounter_tOracleOutput_9=0;
        int count_tOracleOutput_9=0;

        if(dbschema_tOracleOutput_9 == null || dbschema_tOracleOutput_9.trim().length() == 0) {
            tableName_tOracleOutput_9 = ("BRIPS_URGENCIAS");
        } else {
            tableName_tOracleOutput_9 = dbschema_tOracleOutput_9 + "." + ("BRIPS_URGENCIAS");
        }
                String insert_tOracleOutput_9 = "INSERT INTO " + tableName_tOracleOutput_9 + " (CODFACTURA,CODPRESTADOR,TIPODOCUMENTO,DOCUMENTO,FECHA_INGRESO,HORA_INGRESO,CODAUTORIZACION,FINALIDAD,CAUSA_EXTERNA,CODDIAGSALIDA,DIAGNOSTICO1,DIAGNOSTICO2,DIAGNOSTICO3,DESTINO,ESTADO_SALIDA,CAUSA_MUERTE,FECHA_SALIDA,HORA_SALIDA,TRIPS,PERIODO,PERSONAS_ID,UORG_ID,PROCESOASISTENCIAL_ID,FUERZA_ID,TDOCUMENTO_PROFESIONAL,DOCUMENTO_PROFESIONAL,ESPECIALIDADES_ID,ESPECIALIDAD,PESO,TALLA,UMEDIDA_PESO,UMEDIDA_TALLA,TIPO_USUARIO,TIPO_GENERACION,DIAS_ESTANCIA,EDAD,UMEDIDA_EDAD,CUPS,ADMISION_ID,TDIAGNOSTICO,GRADO_CODIGO,GRADO,CLASEGRD,CLASEGRD_CODIGO) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_9 = conn_tOracleOutput_9.prepareStatement(insert_tOracleOutput_9);
                        resourceMap.put("pstmt_tOracleOutput_9", pstmt_tOracleOutput_9);





 



/**
 * [tOracleOutput_9 begin ] stop
 */



	
	/**
	 * [tMap_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_15", false);
		start_Hash.put("tMap_15", System.currentTimeMillis());
		
	
	currentComponent="tMap_15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_15 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_15__Struct  {
}
Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_uStruct insert_u_tmp = new insert_uStruct();
// ###############################

        
        



        









 



/**
 * [tMap_15 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_4.setFetchSize(1000);


		    String dbquery_tOracleInput_4 = "SELECT \n  '' AS NUMERO_FACTURA,\n  UORG.CODIGO AS CODIGO_PRESTADOR,\n  TDPAC.SIGLA AS TIPO_dOCUMENTO,\n  PAC.DOCUMENTO"
+",\n  ADM.FECHA AS FECHA_INGRESO,\n  ADM.FECHA AS HORA_INGRESO,\n  TO_CHAR(AUT.ID) AS CONSECUTIVO,\n  FINA.CODIGO AS FINA"
+"LIDAD_CONSULTA,\n  TO_NUMBER(CA.CODIGO) AS CAUSA_EXTERNA,\n  CIE.CODIGO AS DIAG_SALIDA,\n  RELACIONADOS.UNO as DIAGR_1 ,"
+"\n  RELACIONADOS.DOS AS DIAGR_2,\n  RELACIONADOS.TRES as DIAGR_3 ,\n  CASE \n    WHEN ALTA.SIGLA = 'R' THEN 2\n    WHEN "
+"ALTA.SIGLA IS NOT NULL AND ALTA.SIGLA NOT IN 'R' THEN 1\n    WHEN ALTA.SIGLA IS NULL AND ALTA.FECHA IS NOT NULL THEN 3 E"
+"ND AS DESTINO,\n  CASE \n    WHEN ALTA.SIGLA = 'M' THEN 2\n    ELSE 1 END AS ESTADO_SALIDA,\n    CASE \n    WHEN ALTA.SI"
+"GLA = 'M' THEN CIE.CODIGO\n  END AS CAUSA_MUERTE,\n  ALTA.FECHA AS FECHA_SALIDA,\n  ALTA.FECHA AS HORA_SALIDA,\n  ADM.PE"
+"RSONAS_ID,\n  ADM.UORG_ID,\n  DIAG2.PROCESOSASISTENCIALES_ID AS PROCESOASISTENCIAL_ID,\n  PROCP.ID AS PROCESOASISTENCIAL"
+"_ID_IN,\n  UORG.FUERZA_ID,\n  TDPRO.SIGLA AS TDOCUMENTO_PROFESIONAL,\n  PRO.DOCUMENTO AS DOCUMENTO_PROFESIONAL,\n  ESPS."
+"ID AS ESPECIALIDADES_ID,\n  ESPS.NOMBRE AS ESPECIALIDAD,\n  AF.TIPO_USUARIO,\n  'Automatico' AS TIPO_GENERACION,\n  TRUN"
+"C(ALTA.FECHA-ADM.FECHA,0) AS DIAS_ESTANCIA, \n    \n  CASE\n    WHEN TRUNC(MONTHS_BETWEEN (PROCP.FINICIAL,PAC.FECHA_NACI"
+"MIENTO)/12)<1\n    THEN TRUNC(MONTHS_BETWEEN (PROCP.FINICIAL,PAC.FECHA_NACIMIENTO))\n    ELSE TRUNC(MONTHS_BETWEEN (PROC"
+"P.FINICIAL,PAC.FECHA_NACIMIENTO)/12) \n  END AS EDAD,\n  CASE       \n    WHEN TRUNC(MONTHS_BETWEEN (PROCP.FINICIAL,PAC."
+"FECHA_NACIMIENTO)/12)<1\n    THEN 'Meses'\n    WHEN TRUNC(MONTHS_BETWEEN (PROCP.FINICIAL,PAC.FECHA_NACIMIENTO)/12)>=1\n "
+"   THEN 'Años'\n  END UMEDIDA_EDAD,\n  \n  CUPS.CODIGO  AS CUPS,\n  ADM.ID AS ADMISION_ID,\n  CASE \n    WHEN DIAG2.TDIA"
+"GNOSTICO = 'Impresión Diagnóstica' THEN TO_NUMBER('1')\n    WHEN DIAG2.TDIAGNOSTICO = 'Confirmado Nuevo' THEN TO_NUMBER("
+"'2')\n    WHEN DIAG2.TDIAGNOSTICO = 'Confirmado Repetido' THEN TO_NUMBER('3')\n  END AS TDIAGNOSTICO,\n  \n  AF.GRADO_CO"
+"DIGO AS GRADO_CODIGO,\n  AF.GRADO AS GRADO,\n  AF.CLASEGRD AS CLASEGRD,\n  CLASEGRD_CODIGO\n    \nFROM ADM_ADMISIONES AD"
+"M\nINNER JOIN ADM_SERVTRATANTES SERV ON SERV.ADMISIONES_ID = ADM.ID AND SERV.ESTREGISTRO_ID = 1 \nINNER JOIN GEN_SERVICI"
+"OS SE ON SE.ID = SERV.SERVICIOS_ID AND SE.SIGLA = 'U'\nLEFT JOIN RCA_AUTORIZACION AUT ON AUT.ID = SERV.AUTORIZACION_ID\n"
+"INNER JOIN GEN_UORG UORG ON UORG.ID = ADM.UORG_ID AND UORG.ESTREGISTRO_ID = 1\nINNER JOIN GEN_PERSONAS PAC ON PAC.ID = A"
+"DM.PERSONAS_ID \nINNER JOIN GEN_TDOCUMENTOS TDPAC ON TDPAC.ID = PAC.TDOCUMENTOS_ID\n/*---*/\nLEFT JOIN ( SELECT \n      "
+"        AFI.PERSONAS_ID,\n              CASE \n                WHEN PLANAFI.CODIGO = '2' THEN 'No cotizante'\n          "
+"      WHEN PLANAFI.CODIGO IN ('1','3','4','5','6','7','8','9','10') AND ATC.SIGLA='ACT' THEN 'Cotizante Activo' \n      "
+"          WHEN PLANAFI.CODIGO IN ('1','3','4','5','6','7','8','9','10') AND ATC.SIGLA IN ('RET','PEN') THEN 'Cotizante P"
+"ensionado / Retirado' \n                WHEN PLANAFI.CODIGO IN ('11','12','13','14','15','16','17','18') THEN 'Beneficia"
+"rio' \n                WHEN PLANAFI.CODIGO IN ('1','3','4','5','6','7','8','9','10') AND ATC.SIGLA IN ('PAR','NOC') THEN"
+" 'Otro cotizante'\n              END  AS TIPO_USUARIO,\n              GRDM.CODIGO AS GRADO_CODIGO,\n              GRDM.N"
+"OMBRE AS GRADO,\n              CLS.DESCRIPCION AS CLASEGRD,\n              CLS.CODIGO AS CLASEGRD_CODIGO\n              "
+"\n            FROM GEN_AFILIADOS AFI \n            INNER JOIN AFI_PLANAFILIACIONES PLANAFI ON PLANAFI.ID = AFI.PLANAFILI"
+"ACIONES_ID AND PLANAFI.ESTREGISTRO_ID=1\n            INNER JOIN GEN_AFILIADOS_ENTAPORTANTE AENT ON  ( AENT.AFILIADOS_ID="
+" AFI.padre_id OR (AENT.AFILIADOS_ID = AFI.ID AND AFI.PADRE_ID IS NULL) ) AND AENT.PRINCIPAL = 1 AND AENT.ESTREGISTRO_ID "
+"= 1\n            INNER JOIN AFI_TVINCULACIONES AT ON AT.ID= AENT.TVINCULACIONES_ID\n            INNER JOIN AFI_TCOTIZACI"
+"ON ATC ON ATC.ID=AT.TCOTIZACION_ID\n            INNER JOIN GEN_GRDMILITARES GRDM ON GRDM.ID = AENT.GRDMILITARES_ID\n    "
+"        INNER JOIN GEN_CLASEGRD CLS ON CLS.ID = GRDM.CLASEGRD_ID\n            WHERE AFI.ESTREGISTRO_ID=1 \n          ) A"
+"F ON AF.PERSONAS_ID = PAC.ID        \n/*---*/\nINNER JOIN HCL_DIAGNOSTICOS DIAG2 ON DIAG2.ID = (SELECT MAX(D.ID) FROM HC"
+"L_DIAGNOSTICOS D\n                                                    INNER JOIN HCL_PROCESOSASISTENCIALES P ON P.ID = D"
+".PROCESOSASISTENCIALES_ID\n                                                    INNER JOIN ADM_ESPTRATANTES ESP ON ESP.ID"
+" = P.ESPTRATANTES_ID\n                                                    INNER JOIN ADM_SERVTRATANTES SRV on SRV.id = E"
+"SP.SERVTRATANTES_ID\n                                                    WHERE SRV.ADMISIONES_ID = ADM.ID /*ESP.SERVTRAT"
+"ANTES_ID = SERV.ID*/\n                                                    )\n/*---*/\nINNER JOIN HCL_PROCESOSASISTENCIAL"
+"ES PROCS ON PROCS.ID = DIAG2.PROCESOSASISTENCIALES_ID\nINNER JOIN GEN_USUARIOS USU ON  USU.ID = PROCS.USUARIOS_ID\nINNER"
+" JOIN GEN_PERSONAS PRO ON PRO.ID = USU.PERSONAS_ID \nINNER JOIN GEN_TDOCUMENTOS TDPRO ON TDPRO.ID = PRO.TDOCUMENTOS_ID\n"
+"INNER JOIN ADM_ESPTRATANTES ESPT ON ESPT.ID = PROCS.ESPTRATANTES_ID\nINNER JOIN GEN_ESPECIALIDADES ESPS ON ESPS.ID = ESP"
+"T.ESPECIALIDADES_ID\nLEFT JOIN HCL_VALORACIONES VALS ON VALS.PROCESOSASISTENCIALES_ID =PROCS.ID\nLEFT JOIN GEN_CUPS CUPS"
+" ON CUPS.ID = VALS.CUPS_ID\n/*---*/\nLEFT JOIN GEN_CIE10 CIE ON CIE.ID = DIAG2.CIE10_ID\nLEFT JOIN (\n                  "
+"SELECT * FROM (SELECT RELA.CIE10,NUM.NUMERO AS NUMERO_123,RELA.DIAGNOSTICOS_ID FROM (\n                  SELECT \n      "
+"            ROW_NUMBER()OVER (PARTITION BY DIAG.ID_DI ORDER BY DIAG.ID_DI) AS NUMERO ,\n                  DIAG.ID_DI AS "
+"DIAGNOSTICOS_ID,\n                  CIE.CODIGO AS CIE10\n                  FROM (SELECT \n                        DI.ID "
+"AS ID_DI\n                        FROM  HCL_DIAGNOSTICOS DI \n                         ) DIAG\n                  INNER J"
+"OIN HCL_DIAGRELACIONADOS RE ON RE.DIAGNOSTICOS_ID = DIAG.ID_DI\n                  INNER JOIN GEN_CIE10 CIE ON CIE.ID = R"
+"E.CIE10_ID\n                  ) RELA\n                  \n                  RIGHT JOIN (SELECT '1' AS NUMERO FROM DUAL\n"
+"                              UNION\n                              SELECT '2' AS NUMERO FROM DUAL\n                     "
+"         UNION \n                              SELECT '3' AS NUMERO FROM DUAL \n                              ) NUM ON N"
+"UM.NUMERO = RELA.NUMERO\n                                    ) \n                  PIVOT \n                  (\n        "
+"            MIN(CIE10)\n                    FOR NUMERO_123\n                    IN ( '1' UNO, '2' DOS,'3' TRES) \n      "
+"            )) RELACIONADOS ON RELACIONADOS.DIAGNOSTICOS_ID = DIAG2.ID\nINNER JOIN HCL_PROCESOSASISTENCIALES PROCP ON PR"
+"OCP.ID = (SELECT MIN(P.ID) FROM HCL_PROCESOSASISTENCIALES P\n                                                           "
+" INNER JOIN ADM_ESPTRATANTES ESP ON ESP.ID = P.ESPTRATANTES_ID\n                                                        "
+"    INNER JOIN ADM_SERVTRATANTES SRV on SRV.id = ESP.SERVTRATANTES_ID\n                                                 "
+"           WHERE SRV.ADMISIONES_ID = ADM.ID /*ESP.SERVTRATANTES_ID = SERV.ID*/\n                                        "
+"                  ) \n                                                      \nLEFT JOIN HCL_VALORACIONES VAL ON VAL.PROC"
+"ESOSASISTENCIALES_ID =PROCP.ID\nLEFT JOIN GEN_FINALIDADCONSULTA FINA ON FINA.ID = VAL.FINALIDADCONSULTA_ID  \nLEFT JOIN "
+"GEN_CAUSAEXTERNA CA ON CA.ID = VAL.CAUSAEXTERNA_ID\nINNER JOIN (SELECT HAL.FECHA,SERV.ADMISIONES_ID, AL.ID, TAL.SIGLA FR"
+"OM ADM_ALTASADMTVS AL\n              INNER JOIN ADM_HALTASADMTVS HAL ON HAL.ALTASADMTVS_ID = AL.ID AND HAL.ESTADO = 'Ace"
+"ptada'\n              INNER JOIN ADM_ESPTRATANTES ESP ON ESP.ID = AL.ESPTRATANTES_ID\n              INNER JOIN ADM_TALTA"
+"SMEDICAS TAL ON TAL.ID = AL.TALTASMEDICAS_ID\n              INNER JOIN ADM_SERVTRATANTES SERV ON SERV.ID = ESP.SERVTRATA"
+"NTES_ID) ALTA ON ALTA.ADMISIONES_ID = ADM.ID\n\nWHERE ADM.ESTREGISTRO_ID = 1 "+context.CONDICION_URGENCIAS;
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row6.NUMERO_FACTURA = null;
							} else {
	                         		
        	row6.NUMERO_FACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row6.CODIGO_PRESTADOR = null;
							} else {
	                         		
        	row6.CODIGO_PRESTADOR = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row6.TIPO_DOCUMENTO = null;
							} else {
	                         		
        	row6.TIPO_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 4) {
								row6.DOCUMENTO = null;
							} else {
	                         		
        	row6.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 5) {
								row6.FECHA_INGRESO = null;
							} else {
										
			row6.FECHA_INGRESO = routines.system.JDBCUtil.getDate(rs_tOracleInput_4, 5);
		                    }
							if(colQtyInRs_tOracleInput_4 < 6) {
								row6.HORA_INGRESO = null;
							} else {
										
			row6.HORA_INGRESO = routines.system.JDBCUtil.getDate(rs_tOracleInput_4, 6);
		                    }
							if(colQtyInRs_tOracleInput_4 < 7) {
								row6.CONSECUTIVO = null;
							} else {
	                         		
        	row6.CONSECUTIVO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 8) {
								row6.FINALIDAD_CONSULTA = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(8) != null) {
						row6.FINALIDAD_CONSULTA = rs_tOracleInput_4.getBigDecimal(8);
					} else {
				
						row6.FINALIDAD_CONSULTA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 9) {
								row6.CAUSA_EXTERNA = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(9) != null) {
						row6.CAUSA_EXTERNA = rs_tOracleInput_4.getBigDecimal(9);
					} else {
				
						row6.CAUSA_EXTERNA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 10) {
								row6.DIAG_SALIDA = null;
							} else {
	                         		
        	row6.DIAG_SALIDA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 11) {
								row6.DIAGR_1 = null;
							} else {
	                         		
        	row6.DIAGR_1 = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 12) {
								row6.DIAGR_2 = null;
							} else {
	                         		
        	row6.DIAGR_2 = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 13) {
								row6.DIAGR_3 = null;
							} else {
	                         		
        	row6.DIAGR_3 = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 14) {
								row6.DESTINO = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(14) != null) {
						row6.DESTINO = rs_tOracleInput_4.getBigDecimal(14);
					} else {
				
						row6.DESTINO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 15) {
								row6.ESTADO_SALIDA = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(15) != null) {
						row6.ESTADO_SALIDA = rs_tOracleInput_4.getBigDecimal(15);
					} else {
				
						row6.ESTADO_SALIDA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 16) {
								row6.CAUSA_MUERTE = null;
							} else {
	                         		
        	row6.CAUSA_MUERTE = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 17) {
								row6.FECHA_SALIDA = null;
							} else {
										
			row6.FECHA_SALIDA = routines.system.JDBCUtil.getDate(rs_tOracleInput_4, 17);
		                    }
							if(colQtyInRs_tOracleInput_4 < 18) {
								row6.HORA_SALIDA = null;
							} else {
										
			row6.HORA_SALIDA = routines.system.JDBCUtil.getDate(rs_tOracleInput_4, 18);
		                    }
							if(colQtyInRs_tOracleInput_4 < 19) {
								row6.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(19) != null) {
						row6.PERSONAS_ID = rs_tOracleInput_4.getBigDecimal(19);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 20) {
								row6.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(20) != null) {
						row6.UORG_ID = rs_tOracleInput_4.getBigDecimal(20);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 21) {
								row6.PROCESOASISTENCIAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(21) != null) {
						row6.PROCESOASISTENCIAL_ID = rs_tOracleInput_4.getBigDecimal(21);
					} else {
				
						row6.PROCESOASISTENCIAL_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 22) {
								row6.PROCESOASISTENCIAL_ID_IN = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(22) != null) {
						row6.PROCESOASISTENCIAL_ID_IN = rs_tOracleInput_4.getBigDecimal(22);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 23) {
								row6.FUERZA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(23) != null) {
						row6.FUERZA_ID = rs_tOracleInput_4.getBigDecimal(23);
					} else {
				
						row6.FUERZA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 24) {
								row6.TDOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row6.TDOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 24, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 25) {
								row6.DOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row6.DOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 25, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 26) {
								row6.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(26) != null) {
						row6.ESPECIALIDADES_ID = rs_tOracleInput_4.getBigDecimal(26);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 27) {
								row6.ESPECIALIDAD = null;
							} else {
	                         		
        	row6.ESPECIALIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 27, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 28) {
								row6.TIPO_USUARIO = null;
							} else {
	                         		
        	row6.TIPO_USUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 28, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 29) {
								row6.TIPO_GENERACION = null;
							} else {
	                         		
        	row6.TIPO_GENERACION = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 29, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 30) {
								row6.DIAS_ESTANCIA = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(30) != null) {
						row6.DIAS_ESTANCIA = rs_tOracleInput_4.getBigDecimal(30);
					} else {
				
						row6.DIAS_ESTANCIA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 31) {
								row6.EDAD = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(31) != null) {
						row6.EDAD = rs_tOracleInput_4.getBigDecimal(31);
					} else {
				
						row6.EDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 32) {
								row6.UMEDIDA_EDAD = null;
							} else {
	                         		
        	row6.UMEDIDA_EDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 32, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 33) {
								row6.CUPS = null;
							} else {
	                         		
        	row6.CUPS = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 33, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 34) {
								row6.ADMISION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(34) != null) {
						row6.ADMISION_ID = rs_tOracleInput_4.getBigDecimal(34);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 35) {
								row6.TDIAGNOSTICO = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(35) != null) {
						row6.TDIAGNOSTICO = rs_tOracleInput_4.getBigDecimal(35);
					} else {
				
						row6.TDIAGNOSTICO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 36) {
								row6.GRADO_CODIGO = null;
							} else {
	                         		
        	row6.GRADO_CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 36, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 37) {
								row6.GRADO = null;
							} else {
	                         		
        	row6.GRADO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 37, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 38) {
								row6.CLASEGRD = null;
							} else {
	                         		
        	row6.CLASEGRD = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 38, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 39) {
								row6.CLASEGRD_CODIGO = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(39) != null) {
						row6.CLASEGRD_CODIGO = rs_tOracleInput_4.getBigDecimal(39);
					} else {
				
						row6.CLASEGRD_CODIGO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_15 main ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;
		
						row8Struct row8 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_15 = false;
		boolean mainRowRejected_tMap_15 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_15) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_15 = false;
								
                        		    		    row8HashKey.PROCESOSASISTENCIALES_ID = row6.PROCESOASISTENCIAL_ID ;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row8 != null && tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.PROCESOSASISTENCIALES_ID = '" + row8HashKey.PROCESOSASISTENCIALES_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								 
							
							
								if (tHash_Lookup_row8 !=null && tHash_Lookup_row8.hasNext()) { // G 099
								
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							
							
								} // G 099
							
							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
        // ###############################
        // # Output tables

insert_u = null;


// # Output table : 'insert_u'
insert_u_tmp.CODFACTURA = row6.NUMERO_FACTURA ;
insert_u_tmp.CODPRESTADOR = row6.CODIGO_PRESTADOR ;
insert_u_tmp.TIPODOCUMENTO = row6.TIPO_DOCUMENTO ;
insert_u_tmp.DOCUMENTO = row6.DOCUMENTO ;
insert_u_tmp.FECHA_INGRESO = row6.FECHA_INGRESO ;
insert_u_tmp.HORA_INGRESO = row6.HORA_INGRESO ;
insert_u_tmp.CODAUTORIZACION = row6.CONSECUTIVO ;
insert_u_tmp.FINALIDAD = row6.FINALIDAD_CONSULTA ;
insert_u_tmp.CAUSA_EXTERNA = row6.CAUSA_EXTERNA ;
insert_u_tmp.CODDIAGSALIDA = row6.DIAG_SALIDA ;
insert_u_tmp.DIAGNOSTICO1 = row6.DIAGR_1 ;
insert_u_tmp.DIAGNOSTICO2 = row6.DIAGR_2 ;
insert_u_tmp.DIAGNOSTICO3 = row6.DIAGR_3 ;
insert_u_tmp.DESTINO = row6.DESTINO ;
insert_u_tmp.ESTADO_SALIDA = row6.ESTADO_SALIDA ;
insert_u_tmp.CAUSA_MUERTE = row6.CAUSA_MUERTE ;
insert_u_tmp.FECHA_SALIDA = row6.FECHA_SALIDA ;
insert_u_tmp.HORA_SALIDA = row6.HORA_SALIDA ;
insert_u_tmp.TRIPS = "Interna";
insert_u_tmp.PERIODO = TalendDate.formatDate("yyyy-MM",row6.FECHA_INGRESO);
insert_u_tmp.PERSONAS_ID = row6.PERSONAS_ID ;
insert_u_tmp.UORG_ID = row6.UORG_ID ;
insert_u_tmp.PROCESOASISTENCIAL_ID = row6.PROCESOASISTENCIAL_ID ;
insert_u_tmp.FUERZA_ID = row6.FUERZA_ID ;
insert_u_tmp.TDOCUMENTO_PROFESIONAL = row6.TDOCUMENTO_PROFESIONAL ;
insert_u_tmp.DOCUMENTO_PROFESIONAL = row6.DOCUMENTO_PROFESIONAL ;
insert_u_tmp.ESPECIALIDADES_ID = row6.ESPECIALIDADES_ID ;
insert_u_tmp.ESPECIALIDAD = row6.ESPECIALIDAD ;
insert_u_tmp.PESO = row8.PESO_VALOR;
insert_u_tmp.TALLA = row8.ESTATURA_VALOR;
insert_u_tmp.UMEDIDA_PESO = row8.PESO_UMEDIDA ;
insert_u_tmp.UMEDIDA_TALLA = row8.ESTATURA_UMEDIDA ;
insert_u_tmp.TIPO_USUARIO = row6.TIPO_USUARIO ;
insert_u_tmp.TIPO_GENERACION = row6.TIPO_GENERACION ;
insert_u_tmp.DIAS_ESTANCIA = row6.DIAS_ESTANCIA ;
insert_u_tmp.EDAD = row6.EDAD ;
insert_u_tmp.UMEDIDA_EDAD = row6.UMEDIDA_EDAD ;
insert_u_tmp.CUPS = row6.CUPS ;
insert_u_tmp.ADMISION_ID = row6.ADMISION_ID ;
insert_u_tmp.TDIAGNOSTICO = row6.TDIAGNOSTICO ;
insert_u_tmp.GRADO_CODIGO = row6.GRADO_CODIGO ;
insert_u_tmp.GRADO = row6.GRADO ;
insert_u_tmp.CLASEGRD = row6.CLASEGRD ;
insert_u_tmp.CLASEGRD_CODIGO = row6.CLASEGRD_CODIGO ;
insert_u = insert_u_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_15 = false;










 


	tos_count_tMap_15++;

/**
 * [tMap_15 main ] stop
 */
	
	/**
	 * [tMap_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	

 



/**
 * [tMap_15 process_data_begin ] stop
 */
// Start of branch "insert_u"
if(insert_u != null) { 



	
	/**
	 * [tOracleOutput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_u"
						
						);
					}
					



        whetherReject_tOracleOutput_9 = false;
                        if(insert_u.CODFACTURA == null) {
pstmt_tOracleOutput_9.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(1, insert_u.CODFACTURA);
}

                        if(insert_u.CODPRESTADOR == null) {
pstmt_tOracleOutput_9.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(2, insert_u.CODPRESTADOR);
}

                        if(insert_u.TIPODOCUMENTO == null) {
pstmt_tOracleOutput_9.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(3, insert_u.TIPODOCUMENTO);
}

                        if(insert_u.DOCUMENTO == null) {
pstmt_tOracleOutput_9.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(4, insert_u.DOCUMENTO);
}

                        if(insert_u.FECHA_INGRESO != null) {
pstmt_tOracleOutput_9.setObject(5, new java.sql.Timestamp(insert_u.FECHA_INGRESO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_9.setNull(5, java.sql.Types.DATE);
}

                        if(insert_u.HORA_INGRESO != null) {
pstmt_tOracleOutput_9.setObject(6, new java.sql.Timestamp(insert_u.HORA_INGRESO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_9.setNull(6, java.sql.Types.DATE);
}

                        if(insert_u.CODAUTORIZACION == null) {
pstmt_tOracleOutput_9.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(7, insert_u.CODAUTORIZACION);
}

                        pstmt_tOracleOutput_9.setBigDecimal(8, insert_u.FINALIDAD);

                        pstmt_tOracleOutput_9.setBigDecimal(9, insert_u.CAUSA_EXTERNA);

                        if(insert_u.CODDIAGSALIDA == null) {
pstmt_tOracleOutput_9.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(10, insert_u.CODDIAGSALIDA);
}

                        if(insert_u.DIAGNOSTICO1 == null) {
pstmt_tOracleOutput_9.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(11, insert_u.DIAGNOSTICO1);
}

                        if(insert_u.DIAGNOSTICO2 == null) {
pstmt_tOracleOutput_9.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(12, insert_u.DIAGNOSTICO2);
}

                        if(insert_u.DIAGNOSTICO3 == null) {
pstmt_tOracleOutput_9.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(13, insert_u.DIAGNOSTICO3);
}

                        pstmt_tOracleOutput_9.setBigDecimal(14, insert_u.DESTINO);

                        pstmt_tOracleOutput_9.setBigDecimal(15, insert_u.ESTADO_SALIDA);

                        if(insert_u.CAUSA_MUERTE == null) {
pstmt_tOracleOutput_9.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(16, insert_u.CAUSA_MUERTE);
}

                        if(insert_u.FECHA_SALIDA != null) {
pstmt_tOracleOutput_9.setObject(17, new java.sql.Timestamp(insert_u.FECHA_SALIDA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_9.setNull(17, java.sql.Types.DATE);
}

                        if(insert_u.HORA_SALIDA != null) {
pstmt_tOracleOutput_9.setObject(18, new java.sql.Timestamp(insert_u.HORA_SALIDA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_9.setNull(18, java.sql.Types.DATE);
}

                        if(insert_u.TRIPS == null) {
pstmt_tOracleOutput_9.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(19, insert_u.TRIPS);
}

                        if(insert_u.PERIODO == null) {
pstmt_tOracleOutput_9.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(20, insert_u.PERIODO);
}

                        pstmt_tOracleOutput_9.setBigDecimal(21, insert_u.PERSONAS_ID);

                        pstmt_tOracleOutput_9.setBigDecimal(22, insert_u.UORG_ID);

                        pstmt_tOracleOutput_9.setBigDecimal(23, insert_u.PROCESOASISTENCIAL_ID);

                        pstmt_tOracleOutput_9.setBigDecimal(24, insert_u.FUERZA_ID);

                        if(insert_u.TDOCUMENTO_PROFESIONAL == null) {
pstmt_tOracleOutput_9.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(25, insert_u.TDOCUMENTO_PROFESIONAL);
}

                        if(insert_u.DOCUMENTO_PROFESIONAL == null) {
pstmt_tOracleOutput_9.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(26, insert_u.DOCUMENTO_PROFESIONAL);
}

                        pstmt_tOracleOutput_9.setBigDecimal(27, insert_u.ESPECIALIDADES_ID);

                        if(insert_u.ESPECIALIDAD == null) {
pstmt_tOracleOutput_9.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(28, insert_u.ESPECIALIDAD);
}

                        if(insert_u.PESO == null) {
pstmt_tOracleOutput_9.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(29, insert_u.PESO);
}

                        if(insert_u.TALLA == null) {
pstmt_tOracleOutput_9.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(30, insert_u.TALLA);
}

                        if(insert_u.UMEDIDA_PESO == null) {
pstmt_tOracleOutput_9.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(31, insert_u.UMEDIDA_PESO);
}

                        if(insert_u.UMEDIDA_TALLA == null) {
pstmt_tOracleOutput_9.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(32, insert_u.UMEDIDA_TALLA);
}

                        if(insert_u.TIPO_USUARIO == null) {
pstmt_tOracleOutput_9.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(33, insert_u.TIPO_USUARIO);
}

                        if(insert_u.TIPO_GENERACION == null) {
pstmt_tOracleOutput_9.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(34, insert_u.TIPO_GENERACION);
}

                        pstmt_tOracleOutput_9.setBigDecimal(35, insert_u.DIAS_ESTANCIA);

                        pstmt_tOracleOutput_9.setBigDecimal(36, insert_u.EDAD);

                        if(insert_u.UMEDIDA_EDAD == null) {
pstmt_tOracleOutput_9.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(37, insert_u.UMEDIDA_EDAD);
}

                        if(insert_u.CUPS == null) {
pstmt_tOracleOutput_9.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(38, insert_u.CUPS);
}

                        pstmt_tOracleOutput_9.setBigDecimal(39, insert_u.ADMISION_ID);

                        pstmt_tOracleOutput_9.setBigDecimal(40, insert_u.TDIAGNOSTICO);

                        if(insert_u.GRADO_CODIGO == null) {
pstmt_tOracleOutput_9.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(41, insert_u.GRADO_CODIGO);
}

                        if(insert_u.GRADO == null) {
pstmt_tOracleOutput_9.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(42, insert_u.GRADO);
}

                        if(insert_u.CLASEGRD == null) {
pstmt_tOracleOutput_9.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(43, insert_u.CLASEGRD);
}

                        pstmt_tOracleOutput_9.setBigDecimal(44, insert_u.CLASEGRD_CODIGO);

                pstmt_tOracleOutput_9.addBatch();
                nb_line_tOracleOutput_9++;
                batchSizeCounter_tOracleOutput_9++;
            if (batchSize_tOracleOutput_9 > 0 &&  batchSize_tOracleOutput_9 <= batchSizeCounter_tOracleOutput_9) {
                try {
                    pstmt_tOracleOutput_9.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_9){
globalMap.put("tOracleOutput_9_ERROR_MESSAGE",e_tOracleOutput_9.getMessage());
			        java.sql.SQLException ne_tOracleOutput_9 = e_tOracleOutput_9.getNextException(),sqle_tOracleOutput_9=null;
			    	String errormessage_tOracleOutput_9;
					if (ne_tOracleOutput_9 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_9 = new java.sql.SQLException(e_tOracleOutput_9.getMessage() + "\ncaused by: " + ne_tOracleOutput_9.getMessage(), ne_tOracleOutput_9.getSQLState(), ne_tOracleOutput_9.getErrorCode(), ne_tOracleOutput_9);
						errormessage_tOracleOutput_9 = sqle_tOracleOutput_9.getMessage();
					}else{
						errormessage_tOracleOutput_9 = e_tOracleOutput_9.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_9);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_9 = pstmt_tOracleOutput_9.getUpdateCount();
                    insertedCount_tOracleOutput_9
                += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                rowsToCommitCount_tOracleOutput_9 += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                batchSizeCounter_tOracleOutput_9 = 0;
            }
                commitCounter_tOracleOutput_9++;
                if(commitEvery_tOracleOutput_9 <= commitCounter_tOracleOutput_9) {
                    if(batchSizeCounter_tOracleOutput_9 > 0) {
                        try {
                            pstmt_tOracleOutput_9.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_9){
globalMap.put("tOracleOutput_9_ERROR_MESSAGE",e_tOracleOutput_9.getMessage());
					        java.sql.SQLException ne_tOracleOutput_9 = e_tOracleOutput_9.getNextException(),sqle_tOracleOutput_9=null;
					    	String errormessage_tOracleOutput_9;
							if (ne_tOracleOutput_9 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_9 = new java.sql.SQLException(e_tOracleOutput_9.getMessage() + "\ncaused by: " + ne_tOracleOutput_9.getMessage(), ne_tOracleOutput_9.getSQLState(), ne_tOracleOutput_9.getErrorCode(), ne_tOracleOutput_9);
								errormessage_tOracleOutput_9 = sqle_tOracleOutput_9.getMessage();
							}else{
								errormessage_tOracleOutput_9 = e_tOracleOutput_9.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_9);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_9 = pstmt_tOracleOutput_9.getUpdateCount();
                            insertedCount_tOracleOutput_9
                        += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                        rowsToCommitCount_tOracleOutput_9 += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_9 != 0){
                    	
                    }
                    conn_tOracleOutput_9.commit();
                    if(rowsToCommitCount_tOracleOutput_9 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_9 = 0;
                    }
                    commitCounter_tOracleOutput_9=0;
                    	batchSizeCounter_tOracleOutput_9=0;
                }

 


	tos_count_tOracleOutput_9++;

/**
 * [tOracleOutput_9 main ] stop
 */
	
	/**
	 * [tOracleOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	

 



/**
 * [tOracleOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	

 



/**
 * [tOracleOutput_9 process_data_end ] stop
 */

} // End of branch "insert_u"




	
	/**
	 * [tMap_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	

 



/**
 * [tMap_15 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tMap_15 end ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_15", true);
end_Hash.put("tMap_15", System.currentTimeMillis());




/**
 * [tMap_15 end ] stop
 */

	
	/**
	 * [tOracleOutput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_9 > 0) {
            try {
            	if (pstmt_tOracleOutput_9 != null) {
					
					pstmt_tOracleOutput_9.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_9){
globalMap.put("tOracleOutput_9_ERROR_MESSAGE",e_tOracleOutput_9.getMessage());
		        java.sql.SQLException ne_tOracleOutput_9 = e_tOracleOutput_9.getNextException(),sqle_tOracleOutput_9=null;
		    	String errormessage_tOracleOutput_9;
				if (ne_tOracleOutput_9 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_9 = new java.sql.SQLException(e_tOracleOutput_9.getMessage() + "\ncaused by: " + ne_tOracleOutput_9.getMessage(), ne_tOracleOutput_9.getSQLState(), ne_tOracleOutput_9.getErrorCode(), ne_tOracleOutput_9);
					errormessage_tOracleOutput_9 = sqle_tOracleOutput_9.getMessage();
				}else{
					errormessage_tOracleOutput_9 = e_tOracleOutput_9.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_9);
            	
        	}
        	if (pstmt_tOracleOutput_9 != null) {
            	tmp_batchUpdateCount_tOracleOutput_9 = pstmt_tOracleOutput_9.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_9
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
				rowsToCommitCount_tOracleOutput_9 += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
            }
        }
        if(pstmt_tOracleOutput_9 != null) {
			
				pstmt_tOracleOutput_9.close();
				resourceMap.remove("pstmt_tOracleOutput_9");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_9", true);
		if(commitCounter_tOracleOutput_9 > 0 && rowsToCommitCount_tOracleOutput_9 != 0) {
			
		}
		conn_tOracleOutput_9.commit();
		if(commitCounter_tOracleOutput_9 > 0 && rowsToCommitCount_tOracleOutput_9 != 0) {
			
			rowsToCommitCount_tOracleOutput_9 = 0;
		}
		commitCounter_tOracleOutput_9 = 0;
		
		
		conn_tOracleOutput_9 .close();
		
		resourceMap.put("finish_tOracleOutput_9", true);
   	

	
	nb_line_deleted_tOracleOutput_9=nb_line_deleted_tOracleOutput_9+ deletedCount_tOracleOutput_9;
	nb_line_update_tOracleOutput_9=nb_line_update_tOracleOutput_9 + updatedCount_tOracleOutput_9;
	nb_line_inserted_tOracleOutput_9=nb_line_inserted_tOracleOutput_9 + insertedCount_tOracleOutput_9;
	nb_line_rejected_tOracleOutput_9=nb_line_rejected_tOracleOutput_9 + rejectedCount_tOracleOutput_9;
	
        globalMap.put("tOracleOutput_9_NB_LINE",nb_line_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_UPDATED",nb_line_update_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_9);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_u");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_9", true);
end_Hash.put("tOracleOutput_9", System.currentTimeMillis());




/**
 * [tOracleOutput_9 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tJava_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_15"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tMap_15 finally ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	

 



/**
 * [tMap_15 finally ] stop
 */

	
	/**
	 * [tOracleOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_9") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_9 = null;
                if ((pstmtToClose_tOracleOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_9")) != null) {
                    pstmtToClose_tOracleOutput_9.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_9") == null){
            java.sql.Connection ctn_tOracleOutput_9 = null;
            if((ctn_tOracleOutput_9 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_9")) != null){
                try {
                    ctn_tOracleOutput_9.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_9) {
                    String errorMessage_tOracleOutput_9 = "failed to close the connection in tOracleOutput_9 :" + sqlEx_tOracleOutput_9.getMessage();
                    System.err.println(errorMessage_tOracleOutput_9);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_9 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";
	
	
		int tos_count_tJava_5 = 0;
		


/*System.out.println("ReturnValueExampleChildJob_NB_LINE=" + ((BigDecimal) ((java.util.Map) globalMap.get("sharedMap")).get("ReturnValueExampleChildJob_NB_LINE")));

*/
context.CODARCHIVO = "AC";
System.out.println("        - Consulta: " + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );

/*context.ARCONTROL_ID = (BigDecimal) ((java.util.Map) globalMap.get("sharedMap")).get("ReturnValueAC_ID");

System.out.println("ARCONTROL_ID AC : " + context.ARCONTROL_ID );*/
 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 process_data_begin ] stop
 */
	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tOracleInput_7Process(globalMap);



/**
 * [tJava_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	


public static class insert_cStruct implements routines.system.IPersistableRow<insert_cStruct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String CODFACTURA;

				public String getCODFACTURA () {
					return this.CODFACTURA;
				}

				public Boolean CODFACTURAIsNullable(){
				    return true;
				}
				public Boolean CODFACTURAIsKey(){
				    return false;
				}
				public Integer CODFACTURALength(){
				    return 100;
				}
				public Integer CODFACTURAPrecision(){
				    return 0;
				}
				public String CODFACTURADefault(){
				
					return null;
				
				}
				public String CODFACTURAComment(){
				
				    return "N\u00FAmero de la factura";
				
				}
				public String CODFACTURAPattern(){
				
					return "";
				
				}
				public String CODFACTURAOriginalDbColumnName(){
				
					return "CODFACTURA";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return 100;
				}
				public Integer CODPRESTADORPrecision(){
				    return 0;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "C\u00F3digo del prestador de servicios de salud";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 50;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "Tipo de identificaci\u00F3n del usuario";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "N\u00FAmero de identificaci\u00F3n del usuario en el sistema";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha de la consulta";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return 250;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "N\u00FAmero de la autorizaci\u00F3n";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public String CODCONSULTA;

				public String getCODCONSULTA () {
					return this.CODCONSULTA;
				}

				public Boolean CODCONSULTAIsNullable(){
				    return true;
				}
				public Boolean CODCONSULTAIsKey(){
				    return false;
				}
				public Integer CODCONSULTALength(){
				    return 100;
				}
				public Integer CODCONSULTAPrecision(){
				    return 0;
				}
				public String CODCONSULTADefault(){
				
					return null;
				
				}
				public String CODCONSULTAComment(){
				
				    return "C\u00F3digo de la consulta";
				
				}
				public String CODCONSULTAPattern(){
				
					return "";
				
				}
				public String CODCONSULTAOriginalDbColumnName(){
				
					return "CODCONSULTA";
				
				}

				
			    public BigDecimal FINALIDAD;

				public BigDecimal getFINALIDAD () {
					return this.FINALIDAD;
				}

				public Boolean FINALIDADIsNullable(){
				    return true;
				}
				public Boolean FINALIDADIsKey(){
				    return false;
				}
				public Integer FINALIDADLength(){
				    return 0;
				}
				public Integer FINALIDADPrecision(){
				    return null;
				}
				public String FINALIDADDefault(){
				
					return null;
				
				}
				public String FINALIDADComment(){
				
				    return "Finalidad de la consulta";
				
				}
				public String FINALIDADPattern(){
				
					return "";
				
				}
				public String FINALIDADOriginalDbColumnName(){
				
					return "FINALIDAD";
				
				}

				
			    public BigDecimal CAUSA_EXTERNA;

				public BigDecimal getCAUSA_EXTERNA () {
					return this.CAUSA_EXTERNA;
				}

				public Boolean CAUSA_EXTERNAIsNullable(){
				    return true;
				}
				public Boolean CAUSA_EXTERNAIsKey(){
				    return false;
				}
				public Integer CAUSA_EXTERNALength(){
				    return 0;
				}
				public Integer CAUSA_EXTERNAPrecision(){
				    return null;
				}
				public String CAUSA_EXTERNADefault(){
				
					return null;
				
				}
				public String CAUSA_EXTERNAComment(){
				
				    return "Causa externa";
				
				}
				public String CAUSA_EXTERNAPattern(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAOriginalDbColumnName(){
				
					return "CAUSA_EXTERNA";
				
				}

				
			    public String CODDIAGNOSTICOPPAL;

				public String getCODDIAGNOSTICOPPAL () {
					return this.CODDIAGNOSTICOPPAL;
				}

				public Boolean CODDIAGNOSTICOPPALIsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICOPPALIsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICOPPALLength(){
				    return 10;
				}
				public Integer CODDIAGNOSTICOPPALPrecision(){
				    return 0;
				}
				public String CODDIAGNOSTICOPPALDefault(){
				
					return null;
				
				}
				public String CODDIAGNOSTICOPPALComment(){
				
				    return "C\u00F3digo del diagn\u00F3stico principal";
				
				}
				public String CODDIAGNOSTICOPPALPattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICOPPALOriginalDbColumnName(){
				
					return "CODDIAGNOSTICOPPAL";
				
				}

				
			    public String CODDIAGNOSTICO1;

				public String getCODDIAGNOSTICO1 () {
					return this.CODDIAGNOSTICO1;
				}

				public Boolean CODDIAGNOSTICO1IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO1IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO1Length(){
				    return 10;
				}
				public Integer CODDIAGNOSTICO1Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO1Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO1Comment(){
				
				    return "C\u00F3digo del diagn\u00F3stico relacionado No. 1";
				
				}
				public String CODDIAGNOSTICO1Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO1OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO1";
				
				}

				
			    public String CODDIAGNOSTICO2;

				public String getCODDIAGNOSTICO2 () {
					return this.CODDIAGNOSTICO2;
				}

				public Boolean CODDIAGNOSTICO2IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO2IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO2Length(){
				    return 10;
				}
				public Integer CODDIAGNOSTICO2Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO2Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO2Comment(){
				
				    return "C\u00F3digo del diagn\u00F3stico relacionado No. 2";
				
				}
				public String CODDIAGNOSTICO2Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO2OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO2";
				
				}

				
			    public String CODDIAGNOSTICO3;

				public String getCODDIAGNOSTICO3 () {
					return this.CODDIAGNOSTICO3;
				}

				public Boolean CODDIAGNOSTICO3IsNullable(){
				    return true;
				}
				public Boolean CODDIAGNOSTICO3IsKey(){
				    return false;
				}
				public Integer CODDIAGNOSTICO3Length(){
				    return 10;
				}
				public Integer CODDIAGNOSTICO3Precision(){
				    return 0;
				}
				public String CODDIAGNOSTICO3Default(){
				
					return null;
				
				}
				public String CODDIAGNOSTICO3Comment(){
				
				    return "C\u00F3digo del diagn\u00F3stico relacionado No. 3";
				
				}
				public String CODDIAGNOSTICO3Pattern(){
				
					return "";
				
				}
				public String CODDIAGNOSTICO3OriginalDbColumnName(){
				
					return "CODDIAGNOSTICO3";
				
				}

				
			    public BigDecimal TDIAGNOSTICO;

				public BigDecimal getTDIAGNOSTICO () {
					return this.TDIAGNOSTICO;
				}

				public Boolean TDIAGNOSTICOIsNullable(){
				    return true;
				}
				public Boolean TDIAGNOSTICOIsKey(){
				    return false;
				}
				public Integer TDIAGNOSTICOLength(){
				    return 0;
				}
				public Integer TDIAGNOSTICOPrecision(){
				    return null;
				}
				public String TDIAGNOSTICODefault(){
				
					return null;
				
				}
				public String TDIAGNOSTICOComment(){
				
				    return "Tipo de diagn\u00F3stico principal";
				
				}
				public String TDIAGNOSTICOPattern(){
				
					return "";
				
				}
				public String TDIAGNOSTICOOriginalDbColumnName(){
				
					return "TDIAGNOSTICO";
				
				}

				
			    public BigDecimal VCONSULTA;

				public BigDecimal getVCONSULTA () {
					return this.VCONSULTA;
				}

				public Boolean VCONSULTAIsNullable(){
				    return true;
				}
				public Boolean VCONSULTAIsKey(){
				    return false;
				}
				public Integer VCONSULTALength(){
				    return 0;
				}
				public Integer VCONSULTAPrecision(){
				    return null;
				}
				public String VCONSULTADefault(){
				
					return null;
				
				}
				public String VCONSULTAComment(){
				
				    return "Valor de la consulta";
				
				}
				public String VCONSULTAPattern(){
				
					return "";
				
				}
				public String VCONSULTAOriginalDbColumnName(){
				
					return "VCONSULTA";
				
				}

				
			    public BigDecimal VCUOTAMODERA;

				public BigDecimal getVCUOTAMODERA () {
					return this.VCUOTAMODERA;
				}

				public Boolean VCUOTAMODERAIsNullable(){
				    return true;
				}
				public Boolean VCUOTAMODERAIsKey(){
				    return false;
				}
				public Integer VCUOTAMODERALength(){
				    return 0;
				}
				public Integer VCUOTAMODERAPrecision(){
				    return null;
				}
				public String VCUOTAMODERADefault(){
				
					return null;
				
				}
				public String VCUOTAMODERAComment(){
				
				    return "Valor de la cuota moderadora";
				
				}
				public String VCUOTAMODERAPattern(){
				
					return "";
				
				}
				public String VCUOTAMODERAOriginalDbColumnName(){
				
					return "VCUOTAMODERA";
				
				}

				
			    public BigDecimal VNETOPAGAR;

				public BigDecimal getVNETOPAGAR () {
					return this.VNETOPAGAR;
				}

				public Boolean VNETOPAGARIsNullable(){
				    return true;
				}
				public Boolean VNETOPAGARIsKey(){
				    return false;
				}
				public Integer VNETOPAGARLength(){
				    return 0;
				}
				public Integer VNETOPAGARPrecision(){
				    return null;
				}
				public String VNETOPAGARDefault(){
				
					return null;
				
				}
				public String VNETOPAGARComment(){
				
				    return "Valor neto a pagar";
				
				}
				public String VNETOPAGARPattern(){
				
					return "";
				
				}
				public String VNETOPAGAROriginalDbColumnName(){
				
					return "VNETOPAGAR";
				
				}

				
			    public String TRIPS;

				public String getTRIPS () {
					return this.TRIPS;
				}

				public Boolean TRIPSIsNullable(){
				    return true;
				}
				public Boolean TRIPSIsKey(){
				    return false;
				}
				public Integer TRIPSLength(){
				    return 10;
				}
				public Integer TRIPSPrecision(){
				    return 0;
				}
				public String TRIPSDefault(){
				
					return null;
				
				}
				public String TRIPSComment(){
				
				    return "";
				
				}
				public String TRIPSPattern(){
				
					return "";
				
				}
				public String TRIPSOriginalDbColumnName(){
				
					return "TRIPS";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 7;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIAL;

				public BigDecimal getPROCESOSASISTENCIAL () {
					return this.PROCESOSASISTENCIAL;
				}

				public Boolean PROCESOSASISTENCIALIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALDefault(){
				
					return null;
				
				}
				public String PROCESOSASISTENCIALComment(){
				
				    return "id del proceso asistencial";
				
				}
				public String PROCESOSASISTENCIALPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIAL";
				
				}

				
			    public String PYP_SIGLA;

				public String getPYP_SIGLA () {
					return this.PYP_SIGLA;
				}

				public Boolean PYP_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PYP_SIGLAIsKey(){
				    return false;
				}
				public Integer PYP_SIGLALength(){
				    return 20;
				}
				public Integer PYP_SIGLAPrecision(){
				    return 0;
				}
				public String PYP_SIGLADefault(){
				
					return null;
				
				}
				public String PYP_SIGLAComment(){
				
				    return "SIGLA DEL PROGRAMA PYP";
				
				}
				public String PYP_SIGLAPattern(){
				
					return "";
				
				}
				public String PYP_SIGLAOriginalDbColumnName(){
				
					return "PYP_SIGLA";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "FK - BGEN_PERSONAS";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String ACTIVIDADES;

				public String getACTIVIDADES () {
					return this.ACTIVIDADES;
				}

				public Boolean ACTIVIDADESIsNullable(){
				    return true;
				}
				public Boolean ACTIVIDADESIsKey(){
				    return false;
				}
				public Integer ACTIVIDADESLength(){
				    return 3000;
				}
				public Integer ACTIVIDADESPrecision(){
				    return 0;
				}
				public String ACTIVIDADESDefault(){
				
					return null;
				
				}
				public String ACTIVIDADESComment(){
				
				    return "Listado de actividades separados por coma";
				
				}
				public String ACTIVIDADESPattern(){
				
					return "";
				
				}
				public String ACTIVIDADESOriginalDbColumnName(){
				
					return "ACTIVIDADES";
				
				}

				
			    public String TAMIZAJES;

				public String getTAMIZAJES () {
					return this.TAMIZAJES;
				}

				public Boolean TAMIZAJESIsNullable(){
				    return true;
				}
				public Boolean TAMIZAJESIsKey(){
				    return false;
				}
				public Integer TAMIZAJESLength(){
				    return 3000;
				}
				public Integer TAMIZAJESPrecision(){
				    return 0;
				}
				public String TAMIZAJESDefault(){
				
					return null;
				
				}
				public String TAMIZAJESComment(){
				
				    return "Listado de tamizajes durante la valoracion separadas por coma";
				
				}
				public String TAMIZAJESPattern(){
				
					return "";
				
				}
				public String TAMIZAJESOriginalDbColumnName(){
				
					return "TAMIZAJES";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - BGEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String CONSULTA;

				public String getCONSULTA () {
					return this.CONSULTA;
				}

				public Boolean CONSULTAIsNullable(){
				    return true;
				}
				public Boolean CONSULTAIsKey(){
				    return false;
				}
				public Integer CONSULTALength(){
				    return 500;
				}
				public Integer CONSULTAPrecision(){
				    return 0;
				}
				public String CONSULTADefault(){
				
					return null;
				
				}
				public String CONSULTAComment(){
				
				    return "";
				
				}
				public String CONSULTAPattern(){
				
					return "";
				
				}
				public String CONSULTAOriginalDbColumnName(){
				
					return "CONSULTA";
				
				}

				
			    public String PYP_NOMBRE;

				public String getPYP_NOMBRE () {
					return this.PYP_NOMBRE;
				}

				public Boolean PYP_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PYP_NOMBREIsKey(){
				    return false;
				}
				public Integer PYP_NOMBRELength(){
				    return 500;
				}
				public Integer PYP_NOMBREPrecision(){
				    return 0;
				}
				public String PYP_NOMBREDefault(){
				
					return null;
				
				}
				public String PYP_NOMBREComment(){
				
				    return "";
				
				}
				public String PYP_NOMBREPattern(){
				
					return "";
				
				}
				public String PYP_NOMBREOriginalDbColumnName(){
				
					return "PYP_NOMBRE";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "Id de la fuerza del ESM de atencion";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "Sigla del tipo de documento del profesional asistencial que atiende";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "N\u00FAmero de identificacion del profesional asistencial que atiende";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "Nombre de la especialidad que atiende";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String PESO;

				public String getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 10;
				}
				public Integer PESOPrecision(){
				    return 0;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "Peso del paciente al momento de la atenci\u00F3n";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return 10;
				}
				public Integer TALLAPrecision(){
				    return 0;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "Altura del paciente la momento de la atenci\u00F3n ";
				
				}
				public String TALLAPattern(){
				
					return "";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public String UMEDIDA_PESO;

				public String getUMEDIDA_PESO () {
					return this.UMEDIDA_PESO;
				}

				public Boolean UMEDIDA_PESOIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_PESOIsKey(){
				    return false;
				}
				public Integer UMEDIDA_PESOLength(){
				    return 10;
				}
				public Integer UMEDIDA_PESOPrecision(){
				    return 0;
				}
				public String UMEDIDA_PESODefault(){
				
					return null;
				
				}
				public String UMEDIDA_PESOComment(){
				
				    return "Unidad de medida del peso del paciente";
				
				}
				public String UMEDIDA_PESOPattern(){
				
					return "";
				
				}
				public String UMEDIDA_PESOOriginalDbColumnName(){
				
					return "UMEDIDA_PESO";
				
				}

				
			    public String UMEDIDA_TALLA;

				public String getUMEDIDA_TALLA () {
					return this.UMEDIDA_TALLA;
				}

				public Boolean UMEDIDA_TALLAIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_TALLAIsKey(){
				    return false;
				}
				public Integer UMEDIDA_TALLALength(){
				    return 10;
				}
				public Integer UMEDIDA_TALLAPrecision(){
				    return 0;
				}
				public String UMEDIDA_TALLADefault(){
				
					return null;
				
				}
				public String UMEDIDA_TALLAComment(){
				
				    return "Unidad de medida de la talla del paciente";
				
				}
				public String UMEDIDA_TALLAPattern(){
				
					return "";
				
				}
				public String UMEDIDA_TALLAOriginalDbColumnName(){
				
					return "UMEDIDA_TALLA";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return 10;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return 0;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "Forma en que se almaceno ( Cargue, Automatico)";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 100;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "Tipo de afiliado ( No cotizante, cotizante pensionado o retirado, cotizante activo, beneficiario)";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "EDAD SIMPLE DE LA PERSONA AL MOMENTO DE LA ATENCI\u00D3N";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 10;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "Unidad de medida de la edad simple (A\u00F1os, Meses)";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "C\u00F3digo del grado (filtrar)";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "DESCRIPCION DEL GRADO MILITAR";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 100;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "Descripci\u00F3n de la clasificaci\u00F3n del grado";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal ADMISION_ID;

				public BigDecimal getADMISION_ID () {
					return this.ADMISION_ID;
				}

				public Boolean ADMISION_IDIsNullable(){
				    return true;
				}
				public Boolean ADMISION_IDIsKey(){
				    return false;
				}
				public Integer ADMISION_IDLength(){
				    return 0;
				}
				public Integer ADMISION_IDPrecision(){
				    return null;
				}
				public String ADMISION_IDDefault(){
				
					return null;
				
				}
				public String ADMISION_IDComment(){
				
				    return "ID de la admisi\u00F3n";
				
				}
				public String ADMISION_IDPattern(){
				
					return "";
				
				}
				public String ADMISION_IDOriginalDbColumnName(){
				
					return "ADMISION_ID";
				
				}

				
			    public BigDecimal FINDRISK;

				public BigDecimal getFINDRISK () {
					return this.FINDRISK;
				}

				public Boolean FINDRISKIsNullable(){
				    return true;
				}
				public Boolean FINDRISKIsKey(){
				    return false;
				}
				public Integer FINDRISKLength(){
				    return 0;
				}
				public Integer FINDRISKPrecision(){
				    return null;
				}
				public String FINDRISKDefault(){
				
					return null;
				
				}
				public String FINDRISKComment(){
				
				    return "Valor de findrisk";
				
				}
				public String FINDRISKPattern(){
				
					return "";
				
				}
				public String FINDRISKOriginalDbColumnName(){
				
					return "FINDRISK";
				
				}

				
			    public String PFINDRISK;

				public String getPFINDRISK () {
					return this.PFINDRISK;
				}

				public Boolean PFINDRISKIsNullable(){
				    return true;
				}
				public Boolean PFINDRISKIsKey(){
				    return false;
				}
				public Integer PFINDRISKLength(){
				    return 30;
				}
				public Integer PFINDRISKPrecision(){
				    return 0;
				}
				public String PFINDRISKDefault(){
				
					return null;
				
				}
				public String PFINDRISKComment(){
				
				    return "Probabilidad findrisk";
				
				}
				public String PFINDRISKPattern(){
				
					return "";
				
				}
				public String PFINDRISKOriginalDbColumnName(){
				
					return "PFINDRISK";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return 2;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return 0;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return null;
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "C\u00F3digo de la clasificaci\u00F3n del grado (Filtrar)";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "ID BGEN_ESPECIALIDADES (Filtrar)";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String SERVICIO;

				public String getSERVICIO () {
					return this.SERVICIO;
				}

				public Boolean SERVICIOIsNullable(){
				    return true;
				}
				public Boolean SERVICIOIsKey(){
				    return false;
				}
				public Integer SERVICIOLength(){
				    return 150;
				}
				public Integer SERVICIOPrecision(){
				    return 0;
				}
				public String SERVICIODefault(){
				
					return null;
				
				}
				public String SERVICIOComment(){
				
				    return "Servicio de la cita ";
				
				}
				public String SERVICIOPattern(){
				
					return "";
				
				}
				public String SERVICIOOriginalDbColumnName(){
				
					return "SERVICIO";
				
				}

				
			    public String CUMPLIMIENTO_CITA;

				public String getCUMPLIMIENTO_CITA () {
					return this.CUMPLIMIENTO_CITA;
				}

				public Boolean CUMPLIMIENTO_CITAIsNullable(){
				    return true;
				}
				public Boolean CUMPLIMIENTO_CITAIsKey(){
				    return false;
				}
				public Integer CUMPLIMIENTO_CITALength(){
				    return 2;
				}
				public Integer CUMPLIMIENTO_CITAPrecision(){
				    return 0;
				}
				public String CUMPLIMIENTO_CITADefault(){
				
					return null;
				
				}
				public String CUMPLIMIENTO_CITAComment(){
				
				    return "Cumpli\u00F3 la cita (Si/No)";
				
				}
				public String CUMPLIMIENTO_CITAPattern(){
				
					return "";
				
				}
				public String CUMPLIMIENTO_CITAOriginalDbColumnName(){
				
					return "CUMPLIMIENTO_CITA";
				
				}

				
			    public String FCARDIACA_VALOR;

				public String getFCARDIACA_VALOR () {
					return this.FCARDIACA_VALOR;
				}

				public Boolean FCARDIACA_VALORIsNullable(){
				    return true;
				}
				public Boolean FCARDIACA_VALORIsKey(){
				    return false;
				}
				public Integer FCARDIACA_VALORLength(){
				    return 10;
				}
				public Integer FCARDIACA_VALORPrecision(){
				    return 0;
				}
				public String FCARDIACA_VALORDefault(){
				
					return null;
				
				}
				public String FCARDIACA_VALORComment(){
				
				    return "Valor de la frecuencia cardiaca";
				
				}
				public String FCARDIACA_VALORPattern(){
				
					return "";
				
				}
				public String FCARDIACA_VALOROriginalDbColumnName(){
				
					return "FCARDIACA_VALOR";
				
				}

				
			    public String FCARDIACA_UMEDIDA;

				public String getFCARDIACA_UMEDIDA () {
					return this.FCARDIACA_UMEDIDA;
				}

				public Boolean FCARDIACA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean FCARDIACA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer FCARDIACA_UMEDIDALength(){
				    return 10;
				}
				public Integer FCARDIACA_UMEDIDAPrecision(){
				    return 0;
				}
				public String FCARDIACA_UMEDIDADefault(){
				
					return null;
				
				}
				public String FCARDIACA_UMEDIDAComment(){
				
				    return "Unidad de medida de la frecuencia cardiaca";
				
				}
				public String FCARDIACA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String FCARDIACA_UMEDIDAOriginalDbColumnName(){
				
					return "FCARDIACA_UMEDIDA";
				
				}

				
			    public String PARTERIALSIS_VALOR;

				public String getPARTERIALSIS_VALOR () {
					return this.PARTERIALSIS_VALOR;
				}

				public Boolean PARTERIALSIS_VALORIsNullable(){
				    return true;
				}
				public Boolean PARTERIALSIS_VALORIsKey(){
				    return false;
				}
				public Integer PARTERIALSIS_VALORLength(){
				    return 10;
				}
				public Integer PARTERIALSIS_VALORPrecision(){
				    return 0;
				}
				public String PARTERIALSIS_VALORDefault(){
				
					return null;
				
				}
				public String PARTERIALSIS_VALORComment(){
				
				    return "Valor de la presi\u00F3n arterial sist\u00F3lica";
				
				}
				public String PARTERIALSIS_VALORPattern(){
				
					return "";
				
				}
				public String PARTERIALSIS_VALOROriginalDbColumnName(){
				
					return "PARTERIALSIS_VALOR";
				
				}

				
			    public String PARTERIALSIS_UMEDIDA;

				public String getPARTERIALSIS_UMEDIDA () {
					return this.PARTERIALSIS_UMEDIDA;
				}

				public Boolean PARTERIALSIS_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PARTERIALSIS_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PARTERIALSIS_UMEDIDALength(){
				    return 10;
				}
				public Integer PARTERIALSIS_UMEDIDAPrecision(){
				    return 0;
				}
				public String PARTERIALSIS_UMEDIDADefault(){
				
					return null;
				
				}
				public String PARTERIALSIS_UMEDIDAComment(){
				
				    return "Unidad de medida de la presi\u00F3n arterial sist\u00F3lica";
				
				}
				public String PARTERIALSIS_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PARTERIALSIS_UMEDIDAOriginalDbColumnName(){
				
					return "PARTERIALSIS_UMEDIDA";
				
				}

				
			    public String PARTERIALDIA_VALOR;

				public String getPARTERIALDIA_VALOR () {
					return this.PARTERIALDIA_VALOR;
				}

				public Boolean PARTERIALDIA_VALORIsNullable(){
				    return true;
				}
				public Boolean PARTERIALDIA_VALORIsKey(){
				    return false;
				}
				public Integer PARTERIALDIA_VALORLength(){
				    return 10;
				}
				public Integer PARTERIALDIA_VALORPrecision(){
				    return 0;
				}
				public String PARTERIALDIA_VALORDefault(){
				
					return null;
				
				}
				public String PARTERIALDIA_VALORComment(){
				
				    return "Valor de la presi\u00F3n arterial diast\u00F3lica";
				
				}
				public String PARTERIALDIA_VALORPattern(){
				
					return "";
				
				}
				public String PARTERIALDIA_VALOROriginalDbColumnName(){
				
					return "PARTERIALDIA_VALOR";
				
				}

				
			    public String PARTERIALDIA_UMEDIDA;

				public String getPARTERIALDIA_UMEDIDA () {
					return this.PARTERIALDIA_UMEDIDA;
				}

				public Boolean PARTERIALDIA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PARTERIALDIA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PARTERIALDIA_UMEDIDALength(){
				    return 10;
				}
				public Integer PARTERIALDIA_UMEDIDAPrecision(){
				    return 0;
				}
				public String PARTERIALDIA_UMEDIDADefault(){
				
					return null;
				
				}
				public String PARTERIALDIA_UMEDIDAComment(){
				
				    return "Unidad de medida de la presi\u00F3n arterial diast\u00F3lica";
				
				}
				public String PARTERIALDIA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PARTERIALDIA_UMEDIDAOriginalDbColumnName(){
				
					return "PARTERIALDIA_UMEDIDA";
				
				}

				
			    public String PARTERIALMED_VALOR;

				public String getPARTERIALMED_VALOR () {
					return this.PARTERIALMED_VALOR;
				}

				public Boolean PARTERIALMED_VALORIsNullable(){
				    return true;
				}
				public Boolean PARTERIALMED_VALORIsKey(){
				    return false;
				}
				public Integer PARTERIALMED_VALORLength(){
				    return 10;
				}
				public Integer PARTERIALMED_VALORPrecision(){
				    return 0;
				}
				public String PARTERIALMED_VALORDefault(){
				
					return null;
				
				}
				public String PARTERIALMED_VALORComment(){
				
				    return "Valor de la presi\u00F3n arterial media";
				
				}
				public String PARTERIALMED_VALORPattern(){
				
					return "";
				
				}
				public String PARTERIALMED_VALOROriginalDbColumnName(){
				
					return "PARTERIALMED_VALOR";
				
				}

				
			    public String PARTERIALMED_UMEDIDA;

				public String getPARTERIALMED_UMEDIDA () {
					return this.PARTERIALMED_UMEDIDA;
				}

				public Boolean PARTERIALMED_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PARTERIALMED_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PARTERIALMED_UMEDIDALength(){
				    return 10;
				}
				public Integer PARTERIALMED_UMEDIDAPrecision(){
				    return 0;
				}
				public String PARTERIALMED_UMEDIDADefault(){
				
					return null;
				
				}
				public String PARTERIALMED_UMEDIDAComment(){
				
				    return "Unidad de medida de la presi\u00F3n arterial media";
				
				}
				public String PARTERIALMED_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PARTERIALMED_UMEDIDAOriginalDbColumnName(){
				
					return "PARTERIALMED_UMEDIDA";
				
				}

				
			    public String FRESPIRATORIA_VALOR;

				public String getFRESPIRATORIA_VALOR () {
					return this.FRESPIRATORIA_VALOR;
				}

				public Boolean FRESPIRATORIA_VALORIsNullable(){
				    return true;
				}
				public Boolean FRESPIRATORIA_VALORIsKey(){
				    return false;
				}
				public Integer FRESPIRATORIA_VALORLength(){
				    return 10;
				}
				public Integer FRESPIRATORIA_VALORPrecision(){
				    return 0;
				}
				public String FRESPIRATORIA_VALORDefault(){
				
					return null;
				
				}
				public String FRESPIRATORIA_VALORComment(){
				
				    return "Valor de la frecuencia respiratoria";
				
				}
				public String FRESPIRATORIA_VALORPattern(){
				
					return "";
				
				}
				public String FRESPIRATORIA_VALOROriginalDbColumnName(){
				
					return "FRESPIRATORIA_VALOR";
				
				}

				
			    public String FRESPIRATORIA_UMEDIDA;

				public String getFRESPIRATORIA_UMEDIDA () {
					return this.FRESPIRATORIA_UMEDIDA;
				}

				public Boolean FRESPIRATORIA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean FRESPIRATORIA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer FRESPIRATORIA_UMEDIDALength(){
				    return 10;
				}
				public Integer FRESPIRATORIA_UMEDIDAPrecision(){
				    return 0;
				}
				public String FRESPIRATORIA_UMEDIDADefault(){
				
					return null;
				
				}
				public String FRESPIRATORIA_UMEDIDAComment(){
				
				    return "Unidad de medida de la frecuencia respiratoria";
				
				}
				public String FRESPIRATORIA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String FRESPIRATORIA_UMEDIDAOriginalDbColumnName(){
				
					return "FRESPIRATORIA_UMEDIDA";
				
				}

				
			    public String PULSO_VALOR;

				public String getPULSO_VALOR () {
					return this.PULSO_VALOR;
				}

				public Boolean PULSO_VALORIsNullable(){
				    return true;
				}
				public Boolean PULSO_VALORIsKey(){
				    return false;
				}
				public Integer PULSO_VALORLength(){
				    return 10;
				}
				public Integer PULSO_VALORPrecision(){
				    return 0;
				}
				public String PULSO_VALORDefault(){
				
					return null;
				
				}
				public String PULSO_VALORComment(){
				
				    return "Valor del pulso";
				
				}
				public String PULSO_VALORPattern(){
				
					return "";
				
				}
				public String PULSO_VALOROriginalDbColumnName(){
				
					return "PULSO_VALOR";
				
				}

				
			    public String PULSO_UMEDIDA;

				public String getPULSO_UMEDIDA () {
					return this.PULSO_UMEDIDA;
				}

				public Boolean PULSO_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PULSO_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PULSO_UMEDIDALength(){
				    return 10;
				}
				public Integer PULSO_UMEDIDAPrecision(){
				    return 0;
				}
				public String PULSO_UMEDIDADefault(){
				
					return null;
				
				}
				public String PULSO_UMEDIDAComment(){
				
				    return "Unidad de medida del pulso";
				
				}
				public String PULSO_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PULSO_UMEDIDAOriginalDbColumnName(){
				
					return "PULSO_UMEDIDA";
				
				}

				
			    public String TEMPERATURA_VALOR;

				public String getTEMPERATURA_VALOR () {
					return this.TEMPERATURA_VALOR;
				}

				public Boolean TEMPERATURA_VALORIsNullable(){
				    return true;
				}
				public Boolean TEMPERATURA_VALORIsKey(){
				    return false;
				}
				public Integer TEMPERATURA_VALORLength(){
				    return 10;
				}
				public Integer TEMPERATURA_VALORPrecision(){
				    return 0;
				}
				public String TEMPERATURA_VALORDefault(){
				
					return null;
				
				}
				public String TEMPERATURA_VALORComment(){
				
				    return "Valor de la temperatura";
				
				}
				public String TEMPERATURA_VALORPattern(){
				
					return "";
				
				}
				public String TEMPERATURA_VALOROriginalDbColumnName(){
				
					return "TEMPERATURA_VALOR";
				
				}

				
			    public String TEMPERATURA_UMEDIDA;

				public String getTEMPERATURA_UMEDIDA () {
					return this.TEMPERATURA_UMEDIDA;
				}

				public Boolean TEMPERATURA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean TEMPERATURA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer TEMPERATURA_UMEDIDALength(){
				    return 10;
				}
				public Integer TEMPERATURA_UMEDIDAPrecision(){
				    return 0;
				}
				public String TEMPERATURA_UMEDIDADefault(){
				
					return null;
				
				}
				public String TEMPERATURA_UMEDIDAComment(){
				
				    return "Unidad de medida de la temperatura";
				
				}
				public String TEMPERATURA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String TEMPERATURA_UMEDIDAOriginalDbColumnName(){
				
					return "TEMPERATURA_UMEDIDA";
				
				}

				
			    public String IMC_VALOR;

				public String getIMC_VALOR () {
					return this.IMC_VALOR;
				}

				public Boolean IMC_VALORIsNullable(){
				    return true;
				}
				public Boolean IMC_VALORIsKey(){
				    return false;
				}
				public Integer IMC_VALORLength(){
				    return 10;
				}
				public Integer IMC_VALORPrecision(){
				    return 0;
				}
				public String IMC_VALORDefault(){
				
					return null;
				
				}
				public String IMC_VALORComment(){
				
				    return "Valor del IMC";
				
				}
				public String IMC_VALORPattern(){
				
					return "";
				
				}
				public String IMC_VALOROriginalDbColumnName(){
				
					return "IMC_VALOR";
				
				}

				
			    public String IMC_UMEDIDA;

				public String getIMC_UMEDIDA () {
					return this.IMC_UMEDIDA;
				}

				public Boolean IMC_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean IMC_UMEDIDAIsKey(){
				    return false;
				}
				public Integer IMC_UMEDIDALength(){
				    return 10;
				}
				public Integer IMC_UMEDIDAPrecision(){
				    return 0;
				}
				public String IMC_UMEDIDADefault(){
				
					return null;
				
				}
				public String IMC_UMEDIDAComment(){
				
				    return "Unidad de medida del IMC";
				
				}
				public String IMC_UMEDIDAPattern(){
				
					return "";
				
				}
				public String IMC_UMEDIDAOriginalDbColumnName(){
				
					return "IMC_UMEDIDA";
				
				}

				
			    public String SOXIGENO_VALOR;

				public String getSOXIGENO_VALOR () {
					return this.SOXIGENO_VALOR;
				}

				public Boolean SOXIGENO_VALORIsNullable(){
				    return true;
				}
				public Boolean SOXIGENO_VALORIsKey(){
				    return false;
				}
				public Integer SOXIGENO_VALORLength(){
				    return 10;
				}
				public Integer SOXIGENO_VALORPrecision(){
				    return 0;
				}
				public String SOXIGENO_VALORDefault(){
				
					return null;
				
				}
				public String SOXIGENO_VALORComment(){
				
				    return "Valor de saturaci\u00F3n del oxigeno";
				
				}
				public String SOXIGENO_VALORPattern(){
				
					return "";
				
				}
				public String SOXIGENO_VALOROriginalDbColumnName(){
				
					return "SOXIGENO_VALOR";
				
				}

				
			    public String SOXIGENO_UMEDIDA;

				public String getSOXIGENO_UMEDIDA () {
					return this.SOXIGENO_UMEDIDA;
				}

				public Boolean SOXIGENO_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean SOXIGENO_UMEDIDAIsKey(){
				    return false;
				}
				public Integer SOXIGENO_UMEDIDALength(){
				    return 10;
				}
				public Integer SOXIGENO_UMEDIDAPrecision(){
				    return 0;
				}
				public String SOXIGENO_UMEDIDADefault(){
				
					return null;
				
				}
				public String SOXIGENO_UMEDIDAComment(){
				
				    return "Unidad de saturaci\u00F3n del oxigeno";
				
				}
				public String SOXIGENO_UMEDIDAPattern(){
				
					return "";
				
				}
				public String SOXIGENO_UMEDIDAOriginalDbColumnName(){
				
					return "SOXIGENO_UMEDIDA";
				
				}

				
			    public String NCREATININA_VALOR;

				public String getNCREATININA_VALOR () {
					return this.NCREATININA_VALOR;
				}

				public Boolean NCREATININA_VALORIsNullable(){
				    return true;
				}
				public Boolean NCREATININA_VALORIsKey(){
				    return false;
				}
				public Integer NCREATININA_VALORLength(){
				    return 10;
				}
				public Integer NCREATININA_VALORPrecision(){
				    return 0;
				}
				public String NCREATININA_VALORDefault(){
				
					return null;
				
				}
				public String NCREATININA_VALORComment(){
				
				    return "Valor del n\u00EDvel de creatinina";
				
				}
				public String NCREATININA_VALORPattern(){
				
					return "";
				
				}
				public String NCREATININA_VALOROriginalDbColumnName(){
				
					return "NCREATININA_VALOR";
				
				}

				
			    public String NCREATININA_UMEDIDA;

				public String getNCREATININA_UMEDIDA () {
					return this.NCREATININA_UMEDIDA;
				}

				public Boolean NCREATININA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean NCREATININA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer NCREATININA_UMEDIDALength(){
				    return 10;
				}
				public Integer NCREATININA_UMEDIDAPrecision(){
				    return 0;
				}
				public String NCREATININA_UMEDIDADefault(){
				
					return null;
				
				}
				public String NCREATININA_UMEDIDAComment(){
				
				    return "Unidad de medida del n\u00EDvel de creatinina";
				
				}
				public String NCREATININA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String NCREATININA_UMEDIDAOriginalDbColumnName(){
				
					return "NCREATININA_UMEDIDA";
				
				}

				
			    public String FGLOMERULAR_VALOR;

				public String getFGLOMERULAR_VALOR () {
					return this.FGLOMERULAR_VALOR;
				}

				public Boolean FGLOMERULAR_VALORIsNullable(){
				    return true;
				}
				public Boolean FGLOMERULAR_VALORIsKey(){
				    return false;
				}
				public Integer FGLOMERULAR_VALORLength(){
				    return 10;
				}
				public Integer FGLOMERULAR_VALORPrecision(){
				    return 0;
				}
				public String FGLOMERULAR_VALORDefault(){
				
					return null;
				
				}
				public String FGLOMERULAR_VALORComment(){
				
				    return "Valor de la filtraci\u00F3n glomerular";
				
				}
				public String FGLOMERULAR_VALORPattern(){
				
					return "";
				
				}
				public String FGLOMERULAR_VALOROriginalDbColumnName(){
				
					return "FGLOMERULAR_VALOR";
				
				}

				
			    public String FGLOMERULAR_UMEDIDA;

				public String getFGLOMERULAR_UMEDIDA () {
					return this.FGLOMERULAR_UMEDIDA;
				}

				public Boolean FGLOMERULAR_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean FGLOMERULAR_UMEDIDAIsKey(){
				    return false;
				}
				public Integer FGLOMERULAR_UMEDIDALength(){
				    return 20;
				}
				public Integer FGLOMERULAR_UMEDIDAPrecision(){
				    return 0;
				}
				public String FGLOMERULAR_UMEDIDADefault(){
				
					return null;
				
				}
				public String FGLOMERULAR_UMEDIDAComment(){
				
				    return "Unidad de medida de la filtraci\u00F3n glomerular";
				
				}
				public String FGLOMERULAR_UMEDIDAPattern(){
				
					return "";
				
				}
				public String FGLOMERULAR_UMEDIDAOriginalDbColumnName(){
				
					return "FGLOMERULAR_UMEDIDA";
				
				}

				
			    public String PABDOMINAL_VALOR;

				public String getPABDOMINAL_VALOR () {
					return this.PABDOMINAL_VALOR;
				}

				public Boolean PABDOMINAL_VALORIsNullable(){
				    return true;
				}
				public Boolean PABDOMINAL_VALORIsKey(){
				    return false;
				}
				public Integer PABDOMINAL_VALORLength(){
				    return 10;
				}
				public Integer PABDOMINAL_VALORPrecision(){
				    return 0;
				}
				public String PABDOMINAL_VALORDefault(){
				
					return null;
				
				}
				public String PABDOMINAL_VALORComment(){
				
				    return "Valor per\u00EDmetro abdominal";
				
				}
				public String PABDOMINAL_VALORPattern(){
				
					return "";
				
				}
				public String PABDOMINAL_VALOROriginalDbColumnName(){
				
					return "PABDOMINAL_VALOR";
				
				}

				
			    public String PABDOMINAL_UMEDIDA;

				public String getPABDOMINAL_UMEDIDA () {
					return this.PABDOMINAL_UMEDIDA;
				}

				public Boolean PABDOMINAL_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PABDOMINAL_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PABDOMINAL_UMEDIDALength(){
				    return 10;
				}
				public Integer PABDOMINAL_UMEDIDAPrecision(){
				    return 0;
				}
				public String PABDOMINAL_UMEDIDADefault(){
				
					return null;
				
				}
				public String PABDOMINAL_UMEDIDAComment(){
				
				    return "Unidad de medida per\u00EDmetro abdominal";
				
				}
				public String PABDOMINAL_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PABDOMINAL_UMEDIDAOriginalDbColumnName(){
				
					return "PABDOMINAL_UMEDIDA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODCONSULTA = readString(dis);
					
						this.FINALIDAD = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.CODDIAGNOSTICOPPAL = readString(dis);
					
					this.CODDIAGNOSTICO1 = readString(dis);
					
					this.CODDIAGNOSTICO2 = readString(dis);
					
					this.CODDIAGNOSTICO3 = readString(dis);
					
						this.TDIAGNOSTICO = (BigDecimal) dis.readObject();
					
						this.VCONSULTA = (BigDecimal) dis.readObject();
					
						this.VCUOTAMODERA = (BigDecimal) dis.readObject();
					
						this.VNETOPAGAR = (BigDecimal) dis.readObject();
					
					this.TRIPS = readString(dis);
					
					this.PERIODO = readString(dis);
					
						this.PROCESOSASISTENCIAL = (BigDecimal) dis.readObject();
					
					this.PYP_SIGLA = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.ACTIVIDADES = readString(dis);
					
					this.TAMIZAJES = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CONSULTA = readString(dis);
					
					this.PYP_NOMBRE = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_PESO = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.FINDRISK = (BigDecimal) dis.readObject();
					
					this.PFINDRISK = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.SERVICIO = readString(dis);
					
					this.CUMPLIMIENTO_CITA = readString(dis);
					
					this.FCARDIACA_VALOR = readString(dis);
					
					this.FCARDIACA_UMEDIDA = readString(dis);
					
					this.PARTERIALSIS_VALOR = readString(dis);
					
					this.PARTERIALSIS_UMEDIDA = readString(dis);
					
					this.PARTERIALDIA_VALOR = readString(dis);
					
					this.PARTERIALDIA_UMEDIDA = readString(dis);
					
					this.PARTERIALMED_VALOR = readString(dis);
					
					this.PARTERIALMED_UMEDIDA = readString(dis);
					
					this.FRESPIRATORIA_VALOR = readString(dis);
					
					this.FRESPIRATORIA_UMEDIDA = readString(dis);
					
					this.PULSO_VALOR = readString(dis);
					
					this.PULSO_UMEDIDA = readString(dis);
					
					this.TEMPERATURA_VALOR = readString(dis);
					
					this.TEMPERATURA_UMEDIDA = readString(dis);
					
					this.IMC_VALOR = readString(dis);
					
					this.IMC_UMEDIDA = readString(dis);
					
					this.SOXIGENO_VALOR = readString(dis);
					
					this.SOXIGENO_UMEDIDA = readString(dis);
					
					this.NCREATININA_VALOR = readString(dis);
					
					this.NCREATININA_UMEDIDA = readString(dis);
					
					this.FGLOMERULAR_VALOR = readString(dis);
					
					this.FGLOMERULAR_UMEDIDA = readString(dis);
					
					this.PABDOMINAL_VALOR = readString(dis);
					
					this.PABDOMINAL_UMEDIDA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODCONSULTA = readString(dis);
					
						this.FINALIDAD = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.CODDIAGNOSTICOPPAL = readString(dis);
					
					this.CODDIAGNOSTICO1 = readString(dis);
					
					this.CODDIAGNOSTICO2 = readString(dis);
					
					this.CODDIAGNOSTICO3 = readString(dis);
					
						this.TDIAGNOSTICO = (BigDecimal) dis.readObject();
					
						this.VCONSULTA = (BigDecimal) dis.readObject();
					
						this.VCUOTAMODERA = (BigDecimal) dis.readObject();
					
						this.VNETOPAGAR = (BigDecimal) dis.readObject();
					
					this.TRIPS = readString(dis);
					
					this.PERIODO = readString(dis);
					
						this.PROCESOSASISTENCIAL = (BigDecimal) dis.readObject();
					
					this.PYP_SIGLA = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.ACTIVIDADES = readString(dis);
					
					this.TAMIZAJES = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CONSULTA = readString(dis);
					
					this.PYP_NOMBRE = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.PESO = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_PESO = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.ADMISION_ID = (BigDecimal) dis.readObject();
					
						this.FINDRISK = (BigDecimal) dis.readObject();
					
					this.PFINDRISK = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.SERVICIO = readString(dis);
					
					this.CUMPLIMIENTO_CITA = readString(dis);
					
					this.FCARDIACA_VALOR = readString(dis);
					
					this.FCARDIACA_UMEDIDA = readString(dis);
					
					this.PARTERIALSIS_VALOR = readString(dis);
					
					this.PARTERIALSIS_UMEDIDA = readString(dis);
					
					this.PARTERIALDIA_VALOR = readString(dis);
					
					this.PARTERIALDIA_UMEDIDA = readString(dis);
					
					this.PARTERIALMED_VALOR = readString(dis);
					
					this.PARTERIALMED_UMEDIDA = readString(dis);
					
					this.FRESPIRATORIA_VALOR = readString(dis);
					
					this.FRESPIRATORIA_UMEDIDA = readString(dis);
					
					this.PULSO_VALOR = readString(dis);
					
					this.PULSO_UMEDIDA = readString(dis);
					
					this.TEMPERATURA_VALOR = readString(dis);
					
					this.TEMPERATURA_UMEDIDA = readString(dis);
					
					this.IMC_VALOR = readString(dis);
					
					this.IMC_UMEDIDA = readString(dis);
					
					this.SOXIGENO_VALOR = readString(dis);
					
					this.SOXIGENO_UMEDIDA = readString(dis);
					
					this.NCREATININA_VALOR = readString(dis);
					
					this.NCREATININA_UMEDIDA = readString(dis);
					
					this.FGLOMERULAR_VALOR = readString(dis);
					
					this.FGLOMERULAR_UMEDIDA = readString(dis);
					
					this.PABDOMINAL_VALOR = readString(dis);
					
					this.PABDOMINAL_UMEDIDA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODCONSULTA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FINALIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.CODDIAGNOSTICOPPAL,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO1,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO2,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDIAGNOSTICO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCONSULTA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCUOTAMODERA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VNETOPAGAR);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIAL);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.ACTIVIDADES,dos);
					
					// String
				
						writeString(this.TAMIZAJES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CONSULTA,dos);
					
					// String
				
						writeString(this.PYP_NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_PESO,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FINDRISK);
					
					// String
				
						writeString(this.PFINDRISK,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.SERVICIO,dos);
					
					// String
				
						writeString(this.CUMPLIMIENTO_CITA,dos);
					
					// String
				
						writeString(this.FCARDIACA_VALOR,dos);
					
					// String
				
						writeString(this.FCARDIACA_UMEDIDA,dos);
					
					// String
				
						writeString(this.PARTERIALSIS_VALOR,dos);
					
					// String
				
						writeString(this.PARTERIALSIS_UMEDIDA,dos);
					
					// String
				
						writeString(this.PARTERIALDIA_VALOR,dos);
					
					// String
				
						writeString(this.PARTERIALDIA_UMEDIDA,dos);
					
					// String
				
						writeString(this.PARTERIALMED_VALOR,dos);
					
					// String
				
						writeString(this.PARTERIALMED_UMEDIDA,dos);
					
					// String
				
						writeString(this.FRESPIRATORIA_VALOR,dos);
					
					// String
				
						writeString(this.FRESPIRATORIA_UMEDIDA,dos);
					
					// String
				
						writeString(this.PULSO_VALOR,dos);
					
					// String
				
						writeString(this.PULSO_UMEDIDA,dos);
					
					// String
				
						writeString(this.TEMPERATURA_VALOR,dos);
					
					// String
				
						writeString(this.TEMPERATURA_UMEDIDA,dos);
					
					// String
				
						writeString(this.IMC_VALOR,dos);
					
					// String
				
						writeString(this.IMC_UMEDIDA,dos);
					
					// String
				
						writeString(this.SOXIGENO_VALOR,dos);
					
					// String
				
						writeString(this.SOXIGENO_UMEDIDA,dos);
					
					// String
				
						writeString(this.NCREATININA_VALOR,dos);
					
					// String
				
						writeString(this.NCREATININA_UMEDIDA,dos);
					
					// String
				
						writeString(this.FGLOMERULAR_VALOR,dos);
					
					// String
				
						writeString(this.FGLOMERULAR_UMEDIDA,dos);
					
					// String
				
						writeString(this.PABDOMINAL_VALOR,dos);
					
					// String
				
						writeString(this.PABDOMINAL_UMEDIDA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODCONSULTA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FINALIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.CODDIAGNOSTICOPPAL,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO1,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO2,dos);
					
					// String
				
						writeString(this.CODDIAGNOSTICO3,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDIAGNOSTICO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCONSULTA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCUOTAMODERA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VNETOPAGAR);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIAL);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.ACTIVIDADES,dos);
					
					// String
				
						writeString(this.TAMIZAJES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CONSULTA,dos);
					
					// String
				
						writeString(this.PYP_NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.PESO,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_PESO,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FINDRISK);
					
					// String
				
						writeString(this.PFINDRISK,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.SERVICIO,dos);
					
					// String
				
						writeString(this.CUMPLIMIENTO_CITA,dos);
					
					// String
				
						writeString(this.FCARDIACA_VALOR,dos);
					
					// String
				
						writeString(this.FCARDIACA_UMEDIDA,dos);
					
					// String
				
						writeString(this.PARTERIALSIS_VALOR,dos);
					
					// String
				
						writeString(this.PARTERIALSIS_UMEDIDA,dos);
					
					// String
				
						writeString(this.PARTERIALDIA_VALOR,dos);
					
					// String
				
						writeString(this.PARTERIALDIA_UMEDIDA,dos);
					
					// String
				
						writeString(this.PARTERIALMED_VALOR,dos);
					
					// String
				
						writeString(this.PARTERIALMED_UMEDIDA,dos);
					
					// String
				
						writeString(this.FRESPIRATORIA_VALOR,dos);
					
					// String
				
						writeString(this.FRESPIRATORIA_UMEDIDA,dos);
					
					// String
				
						writeString(this.PULSO_VALOR,dos);
					
					// String
				
						writeString(this.PULSO_UMEDIDA,dos);
					
					// String
				
						writeString(this.TEMPERATURA_VALOR,dos);
					
					// String
				
						writeString(this.TEMPERATURA_UMEDIDA,dos);
					
					// String
				
						writeString(this.IMC_VALOR,dos);
					
					// String
				
						writeString(this.IMC_UMEDIDA,dos);
					
					// String
				
						writeString(this.SOXIGENO_VALOR,dos);
					
					// String
				
						writeString(this.SOXIGENO_UMEDIDA,dos);
					
					// String
				
						writeString(this.NCREATININA_VALOR,dos);
					
					// String
				
						writeString(this.NCREATININA_UMEDIDA,dos);
					
					// String
				
						writeString(this.FGLOMERULAR_VALOR,dos);
					
					// String
				
						writeString(this.FGLOMERULAR_UMEDIDA,dos);
					
					// String
				
						writeString(this.PABDOMINAL_VALOR,dos);
					
					// String
				
						writeString(this.PABDOMINAL_UMEDIDA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODFACTURA="+CODFACTURA);
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",CODCONSULTA="+CODCONSULTA);
		sb.append(",FINALIDAD="+String.valueOf(FINALIDAD));
		sb.append(",CAUSA_EXTERNA="+String.valueOf(CAUSA_EXTERNA));
		sb.append(",CODDIAGNOSTICOPPAL="+CODDIAGNOSTICOPPAL);
		sb.append(",CODDIAGNOSTICO1="+CODDIAGNOSTICO1);
		sb.append(",CODDIAGNOSTICO2="+CODDIAGNOSTICO2);
		sb.append(",CODDIAGNOSTICO3="+CODDIAGNOSTICO3);
		sb.append(",TDIAGNOSTICO="+String.valueOf(TDIAGNOSTICO));
		sb.append(",VCONSULTA="+String.valueOf(VCONSULTA));
		sb.append(",VCUOTAMODERA="+String.valueOf(VCUOTAMODERA));
		sb.append(",VNETOPAGAR="+String.valueOf(VNETOPAGAR));
		sb.append(",TRIPS="+TRIPS);
		sb.append(",PERIODO="+PERIODO);
		sb.append(",PROCESOSASISTENCIAL="+String.valueOf(PROCESOSASISTENCIAL));
		sb.append(",PYP_SIGLA="+PYP_SIGLA);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",ACTIVIDADES="+ACTIVIDADES);
		sb.append(",TAMIZAJES="+TAMIZAJES);
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CONSULTA="+CONSULTA);
		sb.append(",PYP_NOMBRE="+PYP_NOMBRE);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",PESO="+PESO);
		sb.append(",TALLA="+TALLA);
		sb.append(",UMEDIDA_PESO="+UMEDIDA_PESO);
		sb.append(",UMEDIDA_TALLA="+UMEDIDA_TALLA);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",ADMISION_ID="+String.valueOf(ADMISION_ID));
		sb.append(",FINDRISK="+String.valueOf(FINDRISK));
		sb.append(",PFINDRISK="+PFINDRISK);
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",SERVICIO="+SERVICIO);
		sb.append(",CUMPLIMIENTO_CITA="+CUMPLIMIENTO_CITA);
		sb.append(",FCARDIACA_VALOR="+FCARDIACA_VALOR);
		sb.append(",FCARDIACA_UMEDIDA="+FCARDIACA_UMEDIDA);
		sb.append(",PARTERIALSIS_VALOR="+PARTERIALSIS_VALOR);
		sb.append(",PARTERIALSIS_UMEDIDA="+PARTERIALSIS_UMEDIDA);
		sb.append(",PARTERIALDIA_VALOR="+PARTERIALDIA_VALOR);
		sb.append(",PARTERIALDIA_UMEDIDA="+PARTERIALDIA_UMEDIDA);
		sb.append(",PARTERIALMED_VALOR="+PARTERIALMED_VALOR);
		sb.append(",PARTERIALMED_UMEDIDA="+PARTERIALMED_UMEDIDA);
		sb.append(",FRESPIRATORIA_VALOR="+FRESPIRATORIA_VALOR);
		sb.append(",FRESPIRATORIA_UMEDIDA="+FRESPIRATORIA_UMEDIDA);
		sb.append(",PULSO_VALOR="+PULSO_VALOR);
		sb.append(",PULSO_UMEDIDA="+PULSO_UMEDIDA);
		sb.append(",TEMPERATURA_VALOR="+TEMPERATURA_VALOR);
		sb.append(",TEMPERATURA_UMEDIDA="+TEMPERATURA_UMEDIDA);
		sb.append(",IMC_VALOR="+IMC_VALOR);
		sb.append(",IMC_UMEDIDA="+IMC_UMEDIDA);
		sb.append(",SOXIGENO_VALOR="+SOXIGENO_VALOR);
		sb.append(",SOXIGENO_UMEDIDA="+SOXIGENO_UMEDIDA);
		sb.append(",NCREATININA_VALOR="+NCREATININA_VALOR);
		sb.append(",NCREATININA_UMEDIDA="+NCREATININA_UMEDIDA);
		sb.append(",FGLOMERULAR_VALOR="+FGLOMERULAR_VALOR);
		sb.append(",FGLOMERULAR_UMEDIDA="+FGLOMERULAR_UMEDIDA);
		sb.append(",PABDOMINAL_VALOR="+PABDOMINAL_VALOR);
		sb.append(",PABDOMINAL_UMEDIDA="+PABDOMINAL_UMEDIDA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_cStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String CODIGO_PRESTADOR;

				public String getCODIGO_PRESTADOR () {
					return this.CODIGO_PRESTADOR;
				}

				public Boolean CODIGO_PRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODIGO_PRESTADORIsKey(){
				    return false;
				}
				public Integer CODIGO_PRESTADORLength(){
				    return null;
				}
				public Integer CODIGO_PRESTADORPrecision(){
				    return null;
				}
				public String CODIGO_PRESTADORDefault(){
				
					return null;
				
				}
				public String CODIGO_PRESTADORComment(){
				
				    return "";
				
				}
				public String CODIGO_PRESTADORPattern(){
				
					return "";
				
				}
				public String CODIGO_PRESTADOROriginalDbColumnName(){
				
					return "CODIGO_PRESTADOR";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return null;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return null;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String IDENTIFICACION;

				public String getIDENTIFICACION () {
					return this.IDENTIFICACION;
				}

				public Boolean IDENTIFICACIONIsNullable(){
				    return false;
				}
				public Boolean IDENTIFICACIONIsKey(){
				    return false;
				}
				public Integer IDENTIFICACIONLength(){
				    return null;
				}
				public Integer IDENTIFICACIONPrecision(){
				    return null;
				}
				public String IDENTIFICACIONDefault(){
				
					return null;
				
				}
				public String IDENTIFICACIONComment(){
				
				    return "";
				
				}
				public String IDENTIFICACIONPattern(){
				
					return "";
				
				}
				public String IDENTIFICACIONOriginalDbColumnName(){
				
					return "IDENTIFICACION";
				
				}

				
			    public java.util.Date FECHA_CONSULTA;

				public java.util.Date getFECHA_CONSULTA () {
					return this.FECHA_CONSULTA;
				}

				public Boolean FECHA_CONSULTAIsNullable(){
				    return false;
				}
				public Boolean FECHA_CONSULTAIsKey(){
				    return false;
				}
				public Integer FECHA_CONSULTALength(){
				    return null;
				}
				public Integer FECHA_CONSULTAPrecision(){
				    return null;
				}
				public String FECHA_CONSULTADefault(){
				
					return null;
				
				}
				public String FECHA_CONSULTAComment(){
				
				    return "";
				
				}
				public String FECHA_CONSULTAPattern(){
				
					return "";
				
				}
				public String FECHA_CONSULTAOriginalDbColumnName(){
				
					return "FECHA_CONSULTA";
				
				}

				
			    public String AUTORIZACION;

				public String getAUTORIZACION () {
					return this.AUTORIZACION;
				}

				public Boolean AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer AUTORIZACIONLength(){
				    return null;
				}
				public Integer AUTORIZACIONPrecision(){
				    return null;
				}
				public String AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String AUTORIZACIONOriginalDbColumnName(){
				
					return "AUTORIZACION";
				
				}

				
			    public String CODIGO_CUPS;

				public String getCODIGO_CUPS () {
					return this.CODIGO_CUPS;
				}

				public Boolean CODIGO_CUPSIsNullable(){
				    return false;
				}
				public Boolean CODIGO_CUPSIsKey(){
				    return false;
				}
				public Integer CODIGO_CUPSLength(){
				    return null;
				}
				public Integer CODIGO_CUPSPrecision(){
				    return null;
				}
				public String CODIGO_CUPSDefault(){
				
					return null;
				
				}
				public String CODIGO_CUPSComment(){
				
				    return "";
				
				}
				public String CODIGO_CUPSPattern(){
				
					return "";
				
				}
				public String CODIGO_CUPSOriginalDbColumnName(){
				
					return "CODIGO_CUPS";
				
				}

				
			    public BigDecimal FINALIDAD_CONSULTA;

				public BigDecimal getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return null;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return null;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				
			    public BigDecimal CAUSA_EXTERNA;

				public BigDecimal getCAUSA_EXTERNA () {
					return this.CAUSA_EXTERNA;
				}

				public Boolean CAUSA_EXTERNAIsNullable(){
				    return true;
				}
				public Boolean CAUSA_EXTERNAIsKey(){
				    return false;
				}
				public Integer CAUSA_EXTERNALength(){
				    return null;
				}
				public Integer CAUSA_EXTERNAPrecision(){
				    return null;
				}
				public String CAUSA_EXTERNADefault(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAComment(){
				
				    return "";
				
				}
				public String CAUSA_EXTERNAPattern(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAOriginalDbColumnName(){
				
					return "CAUSA_EXTERNA";
				
				}

				
			    public String DIAGNOSTICO_PRINCIPAL;

				public String getDIAGNOSTICO_PRINCIPAL () {
					return this.DIAGNOSTICO_PRINCIPAL;
				}

				public Boolean DIAGNOSTICO_PRINCIPALIsNullable(){
				    return false;
				}
				public Boolean DIAGNOSTICO_PRINCIPALIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICO_PRINCIPALLength(){
				    return null;
				}
				public Integer DIAGNOSTICO_PRINCIPALPrecision(){
				    return null;
				}
				public String DIAGNOSTICO_PRINCIPALDefault(){
				
					return null;
				
				}
				public String DIAGNOSTICO_PRINCIPALComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICO_PRINCIPALPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICO_PRINCIPALOriginalDbColumnName(){
				
					return "DIAGNOSTICO_PRINCIPAL";
				
				}

				
			    public String DIAGR_1;

				public String getDIAGR_1 () {
					return this.DIAGR_1;
				}

				public Boolean DIAGR_1IsNullable(){
				    return true;
				}
				public Boolean DIAGR_1IsKey(){
				    return false;
				}
				public Integer DIAGR_1Length(){
				    return null;
				}
				public Integer DIAGR_1Precision(){
				    return null;
				}
				public String DIAGR_1Default(){
				
					return null;
				
				}
				public String DIAGR_1Comment(){
				
				    return "";
				
				}
				public String DIAGR_1Pattern(){
				
					return "";
				
				}
				public String DIAGR_1OriginalDbColumnName(){
				
					return "DIAGR_1";
				
				}

				
			    public String DIAGR_2;

				public String getDIAGR_2 () {
					return this.DIAGR_2;
				}

				public Boolean DIAGR_2IsNullable(){
				    return true;
				}
				public Boolean DIAGR_2IsKey(){
				    return false;
				}
				public Integer DIAGR_2Length(){
				    return null;
				}
				public Integer DIAGR_2Precision(){
				    return null;
				}
				public String DIAGR_2Default(){
				
					return null;
				
				}
				public String DIAGR_2Comment(){
				
				    return "";
				
				}
				public String DIAGR_2Pattern(){
				
					return "";
				
				}
				public String DIAGR_2OriginalDbColumnName(){
				
					return "DIAGR_2";
				
				}

				
			    public String DIAGR_3;

				public String getDIAGR_3 () {
					return this.DIAGR_3;
				}

				public Boolean DIAGR_3IsNullable(){
				    return true;
				}
				public Boolean DIAGR_3IsKey(){
				    return false;
				}
				public Integer DIAGR_3Length(){
				    return null;
				}
				public Integer DIAGR_3Precision(){
				    return null;
				}
				public String DIAGR_3Default(){
				
					return null;
				
				}
				public String DIAGR_3Comment(){
				
				    return "";
				
				}
				public String DIAGR_3Pattern(){
				
					return "";
				
				}
				public String DIAGR_3OriginalDbColumnName(){
				
					return "DIAGR_3";
				
				}

				
			    public BigDecimal TDIAG;

				public BigDecimal getTDIAG () {
					return this.TDIAG;
				}

				public Boolean TDIAGIsNullable(){
				    return true;
				}
				public Boolean TDIAGIsKey(){
				    return false;
				}
				public Integer TDIAGLength(){
				    return null;
				}
				public Integer TDIAGPrecision(){
				    return null;
				}
				public String TDIAGDefault(){
				
					return "";
				
				}
				public String TDIAGComment(){
				
				    return "";
				
				}
				public String TDIAGPattern(){
				
					return "";
				
				}
				public String TDIAGOriginalDbColumnName(){
				
					return "TDIAG";
				
				}

				
			    public BigDecimal VALOR_CONSULTA;

				public BigDecimal getVALOR_CONSULTA () {
					return this.VALOR_CONSULTA;
				}

				public Boolean VALOR_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean VALOR_CONSULTAIsKey(){
				    return false;
				}
				public Integer VALOR_CONSULTALength(){
				    return null;
				}
				public Integer VALOR_CONSULTAPrecision(){
				    return null;
				}
				public String VALOR_CONSULTADefault(){
				
					return "";
				
				}
				public String VALOR_CONSULTAComment(){
				
				    return "";
				
				}
				public String VALOR_CONSULTAPattern(){
				
					return "";
				
				}
				public String VALOR_CONSULTAOriginalDbColumnName(){
				
					return "VALOR_CONSULTA";
				
				}

				
			    public BigDecimal VALOR_MODERADORA;

				public BigDecimal getVALOR_MODERADORA () {
					return this.VALOR_MODERADORA;
				}

				public Boolean VALOR_MODERADORAIsNullable(){
				    return true;
				}
				public Boolean VALOR_MODERADORAIsKey(){
				    return false;
				}
				public Integer VALOR_MODERADORALength(){
				    return null;
				}
				public Integer VALOR_MODERADORAPrecision(){
				    return null;
				}
				public String VALOR_MODERADORADefault(){
				
					return "";
				
				}
				public String VALOR_MODERADORAComment(){
				
				    return "";
				
				}
				public String VALOR_MODERADORAPattern(){
				
					return "";
				
				}
				public String VALOR_MODERADORAOriginalDbColumnName(){
				
					return "VALOR_MODERADORA";
				
				}

				
			    public BigDecimal VALOR_NETO;

				public BigDecimal getVALOR_NETO () {
					return this.VALOR_NETO;
				}

				public Boolean VALOR_NETOIsNullable(){
				    return true;
				}
				public Boolean VALOR_NETOIsKey(){
				    return false;
				}
				public Integer VALOR_NETOLength(){
				    return null;
				}
				public Integer VALOR_NETOPrecision(){
				    return null;
				}
				public String VALOR_NETODefault(){
				
					return "";
				
				}
				public String VALOR_NETOComment(){
				
				    return "";
				
				}
				public String VALOR_NETOPattern(){
				
					return "";
				
				}
				public String VALOR_NETOOriginalDbColumnName(){
				
					return "VALOR_NETO";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIAL;

				public BigDecimal getPROCESOSASISTENCIAL () {
					return this.PROCESOSASISTENCIAL;
				}

				public Boolean PROCESOSASISTENCIALIsNullable(){
				    return false;
				}
				public Boolean PROCESOSASISTENCIALIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALLength(){
				    return null;
				}
				public Integer PROCESOSASISTENCIALPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIAL";
				
				}

				
			    public String PYP_SIGLA;

				public String getPYP_SIGLA () {
					return this.PYP_SIGLA;
				}

				public Boolean PYP_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PYP_SIGLAIsKey(){
				    return false;
				}
				public Integer PYP_SIGLALength(){
				    return null;
				}
				public Integer PYP_SIGLAPrecision(){
				    return null;
				}
				public String PYP_SIGLADefault(){
				
					return null;
				
				}
				public String PYP_SIGLAComment(){
				
				    return "";
				
				}
				public String PYP_SIGLAPattern(){
				
					return "";
				
				}
				public String PYP_SIGLAOriginalDbColumnName(){
				
					return "PYP_SIGLA";
				
				}

				
			    public String PYP_NOMBRE;

				public String getPYP_NOMBRE () {
					return this.PYP_NOMBRE;
				}

				public Boolean PYP_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PYP_NOMBREIsKey(){
				    return false;
				}
				public Integer PYP_NOMBRELength(){
				    return null;
				}
				public Integer PYP_NOMBREPrecision(){
				    return null;
				}
				public String PYP_NOMBREDefault(){
				
					return null;
				
				}
				public String PYP_NOMBREComment(){
				
				    return "";
				
				}
				public String PYP_NOMBREPattern(){
				
					return "";
				
				}
				public String PYP_NOMBREOriginalDbColumnName(){
				
					return "PYP_NOMBRE";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String TAMIZAJES;

				public String getTAMIZAJES () {
					return this.TAMIZAJES;
				}

				public Boolean TAMIZAJESIsNullable(){
				    return true;
				}
				public Boolean TAMIZAJESIsKey(){
				    return false;
				}
				public Integer TAMIZAJESLength(){
				    return null;
				}
				public Integer TAMIZAJESPrecision(){
				    return null;
				}
				public String TAMIZAJESDefault(){
				
					return null;
				
				}
				public String TAMIZAJESComment(){
				
				    return "";
				
				}
				public String TAMIZAJESPattern(){
				
					return "";
				
				}
				public String TAMIZAJESOriginalDbColumnName(){
				
					return "TAMIZAJES";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String CONSULTA;

				public String getCONSULTA () {
					return this.CONSULTA;
				}

				public Boolean CONSULTAIsNullable(){
				    return false;
				}
				public Boolean CONSULTAIsKey(){
				    return false;
				}
				public Integer CONSULTALength(){
				    return null;
				}
				public Integer CONSULTAPrecision(){
				    return null;
				}
				public String CONSULTADefault(){
				
					return null;
				
				}
				public String CONSULTAComment(){
				
				    return "";
				
				}
				public String CONSULTAPattern(){
				
					return "";
				
				}
				public String CONSULTAOriginalDbColumnName(){
				
					return "CONSULTA";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return null;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return null;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return null;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return null;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return null;
				}
				public Integer ESPECIALIDADPrecision(){
				    return null;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return null;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return null;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return null;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return null;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return null;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return null;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return null;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public BigDecimal ADMISIONES_ID;

				public BigDecimal getADMISIONES_ID () {
					return this.ADMISIONES_ID;
				}

				public Boolean ADMISIONES_IDIsNullable(){
				    return false;
				}
				public Boolean ADMISIONES_IDIsKey(){
				    return false;
				}
				public Integer ADMISIONES_IDLength(){
				    return null;
				}
				public Integer ADMISIONES_IDPrecision(){
				    return null;
				}
				public String ADMISIONES_IDDefault(){
				
					return "";
				
				}
				public String ADMISIONES_IDComment(){
				
				    return "";
				
				}
				public String ADMISIONES_IDPattern(){
				
					return "";
				
				}
				public String ADMISIONES_IDOriginalDbColumnName(){
				
					return "ADMISIONES_ID";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return null;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return null;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return null;
				}
				public Integer GRADOPrecision(){
				    return null;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return null;
				}
				public Integer CLASEGRDPrecision(){
				    return null;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return null;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return null;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				
			    public String SERVICIO;

				public String getSERVICIO () {
					return this.SERVICIO;
				}

				public Boolean SERVICIOIsNullable(){
				    return true;
				}
				public Boolean SERVICIOIsKey(){
				    return false;
				}
				public Integer SERVICIOLength(){
				    return null;
				}
				public Integer SERVICIOPrecision(){
				    return null;
				}
				public String SERVICIODefault(){
				
					return null;
				
				}
				public String SERVICIOComment(){
				
				    return "";
				
				}
				public String SERVICIOPattern(){
				
					return "";
				
				}
				public String SERVICIOOriginalDbColumnName(){
				
					return "SERVICIO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.CODIGO_PRESTADOR = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.IDENTIFICACION = readString(dis);
					
					this.FECHA_CONSULTA = readDate(dis);
					
					this.AUTORIZACION = readString(dis);
					
					this.CODIGO_CUPS = readString(dis);
					
						this.FINALIDAD_CONSULTA = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.DIAGNOSTICO_PRINCIPAL = readString(dis);
					
					this.DIAGR_1 = readString(dis);
					
					this.DIAGR_2 = readString(dis);
					
					this.DIAGR_3 = readString(dis);
					
						this.TDIAG = (BigDecimal) dis.readObject();
					
						this.VALOR_CONSULTA = (BigDecimal) dis.readObject();
					
						this.VALOR_MODERADORA = (BigDecimal) dis.readObject();
					
						this.VALOR_NETO = (BigDecimal) dis.readObject();
					
						this.PROCESOSASISTENCIAL = (BigDecimal) dis.readObject();
					
					this.PYP_SIGLA = readString(dis);
					
					this.PYP_NOMBRE = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TAMIZAJES = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CONSULTA = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
						this.ADMISIONES_ID = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
					this.SERVICIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.CODIGO_PRESTADOR = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.IDENTIFICACION = readString(dis);
					
					this.FECHA_CONSULTA = readDate(dis);
					
					this.AUTORIZACION = readString(dis);
					
					this.CODIGO_CUPS = readString(dis);
					
						this.FINALIDAD_CONSULTA = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.DIAGNOSTICO_PRINCIPAL = readString(dis);
					
					this.DIAGR_1 = readString(dis);
					
					this.DIAGR_2 = readString(dis);
					
					this.DIAGR_3 = readString(dis);
					
						this.TDIAG = (BigDecimal) dis.readObject();
					
						this.VALOR_CONSULTA = (BigDecimal) dis.readObject();
					
						this.VALOR_MODERADORA = (BigDecimal) dis.readObject();
					
						this.VALOR_NETO = (BigDecimal) dis.readObject();
					
						this.PROCESOSASISTENCIAL = (BigDecimal) dis.readObject();
					
					this.PYP_SIGLA = readString(dis);
					
					this.PYP_NOMBRE = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TAMIZAJES = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CONSULTA = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
						this.ADMISIONES_ID = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
					this.SERVICIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.CODIGO_PRESTADOR,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.IDENTIFICACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CONSULTA,dos);
					
					// String
				
						writeString(this.AUTORIZACION,dos);
					
					// String
				
						writeString(this.CODIGO_CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FINALIDAD_CONSULTA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.DIAGNOSTICO_PRINCIPAL,dos);
					
					// String
				
						writeString(this.DIAGR_1,dos);
					
					// String
				
						writeString(this.DIAGR_2,dos);
					
					// String
				
						writeString(this.DIAGR_3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDIAG);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_CONSULTA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_MODERADORA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_NETO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIAL);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// String
				
						writeString(this.PYP_NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TAMIZAJES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CONSULTA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISIONES_ID);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
					// String
				
						writeString(this.SERVICIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.CODIGO_PRESTADOR,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.IDENTIFICACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CONSULTA,dos);
					
					// String
				
						writeString(this.AUTORIZACION,dos);
					
					// String
				
						writeString(this.CODIGO_CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FINALIDAD_CONSULTA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.DIAGNOSTICO_PRINCIPAL,dos);
					
					// String
				
						writeString(this.DIAGR_1,dos);
					
					// String
				
						writeString(this.DIAGR_2,dos);
					
					// String
				
						writeString(this.DIAGR_3,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDIAG);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_CONSULTA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_MODERADORA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_NETO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIAL);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// String
				
						writeString(this.PYP_NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TAMIZAJES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CONSULTA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISIONES_ID);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
					// String
				
						writeString(this.SERVICIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",CODIGO_PRESTADOR="+CODIGO_PRESTADOR);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",IDENTIFICACION="+IDENTIFICACION);
		sb.append(",FECHA_CONSULTA="+String.valueOf(FECHA_CONSULTA));
		sb.append(",AUTORIZACION="+AUTORIZACION);
		sb.append(",CODIGO_CUPS="+CODIGO_CUPS);
		sb.append(",FINALIDAD_CONSULTA="+String.valueOf(FINALIDAD_CONSULTA));
		sb.append(",CAUSA_EXTERNA="+String.valueOf(CAUSA_EXTERNA));
		sb.append(",DIAGNOSTICO_PRINCIPAL="+DIAGNOSTICO_PRINCIPAL);
		sb.append(",DIAGR_1="+DIAGR_1);
		sb.append(",DIAGR_2="+DIAGR_2);
		sb.append(",DIAGR_3="+DIAGR_3);
		sb.append(",TDIAG="+String.valueOf(TDIAG));
		sb.append(",VALOR_CONSULTA="+String.valueOf(VALOR_CONSULTA));
		sb.append(",VALOR_MODERADORA="+String.valueOf(VALOR_MODERADORA));
		sb.append(",VALOR_NETO="+String.valueOf(VALOR_NETO));
		sb.append(",PROCESOSASISTENCIAL="+String.valueOf(PROCESOSASISTENCIAL));
		sb.append(",PYP_SIGLA="+PYP_SIGLA);
		sb.append(",PYP_NOMBRE="+PYP_NOMBRE);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",TAMIZAJES="+TAMIZAJES);
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CONSULTA="+CONSULTA);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",ADMISIONES_ID="+String.valueOf(ADMISIONES_ID));
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
		sb.append(",SERVICIO="+SERVICIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_7Struct implements routines.system.IPersistableRow<after_tOracleInput_7Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String CODIGO_PRESTADOR;

				public String getCODIGO_PRESTADOR () {
					return this.CODIGO_PRESTADOR;
				}

				public Boolean CODIGO_PRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODIGO_PRESTADORIsKey(){
				    return false;
				}
				public Integer CODIGO_PRESTADORLength(){
				    return null;
				}
				public Integer CODIGO_PRESTADORPrecision(){
				    return null;
				}
				public String CODIGO_PRESTADORDefault(){
				
					return null;
				
				}
				public String CODIGO_PRESTADORComment(){
				
				    return "";
				
				}
				public String CODIGO_PRESTADORPattern(){
				
					return "";
				
				}
				public String CODIGO_PRESTADOROriginalDbColumnName(){
				
					return "CODIGO_PRESTADOR";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return null;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return null;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String IDENTIFICACION;

				public String getIDENTIFICACION () {
					return this.IDENTIFICACION;
				}

				public Boolean IDENTIFICACIONIsNullable(){
				    return false;
				}
				public Boolean IDENTIFICACIONIsKey(){
				    return false;
				}
				public Integer IDENTIFICACIONLength(){
				    return null;
				}
				public Integer IDENTIFICACIONPrecision(){
				    return null;
				}
				public String IDENTIFICACIONDefault(){
				
					return null;
				
				}
				public String IDENTIFICACIONComment(){
				
				    return "";
				
				}
				public String IDENTIFICACIONPattern(){
				
					return "";
				
				}
				public String IDENTIFICACIONOriginalDbColumnName(){
				
					return "IDENTIFICACION";
				
				}

				
			    public java.util.Date FECHA_CONSULTA;

				public java.util.Date getFECHA_CONSULTA () {
					return this.FECHA_CONSULTA;
				}

				public Boolean FECHA_CONSULTAIsNullable(){
				    return false;
				}
				public Boolean FECHA_CONSULTAIsKey(){
				    return false;
				}
				public Integer FECHA_CONSULTALength(){
				    return null;
				}
				public Integer FECHA_CONSULTAPrecision(){
				    return null;
				}
				public String FECHA_CONSULTADefault(){
				
					return null;
				
				}
				public String FECHA_CONSULTAComment(){
				
				    return "";
				
				}
				public String FECHA_CONSULTAPattern(){
				
					return "";
				
				}
				public String FECHA_CONSULTAOriginalDbColumnName(){
				
					return "FECHA_CONSULTA";
				
				}

				
			    public String AUTORIZACION;

				public String getAUTORIZACION () {
					return this.AUTORIZACION;
				}

				public Boolean AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer AUTORIZACIONLength(){
				    return null;
				}
				public Integer AUTORIZACIONPrecision(){
				    return null;
				}
				public String AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String AUTORIZACIONOriginalDbColumnName(){
				
					return "AUTORIZACION";
				
				}

				
			    public String CODIGO_CUPS;

				public String getCODIGO_CUPS () {
					return this.CODIGO_CUPS;
				}

				public Boolean CODIGO_CUPSIsNullable(){
				    return false;
				}
				public Boolean CODIGO_CUPSIsKey(){
				    return false;
				}
				public Integer CODIGO_CUPSLength(){
				    return null;
				}
				public Integer CODIGO_CUPSPrecision(){
				    return null;
				}
				public String CODIGO_CUPSDefault(){
				
					return null;
				
				}
				public String CODIGO_CUPSComment(){
				
				    return "";
				
				}
				public String CODIGO_CUPSPattern(){
				
					return "";
				
				}
				public String CODIGO_CUPSOriginalDbColumnName(){
				
					return "CODIGO_CUPS";
				
				}

				
			    public BigDecimal FINALIDAD_CONSULTA;

				public BigDecimal getFINALIDAD_CONSULTA () {
					return this.FINALIDAD_CONSULTA;
				}

				public Boolean FINALIDAD_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean FINALIDAD_CONSULTAIsKey(){
				    return false;
				}
				public Integer FINALIDAD_CONSULTALength(){
				    return null;
				}
				public Integer FINALIDAD_CONSULTAPrecision(){
				    return null;
				}
				public String FINALIDAD_CONSULTADefault(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAComment(){
				
				    return "";
				
				}
				public String FINALIDAD_CONSULTAPattern(){
				
					return "";
				
				}
				public String FINALIDAD_CONSULTAOriginalDbColumnName(){
				
					return "FINALIDAD_CONSULTA";
				
				}

				
			    public BigDecimal CAUSA_EXTERNA;

				public BigDecimal getCAUSA_EXTERNA () {
					return this.CAUSA_EXTERNA;
				}

				public Boolean CAUSA_EXTERNAIsNullable(){
				    return true;
				}
				public Boolean CAUSA_EXTERNAIsKey(){
				    return false;
				}
				public Integer CAUSA_EXTERNALength(){
				    return null;
				}
				public Integer CAUSA_EXTERNAPrecision(){
				    return null;
				}
				public String CAUSA_EXTERNADefault(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAComment(){
				
				    return "";
				
				}
				public String CAUSA_EXTERNAPattern(){
				
					return "";
				
				}
				public String CAUSA_EXTERNAOriginalDbColumnName(){
				
					return "CAUSA_EXTERNA";
				
				}

				
			    public String DIAGNOSTICO_PRINCIPAL;

				public String getDIAGNOSTICO_PRINCIPAL () {
					return this.DIAGNOSTICO_PRINCIPAL;
				}

				public Boolean DIAGNOSTICO_PRINCIPALIsNullable(){
				    return false;
				}
				public Boolean DIAGNOSTICO_PRINCIPALIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICO_PRINCIPALLength(){
				    return null;
				}
				public Integer DIAGNOSTICO_PRINCIPALPrecision(){
				    return null;
				}
				public String DIAGNOSTICO_PRINCIPALDefault(){
				
					return null;
				
				}
				public String DIAGNOSTICO_PRINCIPALComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICO_PRINCIPALPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICO_PRINCIPALOriginalDbColumnName(){
				
					return "DIAGNOSTICO_PRINCIPAL";
				
				}

				
			    public String DIAGR_1;

				public String getDIAGR_1 () {
					return this.DIAGR_1;
				}

				public Boolean DIAGR_1IsNullable(){
				    return true;
				}
				public Boolean DIAGR_1IsKey(){
				    return false;
				}
				public Integer DIAGR_1Length(){
				    return null;
				}
				public Integer DIAGR_1Precision(){
				    return null;
				}
				public String DIAGR_1Default(){
				
					return null;
				
				}
				public String DIAGR_1Comment(){
				
				    return "";
				
				}
				public String DIAGR_1Pattern(){
				
					return "";
				
				}
				public String DIAGR_1OriginalDbColumnName(){
				
					return "DIAGR_1";
				
				}

				
			    public String DIAGR_2;

				public String getDIAGR_2 () {
					return this.DIAGR_2;
				}

				public Boolean DIAGR_2IsNullable(){
				    return true;
				}
				public Boolean DIAGR_2IsKey(){
				    return false;
				}
				public Integer DIAGR_2Length(){
				    return null;
				}
				public Integer DIAGR_2Precision(){
				    return null;
				}
				public String DIAGR_2Default(){
				
					return null;
				
				}
				public String DIAGR_2Comment(){
				
				    return "";
				
				}
				public String DIAGR_2Pattern(){
				
					return "";
				
				}
				public String DIAGR_2OriginalDbColumnName(){
				
					return "DIAGR_2";
				
				}

				
			    public String DIAGR_3;

				public String getDIAGR_3 () {
					return this.DIAGR_3;
				}

				public Boolean DIAGR_3IsNullable(){
				    return true;
				}
				public Boolean DIAGR_3IsKey(){
				    return false;
				}
				public Integer DIAGR_3Length(){
				    return null;
				}
				public Integer DIAGR_3Precision(){
				    return null;
				}
				public String DIAGR_3Default(){
				
					return null;
				
				}
				public String DIAGR_3Comment(){
				
				    return "";
				
				}
				public String DIAGR_3Pattern(){
				
					return "";
				
				}
				public String DIAGR_3OriginalDbColumnName(){
				
					return "DIAGR_3";
				
				}

				
			    public BigDecimal TDIAG;

				public BigDecimal getTDIAG () {
					return this.TDIAG;
				}

				public Boolean TDIAGIsNullable(){
				    return true;
				}
				public Boolean TDIAGIsKey(){
				    return false;
				}
				public Integer TDIAGLength(){
				    return null;
				}
				public Integer TDIAGPrecision(){
				    return null;
				}
				public String TDIAGDefault(){
				
					return "";
				
				}
				public String TDIAGComment(){
				
				    return "";
				
				}
				public String TDIAGPattern(){
				
					return "";
				
				}
				public String TDIAGOriginalDbColumnName(){
				
					return "TDIAG";
				
				}

				
			    public BigDecimal VALOR_CONSULTA;

				public BigDecimal getVALOR_CONSULTA () {
					return this.VALOR_CONSULTA;
				}

				public Boolean VALOR_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean VALOR_CONSULTAIsKey(){
				    return false;
				}
				public Integer VALOR_CONSULTALength(){
				    return null;
				}
				public Integer VALOR_CONSULTAPrecision(){
				    return null;
				}
				public String VALOR_CONSULTADefault(){
				
					return "";
				
				}
				public String VALOR_CONSULTAComment(){
				
				    return "";
				
				}
				public String VALOR_CONSULTAPattern(){
				
					return "";
				
				}
				public String VALOR_CONSULTAOriginalDbColumnName(){
				
					return "VALOR_CONSULTA";
				
				}

				
			    public BigDecimal VALOR_MODERADORA;

				public BigDecimal getVALOR_MODERADORA () {
					return this.VALOR_MODERADORA;
				}

				public Boolean VALOR_MODERADORAIsNullable(){
				    return true;
				}
				public Boolean VALOR_MODERADORAIsKey(){
				    return false;
				}
				public Integer VALOR_MODERADORALength(){
				    return null;
				}
				public Integer VALOR_MODERADORAPrecision(){
				    return null;
				}
				public String VALOR_MODERADORADefault(){
				
					return "";
				
				}
				public String VALOR_MODERADORAComment(){
				
				    return "";
				
				}
				public String VALOR_MODERADORAPattern(){
				
					return "";
				
				}
				public String VALOR_MODERADORAOriginalDbColumnName(){
				
					return "VALOR_MODERADORA";
				
				}

				
			    public BigDecimal VALOR_NETO;

				public BigDecimal getVALOR_NETO () {
					return this.VALOR_NETO;
				}

				public Boolean VALOR_NETOIsNullable(){
				    return true;
				}
				public Boolean VALOR_NETOIsKey(){
				    return false;
				}
				public Integer VALOR_NETOLength(){
				    return null;
				}
				public Integer VALOR_NETOPrecision(){
				    return null;
				}
				public String VALOR_NETODefault(){
				
					return "";
				
				}
				public String VALOR_NETOComment(){
				
				    return "";
				
				}
				public String VALOR_NETOPattern(){
				
					return "";
				
				}
				public String VALOR_NETOOriginalDbColumnName(){
				
					return "VALOR_NETO";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIAL;

				public BigDecimal getPROCESOSASISTENCIAL () {
					return this.PROCESOSASISTENCIAL;
				}

				public Boolean PROCESOSASISTENCIALIsNullable(){
				    return false;
				}
				public Boolean PROCESOSASISTENCIALIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALLength(){
				    return null;
				}
				public Integer PROCESOSASISTENCIALPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIAL";
				
				}

				
			    public String PYP_SIGLA;

				public String getPYP_SIGLA () {
					return this.PYP_SIGLA;
				}

				public Boolean PYP_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PYP_SIGLAIsKey(){
				    return false;
				}
				public Integer PYP_SIGLALength(){
				    return null;
				}
				public Integer PYP_SIGLAPrecision(){
				    return null;
				}
				public String PYP_SIGLADefault(){
				
					return null;
				
				}
				public String PYP_SIGLAComment(){
				
				    return "";
				
				}
				public String PYP_SIGLAPattern(){
				
					return "";
				
				}
				public String PYP_SIGLAOriginalDbColumnName(){
				
					return "PYP_SIGLA";
				
				}

				
			    public String PYP_NOMBRE;

				public String getPYP_NOMBRE () {
					return this.PYP_NOMBRE;
				}

				public Boolean PYP_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PYP_NOMBREIsKey(){
				    return false;
				}
				public Integer PYP_NOMBRELength(){
				    return null;
				}
				public Integer PYP_NOMBREPrecision(){
				    return null;
				}
				public String PYP_NOMBREDefault(){
				
					return null;
				
				}
				public String PYP_NOMBREComment(){
				
				    return "";
				
				}
				public String PYP_NOMBREPattern(){
				
					return "";
				
				}
				public String PYP_NOMBREOriginalDbColumnName(){
				
					return "PYP_NOMBRE";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String TAMIZAJES;

				public String getTAMIZAJES () {
					return this.TAMIZAJES;
				}

				public Boolean TAMIZAJESIsNullable(){
				    return true;
				}
				public Boolean TAMIZAJESIsKey(){
				    return false;
				}
				public Integer TAMIZAJESLength(){
				    return null;
				}
				public Integer TAMIZAJESPrecision(){
				    return null;
				}
				public String TAMIZAJESDefault(){
				
					return null;
				
				}
				public String TAMIZAJESComment(){
				
				    return "";
				
				}
				public String TAMIZAJESPattern(){
				
					return "";
				
				}
				public String TAMIZAJESOriginalDbColumnName(){
				
					return "TAMIZAJES";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String CONSULTA;

				public String getCONSULTA () {
					return this.CONSULTA;
				}

				public Boolean CONSULTAIsNullable(){
				    return false;
				}
				public Boolean CONSULTAIsKey(){
				    return false;
				}
				public Integer CONSULTALength(){
				    return null;
				}
				public Integer CONSULTAPrecision(){
				    return null;
				}
				public String CONSULTADefault(){
				
					return null;
				
				}
				public String CONSULTAComment(){
				
				    return "";
				
				}
				public String CONSULTAPattern(){
				
					return "";
				
				}
				public String CONSULTAOriginalDbColumnName(){
				
					return "CONSULTA";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return null;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return null;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return null;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return null;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return null;
				}
				public Integer ESPECIALIDADPrecision(){
				    return null;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return null;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return null;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return null;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return null;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return null;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return null;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return null;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public BigDecimal ADMISIONES_ID;

				public BigDecimal getADMISIONES_ID () {
					return this.ADMISIONES_ID;
				}

				public Boolean ADMISIONES_IDIsNullable(){
				    return false;
				}
				public Boolean ADMISIONES_IDIsKey(){
				    return false;
				}
				public Integer ADMISIONES_IDLength(){
				    return null;
				}
				public Integer ADMISIONES_IDPrecision(){
				    return null;
				}
				public String ADMISIONES_IDDefault(){
				
					return "";
				
				}
				public String ADMISIONES_IDComment(){
				
				    return "";
				
				}
				public String ADMISIONES_IDPattern(){
				
					return "";
				
				}
				public String ADMISIONES_IDOriginalDbColumnName(){
				
					return "ADMISIONES_ID";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return null;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return null;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return null;
				}
				public Integer GRADOPrecision(){
				    return null;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return null;
				}
				public Integer CLASEGRDPrecision(){
				    return null;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return null;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return null;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				
			    public String SERVICIO;

				public String getSERVICIO () {
					return this.SERVICIO;
				}

				public Boolean SERVICIOIsNullable(){
				    return true;
				}
				public Boolean SERVICIOIsKey(){
				    return false;
				}
				public Integer SERVICIOLength(){
				    return null;
				}
				public Integer SERVICIOPrecision(){
				    return null;
				}
				public String SERVICIODefault(){
				
					return null;
				
				}
				public String SERVICIOComment(){
				
				    return "";
				
				}
				public String SERVICIOPattern(){
				
					return "";
				
				}
				public String SERVICIOOriginalDbColumnName(){
				
					return "SERVICIO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.CODIGO_PRESTADOR = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.IDENTIFICACION = readString(dis);
					
					this.FECHA_CONSULTA = readDate(dis);
					
					this.AUTORIZACION = readString(dis);
					
					this.CODIGO_CUPS = readString(dis);
					
						this.FINALIDAD_CONSULTA = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.DIAGNOSTICO_PRINCIPAL = readString(dis);
					
					this.DIAGR_1 = readString(dis);
					
					this.DIAGR_2 = readString(dis);
					
					this.DIAGR_3 = readString(dis);
					
						this.TDIAG = (BigDecimal) dis.readObject();
					
						this.VALOR_CONSULTA = (BigDecimal) dis.readObject();
					
						this.VALOR_MODERADORA = (BigDecimal) dis.readObject();
					
						this.VALOR_NETO = (BigDecimal) dis.readObject();
					
						this.PROCESOSASISTENCIAL = (BigDecimal) dis.readObject();
					
					this.PYP_SIGLA = readString(dis);
					
					this.PYP_NOMBRE = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TAMIZAJES = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CONSULTA = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
						this.ADMISIONES_ID = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
					this.SERVICIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.CODIGO_PRESTADOR = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.IDENTIFICACION = readString(dis);
					
					this.FECHA_CONSULTA = readDate(dis);
					
					this.AUTORIZACION = readString(dis);
					
					this.CODIGO_CUPS = readString(dis);
					
						this.FINALIDAD_CONSULTA = (BigDecimal) dis.readObject();
					
						this.CAUSA_EXTERNA = (BigDecimal) dis.readObject();
					
					this.DIAGNOSTICO_PRINCIPAL = readString(dis);
					
					this.DIAGR_1 = readString(dis);
					
					this.DIAGR_2 = readString(dis);
					
					this.DIAGR_3 = readString(dis);
					
						this.TDIAG = (BigDecimal) dis.readObject();
					
						this.VALOR_CONSULTA = (BigDecimal) dis.readObject();
					
						this.VALOR_MODERADORA = (BigDecimal) dis.readObject();
					
						this.VALOR_NETO = (BigDecimal) dis.readObject();
					
						this.PROCESOSASISTENCIAL = (BigDecimal) dis.readObject();
					
					this.PYP_SIGLA = readString(dis);
					
					this.PYP_NOMBRE = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TAMIZAJES = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CONSULTA = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
						this.ADMISIONES_ID = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
					this.SERVICIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.CODIGO_PRESTADOR,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.IDENTIFICACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CONSULTA,dos);
					
					// String
				
						writeString(this.AUTORIZACION,dos);
					
					// String
				
						writeString(this.CODIGO_CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FINALIDAD_CONSULTA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.DIAGNOSTICO_PRINCIPAL,dos);
					
					// String
				
						writeString(this.DIAGR_1,dos);
					
					// String
				
						writeString(this.DIAGR_2,dos);
					
					// String
				
						writeString(this.DIAGR_3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDIAG);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_CONSULTA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_MODERADORA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_NETO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIAL);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// String
				
						writeString(this.PYP_NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TAMIZAJES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CONSULTA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISIONES_ID);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
					// String
				
						writeString(this.SERVICIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.CODIGO_PRESTADOR,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.IDENTIFICACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CONSULTA,dos);
					
					// String
				
						writeString(this.AUTORIZACION,dos);
					
					// String
				
						writeString(this.CODIGO_CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FINALIDAD_CONSULTA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSA_EXTERNA);
					
					// String
				
						writeString(this.DIAGNOSTICO_PRINCIPAL,dos);
					
					// String
				
						writeString(this.DIAGR_1,dos);
					
					// String
				
						writeString(this.DIAGR_2,dos);
					
					// String
				
						writeString(this.DIAGR_3,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDIAG);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_CONSULTA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_MODERADORA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_NETO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIAL);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// String
				
						writeString(this.PYP_NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TAMIZAJES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CONSULTA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISIONES_ID);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
					// String
				
						writeString(this.SERVICIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",CODIGO_PRESTADOR="+CODIGO_PRESTADOR);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",IDENTIFICACION="+IDENTIFICACION);
		sb.append(",FECHA_CONSULTA="+String.valueOf(FECHA_CONSULTA));
		sb.append(",AUTORIZACION="+AUTORIZACION);
		sb.append(",CODIGO_CUPS="+CODIGO_CUPS);
		sb.append(",FINALIDAD_CONSULTA="+String.valueOf(FINALIDAD_CONSULTA));
		sb.append(",CAUSA_EXTERNA="+String.valueOf(CAUSA_EXTERNA));
		sb.append(",DIAGNOSTICO_PRINCIPAL="+DIAGNOSTICO_PRINCIPAL);
		sb.append(",DIAGR_1="+DIAGR_1);
		sb.append(",DIAGR_2="+DIAGR_2);
		sb.append(",DIAGR_3="+DIAGR_3);
		sb.append(",TDIAG="+String.valueOf(TDIAG));
		sb.append(",VALOR_CONSULTA="+String.valueOf(VALOR_CONSULTA));
		sb.append(",VALOR_MODERADORA="+String.valueOf(VALOR_MODERADORA));
		sb.append(",VALOR_NETO="+String.valueOf(VALOR_NETO));
		sb.append(",PROCESOSASISTENCIAL="+String.valueOf(PROCESOSASISTENCIAL));
		sb.append(",PYP_SIGLA="+PYP_SIGLA);
		sb.append(",PYP_NOMBRE="+PYP_NOMBRE);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",TAMIZAJES="+TAMIZAJES);
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CONSULTA="+CONSULTA);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",ADMISIONES_ID="+String.valueOf(ADMISIONES_ID));
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
		sb.append(",SERVICIO="+SERVICIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_6Process(globalMap);
		tOracleInput_17Process(globalMap);
		tHashInput_3Process(globalMap);
		tOracleInput_12Process(globalMap);

		row7Struct row7 = new row7Struct();
insert_cStruct insert_c = new insert_cStruct();





	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_c");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
                    String driverClass_tOracleOutput_1 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_1);
                String url_tOracleOutput_1 = null;
                    url_tOracleOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_1 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_1 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_1 = decryptedPassword_tOracleOutput_1;
                dbschema_tOracleOutput_1 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_1 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_1.put("user",dbUser_tOracleOutput_1);
                    atnParamsPrope_tOracleOutput_1.put("password",dbPwd_tOracleOutput_1);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_1.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_1 = java.sql.DriverManager.getConnection(url_tOracleOutput_1, atnParamsPrope_tOracleOutput_1);
        resourceMap.put("conn_tOracleOutput_1", conn_tOracleOutput_1);
            conn_tOracleOutput_1.setAutoCommit(false);
            int commitEvery_tOracleOutput_1 = 10000;
            int commitCounter_tOracleOutput_1 = 0;
        int batchSize_tOracleOutput_1 = 10000;
        int batchSizeCounter_tOracleOutput_1=0;
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("BRIPS_CONSULTA");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("BRIPS_CONSULTA");
        }
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (CODFACTURA,CODPRESTADOR,TDOCUMENTO,DOCUMENTO,FECHA,CODAUTORIZACION,CODCONSULTA,FINALIDAD,CAUSA_EXTERNA,CODDIAGNOSTICOPPAL,CODDIAGNOSTICO1,CODDIAGNOSTICO2,CODDIAGNOSTICO3,TDIAGNOSTICO,VCONSULTA,VCUOTAMODERA,VNETOPAGAR,TRIPS,PERIODO,PROCESOSASISTENCIAL,PYP_SIGLA,PERSONAS_ID,ACTIVIDADES,TAMIZAJES,UORG_ID,CONSULTA,PYP_NOMBRE,FUERZA_ID,TDOCUMENTO_PROFESIONAL,DOCUMENTO_PROFESIONAL,ESPECIALIDAD,PESO,TALLA,UMEDIDA_PESO,UMEDIDA_TALLA,TIPO_GENERACION,TIPO_USUARIO,EDAD,UMEDIDA_EDAD,GRADO_CODIGO,GRADO,CLASEGRD,ADMISION_ID,FINDRISK,PFINDRISK,CLASEGRD_CODIGO,ESPECIALIDADES_ID,SERVICIO,CUMPLIMIENTO_CITA,FCARDIACA_VALOR,FCARDIACA_UMEDIDA,PARTERIALSIS_VALOR,PARTERIALSIS_UMEDIDA,PARTERIALDIA_VALOR,PARTERIALDIA_UMEDIDA,PARTERIALMED_VALOR,PARTERIALMED_UMEDIDA,FRESPIRATORIA_VALOR,FRESPIRATORIA_UMEDIDA,PULSO_VALOR,PULSO_UMEDIDA,TEMPERATURA_VALOR,TEMPERATURA_UMEDIDA,IMC_VALOR,IMC_UMEDIDA,SOXIGENO_VALOR,SOXIGENO_UMEDIDA,NCREATININA_VALOR,NCREATININA_UMEDIDA,FGLOMERULAR_VALOR,FGLOMERULAR_UMEDIDA,PABDOMINAL_VALOR,PABDOMINAL_UMEDIDA) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                        resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_16", false);
		start_Hash.put("tMap_16", System.currentTimeMillis());
		
	
	currentComponent="tMap_16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_16 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
					globalMap.get( "tHash_Lookup_row15" ))
					;					
					
	

row15Struct row15HashKey = new row15Struct();
row15Struct row15Default = new row15Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) 
					globalMap.get( "tHash_Lookup_row27" ))
					;					
					
	

row27Struct row27HashKey = new row27Struct();
row27Struct row27Default = new row27Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
					globalMap.get( "tHash_Lookup_row5" ))
					;					
					
	

row5Struct row5HashKey = new row5Struct();
row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_16__Struct  {
}
Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_cStruct insert_c_tmp = new insert_cStruct();
// ###############################

        
        



        









 



/**
 * [tMap_16 begin ] stop
 */



	
	/**
	 * [tOracleInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_7", false);
		start_Hash.put("tOracleInput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_7";
	
	
		int tos_count_tOracleInput_7 = 0;
		
	


	
		    int nb_line_tOracleInput_7 = 0;
		    java.sql.Connection conn_tOracleInput_7 = null;
				conn_tOracleInput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
				
                boolean isTimeZoneNull_tOracleInput_7 = false;
				boolean isConnectionWrapped_tOracleInput_7 = !(conn_tOracleInput_7 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_7.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_7 = null;
                if (isConnectionWrapped_tOracleInput_7) {
					unwrappedOraConn_tOracleInput_7 = conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_7 != null) {
                        isTimeZoneNull_tOracleInput_7 = (unwrappedOraConn_tOracleInput_7.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_7 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_7).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_7) {
					java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_7 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_7.next()) {
						sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_7 && unwrappedOraConn_tOracleInput_7 != null) {
                        unwrappedOraConn_tOracleInput_7.setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_7).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_7.setFetchSize(1000);


		    String dbquery_tOracleInput_7 = "SELECT  '' AS NUMERO_FACTURA,\n        UORG.CODIGO AS CODIGO_PRESTADOR,\n        TDOC.SIGLA AS TIPO_DOCUMENTO,\n       "
+" PER.DOCUMENTO AS IDENTIFICACION,\n        PROC.FINICIAL AS FECHA_CONSULTA,  \n        AUT.CONSECUTIVO AS AUTORIZACION,"
+"\n        CUPSCON.CODIGO as CODIGO_CUPS, \n        FINA.CODIGO AS FINALIDAD_CONSULTA,                      \n        CAUS"
+"A.CODIGO AS CAUSA_EXTERNA,  CIE.CODIGO AS DIAGNOSTICO_PRINCIPAL,\n        RELACIONADOS.UNO as DIAGR_1 ,\n        RELACIO"
+"NADOS.DOS AS DIAGR_2,\n        RELACIONADOS.TRES as DIAGR_3 , \n        CASE \n          WHEN DIAG.TDIAGNOSTICO = 'Impre"
+"sión Diagnóstica' THEN TO_NUMBER('1')\n          WHEN DIAG.TDIAGNOSTICO = 'Confirmado Nuevo' THEN TO_NUMBER('2')\n      "
+"    WHEN DIAG.TDIAGNOSTICO = 'Confirmado Repetido' THEN TO_NUMBER('3')\n        END AS TDIAG,        \n        TO_NUMBER"
+"(null) AS VALOR_CONSULTA, \n        TO_NUMBER(null) AS VALOR_MODERADORA,\n        TO_NUMBER(null) AS VALOR_NETO,\n      "
+"  PROC.ID AS PROCESOSASISTENCIAL,\n        PYP.SIGLA AS PYP_SIGLA,\n        PYP.NOMBRE AS PYP_NOMBRE,\n        PROC.PERS"
+"ONAS_ID,\n        (  SELECT LISTAGG(CU.NOMBRE , ', ') WITHIN GROUP (ORDER BY CU.NOMBRE)AS TA\n           FROM RCA_INFGEN"
+"ERAL INF \n           INNER JOIN RCA_CUPSOLICITADOS S ON S.INFGENERAL_ID = INF.ID\n           INNER JOIN GEN_CUPS CU ON "
+"CU.ID = S.CUPS_ID\n           WHERE  INF.ESTREGISTRO_ID = 1\n             AND S.ESTREGISTRO_ID = 1\n             AND CU."
+"CODIGO IN ('907106','452301','907008','906610','903841','903818','903816','903815')\n             AND S.ESTREGISTRO_ID ="
+" 1\n             AND INF.PROCESOSASISTENCIALES_ID = PROC.ID\n        ) AS TAMIZAJES,\n        PROC.UORG_ID,\n        CUP"
+"SCON.NOMBRE AS CONSULTA,\n        UORG.FUERZA_ID,        \n        TDC.SIGLA AS TDOCUMENTO_PROFESIONAL,\n        PRO.DOC"
+"UMENTO AS DOCUMENTO_PROFESIONAL, \n        ESPT.ID AS ESPECIALIDADES_ID,\n        ESPT.NOMBRE AS ESPECIALIDAD,  \n      "
+"  AF.TIPO_USUARIO,  \n        'Automatico' AS TIPO_GENERACION,\n        CASE\n          WHEN TRUNC(MONTHS_BETWEEN (PROC."
+"FINICIAL,PER.FECHA_NACIMIENTO)/12) < 1\n            THEN TRUNC(MONTHS_BETWEEN (PROC.FINICIAL,PER.FECHA_NACIMIENTO))\n   "
+"       ELSE TRUNC(MONTHS_BETWEEN (PROC.FINICIAL,PER.FECHA_NACIMIENTO)/12) \n        END AS EDAD,\n        CASE       \n "
+"         WHEN TRUNC(MONTHS_BETWEEN (PROC.FINICIAL,PER.FECHA_NACIMIENTO)/12)<1 THEN 'Meses'\n          WHEN TRUNC(MONTHS_"
+"BETWEEN (PROC.FINICIAL,PER.FECHA_NACIMIENTO)/12)>=1 THEN 'Años'\n        END UMEDIDA_EDAD,\n        SERV.ADMISIONES_ID,"
+"\n        AF.GRADO_CODIGO AS GRADO_CODIGO,\n        AF.GRADO AS GRADO,\n        AF.CLASEGRD AS CLASEGRD,\n        AF.CLAS"
+"EGRD_CODIGO,\n        SE.SIGLA AS SERVICIO  \nFROM HCL_VALORACIONES VAL \nINNER JOIN HCL_PROCESOSASISTENCIALES PROC ON V"
+"AL.PROCESOSASISTENCIALES_ID = PROC.ID \nINNER JOIN GEN_PERSONAS PER ON PER.ID = PROC.PERSONAS_ID \nINNER JOIN GEN_TDOCUM"
+"ENTOS TDOC ON PER.TDOCUMENTOS_ID  = TDOC.ID \nINNER JOIN GEN_USUARIOS USU ON  USU.ID = PROC.USUARIOS_ID\nINNER JOIN GEN_"
+"PERSONAS PRO ON PRO.ID = USU.PERSONAS_ID \nINNER JOIN GEN_TDOCUMENTOS TDC ON TDC.ID = PRO.TDOCUMENTOS_ID\nLEFT JOIN ( \n"
+"  SELECT AFI.PERSONAS_ID,\n          CASE \n            WHEN PLANAFI.CODIGO = '2' THEN 'No cotizante'\n            WHEN "
+"PLANAFI.CODIGO IN ('1','3','4','5','6','7','8','9','10') AND ATC.SIGLA='ACT' THEN 'Cotizante Activo' \n            WHEN "
+"PLANAFI.CODIGO IN ('1','3','4','5','6','7','8','9','10') AND ATC.SIGLA IN ('RET','PEN') THEN 'Cotizante Pensionado / Ret"
+"irado' \n            WHEN PLANAFI.CODIGO IN ('11','12','13','14','15','16','17','18') THEN 'Beneficiario' \n            "
+"WHEN PLANAFI.CODIGO IN ('1','3','4','5','6','7','8','9','10') AND ATC.SIGLA IN ('PAR','NOC') THEN 'Otro cotizante' \n   "
+"       END  AS TIPO_USUARIO,\n          GRDM.CODIGO AS GRADO_CODIGO,\n          GRDM.NOMBRE AS GRADO,\n          CLS.DES"
+"CRIPCION AS CLASEGRD,\n          CLS.CODIGO AS CLASEGRD_CODIGO                        \n  FROM GEN_AFILIADOS AFI \n  INN"
+"ER JOIN AFI_PLANAFILIACIONES PLANAFI ON PLANAFI.ID = AFI.PLANAFILIACIONES_ID AND PLANAFI.ESTREGISTRO_ID=1\n  INNER JOIN "
+"GEN_AFILIADOS_ENTAPORTANTE AENT ON  ( AENT.AFILIADOS_ID= AFI.padre_id OR (AENT.AFILIADOS_ID = AFI.ID AND AFI.PADRE_ID IS"
+" NULL) ) AND AENT.PRINCIPAL = 1 AND AENT.ESTREGISTRO_ID = 1\n  INNER JOIN AFI_TVINCULACIONES AT ON AT.ID= AENT.TVINCULAC"
+"IONES_ID\n  INNER JOIN AFI_TCOTIZACION ATC ON ATC.ID=AT.TCOTIZACION_ID\n  INNER JOIN GEN_GRDMILITARES GRDM ON GRDM.ID = "
+"AENT.GRDMILITARES_ID\n  INNER JOIN GEN_CLASEGRD CLS ON CLS.ID = GRDM.CLASEGRD_ID\n  WHERE AFI.ESTREGISTRO_ID=1 \n) AF ON"
+" AF.PERSONAS_ID = PER.ID           \nINNER JOIN GEN_UORG UORG ON UORG.ID = PROC.UORG_ID \nINNER JOIN ADM_ESPTRATANTES ES"
+"P ON ESP.ID = PROC.ESPTRATANTES_ID\nINNER JOIN GEN_ESPECIALIDADES ESPT ON ESPT.ID = ESP.ESPECIALIDADES_ID\nINNER JOIN AD"
+"M_SERVTRATANTES SERV ON SERV.ID = ESP.SERVTRATANTES_ID\nLEFT JOIN RCA_AUTORIZACION AUT ON AUT.ID = SERV.AUTORIZACION_ID"
+"\nINNER JOIN GEN_SERVICIOS SE ON SE.ID = SERV.SERVICIOS_ID \nLEFT JOIN GEN_PYP PYP ON PYP.ID=VAL.PYP_ID\nINNER JOIN GEN_C"
+"UPS CUPSCON ON CUPSCON.ID = VAL.CUPS_ID \nINNER JOIN GEN_FINALIDADCONSULTA FINA ON FINA.ID = VAL.FINALIDADCONSULTA_ID  "
+"\nINNER JOIN GEN_CAUSAEXTERNA CAUSA ON CAUSA.ID = VAL.CAUSAEXTERNA_ID\nINNER JOIN HCL_DIAGNOSTICOS DIAG ON DIAG.PROCESOSA"
+"SISTENCIALES_ID = PROC.ID\nLEFT JOIN (\n  SELECT * FROM (\n    SELECT RELA.CIE10,\n           NUM.NUMERO AS NUMERO_123,"
+"\n           RELA.DIAGNOSTICOS_ID \n    FROM (\n      SELECT ROW_NUMBER() OVER (PARTITION BY DIAG.ID_DI ORDER BY DIAG.ID_"
+"DI) AS NUMERO ,\n             DIAG.ID_DI AS DIAGNOSTICOS_ID,\n             CIE.CODIGO AS CIE10\n      FROM (\n        SE"
+"LECT DI.ID AS ID_DI\n        FROM  HCL_DIAGNOSTICOS DI \n    ) DIAG\n    INNER JOIN HCL_DIAGRELACIONADOS RE ON RE.DIAGNO"
+"STICOS_ID = DIAG.ID_DI\n    INNER JOIN GEN_CIE10 CIE ON CIE.ID = RE.CIE10_ID\n    ) RELA  \n    RIGHT JOIN (\n      SELE"
+"CT '1' AS NUMERO FROM DUAL\n      UNION\n      SELECT '2' AS NUMERO FROM DUAL\n      UNION \n      SELECT '3' AS NUMERO "
+"FROM DUAL \n    ) NUM ON NUM.NUMERO = RELA.NUMERO\n  ) PIVOT (\n    MIN(CIE10)\n    FOR NUMERO_123\n    IN ( '1' UNO, '2"
+"' DOS,'3' TRES) \n  )\n) RELACIONADOS ON RELACIONADOS.DIAGNOSTICOS_ID = DIAG.ID\nINNER JOIN GEN_CIE10 CIE ON CIE.ID = DI"
+"AG.CIE10_ID\nWHERE VAL.ESTADO = 'Finalizado'\n  AND VAL.ESTREGISTRO_ID =1 \n  AND PRO.ESTREGISTRO_ID = 1 \n"+context.CONDICION_CONSULTAS;
		    

		    globalMap.put("tOracleInput_7_QUERY",dbquery_tOracleInput_7);

		    java.sql.ResultSet rs_tOracleInput_7 = null;

		    try {
		    	rs_tOracleInput_7 = stmt_tOracleInput_7.executeQuery(dbquery_tOracleInput_7);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7.getMetaData();
		    	int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7.getColumnCount();

		    String tmpContent_tOracleInput_7 = null;
		    
		    
		    while (rs_tOracleInput_7.next()) {
		        nb_line_tOracleInput_7++;
		        
							if(colQtyInRs_tOracleInput_7 < 1) {
								row7.NUMERO_FACTURA = null;
							} else {
	                         		
        	row7.NUMERO_FACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 2) {
								row7.CODIGO_PRESTADOR = null;
							} else {
	                         		
        	row7.CODIGO_PRESTADOR = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 3) {
								row7.TIPO_DOCUMENTO = null;
							} else {
	                         		
        	row7.TIPO_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 4) {
								row7.IDENTIFICACION = null;
							} else {
	                         		
        	row7.IDENTIFICACION = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 5) {
								row7.FECHA_CONSULTA = null;
							} else {
										
			row7.FECHA_CONSULTA = routines.system.JDBCUtil.getDate(rs_tOracleInput_7, 5);
		                    }
							if(colQtyInRs_tOracleInput_7 < 6) {
								row7.AUTORIZACION = null;
							} else {
	                         		
        	row7.AUTORIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 7) {
								row7.CODIGO_CUPS = null;
							} else {
	                         		
        	row7.CODIGO_CUPS = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 8) {
								row7.FINALIDAD_CONSULTA = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(8) != null) {
						row7.FINALIDAD_CONSULTA = rs_tOracleInput_7.getBigDecimal(8);
					} else {
				
						row7.FINALIDAD_CONSULTA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 9) {
								row7.CAUSA_EXTERNA = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(9) != null) {
						row7.CAUSA_EXTERNA = rs_tOracleInput_7.getBigDecimal(9);
					} else {
				
						row7.CAUSA_EXTERNA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 10) {
								row7.DIAGNOSTICO_PRINCIPAL = null;
							} else {
	                         		
        	row7.DIAGNOSTICO_PRINCIPAL = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 11) {
								row7.DIAGR_1 = null;
							} else {
	                         		
        	row7.DIAGR_1 = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 12) {
								row7.DIAGR_2 = null;
							} else {
	                         		
        	row7.DIAGR_2 = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 13) {
								row7.DIAGR_3 = null;
							} else {
	                         		
        	row7.DIAGR_3 = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 14) {
								row7.TDIAG = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(14) != null) {
						row7.TDIAG = rs_tOracleInput_7.getBigDecimal(14);
					} else {
				
						row7.TDIAG = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 15) {
								row7.VALOR_CONSULTA = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(15) != null) {
						row7.VALOR_CONSULTA = rs_tOracleInput_7.getBigDecimal(15);
					} else {
				
						row7.VALOR_CONSULTA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 16) {
								row7.VALOR_MODERADORA = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(16) != null) {
						row7.VALOR_MODERADORA = rs_tOracleInput_7.getBigDecimal(16);
					} else {
				
						row7.VALOR_MODERADORA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 17) {
								row7.VALOR_NETO = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(17) != null) {
						row7.VALOR_NETO = rs_tOracleInput_7.getBigDecimal(17);
					} else {
				
						row7.VALOR_NETO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 18) {
								row7.PROCESOSASISTENCIAL = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(18) != null) {
						row7.PROCESOSASISTENCIAL = rs_tOracleInput_7.getBigDecimal(18);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 19) {
								row7.PYP_SIGLA = null;
							} else {
	                         		
        	row7.PYP_SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 19, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 20) {
								row7.PYP_NOMBRE = null;
							} else {
	                         		
        	row7.PYP_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 20, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 21) {
								row7.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(21) != null) {
						row7.PERSONAS_ID = rs_tOracleInput_7.getBigDecimal(21);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 22) {
								row7.TAMIZAJES = null;
							} else {
	                         		
        	row7.TAMIZAJES = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 22, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 23) {
								row7.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(23) != null) {
						row7.UORG_ID = rs_tOracleInput_7.getBigDecimal(23);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 24) {
								row7.CONSULTA = null;
							} else {
	                         		
        	row7.CONSULTA = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 24, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 25) {
								row7.FUERZA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(25) != null) {
						row7.FUERZA_ID = rs_tOracleInput_7.getBigDecimal(25);
					} else {
				
						row7.FUERZA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 26) {
								row7.TDOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row7.TDOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 26, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 27) {
								row7.DOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row7.DOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 27, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 28) {
								row7.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(28) != null) {
						row7.ESPECIALIDADES_ID = rs_tOracleInput_7.getBigDecimal(28);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 29) {
								row7.ESPECIALIDAD = null;
							} else {
	                         		
        	row7.ESPECIALIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 29, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 30) {
								row7.TIPO_USUARIO = null;
							} else {
	                         		
        	row7.TIPO_USUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 30, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 31) {
								row7.TIPO_GENERACION = null;
							} else {
	                         		
        	row7.TIPO_GENERACION = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 31, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 32) {
								row7.EDAD = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(32) != null) {
						row7.EDAD = rs_tOracleInput_7.getBigDecimal(32);
					} else {
				
						row7.EDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 33) {
								row7.UMEDIDA_EDAD = null;
							} else {
	                         		
        	row7.UMEDIDA_EDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 33, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 34) {
								row7.ADMISIONES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(34) != null) {
						row7.ADMISIONES_ID = rs_tOracleInput_7.getBigDecimal(34);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 35) {
								row7.GRADO_CODIGO = null;
							} else {
	                         		
        	row7.GRADO_CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 35, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 36) {
								row7.GRADO = null;
							} else {
	                         		
        	row7.GRADO = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 36, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 37) {
								row7.CLASEGRD = null;
							} else {
	                         		
        	row7.CLASEGRD = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 37, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 38) {
								row7.CLASEGRD_CODIGO = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(38) != null) {
						row7.CLASEGRD_CODIGO = rs_tOracleInput_7.getBigDecimal(38);
					} else {
				
						row7.CLASEGRD_CODIGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 39) {
								row7.SERVICIO = null;
							} else {
	                         		
        	row7.SERVICIO = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 39, false);
		                    }
					




 



/**
 * [tOracleInput_7 begin ] stop
 */
	
	/**
	 * [tOracleInput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 


	tos_count_tOracleInput_7++;

/**
 * [tOracleInput_7 main ] stop
 */
	
	/**
	 * [tOracleInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_16 main ] start
	 */

	

	
	
	currentComponent="tMap_16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;
		
						row15Struct row15 = null;
					
						row27Struct row27 = null;
					
						row4Struct row4 = null;
					
						row5Struct row5 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_16 = false;
		boolean mainRowRejected_tMap_16 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row15" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow15 = false;
       		  	    	
       		  	    	
 							row15Struct row15ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_16) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_16 = false;
								
                        		    		    row15HashKey.PROCESOSASISTENCIALES_ID = row7.PROCESOSASISTENCIAL ;
                        		    		

								
		                        	row15HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row15.lookup( row15HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row15 != null && tHash_Lookup_row15.getCount(row15HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row15' and it contains more one result from keys :  row15.PROCESOSASISTENCIALES_ID = '" + row15HashKey.PROCESOSASISTENCIALES_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row15Struct fromLookup_row15 = null;
							row15 = row15Default;
										 
							
								 
							
							
								if (tHash_Lookup_row15 !=null && tHash_Lookup_row15.hasNext()) { // G 099
								
							
								
								fromLookup_row15 = tHash_Lookup_row15.next();

							
							
								} // G 099
							
							

							if(fromLookup_row15 != null) {
								row15 = fromLookup_row15;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row27" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow27 = false;
       		  	    	
       		  	    	
 							row27Struct row27ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_16) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_16 = false;
								
                        		    		    row27HashKey.PROCESOSASISTENCIALES_ID = row7.PROCESOSASISTENCIAL ;
                        		    		

								
		                        	row27HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row27.lookup( row27HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row27 != null && tHash_Lookup_row27.getCount(row27HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row27' and it contains more one result from keys :  row27.PROCESOSASISTENCIALES_ID = '" + row27HashKey.PROCESOSASISTENCIALES_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row27Struct fromLookup_row27 = null;
							row27 = row27Default;
										 
							
								 
							
							
								if (tHash_Lookup_row27 !=null && tHash_Lookup_row27.hasNext()) { // G 099
								
							
								
								fromLookup_row27 = tHash_Lookup_row27.next();

							
							
								} // G 099
							
							

							if(fromLookup_row27 != null) {
								row27 = fromLookup_row27;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_16) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_16 = false;
								
                        		    		    row4HashKey.PROCESOSASISTENCIALES_ID = row7.PROCESOSASISTENCIAL ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.PROCESOSASISTENCIALES_ID = '" + row4HashKey.PROCESOSASISTENCIALES_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row5" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow5 = false;
       		  	    	
       		  	    	
 							row5Struct row5ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_16) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_16 = false;
								
                        		    		    row5HashKey.PROCESOSASISTENCIALES_ID = row7.PROCESOSASISTENCIAL ;
                        		    		

								
		                        	row5HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row5.lookup( row5HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.PROCESOSASISTENCIALES_ID = '" + row5HashKey.PROCESOSASISTENCIALES_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row5Struct fromLookup_row5 = null;
							row5 = row5Default;
										 
							
								 
							
							
								if (tHash_Lookup_row5 !=null && tHash_Lookup_row5.hasNext()) { // G 099
								
							
								
								fromLookup_row5 = tHash_Lookup_row5.next();

							
							
								} // G 099
							
							

							if(fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
        // ###############################
        // # Output tables

insert_c = null;


// # Output table : 'insert_c'
insert_c_tmp.CODFACTURA = row7.NUMERO_FACTURA ;
insert_c_tmp.CODPRESTADOR = row7.CODIGO_PRESTADOR ;
insert_c_tmp.TDOCUMENTO = row7.TIPO_DOCUMENTO ;
insert_c_tmp.DOCUMENTO = row7.IDENTIFICACION ;
insert_c_tmp.FECHA = row7.FECHA_CONSULTA ;
insert_c_tmp.CODAUTORIZACION = row7.AUTORIZACION ;
insert_c_tmp.CODCONSULTA = row7.CODIGO_CUPS ;
insert_c_tmp.FINALIDAD = row7.FINALIDAD_CONSULTA ;
insert_c_tmp.CAUSA_EXTERNA = row7.CAUSA_EXTERNA ;
insert_c_tmp.CODDIAGNOSTICOPPAL = row7.DIAGNOSTICO_PRINCIPAL ;
insert_c_tmp.CODDIAGNOSTICO1 = row7.DIAGR_1 ;
insert_c_tmp.CODDIAGNOSTICO2 = row7.DIAGR_2 ;
insert_c_tmp.CODDIAGNOSTICO3 = row7.DIAGR_3 ;
insert_c_tmp.TDIAGNOSTICO = row7.TDIAG ;
insert_c_tmp.VCONSULTA = row7.VALOR_CONSULTA ;
insert_c_tmp.VCUOTAMODERA = row7.VALOR_MODERADORA ;
insert_c_tmp.VNETOPAGAR = row7.VALOR_NETO ;
insert_c_tmp.TRIPS = "Interna";
insert_c_tmp.PERIODO = TalendDate.formatDate("yyyy-MM",row7.FECHA_CONSULTA);
insert_c_tmp.PROCESOSASISTENCIAL = row7.PROCESOSASISTENCIAL ;
insert_c_tmp.PYP_SIGLA = row7.PYP_SIGLA ;
insert_c_tmp.PERSONAS_ID = row7.PERSONAS_ID ;
insert_c_tmp.ACTIVIDADES = row27.ACTIVIDADES ;
insert_c_tmp.TAMIZAJES = row7.TAMIZAJES ;
insert_c_tmp.UORG_ID = row7.UORG_ID ;
insert_c_tmp.CONSULTA = row7.CONSULTA ;
insert_c_tmp.PYP_NOMBRE = row7.PYP_NOMBRE ;
insert_c_tmp.FUERZA_ID = row7.FUERZA_ID ;
insert_c_tmp.TDOCUMENTO_PROFESIONAL = row7.TDOCUMENTO_PROFESIONAL ;
insert_c_tmp.DOCUMENTO_PROFESIONAL = row7.DOCUMENTO_PROFESIONAL ;
insert_c_tmp.ESPECIALIDAD = row7.ESPECIALIDAD ;
insert_c_tmp.PESO = row4.PESO_VALOR;
insert_c_tmp.TALLA = row4.ESTATURA_VALOR;
insert_c_tmp.UMEDIDA_PESO = row4.PESO_UMEDIDA ;
insert_c_tmp.UMEDIDA_TALLA = row4.ESTATURA_UMEDIDA ;
insert_c_tmp.TIPO_GENERACION = row7.TIPO_GENERACION ;
insert_c_tmp.TIPO_USUARIO = row7.TIPO_USUARIO ;
insert_c_tmp.EDAD = row7.EDAD ;
insert_c_tmp.UMEDIDA_EDAD = row7.UMEDIDA_EDAD ;
insert_c_tmp.GRADO_CODIGO = row7.GRADO_CODIGO ;
insert_c_tmp.GRADO = row7.GRADO ;
insert_c_tmp.CLASEGRD = row7.CLASEGRD ;
insert_c_tmp.ADMISION_ID = row7.ADMISIONES_ID ;
insert_c_tmp.FINDRISK = row15.FINDRISK ;
insert_c_tmp.PFINDRISK = row15.PROBABILIDAD ;
insert_c_tmp.CLASEGRD_CODIGO = row7.CLASEGRD_CODIGO ;
insert_c_tmp.ESPECIALIDADES_ID = row7.ESPECIALIDADES_ID ;
insert_c_tmp.SERVICIO = row7.SERVICIO ;
insert_c_tmp.CUMPLIMIENTO_CITA = "Si";
insert_c_tmp.FCARDIACA_VALOR = row4.FCARDIACA_VALOR ;
insert_c_tmp.FCARDIACA_UMEDIDA = row4.FCARDIACA_UMEDIDA ;
insert_c_tmp.PARTERIALSIS_VALOR = row4.PARTERIALSIS_VALOR ;
insert_c_tmp.PARTERIALSIS_UMEDIDA = row4.PARTERIALSIS_UMEDIDA ;
insert_c_tmp.PARTERIALDIA_VALOR = row4.PARTERIALDIA_VALOR ;
insert_c_tmp.PARTERIALDIA_UMEDIDA = row4.PARTERIALDIA_UMEDIDA ;
insert_c_tmp.PARTERIALMED_VALOR = row4.PARTERIALMED_VALOR ;
insert_c_tmp.PARTERIALMED_UMEDIDA = row4.PARTERIALMED_UMEDIDA ;
insert_c_tmp.FRESPIRATORIA_VALOR = row4.FRESPIRATORIA_VALOR ;
insert_c_tmp.FRESPIRATORIA_UMEDIDA = row4.FRESPIRATORIA_UMEDIDA ;
insert_c_tmp.PULSO_VALOR = row4.PULSO_VALOR ;
insert_c_tmp.PULSO_UMEDIDA = row4.PULSO_UMEDIDA ;
insert_c_tmp.TEMPERATURA_VALOR = row4.TEMPERATURA_VALOR ;
insert_c_tmp.TEMPERATURA_UMEDIDA = row4.TEMPERATURA_UMEDIDA ;
insert_c_tmp.IMC_VALOR = row4.IMC_VALOR ;
insert_c_tmp.IMC_UMEDIDA = row4.IMC_UMEDIDA ;
insert_c_tmp.SOXIGENO_VALOR = row4.SOXIGENO_VALOR ;
insert_c_tmp.SOXIGENO_UMEDIDA = row4.SOXIGENO_UMEDIDA ;
insert_c_tmp.NCREATININA_VALOR = row4.NCREATININA_VALOR ;
insert_c_tmp.NCREATININA_UMEDIDA = row4.NCREATININA_UMEDIDA ;
insert_c_tmp.FGLOMERULAR_VALOR = row4.FGLOMERULAR_VALOR ;
insert_c_tmp.FGLOMERULAR_UMEDIDA = row4.FGLOMERULAR_UMEDIDA ;
insert_c_tmp.PABDOMINAL_VALOR = row5.VALOR;
insert_c_tmp.PABDOMINAL_UMEDIDA = row5.SIGLA_UNIDAD ;
insert_c = insert_c_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_16 = false;










 


	tos_count_tMap_16++;

/**
 * [tMap_16 main ] stop
 */
	
	/**
	 * [tMap_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_16";
	
	

 



/**
 * [tMap_16 process_data_begin ] stop
 */
// Start of branch "insert_c"
if(insert_c != null) { 



	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_c"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                        if(insert_c.CODFACTURA == null) {
pstmt_tOracleOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(1, insert_c.CODFACTURA);
}

                        if(insert_c.CODPRESTADOR == null) {
pstmt_tOracleOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(2, insert_c.CODPRESTADOR);
}

                        if(insert_c.TDOCUMENTO == null) {
pstmt_tOracleOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(3, insert_c.TDOCUMENTO);
}

                        if(insert_c.DOCUMENTO == null) {
pstmt_tOracleOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(4, insert_c.DOCUMENTO);
}

                        if(insert_c.FECHA != null) {
pstmt_tOracleOutput_1.setObject(5, new java.sql.Timestamp(insert_c.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_1.setNull(5, java.sql.Types.DATE);
}

                        if(insert_c.CODAUTORIZACION == null) {
pstmt_tOracleOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(6, insert_c.CODAUTORIZACION);
}

                        if(insert_c.CODCONSULTA == null) {
pstmt_tOracleOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(7, insert_c.CODCONSULTA);
}

                        pstmt_tOracleOutput_1.setBigDecimal(8, insert_c.FINALIDAD);

                        pstmt_tOracleOutput_1.setBigDecimal(9, insert_c.CAUSA_EXTERNA);

                        if(insert_c.CODDIAGNOSTICOPPAL == null) {
pstmt_tOracleOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(10, insert_c.CODDIAGNOSTICOPPAL);
}

                        if(insert_c.CODDIAGNOSTICO1 == null) {
pstmt_tOracleOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(11, insert_c.CODDIAGNOSTICO1);
}

                        if(insert_c.CODDIAGNOSTICO2 == null) {
pstmt_tOracleOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(12, insert_c.CODDIAGNOSTICO2);
}

                        if(insert_c.CODDIAGNOSTICO3 == null) {
pstmt_tOracleOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(13, insert_c.CODDIAGNOSTICO3);
}

                        pstmt_tOracleOutput_1.setBigDecimal(14, insert_c.TDIAGNOSTICO);

                        pstmt_tOracleOutput_1.setBigDecimal(15, insert_c.VCONSULTA);

                        pstmt_tOracleOutput_1.setBigDecimal(16, insert_c.VCUOTAMODERA);

                        pstmt_tOracleOutput_1.setBigDecimal(17, insert_c.VNETOPAGAR);

                        if(insert_c.TRIPS == null) {
pstmt_tOracleOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(18, insert_c.TRIPS);
}

                        if(insert_c.PERIODO == null) {
pstmt_tOracleOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(19, insert_c.PERIODO);
}

                        pstmt_tOracleOutput_1.setBigDecimal(20, insert_c.PROCESOSASISTENCIAL);

                        if(insert_c.PYP_SIGLA == null) {
pstmt_tOracleOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(21, insert_c.PYP_SIGLA);
}

                        pstmt_tOracleOutput_1.setBigDecimal(22, insert_c.PERSONAS_ID);

                        if(insert_c.ACTIVIDADES == null) {
pstmt_tOracleOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(23, insert_c.ACTIVIDADES);
}

                        if(insert_c.TAMIZAJES == null) {
pstmt_tOracleOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(24, insert_c.TAMIZAJES);
}

                        pstmt_tOracleOutput_1.setBigDecimal(25, insert_c.UORG_ID);

                        if(insert_c.CONSULTA == null) {
pstmt_tOracleOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(26, insert_c.CONSULTA);
}

                        if(insert_c.PYP_NOMBRE == null) {
pstmt_tOracleOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(27, insert_c.PYP_NOMBRE);
}

                        pstmt_tOracleOutput_1.setBigDecimal(28, insert_c.FUERZA_ID);

                        if(insert_c.TDOCUMENTO_PROFESIONAL == null) {
pstmt_tOracleOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(29, insert_c.TDOCUMENTO_PROFESIONAL);
}

                        if(insert_c.DOCUMENTO_PROFESIONAL == null) {
pstmt_tOracleOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(30, insert_c.DOCUMENTO_PROFESIONAL);
}

                        if(insert_c.ESPECIALIDAD == null) {
pstmt_tOracleOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(31, insert_c.ESPECIALIDAD);
}

                        if(insert_c.PESO == null) {
pstmt_tOracleOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(32, insert_c.PESO);
}

                        if(insert_c.TALLA == null) {
pstmt_tOracleOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(33, insert_c.TALLA);
}

                        if(insert_c.UMEDIDA_PESO == null) {
pstmt_tOracleOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(34, insert_c.UMEDIDA_PESO);
}

                        if(insert_c.UMEDIDA_TALLA == null) {
pstmt_tOracleOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(35, insert_c.UMEDIDA_TALLA);
}

                        if(insert_c.TIPO_GENERACION == null) {
pstmt_tOracleOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(36, insert_c.TIPO_GENERACION);
}

                        if(insert_c.TIPO_USUARIO == null) {
pstmt_tOracleOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(37, insert_c.TIPO_USUARIO);
}

                        pstmt_tOracleOutput_1.setBigDecimal(38, insert_c.EDAD);

                        if(insert_c.UMEDIDA_EDAD == null) {
pstmt_tOracleOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(39, insert_c.UMEDIDA_EDAD);
}

                        if(insert_c.GRADO_CODIGO == null) {
pstmt_tOracleOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(40, insert_c.GRADO_CODIGO);
}

                        if(insert_c.GRADO == null) {
pstmt_tOracleOutput_1.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(41, insert_c.GRADO);
}

                        if(insert_c.CLASEGRD == null) {
pstmt_tOracleOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(42, insert_c.CLASEGRD);
}

                        pstmt_tOracleOutput_1.setBigDecimal(43, insert_c.ADMISION_ID);

                        pstmt_tOracleOutput_1.setBigDecimal(44, insert_c.FINDRISK);

                        if(insert_c.PFINDRISK == null) {
pstmt_tOracleOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(45, insert_c.PFINDRISK);
}

                        pstmt_tOracleOutput_1.setBigDecimal(46, insert_c.CLASEGRD_CODIGO);

                        pstmt_tOracleOutput_1.setBigDecimal(47, insert_c.ESPECIALIDADES_ID);

                        if(insert_c.SERVICIO == null) {
pstmt_tOracleOutput_1.setNull(48, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(48, insert_c.SERVICIO);
}

                        if(insert_c.CUMPLIMIENTO_CITA == null) {
pstmt_tOracleOutput_1.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(49, insert_c.CUMPLIMIENTO_CITA);
}

                        if(insert_c.FCARDIACA_VALOR == null) {
pstmt_tOracleOutput_1.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(50, insert_c.FCARDIACA_VALOR);
}

                        if(insert_c.FCARDIACA_UMEDIDA == null) {
pstmt_tOracleOutput_1.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(51, insert_c.FCARDIACA_UMEDIDA);
}

                        if(insert_c.PARTERIALSIS_VALOR == null) {
pstmt_tOracleOutput_1.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(52, insert_c.PARTERIALSIS_VALOR);
}

                        if(insert_c.PARTERIALSIS_UMEDIDA == null) {
pstmt_tOracleOutput_1.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(53, insert_c.PARTERIALSIS_UMEDIDA);
}

                        if(insert_c.PARTERIALDIA_VALOR == null) {
pstmt_tOracleOutput_1.setNull(54, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(54, insert_c.PARTERIALDIA_VALOR);
}

                        if(insert_c.PARTERIALDIA_UMEDIDA == null) {
pstmt_tOracleOutput_1.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(55, insert_c.PARTERIALDIA_UMEDIDA);
}

                        if(insert_c.PARTERIALMED_VALOR == null) {
pstmt_tOracleOutput_1.setNull(56, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(56, insert_c.PARTERIALMED_VALOR);
}

                        if(insert_c.PARTERIALMED_UMEDIDA == null) {
pstmt_tOracleOutput_1.setNull(57, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(57, insert_c.PARTERIALMED_UMEDIDA);
}

                        if(insert_c.FRESPIRATORIA_VALOR == null) {
pstmt_tOracleOutput_1.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(58, insert_c.FRESPIRATORIA_VALOR);
}

                        if(insert_c.FRESPIRATORIA_UMEDIDA == null) {
pstmt_tOracleOutput_1.setNull(59, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(59, insert_c.FRESPIRATORIA_UMEDIDA);
}

                        if(insert_c.PULSO_VALOR == null) {
pstmt_tOracleOutput_1.setNull(60, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(60, insert_c.PULSO_VALOR);
}

                        if(insert_c.PULSO_UMEDIDA == null) {
pstmt_tOracleOutput_1.setNull(61, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(61, insert_c.PULSO_UMEDIDA);
}

                        if(insert_c.TEMPERATURA_VALOR == null) {
pstmt_tOracleOutput_1.setNull(62, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(62, insert_c.TEMPERATURA_VALOR);
}

                        if(insert_c.TEMPERATURA_UMEDIDA == null) {
pstmt_tOracleOutput_1.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(63, insert_c.TEMPERATURA_UMEDIDA);
}

                        if(insert_c.IMC_VALOR == null) {
pstmt_tOracleOutput_1.setNull(64, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(64, insert_c.IMC_VALOR);
}

                        if(insert_c.IMC_UMEDIDA == null) {
pstmt_tOracleOutput_1.setNull(65, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(65, insert_c.IMC_UMEDIDA);
}

                        if(insert_c.SOXIGENO_VALOR == null) {
pstmt_tOracleOutput_1.setNull(66, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(66, insert_c.SOXIGENO_VALOR);
}

                        if(insert_c.SOXIGENO_UMEDIDA == null) {
pstmt_tOracleOutput_1.setNull(67, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(67, insert_c.SOXIGENO_UMEDIDA);
}

                        if(insert_c.NCREATININA_VALOR == null) {
pstmt_tOracleOutput_1.setNull(68, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(68, insert_c.NCREATININA_VALOR);
}

                        if(insert_c.NCREATININA_UMEDIDA == null) {
pstmt_tOracleOutput_1.setNull(69, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(69, insert_c.NCREATININA_UMEDIDA);
}

                        if(insert_c.FGLOMERULAR_VALOR == null) {
pstmt_tOracleOutput_1.setNull(70, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(70, insert_c.FGLOMERULAR_VALOR);
}

                        if(insert_c.FGLOMERULAR_UMEDIDA == null) {
pstmt_tOracleOutput_1.setNull(71, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(71, insert_c.FGLOMERULAR_UMEDIDA);
}

                        if(insert_c.PABDOMINAL_VALOR == null) {
pstmt_tOracleOutput_1.setNull(72, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(72, insert_c.PABDOMINAL_VALOR);
}

                        if(insert_c.PABDOMINAL_UMEDIDA == null) {
pstmt_tOracleOutput_1.setNull(73, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(73, insert_c.PABDOMINAL_UMEDIDA);
}

                pstmt_tOracleOutput_1.addBatch();
                nb_line_tOracleOutput_1++;
                batchSizeCounter_tOracleOutput_1++;
            if (batchSize_tOracleOutput_1 > 0 &&  batchSize_tOracleOutput_1 <= batchSizeCounter_tOracleOutput_1) {
                try {
                    pstmt_tOracleOutput_1.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
			        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
			    	String errormessage_tOracleOutput_1;
					if (ne_tOracleOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
						errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
					}else{
						errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_1);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
                    insertedCount_tOracleOutput_1
                += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                batchSizeCounter_tOracleOutput_1 = 0;
            }
                commitCounter_tOracleOutput_1++;
                if(commitEvery_tOracleOutput_1 <= commitCounter_tOracleOutput_1) {
                    if(batchSizeCounter_tOracleOutput_1 > 0) {
                        try {
                            pstmt_tOracleOutput_1.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
					        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
					    	String errormessage_tOracleOutput_1;
							if (ne_tOracleOutput_1 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
								errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
							}else{
								errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_1);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
                            insertedCount_tOracleOutput_1
                        += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                        rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    }
                    conn_tOracleOutput_1.commit();
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_1 = 0;
                    }
                    commitCounter_tOracleOutput_1=0;
                    	batchSizeCounter_tOracleOutput_1=0;
                }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */

} // End of branch "insert_c"




	
	/**
	 * [tMap_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_16";
	
	

 



/**
 * [tMap_16 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

}
}finally{
	if (rs_tOracleInput_7 != null) {
		rs_tOracleInput_7.close();
	}
	if (stmt_tOracleInput_7 != null) {
		stmt_tOracleInput_7.close();
	}
}

globalMap.put("tOracleInput_7_NB_LINE",nb_line_tOracleInput_7);
 

ok_Hash.put("tOracleInput_7", true);
end_Hash.put("tOracleInput_7", System.currentTimeMillis());




/**
 * [tOracleInput_7 end ] stop
 */

	
	/**
	 * [tMap_16 end ] start
	 */

	

	
	
	currentComponent="tMap_16";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row15 != null) {
						tHash_Lookup_row15.endGet();
					}
					globalMap.remove( "tHash_Lookup_row15" );

					
					
				
					if(tHash_Lookup_row27 != null) {
						tHash_Lookup_row27.endGet();
					}
					globalMap.remove( "tHash_Lookup_row27" );

					
					
				
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
					if(tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove( "tHash_Lookup_row5" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_16", true);
end_Hash.put("tMap_16", System.currentTimeMillis());




/**
 * [tMap_16 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_1 > 0) {
            try {
            	if (pstmt_tOracleOutput_1 != null) {
					
					pstmt_tOracleOutput_1.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
		        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
		    	String errormessage_tOracleOutput_1;
				if (ne_tOracleOutput_1 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
					errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
				}else{
					errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_1);
            	
        	}
        	if (pstmt_tOracleOutput_1 != null) {
            	tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_1
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
				rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
            }
        }
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
		}
		conn_tOracleOutput_1.commit();
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
			rowsToCommitCount_tOracleOutput_1 = 0;
		}
		commitCounter_tOracleOutput_1 = 0;
		
		
		conn_tOracleOutput_1 .close();
		
		resourceMap.put("finish_tOracleOutput_1", true);
   	

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_c");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tJava_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_16"
					     			globalMap.remove("tHash_Lookup_row15"); 
				     			
					     			//free memory for "tMap_16"
					     			globalMap.remove("tHash_Lookup_row27"); 
				     			
					     			//free memory for "tMap_16"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
					     			//free memory for "tMap_16"
					     			globalMap.remove("tHash_Lookup_row5"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 finally ] stop
 */

	
	/**
	 * [tMap_16 finally ] start
	 */

	

	
	
	currentComponent="tMap_16";
	
	

 



/**
 * [tMap_16 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_1") == null){
            java.sql.Connection ctn_tOracleOutput_1 = null;
            if((ctn_tOracleOutput_1 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_1")) != null){
                try {
                    ctn_tOracleOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_1) {
                    String errorMessage_tOracleOutput_1 = "failed to close the connection in tOracleOutput_1 :" + sqlEx_tOracleOutput_1.getMessage();
                    System.err.println(errorMessage_tOracleOutput_1);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}
	


public void tJava_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_6", false);
		start_Hash.put("tJava_6", System.currentTimeMillis());
		
	
	currentComponent="tJava_6";
	
	
		int tos_count_tJava_6 = 0;
		


/*System.out.println("ReturnValueExampleChildJob_NB_LINE=" + ((BigDecimal) ((java.util.Map) globalMap.get("sharedMap")).get("ReturnValueExampleChildJob_NB_LINE")));

*/
context.CODARCHIVO = "US";
System.out.println("        - Usuarios: " + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );

/*context.ARCONTROL_ID = (BigDecimal) ((java.util.Map) globalMap.get("sharedMap")).get("ReturnValueAC_ID");
System.out.println("ARCONTROL_ID US : " + context.ARCONTROL_ID );*/
 



/**
 * [tJava_6 begin ] stop
 */
	
	/**
	 * [tJava_6 main ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 


	tos_count_tJava_6++;

/**
 * [tJava_6 main ] stop
 */
	
	/**
	 * [tJava_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 process_data_begin ] stop
 */
	
	/**
	 * [tJava_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 process_data_end ] stop
 */
	
	/**
	 * [tJava_6 end ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 

ok_Hash.put("tJava_6", true);
end_Hash.put("tJava_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk18", 0, "ok");
				}
				tOracleInput_9Process(globalMap);



/**
 * [tJava_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_6 finally ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}
	


public static class insert_usStruct implements routines.system.IPersistableRow<insert_usStruct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 50;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "Tipo de iidentificaci\u00F3n del usuario.";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "N\u00FAmero de iidentificaci\u00F3n del usuario";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String CODENTIDAD;

				public String getCODENTIDAD () {
					return this.CODENTIDAD;
				}

				public Boolean CODENTIDADIsNullable(){
				    return true;
				}
				public Boolean CODENTIDADIsKey(){
				    return false;
				}
				public Integer CODENTIDADLength(){
				    return 100;
				}
				public Integer CODENTIDADPrecision(){
				    return 0;
				}
				public String CODENTIDADDefault(){
				
					return null;
				
				}
				public String CODENTIDADComment(){
				
				    return "C\u00F3digo entidad administradora de planes de beneficio";
				
				}
				public String CODENTIDADPattern(){
				
					return "";
				
				}
				public String CODENTIDADOriginalDbColumnName(){
				
					return "CODENTIDAD";
				
				}

				
			    public BigDecimal TUSUARIO;

				public BigDecimal getTUSUARIO () {
					return this.TUSUARIO;
				}

				public Boolean TUSUARIOIsNullable(){
				    return true;
				}
				public Boolean TUSUARIOIsKey(){
				    return false;
				}
				public Integer TUSUARIOLength(){
				    return 0;
				}
				public Integer TUSUARIOPrecision(){
				    return null;
				}
				public String TUSUARIODefault(){
				
					return null;
				
				}
				public String TUSUARIOComment(){
				
				    return "Tipo de usuario";
				
				}
				public String TUSUARIOPattern(){
				
					return "";
				
				}
				public String TUSUARIOOriginalDbColumnName(){
				
					return "TUSUARIO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "primer nombre";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "segundo nombre";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "primer apellido";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "segundo apellido";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "Edad del usuario";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String SEXO;

				public String getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return true;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return 20;
				}
				public Integer SEXOPrecision(){
				    return 0;
				}
				public String SEXODefault(){
				
					return null;
				
				}
				public String SEXOComment(){
				
				    return "Sexo del usuario";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public String ZRESIDENCIA;

				public String getZRESIDENCIA () {
					return this.ZRESIDENCIA;
				}

				public Boolean ZRESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean ZRESIDENCIAIsKey(){
				    return false;
				}
				public Integer ZRESIDENCIALength(){
				    return 1;
				}
				public Integer ZRESIDENCIAPrecision(){
				    return 0;
				}
				public String ZRESIDENCIADefault(){
				
					return null;
				
				}
				public String ZRESIDENCIAComment(){
				
				    return "Zona de resisencia";
				
				}
				public String ZRESIDENCIAPattern(){
				
					return "";
				
				}
				public String ZRESIDENCIAOriginalDbColumnName(){
				
					return "ZRESIDENCIA";
				
				}

				
			    public String CODDEPARTAMENTO;

				public String getCODDEPARTAMENTO () {
					return this.CODDEPARTAMENTO;
				}

				public Boolean CODDEPARTAMENTOIsNullable(){
				    return true;
				}
				public Boolean CODDEPARTAMENTOIsKey(){
				    return false;
				}
				public Integer CODDEPARTAMENTOLength(){
				    return 5;
				}
				public Integer CODDEPARTAMENTOPrecision(){
				    return 0;
				}
				public String CODDEPARTAMENTODefault(){
				
					return null;
				
				}
				public String CODDEPARTAMENTOComment(){
				
				    return "C\u00F3digo del departamento de residencia habitual";
				
				}
				public String CODDEPARTAMENTOPattern(){
				
					return "";
				
				}
				public String CODDEPARTAMENTOOriginalDbColumnName(){
				
					return "CODDEPARTAMENTO";
				
				}

				
			    public String CODMUNICIPIO;

				public String getCODMUNICIPIO () {
					return this.CODMUNICIPIO;
				}

				public Boolean CODMUNICIPIOIsNullable(){
				    return true;
				}
				public Boolean CODMUNICIPIOIsKey(){
				    return false;
				}
				public Integer CODMUNICIPIOLength(){
				    return 10;
				}
				public Integer CODMUNICIPIOPrecision(){
				    return 0;
				}
				public String CODMUNICIPIODefault(){
				
					return null;
				
				}
				public String CODMUNICIPIOComment(){
				
				    return "C\u00F3digo del municipio de residencia habitual";
				
				}
				public String CODMUNICIPIOPattern(){
				
					return "";
				
				}
				public String CODMUNICIPIOOriginalDbColumnName(){
				
					return "CODMUNICIPIO";
				
				}

				
			    public String TRIPS;

				public String getTRIPS () {
					return this.TRIPS;
				}

				public Boolean TRIPSIsNullable(){
				    return true;
				}
				public Boolean TRIPSIsKey(){
				    return false;
				}
				public Integer TRIPSLength(){
				    return 10;
				}
				public Integer TRIPSPrecision(){
				    return 0;
				}
				public String TRIPSDefault(){
				
					return null;
				
				}
				public String TRIPSComment(){
				
				    return "";
				
				}
				public String TRIPSPattern(){
				
					return "";
				
				}
				public String TRIPSOriginalDbColumnName(){
				
					return "TRIPS";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 7;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public String CODESM;

				public String getCODESM () {
					return this.CODESM;
				}

				public Boolean CODESMIsNullable(){
				    return true;
				}
				public Boolean CODESMIsKey(){
				    return false;
				}
				public Integer CODESMLength(){
				    return 100;
				}
				public Integer CODESMPrecision(){
				    return 0;
				}
				public String CODESMDefault(){
				
					return null;
				
				}
				public String CODESMComment(){
				
				    return "";
				
				}
				public String CODESMPattern(){
				
					return "";
				
				}
				public String CODESMOriginalDbColumnName(){
				
					return "CODESM";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "FK - BGEN_PERSONAS";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - BGEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal UNIDAD_MEDIDA;

				public BigDecimal getUNIDAD_MEDIDA () {
					return this.UNIDAD_MEDIDA;
				}

				public Boolean UNIDAD_MEDIDAIsNullable(){
				    return true;
				}
				public Boolean UNIDAD_MEDIDAIsKey(){
				    return false;
				}
				public Integer UNIDAD_MEDIDALength(){
				    return 1;
				}
				public Integer UNIDAD_MEDIDAPrecision(){
				    return 0;
				}
				public String UNIDAD_MEDIDADefault(){
				
					return null;
				
				}
				public String UNIDAD_MEDIDAComment(){
				
				    return "Unidad de medida de la edad";
				
				}
				public String UNIDAD_MEDIDAPattern(){
				
					return "";
				
				}
				public String UNIDAD_MEDIDAOriginalDbColumnName(){
				
					return "UNIDAD_MEDIDA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODENTIDAD = readString(dis);
					
						this.TUSUARIO = (BigDecimal) dis.readObject();
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.SEXO = readString(dis);
					
					this.ZRESIDENCIA = readString(dis);
					
					this.CODDEPARTAMENTO = readString(dis);
					
					this.CODMUNICIPIO = readString(dis);
					
					this.TRIPS = readString(dis);
					
					this.PERIODO = readString(dis);
					
					this.CODESM = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.UNIDAD_MEDIDA = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODENTIDAD = readString(dis);
					
						this.TUSUARIO = (BigDecimal) dis.readObject();
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.SEXO = readString(dis);
					
					this.ZRESIDENCIA = readString(dis);
					
					this.CODDEPARTAMENTO = readString(dis);
					
					this.CODMUNICIPIO = readString(dis);
					
					this.TRIPS = readString(dis);
					
					this.PERIODO = readString(dis);
					
					this.CODESM = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.UNIDAD_MEDIDA = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODENTIDAD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TUSUARIO);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.ZRESIDENCIA,dos);
					
					// String
				
						writeString(this.CODDEPARTAMENTO,dos);
					
					// String
				
						writeString(this.CODMUNICIPIO,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// String
				
						writeString(this.CODESM,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNIDAD_MEDIDA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODENTIDAD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TUSUARIO);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.ZRESIDENCIA,dos);
					
					// String
				
						writeString(this.CODDEPARTAMENTO,dos);
					
					// String
				
						writeString(this.CODMUNICIPIO,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// String
				
						writeString(this.CODESM,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UNIDAD_MEDIDA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",CODENTIDAD="+CODENTIDAD);
		sb.append(",TUSUARIO="+String.valueOf(TUSUARIO));
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",SEXO="+SEXO);
		sb.append(",ZRESIDENCIA="+ZRESIDENCIA);
		sb.append(",CODDEPARTAMENTO="+CODDEPARTAMENTO);
		sb.append(",CODMUNICIPIO="+CODMUNICIPIO);
		sb.append(",TRIPS="+TRIPS);
		sb.append(",PERIODO="+PERIODO);
		sb.append(",CODESM="+CODESM);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",UNIDAD_MEDIDA="+String.valueOf(UNIDAD_MEDIDA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_usStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String CODESM;

				public String getCODESM () {
					return this.CODESM;
				}

				public Boolean CODESMIsNullable(){
				    return true;
				}
				public Boolean CODESMIsKey(){
				    return false;
				}
				public Integer CODESMLength(){
				    return null;
				}
				public Integer CODESMPrecision(){
				    return null;
				}
				public String CODESMDefault(){
				
					return null;
				
				}
				public String CODESMComment(){
				
				    return "";
				
				}
				public String CODESMPattern(){
				
					return "";
				
				}
				public String CODESMOriginalDbColumnName(){
				
					return "CODESM";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return null;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return null;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String IDENTIFICACION;

				public String getIDENTIFICACION () {
					return this.IDENTIFICACION;
				}

				public Boolean IDENTIFICACIONIsNullable(){
				    return false;
				}
				public Boolean IDENTIFICACIONIsKey(){
				    return false;
				}
				public Integer IDENTIFICACIONLength(){
				    return null;
				}
				public Integer IDENTIFICACIONPrecision(){
				    return null;
				}
				public String IDENTIFICACIONDefault(){
				
					return null;
				
				}
				public String IDENTIFICACIONComment(){
				
				    return "";
				
				}
				public String IDENTIFICACIONPattern(){
				
					return "";
				
				}
				public String IDENTIFICACIONOriginalDbColumnName(){
				
					return "IDENTIFICACION";
				
				}

				
			    public String CODIGO_PLAN;

				public String getCODIGO_PLAN () {
					return this.CODIGO_PLAN;
				}

				public Boolean CODIGO_PLANIsNullable(){
				    return true;
				}
				public Boolean CODIGO_PLANIsKey(){
				    return false;
				}
				public Integer CODIGO_PLANLength(){
				    return null;
				}
				public Integer CODIGO_PLANPrecision(){
				    return null;
				}
				public String CODIGO_PLANDefault(){
				
					return null;
				
				}
				public String CODIGO_PLANComment(){
				
				    return "";
				
				}
				public String CODIGO_PLANPattern(){
				
					return "";
				
				}
				public String CODIGO_PLANOriginalDbColumnName(){
				
					return "CODIGO_PLAN";
				
				}

				
			    public BigDecimal TIPO_USUARIO;

				public BigDecimal getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return null;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return null;
				}
				public String TIPO_USUARIODefault(){
				
					return "";
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return null;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public BigDecimal UNIDAD_MEDIDA;

				public BigDecimal getUNIDAD_MEDIDA () {
					return this.UNIDAD_MEDIDA;
				}

				public Boolean UNIDAD_MEDIDAIsNullable(){
				    return true;
				}
				public Boolean UNIDAD_MEDIDAIsKey(){
				    return false;
				}
				public Integer UNIDAD_MEDIDALength(){
				    return null;
				}
				public Integer UNIDAD_MEDIDAPrecision(){
				    return null;
				}
				public String UNIDAD_MEDIDADefault(){
				
					return "";
				
				}
				public String UNIDAD_MEDIDAComment(){
				
				    return "";
				
				}
				public String UNIDAD_MEDIDAPattern(){
				
					return "";
				
				}
				public String UNIDAD_MEDIDAOriginalDbColumnName(){
				
					return "UNIDAD_MEDIDA";
				
				}

				
			    public String SEXO;

				public String getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return false;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return null;
				}
				public Integer SEXOPrecision(){
				    return null;
				}
				public String SEXODefault(){
				
					return null;
				
				}
				public String SEXOComment(){
				
				    return "";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public String CODIGO_DEPARTAMENTO;

				public String getCODIGO_DEPARTAMENTO () {
					return this.CODIGO_DEPARTAMENTO;
				}

				public Boolean CODIGO_DEPARTAMENTOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_DEPARTAMENTOIsKey(){
				    return false;
				}
				public Integer CODIGO_DEPARTAMENTOLength(){
				    return null;
				}
				public Integer CODIGO_DEPARTAMENTOPrecision(){
				    return null;
				}
				public String CODIGO_DEPARTAMENTODefault(){
				
					return null;
				
				}
				public String CODIGO_DEPARTAMENTOComment(){
				
				    return "";
				
				}
				public String CODIGO_DEPARTAMENTOPattern(){
				
					return "";
				
				}
				public String CODIGO_DEPARTAMENTOOriginalDbColumnName(){
				
					return "CODIGO_DEPARTAMENTO";
				
				}

				
			    public String CPDIGO_MUNICIPIO;

				public String getCPDIGO_MUNICIPIO () {
					return this.CPDIGO_MUNICIPIO;
				}

				public Boolean CPDIGO_MUNICIPIOIsNullable(){
				    return true;
				}
				public Boolean CPDIGO_MUNICIPIOIsKey(){
				    return false;
				}
				public Integer CPDIGO_MUNICIPIOLength(){
				    return null;
				}
				public Integer CPDIGO_MUNICIPIOPrecision(){
				    return null;
				}
				public String CPDIGO_MUNICIPIODefault(){
				
					return null;
				
				}
				public String CPDIGO_MUNICIPIOComment(){
				
				    return "";
				
				}
				public String CPDIGO_MUNICIPIOPattern(){
				
					return "";
				
				}
				public String CPDIGO_MUNICIPIOOriginalDbColumnName(){
				
					return "CPDIGO_MUNICIPIO";
				
				}

				
			    public String ZONA_RECIDENCIA;

				public String getZONA_RECIDENCIA () {
					return this.ZONA_RECIDENCIA;
				}

				public Boolean ZONA_RECIDENCIAIsNullable(){
				    return true;
				}
				public Boolean ZONA_RECIDENCIAIsKey(){
				    return false;
				}
				public Integer ZONA_RECIDENCIALength(){
				    return null;
				}
				public Integer ZONA_RECIDENCIAPrecision(){
				    return null;
				}
				public String ZONA_RECIDENCIADefault(){
				
					return null;
				
				}
				public String ZONA_RECIDENCIAComment(){
				
				    return "";
				
				}
				public String ZONA_RECIDENCIAPattern(){
				
					return "";
				
				}
				public String ZONA_RECIDENCIAOriginalDbColumnName(){
				
					return "ZONA_RECIDENCIA";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CODESM = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.IDENTIFICACION = readString(dis);
					
					this.CODIGO_PLAN = readString(dis);
					
						this.TIPO_USUARIO = (BigDecimal) dis.readObject();
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
						this.UNIDAD_MEDIDA = (BigDecimal) dis.readObject();
					
					this.SEXO = readString(dis);
					
					this.CODIGO_DEPARTAMENTO = readString(dis);
					
					this.CPDIGO_MUNICIPIO = readString(dis);
					
					this.ZONA_RECIDENCIA = readString(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CODESM = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.IDENTIFICACION = readString(dis);
					
					this.CODIGO_PLAN = readString(dis);
					
						this.TIPO_USUARIO = (BigDecimal) dis.readObject();
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
						this.UNIDAD_MEDIDA = (BigDecimal) dis.readObject();
					
					this.SEXO = readString(dis);
					
					this.CODIGO_DEPARTAMENTO = readString(dis);
					
					this.CPDIGO_MUNICIPIO = readString(dis);
					
					this.ZONA_RECIDENCIA = readString(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CODESM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.IDENTIFICACION,dos);
					
					// String
				
						writeString(this.CODIGO_PLAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO_USUARIO);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNIDAD_MEDIDA);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.CODIGO_DEPARTAMENTO,dos);
					
					// String
				
						writeString(this.CPDIGO_MUNICIPIO,dos);
					
					// String
				
						writeString(this.ZONA_RECIDENCIA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CODESM,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.IDENTIFICACION,dos);
					
					// String
				
						writeString(this.CODIGO_PLAN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO_USUARIO);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UNIDAD_MEDIDA);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.CODIGO_DEPARTAMENTO,dos);
					
					// String
				
						writeString(this.CPDIGO_MUNICIPIO,dos);
					
					// String
				
						writeString(this.ZONA_RECIDENCIA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CODESM="+CODESM);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",IDENTIFICACION="+IDENTIFICACION);
		sb.append(",CODIGO_PLAN="+CODIGO_PLAN);
		sb.append(",TIPO_USUARIO="+String.valueOf(TIPO_USUARIO));
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UNIDAD_MEDIDA="+String.valueOf(UNIDAD_MEDIDA));
		sb.append(",SEXO="+SEXO);
		sb.append(",CODIGO_DEPARTAMENTO="+CODIGO_DEPARTAMENTO);
		sb.append(",CPDIGO_MUNICIPIO="+CPDIGO_MUNICIPIO);
		sb.append(",ZONA_RECIDENCIA="+ZONA_RECIDENCIA);
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
insert_usStruct insert_us = new insert_usStruct();





	
	/**
	 * [tOracleOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_12", false);
		start_Hash.put("tOracleOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_us");
					}
				
		int tos_count_tOracleOutput_12 = 0;
		






    
    int nb_line_tOracleOutput_12 = 0;
    int nb_line_update_tOracleOutput_12 = 0;
    int nb_line_inserted_tOracleOutput_12 = 0;
    int nb_line_deleted_tOracleOutput_12 = 0;
    int nb_line_rejected_tOracleOutput_12 = 0;

    int tmp_batchUpdateCount_tOracleOutput_12 = 0;

    int deletedCount_tOracleOutput_12=0;
    int updatedCount_tOracleOutput_12=0;
    int insertedCount_tOracleOutput_12=0;
    int rowsToCommitCount_tOracleOutput_12=0;
    int rejectedCount_tOracleOutput_12=0;

    boolean whetherReject_tOracleOutput_12 = false;

    java.sql.Connection conn_tOracleOutput_12 = null;

    //optional table
    String dbschema_tOracleOutput_12 = null;
    String tableName_tOracleOutput_12 = null;
                    String driverClass_tOracleOutput_12 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_12);
                String url_tOracleOutput_12 = null;
                    url_tOracleOutput_12 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_12 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_12 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_12 = decryptedPassword_tOracleOutput_12;
                dbschema_tOracleOutput_12 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_12 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_12.put("user",dbUser_tOracleOutput_12);
                    atnParamsPrope_tOracleOutput_12.put("password",dbPwd_tOracleOutput_12);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_12.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_12 = java.sql.DriverManager.getConnection(url_tOracleOutput_12, atnParamsPrope_tOracleOutput_12);
        resourceMap.put("conn_tOracleOutput_12", conn_tOracleOutput_12);
            conn_tOracleOutput_12.setAutoCommit(false);
            int commitEvery_tOracleOutput_12 = 1000;
            int commitCounter_tOracleOutput_12 = 0;
        int batchSize_tOracleOutput_12 = 1000;
        int batchSizeCounter_tOracleOutput_12=0;
        int count_tOracleOutput_12=0;

        if(dbschema_tOracleOutput_12 == null || dbschema_tOracleOutput_12.trim().length() == 0) {
            tableName_tOracleOutput_12 = ("BRIPS_USUARIOS");
        } else {
            tableName_tOracleOutput_12 = dbschema_tOracleOutput_12 + "." + ("BRIPS_USUARIOS");
        }
                String insert_tOracleOutput_12 = "INSERT INTO " + tableName_tOracleOutput_12 + " (TDOCUMENTO,DOCUMENTO,CODENTIDAD,TUSUARIO,PRIMER_NOMBRE,SEGUNDO_NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,EDAD,SEXO,ZRESIDENCIA,CODDEPARTAMENTO,CODMUNICIPIO,TRIPS,PERIODO,CODESM,FECHA,PERSONAS_ID,UORG_ID,UNIDAD_MEDIDA) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_12 = conn_tOracleOutput_12.prepareStatement(insert_tOracleOutput_12);
                        resourceMap.put("pstmt_tOracleOutput_12", pstmt_tOracleOutput_12);





 



/**
 * [tOracleOutput_12 begin ] stop
 */



	
	/**
	 * [tMap_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_17", false);
		start_Hash.put("tMap_17", System.currentTimeMillis());
		
	
	currentComponent="tMap_17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_17 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_17__Struct  {
}
Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_usStruct insert_us_tmp = new insert_usStruct();
// ###############################

        
        



        









 



/**
 * [tMap_17 begin ] stop
 */



	
	/**
	 * [tOracleInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_9", false);
		start_Hash.put("tOracleInput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_9";
	
	
		int tos_count_tOracleInput_9 = 0;
		
	


	
		    int nb_line_tOracleInput_9 = 0;
		    java.sql.Connection conn_tOracleInput_9 = null;
				conn_tOracleInput_9 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
				
                boolean isTimeZoneNull_tOracleInput_9 = false;
				boolean isConnectionWrapped_tOracleInput_9 = !(conn_tOracleInput_9 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_9.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_9 = null;
                if (isConnectionWrapped_tOracleInput_9) {
					unwrappedOraConn_tOracleInput_9 = conn_tOracleInput_9.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_9 != null) {
                        isTimeZoneNull_tOracleInput_9 = (unwrappedOraConn_tOracleInput_9.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_9 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_9).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_9) {
					java.sql.Statement stmtGetTZ_tOracleInput_9 = conn_tOracleInput_9.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_9 = stmtGetTZ_tOracleInput_9.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_9 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_9.next()) {
						sessionTimezone_tOracleInput_9 = rsGetTZ_tOracleInput_9.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_9 && unwrappedOraConn_tOracleInput_9 != null) {
                        unwrappedOraConn_tOracleInput_9.setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_9).setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_9 = conn_tOracleInput_9.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_9.setFetchSize(1000);


		    String dbquery_tOracleInput_9 = "SELECT \n  DISTINCT\n  UORG.ID AS UORG_ID,\n  UORG.CODIGO AS CODESM,\n  PER.ID AS PERSONAS_ID,\n  TDOC.SIGLA AS TIPO_DO"
+"CUMENTO,\n  PER.DOCUMENTO AS IDENTIFICACION,  \n  UORGp.nit AS CODIGO_PLAN, \n  CASE WHEN AFI.ID IS NULL THEN 4\n  ELSE "
+"5 END TIPO_USUARIO, \n  PER.PRIMER_APELLIDO AS PRIMER_APELLIDO,\n  PER.SEGUNDO_APELLIDO AS SEGUNDO_APELLIDO,\n  PER.PRIM"
+"ER_NOMBRE AS PRIMER_NOMBRE,\n  PER.SEGUNDO_NOMBRE AS SEGUNDO_NOMBRE,\n  TO_NUMBER(substr((REP.GetUnidadMedidaEdad(PER.FE"
+"CHA_NACIMIENTO)), 1, instr((REP.GetUnidadMedidaEdad(PER.FECHA_NACIMIENTO)), ' ')-1)) AS EDAD,\n  TO_NUMBER(substr((REP.G"
+"etUnidadMedidaEdad(PER.FECHA_NACIMIENTO)),instr((REP.GetUnidadMedidaEdad(PER.FECHA_NACIMIENTO)), ' ')+1)) AS UNIDAD_MEDI"
+"DA,\n  SEX.SIGLA AS SEXO,\n  DIVI.CODDEPTO AS CODIGO_DEPARTAMENTO,\n  DIVI.CODMCPIO AS CPDIGO_MUNICIPIO,\n  CASE \n  WHE"
+"N PER.ZRESIDENCIAS = 1 THEN 'R'\n  WHEN PER.ZRESIDENCIAS = 2 THEN 'U'\n  END AS ZONA_RECIDENCIA,\n  ADM.FECHA AS FECHA\n"
+"  \nFROM SALUDSIS.ADM_ADMISIONES ADM\nINNER JOIN SALUDSIS.GEN_UORG UORG ON UORG.ID = ADM.UORG_ID\nINNER JOIN SALUDSIS.GE"
+"N_PERSONAS PER ON PER.ID = ADM.PERSONAS_ID\nLEFT JOIN SALUDSIS.GEN_AFILIADOS AFI ON AFI.PERSONAS_ID = PER.ID AND AFI.EST"
+"REGISTRO_ID=1\nLEFT JOIN SALUDSIS.GEN_UORG UORGp ON UORGp.ID = PER.ESMADSCRITO\nINNER JOIN SALUDSIS.GEN_TDOCUMENTOS TDOC"
+" ON TDOC.ID = PER.TDOCUMENTOS_ID\nINNER JOIN SALUDSIS.GEN_SEXOS SEX ON SEX.ID = PER.SEXO_ID \nLEFT JOIN SALUDSIS.GEN_DIV"
+"IPOLA DIVI ON DIVI.ID = PER.LUGAR_RESIDENCIA \n\nWHERE ADM.ESTREGISTRO_ID= 1 \n"+context.CONDICION_USUARIOS
;
		    

		    globalMap.put("tOracleInput_9_QUERY",dbquery_tOracleInput_9);

		    java.sql.ResultSet rs_tOracleInput_9 = null;

		    try {
		    	rs_tOracleInput_9 = stmt_tOracleInput_9.executeQuery(dbquery_tOracleInput_9);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_9 = rs_tOracleInput_9.getMetaData();
		    	int colQtyInRs_tOracleInput_9 = rsmd_tOracleInput_9.getColumnCount();

		    String tmpContent_tOracleInput_9 = null;
		    
		    
		    while (rs_tOracleInput_9.next()) {
		        nb_line_tOracleInput_9++;
		        
							if(colQtyInRs_tOracleInput_9 < 1) {
								row9.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(1) != null) {
						row9.UORG_ID = rs_tOracleInput_9.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 2) {
								row9.CODESM = null;
							} else {
	                         		
        	row9.CODESM = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_9 < 3) {
								row9.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(3) != null) {
						row9.PERSONAS_ID = rs_tOracleInput_9.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 4) {
								row9.TIPO_DOCUMENTO = null;
							} else {
	                         		
        	row9.TIPO_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_9 < 5) {
								row9.IDENTIFICACION = null;
							} else {
	                         		
        	row9.IDENTIFICACION = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_9 < 6) {
								row9.CODIGO_PLAN = null;
							} else {
	                         		
        	row9.CODIGO_PLAN = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_9 < 7) {
								row9.TIPO_USUARIO = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(7) != null) {
						row9.TIPO_USUARIO = rs_tOracleInput_9.getBigDecimal(7);
					} else {
				
						row9.TIPO_USUARIO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 8) {
								row9.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row9.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_9 < 9) {
								row9.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row9.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_9 < 10) {
								row9.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row9.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_9 < 11) {
								row9.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row9.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_9 < 12) {
								row9.EDAD = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(12) != null) {
						row9.EDAD = rs_tOracleInput_9.getBigDecimal(12);
					} else {
				
						row9.EDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 13) {
								row9.UNIDAD_MEDIDA = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(13) != null) {
						row9.UNIDAD_MEDIDA = rs_tOracleInput_9.getBigDecimal(13);
					} else {
				
						row9.UNIDAD_MEDIDA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 14) {
								row9.SEXO = null;
							} else {
	                         		
        	row9.SEXO = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_9 < 15) {
								row9.CODIGO_DEPARTAMENTO = null;
							} else {
	                         		
        	row9.CODIGO_DEPARTAMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_9 < 16) {
								row9.CPDIGO_MUNICIPIO = null;
							} else {
	                         		
        	row9.CPDIGO_MUNICIPIO = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_9 < 17) {
								row9.ZONA_RECIDENCIA = null;
							} else {
	                         		
        	row9.ZONA_RECIDENCIA = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 17, false);
		                    }
							if(colQtyInRs_tOracleInput_9 < 18) {
								row9.FECHA = null;
							} else {
										
			row9.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_9, 18);
		                    }
					




 



/**
 * [tOracleInput_9 begin ] stop
 */
	
	/**
	 * [tOracleInput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 


	tos_count_tOracleInput_9++;

/**
 * [tOracleInput_9 main ] stop
 */
	
	/**
	 * [tOracleInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tMap_17 main ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_17 = false;
		boolean mainRowRejected_tMap_17 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
        // ###############################
        // # Output tables

insert_us = null;


// # Output table : 'insert_us'
insert_us_tmp.TDOCUMENTO = row9.TIPO_DOCUMENTO ;
insert_us_tmp.DOCUMENTO = row9.IDENTIFICACION ;
insert_us_tmp.CODENTIDAD = row9.CODIGO_PLAN ;
insert_us_tmp.TUSUARIO = row9.TIPO_USUARIO ;
insert_us_tmp.PRIMER_NOMBRE = row9.PRIMER_NOMBRE ;
insert_us_tmp.SEGUNDO_NOMBRE = row9.SEGUNDO_NOMBRE ;
insert_us_tmp.PRIMER_APELLIDO = row9.PRIMER_APELLIDO ;
insert_us_tmp.SEGUNDO_APELLIDO = row9.SEGUNDO_APELLIDO ;
insert_us_tmp.EDAD = row9.EDAD ;
insert_us_tmp.SEXO = row9.SEXO ;
insert_us_tmp.ZRESIDENCIA = row9.ZONA_RECIDENCIA ;
insert_us_tmp.CODDEPARTAMENTO = row9.CODIGO_DEPARTAMENTO ;
insert_us_tmp.CODMUNICIPIO = row9.CPDIGO_MUNICIPIO ;
insert_us_tmp.TRIPS = "Interna";
insert_us_tmp.PERIODO = TalendDate.formatDate("yyyy-MM",row9.FECHA);
insert_us_tmp.CODESM = row9.CODESM ;
insert_us_tmp.FECHA = row9.FECHA ;
insert_us_tmp.PERSONAS_ID = row9.PERSONAS_ID ;
insert_us_tmp.UORG_ID = row9.UORG_ID ;
insert_us_tmp.UNIDAD_MEDIDA = row9.UNIDAD_MEDIDA ;
insert_us = insert_us_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_17 = false;










 


	tos_count_tMap_17++;

/**
 * [tMap_17 main ] stop
 */
	
	/**
	 * [tMap_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	

 



/**
 * [tMap_17 process_data_begin ] stop
 */
// Start of branch "insert_us"
if(insert_us != null) { 



	
	/**
	 * [tOracleOutput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_us"
						
						);
					}
					



        whetherReject_tOracleOutput_12 = false;
                        if(insert_us.TDOCUMENTO == null) {
pstmt_tOracleOutput_12.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(1, insert_us.TDOCUMENTO);
}

                        if(insert_us.DOCUMENTO == null) {
pstmt_tOracleOutput_12.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(2, insert_us.DOCUMENTO);
}

                        if(insert_us.CODENTIDAD == null) {
pstmt_tOracleOutput_12.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(3, insert_us.CODENTIDAD);
}

                        pstmt_tOracleOutput_12.setBigDecimal(4, insert_us.TUSUARIO);

                        if(insert_us.PRIMER_NOMBRE == null) {
pstmt_tOracleOutput_12.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(5, insert_us.PRIMER_NOMBRE);
}

                        if(insert_us.SEGUNDO_NOMBRE == null) {
pstmt_tOracleOutput_12.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(6, insert_us.SEGUNDO_NOMBRE);
}

                        if(insert_us.PRIMER_APELLIDO == null) {
pstmt_tOracleOutput_12.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(7, insert_us.PRIMER_APELLIDO);
}

                        if(insert_us.SEGUNDO_APELLIDO == null) {
pstmt_tOracleOutput_12.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(8, insert_us.SEGUNDO_APELLIDO);
}

                        pstmt_tOracleOutput_12.setBigDecimal(9, insert_us.EDAD);

                        if(insert_us.SEXO == null) {
pstmt_tOracleOutput_12.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(10, insert_us.SEXO);
}

                        if(insert_us.ZRESIDENCIA == null) {
pstmt_tOracleOutput_12.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(11, insert_us.ZRESIDENCIA);
}

                        if(insert_us.CODDEPARTAMENTO == null) {
pstmt_tOracleOutput_12.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(12, insert_us.CODDEPARTAMENTO);
}

                        if(insert_us.CODMUNICIPIO == null) {
pstmt_tOracleOutput_12.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(13, insert_us.CODMUNICIPIO);
}

                        if(insert_us.TRIPS == null) {
pstmt_tOracleOutput_12.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(14, insert_us.TRIPS);
}

                        if(insert_us.PERIODO == null) {
pstmt_tOracleOutput_12.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(15, insert_us.PERIODO);
}

                        if(insert_us.CODESM == null) {
pstmt_tOracleOutput_12.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(16, insert_us.CODESM);
}

                        if(insert_us.FECHA != null) {
pstmt_tOracleOutput_12.setObject(17, new java.sql.Timestamp(insert_us.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_12.setNull(17, java.sql.Types.DATE);
}

                        pstmt_tOracleOutput_12.setBigDecimal(18, insert_us.PERSONAS_ID);

                        pstmt_tOracleOutput_12.setBigDecimal(19, insert_us.UORG_ID);

                        pstmt_tOracleOutput_12.setBigDecimal(20, insert_us.UNIDAD_MEDIDA);

                pstmt_tOracleOutput_12.addBatch();
                nb_line_tOracleOutput_12++;
                batchSizeCounter_tOracleOutput_12++;
            if (batchSize_tOracleOutput_12 > 0 &&  batchSize_tOracleOutput_12 <= batchSizeCounter_tOracleOutput_12) {
                try {
                    pstmt_tOracleOutput_12.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_12){
globalMap.put("tOracleOutput_12_ERROR_MESSAGE",e_tOracleOutput_12.getMessage());
			        java.sql.SQLException ne_tOracleOutput_12 = e_tOracleOutput_12.getNextException(),sqle_tOracleOutput_12=null;
			    	String errormessage_tOracleOutput_12;
					if (ne_tOracleOutput_12 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_12 = new java.sql.SQLException(e_tOracleOutput_12.getMessage() + "\ncaused by: " + ne_tOracleOutput_12.getMessage(), ne_tOracleOutput_12.getSQLState(), ne_tOracleOutput_12.getErrorCode(), ne_tOracleOutput_12);
						errormessage_tOracleOutput_12 = sqle_tOracleOutput_12.getMessage();
					}else{
						errormessage_tOracleOutput_12 = e_tOracleOutput_12.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_12);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_12 = pstmt_tOracleOutput_12.getUpdateCount();
                    insertedCount_tOracleOutput_12
                += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                rowsToCommitCount_tOracleOutput_12 += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                batchSizeCounter_tOracleOutput_12 = 0;
            }
                commitCounter_tOracleOutput_12++;
                if(commitEvery_tOracleOutput_12 <= commitCounter_tOracleOutput_12) {
                    if(batchSizeCounter_tOracleOutput_12 > 0) {
                        try {
                            pstmt_tOracleOutput_12.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_12){
globalMap.put("tOracleOutput_12_ERROR_MESSAGE",e_tOracleOutput_12.getMessage());
					        java.sql.SQLException ne_tOracleOutput_12 = e_tOracleOutput_12.getNextException(),sqle_tOracleOutput_12=null;
					    	String errormessage_tOracleOutput_12;
							if (ne_tOracleOutput_12 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_12 = new java.sql.SQLException(e_tOracleOutput_12.getMessage() + "\ncaused by: " + ne_tOracleOutput_12.getMessage(), ne_tOracleOutput_12.getSQLState(), ne_tOracleOutput_12.getErrorCode(), ne_tOracleOutput_12);
								errormessage_tOracleOutput_12 = sqle_tOracleOutput_12.getMessage();
							}else{
								errormessage_tOracleOutput_12 = e_tOracleOutput_12.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_12);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_12 = pstmt_tOracleOutput_12.getUpdateCount();
                            insertedCount_tOracleOutput_12
                        += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                        rowsToCommitCount_tOracleOutput_12 += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_12 != 0){
                    	
                    }
                    conn_tOracleOutput_12.commit();
                    if(rowsToCommitCount_tOracleOutput_12 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_12 = 0;
                    }
                    commitCounter_tOracleOutput_12=0;
                    	batchSizeCounter_tOracleOutput_12=0;
                }

 


	tos_count_tOracleOutput_12++;

/**
 * [tOracleOutput_12 main ] stop
 */
	
	/**
	 * [tOracleOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	

 



/**
 * [tOracleOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	

 



/**
 * [tOracleOutput_12 process_data_end ] stop
 */

} // End of branch "insert_us"




	
	/**
	 * [tMap_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	

 



/**
 * [tMap_17 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

}
}finally{
	if (rs_tOracleInput_9 != null) {
		rs_tOracleInput_9.close();
	}
	if (stmt_tOracleInput_9 != null) {
		stmt_tOracleInput_9.close();
	}
}

globalMap.put("tOracleInput_9_NB_LINE",nb_line_tOracleInput_9);
 

ok_Hash.put("tOracleInput_9", true);
end_Hash.put("tOracleInput_9", System.currentTimeMillis());




/**
 * [tOracleInput_9 end ] stop
 */

	
	/**
	 * [tMap_17 end ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_17", true);
end_Hash.put("tMap_17", System.currentTimeMillis());




/**
 * [tMap_17 end ] stop
 */

	
	/**
	 * [tOracleOutput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_12 > 0) {
            try {
            	if (pstmt_tOracleOutput_12 != null) {
					
					pstmt_tOracleOutput_12.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_12){
globalMap.put("tOracleOutput_12_ERROR_MESSAGE",e_tOracleOutput_12.getMessage());
		        java.sql.SQLException ne_tOracleOutput_12 = e_tOracleOutput_12.getNextException(),sqle_tOracleOutput_12=null;
		    	String errormessage_tOracleOutput_12;
				if (ne_tOracleOutput_12 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_12 = new java.sql.SQLException(e_tOracleOutput_12.getMessage() + "\ncaused by: " + ne_tOracleOutput_12.getMessage(), ne_tOracleOutput_12.getSQLState(), ne_tOracleOutput_12.getErrorCode(), ne_tOracleOutput_12);
					errormessage_tOracleOutput_12 = sqle_tOracleOutput_12.getMessage();
				}else{
					errormessage_tOracleOutput_12 = e_tOracleOutput_12.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_12);
            	
        	}
        	if (pstmt_tOracleOutput_12 != null) {
            	tmp_batchUpdateCount_tOracleOutput_12 = pstmt_tOracleOutput_12.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_12
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
				rowsToCommitCount_tOracleOutput_12 += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
            }
        }
        if(pstmt_tOracleOutput_12 != null) {
			
				pstmt_tOracleOutput_12.close();
				resourceMap.remove("pstmt_tOracleOutput_12");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_12", true);
		if(commitCounter_tOracleOutput_12 > 0 && rowsToCommitCount_tOracleOutput_12 != 0) {
			
		}
		conn_tOracleOutput_12.commit();
		if(commitCounter_tOracleOutput_12 > 0 && rowsToCommitCount_tOracleOutput_12 != 0) {
			
			rowsToCommitCount_tOracleOutput_12 = 0;
		}
		commitCounter_tOracleOutput_12 = 0;
		
		
		conn_tOracleOutput_12 .close();
		
		resourceMap.put("finish_tOracleOutput_12", true);
   	

	
	nb_line_deleted_tOracleOutput_12=nb_line_deleted_tOracleOutput_12+ deletedCount_tOracleOutput_12;
	nb_line_update_tOracleOutput_12=nb_line_update_tOracleOutput_12 + updatedCount_tOracleOutput_12;
	nb_line_inserted_tOracleOutput_12=nb_line_inserted_tOracleOutput_12 + insertedCount_tOracleOutput_12;
	nb_line_rejected_tOracleOutput_12=nb_line_rejected_tOracleOutput_12 + rejectedCount_tOracleOutput_12;
	
        globalMap.put("tOracleOutput_12_NB_LINE",nb_line_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_UPDATED",nb_line_update_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_12);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_us");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_12", true);
end_Hash.put("tOracleOutput_12", System.currentTimeMillis());




/**
 * [tOracleOutput_12 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tJava_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 finally ] stop
 */

	
	/**
	 * [tMap_17 finally ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	

 



/**
 * [tMap_17 finally ] stop
 */

	
	/**
	 * [tOracleOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_12") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_12 = null;
                if ((pstmtToClose_tOracleOutput_12 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_12")) != null) {
                    pstmtToClose_tOracleOutput_12.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_12") == null){
            java.sql.Connection ctn_tOracleOutput_12 = null;
            if((ctn_tOracleOutput_12 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_12")) != null){
                try {
                    ctn_tOracleOutput_12.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_12) {
                    String errorMessage_tOracleOutput_12 = "failed to close the connection in tOracleOutput_12 :" + sqlEx_tOracleOutput_12.getMessage();
                    System.err.println(errorMessage_tOracleOutput_12);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_12 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 1);
	}
	


public void tJava_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_7", false);
		start_Hash.put("tJava_7", System.currentTimeMillis());
		
	
	currentComponent="tJava_7";
	
	
		int tos_count_tJava_7 = 0;
		


context.CODARCHIVO = "AN";
/*context.ARCONTROL_ID = (BigDecimal) ((java.util.Map) globalMap.get("sharedMap")).get("ReturnValueAC_ID");
System.out.println("ARCONTROL_ID AN : " + context.ARCONTROL_ID );*/

System.out.println("        - Recien nacidos: " + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );
 



/**
 * [tJava_7 begin ] stop
 */
	
	/**
	 * [tJava_7 main ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 


	tos_count_tJava_7++;

/**
 * [tJava_7 main ] stop
 */
	
	/**
	 * [tJava_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 process_data_begin ] stop
 */
	
	/**
	 * [tJava_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 process_data_end ] stop
 */
	
	/**
	 * [tJava_7 end ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 

ok_Hash.put("tJava_7", true);
end_Hash.put("tJava_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk25", 0, "ok");
				}
				tOracleInput_11Process(globalMap);



/**
 * [tJava_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_7 finally ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}
	


public static class insert_rnStruct implements routines.system.IPersistableRow<insert_rnStruct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return 100;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return 0;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public java.util.Date HORA_MUERTE;

				public java.util.Date getHORA_MUERTE () {
					return this.HORA_MUERTE;
				}

				public Boolean HORA_MUERTEIsNullable(){
				    return true;
				}
				public Boolean HORA_MUERTEIsKey(){
				    return false;
				}
				public Integer HORA_MUERTELength(){
				    return 7;
				}
				public Integer HORA_MUERTEPrecision(){
				    return 0;
				}
				public String HORA_MUERTEDefault(){
				
					return null;
				
				}
				public String HORA_MUERTEComment(){
				
				    return "";
				
				}
				public String HORA_MUERTEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HORA_MUERTEOriginalDbColumnName(){
				
					return "HORA_MUERTE";
				
				}

				
			    public java.util.Date FECHA_MUERTE;

				public java.util.Date getFECHA_MUERTE () {
					return this.FECHA_MUERTE;
				}

				public Boolean FECHA_MUERTEIsNullable(){
				    return true;
				}
				public Boolean FECHA_MUERTEIsKey(){
				    return false;
				}
				public Integer FECHA_MUERTELength(){
				    return 7;
				}
				public Integer FECHA_MUERTEPrecision(){
				    return 0;
				}
				public String FECHA_MUERTEDefault(){
				
					return null;
				
				}
				public String FECHA_MUERTEComment(){
				
				    return "";
				
				}
				public String FECHA_MUERTEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_MUERTEOriginalDbColumnName(){
				
					return "FECHA_MUERTE";
				
				}

				
			    public String CAUSA;

				public String getCAUSA () {
					return this.CAUSA;
				}

				public Boolean CAUSAIsNullable(){
				    return true;
				}
				public Boolean CAUSAIsKey(){
				    return false;
				}
				public Integer CAUSALength(){
				    return 500;
				}
				public Integer CAUSAPrecision(){
				    return 0;
				}
				public String CAUSADefault(){
				
					return null;
				
				}
				public String CAUSAComment(){
				
				    return "";
				
				}
				public String CAUSAPattern(){
				
					return "";
				
				}
				public String CAUSAOriginalDbColumnName(){
				
					return "CAUSA";
				
				}

				
			    public String DIAGNOSTICO;

				public String getDIAGNOSTICO () {
					return this.DIAGNOSTICO;
				}

				public Boolean DIAGNOSTICOIsNullable(){
				    return true;
				}
				public Boolean DIAGNOSTICOIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICOLength(){
				    return 500;
				}
				public Integer DIAGNOSTICOPrecision(){
				    return 0;
				}
				public String DIAGNOSTICODefault(){
				
					return null;
				
				}
				public String DIAGNOSTICOComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICOPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICOOriginalDbColumnName(){
				
					return "DIAGNOSTICO";
				
				}

				
			    public BigDecimal PESO;

				public BigDecimal getPESO () {
					return this.PESO;
				}

				public Boolean PESOIsNullable(){
				    return true;
				}
				public Boolean PESOIsKey(){
				    return false;
				}
				public Integer PESOLength(){
				    return 0;
				}
				public Integer PESOPrecision(){
				    return null;
				}
				public String PESODefault(){
				
					return null;
				
				}
				public String PESOComment(){
				
				    return "";
				
				}
				public String PESOPattern(){
				
					return "";
				
				}
				public String PESOOriginalDbColumnName(){
				
					return "PESO";
				
				}

				
			    public BigDecimal SEXO;

				public BigDecimal getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return true;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return 0;
				}
				public Integer SEXOPrecision(){
				    return null;
				}
				public String SEXODefault(){
				
					return null;
				
				}
				public String SEXOComment(){
				
				    return "";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public BigDecimal CONTROL_PRENATAL;

				public BigDecimal getCONTROL_PRENATAL () {
					return this.CONTROL_PRENATAL;
				}

				public Boolean CONTROL_PRENATALIsNullable(){
				    return true;
				}
				public Boolean CONTROL_PRENATALIsKey(){
				    return false;
				}
				public Integer CONTROL_PRENATALLength(){
				    return 0;
				}
				public Integer CONTROL_PRENATALPrecision(){
				    return null;
				}
				public String CONTROL_PRENATALDefault(){
				
					return null;
				
				}
				public String CONTROL_PRENATALComment(){
				
				    return "";
				
				}
				public String CONTROL_PRENATALPattern(){
				
					return "";
				
				}
				public String CONTROL_PRENATALOriginalDbColumnName(){
				
					return "CONTROL_PRENATAL";
				
				}

				
			    public BigDecimal EDAD_GESTACIONAL;

				public BigDecimal getEDAD_GESTACIONAL () {
					return this.EDAD_GESTACIONAL;
				}

				public Boolean EDAD_GESTACIONALIsNullable(){
				    return true;
				}
				public Boolean EDAD_GESTACIONALIsKey(){
				    return false;
				}
				public Integer EDAD_GESTACIONALLength(){
				    return 0;
				}
				public Integer EDAD_GESTACIONALPrecision(){
				    return null;
				}
				public String EDAD_GESTACIONALDefault(){
				
					return null;
				
				}
				public String EDAD_GESTACIONALComment(){
				
				    return "";
				
				}
				public String EDAD_GESTACIONALPattern(){
				
					return "";
				
				}
				public String EDAD_GESTACIONALOriginalDbColumnName(){
				
					return "EDAD_GESTACIONAL";
				
				}

				
			    public java.util.Date HORA_NACIMIENTO;

				public java.util.Date getHORA_NACIMIENTO () {
					return this.HORA_NACIMIENTO;
				}

				public Boolean HORA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean HORA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer HORA_NACIMIENTOLength(){
				    return 7;
				}
				public Integer HORA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String HORA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String HORA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String HORA_NACIMIENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HORA_NACIMIENTOOriginalDbColumnName(){
				
					return "HORA_NACIMIENTO";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 7;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 50;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return 100;
				}
				public Integer CODPRESTADORPrecision(){
				    return 0;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public String TRIPS;

				public String getTRIPS () {
					return this.TRIPS;
				}

				public Boolean TRIPSIsNullable(){
				    return true;
				}
				public Boolean TRIPSIsKey(){
				    return false;
				}
				public Integer TRIPSLength(){
				    return 10;
				}
				public Integer TRIPSPrecision(){
				    return 0;
				}
				public String TRIPSDefault(){
				
					return null;
				
				}
				public String TRIPSComment(){
				
				    return "";
				
				}
				public String TRIPSPattern(){
				
					return "";
				
				}
				public String TRIPSOriginalDbColumnName(){
				
					return "TRIPS";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 7;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public BigDecimal NEONATOS_ID;

				public BigDecimal getNEONATOS_ID () {
					return this.NEONATOS_ID;
				}

				public Boolean NEONATOS_IDIsNullable(){
				    return true;
				}
				public Boolean NEONATOS_IDIsKey(){
				    return false;
				}
				public Integer NEONATOS_IDLength(){
				    return 0;
				}
				public Integer NEONATOS_IDPrecision(){
				    return null;
				}
				public String NEONATOS_IDDefault(){
				
					return null;
				
				}
				public String NEONATOS_IDComment(){
				
				    return "";
				
				}
				public String NEONATOS_IDPattern(){
				
					return "";
				
				}
				public String NEONATOS_IDOriginalDbColumnName(){
				
					return "NEONATOS_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "FK - BGEN_PERSONAS";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - BGEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "Id de la fuerza del ESM de atencion";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "Sigla del tipo de documento del profesional asistencial que atiende";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "N\u00FAmero de identificacion del profesional asistencial que atiende";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "Nombre de la especialidad que atiende";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return 10;
				}
				public Integer TALLAPrecision(){
				    return 0;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "Altura del paciente la momento de la atenci\u00F3n ";
				
				}
				public String TALLAPattern(){
				
					return "";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public String UMEDIDA_TALLA;

				public String getUMEDIDA_TALLA () {
					return this.UMEDIDA_TALLA;
				}

				public Boolean UMEDIDA_TALLAIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_TALLAIsKey(){
				    return false;
				}
				public Integer UMEDIDA_TALLALength(){
				    return 10;
				}
				public Integer UMEDIDA_TALLAPrecision(){
				    return 0;
				}
				public String UMEDIDA_TALLADefault(){
				
					return null;
				
				}
				public String UMEDIDA_TALLAComment(){
				
				    return "Unidad de medida de la talla del paciente";
				
				}
				public String UMEDIDA_TALLAPattern(){
				
					return "";
				
				}
				public String UMEDIDA_TALLAOriginalDbColumnName(){
				
					return "UMEDIDA_TALLA";
				
				}

				
			    public String TIPO_GENERACION;

				public String getTIPO_GENERACION () {
					return this.TIPO_GENERACION;
				}

				public Boolean TIPO_GENERACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_GENERACIONIsKey(){
				    return false;
				}
				public Integer TIPO_GENERACIONLength(){
				    return 10;
				}
				public Integer TIPO_GENERACIONPrecision(){
				    return 0;
				}
				public String TIPO_GENERACIONDefault(){
				
					return null;
				
				}
				public String TIPO_GENERACIONComment(){
				
				    return "Forma en que se almaceno ( Cargue, Automatico)";
				
				}
				public String TIPO_GENERACIONPattern(){
				
					return "";
				
				}
				public String TIPO_GENERACIONOriginalDbColumnName(){
				
					return "TIPO_GENERACION";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 100;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "Tipo de afiliado ( No cotizante, cotizante pensionado o retirado, cotizante activo, beneficiario)";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "EDAD SIMPLE DE LA PERSONA AL MOMENTO DE LA ATENCI\u00D3N";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 10;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "Unidad de medida de la edad simple (A\u00F1os, Meses)";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.HORA_MUERTE = readDate(dis);
					
					this.FECHA_MUERTE = readDate(dis);
					
					this.CAUSA = readString(dis);
					
					this.DIAGNOSTICO = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.SEXO = (BigDecimal) dis.readObject();
					
						this.CONTROL_PRENATAL = (BigDecimal) dis.readObject();
					
						this.EDAD_GESTACIONAL = (BigDecimal) dis.readObject();
					
					this.HORA_NACIMIENTO = readDate(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.CODPRESTADOR = readString(dis);
					
					this.TRIPS = readString(dis);
					
					this.PERIODO = readString(dis);
					
						this.NEONATOS_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.NUMERO_FACTURA = readString(dis);
					
					this.HORA_MUERTE = readDate(dis);
					
					this.FECHA_MUERTE = readDate(dis);
					
					this.CAUSA = readString(dis);
					
					this.DIAGNOSTICO = readString(dis);
					
						this.PESO = (BigDecimal) dis.readObject();
					
						this.SEXO = (BigDecimal) dis.readObject();
					
						this.CONTROL_PRENATAL = (BigDecimal) dis.readObject();
					
						this.EDAD_GESTACIONAL = (BigDecimal) dis.readObject();
					
					this.HORA_NACIMIENTO = readDate(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.CODPRESTADOR = readString(dis);
					
					this.TRIPS = readString(dis);
					
					this.PERIODO = readString(dis);
					
						this.NEONATOS_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_GENERACION = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_MUERTE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_MUERTE,dos);
					
					// String
				
						writeString(this.CAUSA,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SEXO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTROL_PRENATAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_GESTACIONAL);
					
					// java.util.Date
				
						writeDate(this.HORA_NACIMIENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NEONATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_MUERTE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_MUERTE,dos);
					
					// String
				
						writeString(this.CAUSA,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SEXO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTROL_PRENATAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_GESTACIONAL);
					
					// java.util.Date
				
						writeDate(this.HORA_NACIMIENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NEONATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_GENERACION,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",HORA_MUERTE="+String.valueOf(HORA_MUERTE));
		sb.append(",FECHA_MUERTE="+String.valueOf(FECHA_MUERTE));
		sb.append(",CAUSA="+CAUSA);
		sb.append(",DIAGNOSTICO="+DIAGNOSTICO);
		sb.append(",PESO="+String.valueOf(PESO));
		sb.append(",SEXO="+String.valueOf(SEXO));
		sb.append(",CONTROL_PRENATAL="+String.valueOf(CONTROL_PRENATAL));
		sb.append(",EDAD_GESTACIONAL="+String.valueOf(EDAD_GESTACIONAL));
		sb.append(",HORA_NACIMIENTO="+String.valueOf(HORA_NACIMIENTO));
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",TRIPS="+TRIPS);
		sb.append(",PERIODO="+PERIODO);
		sb.append(",NEONATOS_ID="+String.valueOf(NEONATOS_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",TALLA="+TALLA);
		sb.append(",UMEDIDA_TALLA="+UMEDIDA_TALLA);
		sb.append(",TIPO_GENERACION="+TIPO_GENERACION);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_rnStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public java.util.Date FECHA_MUERTE;

				public java.util.Date getFECHA_MUERTE () {
					return this.FECHA_MUERTE;
				}

				public Boolean FECHA_MUERTEIsNullable(){
				    return true;
				}
				public Boolean FECHA_MUERTEIsKey(){
				    return false;
				}
				public Integer FECHA_MUERTELength(){
				    return 0;
				}
				public Integer FECHA_MUERTEPrecision(){
				    return 0;
				}
				public String FECHA_MUERTEDefault(){
				
					return null;
				
				}
				public String FECHA_MUERTEComment(){
				
				    return "";
				
				}
				public String FECHA_MUERTEPattern(){
				
					return "";
				
				}
				public String FECHA_MUERTEOriginalDbColumnName(){
				
					return "FECHA_MUERTE";
				
				}

				
			    public java.util.Date HORA_MUERTE;

				public java.util.Date getHORA_MUERTE () {
					return this.HORA_MUERTE;
				}

				public Boolean HORA_MUERTEIsNullable(){
				    return true;
				}
				public Boolean HORA_MUERTEIsKey(){
				    return false;
				}
				public Integer HORA_MUERTELength(){
				    return 0;
				}
				public Integer HORA_MUERTEPrecision(){
				    return 0;
				}
				public String HORA_MUERTEDefault(){
				
					return null;
				
				}
				public String HORA_MUERTEComment(){
				
				    return "";
				
				}
				public String HORA_MUERTEPattern(){
				
					return "";
				
				}
				public String HORA_MUERTEOriginalDbColumnName(){
				
					return "HORA_MUERTE";
				
				}

				
			    public String CAUSA;

				public String getCAUSA () {
					return this.CAUSA;
				}

				public Boolean CAUSAIsNullable(){
				    return true;
				}
				public Boolean CAUSAIsKey(){
				    return false;
				}
				public Integer CAUSALength(){
				    return 10;
				}
				public Integer CAUSAPrecision(){
				    return 0;
				}
				public String CAUSADefault(){
				
					return null;
				
				}
				public String CAUSAComment(){
				
				    return "";
				
				}
				public String CAUSAPattern(){
				
					return "";
				
				}
				public String CAUSAOriginalDbColumnName(){
				
					return "CAUSA";
				
				}

				
			    public String DIAGNOSTICO;

				public String getDIAGNOSTICO () {
					return this.DIAGNOSTICO;
				}

				public Boolean DIAGNOSTICOIsNullable(){
				    return true;
				}
				public Boolean DIAGNOSTICOIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICOLength(){
				    return 10;
				}
				public Integer DIAGNOSTICOPrecision(){
				    return 0;
				}
				public String DIAGNOSTICODefault(){
				
					return null;
				
				}
				public String DIAGNOSTICOComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICOPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICOOriginalDbColumnName(){
				
					return "DIAGNOSTICO";
				
				}

				
			    public BigDecimal PESO_VALOR;

				public BigDecimal getPESO_VALOR () {
					return this.PESO_VALOR;
				}

				public Boolean PESO_VALORIsNullable(){
				    return true;
				}
				public Boolean PESO_VALORIsKey(){
				    return false;
				}
				public Integer PESO_VALORLength(){
				    return 0;
				}
				public Integer PESO_VALORPrecision(){
				    return null;
				}
				public String PESO_VALORDefault(){
				
					return "";
				
				}
				public String PESO_VALORComment(){
				
				    return "";
				
				}
				public String PESO_VALORPattern(){
				
					return "";
				
				}
				public String PESO_VALOROriginalDbColumnName(){
				
					return "PESO_VALOR";
				
				}

				
			    public BigDecimal SEXO;

				public BigDecimal getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return true;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return 0;
				}
				public Integer SEXOPrecision(){
				    return 0;
				}
				public String SEXODefault(){
				
					return "";
				
				}
				public String SEXOComment(){
				
				    return "";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public BigDecimal CONTROL_PRENATAL;

				public BigDecimal getCONTROL_PRENATAL () {
					return this.CONTROL_PRENATAL;
				}

				public Boolean CONTROL_PRENATALIsNullable(){
				    return true;
				}
				public Boolean CONTROL_PRENATALIsKey(){
				    return false;
				}
				public Integer CONTROL_PRENATALLength(){
				    return 0;
				}
				public Integer CONTROL_PRENATALPrecision(){
				    return 0;
				}
				public String CONTROL_PRENATALDefault(){
				
					return "";
				
				}
				public String CONTROL_PRENATALComment(){
				
				    return "";
				
				}
				public String CONTROL_PRENATALPattern(){
				
					return "";
				
				}
				public String CONTROL_PRENATALOriginalDbColumnName(){
				
					return "CONTROL_PRENATAL";
				
				}

				
			    public BigDecimal EDAD_GESTACIONAL;

				public BigDecimal getEDAD_GESTACIONAL () {
					return this.EDAD_GESTACIONAL;
				}

				public Boolean EDAD_GESTACIONALIsNullable(){
				    return true;
				}
				public Boolean EDAD_GESTACIONALIsKey(){
				    return false;
				}
				public Integer EDAD_GESTACIONALLength(){
				    return 0;
				}
				public Integer EDAD_GESTACIONALPrecision(){
				    return null;
				}
				public String EDAD_GESTACIONALDefault(){
				
					return "";
				
				}
				public String EDAD_GESTACIONALComment(){
				
				    return "";
				
				}
				public String EDAD_GESTACIONALPattern(){
				
					return "";
				
				}
				public String EDAD_GESTACIONALOriginalDbColumnName(){
				
					return "EDAD_GESTACIONAL";
				
				}

				
			    public java.util.Date HORA_NACIMIENTO;

				public java.util.Date getHORA_NACIMIENTO () {
					return this.HORA_NACIMIENTO;
				}

				public Boolean HORA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean HORA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer HORA_NACIMIENTOLength(){
				    return 0;
				}
				public Integer HORA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String HORA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String HORA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String HORA_NACIMIENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HORA_NACIMIENTOOriginalDbColumnName(){
				
					return "HORA_NACIMIENTO";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 5;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return 100;
				}
				public Integer CODPRESTADORPrecision(){
				    return 0;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public String TRIPS;

				public String getTRIPS () {
					return this.TRIPS;
				}

				public Boolean TRIPSIsNullable(){
				    return true;
				}
				public Boolean TRIPSIsKey(){
				    return false;
				}
				public Integer TRIPSLength(){
				    return 7;
				}
				public Integer TRIPSPrecision(){
				    return 0;
				}
				public String TRIPSDefault(){
				
					return null;
				
				}
				public String TRIPSComment(){
				
				    return "";
				
				}
				public String TRIPSPattern(){
				
					return "";
				
				}
				public String TRIPSOriginalDbColumnName(){
				
					return "TRIPS";
				
				}

				
			    public BigDecimal NEONATOS_ID;

				public BigDecimal getNEONATOS_ID () {
					return this.NEONATOS_ID;
				}

				public Boolean NEONATOS_IDIsNullable(){
				    return false;
				}
				public Boolean NEONATOS_IDIsKey(){
				    return false;
				}
				public Integer NEONATOS_IDLength(){
				    return 0;
				}
				public Integer NEONATOS_IDPrecision(){
				    return null;
				}
				public String NEONATOS_IDDefault(){
				
					return "";
				
				}
				public String NEONATOS_IDComment(){
				
				    return "";
				
				}
				public String NEONATOS_IDPattern(){
				
					return "";
				
				}
				public String NEONATOS_IDOriginalDbColumnName(){
				
					return "NEONATOS_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return false;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String DOCUMENTO_PROFESIONAL;

				public String getDOCUMENTO_PROFESIONAL () {
					return this.DOCUMENTO_PROFESIONAL;
				}

				public Boolean DOCUMENTO_PROFESIONALIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer DOCUMENTO_PROFESIONALLength(){
				    return 40;
				}
				public Integer DOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String DOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String DOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String DOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String DOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "DOCUMENTO_PROFESIONAL";
				
				}

				
			    public String TDOCUMENTO_PROFESIONAL;

				public String getTDOCUMENTO_PROFESIONAL () {
					return this.TDOCUMENTO_PROFESIONAL;
				}

				public Boolean TDOCUMENTO_PROFESIONALIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_PROFESIONALIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_PROFESIONALLength(){
				    return 5;
				}
				public Integer TDOCUMENTO_PROFESIONALPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_PROFESIONALDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_PROFESIONALComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_PROFESIONALPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_PROFESIONALOriginalDbColumnName(){
				
					return "TDOCUMENTO_PROFESIONAL";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return 500;
				}
				public Integer ESPECIALIDADPrecision(){
				    return 0;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return 40;
				}
				public Integer TALLAPrecision(){
				    return 0;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "";
				
				}
				public String TALLAPattern(){
				
					return "";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public String UMEDIDA_TALLA;

				public String getUMEDIDA_TALLA () {
					return this.UMEDIDA_TALLA;
				}

				public Boolean UMEDIDA_TALLAIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_TALLAIsKey(){
				    return false;
				}
				public Integer UMEDIDA_TALLALength(){
				    return 20;
				}
				public Integer UMEDIDA_TALLAPrecision(){
				    return 0;
				}
				public String UMEDIDA_TALLADefault(){
				
					return null;
				
				}
				public String UMEDIDA_TALLAComment(){
				
				    return "";
				
				}
				public String UMEDIDA_TALLAPattern(){
				
					return "";
				
				}
				public String UMEDIDA_TALLAOriginalDbColumnName(){
				
					return "UMEDIDA_TALLA";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 31;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return 0;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 4;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public String CLASEGRD;

				public String getCLASEGRD () {
					return this.CLASEGRD;
				}

				public Boolean CLASEGRDIsNullable(){
				    return true;
				}
				public Boolean CLASEGRDIsKey(){
				    return false;
				}
				public Integer CLASEGRDLength(){
				    return 100;
				}
				public Integer CLASEGRDPrecision(){
				    return 0;
				}
				public String CLASEGRDDefault(){
				
					return null;
				
				}
				public String CLASEGRDComment(){
				
				    return "";
				
				}
				public String CLASEGRDPattern(){
				
					return "";
				
				}
				public String CLASEGRDOriginalDbColumnName(){
				
					return "CLASEGRD";
				
				}

				
			    public BigDecimal CLASEGRD_CODIGO;

				public BigDecimal getCLASEGRD_CODIGO () {
					return this.CLASEGRD_CODIGO;
				}

				public Boolean CLASEGRD_CODIGOIsNullable(){
				    return true;
				}
				public Boolean CLASEGRD_CODIGOIsKey(){
				    return false;
				}
				public Integer CLASEGRD_CODIGOLength(){
				    return 0;
				}
				public Integer CLASEGRD_CODIGOPrecision(){
				    return null;
				}
				public String CLASEGRD_CODIGODefault(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOComment(){
				
				    return "";
				
				}
				public String CLASEGRD_CODIGOPattern(){
				
					return "";
				
				}
				public String CLASEGRD_CODIGOOriginalDbColumnName(){
				
					return "CLASEGRD_CODIGO";
				
				}

				
			    public String PROCESOASISTENCIAL_ID;

				public String getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return 0;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return null;
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.FECHA_MUERTE = readDate(dis);
					
					this.HORA_MUERTE = readDate(dis);
					
					this.CAUSA = readString(dis);
					
					this.DIAGNOSTICO = readString(dis);
					
						this.PESO_VALOR = (BigDecimal) dis.readObject();
					
						this.SEXO = (BigDecimal) dis.readObject();
					
						this.CONTROL_PRENATAL = (BigDecimal) dis.readObject();
					
						this.EDAD_GESTACIONAL = (BigDecimal) dis.readObject();
					
					this.HORA_NACIMIENTO = readDate(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.CODPRESTADOR = readString(dis);
					
					this.TRIPS = readString(dis);
					
						this.NEONATOS_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
					this.PROCESOASISTENCIAL_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.FECHA_MUERTE = readDate(dis);
					
					this.HORA_MUERTE = readDate(dis);
					
					this.CAUSA = readString(dis);
					
					this.DIAGNOSTICO = readString(dis);
					
						this.PESO_VALOR = (BigDecimal) dis.readObject();
					
						this.SEXO = (BigDecimal) dis.readObject();
					
						this.CONTROL_PRENATAL = (BigDecimal) dis.readObject();
					
						this.EDAD_GESTACIONAL = (BigDecimal) dis.readObject();
					
					this.HORA_NACIMIENTO = readDate(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.CODPRESTADOR = readString(dis);
					
					this.TRIPS = readString(dis);
					
						this.NEONATOS_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.DOCUMENTO_PROFESIONAL = readString(dis);
					
					this.TDOCUMENTO_PROFESIONAL = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESPECIALIDAD = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.UMEDIDA_TALLA = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
					this.GRADO_CODIGO = readString(dis);
					
					this.GRADO = readString(dis);
					
					this.CLASEGRD = readString(dis);
					
						this.CLASEGRD_CODIGO = (BigDecimal) dis.readObject();
					
					this.PROCESOASISTENCIAL_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA_MUERTE,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_MUERTE,dos);
					
					// String
				
						writeString(this.CAUSA,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PESO_VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SEXO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTROL_PRENATAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_GESTACIONAL);
					
					// java.util.Date
				
						writeDate(this.HORA_NACIMIENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NEONATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASEGRD_CODIGO);
					
					// String
				
						writeString(this.PROCESOASISTENCIAL_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA_MUERTE,dos);
					
					// java.util.Date
				
						writeDate(this.HORA_MUERTE,dos);
					
					// String
				
						writeString(this.CAUSA,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PESO_VALOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SEXO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTROL_PRENATAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_GESTACIONAL);
					
					// java.util.Date
				
						writeDate(this.HORA_NACIMIENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NEONATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.DOCUMENTO_PROFESIONAL,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_PROFESIONAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.UMEDIDA_TALLA,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// String
				
						writeString(this.CLASEGRD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASEGRD_CODIGO);
					
					// String
				
						writeString(this.PROCESOASISTENCIAL_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_MUERTE="+String.valueOf(FECHA_MUERTE));
		sb.append(",HORA_MUERTE="+String.valueOf(HORA_MUERTE));
		sb.append(",CAUSA="+CAUSA);
		sb.append(",DIAGNOSTICO="+DIAGNOSTICO);
		sb.append(",PESO_VALOR="+String.valueOf(PESO_VALOR));
		sb.append(",SEXO="+String.valueOf(SEXO));
		sb.append(",CONTROL_PRENATAL="+String.valueOf(CONTROL_PRENATAL));
		sb.append(",EDAD_GESTACIONAL="+String.valueOf(EDAD_GESTACIONAL));
		sb.append(",HORA_NACIMIENTO="+String.valueOf(HORA_NACIMIENTO));
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",TRIPS="+TRIPS);
		sb.append(",NEONATOS_ID="+String.valueOf(NEONATOS_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",DOCUMENTO_PROFESIONAL="+DOCUMENTO_PROFESIONAL);
		sb.append(",TDOCUMENTO_PROFESIONAL="+TDOCUMENTO_PROFESIONAL);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",TALLA="+TALLA);
		sb.append(",UMEDIDA_TALLA="+UMEDIDA_TALLA);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",GRADO="+GRADO);
		sb.append(",CLASEGRD="+CLASEGRD);
		sb.append(",CLASEGRD_CODIGO="+String.valueOf(CLASEGRD_CODIGO));
		sb.append(",PROCESOASISTENCIAL_ID="+PROCESOASISTENCIAL_ID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();
insert_rnStruct insert_rn = new insert_rnStruct();





	
	/**
	 * [tOracleOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_13", false);
		start_Hash.put("tOracleOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_rn");
					}
				
		int tos_count_tOracleOutput_13 = 0;
		






    
    int nb_line_tOracleOutput_13 = 0;
    int nb_line_update_tOracleOutput_13 = 0;
    int nb_line_inserted_tOracleOutput_13 = 0;
    int nb_line_deleted_tOracleOutput_13 = 0;
    int nb_line_rejected_tOracleOutput_13 = 0;

    int tmp_batchUpdateCount_tOracleOutput_13 = 0;

    int deletedCount_tOracleOutput_13=0;
    int updatedCount_tOracleOutput_13=0;
    int insertedCount_tOracleOutput_13=0;
    int rowsToCommitCount_tOracleOutput_13=0;
    int rejectedCount_tOracleOutput_13=0;

    boolean whetherReject_tOracleOutput_13 = false;

    java.sql.Connection conn_tOracleOutput_13 = null;

    //optional table
    String dbschema_tOracleOutput_13 = null;
    String tableName_tOracleOutput_13 = null;
                    String driverClass_tOracleOutput_13 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_13);
                String url_tOracleOutput_13 = null;
                    url_tOracleOutput_13 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_13 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_13 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_13 = decryptedPassword_tOracleOutput_13;
                dbschema_tOracleOutput_13 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_13 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_13.put("user",dbUser_tOracleOutput_13);
                    atnParamsPrope_tOracleOutput_13.put("password",dbPwd_tOracleOutput_13);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_13.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_13 = java.sql.DriverManager.getConnection(url_tOracleOutput_13, atnParamsPrope_tOracleOutput_13);
        resourceMap.put("conn_tOracleOutput_13", conn_tOracleOutput_13);
            conn_tOracleOutput_13.setAutoCommit(false);
            int commitEvery_tOracleOutput_13 = 1000;
            int commitCounter_tOracleOutput_13 = 0;
        int batchSize_tOracleOutput_13 = 1000;
        int batchSizeCounter_tOracleOutput_13=0;
        int count_tOracleOutput_13=0;

        if(dbschema_tOracleOutput_13 == null || dbschema_tOracleOutput_13.trim().length() == 0) {
            tableName_tOracleOutput_13 = ("BRIPS_RECIENNACIDOS");
        } else {
            tableName_tOracleOutput_13 = dbschema_tOracleOutput_13 + "." + ("BRIPS_RECIENNACIDOS");
        }
                String insert_tOracleOutput_13 = "INSERT INTO " + tableName_tOracleOutput_13 + " (NUMERO_FACTURA,HORA_MUERTE,FECHA_MUERTE,CAUSA,DIAGNOSTICO,PESO,SEXO,CONTROL_PRENATAL,EDAD_GESTACIONAL,HORA_NACIMIENTO,FECHA_NACIMIENTO,DOCUMENTO,TDOCUMENTO,CODPRESTADOR,TRIPS,PERIODO,NEONATOS_ID,PERSONAS_ID,UORG_ID,FUERZA_ID,TDOCUMENTO_PROFESIONAL,DOCUMENTO_PROFESIONAL,ESPECIALIDAD,TALLA,UMEDIDA_TALLA,TIPO_GENERACION,TIPO_USUARIO,EDAD,UMEDIDA_EDAD) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_13 = conn_tOracleOutput_13.prepareStatement(insert_tOracleOutput_13);
                        resourceMap.put("pstmt_tOracleOutput_13", pstmt_tOracleOutput_13);





 



/**
 * [tOracleOutput_13 begin ] stop
 */



	
	/**
	 * [tMap_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_18", false);
		start_Hash.put("tMap_18", System.currentTimeMillis());
		
	
	currentComponent="tMap_18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_18 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_18__Struct  {
}
Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_rnStruct insert_rn_tmp = new insert_rnStruct();
// ###############################

        
        



        









 



/**
 * [tMap_18 begin ] stop
 */



	
	/**
	 * [tOracleInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_11", false);
		start_Hash.put("tOracleInput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_11";
	
	
		int tos_count_tOracleInput_11 = 0;
		
	


	
		    int nb_line_tOracleInput_11 = 0;
		    java.sql.Connection conn_tOracleInput_11 = null;
				conn_tOracleInput_11 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
				
                boolean isTimeZoneNull_tOracleInput_11 = false;
				boolean isConnectionWrapped_tOracleInput_11 = !(conn_tOracleInput_11 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_11.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_11 = null;
                if (isConnectionWrapped_tOracleInput_11) {
					unwrappedOraConn_tOracleInput_11 = conn_tOracleInput_11.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_11 != null) {
                        isTimeZoneNull_tOracleInput_11 = (unwrappedOraConn_tOracleInput_11.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_11 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_11).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_11) {
					java.sql.Statement stmtGetTZ_tOracleInput_11 = conn_tOracleInput_11.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_11 = stmtGetTZ_tOracleInput_11.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_11 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_11.next()) {
						sessionTimezone_tOracleInput_11 = rsGetTZ_tOracleInput_11.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_11 && unwrappedOraConn_tOracleInput_11 != null) {
                        unwrappedOraConn_tOracleInput_11.setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_11).setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_11 = conn_tOracleInput_11.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_11.setFetchSize(1000);


		    String dbquery_tOracleInput_11 = "SELECT\n    CASE\n        WHEN PROC.FINICIAL+1>PERN.FECHA_DEFUNCION THEN NVL(TO_DATE(TO_CHAR (PERN.FECHA_DEFUNCION, 'DD"
+"/MM/YYYY'),'DD/MM/YYYY'),'')\n    END FECHA_MUERTE,\n    CASE\n        WHEN PROC.FINICIAL+1>PERN.FECHA_DEFUNCION THEN NV"
+"L(TO_DATE(TO_CHAR (PERN.FECHA_DEFUNCION, 'HH24:MI'),'HH24:MI'),'')\n    END HORA_MUERTE,\n    CASE\n        WHEN PROC.FI"
+"NICIAL+1>PERN.FECHA_DEFUNCION THEN DIAGN.CODIGO\n    END CAUSA,\n    DIAGN.CODIGO AS DIAGNOSTICO,\n    PESO.VALOR AS PES"
+"O_VALOR,\n    CASE SEX.SIGLA  \n        WHEN 'F' THEN TO_NUMBER('2')  \n        WHEN 'M' THEN TO_NUMBER('1')  \n    END "
+" AS SEXO,\n    CASE\n        WHEN PMA.PERSONAS_ID IS NOT NULL THEN 1\n        ELSE 2\n    END CONTROL_PRENATAL,\n    ADM"
+"PARTO.EDAD_GESTACIONAL AS EDAD_GESTACIONAL,\n    TO_DATE(TO_CHAR (PERN.FECHA_NACIMIENTO, 'HH24:MI'),'HH24:MI') AS HORA_N"
+"ACIMIENTO,\n    TO_DATE(TO_CHAR (PERN.FECHA_NACIMIENTO, 'DD/MM/YYYY'),'DD/MM/YYYY') AS FECHA_NACIMIENTO,\n    PERM.DOCUM"
+"ENTO AS DOCUMENTO,\n    TDOC.SIGLA AS TDOCUMENTO,\n    UORG.CODIGO AS CODPRESTADOR,\n    'Interna' AS TRIPS,\n    NEO.ID"
+" AS NEONATOS_ID,\n    NEO.MADRE AS PERSONAS_ID,\n    UORG.ID AS UORG_ID,\n    GF.ID AS FUERZA_ID,\n    GPROF.DOCUMENTO A"
+"S DOCUMENTO_PROFESIONAL,\n    TDOCPROF.SIGLA AS TDOCUMENTO_PROFESIONAL,\n    ADMOBSTRE.ESPECIALIDADES_ID,\n    GES.NOMBR"
+"E AS ESPECIALIDAD,\n    TO_CHAR(TALLA.VALOR) AS TALLA,\n    TALLA.UMEDIDA AS UMEDIDA_TALLA, \n    CASE \n        WHEN PL"
+"ANAFI.CODIGO = '2' THEN 'No cotizante'\n        WHEN PLANAFI.CODIGO IN ('1','3','4','5','6','7','8','9','10') AND ATC.SI"
+"GLA='ACT' THEN 'Cotizante Activo' \n        WHEN PLANAFI.CODIGO IN ('1','3','4','5','6','7','8','9','10') AND ATC.SIGLA "
+"IN ('RET','PEN') THEN 'Cotizante Pensionado / Retirado' \n        WHEN PLANAFI.CODIGO IN ('11','12','13','14','15','16',"
+"'17','18') THEN 'Beneficiario' \n        WHEN PLANAFI.CODIGO IN ('1','3','4','5','6','7','8','9','10') AND ATC.SIGLA IN "
+"('PAR','NOC') THEN 'Otro cotizante'\n    END AS TIPO_USUARIO,\n    TRUNC(MONTHS_BETWEEN(ADMOBSTRE.FINICIAL, PERM.FECHA_N"
+"ACIMIENTO)/12) AS EDAD,\n    'Años' AS UMEDIDA_EDAD,\n    GRA.CODIGO AS GRADO_CODIGO,\n    GRA.NOMBRE AS GRADO,\n    CLA"
+"GR.DESCRIPCION AS CLASEGRD, \n    CLAGR.CODIGO AS CLASEGRD_CODIGO,\n    '' AS PROCESOASISTENCIAL_ID\nFROM HCL_NEONATOS N"
+"EO\n    INNER JOIN HCL_PROCESOSASISTENCIALES PROC ON PROC.ID = NEO.PROCESOSASISTENCIALES_ID AND PROC.ESTREGISTRO_ID = 1"
+"\n    INNER JOIN GEN_USUARIOS GU ON GU.ID=PROC.USUARIOS_ID\n    INNER JOIN GEN_PERSONAS GPROF ON GPROF.ID=GU.PERSONAS_ID"
+"\n    INNER JOIN GEN_TDOCUMENTOS TDOCPROF ON TDOCPROF.ID = GPROF.TDOCUMENTOS_ID AND TDOCPROF.ESTREGISTRO_ID = 1\n    INNE"
+"R JOIN ADM_ESPTRATANTES ESPT ON ESPT.ID = PROC.ESPTRATANTES_ID AND ESPT.ESTREGISTRO_ID = 1\n    INNER JOIN ADM_SERVTRATA"
+"NTES SERV ON SERV.ID = ESPT.SERVTRATANTES_ID AND SERV.ESTREGISTRO_ID = 1\n    INNER JOIN ADM_ADMISIONES ADM ON ADM.ID = "
+"SERV.ADMISIONES_ID AND ADM.ESTREGISTRO_ID = 1\n    INNER JOIN GEN_UORG UORG ON UORG.ID = PROC.UORG_ID AND UORG.ESTREGIST"
+"RO_ID = 1\n    INNER JOIN GEN_FUERZAS GF ON GF.ID=UORG.FUERZA_ID AND GF.ESTREGISTRO_ID=1\n    INNER JOIN GEN_PERSONAS PE"
+"RM ON PERM.ID = NEO.MADRE AND PERM.ESTREGISTRO_ID = 1\n    INNER JOIN GEN_TDOCUMENTOS TDOC ON TDOC.ID = PERM.TDOCUMENTOS"
+"_ID AND TDOC.ESTREGISTRO_ID = 1\n    INNER JOIN GEN_PERSONAS PERN ON PERN.ID = NEO.NEONATO AND PERN.ESTREGISTRO_ID = 1\n"
+"    LEFT JOIN ( SELECT AA.ID,HP.ESPTRATANTES_ID,HPARTO.EDAD_GESTACIONAL\n                FROM HCL_PARTOGRAMA HPARTO\n   "
+"             INNER JOIN HCL_PROCESOSASISTENCIALES HP ON HP.ID=HPARTO.PROCESOSASISTENCIALES_ID AND HP.ESTREGISTRO_ID=1\n "
+"               INNER JOIN ADM_ESPTRATANTES AET ON AET.ID=HP.ESPTRATANTES_ID AND AET.ESTREGISTRO_ID=1\n                IN"
+"NER JOIN ADM_SERVTRATANTES AST ON AST.ID=AET.SERVTRATANTES_ID AND AST.ESTREGISTRO_ID=1\n                INNER JOIN ADM_A"
+"DMISIONES AA ON AA.ID=AST.ADMISIONES_ID AND AA.ESTREGISTRO_ID=1) ADMPARTO ON ADMPARTO.ID=ADM.ID\n    LEFT JOIN PMP_MATER"
+"NAS PMA ON PMA.PERSONAS_ID=NEO.MADRE\n    INNER JOIN GEN_SEXOS SEX ON SEX.ID = PERN.SEXO_ID AND SEX.ESTREGISTRO_ID = 1  "
+"   \n    LEFT JOIN ( SELECT AA.ID, HP.FINICIAL, AET.ESPECIALIDADES_ID\n                FROM HCL_EVENTOBSTETRICO HOBSTRE"
+"\n                INNER JOIN HCL_PROCESOSASISTENCIALES HP ON HP.ID=HOBSTRE.PROCESOSASISTENCIALES_ID AND HP.ESTREGISTRO_ID"
+"=1\n                INNER JOIN ADM_ESPTRATANTES AET ON AET.ID=HP.ESPTRATANTES_ID AND AET.ESTREGISTRO_ID=1\n             "
+"   INNER JOIN ADM_SERVTRATANTES AST ON AST.ID=AET.SERVTRATANTES_ID AND AST.ESTREGISTRO_ID=1\n                INNER JOIN "
+"ADM_ADMISIONES AA ON AA.ID=AST.ADMISIONES_ID AND AA.ESTREGISTRO_ID=1) ADMOBSTRE ON ADMOBSTRE.ID=ADM.ID\n    LEFT JOIN GE"
+"N_ESPECIALIDADES GES ON GES.ID = ADMOBSTRE.ESPECIALIDADES_ID                \n    LEFT JOIN (SELECT\n                MSI"
+"G.PERSONAS_ID,\n                MIN(HSV.VALOR) VALOR,\n                TSIG.UMEDIDA\n                FROM  GEN_MSIGNOSVI"
+"TALES  MSIG\n                INNER JOIN  GEN_HSIGNOSVITALES  HSV ON MSIG.ID=HSV.MSIGNOSVITALES_ID AND MSIG.ESTREGISTRO_I"
+"D = 1\n                INNER JOIN (SELECT * FROM GEN_TSIGNOSVITALES TSIG1 WHERE TSIG1.SIGLA IN ('PESO') ) TSIG ON TSIG.I"
+"D = HSV.TSIGNOSVITALES_ID AND HSV.ESTREGISTRO_ID =1\n                GROUP BY MSIG.PERSONAS_ID,TSIG.UMEDIDA) PESO ON PES"
+"O.PERSONAS_ID=NEO.NEONATO    \n    LEFT JOIN ( SELECT\n                MSIG.PERSONAS_ID,\n                MIN(HSV.VALOR)"
+" VALOR,\n                TSIG.UMEDIDA\n                FROM  GEN_MSIGNOSVITALES  MSIG\n                INNER JOIN  GEN_H"
+"SIGNOSVITALES  HSV ON MSIG.ID=HSV.MSIGNOSVITALES_ID AND MSIG.ESTREGISTRO_ID = 1\n                INNER JOIN (SELECT * FR"
+"OM GEN_TSIGNOSVITALES TSIG1 WHERE TSIG1.SIGLA IN ('E') ) TSIG ON TSIG.ID = HSV.TSIGNOSVITALES_ID AND HSV.ESTREGISTRO_ID "
+"=1\n                GROUP BY MSIG.PERSONAS_ID,TSIG.UMEDIDA) TALLA ON TALLA.PERSONAS_ID=NEO.MADRE\n    LEFT JOIN ( SELECT"
+" GP.ID,MIN(DIAGN.ID) MINIMO,CIEN.CODIGO\n                FROM GEN_PERSONAS GP\n                INNER JOIN HCL_PROCESOSAS"
+"ISTENCIALES HP ON HP.PERSONAS_ID=GP.ID\n                INNER JOIN HCL_DIAGNOSTICOS DIAGN ON DIAGN.PROCESOSASISTENCIALES"
+"_ID = HP.ID\n                LEFT JOIN GEN_CIE10 CIEN ON CIEN.ID = DIAGN.CIE10_ID\n                GROUP BY GP.ID,CIEN.C"
+"ODIGO ) DIAGN ON DIAGN.ID=NEO.NEONATO          \n    LEFT JOIN GEN_AFILIADOS GA ON GA.PERSONAS_ID = NEO.MADRE AND GA.EST"
+"REGISTRO_ID =1\n    LEFT JOIN GEN_AFILIADOS_ENTAPORTANTE AEA ON ((AEA.AFILIADOS_ID = GA.ID AND GA.PADRE_ID IS NULL) OR A"
+"EA.AFILIADOS_ID = GA.PADRE_ID) AND AEA.PRINCIPAL = 1 AND AEA.ESTREGISTRO_ID =1 \n    LEFT JOIN AFI_TVINCULACIONES AT ON "
+"AT.ID=AEA.TVINCULACIONES_ID\n    LEFT JOIN AFI_TCOTIZACION ATC ON ATC.ID=AT.TCOTIZACION_ID\n    LEFT JOIN AFI_PLANAFILIA"
+"CIONES PLANAFI ON PLANAFI.ID = GA.PLANAFILIACIONES_ID AND PLANAFI.ESTREGISTRO_ID=1\n    LEFT JOIN GEN_GRDMILITARES GRA O"
+"N GRA.ID = AEA.GRDMILITARES_ID\n    LEFT JOIN GEN_CLASEGRD CLAGR ON CLAGR.ID = GRA.CLASEGRD_ID\nWHERE NEO.ESTREGISTRO_ID"
+"=1";
		    

		    globalMap.put("tOracleInput_11_QUERY",dbquery_tOracleInput_11);

		    java.sql.ResultSet rs_tOracleInput_11 = null;

		    try {
		    	rs_tOracleInput_11 = stmt_tOracleInput_11.executeQuery(dbquery_tOracleInput_11);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_11 = rs_tOracleInput_11.getMetaData();
		    	int colQtyInRs_tOracleInput_11 = rsmd_tOracleInput_11.getColumnCount();

		    String tmpContent_tOracleInput_11 = null;
		    
		    
		    while (rs_tOracleInput_11.next()) {
		        nb_line_tOracleInput_11++;
		        
							if(colQtyInRs_tOracleInput_11 < 1) {
								row10.FECHA_MUERTE = null;
							} else {
										
			row10.FECHA_MUERTE = routines.system.JDBCUtil.getDate(rs_tOracleInput_11, 1);
		                    }
							if(colQtyInRs_tOracleInput_11 < 2) {
								row10.HORA_MUERTE = null;
							} else {
										
			row10.HORA_MUERTE = routines.system.JDBCUtil.getDate(rs_tOracleInput_11, 2);
		                    }
							if(colQtyInRs_tOracleInput_11 < 3) {
								row10.CAUSA = null;
							} else {
	                         		
        	row10.CAUSA = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 4) {
								row10.DIAGNOSTICO = null;
							} else {
	                         		
        	row10.DIAGNOSTICO = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 5) {
								row10.PESO_VALOR = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(5) != null) {
						row10.PESO_VALOR = rs_tOracleInput_11.getBigDecimal(5);
					} else {
				
						row10.PESO_VALOR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 6) {
								row10.SEXO = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(6) != null) {
						row10.SEXO = rs_tOracleInput_11.getBigDecimal(6);
					} else {
				
						row10.SEXO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 7) {
								row10.CONTROL_PRENATAL = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(7) != null) {
						row10.CONTROL_PRENATAL = rs_tOracleInput_11.getBigDecimal(7);
					} else {
				
						row10.CONTROL_PRENATAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 8) {
								row10.EDAD_GESTACIONAL = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(8) != null) {
						row10.EDAD_GESTACIONAL = rs_tOracleInput_11.getBigDecimal(8);
					} else {
				
						row10.EDAD_GESTACIONAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 9) {
								row10.HORA_NACIMIENTO = null;
							} else {
										
			row10.HORA_NACIMIENTO = routines.system.JDBCUtil.getDate(rs_tOracleInput_11, 9);
		                    }
							if(colQtyInRs_tOracleInput_11 < 10) {
								row10.FECHA_NACIMIENTO = null;
							} else {
										
			row10.FECHA_NACIMIENTO = routines.system.JDBCUtil.getDate(rs_tOracleInput_11, 10);
		                    }
							if(colQtyInRs_tOracleInput_11 < 11) {
								row10.DOCUMENTO = null;
							} else {
	                         		
        	row10.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 12) {
								row10.TDOCUMENTO = null;
							} else {
	                         		
        	row10.TDOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 13) {
								row10.CODPRESTADOR = null;
							} else {
	                         		
        	row10.CODPRESTADOR = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 14) {
								row10.TRIPS = null;
							} else {
	                         		
        	row10.TRIPS = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 15) {
								row10.NEONATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(15) != null) {
						row10.NEONATOS_ID = rs_tOracleInput_11.getBigDecimal(15);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 16) {
								row10.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(16) != null) {
						row10.PERSONAS_ID = rs_tOracleInput_11.getBigDecimal(16);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 17) {
								row10.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(17) != null) {
						row10.UORG_ID = rs_tOracleInput_11.getBigDecimal(17);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 18) {
								row10.FUERZA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(18) != null) {
						row10.FUERZA_ID = rs_tOracleInput_11.getBigDecimal(18);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 19) {
								row10.DOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row10.DOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 19, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 20) {
								row10.TDOCUMENTO_PROFESIONAL = null;
							} else {
	                         		
        	row10.TDOCUMENTO_PROFESIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 20, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 21) {
								row10.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(21) != null) {
						row10.ESPECIALIDADES_ID = rs_tOracleInput_11.getBigDecimal(21);
					} else {
				
						row10.ESPECIALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 22) {
								row10.ESPECIALIDAD = null;
							} else {
	                         		
        	row10.ESPECIALIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 22, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 23) {
								row10.TALLA = null;
							} else {
	                         		
        	row10.TALLA = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 23, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 24) {
								row10.UMEDIDA_TALLA = null;
							} else {
	                         		
        	row10.UMEDIDA_TALLA = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 24, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 25) {
								row10.TIPO_USUARIO = null;
							} else {
	                         		
        	row10.TIPO_USUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 25, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 26) {
								row10.EDAD = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(26) != null) {
						row10.EDAD = rs_tOracleInput_11.getBigDecimal(26);
					} else {
				
						row10.EDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 27) {
								row10.UMEDIDA_EDAD = null;
							} else {
	                         		
        	row10.UMEDIDA_EDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 27, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 28) {
								row10.GRADO_CODIGO = null;
							} else {
	                         		
        	row10.GRADO_CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 28, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 29) {
								row10.GRADO = null;
							} else {
	                         		
        	row10.GRADO = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 29, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 30) {
								row10.CLASEGRD = null;
							} else {
	                         		
        	row10.CLASEGRD = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 30, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 31) {
								row10.CLASEGRD_CODIGO = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(31) != null) {
						row10.CLASEGRD_CODIGO = rs_tOracleInput_11.getBigDecimal(31);
					} else {
				
						row10.CLASEGRD_CODIGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 32) {
								row10.PROCESOASISTENCIAL_ID = null;
							} else {
	                         		
        	row10.PROCESOASISTENCIAL_ID = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 32, false);
		                    }
					




 



/**
 * [tOracleInput_11 begin ] stop
 */
	
	/**
	 * [tOracleInput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 


	tos_count_tOracleInput_11++;

/**
 * [tOracleInput_11 main ] stop
 */
	
	/**
	 * [tOracleInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tMap_18 main ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_18 = false;
		boolean mainRowRejected_tMap_18 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
        // ###############################
        // # Output tables

insert_rn = null;


// # Output table : 'insert_rn'
insert_rn_tmp.NUMERO_FACTURA = null;
insert_rn_tmp.HORA_MUERTE = row10.HORA_MUERTE ;
insert_rn_tmp.FECHA_MUERTE = row10.FECHA_MUERTE ;
insert_rn_tmp.CAUSA = row10.CAUSA ;
insert_rn_tmp.DIAGNOSTICO = row10.DIAGNOSTICO ;
insert_rn_tmp.PESO = row10.PESO_VALOR ;
insert_rn_tmp.SEXO = row10.SEXO ;
insert_rn_tmp.CONTROL_PRENATAL = row10.CONTROL_PRENATAL ;
insert_rn_tmp.EDAD_GESTACIONAL = row10.EDAD_GESTACIONAL ;
insert_rn_tmp.HORA_NACIMIENTO = row10.HORA_NACIMIENTO ;
insert_rn_tmp.FECHA_NACIMIENTO = row10.FECHA_NACIMIENTO ;
insert_rn_tmp.DOCUMENTO = row10.DOCUMENTO ;
insert_rn_tmp.TDOCUMENTO = row10.TDOCUMENTO;
insert_rn_tmp.CODPRESTADOR = row10.CODPRESTADOR ;
insert_rn_tmp.TRIPS = "Interna";
insert_rn_tmp.PERIODO = TalendDate.formatDate("yyyy-MM",row10.FECHA_NACIMIENTO) ;
insert_rn_tmp.NEONATOS_ID = row10.NEONATOS_ID ;
insert_rn_tmp.PERSONAS_ID = row10.PERSONAS_ID ;
insert_rn_tmp.UORG_ID = row10.UORG_ID ;
insert_rn_tmp.FUERZA_ID = row10.FUERZA_ID ;
insert_rn_tmp.TDOCUMENTO_PROFESIONAL = row10.TDOCUMENTO_PROFESIONAL ;
insert_rn_tmp.DOCUMENTO_PROFESIONAL = row10.DOCUMENTO_PROFESIONAL ;
insert_rn_tmp.ESPECIALIDAD = row10.ESPECIALIDAD ;
insert_rn_tmp.TALLA = row10.TALLA ;
insert_rn_tmp.UMEDIDA_TALLA = row10.UMEDIDA_TALLA ;
insert_rn_tmp.TIPO_GENERACION = "Automatico" ;
insert_rn_tmp.TIPO_USUARIO = row10.TIPO_USUARIO ;
insert_rn_tmp.EDAD = row10.EDAD ;
insert_rn_tmp.UMEDIDA_EDAD = row10.UMEDIDA_EDAD ;
insert_rn = insert_rn_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_18 = false;










 


	tos_count_tMap_18++;

/**
 * [tMap_18 main ] stop
 */
	
	/**
	 * [tMap_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	

 



/**
 * [tMap_18 process_data_begin ] stop
 */
// Start of branch "insert_rn"
if(insert_rn != null) { 



	
	/**
	 * [tOracleOutput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_rn"
						
						);
					}
					



        whetherReject_tOracleOutput_13 = false;
                        if(insert_rn.NUMERO_FACTURA == null) {
pstmt_tOracleOutput_13.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(1, insert_rn.NUMERO_FACTURA);
}

                        if(insert_rn.HORA_MUERTE != null) {
pstmt_tOracleOutput_13.setObject(2, new java.sql.Timestamp(insert_rn.HORA_MUERTE.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_13.setNull(2, java.sql.Types.DATE);
}

                        if(insert_rn.FECHA_MUERTE != null) {
pstmt_tOracleOutput_13.setObject(3, new java.sql.Timestamp(insert_rn.FECHA_MUERTE.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_13.setNull(3, java.sql.Types.DATE);
}

                        if(insert_rn.CAUSA == null) {
pstmt_tOracleOutput_13.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(4, insert_rn.CAUSA);
}

                        if(insert_rn.DIAGNOSTICO == null) {
pstmt_tOracleOutput_13.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(5, insert_rn.DIAGNOSTICO);
}

                        pstmt_tOracleOutput_13.setBigDecimal(6, insert_rn.PESO);

                        pstmt_tOracleOutput_13.setBigDecimal(7, insert_rn.SEXO);

                        pstmt_tOracleOutput_13.setBigDecimal(8, insert_rn.CONTROL_PRENATAL);

                        pstmt_tOracleOutput_13.setBigDecimal(9, insert_rn.EDAD_GESTACIONAL);

                        if(insert_rn.HORA_NACIMIENTO != null) {
pstmt_tOracleOutput_13.setObject(10, new java.sql.Timestamp(insert_rn.HORA_NACIMIENTO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_13.setNull(10, java.sql.Types.DATE);
}

                        if(insert_rn.FECHA_NACIMIENTO != null) {
pstmt_tOracleOutput_13.setObject(11, new java.sql.Timestamp(insert_rn.FECHA_NACIMIENTO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_13.setNull(11, java.sql.Types.DATE);
}

                        if(insert_rn.DOCUMENTO == null) {
pstmt_tOracleOutput_13.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(12, insert_rn.DOCUMENTO);
}

                        if(insert_rn.TDOCUMENTO == null) {
pstmt_tOracleOutput_13.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(13, insert_rn.TDOCUMENTO);
}

                        if(insert_rn.CODPRESTADOR == null) {
pstmt_tOracleOutput_13.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(14, insert_rn.CODPRESTADOR);
}

                        if(insert_rn.TRIPS == null) {
pstmt_tOracleOutput_13.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(15, insert_rn.TRIPS);
}

                        if(insert_rn.PERIODO == null) {
pstmt_tOracleOutput_13.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(16, insert_rn.PERIODO);
}

                        pstmt_tOracleOutput_13.setBigDecimal(17, insert_rn.NEONATOS_ID);

                        pstmt_tOracleOutput_13.setBigDecimal(18, insert_rn.PERSONAS_ID);

                        pstmt_tOracleOutput_13.setBigDecimal(19, insert_rn.UORG_ID);

                        pstmt_tOracleOutput_13.setBigDecimal(20, insert_rn.FUERZA_ID);

                        if(insert_rn.TDOCUMENTO_PROFESIONAL == null) {
pstmt_tOracleOutput_13.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(21, insert_rn.TDOCUMENTO_PROFESIONAL);
}

                        if(insert_rn.DOCUMENTO_PROFESIONAL == null) {
pstmt_tOracleOutput_13.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(22, insert_rn.DOCUMENTO_PROFESIONAL);
}

                        if(insert_rn.ESPECIALIDAD == null) {
pstmt_tOracleOutput_13.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(23, insert_rn.ESPECIALIDAD);
}

                        if(insert_rn.TALLA == null) {
pstmt_tOracleOutput_13.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(24, insert_rn.TALLA);
}

                        if(insert_rn.UMEDIDA_TALLA == null) {
pstmt_tOracleOutput_13.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(25, insert_rn.UMEDIDA_TALLA);
}

                        if(insert_rn.TIPO_GENERACION == null) {
pstmt_tOracleOutput_13.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(26, insert_rn.TIPO_GENERACION);
}

                        if(insert_rn.TIPO_USUARIO == null) {
pstmt_tOracleOutput_13.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(27, insert_rn.TIPO_USUARIO);
}

                        pstmt_tOracleOutput_13.setBigDecimal(28, insert_rn.EDAD);

                        if(insert_rn.UMEDIDA_EDAD == null) {
pstmt_tOracleOutput_13.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(29, insert_rn.UMEDIDA_EDAD);
}

                pstmt_tOracleOutput_13.addBatch();
                nb_line_tOracleOutput_13++;
                batchSizeCounter_tOracleOutput_13++;
            if (batchSize_tOracleOutput_13 > 0 &&  batchSize_tOracleOutput_13 <= batchSizeCounter_tOracleOutput_13) {
                try {
                    pstmt_tOracleOutput_13.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_13){
globalMap.put("tOracleOutput_13_ERROR_MESSAGE",e_tOracleOutput_13.getMessage());
			        java.sql.SQLException ne_tOracleOutput_13 = e_tOracleOutput_13.getNextException(),sqle_tOracleOutput_13=null;
			    	String errormessage_tOracleOutput_13;
					if (ne_tOracleOutput_13 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_13 = new java.sql.SQLException(e_tOracleOutput_13.getMessage() + "\ncaused by: " + ne_tOracleOutput_13.getMessage(), ne_tOracleOutput_13.getSQLState(), ne_tOracleOutput_13.getErrorCode(), ne_tOracleOutput_13);
						errormessage_tOracleOutput_13 = sqle_tOracleOutput_13.getMessage();
					}else{
						errormessage_tOracleOutput_13 = e_tOracleOutput_13.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_13);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_13 = pstmt_tOracleOutput_13.getUpdateCount();
                    insertedCount_tOracleOutput_13
                += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                rowsToCommitCount_tOracleOutput_13 += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                batchSizeCounter_tOracleOutput_13 = 0;
            }
                commitCounter_tOracleOutput_13++;
                if(commitEvery_tOracleOutput_13 <= commitCounter_tOracleOutput_13) {
                    if(batchSizeCounter_tOracleOutput_13 > 0) {
                        try {
                            pstmt_tOracleOutput_13.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_13){
globalMap.put("tOracleOutput_13_ERROR_MESSAGE",e_tOracleOutput_13.getMessage());
					        java.sql.SQLException ne_tOracleOutput_13 = e_tOracleOutput_13.getNextException(),sqle_tOracleOutput_13=null;
					    	String errormessage_tOracleOutput_13;
							if (ne_tOracleOutput_13 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_13 = new java.sql.SQLException(e_tOracleOutput_13.getMessage() + "\ncaused by: " + ne_tOracleOutput_13.getMessage(), ne_tOracleOutput_13.getSQLState(), ne_tOracleOutput_13.getErrorCode(), ne_tOracleOutput_13);
								errormessage_tOracleOutput_13 = sqle_tOracleOutput_13.getMessage();
							}else{
								errormessage_tOracleOutput_13 = e_tOracleOutput_13.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_13);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_13 = pstmt_tOracleOutput_13.getUpdateCount();
                            insertedCount_tOracleOutput_13
                        += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                        rowsToCommitCount_tOracleOutput_13 += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_13 != 0){
                    	
                    }
                    conn_tOracleOutput_13.commit();
                    if(rowsToCommitCount_tOracleOutput_13 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_13 = 0;
                    }
                    commitCounter_tOracleOutput_13=0;
                    	batchSizeCounter_tOracleOutput_13=0;
                }

 


	tos_count_tOracleOutput_13++;

/**
 * [tOracleOutput_13 main ] stop
 */
	
	/**
	 * [tOracleOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	

 



/**
 * [tOracleOutput_13 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	

 



/**
 * [tOracleOutput_13 process_data_end ] stop
 */

} // End of branch "insert_rn"




	
	/**
	 * [tMap_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	

 



/**
 * [tMap_18 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

}
}finally{
	if (rs_tOracleInput_11 != null) {
		rs_tOracleInput_11.close();
	}
	if (stmt_tOracleInput_11 != null) {
		stmt_tOracleInput_11.close();
	}
}

globalMap.put("tOracleInput_11_NB_LINE",nb_line_tOracleInput_11);
 

ok_Hash.put("tOracleInput_11", true);
end_Hash.put("tOracleInput_11", System.currentTimeMillis());




/**
 * [tOracleInput_11 end ] stop
 */

	
	/**
	 * [tMap_18 end ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_18", true);
end_Hash.put("tMap_18", System.currentTimeMillis());




/**
 * [tMap_18 end ] stop
 */

	
	/**
	 * [tOracleOutput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_13 > 0) {
            try {
            	if (pstmt_tOracleOutput_13 != null) {
					
					pstmt_tOracleOutput_13.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_13){
globalMap.put("tOracleOutput_13_ERROR_MESSAGE",e_tOracleOutput_13.getMessage());
		        java.sql.SQLException ne_tOracleOutput_13 = e_tOracleOutput_13.getNextException(),sqle_tOracleOutput_13=null;
		    	String errormessage_tOracleOutput_13;
				if (ne_tOracleOutput_13 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_13 = new java.sql.SQLException(e_tOracleOutput_13.getMessage() + "\ncaused by: " + ne_tOracleOutput_13.getMessage(), ne_tOracleOutput_13.getSQLState(), ne_tOracleOutput_13.getErrorCode(), ne_tOracleOutput_13);
					errormessage_tOracleOutput_13 = sqle_tOracleOutput_13.getMessage();
				}else{
					errormessage_tOracleOutput_13 = e_tOracleOutput_13.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_13);
            	
        	}
        	if (pstmt_tOracleOutput_13 != null) {
            	tmp_batchUpdateCount_tOracleOutput_13 = pstmt_tOracleOutput_13.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_13
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
				rowsToCommitCount_tOracleOutput_13 += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
            }
        }
        if(pstmt_tOracleOutput_13 != null) {
			
				pstmt_tOracleOutput_13.close();
				resourceMap.remove("pstmt_tOracleOutput_13");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_13", true);
		if(commitCounter_tOracleOutput_13 > 0 && rowsToCommitCount_tOracleOutput_13 != 0) {
			
		}
		conn_tOracleOutput_13.commit();
		if(commitCounter_tOracleOutput_13 > 0 && rowsToCommitCount_tOracleOutput_13 != 0) {
			
			rowsToCommitCount_tOracleOutput_13 = 0;
		}
		commitCounter_tOracleOutput_13 = 0;
		
		
		conn_tOracleOutput_13 .close();
		
		resourceMap.put("finish_tOracleOutput_13", true);
   	

	
	nb_line_deleted_tOracleOutput_13=nb_line_deleted_tOracleOutput_13+ deletedCount_tOracleOutput_13;
	nb_line_update_tOracleOutput_13=nb_line_update_tOracleOutput_13 + updatedCount_tOracleOutput_13;
	nb_line_inserted_tOracleOutput_13=nb_line_inserted_tOracleOutput_13 + insertedCount_tOracleOutput_13;
	nb_line_rejected_tOracleOutput_13=nb_line_rejected_tOracleOutput_13 + rejectedCount_tOracleOutput_13;
	
        globalMap.put("tOracleOutput_13_NB_LINE",nb_line_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_UPDATED",nb_line_update_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_13);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_rn");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_13", true);
end_Hash.put("tOracleOutput_13", System.currentTimeMillis());




/**
 * [tOracleOutput_13 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 finally ] stop
 */

	
	/**
	 * [tMap_18 finally ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	

 



/**
 * [tMap_18 finally ] stop
 */

	
	/**
	 * [tOracleOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_13") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_13 = null;
                if ((pstmtToClose_tOracleOutput_13 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_13")) != null) {
                    pstmtToClose_tOracleOutput_13.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_13") == null){
            java.sql.Connection ctn_tOracleOutput_13 = null;
            if((ctn_tOracleOutput_13 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_13")) != null){
                try {
                    ctn_tOracleOutput_13.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_13) {
                    String errorMessage_tOracleOutput_13 = "failed to close the connection in tOracleOutput_13 :" + sqlEx_tOracleOutput_13.getMessage();
                    System.err.println(errorMessage_tOracleOutput_13);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_13 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public String FCARDIACA_VALOR;

				public String getFCARDIACA_VALOR () {
					return this.FCARDIACA_VALOR;
				}

				public Boolean FCARDIACA_VALORIsNullable(){
				    return true;
				}
				public Boolean FCARDIACA_VALORIsKey(){
				    return false;
				}
				public Integer FCARDIACA_VALORLength(){
				    return 40;
				}
				public Integer FCARDIACA_VALORPrecision(){
				    return 0;
				}
				public String FCARDIACA_VALORDefault(){
				
					return null;
				
				}
				public String FCARDIACA_VALORComment(){
				
				    return "";
				
				}
				public String FCARDIACA_VALORPattern(){
				
					return "";
				
				}
				public String FCARDIACA_VALOROriginalDbColumnName(){
				
					return "FCARDIACA_VALOR";
				
				}

				
			    public String FCARDIACA_UMEDIDA;

				public String getFCARDIACA_UMEDIDA () {
					return this.FCARDIACA_UMEDIDA;
				}

				public Boolean FCARDIACA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean FCARDIACA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer FCARDIACA_UMEDIDALength(){
				    return 20;
				}
				public Integer FCARDIACA_UMEDIDAPrecision(){
				    return 0;
				}
				public String FCARDIACA_UMEDIDADefault(){
				
					return null;
				
				}
				public String FCARDIACA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String FCARDIACA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String FCARDIACA_UMEDIDAOriginalDbColumnName(){
				
					return "FCARDIACA_UMEDIDA";
				
				}

				
			    public String PARTERIALSIS_VALOR;

				public String getPARTERIALSIS_VALOR () {
					return this.PARTERIALSIS_VALOR;
				}

				public Boolean PARTERIALSIS_VALORIsNullable(){
				    return true;
				}
				public Boolean PARTERIALSIS_VALORIsKey(){
				    return false;
				}
				public Integer PARTERIALSIS_VALORLength(){
				    return 40;
				}
				public Integer PARTERIALSIS_VALORPrecision(){
				    return 0;
				}
				public String PARTERIALSIS_VALORDefault(){
				
					return null;
				
				}
				public String PARTERIALSIS_VALORComment(){
				
				    return "";
				
				}
				public String PARTERIALSIS_VALORPattern(){
				
					return "";
				
				}
				public String PARTERIALSIS_VALOROriginalDbColumnName(){
				
					return "PARTERIALSIS_VALOR";
				
				}

				
			    public String PARTERIALSIS_UMEDIDA;

				public String getPARTERIALSIS_UMEDIDA () {
					return this.PARTERIALSIS_UMEDIDA;
				}

				public Boolean PARTERIALSIS_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PARTERIALSIS_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PARTERIALSIS_UMEDIDALength(){
				    return 20;
				}
				public Integer PARTERIALSIS_UMEDIDAPrecision(){
				    return 0;
				}
				public String PARTERIALSIS_UMEDIDADefault(){
				
					return null;
				
				}
				public String PARTERIALSIS_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PARTERIALSIS_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PARTERIALSIS_UMEDIDAOriginalDbColumnName(){
				
					return "PARTERIALSIS_UMEDIDA";
				
				}

				
			    public String PARTERIALDIA_VALOR;

				public String getPARTERIALDIA_VALOR () {
					return this.PARTERIALDIA_VALOR;
				}

				public Boolean PARTERIALDIA_VALORIsNullable(){
				    return true;
				}
				public Boolean PARTERIALDIA_VALORIsKey(){
				    return false;
				}
				public Integer PARTERIALDIA_VALORLength(){
				    return 40;
				}
				public Integer PARTERIALDIA_VALORPrecision(){
				    return 0;
				}
				public String PARTERIALDIA_VALORDefault(){
				
					return null;
				
				}
				public String PARTERIALDIA_VALORComment(){
				
				    return "";
				
				}
				public String PARTERIALDIA_VALORPattern(){
				
					return "";
				
				}
				public String PARTERIALDIA_VALOROriginalDbColumnName(){
				
					return "PARTERIALDIA_VALOR";
				
				}

				
			    public String PARTERIALDIA_UMEDIDA;

				public String getPARTERIALDIA_UMEDIDA () {
					return this.PARTERIALDIA_UMEDIDA;
				}

				public Boolean PARTERIALDIA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PARTERIALDIA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PARTERIALDIA_UMEDIDALength(){
				    return 20;
				}
				public Integer PARTERIALDIA_UMEDIDAPrecision(){
				    return 0;
				}
				public String PARTERIALDIA_UMEDIDADefault(){
				
					return null;
				
				}
				public String PARTERIALDIA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PARTERIALDIA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PARTERIALDIA_UMEDIDAOriginalDbColumnName(){
				
					return "PARTERIALDIA_UMEDIDA";
				
				}

				
			    public String PARTERIALMED_VALOR;

				public String getPARTERIALMED_VALOR () {
					return this.PARTERIALMED_VALOR;
				}

				public Boolean PARTERIALMED_VALORIsNullable(){
				    return true;
				}
				public Boolean PARTERIALMED_VALORIsKey(){
				    return false;
				}
				public Integer PARTERIALMED_VALORLength(){
				    return 40;
				}
				public Integer PARTERIALMED_VALORPrecision(){
				    return 0;
				}
				public String PARTERIALMED_VALORDefault(){
				
					return null;
				
				}
				public String PARTERIALMED_VALORComment(){
				
				    return "";
				
				}
				public String PARTERIALMED_VALORPattern(){
				
					return "";
				
				}
				public String PARTERIALMED_VALOROriginalDbColumnName(){
				
					return "PARTERIALMED_VALOR";
				
				}

				
			    public String PARTERIALMED_UMEDIDA;

				public String getPARTERIALMED_UMEDIDA () {
					return this.PARTERIALMED_UMEDIDA;
				}

				public Boolean PARTERIALMED_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PARTERIALMED_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PARTERIALMED_UMEDIDALength(){
				    return 20;
				}
				public Integer PARTERIALMED_UMEDIDAPrecision(){
				    return 0;
				}
				public String PARTERIALMED_UMEDIDADefault(){
				
					return null;
				
				}
				public String PARTERIALMED_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PARTERIALMED_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PARTERIALMED_UMEDIDAOriginalDbColumnName(){
				
					return "PARTERIALMED_UMEDIDA";
				
				}

				
			    public String FRESPIRATORIA_VALOR;

				public String getFRESPIRATORIA_VALOR () {
					return this.FRESPIRATORIA_VALOR;
				}

				public Boolean FRESPIRATORIA_VALORIsNullable(){
				    return true;
				}
				public Boolean FRESPIRATORIA_VALORIsKey(){
				    return false;
				}
				public Integer FRESPIRATORIA_VALORLength(){
				    return 40;
				}
				public Integer FRESPIRATORIA_VALORPrecision(){
				    return 0;
				}
				public String FRESPIRATORIA_VALORDefault(){
				
					return null;
				
				}
				public String FRESPIRATORIA_VALORComment(){
				
				    return "";
				
				}
				public String FRESPIRATORIA_VALORPattern(){
				
					return "";
				
				}
				public String FRESPIRATORIA_VALOROriginalDbColumnName(){
				
					return "FRESPIRATORIA_VALOR";
				
				}

				
			    public String FRESPIRATORIA_UMEDIDA;

				public String getFRESPIRATORIA_UMEDIDA () {
					return this.FRESPIRATORIA_UMEDIDA;
				}

				public Boolean FRESPIRATORIA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean FRESPIRATORIA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer FRESPIRATORIA_UMEDIDALength(){
				    return 20;
				}
				public Integer FRESPIRATORIA_UMEDIDAPrecision(){
				    return 0;
				}
				public String FRESPIRATORIA_UMEDIDADefault(){
				
					return null;
				
				}
				public String FRESPIRATORIA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String FRESPIRATORIA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String FRESPIRATORIA_UMEDIDAOriginalDbColumnName(){
				
					return "FRESPIRATORIA_UMEDIDA";
				
				}

				
			    public String PULSO_VALOR;

				public String getPULSO_VALOR () {
					return this.PULSO_VALOR;
				}

				public Boolean PULSO_VALORIsNullable(){
				    return true;
				}
				public Boolean PULSO_VALORIsKey(){
				    return false;
				}
				public Integer PULSO_VALORLength(){
				    return 40;
				}
				public Integer PULSO_VALORPrecision(){
				    return 0;
				}
				public String PULSO_VALORDefault(){
				
					return null;
				
				}
				public String PULSO_VALORComment(){
				
				    return "";
				
				}
				public String PULSO_VALORPattern(){
				
					return "";
				
				}
				public String PULSO_VALOROriginalDbColumnName(){
				
					return "PULSO_VALOR";
				
				}

				
			    public String PULSO_UMEDIDA;

				public String getPULSO_UMEDIDA () {
					return this.PULSO_UMEDIDA;
				}

				public Boolean PULSO_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PULSO_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PULSO_UMEDIDALength(){
				    return 20;
				}
				public Integer PULSO_UMEDIDAPrecision(){
				    return 0;
				}
				public String PULSO_UMEDIDADefault(){
				
					return null;
				
				}
				public String PULSO_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PULSO_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PULSO_UMEDIDAOriginalDbColumnName(){
				
					return "PULSO_UMEDIDA";
				
				}

				
			    public String TEMPERATURA_VALOR;

				public String getTEMPERATURA_VALOR () {
					return this.TEMPERATURA_VALOR;
				}

				public Boolean TEMPERATURA_VALORIsNullable(){
				    return true;
				}
				public Boolean TEMPERATURA_VALORIsKey(){
				    return false;
				}
				public Integer TEMPERATURA_VALORLength(){
				    return 40;
				}
				public Integer TEMPERATURA_VALORPrecision(){
				    return 0;
				}
				public String TEMPERATURA_VALORDefault(){
				
					return null;
				
				}
				public String TEMPERATURA_VALORComment(){
				
				    return "";
				
				}
				public String TEMPERATURA_VALORPattern(){
				
					return "";
				
				}
				public String TEMPERATURA_VALOROriginalDbColumnName(){
				
					return "TEMPERATURA_VALOR";
				
				}

				
			    public String TEMPERATURA_UMEDIDA;

				public String getTEMPERATURA_UMEDIDA () {
					return this.TEMPERATURA_UMEDIDA;
				}

				public Boolean TEMPERATURA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean TEMPERATURA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer TEMPERATURA_UMEDIDALength(){
				    return 20;
				}
				public Integer TEMPERATURA_UMEDIDAPrecision(){
				    return 0;
				}
				public String TEMPERATURA_UMEDIDADefault(){
				
					return null;
				
				}
				public String TEMPERATURA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String TEMPERATURA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String TEMPERATURA_UMEDIDAOriginalDbColumnName(){
				
					return "TEMPERATURA_UMEDIDA";
				
				}

				
			    public String PESO_VALOR;

				public String getPESO_VALOR () {
					return this.PESO_VALOR;
				}

				public Boolean PESO_VALORIsNullable(){
				    return true;
				}
				public Boolean PESO_VALORIsKey(){
				    return false;
				}
				public Integer PESO_VALORLength(){
				    return 40;
				}
				public Integer PESO_VALORPrecision(){
				    return 0;
				}
				public String PESO_VALORDefault(){
				
					return null;
				
				}
				public String PESO_VALORComment(){
				
				    return "";
				
				}
				public String PESO_VALORPattern(){
				
					return "";
				
				}
				public String PESO_VALOROriginalDbColumnName(){
				
					return "PESO_VALOR";
				
				}

				
			    public String PESO_UMEDIDA;

				public String getPESO_UMEDIDA () {
					return this.PESO_UMEDIDA;
				}

				public Boolean PESO_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PESO_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PESO_UMEDIDALength(){
				    return 20;
				}
				public Integer PESO_UMEDIDAPrecision(){
				    return 0;
				}
				public String PESO_UMEDIDADefault(){
				
					return null;
				
				}
				public String PESO_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PESO_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PESO_UMEDIDAOriginalDbColumnName(){
				
					return "PESO_UMEDIDA";
				
				}

				
			    public String ESTATURA_VALOR;

				public String getESTATURA_VALOR () {
					return this.ESTATURA_VALOR;
				}

				public Boolean ESTATURA_VALORIsNullable(){
				    return true;
				}
				public Boolean ESTATURA_VALORIsKey(){
				    return false;
				}
				public Integer ESTATURA_VALORLength(){
				    return 40;
				}
				public Integer ESTATURA_VALORPrecision(){
				    return 0;
				}
				public String ESTATURA_VALORDefault(){
				
					return null;
				
				}
				public String ESTATURA_VALORComment(){
				
				    return "";
				
				}
				public String ESTATURA_VALORPattern(){
				
					return "";
				
				}
				public String ESTATURA_VALOROriginalDbColumnName(){
				
					return "ESTATURA_VALOR";
				
				}

				
			    public String ESTATURA_UMEDIDA;

				public String getESTATURA_UMEDIDA () {
					return this.ESTATURA_UMEDIDA;
				}

				public Boolean ESTATURA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean ESTATURA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer ESTATURA_UMEDIDALength(){
				    return 20;
				}
				public Integer ESTATURA_UMEDIDAPrecision(){
				    return 0;
				}
				public String ESTATURA_UMEDIDADefault(){
				
					return null;
				
				}
				public String ESTATURA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String ESTATURA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String ESTATURA_UMEDIDAOriginalDbColumnName(){
				
					return "ESTATURA_UMEDIDA";
				
				}

				
			    public String IMC_VALOR;

				public String getIMC_VALOR () {
					return this.IMC_VALOR;
				}

				public Boolean IMC_VALORIsNullable(){
				    return true;
				}
				public Boolean IMC_VALORIsKey(){
				    return false;
				}
				public Integer IMC_VALORLength(){
				    return 40;
				}
				public Integer IMC_VALORPrecision(){
				    return 0;
				}
				public String IMC_VALORDefault(){
				
					return null;
				
				}
				public String IMC_VALORComment(){
				
				    return "";
				
				}
				public String IMC_VALORPattern(){
				
					return "";
				
				}
				public String IMC_VALOROriginalDbColumnName(){
				
					return "IMC_VALOR";
				
				}

				
			    public String IMC_UMEDIDA;

				public String getIMC_UMEDIDA () {
					return this.IMC_UMEDIDA;
				}

				public Boolean IMC_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean IMC_UMEDIDAIsKey(){
				    return false;
				}
				public Integer IMC_UMEDIDALength(){
				    return 20;
				}
				public Integer IMC_UMEDIDAPrecision(){
				    return 0;
				}
				public String IMC_UMEDIDADefault(){
				
					return null;
				
				}
				public String IMC_UMEDIDAComment(){
				
				    return "";
				
				}
				public String IMC_UMEDIDAPattern(){
				
					return "";
				
				}
				public String IMC_UMEDIDAOriginalDbColumnName(){
				
					return "IMC_UMEDIDA";
				
				}

				
			    public String SOXIGENO_VALOR;

				public String getSOXIGENO_VALOR () {
					return this.SOXIGENO_VALOR;
				}

				public Boolean SOXIGENO_VALORIsNullable(){
				    return true;
				}
				public Boolean SOXIGENO_VALORIsKey(){
				    return false;
				}
				public Integer SOXIGENO_VALORLength(){
				    return 40;
				}
				public Integer SOXIGENO_VALORPrecision(){
				    return 0;
				}
				public String SOXIGENO_VALORDefault(){
				
					return null;
				
				}
				public String SOXIGENO_VALORComment(){
				
				    return "";
				
				}
				public String SOXIGENO_VALORPattern(){
				
					return "";
				
				}
				public String SOXIGENO_VALOROriginalDbColumnName(){
				
					return "SOXIGENO_VALOR";
				
				}

				
			    public String SOXIGENO_UMEDIDA;

				public String getSOXIGENO_UMEDIDA () {
					return this.SOXIGENO_UMEDIDA;
				}

				public Boolean SOXIGENO_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean SOXIGENO_UMEDIDAIsKey(){
				    return false;
				}
				public Integer SOXIGENO_UMEDIDALength(){
				    return 20;
				}
				public Integer SOXIGENO_UMEDIDAPrecision(){
				    return 0;
				}
				public String SOXIGENO_UMEDIDADefault(){
				
					return null;
				
				}
				public String SOXIGENO_UMEDIDAComment(){
				
				    return "";
				
				}
				public String SOXIGENO_UMEDIDAPattern(){
				
					return "";
				
				}
				public String SOXIGENO_UMEDIDAOriginalDbColumnName(){
				
					return "SOXIGENO_UMEDIDA";
				
				}

				
			    public String NCREATININA_VALOR;

				public String getNCREATININA_VALOR () {
					return this.NCREATININA_VALOR;
				}

				public Boolean NCREATININA_VALORIsNullable(){
				    return true;
				}
				public Boolean NCREATININA_VALORIsKey(){
				    return false;
				}
				public Integer NCREATININA_VALORLength(){
				    return 40;
				}
				public Integer NCREATININA_VALORPrecision(){
				    return 0;
				}
				public String NCREATININA_VALORDefault(){
				
					return null;
				
				}
				public String NCREATININA_VALORComment(){
				
				    return "";
				
				}
				public String NCREATININA_VALORPattern(){
				
					return "";
				
				}
				public String NCREATININA_VALOROriginalDbColumnName(){
				
					return "NCREATININA_VALOR";
				
				}

				
			    public String NCREATININA_UMEDIDA;

				public String getNCREATININA_UMEDIDA () {
					return this.NCREATININA_UMEDIDA;
				}

				public Boolean NCREATININA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean NCREATININA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer NCREATININA_UMEDIDALength(){
				    return 20;
				}
				public Integer NCREATININA_UMEDIDAPrecision(){
				    return 0;
				}
				public String NCREATININA_UMEDIDADefault(){
				
					return null;
				
				}
				public String NCREATININA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String NCREATININA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String NCREATININA_UMEDIDAOriginalDbColumnName(){
				
					return "NCREATININA_UMEDIDA";
				
				}

				
			    public String FGLOMERULAR_VALOR;

				public String getFGLOMERULAR_VALOR () {
					return this.FGLOMERULAR_VALOR;
				}

				public Boolean FGLOMERULAR_VALORIsNullable(){
				    return true;
				}
				public Boolean FGLOMERULAR_VALORIsKey(){
				    return false;
				}
				public Integer FGLOMERULAR_VALORLength(){
				    return 40;
				}
				public Integer FGLOMERULAR_VALORPrecision(){
				    return 0;
				}
				public String FGLOMERULAR_VALORDefault(){
				
					return null;
				
				}
				public String FGLOMERULAR_VALORComment(){
				
				    return "";
				
				}
				public String FGLOMERULAR_VALORPattern(){
				
					return "";
				
				}
				public String FGLOMERULAR_VALOROriginalDbColumnName(){
				
					return "FGLOMERULAR_VALOR";
				
				}

				
			    public String FGLOMERULAR_UMEDIDA;

				public String getFGLOMERULAR_UMEDIDA () {
					return this.FGLOMERULAR_UMEDIDA;
				}

				public Boolean FGLOMERULAR_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean FGLOMERULAR_UMEDIDAIsKey(){
				    return false;
				}
				public Integer FGLOMERULAR_UMEDIDALength(){
				    return 20;
				}
				public Integer FGLOMERULAR_UMEDIDAPrecision(){
				    return 0;
				}
				public String FGLOMERULAR_UMEDIDADefault(){
				
					return null;
				
				}
				public String FGLOMERULAR_UMEDIDAComment(){
				
				    return "";
				
				}
				public String FGLOMERULAR_UMEDIDAPattern(){
				
					return "";
				
				}
				public String FGLOMERULAR_UMEDIDAOriginalDbColumnName(){
				
					return "FGLOMERULAR_UMEDIDA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PROCESOSASISTENCIALES_ID == null) ? 0 : this.PROCESOSASISTENCIALES_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.PROCESOSASISTENCIALES_ID == null) {
							if (other.PROCESOSASISTENCIALES_ID != null)
								return false;
						
						} else if (!this.PROCESOSASISTENCIALES_ID.equals(other.PROCESOSASISTENCIALES_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.PROCESOSASISTENCIALES_ID = this.PROCESOSASISTENCIALES_ID;
	            other.FCARDIACA_VALOR = this.FCARDIACA_VALOR;
	            other.FCARDIACA_UMEDIDA = this.FCARDIACA_UMEDIDA;
	            other.PARTERIALSIS_VALOR = this.PARTERIALSIS_VALOR;
	            other.PARTERIALSIS_UMEDIDA = this.PARTERIALSIS_UMEDIDA;
	            other.PARTERIALDIA_VALOR = this.PARTERIALDIA_VALOR;
	            other.PARTERIALDIA_UMEDIDA = this.PARTERIALDIA_UMEDIDA;
	            other.PARTERIALMED_VALOR = this.PARTERIALMED_VALOR;
	            other.PARTERIALMED_UMEDIDA = this.PARTERIALMED_UMEDIDA;
	            other.FRESPIRATORIA_VALOR = this.FRESPIRATORIA_VALOR;
	            other.FRESPIRATORIA_UMEDIDA = this.FRESPIRATORIA_UMEDIDA;
	            other.PULSO_VALOR = this.PULSO_VALOR;
	            other.PULSO_UMEDIDA = this.PULSO_UMEDIDA;
	            other.TEMPERATURA_VALOR = this.TEMPERATURA_VALOR;
	            other.TEMPERATURA_UMEDIDA = this.TEMPERATURA_UMEDIDA;
	            other.PESO_VALOR = this.PESO_VALOR;
	            other.PESO_UMEDIDA = this.PESO_UMEDIDA;
	            other.ESTATURA_VALOR = this.ESTATURA_VALOR;
	            other.ESTATURA_UMEDIDA = this.ESTATURA_UMEDIDA;
	            other.IMC_VALOR = this.IMC_VALOR;
	            other.IMC_UMEDIDA = this.IMC_UMEDIDA;
	            other.SOXIGENO_VALOR = this.SOXIGENO_VALOR;
	            other.SOXIGENO_UMEDIDA = this.SOXIGENO_UMEDIDA;
	            other.NCREATININA_VALOR = this.NCREATININA_VALOR;
	            other.NCREATININA_UMEDIDA = this.NCREATININA_UMEDIDA;
	            other.FGLOMERULAR_VALOR = this.FGLOMERULAR_VALOR;
	            other.FGLOMERULAR_UMEDIDA = this.FGLOMERULAR_UMEDIDA;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.PROCESOSASISTENCIALES_ID = this.PROCESOSASISTENCIALES_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.FCARDIACA_VALOR = readString(dis,ois);
					
						this.FCARDIACA_UMEDIDA = readString(dis,ois);
					
						this.PARTERIALSIS_VALOR = readString(dis,ois);
					
						this.PARTERIALSIS_UMEDIDA = readString(dis,ois);
					
						this.PARTERIALDIA_VALOR = readString(dis,ois);
					
						this.PARTERIALDIA_UMEDIDA = readString(dis,ois);
					
						this.PARTERIALMED_VALOR = readString(dis,ois);
					
						this.PARTERIALMED_UMEDIDA = readString(dis,ois);
					
						this.FRESPIRATORIA_VALOR = readString(dis,ois);
					
						this.FRESPIRATORIA_UMEDIDA = readString(dis,ois);
					
						this.PULSO_VALOR = readString(dis,ois);
					
						this.PULSO_UMEDIDA = readString(dis,ois);
					
						this.TEMPERATURA_VALOR = readString(dis,ois);
					
						this.TEMPERATURA_UMEDIDA = readString(dis,ois);
					
						this.PESO_VALOR = readString(dis,ois);
					
						this.PESO_UMEDIDA = readString(dis,ois);
					
						this.ESTATURA_VALOR = readString(dis,ois);
					
						this.ESTATURA_UMEDIDA = readString(dis,ois);
					
						this.IMC_VALOR = readString(dis,ois);
					
						this.IMC_UMEDIDA = readString(dis,ois);
					
						this.SOXIGENO_VALOR = readString(dis,ois);
					
						this.SOXIGENO_UMEDIDA = readString(dis,ois);
					
						this.NCREATININA_VALOR = readString(dis,ois);
					
						this.NCREATININA_UMEDIDA = readString(dis,ois);
					
						this.FGLOMERULAR_VALOR = readString(dis,ois);
					
						this.FGLOMERULAR_UMEDIDA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.FCARDIACA_VALOR = readString(dis,objectIn);
					
						this.FCARDIACA_UMEDIDA = readString(dis,objectIn);
					
						this.PARTERIALSIS_VALOR = readString(dis,objectIn);
					
						this.PARTERIALSIS_UMEDIDA = readString(dis,objectIn);
					
						this.PARTERIALDIA_VALOR = readString(dis,objectIn);
					
						this.PARTERIALDIA_UMEDIDA = readString(dis,objectIn);
					
						this.PARTERIALMED_VALOR = readString(dis,objectIn);
					
						this.PARTERIALMED_UMEDIDA = readString(dis,objectIn);
					
						this.FRESPIRATORIA_VALOR = readString(dis,objectIn);
					
						this.FRESPIRATORIA_UMEDIDA = readString(dis,objectIn);
					
						this.PULSO_VALOR = readString(dis,objectIn);
					
						this.PULSO_UMEDIDA = readString(dis,objectIn);
					
						this.TEMPERATURA_VALOR = readString(dis,objectIn);
					
						this.TEMPERATURA_UMEDIDA = readString(dis,objectIn);
					
						this.PESO_VALOR = readString(dis,objectIn);
					
						this.PESO_UMEDIDA = readString(dis,objectIn);
					
						this.ESTATURA_VALOR = readString(dis,objectIn);
					
						this.ESTATURA_UMEDIDA = readString(dis,objectIn);
					
						this.IMC_VALOR = readString(dis,objectIn);
					
						this.IMC_UMEDIDA = readString(dis,objectIn);
					
						this.SOXIGENO_VALOR = readString(dis,objectIn);
					
						this.SOXIGENO_UMEDIDA = readString(dis,objectIn);
					
						this.NCREATININA_VALOR = readString(dis,objectIn);
					
						this.NCREATININA_UMEDIDA = readString(dis,objectIn);
					
						this.FGLOMERULAR_VALOR = readString(dis,objectIn);
					
						this.FGLOMERULAR_UMEDIDA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.FCARDIACA_VALOR, dos, oos);
					
						writeString(this.FCARDIACA_UMEDIDA, dos, oos);
					
						writeString(this.PARTERIALSIS_VALOR, dos, oos);
					
						writeString(this.PARTERIALSIS_UMEDIDA, dos, oos);
					
						writeString(this.PARTERIALDIA_VALOR, dos, oos);
					
						writeString(this.PARTERIALDIA_UMEDIDA, dos, oos);
					
						writeString(this.PARTERIALMED_VALOR, dos, oos);
					
						writeString(this.PARTERIALMED_UMEDIDA, dos, oos);
					
						writeString(this.FRESPIRATORIA_VALOR, dos, oos);
					
						writeString(this.FRESPIRATORIA_UMEDIDA, dos, oos);
					
						writeString(this.PULSO_VALOR, dos, oos);
					
						writeString(this.PULSO_UMEDIDA, dos, oos);
					
						writeString(this.TEMPERATURA_VALOR, dos, oos);
					
						writeString(this.TEMPERATURA_UMEDIDA, dos, oos);
					
						writeString(this.PESO_VALOR, dos, oos);
					
						writeString(this.PESO_UMEDIDA, dos, oos);
					
						writeString(this.ESTATURA_VALOR, dos, oos);
					
						writeString(this.ESTATURA_UMEDIDA, dos, oos);
					
						writeString(this.IMC_VALOR, dos, oos);
					
						writeString(this.IMC_UMEDIDA, dos, oos);
					
						writeString(this.SOXIGENO_VALOR, dos, oos);
					
						writeString(this.SOXIGENO_UMEDIDA, dos, oos);
					
						writeString(this.NCREATININA_VALOR, dos, oos);
					
						writeString(this.NCREATININA_UMEDIDA, dos, oos);
					
						writeString(this.FGLOMERULAR_VALOR, dos, oos);
					
						writeString(this.FGLOMERULAR_UMEDIDA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.FCARDIACA_VALOR, dos, objectOut);
					
						writeString(this.FCARDIACA_UMEDIDA, dos, objectOut);
					
						writeString(this.PARTERIALSIS_VALOR, dos, objectOut);
					
						writeString(this.PARTERIALSIS_UMEDIDA, dos, objectOut);
					
						writeString(this.PARTERIALDIA_VALOR, dos, objectOut);
					
						writeString(this.PARTERIALDIA_UMEDIDA, dos, objectOut);
					
						writeString(this.PARTERIALMED_VALOR, dos, objectOut);
					
						writeString(this.PARTERIALMED_UMEDIDA, dos, objectOut);
					
						writeString(this.FRESPIRATORIA_VALOR, dos, objectOut);
					
						writeString(this.FRESPIRATORIA_UMEDIDA, dos, objectOut);
					
						writeString(this.PULSO_VALOR, dos, objectOut);
					
						writeString(this.PULSO_UMEDIDA, dos, objectOut);
					
						writeString(this.TEMPERATURA_VALOR, dos, objectOut);
					
						writeString(this.TEMPERATURA_UMEDIDA, dos, objectOut);
					
						writeString(this.PESO_VALOR, dos, objectOut);
					
						writeString(this.PESO_UMEDIDA, dos, objectOut);
					
						writeString(this.ESTATURA_VALOR, dos, objectOut);
					
						writeString(this.ESTATURA_UMEDIDA, dos, objectOut);
					
						writeString(this.IMC_VALOR, dos, objectOut);
					
						writeString(this.IMC_UMEDIDA, dos, objectOut);
					
						writeString(this.SOXIGENO_VALOR, dos, objectOut);
					
						writeString(this.SOXIGENO_UMEDIDA, dos, objectOut);
					
						writeString(this.NCREATININA_VALOR, dos, objectOut);
					
						writeString(this.NCREATININA_UMEDIDA, dos, objectOut);
					
						writeString(this.FGLOMERULAR_VALOR, dos, objectOut);
					
						writeString(this.FGLOMERULAR_UMEDIDA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",FCARDIACA_VALOR="+FCARDIACA_VALOR);
		sb.append(",FCARDIACA_UMEDIDA="+FCARDIACA_UMEDIDA);
		sb.append(",PARTERIALSIS_VALOR="+PARTERIALSIS_VALOR);
		sb.append(",PARTERIALSIS_UMEDIDA="+PARTERIALSIS_UMEDIDA);
		sb.append(",PARTERIALDIA_VALOR="+PARTERIALDIA_VALOR);
		sb.append(",PARTERIALDIA_UMEDIDA="+PARTERIALDIA_UMEDIDA);
		sb.append(",PARTERIALMED_VALOR="+PARTERIALMED_VALOR);
		sb.append(",PARTERIALMED_UMEDIDA="+PARTERIALMED_UMEDIDA);
		sb.append(",FRESPIRATORIA_VALOR="+FRESPIRATORIA_VALOR);
		sb.append(",FRESPIRATORIA_UMEDIDA="+FRESPIRATORIA_UMEDIDA);
		sb.append(",PULSO_VALOR="+PULSO_VALOR);
		sb.append(",PULSO_UMEDIDA="+PULSO_UMEDIDA);
		sb.append(",TEMPERATURA_VALOR="+TEMPERATURA_VALOR);
		sb.append(",TEMPERATURA_UMEDIDA="+TEMPERATURA_UMEDIDA);
		sb.append(",PESO_VALOR="+PESO_VALOR);
		sb.append(",PESO_UMEDIDA="+PESO_UMEDIDA);
		sb.append(",ESTATURA_VALOR="+ESTATURA_VALOR);
		sb.append(",ESTATURA_UMEDIDA="+ESTATURA_UMEDIDA);
		sb.append(",IMC_VALOR="+IMC_VALOR);
		sb.append(",IMC_UMEDIDA="+IMC_UMEDIDA);
		sb.append(",SOXIGENO_VALOR="+SOXIGENO_VALOR);
		sb.append(",SOXIGENO_UMEDIDA="+SOXIGENO_UMEDIDA);
		sb.append(",NCREATININA_VALOR="+NCREATININA_VALOR);
		sb.append(",NCREATININA_UMEDIDA="+NCREATININA_UMEDIDA);
		sb.append(",FGLOMERULAR_VALOR="+FGLOMERULAR_VALOR);
		sb.append(",FGLOMERULAR_UMEDIDA="+FGLOMERULAR_UMEDIDA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PROCESOSASISTENCIALES_ID, other.PROCESOSASISTENCIALES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tHashInput_5 - inputs:(after_tOracleInput_13) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_4 - inputs:(row16,row13) outputs:(proc_out)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_Rips_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row2Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    row2Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row13.PROCESOSASISTENCIALES_ID = next_tHashInput_5.PROCESOSASISTENCIALES_ID;
	row13.FCARDIACA_VALOR = next_tHashInput_5.FCARDIACA_VALOR;
	row13.FCARDIACA_UMEDIDA = next_tHashInput_5.FCARDIACA_UMEDIDA;
	row13.PARTERIALSIS_VALOR = next_tHashInput_5.PARTERIALSIS_VALOR;
	row13.PARTERIALSIS_UMEDIDA = next_tHashInput_5.PARTERIALSIS_UMEDIDA;
	row13.PARTERIALDIA_VALOR = next_tHashInput_5.PARTERIALDIA_VALOR;
	row13.PARTERIALDIA_UMEDIDA = next_tHashInput_5.PARTERIALDIA_UMEDIDA;
	row13.PARTERIALMED_VALOR = next_tHashInput_5.PARTERIALMED_VALOR;
	row13.PARTERIALMED_UMEDIDA = next_tHashInput_5.PARTERIALMED_UMEDIDA;
	row13.FRESPIRATORIA_VALOR = next_tHashInput_5.FRESPIRATORIA_VALOR;
	row13.FRESPIRATORIA_UMEDIDA = next_tHashInput_5.FRESPIRATORIA_UMEDIDA;
	row13.PULSO_VALOR = next_tHashInput_5.PULSO_VALOR;
	row13.PULSO_UMEDIDA = next_tHashInput_5.PULSO_UMEDIDA;
	row13.TEMPERATURA_VALOR = next_tHashInput_5.TEMPERATURA_VALOR;
	row13.TEMPERATURA_UMEDIDA = next_tHashInput_5.TEMPERATURA_UMEDIDA;
	row13.PESO_VALOR = next_tHashInput_5.PESO_VALOR;
	row13.PESO_UMEDIDA = next_tHashInput_5.PESO_UMEDIDA;
	row13.ESTATURA_VALOR = next_tHashInput_5.ESTATURA_VALOR;
	row13.ESTATURA_UMEDIDA = next_tHashInput_5.ESTATURA_UMEDIDA;
	row13.IMC_VALOR = next_tHashInput_5.IMC_VALOR;
	row13.IMC_UMEDIDA = next_tHashInput_5.IMC_UMEDIDA;
	row13.SOXIGENO_VALOR = next_tHashInput_5.SOXIGENO_VALOR;
	row13.SOXIGENO_UMEDIDA = next_tHashInput_5.SOXIGENO_UMEDIDA;
	row13.NCREATININA_VALOR = next_tHashInput_5.NCREATININA_VALOR;
	row13.NCREATININA_UMEDIDA = next_tHashInput_5.NCREATININA_UMEDIDA;
	row13.FGLOMERULAR_VALOR = next_tHashInput_5.FGLOMERULAR_VALOR;
	row13.FGLOMERULAR_UMEDIDA = next_tHashInput_5.FGLOMERULAR_UMEDIDA;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.PROCESOSASISTENCIALES_ID = row13.PROCESOSASISTENCIALES_ID;
				
				row13_HashRow.FCARDIACA_VALOR = row13.FCARDIACA_VALOR;
				
				row13_HashRow.FCARDIACA_UMEDIDA = row13.FCARDIACA_UMEDIDA;
				
				row13_HashRow.PARTERIALSIS_VALOR = row13.PARTERIALSIS_VALOR;
				
				row13_HashRow.PARTERIALSIS_UMEDIDA = row13.PARTERIALSIS_UMEDIDA;
				
				row13_HashRow.PARTERIALDIA_VALOR = row13.PARTERIALDIA_VALOR;
				
				row13_HashRow.PARTERIALDIA_UMEDIDA = row13.PARTERIALDIA_UMEDIDA;
				
				row13_HashRow.PARTERIALMED_VALOR = row13.PARTERIALMED_VALOR;
				
				row13_HashRow.PARTERIALMED_UMEDIDA = row13.PARTERIALMED_UMEDIDA;
				
				row13_HashRow.FRESPIRATORIA_VALOR = row13.FRESPIRATORIA_VALOR;
				
				row13_HashRow.FRESPIRATORIA_UMEDIDA = row13.FRESPIRATORIA_UMEDIDA;
				
				row13_HashRow.PULSO_VALOR = row13.PULSO_VALOR;
				
				row13_HashRow.PULSO_UMEDIDA = row13.PULSO_UMEDIDA;
				
				row13_HashRow.TEMPERATURA_VALOR = row13.TEMPERATURA_VALOR;
				
				row13_HashRow.TEMPERATURA_UMEDIDA = row13.TEMPERATURA_UMEDIDA;
				
				row13_HashRow.PESO_VALOR = row13.PESO_VALOR;
				
				row13_HashRow.PESO_UMEDIDA = row13.PESO_UMEDIDA;
				
				row13_HashRow.ESTATURA_VALOR = row13.ESTATURA_VALOR;
				
				row13_HashRow.ESTATURA_UMEDIDA = row13.ESTATURA_UMEDIDA;
				
				row13_HashRow.IMC_VALOR = row13.IMC_VALOR;
				
				row13_HashRow.IMC_UMEDIDA = row13.IMC_UMEDIDA;
				
				row13_HashRow.SOXIGENO_VALOR = row13.SOXIGENO_VALOR;
				
				row13_HashRow.SOXIGENO_UMEDIDA = row13.SOXIGENO_UMEDIDA;
				
				row13_HashRow.NCREATININA_VALOR = row13.NCREATININA_VALOR;
				
				row13_HashRow.NCREATININA_UMEDIDA = row13.NCREATININA_UMEDIDA;
				
				row13_HashRow.FGLOMERULAR_VALOR = row13.FGLOMERULAR_VALOR;
				
				row13_HashRow.FGLOMERULAR_UMEDIDA = row13.FGLOMERULAR_UMEDIDA;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Rips_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

tHash_Lookup_row13.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return null;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public BigDecimal FINDRISK;

				public BigDecimal getFINDRISK () {
					return this.FINDRISK;
				}

				public Boolean FINDRISKIsNullable(){
				    return false;
				}
				public Boolean FINDRISKIsKey(){
				    return false;
				}
				public Integer FINDRISKLength(){
				    return null;
				}
				public Integer FINDRISKPrecision(){
				    return null;
				}
				public String FINDRISKDefault(){
				
					return "";
				
				}
				public String FINDRISKComment(){
				
				    return "";
				
				}
				public String FINDRISKPattern(){
				
					return "";
				
				}
				public String FINDRISKOriginalDbColumnName(){
				
					return "FINDRISK";
				
				}

				
			    public String PROBABILIDAD;

				public String getPROBABILIDAD () {
					return this.PROBABILIDAD;
				}

				public Boolean PROBABILIDADIsNullable(){
				    return true;
				}
				public Boolean PROBABILIDADIsKey(){
				    return false;
				}
				public Integer PROBABILIDADLength(){
				    return null;
				}
				public Integer PROBABILIDADPrecision(){
				    return null;
				}
				public String PROBABILIDADDefault(){
				
					return null;
				
				}
				public String PROBABILIDADComment(){
				
				    return "";
				
				}
				public String PROBABILIDADPattern(){
				
					return "";
				
				}
				public String PROBABILIDADOriginalDbColumnName(){
				
					return "PROBABILIDAD";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PROCESOSASISTENCIALES_ID == null) ? 0 : this.PROCESOSASISTENCIALES_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row15Struct other = (row15Struct) obj;
		
						if (this.PROCESOSASISTENCIALES_ID == null) {
							if (other.PROCESOSASISTENCIALES_ID != null)
								return false;
						
						} else if (!this.PROCESOSASISTENCIALES_ID.equals(other.PROCESOSASISTENCIALES_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row15Struct other) {

		other.PROCESOSASISTENCIALES_ID = this.PROCESOSASISTENCIALES_ID;
	            other.FINDRISK = this.FINDRISK;
	            other.PROBABILIDAD = this.PROBABILIDAD;
	            
	}

	public void copyKeysDataTo(row15Struct other) {

		other.PROCESOSASISTENCIALES_ID = this.PROCESOSASISTENCIALES_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.FINDRISK = (BigDecimal) ois.readObject();
					
						this.PROBABILIDAD = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.FINDRISK = (BigDecimal) objectIn.readObject();
					
						this.PROBABILIDAD = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.FINDRISK);
					
						writeString(this.PROBABILIDAD, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.FINDRISK);
					
						writeString(this.PROBABILIDAD, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",FINDRISK="+String.valueOf(FINDRISK));
		sb.append(",PROBABILIDAD="+PROBABILIDAD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PROCESOSASISTENCIALES_ID, other.PROCESOSASISTENCIALES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tAdvancedHash_row15 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row15", false);
		start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tAdvancedHash_row15 = 0;
		

			   		// connection name:row15
			   		// source node:tOracleInput_6 - inputs:(after_tOracleInput_7) outputs:(row15,row15) | target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
			   		// linked node: tMap_16 - inputs:(row7,row15,row27,row4,row5) outputs:(insert_c)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row15Struct>getLookup(matchingModeEnum_row15);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row15 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_6.setFetchSize(1000);


		    String dbquery_tOracleInput_6 = " SELECT \n	GHR.PROCESOSASISTENCIALES_ID,\n	GHR.FINDRISK,\n	CASE\n	WHEN GHR.FINDRISK>=12 THEN 'Probabilidad alta'\n	WHEN"
+" GHR.FINDRISK>=7 AND GHR.FINDRISK<=11  THEN 'Probabilidad moderada'\n	WHEN GHR.FINDRISK<7 THEN 'Probabilidad baja'\n	END"
+" AS PROBABILIDAD\nFROM GEN_HRIESGOSCV  GHR\nWHERE GHR.PROCESOSASISTENCIALES_ID IS NOT NULL \n" +context.CONDICION_FINDRISK_CONSULTAS;
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row15.PROCESOSASISTENCIALES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(1) != null) {
						row15.PROCESOSASISTENCIALES_ID = rs_tOracleInput_6.getBigDecimal(1);
					} else {
				
						row15.PROCESOSASISTENCIALES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								row15.FINDRISK = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(2) != null) {
						row15.FINDRISK = rs_tOracleInput_6.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 3) {
								row15.PROBABILIDAD = null;
							} else {
	                         		
        	row15.PROBABILIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 3, false);
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					


			   
			   

					row15Struct row15_HashRow = new row15Struct();
		   	   	   
				
				row15_HashRow.PROCESOSASISTENCIALES_ID = row15.PROCESOSASISTENCIALES_ID;
				
				row15_HashRow.FINDRISK = row15.FINDRISK;
				
				row15_HashRow.PROBABILIDAD = row15.PROBABILIDAD;
				
			tHash_Lookup_row15.put(row15_HashRow);
			
            




 


	tos_count_tAdvancedHash_row15++;

/**
 * [tAdvancedHash_row15 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());




/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

tHash_Lookup_row15.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row15", true);
end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());




/**
 * [tAdvancedHash_row15 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row27Struct implements routines.system.IPersistableComparableLookupRow<row27Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ACTIVIDADES;

				public String getACTIVIDADES () {
					return this.ACTIVIDADES;
				}

				public Boolean ACTIVIDADESIsNullable(){
				    return true;
				}
				public Boolean ACTIVIDADESIsKey(){
				    return false;
				}
				public Integer ACTIVIDADESLength(){
				    return 300;
				}
				public Integer ACTIVIDADESPrecision(){
				    return 0;
				}
				public String ACTIVIDADESDefault(){
				
					return null;
				
				}
				public String ACTIVIDADESComment(){
				
				    return "";
				
				}
				public String ACTIVIDADESPattern(){
				
					return "";
				
				}
				public String ACTIVIDADESOriginalDbColumnName(){
				
					return "ACTIVIDADES";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PROCESOSASISTENCIALES_ID == null) ? 0 : this.PROCESOSASISTENCIALES_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row27Struct other = (row27Struct) obj;
		
						if (this.PROCESOSASISTENCIALES_ID == null) {
							if (other.PROCESOSASISTENCIALES_ID != null)
								return false;
						
						} else if (!this.PROCESOSASISTENCIALES_ID.equals(other.PROCESOSASISTENCIALES_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row27Struct other) {

		other.ACTIVIDADES = this.ACTIVIDADES;
	            other.PROCESOSASISTENCIALES_ID = this.PROCESOSASISTENCIALES_ID;
	            
	}

	public void copyKeysDataTo(row27Struct other) {

		other.PROCESOSASISTENCIALES_ID = this.PROCESOSASISTENCIALES_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ACTIVIDADES = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.ACTIVIDADES = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.ACTIVIDADES, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.ACTIVIDADES, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ACTIVIDADES="+ACTIVIDADES);
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PROCESOSASISTENCIALES_ID, other.PROCESOSASISTENCIALES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtDenormalize_1 implements routines.system.IPersistableRow<OnRowsEndStructtDenormalize_1> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String ACTIVIDADES;

				public String getACTIVIDADES () {
					return this.ACTIVIDADES;
				}

				public Boolean ACTIVIDADESIsNullable(){
				    return true;
				}
				public Boolean ACTIVIDADESIsKey(){
				    return false;
				}
				public Integer ACTIVIDADESLength(){
				    return 300;
				}
				public Integer ACTIVIDADESPrecision(){
				    return 0;
				}
				public String ACTIVIDADESDefault(){
				
					return null;
				
				}
				public String ACTIVIDADESComment(){
				
				    return "";
				
				}
				public String ACTIVIDADESPattern(){
				
					return "";
				
				}
				public String ACTIVIDADESOriginalDbColumnName(){
				
					return "ACTIVIDADES";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.ACTIVIDADES = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.ACTIVIDADES = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ACTIVIDADES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ACTIVIDADES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ACTIVIDADES="+ACTIVIDADES);
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtDenormalize_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String ACTIVIDADES;

				public String getACTIVIDADES () {
					return this.ACTIVIDADES;
				}

				public Boolean ACTIVIDADESIsNullable(){
				    return true;
				}
				public Boolean ACTIVIDADESIsKey(){
				    return false;
				}
				public Integer ACTIVIDADESLength(){
				    return 300;
				}
				public Integer ACTIVIDADESPrecision(){
				    return 0;
				}
				public String ACTIVIDADESDefault(){
				
					return null;
				
				}
				public String ACTIVIDADESComment(){
				
				    return "";
				
				}
				public String ACTIVIDADESPattern(){
				
					return "";
				
				}
				public String ACTIVIDADESOriginalDbColumnName(){
				
					return "ACTIVIDADES";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.ACTIVIDADES = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.ACTIVIDADES = readString(dis);
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ACTIVIDADES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ACTIVIDADES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ACTIVIDADES="+ACTIVIDADES);
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row26Struct row26 = new row26Struct();
row27Struct row27 = new row27Struct();




	
	/**
	 * [tDenormalize_1_DenormalizeOut begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_1_DenormalizeOut", false);
		start_Hash.put("tDenormalize_1_DenormalizeOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tDenormalize_1_DenormalizeOut = 0;
		

class DenormalizeStructtDenormalize_1_DenormalizeOut {
java.util.List<String> ACTIVIDADES = new java.util.ArrayList<String>();
}
DenormalizeStructtDenormalize_1_DenormalizeOut denormalize_result_tDenormalize_1_DenormalizeOut = null;
java.util.Map<BigDecimal, DenormalizeStructtDenormalize_1_DenormalizeOut> hash_PROCESOSASISTENCIALES_ID_tDenormalize_1_DenormalizeOut = new java.util.HashMap<BigDecimal, DenormalizeStructtDenormalize_1_DenormalizeOut>();

 



/**
 * [tDenormalize_1_DenormalizeOut begin ] stop
 */



	
	/**
	 * [tOracleInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_17", false);
		start_Hash.put("tOracleInput_17", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_17";
	
	
		int tos_count_tOracleInput_17 = 0;
		
	


	
		    int nb_line_tOracleInput_17 = 0;
		    java.sql.Connection conn_tOracleInput_17 = null;
				conn_tOracleInput_17 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
				
                boolean isTimeZoneNull_tOracleInput_17 = false;
				boolean isConnectionWrapped_tOracleInput_17 = !(conn_tOracleInput_17 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_17.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_17 = null;
                if (isConnectionWrapped_tOracleInput_17) {
					unwrappedOraConn_tOracleInput_17 = conn_tOracleInput_17.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_17 != null) {
                        isTimeZoneNull_tOracleInput_17 = (unwrappedOraConn_tOracleInput_17.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_17 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_17).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_17) {
					java.sql.Statement stmtGetTZ_tOracleInput_17 = conn_tOracleInput_17.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_17 = stmtGetTZ_tOracleInput_17.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_17 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_17.next()) {
						sessionTimezone_tOracleInput_17 = rsGetTZ_tOracleInput_17.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_17 && unwrappedOraConn_tOracleInput_17 != null) {
                        unwrappedOraConn_tOracleInput_17.setSessionTimeZone(sessionTimezone_tOracleInput_17);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_17).setSessionTimeZone(sessionTimezone_tOracleInput_17);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_17 = conn_tOracleInput_17.createStatement();

		    String dbquery_tOracleInput_17 = "SELECT\n  TRIM(ACT.NOMBRE)  AS ACTIVIDADES,\n  DEJE.PROCESOSASISTENCIALES_ID\nFROM CGP_DEJECACTIVIDADES DEJE\nINNER JOI"
+"N CGP_ACTIVIDADES ACT ON ACT.ID = DEJE.ACTIVIDADES_ID \nINNER JOIN HCL_PROCESOSASISTENCIALES PROC ON PROC.ID = DEJE.PROC"
+"ESOSASISTENCIALES_ID\nWHERE DEJE.ESTREGISTRO_ID = 1"+context.CONDICION_ACTIVIDADES_CONSULTAS 
;
		    

		    globalMap.put("tOracleInput_17_QUERY",dbquery_tOracleInput_17);

		    java.sql.ResultSet rs_tOracleInput_17 = null;

		    try {
		    	rs_tOracleInput_17 = stmt_tOracleInput_17.executeQuery(dbquery_tOracleInput_17);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_17 = rs_tOracleInput_17.getMetaData();
		    	int colQtyInRs_tOracleInput_17 = rsmd_tOracleInput_17.getColumnCount();

		    String tmpContent_tOracleInput_17 = null;
		    
		    
		    while (rs_tOracleInput_17.next()) {
		        nb_line_tOracleInput_17++;
		        
							if(colQtyInRs_tOracleInput_17 < 1) {
								row26.ACTIVIDADES = null;
							} else {
	                         		
        	row26.ACTIVIDADES = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 2) {
								row26.PROCESOSASISTENCIALES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(2) != null) {
						row26.PROCESOSASISTENCIALES_ID = rs_tOracleInput_17.getBigDecimal(2);
					} else {
				
						row26.PROCESOSASISTENCIALES_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_17 begin ] stop
 */
	
	/**
	 * [tOracleInput_17 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 


	tos_count_tOracleInput_17++;

/**
 * [tOracleInput_17 main ] stop
 */
	
	/**
	 * [tOracleInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tDenormalize_1_DenormalizeOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row26"
						
						);
					}
					

if(hash_PROCESOSASISTENCIALES_ID_tDenormalize_1_DenormalizeOut.containsKey(row26.PROCESOSASISTENCIALES_ID)){
	denormalize_result_tDenormalize_1_DenormalizeOut = hash_PROCESOSASISTENCIALES_ID_tDenormalize_1_DenormalizeOut.get(row26.PROCESOSASISTENCIALES_ID);
	if(!denormalize_result_tDenormalize_1_DenormalizeOut.ACTIVIDADES.contains(row26.ACTIVIDADES)){
		denormalize_result_tDenormalize_1_DenormalizeOut.ACTIVIDADES.add(row26.ACTIVIDADES);
	}                  
}else{
	denormalize_result_tDenormalize_1_DenormalizeOut = new DenormalizeStructtDenormalize_1_DenormalizeOut();
	if(!denormalize_result_tDenormalize_1_DenormalizeOut.ACTIVIDADES.contains(row26.ACTIVIDADES)){
		denormalize_result_tDenormalize_1_DenormalizeOut.ACTIVIDADES.add(row26.ACTIVIDADES);
	}
	hash_PROCESOSASISTENCIALES_ID_tDenormalize_1_DenormalizeOut.put(row26.PROCESOSASISTENCIALES_ID, denormalize_result_tDenormalize_1_DenormalizeOut);
}

 


	tos_count_tDenormalize_1_DenormalizeOut++;

/**
 * [tDenormalize_1_DenormalizeOut main ] stop
 */
	
	/**
	 * [tDenormalize_1_DenormalizeOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_1_DenormalizeOut process_data_begin ] stop
 */
	
	/**
	 * [tDenormalize_1_DenormalizeOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_1_DenormalizeOut process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_17 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

}
}finally{
	if (rs_tOracleInput_17 != null) {
		rs_tOracleInput_17.close();
	}
	if (stmt_tOracleInput_17 != null) {
		stmt_tOracleInput_17.close();
	}
}

globalMap.put("tOracleInput_17_NB_LINE",nb_line_tOracleInput_17);
 

ok_Hash.put("tOracleInput_17", true);
end_Hash.put("tOracleInput_17", System.currentTimeMillis());




/**
 * [tOracleInput_17 end ] stop
 */

	
	/**
	 * [tDenormalize_1_DenormalizeOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	
java.util.List<OnRowsEndStructtDenormalize_1> result_list_tDenormalize_1_DenormalizeOut = new java.util.ArrayList<OnRowsEndStructtDenormalize_1>();
if (denormalize_result_tDenormalize_1_DenormalizeOut != null) {
StringBuilder sb_tDenormalize_1_DenormalizeOut = null;

//generate result begin
java.util.Iterator<BigDecimal> PROCESOSASISTENCIALES_ID_iterator_tDenormalize_1_DenormalizeOut = hash_PROCESOSASISTENCIALES_ID_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(PROCESOSASISTENCIALES_ID_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	BigDecimal key_PROCESOSASISTENCIALES_ID_tDenormalize_1_DenormalizeOut = PROCESOSASISTENCIALES_ID_iterator_tDenormalize_1_DenormalizeOut.next();
	
	denormalize_result_tDenormalize_1_DenormalizeOut = hash_PROCESOSASISTENCIALES_ID_tDenormalize_1_DenormalizeOut.get(key_PROCESOSASISTENCIALES_ID_tDenormalize_1_DenormalizeOut);

	OnRowsEndStructtDenormalize_1 denormalize_row_tDenormalize_1_DenormalizeOut = new OnRowsEndStructtDenormalize_1();
                
	denormalize_row_tDenormalize_1_DenormalizeOut.PROCESOSASISTENCIALES_ID = key_PROCESOSASISTENCIALES_ID_tDenormalize_1_DenormalizeOut;
	for(String temp_tDenormalize_1_DenormalizeOut : denormalize_result_tDenormalize_1_DenormalizeOut.ACTIVIDADES){
	
		if(sb_tDenormalize_1_DenormalizeOut == null){
		
			sb_tDenormalize_1_DenormalizeOut = new StringBuilder();		
			sb_tDenormalize_1_DenormalizeOut.append(temp_tDenormalize_1_DenormalizeOut);
			
			
		}else{		
			sb_tDenormalize_1_DenormalizeOut.append(", ").append(temp_tDenormalize_1_DenormalizeOut);
			
		}
		
	}
	if (sb_tDenormalize_1_DenormalizeOut != null)
		denormalize_row_tDenormalize_1_DenormalizeOut.ACTIVIDADES = sb_tDenormalize_1_DenormalizeOut.toString();
	
	sb_tDenormalize_1_DenormalizeOut = null;
	
	//in the deepest end
	
	result_list_tDenormalize_1_DenormalizeOut.add(denormalize_row_tDenormalize_1_DenormalizeOut);

}

}
//generate result end
globalMap.put("tDenormalize_1", result_list_tDenormalize_1_DenormalizeOut);
globalMap.put("tDenormalize_1_DenormalizeOut_NB_LINE", result_list_tDenormalize_1_DenormalizeOut.size()); 

        


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tDenormalize_1_DenormalizeOut", true);
end_Hash.put("tDenormalize_1_DenormalizeOut", System.currentTimeMillis());




/**
 * [tDenormalize_1_DenormalizeOut end ] stop
 */


	
	/**
	 * [tAdvancedHash_row27 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row27", false);
		start_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row27";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tAdvancedHash_row27 = 0;
		

			   		// connection name:row27
			   		// source node:tDenormalize_1_ArrayIn - inputs:(OnRowsEnd) outputs:(row27,row27) | target node:tAdvancedHash_row27 - inputs:(row27) outputs:()
			   		// linked node: tMap_16 - inputs:(row7,row15,row27,row4,row5) outputs:(insert_c)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row27 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row27Struct>getLookup(matchingModeEnum_row27);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row27", tHash_Lookup_row27);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row27 begin ] stop
 */



	
	/**
	 * [tDenormalize_1_ArrayIn begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_1_ArrayIn", false);
		start_Hash.put("tDenormalize_1_ArrayIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	
		int tos_count_tDenormalize_1_ArrayIn = 0;
		

        
        int nb_line_tDenormalize_1_ArrayIn = 0;
        java.util.List<OnRowsEndStructtDenormalize_1> list_tDenormalize_1_ArrayIn = (java.util.List<OnRowsEndStructtDenormalize_1>)globalMap.get("tDenormalize_1");
        if(list_tDenormalize_1_ArrayIn == null) {
            list_tDenormalize_1_ArrayIn = new java.util.ArrayList<OnRowsEndStructtDenormalize_1>();
        }        
        for(OnRowsEndStructtDenormalize_1 row_tDenormalize_1_ArrayIn : list_tDenormalize_1_ArrayIn){
        					
    						row27.ACTIVIDADES = row_tDenormalize_1_ArrayIn.ACTIVIDADES;
    											
    						row27.PROCESOSASISTENCIALES_ID = row_tDenormalize_1_ArrayIn.PROCESOSASISTENCIALES_ID;
    						

 



/**
 * [tDenormalize_1_ArrayIn begin ] stop
 */
	
	/**
	 * [tDenormalize_1_ArrayIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 


	tos_count_tDenormalize_1_ArrayIn++;

/**
 * [tDenormalize_1_ArrayIn main ] stop
 */
	
	/**
	 * [tDenormalize_1_ArrayIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 



/**
 * [tDenormalize_1_ArrayIn process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row27"
						
						);
					}
					


			   
			   

					row27Struct row27_HashRow = new row27Struct();
		   	   	   
				
				row27_HashRow.ACTIVIDADES = row27.ACTIVIDADES;
				
				row27_HashRow.PROCESOSASISTENCIALES_ID = row27.PROCESOSASISTENCIALES_ID;
				
			tHash_Lookup_row27.put(row27_HashRow);
			
            




 


	tos_count_tAdvancedHash_row27++;

/**
 * [tAdvancedHash_row27 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";
	
	

 



/**
 * [tAdvancedHash_row27 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row27 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";
	
	

 



/**
 * [tAdvancedHash_row27 process_data_end ] stop
 */



	
	/**
	 * [tDenormalize_1_ArrayIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 



/**
 * [tDenormalize_1_ArrayIn process_data_end ] stop
 */
	
	/**
	 * [tDenormalize_1_ArrayIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	
	nb_line_tDenormalize_1_ArrayIn++;
}
globalMap.put("tDenormalize_1_ArrayIn_NB_LINE",nb_line_tDenormalize_1_ArrayIn);
 

ok_Hash.put("tDenormalize_1_ArrayIn", true);
end_Hash.put("tDenormalize_1_ArrayIn", System.currentTimeMillis());




/**
 * [tDenormalize_1_ArrayIn end ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";
	
	

tHash_Lookup_row27.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row27", true);
end_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());




/**
 * [tAdvancedHash_row27 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tDenormalize_1_ArrayIn"
							globalMap.remove("tDenormalize_1");
						
				try{
					
	
	/**
	 * [tOracleInput_17 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 finally ] stop
 */

	
	/**
	 * [tDenormalize_1_DenormalizeOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_1_DenormalizeOut finally ] stop
 */

	
	/**
	 * [tDenormalize_1_ArrayIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 



/**
 * [tDenormalize_1_ArrayIn finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";
	
	

 



/**
 * [tAdvancedHash_row27 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public String FCARDIACA_VALOR;

				public String getFCARDIACA_VALOR () {
					return this.FCARDIACA_VALOR;
				}

				public Boolean FCARDIACA_VALORIsNullable(){
				    return true;
				}
				public Boolean FCARDIACA_VALORIsKey(){
				    return false;
				}
				public Integer FCARDIACA_VALORLength(){
				    return 40;
				}
				public Integer FCARDIACA_VALORPrecision(){
				    return 0;
				}
				public String FCARDIACA_VALORDefault(){
				
					return null;
				
				}
				public String FCARDIACA_VALORComment(){
				
				    return "";
				
				}
				public String FCARDIACA_VALORPattern(){
				
					return "";
				
				}
				public String FCARDIACA_VALOROriginalDbColumnName(){
				
					return "FCARDIACA_VALOR";
				
				}

				
			    public String FCARDIACA_UMEDIDA;

				public String getFCARDIACA_UMEDIDA () {
					return this.FCARDIACA_UMEDIDA;
				}

				public Boolean FCARDIACA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean FCARDIACA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer FCARDIACA_UMEDIDALength(){
				    return 20;
				}
				public Integer FCARDIACA_UMEDIDAPrecision(){
				    return 0;
				}
				public String FCARDIACA_UMEDIDADefault(){
				
					return null;
				
				}
				public String FCARDIACA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String FCARDIACA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String FCARDIACA_UMEDIDAOriginalDbColumnName(){
				
					return "FCARDIACA_UMEDIDA";
				
				}

				
			    public String PARTERIALSIS_VALOR;

				public String getPARTERIALSIS_VALOR () {
					return this.PARTERIALSIS_VALOR;
				}

				public Boolean PARTERIALSIS_VALORIsNullable(){
				    return true;
				}
				public Boolean PARTERIALSIS_VALORIsKey(){
				    return false;
				}
				public Integer PARTERIALSIS_VALORLength(){
				    return 40;
				}
				public Integer PARTERIALSIS_VALORPrecision(){
				    return 0;
				}
				public String PARTERIALSIS_VALORDefault(){
				
					return null;
				
				}
				public String PARTERIALSIS_VALORComment(){
				
				    return "";
				
				}
				public String PARTERIALSIS_VALORPattern(){
				
					return "";
				
				}
				public String PARTERIALSIS_VALOROriginalDbColumnName(){
				
					return "PARTERIALSIS_VALOR";
				
				}

				
			    public String PARTERIALSIS_UMEDIDA;

				public String getPARTERIALSIS_UMEDIDA () {
					return this.PARTERIALSIS_UMEDIDA;
				}

				public Boolean PARTERIALSIS_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PARTERIALSIS_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PARTERIALSIS_UMEDIDALength(){
				    return 20;
				}
				public Integer PARTERIALSIS_UMEDIDAPrecision(){
				    return 0;
				}
				public String PARTERIALSIS_UMEDIDADefault(){
				
					return null;
				
				}
				public String PARTERIALSIS_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PARTERIALSIS_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PARTERIALSIS_UMEDIDAOriginalDbColumnName(){
				
					return "PARTERIALSIS_UMEDIDA";
				
				}

				
			    public String PARTERIALDIA_VALOR;

				public String getPARTERIALDIA_VALOR () {
					return this.PARTERIALDIA_VALOR;
				}

				public Boolean PARTERIALDIA_VALORIsNullable(){
				    return true;
				}
				public Boolean PARTERIALDIA_VALORIsKey(){
				    return false;
				}
				public Integer PARTERIALDIA_VALORLength(){
				    return 40;
				}
				public Integer PARTERIALDIA_VALORPrecision(){
				    return 0;
				}
				public String PARTERIALDIA_VALORDefault(){
				
					return null;
				
				}
				public String PARTERIALDIA_VALORComment(){
				
				    return "";
				
				}
				public String PARTERIALDIA_VALORPattern(){
				
					return "";
				
				}
				public String PARTERIALDIA_VALOROriginalDbColumnName(){
				
					return "PARTERIALDIA_VALOR";
				
				}

				
			    public String PARTERIALDIA_UMEDIDA;

				public String getPARTERIALDIA_UMEDIDA () {
					return this.PARTERIALDIA_UMEDIDA;
				}

				public Boolean PARTERIALDIA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PARTERIALDIA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PARTERIALDIA_UMEDIDALength(){
				    return 20;
				}
				public Integer PARTERIALDIA_UMEDIDAPrecision(){
				    return 0;
				}
				public String PARTERIALDIA_UMEDIDADefault(){
				
					return null;
				
				}
				public String PARTERIALDIA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PARTERIALDIA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PARTERIALDIA_UMEDIDAOriginalDbColumnName(){
				
					return "PARTERIALDIA_UMEDIDA";
				
				}

				
			    public String PARTERIALMED_VALOR;

				public String getPARTERIALMED_VALOR () {
					return this.PARTERIALMED_VALOR;
				}

				public Boolean PARTERIALMED_VALORIsNullable(){
				    return true;
				}
				public Boolean PARTERIALMED_VALORIsKey(){
				    return false;
				}
				public Integer PARTERIALMED_VALORLength(){
				    return 40;
				}
				public Integer PARTERIALMED_VALORPrecision(){
				    return 0;
				}
				public String PARTERIALMED_VALORDefault(){
				
					return null;
				
				}
				public String PARTERIALMED_VALORComment(){
				
				    return "";
				
				}
				public String PARTERIALMED_VALORPattern(){
				
					return "";
				
				}
				public String PARTERIALMED_VALOROriginalDbColumnName(){
				
					return "PARTERIALMED_VALOR";
				
				}

				
			    public String PARTERIALMED_UMEDIDA;

				public String getPARTERIALMED_UMEDIDA () {
					return this.PARTERIALMED_UMEDIDA;
				}

				public Boolean PARTERIALMED_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PARTERIALMED_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PARTERIALMED_UMEDIDALength(){
				    return 20;
				}
				public Integer PARTERIALMED_UMEDIDAPrecision(){
				    return 0;
				}
				public String PARTERIALMED_UMEDIDADefault(){
				
					return null;
				
				}
				public String PARTERIALMED_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PARTERIALMED_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PARTERIALMED_UMEDIDAOriginalDbColumnName(){
				
					return "PARTERIALMED_UMEDIDA";
				
				}

				
			    public String FRESPIRATORIA_VALOR;

				public String getFRESPIRATORIA_VALOR () {
					return this.FRESPIRATORIA_VALOR;
				}

				public Boolean FRESPIRATORIA_VALORIsNullable(){
				    return true;
				}
				public Boolean FRESPIRATORIA_VALORIsKey(){
				    return false;
				}
				public Integer FRESPIRATORIA_VALORLength(){
				    return 40;
				}
				public Integer FRESPIRATORIA_VALORPrecision(){
				    return 0;
				}
				public String FRESPIRATORIA_VALORDefault(){
				
					return null;
				
				}
				public String FRESPIRATORIA_VALORComment(){
				
				    return "";
				
				}
				public String FRESPIRATORIA_VALORPattern(){
				
					return "";
				
				}
				public String FRESPIRATORIA_VALOROriginalDbColumnName(){
				
					return "FRESPIRATORIA_VALOR";
				
				}

				
			    public String FRESPIRATORIA_UMEDIDA;

				public String getFRESPIRATORIA_UMEDIDA () {
					return this.FRESPIRATORIA_UMEDIDA;
				}

				public Boolean FRESPIRATORIA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean FRESPIRATORIA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer FRESPIRATORIA_UMEDIDALength(){
				    return 20;
				}
				public Integer FRESPIRATORIA_UMEDIDAPrecision(){
				    return 0;
				}
				public String FRESPIRATORIA_UMEDIDADefault(){
				
					return null;
				
				}
				public String FRESPIRATORIA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String FRESPIRATORIA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String FRESPIRATORIA_UMEDIDAOriginalDbColumnName(){
				
					return "FRESPIRATORIA_UMEDIDA";
				
				}

				
			    public String PULSO_VALOR;

				public String getPULSO_VALOR () {
					return this.PULSO_VALOR;
				}

				public Boolean PULSO_VALORIsNullable(){
				    return true;
				}
				public Boolean PULSO_VALORIsKey(){
				    return false;
				}
				public Integer PULSO_VALORLength(){
				    return 40;
				}
				public Integer PULSO_VALORPrecision(){
				    return 0;
				}
				public String PULSO_VALORDefault(){
				
					return null;
				
				}
				public String PULSO_VALORComment(){
				
				    return "";
				
				}
				public String PULSO_VALORPattern(){
				
					return "";
				
				}
				public String PULSO_VALOROriginalDbColumnName(){
				
					return "PULSO_VALOR";
				
				}

				
			    public String PULSO_UMEDIDA;

				public String getPULSO_UMEDIDA () {
					return this.PULSO_UMEDIDA;
				}

				public Boolean PULSO_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PULSO_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PULSO_UMEDIDALength(){
				    return 20;
				}
				public Integer PULSO_UMEDIDAPrecision(){
				    return 0;
				}
				public String PULSO_UMEDIDADefault(){
				
					return null;
				
				}
				public String PULSO_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PULSO_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PULSO_UMEDIDAOriginalDbColumnName(){
				
					return "PULSO_UMEDIDA";
				
				}

				
			    public String TEMPERATURA_VALOR;

				public String getTEMPERATURA_VALOR () {
					return this.TEMPERATURA_VALOR;
				}

				public Boolean TEMPERATURA_VALORIsNullable(){
				    return true;
				}
				public Boolean TEMPERATURA_VALORIsKey(){
				    return false;
				}
				public Integer TEMPERATURA_VALORLength(){
				    return 40;
				}
				public Integer TEMPERATURA_VALORPrecision(){
				    return 0;
				}
				public String TEMPERATURA_VALORDefault(){
				
					return null;
				
				}
				public String TEMPERATURA_VALORComment(){
				
				    return "";
				
				}
				public String TEMPERATURA_VALORPattern(){
				
					return "";
				
				}
				public String TEMPERATURA_VALOROriginalDbColumnName(){
				
					return "TEMPERATURA_VALOR";
				
				}

				
			    public String TEMPERATURA_UMEDIDA;

				public String getTEMPERATURA_UMEDIDA () {
					return this.TEMPERATURA_UMEDIDA;
				}

				public Boolean TEMPERATURA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean TEMPERATURA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer TEMPERATURA_UMEDIDALength(){
				    return 20;
				}
				public Integer TEMPERATURA_UMEDIDAPrecision(){
				    return 0;
				}
				public String TEMPERATURA_UMEDIDADefault(){
				
					return null;
				
				}
				public String TEMPERATURA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String TEMPERATURA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String TEMPERATURA_UMEDIDAOriginalDbColumnName(){
				
					return "TEMPERATURA_UMEDIDA";
				
				}

				
			    public String PESO_VALOR;

				public String getPESO_VALOR () {
					return this.PESO_VALOR;
				}

				public Boolean PESO_VALORIsNullable(){
				    return true;
				}
				public Boolean PESO_VALORIsKey(){
				    return false;
				}
				public Integer PESO_VALORLength(){
				    return 40;
				}
				public Integer PESO_VALORPrecision(){
				    return 0;
				}
				public String PESO_VALORDefault(){
				
					return null;
				
				}
				public String PESO_VALORComment(){
				
				    return "";
				
				}
				public String PESO_VALORPattern(){
				
					return "";
				
				}
				public String PESO_VALOROriginalDbColumnName(){
				
					return "PESO_VALOR";
				
				}

				
			    public String PESO_UMEDIDA;

				public String getPESO_UMEDIDA () {
					return this.PESO_UMEDIDA;
				}

				public Boolean PESO_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PESO_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PESO_UMEDIDALength(){
				    return 20;
				}
				public Integer PESO_UMEDIDAPrecision(){
				    return 0;
				}
				public String PESO_UMEDIDADefault(){
				
					return null;
				
				}
				public String PESO_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PESO_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PESO_UMEDIDAOriginalDbColumnName(){
				
					return "PESO_UMEDIDA";
				
				}

				
			    public String ESTATURA_VALOR;

				public String getESTATURA_VALOR () {
					return this.ESTATURA_VALOR;
				}

				public Boolean ESTATURA_VALORIsNullable(){
				    return true;
				}
				public Boolean ESTATURA_VALORIsKey(){
				    return false;
				}
				public Integer ESTATURA_VALORLength(){
				    return 40;
				}
				public Integer ESTATURA_VALORPrecision(){
				    return 0;
				}
				public String ESTATURA_VALORDefault(){
				
					return null;
				
				}
				public String ESTATURA_VALORComment(){
				
				    return "";
				
				}
				public String ESTATURA_VALORPattern(){
				
					return "";
				
				}
				public String ESTATURA_VALOROriginalDbColumnName(){
				
					return "ESTATURA_VALOR";
				
				}

				
			    public String ESTATURA_UMEDIDA;

				public String getESTATURA_UMEDIDA () {
					return this.ESTATURA_UMEDIDA;
				}

				public Boolean ESTATURA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean ESTATURA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer ESTATURA_UMEDIDALength(){
				    return 20;
				}
				public Integer ESTATURA_UMEDIDAPrecision(){
				    return 0;
				}
				public String ESTATURA_UMEDIDADefault(){
				
					return null;
				
				}
				public String ESTATURA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String ESTATURA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String ESTATURA_UMEDIDAOriginalDbColumnName(){
				
					return "ESTATURA_UMEDIDA";
				
				}

				
			    public String IMC_VALOR;

				public String getIMC_VALOR () {
					return this.IMC_VALOR;
				}

				public Boolean IMC_VALORIsNullable(){
				    return true;
				}
				public Boolean IMC_VALORIsKey(){
				    return false;
				}
				public Integer IMC_VALORLength(){
				    return 40;
				}
				public Integer IMC_VALORPrecision(){
				    return 0;
				}
				public String IMC_VALORDefault(){
				
					return null;
				
				}
				public String IMC_VALORComment(){
				
				    return "";
				
				}
				public String IMC_VALORPattern(){
				
					return "";
				
				}
				public String IMC_VALOROriginalDbColumnName(){
				
					return "IMC_VALOR";
				
				}

				
			    public String IMC_UMEDIDA;

				public String getIMC_UMEDIDA () {
					return this.IMC_UMEDIDA;
				}

				public Boolean IMC_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean IMC_UMEDIDAIsKey(){
				    return false;
				}
				public Integer IMC_UMEDIDALength(){
				    return 20;
				}
				public Integer IMC_UMEDIDAPrecision(){
				    return 0;
				}
				public String IMC_UMEDIDADefault(){
				
					return null;
				
				}
				public String IMC_UMEDIDAComment(){
				
				    return "";
				
				}
				public String IMC_UMEDIDAPattern(){
				
					return "";
				
				}
				public String IMC_UMEDIDAOriginalDbColumnName(){
				
					return "IMC_UMEDIDA";
				
				}

				
			    public String SOXIGENO_VALOR;

				public String getSOXIGENO_VALOR () {
					return this.SOXIGENO_VALOR;
				}

				public Boolean SOXIGENO_VALORIsNullable(){
				    return true;
				}
				public Boolean SOXIGENO_VALORIsKey(){
				    return false;
				}
				public Integer SOXIGENO_VALORLength(){
				    return 40;
				}
				public Integer SOXIGENO_VALORPrecision(){
				    return 0;
				}
				public String SOXIGENO_VALORDefault(){
				
					return null;
				
				}
				public String SOXIGENO_VALORComment(){
				
				    return "";
				
				}
				public String SOXIGENO_VALORPattern(){
				
					return "";
				
				}
				public String SOXIGENO_VALOROriginalDbColumnName(){
				
					return "SOXIGENO_VALOR";
				
				}

				
			    public String SOXIGENO_UMEDIDA;

				public String getSOXIGENO_UMEDIDA () {
					return this.SOXIGENO_UMEDIDA;
				}

				public Boolean SOXIGENO_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean SOXIGENO_UMEDIDAIsKey(){
				    return false;
				}
				public Integer SOXIGENO_UMEDIDALength(){
				    return 20;
				}
				public Integer SOXIGENO_UMEDIDAPrecision(){
				    return 0;
				}
				public String SOXIGENO_UMEDIDADefault(){
				
					return null;
				
				}
				public String SOXIGENO_UMEDIDAComment(){
				
				    return "";
				
				}
				public String SOXIGENO_UMEDIDAPattern(){
				
					return "";
				
				}
				public String SOXIGENO_UMEDIDAOriginalDbColumnName(){
				
					return "SOXIGENO_UMEDIDA";
				
				}

				
			    public String NCREATININA_VALOR;

				public String getNCREATININA_VALOR () {
					return this.NCREATININA_VALOR;
				}

				public Boolean NCREATININA_VALORIsNullable(){
				    return true;
				}
				public Boolean NCREATININA_VALORIsKey(){
				    return false;
				}
				public Integer NCREATININA_VALORLength(){
				    return 40;
				}
				public Integer NCREATININA_VALORPrecision(){
				    return 0;
				}
				public String NCREATININA_VALORDefault(){
				
					return null;
				
				}
				public String NCREATININA_VALORComment(){
				
				    return "";
				
				}
				public String NCREATININA_VALORPattern(){
				
					return "";
				
				}
				public String NCREATININA_VALOROriginalDbColumnName(){
				
					return "NCREATININA_VALOR";
				
				}

				
			    public String NCREATININA_UMEDIDA;

				public String getNCREATININA_UMEDIDA () {
					return this.NCREATININA_UMEDIDA;
				}

				public Boolean NCREATININA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean NCREATININA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer NCREATININA_UMEDIDALength(){
				    return 20;
				}
				public Integer NCREATININA_UMEDIDAPrecision(){
				    return 0;
				}
				public String NCREATININA_UMEDIDADefault(){
				
					return null;
				
				}
				public String NCREATININA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String NCREATININA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String NCREATININA_UMEDIDAOriginalDbColumnName(){
				
					return "NCREATININA_UMEDIDA";
				
				}

				
			    public String FGLOMERULAR_VALOR;

				public String getFGLOMERULAR_VALOR () {
					return this.FGLOMERULAR_VALOR;
				}

				public Boolean FGLOMERULAR_VALORIsNullable(){
				    return true;
				}
				public Boolean FGLOMERULAR_VALORIsKey(){
				    return false;
				}
				public Integer FGLOMERULAR_VALORLength(){
				    return 40;
				}
				public Integer FGLOMERULAR_VALORPrecision(){
				    return 0;
				}
				public String FGLOMERULAR_VALORDefault(){
				
					return null;
				
				}
				public String FGLOMERULAR_VALORComment(){
				
				    return "";
				
				}
				public String FGLOMERULAR_VALORPattern(){
				
					return "";
				
				}
				public String FGLOMERULAR_VALOROriginalDbColumnName(){
				
					return "FGLOMERULAR_VALOR";
				
				}

				
			    public String FGLOMERULAR_UMEDIDA;

				public String getFGLOMERULAR_UMEDIDA () {
					return this.FGLOMERULAR_UMEDIDA;
				}

				public Boolean FGLOMERULAR_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean FGLOMERULAR_UMEDIDAIsKey(){
				    return false;
				}
				public Integer FGLOMERULAR_UMEDIDALength(){
				    return 20;
				}
				public Integer FGLOMERULAR_UMEDIDAPrecision(){
				    return 0;
				}
				public String FGLOMERULAR_UMEDIDADefault(){
				
					return null;
				
				}
				public String FGLOMERULAR_UMEDIDAComment(){
				
				    return "";
				
				}
				public String FGLOMERULAR_UMEDIDAPattern(){
				
					return "";
				
				}
				public String FGLOMERULAR_UMEDIDAOriginalDbColumnName(){
				
					return "FGLOMERULAR_UMEDIDA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PROCESOSASISTENCIALES_ID == null) ? 0 : this.PROCESOSASISTENCIALES_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.PROCESOSASISTENCIALES_ID == null) {
							if (other.PROCESOSASISTENCIALES_ID != null)
								return false;
						
						} else if (!this.PROCESOSASISTENCIALES_ID.equals(other.PROCESOSASISTENCIALES_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.PROCESOSASISTENCIALES_ID = this.PROCESOSASISTENCIALES_ID;
	            other.FCARDIACA_VALOR = this.FCARDIACA_VALOR;
	            other.FCARDIACA_UMEDIDA = this.FCARDIACA_UMEDIDA;
	            other.PARTERIALSIS_VALOR = this.PARTERIALSIS_VALOR;
	            other.PARTERIALSIS_UMEDIDA = this.PARTERIALSIS_UMEDIDA;
	            other.PARTERIALDIA_VALOR = this.PARTERIALDIA_VALOR;
	            other.PARTERIALDIA_UMEDIDA = this.PARTERIALDIA_UMEDIDA;
	            other.PARTERIALMED_VALOR = this.PARTERIALMED_VALOR;
	            other.PARTERIALMED_UMEDIDA = this.PARTERIALMED_UMEDIDA;
	            other.FRESPIRATORIA_VALOR = this.FRESPIRATORIA_VALOR;
	            other.FRESPIRATORIA_UMEDIDA = this.FRESPIRATORIA_UMEDIDA;
	            other.PULSO_VALOR = this.PULSO_VALOR;
	            other.PULSO_UMEDIDA = this.PULSO_UMEDIDA;
	            other.TEMPERATURA_VALOR = this.TEMPERATURA_VALOR;
	            other.TEMPERATURA_UMEDIDA = this.TEMPERATURA_UMEDIDA;
	            other.PESO_VALOR = this.PESO_VALOR;
	            other.PESO_UMEDIDA = this.PESO_UMEDIDA;
	            other.ESTATURA_VALOR = this.ESTATURA_VALOR;
	            other.ESTATURA_UMEDIDA = this.ESTATURA_UMEDIDA;
	            other.IMC_VALOR = this.IMC_VALOR;
	            other.IMC_UMEDIDA = this.IMC_UMEDIDA;
	            other.SOXIGENO_VALOR = this.SOXIGENO_VALOR;
	            other.SOXIGENO_UMEDIDA = this.SOXIGENO_UMEDIDA;
	            other.NCREATININA_VALOR = this.NCREATININA_VALOR;
	            other.NCREATININA_UMEDIDA = this.NCREATININA_UMEDIDA;
	            other.FGLOMERULAR_VALOR = this.FGLOMERULAR_VALOR;
	            other.FGLOMERULAR_UMEDIDA = this.FGLOMERULAR_UMEDIDA;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.PROCESOSASISTENCIALES_ID = this.PROCESOSASISTENCIALES_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.FCARDIACA_VALOR = readString(dis,ois);
					
						this.FCARDIACA_UMEDIDA = readString(dis,ois);
					
						this.PARTERIALSIS_VALOR = readString(dis,ois);
					
						this.PARTERIALSIS_UMEDIDA = readString(dis,ois);
					
						this.PARTERIALDIA_VALOR = readString(dis,ois);
					
						this.PARTERIALDIA_UMEDIDA = readString(dis,ois);
					
						this.PARTERIALMED_VALOR = readString(dis,ois);
					
						this.PARTERIALMED_UMEDIDA = readString(dis,ois);
					
						this.FRESPIRATORIA_VALOR = readString(dis,ois);
					
						this.FRESPIRATORIA_UMEDIDA = readString(dis,ois);
					
						this.PULSO_VALOR = readString(dis,ois);
					
						this.PULSO_UMEDIDA = readString(dis,ois);
					
						this.TEMPERATURA_VALOR = readString(dis,ois);
					
						this.TEMPERATURA_UMEDIDA = readString(dis,ois);
					
						this.PESO_VALOR = readString(dis,ois);
					
						this.PESO_UMEDIDA = readString(dis,ois);
					
						this.ESTATURA_VALOR = readString(dis,ois);
					
						this.ESTATURA_UMEDIDA = readString(dis,ois);
					
						this.IMC_VALOR = readString(dis,ois);
					
						this.IMC_UMEDIDA = readString(dis,ois);
					
						this.SOXIGENO_VALOR = readString(dis,ois);
					
						this.SOXIGENO_UMEDIDA = readString(dis,ois);
					
						this.NCREATININA_VALOR = readString(dis,ois);
					
						this.NCREATININA_UMEDIDA = readString(dis,ois);
					
						this.FGLOMERULAR_VALOR = readString(dis,ois);
					
						this.FGLOMERULAR_UMEDIDA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.FCARDIACA_VALOR = readString(dis,objectIn);
					
						this.FCARDIACA_UMEDIDA = readString(dis,objectIn);
					
						this.PARTERIALSIS_VALOR = readString(dis,objectIn);
					
						this.PARTERIALSIS_UMEDIDA = readString(dis,objectIn);
					
						this.PARTERIALDIA_VALOR = readString(dis,objectIn);
					
						this.PARTERIALDIA_UMEDIDA = readString(dis,objectIn);
					
						this.PARTERIALMED_VALOR = readString(dis,objectIn);
					
						this.PARTERIALMED_UMEDIDA = readString(dis,objectIn);
					
						this.FRESPIRATORIA_VALOR = readString(dis,objectIn);
					
						this.FRESPIRATORIA_UMEDIDA = readString(dis,objectIn);
					
						this.PULSO_VALOR = readString(dis,objectIn);
					
						this.PULSO_UMEDIDA = readString(dis,objectIn);
					
						this.TEMPERATURA_VALOR = readString(dis,objectIn);
					
						this.TEMPERATURA_UMEDIDA = readString(dis,objectIn);
					
						this.PESO_VALOR = readString(dis,objectIn);
					
						this.PESO_UMEDIDA = readString(dis,objectIn);
					
						this.ESTATURA_VALOR = readString(dis,objectIn);
					
						this.ESTATURA_UMEDIDA = readString(dis,objectIn);
					
						this.IMC_VALOR = readString(dis,objectIn);
					
						this.IMC_UMEDIDA = readString(dis,objectIn);
					
						this.SOXIGENO_VALOR = readString(dis,objectIn);
					
						this.SOXIGENO_UMEDIDA = readString(dis,objectIn);
					
						this.NCREATININA_VALOR = readString(dis,objectIn);
					
						this.NCREATININA_UMEDIDA = readString(dis,objectIn);
					
						this.FGLOMERULAR_VALOR = readString(dis,objectIn);
					
						this.FGLOMERULAR_UMEDIDA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.FCARDIACA_VALOR, dos, oos);
					
						writeString(this.FCARDIACA_UMEDIDA, dos, oos);
					
						writeString(this.PARTERIALSIS_VALOR, dos, oos);
					
						writeString(this.PARTERIALSIS_UMEDIDA, dos, oos);
					
						writeString(this.PARTERIALDIA_VALOR, dos, oos);
					
						writeString(this.PARTERIALDIA_UMEDIDA, dos, oos);
					
						writeString(this.PARTERIALMED_VALOR, dos, oos);
					
						writeString(this.PARTERIALMED_UMEDIDA, dos, oos);
					
						writeString(this.FRESPIRATORIA_VALOR, dos, oos);
					
						writeString(this.FRESPIRATORIA_UMEDIDA, dos, oos);
					
						writeString(this.PULSO_VALOR, dos, oos);
					
						writeString(this.PULSO_UMEDIDA, dos, oos);
					
						writeString(this.TEMPERATURA_VALOR, dos, oos);
					
						writeString(this.TEMPERATURA_UMEDIDA, dos, oos);
					
						writeString(this.PESO_VALOR, dos, oos);
					
						writeString(this.PESO_UMEDIDA, dos, oos);
					
						writeString(this.ESTATURA_VALOR, dos, oos);
					
						writeString(this.ESTATURA_UMEDIDA, dos, oos);
					
						writeString(this.IMC_VALOR, dos, oos);
					
						writeString(this.IMC_UMEDIDA, dos, oos);
					
						writeString(this.SOXIGENO_VALOR, dos, oos);
					
						writeString(this.SOXIGENO_UMEDIDA, dos, oos);
					
						writeString(this.NCREATININA_VALOR, dos, oos);
					
						writeString(this.NCREATININA_UMEDIDA, dos, oos);
					
						writeString(this.FGLOMERULAR_VALOR, dos, oos);
					
						writeString(this.FGLOMERULAR_UMEDIDA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.FCARDIACA_VALOR, dos, objectOut);
					
						writeString(this.FCARDIACA_UMEDIDA, dos, objectOut);
					
						writeString(this.PARTERIALSIS_VALOR, dos, objectOut);
					
						writeString(this.PARTERIALSIS_UMEDIDA, dos, objectOut);
					
						writeString(this.PARTERIALDIA_VALOR, dos, objectOut);
					
						writeString(this.PARTERIALDIA_UMEDIDA, dos, objectOut);
					
						writeString(this.PARTERIALMED_VALOR, dos, objectOut);
					
						writeString(this.PARTERIALMED_UMEDIDA, dos, objectOut);
					
						writeString(this.FRESPIRATORIA_VALOR, dos, objectOut);
					
						writeString(this.FRESPIRATORIA_UMEDIDA, dos, objectOut);
					
						writeString(this.PULSO_VALOR, dos, objectOut);
					
						writeString(this.PULSO_UMEDIDA, dos, objectOut);
					
						writeString(this.TEMPERATURA_VALOR, dos, objectOut);
					
						writeString(this.TEMPERATURA_UMEDIDA, dos, objectOut);
					
						writeString(this.PESO_VALOR, dos, objectOut);
					
						writeString(this.PESO_UMEDIDA, dos, objectOut);
					
						writeString(this.ESTATURA_VALOR, dos, objectOut);
					
						writeString(this.ESTATURA_UMEDIDA, dos, objectOut);
					
						writeString(this.IMC_VALOR, dos, objectOut);
					
						writeString(this.IMC_UMEDIDA, dos, objectOut);
					
						writeString(this.SOXIGENO_VALOR, dos, objectOut);
					
						writeString(this.SOXIGENO_UMEDIDA, dos, objectOut);
					
						writeString(this.NCREATININA_VALOR, dos, objectOut);
					
						writeString(this.NCREATININA_UMEDIDA, dos, objectOut);
					
						writeString(this.FGLOMERULAR_VALOR, dos, objectOut);
					
						writeString(this.FGLOMERULAR_UMEDIDA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",FCARDIACA_VALOR="+FCARDIACA_VALOR);
		sb.append(",FCARDIACA_UMEDIDA="+FCARDIACA_UMEDIDA);
		sb.append(",PARTERIALSIS_VALOR="+PARTERIALSIS_VALOR);
		sb.append(",PARTERIALSIS_UMEDIDA="+PARTERIALSIS_UMEDIDA);
		sb.append(",PARTERIALDIA_VALOR="+PARTERIALDIA_VALOR);
		sb.append(",PARTERIALDIA_UMEDIDA="+PARTERIALDIA_UMEDIDA);
		sb.append(",PARTERIALMED_VALOR="+PARTERIALMED_VALOR);
		sb.append(",PARTERIALMED_UMEDIDA="+PARTERIALMED_UMEDIDA);
		sb.append(",FRESPIRATORIA_VALOR="+FRESPIRATORIA_VALOR);
		sb.append(",FRESPIRATORIA_UMEDIDA="+FRESPIRATORIA_UMEDIDA);
		sb.append(",PULSO_VALOR="+PULSO_VALOR);
		sb.append(",PULSO_UMEDIDA="+PULSO_UMEDIDA);
		sb.append(",TEMPERATURA_VALOR="+TEMPERATURA_VALOR);
		sb.append(",TEMPERATURA_UMEDIDA="+TEMPERATURA_UMEDIDA);
		sb.append(",PESO_VALOR="+PESO_VALOR);
		sb.append(",PESO_UMEDIDA="+PESO_UMEDIDA);
		sb.append(",ESTATURA_VALOR="+ESTATURA_VALOR);
		sb.append(",ESTATURA_UMEDIDA="+ESTATURA_UMEDIDA);
		sb.append(",IMC_VALOR="+IMC_VALOR);
		sb.append(",IMC_UMEDIDA="+IMC_UMEDIDA);
		sb.append(",SOXIGENO_VALOR="+SOXIGENO_VALOR);
		sb.append(",SOXIGENO_UMEDIDA="+SOXIGENO_UMEDIDA);
		sb.append(",NCREATININA_VALOR="+NCREATININA_VALOR);
		sb.append(",NCREATININA_UMEDIDA="+NCREATININA_UMEDIDA);
		sb.append(",FGLOMERULAR_VALOR="+FGLOMERULAR_VALOR);
		sb.append(",FGLOMERULAR_UMEDIDA="+FGLOMERULAR_UMEDIDA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PROCESOSASISTENCIALES_ID, other.PROCESOSASISTENCIALES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tHashInput_3 - inputs:(after_tOracleInput_7) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_16 - inputs:(row7,row15,row27,row4,row5) outputs:(insert_c)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_Rips_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row2Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row2Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row4.PROCESOSASISTENCIALES_ID = next_tHashInput_3.PROCESOSASISTENCIALES_ID;
	row4.FCARDIACA_VALOR = next_tHashInput_3.FCARDIACA_VALOR;
	row4.FCARDIACA_UMEDIDA = next_tHashInput_3.FCARDIACA_UMEDIDA;
	row4.PARTERIALSIS_VALOR = next_tHashInput_3.PARTERIALSIS_VALOR;
	row4.PARTERIALSIS_UMEDIDA = next_tHashInput_3.PARTERIALSIS_UMEDIDA;
	row4.PARTERIALDIA_VALOR = next_tHashInput_3.PARTERIALDIA_VALOR;
	row4.PARTERIALDIA_UMEDIDA = next_tHashInput_3.PARTERIALDIA_UMEDIDA;
	row4.PARTERIALMED_VALOR = next_tHashInput_3.PARTERIALMED_VALOR;
	row4.PARTERIALMED_UMEDIDA = next_tHashInput_3.PARTERIALMED_UMEDIDA;
	row4.FRESPIRATORIA_VALOR = next_tHashInput_3.FRESPIRATORIA_VALOR;
	row4.FRESPIRATORIA_UMEDIDA = next_tHashInput_3.FRESPIRATORIA_UMEDIDA;
	row4.PULSO_VALOR = next_tHashInput_3.PULSO_VALOR;
	row4.PULSO_UMEDIDA = next_tHashInput_3.PULSO_UMEDIDA;
	row4.TEMPERATURA_VALOR = next_tHashInput_3.TEMPERATURA_VALOR;
	row4.TEMPERATURA_UMEDIDA = next_tHashInput_3.TEMPERATURA_UMEDIDA;
	row4.PESO_VALOR = next_tHashInput_3.PESO_VALOR;
	row4.PESO_UMEDIDA = next_tHashInput_3.PESO_UMEDIDA;
	row4.ESTATURA_VALOR = next_tHashInput_3.ESTATURA_VALOR;
	row4.ESTATURA_UMEDIDA = next_tHashInput_3.ESTATURA_UMEDIDA;
	row4.IMC_VALOR = next_tHashInput_3.IMC_VALOR;
	row4.IMC_UMEDIDA = next_tHashInput_3.IMC_UMEDIDA;
	row4.SOXIGENO_VALOR = next_tHashInput_3.SOXIGENO_VALOR;
	row4.SOXIGENO_UMEDIDA = next_tHashInput_3.SOXIGENO_UMEDIDA;
	row4.NCREATININA_VALOR = next_tHashInput_3.NCREATININA_VALOR;
	row4.NCREATININA_UMEDIDA = next_tHashInput_3.NCREATININA_UMEDIDA;
	row4.FGLOMERULAR_VALOR = next_tHashInput_3.FGLOMERULAR_VALOR;
	row4.FGLOMERULAR_UMEDIDA = next_tHashInput_3.FGLOMERULAR_UMEDIDA;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.PROCESOSASISTENCIALES_ID = row4.PROCESOSASISTENCIALES_ID;
				
				row4_HashRow.FCARDIACA_VALOR = row4.FCARDIACA_VALOR;
				
				row4_HashRow.FCARDIACA_UMEDIDA = row4.FCARDIACA_UMEDIDA;
				
				row4_HashRow.PARTERIALSIS_VALOR = row4.PARTERIALSIS_VALOR;
				
				row4_HashRow.PARTERIALSIS_UMEDIDA = row4.PARTERIALSIS_UMEDIDA;
				
				row4_HashRow.PARTERIALDIA_VALOR = row4.PARTERIALDIA_VALOR;
				
				row4_HashRow.PARTERIALDIA_UMEDIDA = row4.PARTERIALDIA_UMEDIDA;
				
				row4_HashRow.PARTERIALMED_VALOR = row4.PARTERIALMED_VALOR;
				
				row4_HashRow.PARTERIALMED_UMEDIDA = row4.PARTERIALMED_UMEDIDA;
				
				row4_HashRow.FRESPIRATORIA_VALOR = row4.FRESPIRATORIA_VALOR;
				
				row4_HashRow.FRESPIRATORIA_UMEDIDA = row4.FRESPIRATORIA_UMEDIDA;
				
				row4_HashRow.PULSO_VALOR = row4.PULSO_VALOR;
				
				row4_HashRow.PULSO_UMEDIDA = row4.PULSO_UMEDIDA;
				
				row4_HashRow.TEMPERATURA_VALOR = row4.TEMPERATURA_VALOR;
				
				row4_HashRow.TEMPERATURA_UMEDIDA = row4.TEMPERATURA_UMEDIDA;
				
				row4_HashRow.PESO_VALOR = row4.PESO_VALOR;
				
				row4_HashRow.PESO_UMEDIDA = row4.PESO_UMEDIDA;
				
				row4_HashRow.ESTATURA_VALOR = row4.ESTATURA_VALOR;
				
				row4_HashRow.ESTATURA_UMEDIDA = row4.ESTATURA_UMEDIDA;
				
				row4_HashRow.IMC_VALOR = row4.IMC_VALOR;
				
				row4_HashRow.IMC_UMEDIDA = row4.IMC_UMEDIDA;
				
				row4_HashRow.SOXIGENO_VALOR = row4.SOXIGENO_VALOR;
				
				row4_HashRow.SOXIGENO_UMEDIDA = row4.SOXIGENO_UMEDIDA;
				
				row4_HashRow.NCREATININA_VALOR = row4.NCREATININA_VALOR;
				
				row4_HashRow.NCREATININA_UMEDIDA = row4.NCREATININA_UMEDIDA;
				
				row4_HashRow.FGLOMERULAR_VALOR = row4.FGLOMERULAR_VALOR;
				
				row4_HashRow.FGLOMERULAR_UMEDIDA = row4.FGLOMERULAR_UMEDIDA;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Rips_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 500;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String VALOR;

				public String getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return null;
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public String NOMBRE_UNIDAD;

				public String getNOMBRE_UNIDAD () {
					return this.NOMBRE_UNIDAD;
				}

				public Boolean NOMBRE_UNIDADIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_UNIDADIsKey(){
				    return false;
				}
				public Integer NOMBRE_UNIDADLength(){
				    return 100;
				}
				public Integer NOMBRE_UNIDADPrecision(){
				    return 0;
				}
				public String NOMBRE_UNIDADDefault(){
				
					return null;
				
				}
				public String NOMBRE_UNIDADComment(){
				
				    return "";
				
				}
				public String NOMBRE_UNIDADPattern(){
				
					return "";
				
				}
				public String NOMBRE_UNIDADOriginalDbColumnName(){
				
					return "NOMBRE_UNIDAD";
				
				}

				
			    public String SIGLA_UNIDAD;

				public String getSIGLA_UNIDAD () {
					return this.SIGLA_UNIDAD;
				}

				public Boolean SIGLA_UNIDADIsNullable(){
				    return true;
				}
				public Boolean SIGLA_UNIDADIsKey(){
				    return false;
				}
				public Integer SIGLA_UNIDADLength(){
				    return 25;
				}
				public Integer SIGLA_UNIDADPrecision(){
				    return 0;
				}
				public String SIGLA_UNIDADDefault(){
				
					return null;
				
				}
				public String SIGLA_UNIDADComment(){
				
				    return "";
				
				}
				public String SIGLA_UNIDADPattern(){
				
					return "";
				
				}
				public String SIGLA_UNIDADOriginalDbColumnName(){
				
					return "SIGLA_UNIDAD";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PROCESOSASISTENCIALES_ID == null) ? 0 : this.PROCESOSASISTENCIALES_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.PROCESOSASISTENCIALES_ID == null) {
							if (other.PROCESOSASISTENCIALES_ID != null)
								return false;
						
						} else if (!this.PROCESOSASISTENCIALES_ID.equals(other.PROCESOSASISTENCIALES_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            other.VALOR = this.VALOR;
	            other.PROCESOSASISTENCIALES_ID = this.PROCESOSASISTENCIALES_ID;
	            other.NOMBRE_UNIDAD = this.NOMBRE_UNIDAD;
	            other.SIGLA_UNIDAD = this.SIGLA_UNIDAD;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.PROCESOSASISTENCIALES_ID = this.PROCESOSASISTENCIALES_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
						this.SIGLA = readString(dis,ois);
					
						this.VALOR = readString(dis,ois);
					
						this.NOMBRE_UNIDAD = readString(dis,ois);
					
						this.SIGLA_UNIDAD = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
						this.SIGLA = readString(dis,objectIn);
					
						this.VALOR = readString(dis,objectIn);
					
						this.NOMBRE_UNIDAD = readString(dis,objectIn);
					
						this.SIGLA_UNIDAD = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
						writeString(this.SIGLA, dos, oos);
					
						writeString(this.VALOR, dos, oos);
					
						writeString(this.NOMBRE_UNIDAD, dos, oos);
					
						writeString(this.SIGLA_UNIDAD, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
						writeString(this.SIGLA, dos, objectOut);
					
						writeString(this.VALOR, dos, objectOut);
					
						writeString(this.NOMBRE_UNIDAD, dos, objectOut);
					
						writeString(this.SIGLA_UNIDAD, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",VALOR="+VALOR);
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",NOMBRE_UNIDAD="+NOMBRE_UNIDAD);
		sb.append(",SIGLA_UNIDAD="+SIGLA_UNIDAD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PROCESOSASISTENCIALES_ID, other.PROCESOSASISTENCIALES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tAdvancedHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row5", false);
		start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tAdvancedHash_row5 = 0;
		

			   		// connection name:row5
			   		// source node:tOracleInput_12 - inputs:(after_tOracleInput_7) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
			   		// linked node: tMap_16 - inputs:(row7,row15,row27,row4,row5) outputs:(insert_c)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row5Struct>getLookup(matchingModeEnum_row5);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row5 begin ] stop
 */



	
	/**
	 * [tOracleInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_12", false);
		start_Hash.put("tOracleInput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_12";
	
	
		int tos_count_tOracleInput_12 = 0;
		
	


	
		    int nb_line_tOracleInput_12 = 0;
		    java.sql.Connection conn_tOracleInput_12 = null;
				conn_tOracleInput_12 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
				
                boolean isTimeZoneNull_tOracleInput_12 = false;
				boolean isConnectionWrapped_tOracleInput_12 = !(conn_tOracleInput_12 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_12.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_12 = null;
                if (isConnectionWrapped_tOracleInput_12) {
					unwrappedOraConn_tOracleInput_12 = conn_tOracleInput_12.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_12 != null) {
                        isTimeZoneNull_tOracleInput_12 = (unwrappedOraConn_tOracleInput_12.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_12 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_12).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_12) {
					java.sql.Statement stmtGetTZ_tOracleInput_12 = conn_tOracleInput_12.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_12 = stmtGetTZ_tOracleInput_12.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_12 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_12.next()) {
						sessionTimezone_tOracleInput_12 = rsGetTZ_tOracleInput_12.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_12 && unwrappedOraConn_tOracleInput_12 != null) {
                        unwrappedOraConn_tOracleInput_12.setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_12).setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_12 = conn_tOracleInput_12.createStatement();

		    String dbquery_tOracleInput_12 = "\nselect PARA.NOMBRE, PARA.SIGLA, GEXA.VALOR, gexa.procesosasistenciales_id,\nUME.NOMBRE AS NOMBRE_UNIDAD, UME.SIGLA AS"
+" SIGLA_UNIDAD\nfrom  HCL_PROCESOSASISTENCIALES PROC\nINNER JOIN GEN_HEXAMENES GEXA ON PROC.ID = GEXA.PROCESOSASISTENCIAL"
+"ES_ID\nINNER JOIN GEN_PARAMEXAMENES PARA ON GEXA.PARAMEXAMENES_ID = PARA.ID\nLEFT JOIN MED_UMEDIDA UME ON para.umedida_i"
+"d = UME.ID\nWHERE\nPARA.SIGLA = 'PABD' AND\nPARA.ESTREGISTRO_ID = 1 AND\nGEXA.ESTREGISTRO_ID = 1\n";
		    

		    globalMap.put("tOracleInput_12_QUERY",dbquery_tOracleInput_12);

		    java.sql.ResultSet rs_tOracleInput_12 = null;

		    try {
		    	rs_tOracleInput_12 = stmt_tOracleInput_12.executeQuery(dbquery_tOracleInput_12);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_12 = rs_tOracleInput_12.getMetaData();
		    	int colQtyInRs_tOracleInput_12 = rsmd_tOracleInput_12.getColumnCount();

		    String tmpContent_tOracleInput_12 = null;
		    
		    
		    while (rs_tOracleInput_12.next()) {
		        nb_line_tOracleInput_12++;
		        
							if(colQtyInRs_tOracleInput_12 < 1) {
								row5.NOMBRE = null;
							} else {
	                         		
        	row5.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_12, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_12 < 2) {
								row5.SIGLA = null;
							} else {
	                         		
        	row5.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_12, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_12 < 3) {
								row5.VALOR = null;
							} else {
	                         		
        	row5.VALOR = routines.system.JDBCUtil.getString(rs_tOracleInput_12, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_12 < 4) {
								row5.PROCESOSASISTENCIALES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(4) != null) {
						row5.PROCESOSASISTENCIALES_ID = rs_tOracleInput_12.getBigDecimal(4);
					} else {
				
						row5.PROCESOSASISTENCIALES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 5) {
								row5.NOMBRE_UNIDAD = null;
							} else {
	                         		
        	row5.NOMBRE_UNIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_12, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_12 < 6) {
								row5.SIGLA_UNIDAD = null;
							} else {
	                         		
        	row5.SIGLA_UNIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_12, 6, false);
		                    }
					




 



/**
 * [tOracleInput_12 begin ] stop
 */
	
	/**
	 * [tOracleInput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 


	tos_count_tOracleInput_12++;

/**
 * [tOracleInput_12 main ] stop
 */
	
	/**
	 * [tOracleInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					


			   
			   

					row5Struct row5_HashRow = new row5Struct();
		   	   	   
				
				row5_HashRow.NOMBRE = row5.NOMBRE;
				
				row5_HashRow.SIGLA = row5.SIGLA;
				
				row5_HashRow.VALOR = row5.VALOR;
				
				row5_HashRow.PROCESOSASISTENCIALES_ID = row5.PROCESOSASISTENCIALES_ID;
				
				row5_HashRow.NOMBRE_UNIDAD = row5.NOMBRE_UNIDAD;
				
				row5_HashRow.SIGLA_UNIDAD = row5.SIGLA_UNIDAD;
				
			tHash_Lookup_row5.put(row5_HashRow);
			
            




 


	tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	

 



/**
 * [tAdvancedHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	

 



/**
 * [tAdvancedHash_row5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

}
}finally{
	if (rs_tOracleInput_12 != null) {
		rs_tOracleInput_12.close();
	}
	if (stmt_tOracleInput_12 != null) {
		stmt_tOracleInput_12.close();
	}
}

globalMap.put("tOracleInput_12_NB_LINE",nb_line_tOracleInput_12);
 

ok_Hash.put("tOracleInput_12", true);
end_Hash.put("tOracleInput_12", System.currentTimeMillis());




/**
 * [tOracleInput_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	

tHash_Lookup_row5.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row5", true);
end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());




/**
 * [tAdvancedHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	

 



/**
 * [tAdvancedHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_3", false);
		start_Hash.put("tOracleConnection_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_3";
	
	
		int tos_count_tOracleConnection_3 = 0;
		
	

	
        String url_tOracleConnection_3 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_3", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_3 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_3 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_3 = decryptedPassword_tOracleConnection_3;
	
	
	java.sql.Connection conn_tOracleConnection_3 = null;
	
		
			String driverClass_tOracleConnection_3 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_3 = java.lang.Class.forName(driverClass_tOracleConnection_3);
			globalMap.put("driverClass_tOracleConnection_3", driverClass_tOracleConnection_3);
		
			java.util.Properties atnParamsPrope_tOracleConnection_3 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_3.put("user",dbUser_tOracleConnection_3);
			    atnParamsPrope_tOracleConnection_3.put("password",dbPwd_tOracleConnection_3);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_3.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_3 = java.sql.DriverManager.getConnection(url_tOracleConnection_3, atnParamsPrope_tOracleConnection_3);

		globalMap.put("conn_tOracleConnection_3", conn_tOracleConnection_3);
	if (null != conn_tOracleConnection_3) {
		
			conn_tOracleConnection_3.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_3",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_3",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_3",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_3", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_3",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_3",dbPwd_tOracleConnection_3);

 



/**
 * [tOracleConnection_3 begin ] stop
 */
	
	/**
	 * [tOracleConnection_3 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_3";
	
	

 


	tos_count_tOracleConnection_3++;

/**
 * [tOracleConnection_3 main ] stop
 */
	
	/**
	 * [tOracleConnection_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_3";
	
	

 



/**
 * [tOracleConnection_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_3";
	
	

 



/**
 * [tOracleConnection_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_3 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_3";
	
	

 

ok_Hash.put("tOracleConnection_3", true);
end_Hash.put("tOracleConnection_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk38", 0, "ok");
				}
				tOracleConnection_4Process(globalMap);



/**
 * [tOracleConnection_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_3";
	
	

 



/**
 * [tOracleConnection_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_3_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_4", false);
		start_Hash.put("tOracleConnection_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_4";
	
	
		int tos_count_tOracleConnection_4 = 0;
		
	

	
        String url_tOracleConnection_4 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_4", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_4 = context.db_destino_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_4 = context.db_destino_Password; 
		String dbPwd_tOracleConnection_4 = decryptedPassword_tOracleConnection_4;
	
	
	java.sql.Connection conn_tOracleConnection_4 = null;
	
		
			String driverClass_tOracleConnection_4 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_4 = java.lang.Class.forName(driverClass_tOracleConnection_4);
			globalMap.put("driverClass_tOracleConnection_4", driverClass_tOracleConnection_4);
		
			java.util.Properties atnParamsPrope_tOracleConnection_4 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_4.put("user",dbUser_tOracleConnection_4);
			    atnParamsPrope_tOracleConnection_4.put("password",dbPwd_tOracleConnection_4);
			if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                atnParamsPrope_tOracleConnection_4.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_4 = java.sql.DriverManager.getConnection(url_tOracleConnection_4, atnParamsPrope_tOracleConnection_4);

		globalMap.put("conn_tOracleConnection_4", conn_tOracleConnection_4);
	if (null != conn_tOracleConnection_4) {
		
			conn_tOracleConnection_4.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_4",context.db_destino_Server);
        globalMap.put("port_" + "tOracleConnection_4",context.db_destino_Port);
        globalMap.put("dbname_" + "tOracleConnection_4",context.db_destino_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_4", context.db_destino_Schema);
	globalMap.put("username_" + "tOracleConnection_4",context.db_destino_Login);
	globalMap.put("password_" + "tOracleConnection_4",dbPwd_tOracleConnection_4);

 



/**
 * [tOracleConnection_4 begin ] stop
 */
	
	/**
	 * [tOracleConnection_4 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_4";
	
	

 


	tos_count_tOracleConnection_4++;

/**
 * [tOracleConnection_4 main ] stop
 */
	
	/**
	 * [tOracleConnection_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_4";
	
	

 



/**
 * [tOracleConnection_4 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_4";
	
	

 



/**
 * [tOracleConnection_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_4 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_4";
	
	

 

ok_Hash.put("tOracleConnection_4", true);
end_Hash.put("tOracleConnection_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk39", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tOracleConnection_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_4";
	
	

 



/**
 * [tOracleConnection_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_4_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


System.out.println("  - Start RIPS: " + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );

if (context.ACTUALIZACION_TOTAL) {

System.out.println("=======Tipo de actualización total========");

/*Condiciones consultas*/
context.CONDICION_CONSULTAS = "";
context.CONDICION_ACTIVIDADES_CONSULTAS = "";
context.CONDICION_FINDRISK_CONSULTAS = "";
/*Condiciones signos vitales*/
context.CONDICION_SIGNOS_VITALES = "";
/*Condiciones procedimientos*/
context.CONDICION_PROCEDIMIENTOS_CGP = "";
context.CONDICION_PROCEDIMIENTOS_CGP2 = "";
context.CONDICION_PROCEDIMIENTOS_PQX = "";
context.CONDICION_PROCEDIMIENTOS_ODO = "";
context.CONDICION_PROCEDIMIENTOS_RCA = "";
/*Condicion otros servicios*/
context.CONDICION_OTROS_SERVICIOS = "";
context.CONDICION_OTROS_SERVICIOS2 ="";
/*Condicion hospitalización*/
context.CONDICION_HOSPITALIZACION = "";
/*Condición urgencias*/
context.CONDICION_URGENCIAS = "";
/*Condición usuarios*/
context.CONDICION_USUARIOS = "";
/*Condición medicamentos*/
context.CONDICION_MEDICAMENTOS = "";

} else { 

System.out.println("=======Tipo de actualización diaria========");

context.FECHA_INICIAL =  TalendDate.formatDate("dd/MM/YYYY",TalendDate.addDate(TalendDate.getCurrentDate(),-context.LAST_DAY,"DD"));

System.out.println("Fecha de actualización : "+context.FECHA_INICIAL);

/*Condiciones consultas*/
context.CONDICION_CONSULTAS = " AND TRUNC(PROC.FINICIAL) = TO_DATE( '"+context.FECHA_INICIAL+"','DD/MM/YYYY')";
context.CONDICION_ACTIVIDADES_CONSULTAS = " AND TRUNC(PROC.FINICIAL) =  TO_DATE('"+context.FECHA_INICIAL+"','DD/MM/YYYY')";
context.CONDICION_FINDRISK_CONSULTAS = " AND TRUNC(GHR.FREGISTRO) = TO_DATE( '"+context.FECHA_INICIAL+"','DD/MM/YYYY')";
/*Condiciones signos vitales*/
context.CONDICION_SIGNOS_VITALES = " AND TRUNC(PROC.FINICIAL) = TO_DATE( '"+context.FECHA_INICIAL+"','DD/MM/YYYY')";
/*Condiciones procedimientos*/
context.CONDICION_PROCEDIMIENTOS_CGP = " AND TRUNC(CDA.FREGISTRO) = TO_DATE( '"+context.FECHA_INICIAL+"','DD/MM/YYYY')";
context.CONDICION_PROCEDIMIENTOS_CGP2 = " AND TRUNC(CDA.FREGISTRO) = TO_DATE( '"+context.FECHA_INICIAL+"','DD/MM/YYYY')";
context.CONDICION_PROCEDIMIENTOS_PQX = " AND TRUNC(PPC.FREGISTRO) = TO_DATE( '"+context.FECHA_INICIAL+"','DD/MM/YYYY')";
context.CONDICION_PROCEDIMIENTOS_ODO = " AND TRUNC(ODH.FTRATAMIENTO) = TO_DATE( '"+context.FECHA_INICIAL+"','DD/MM/YYYY')";
context.CONDICION_PROCEDIMIENTOS_RCA = " AND TRUNC(RR.FREGISTRO) = TO_DATE( '"+context.FECHA_INICIAL+"','DD/MM/YYYY')";
/*Condicion otros servicios*/
context.CONDICION_OTROS_SERVICIOS = " WHERE  TRUNC(ADM.FECHA) =TO_DATE( '"+context.FECHA_INICIAL+"','DD/MM/YYYY') ";
context.CONDICION_OTROS_SERVICIOS2 =" WHERE TRUNC(AUT.FECHA)=TO_DATE( '"+context.FECHA_INICIAL+"','DD/MM/YYYY') ";
/*Condicion hospitalización*/
context.CONDICION_HOSPITALIZACION = " AND TRUNC(ALTA.FECHA) =  TO_DATE( '"+context.FECHA_INICIAL+"','DD/MM/YYYY')";
/*Condición urgencias*/
context.CONDICION_URGENCIAS = " AND TRUNC(ALTA.FECHA) =  TO_DATE( '"+context.FECHA_INICIAL+"','DD/MM/YYYY')";
/*Condición usuarios*/
context.CONDICION_USUARIOS = " AND  TRUNC(ADM.FECHA) = TO_DATE( '"+context.FECHA_INICIAL+"','DD/MM/YYYY')";
/*Condición medicamentos*/
context.CONDICION_MEDICAMENTOS = " AND TRUNC(MOV.FMOVIMIENTO) =TO_DATE( '"+context.FECHA_INICIAL+"','DD/MM/YYYY')";

}
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk22", 0, "ok");
				}
				tOracleInput_2Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public String FCARDIACA_VALOR;

				public String getFCARDIACA_VALOR () {
					return this.FCARDIACA_VALOR;
				}

				public Boolean FCARDIACA_VALORIsNullable(){
				    return true;
				}
				public Boolean FCARDIACA_VALORIsKey(){
				    return false;
				}
				public Integer FCARDIACA_VALORLength(){
				    return 40;
				}
				public Integer FCARDIACA_VALORPrecision(){
				    return 0;
				}
				public String FCARDIACA_VALORDefault(){
				
					return null;
				
				}
				public String FCARDIACA_VALORComment(){
				
				    return "";
				
				}
				public String FCARDIACA_VALORPattern(){
				
					return "";
				
				}
				public String FCARDIACA_VALOROriginalDbColumnName(){
				
					return "FCARDIACA_VALOR";
				
				}

				
			    public String FCARDIACA_UMEDIDA;

				public String getFCARDIACA_UMEDIDA () {
					return this.FCARDIACA_UMEDIDA;
				}

				public Boolean FCARDIACA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean FCARDIACA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer FCARDIACA_UMEDIDALength(){
				    return 20;
				}
				public Integer FCARDIACA_UMEDIDAPrecision(){
				    return 0;
				}
				public String FCARDIACA_UMEDIDADefault(){
				
					return null;
				
				}
				public String FCARDIACA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String FCARDIACA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String FCARDIACA_UMEDIDAOriginalDbColumnName(){
				
					return "FCARDIACA_UMEDIDA";
				
				}

				
			    public String PARTERIALSIS_VALOR;

				public String getPARTERIALSIS_VALOR () {
					return this.PARTERIALSIS_VALOR;
				}

				public Boolean PARTERIALSIS_VALORIsNullable(){
				    return true;
				}
				public Boolean PARTERIALSIS_VALORIsKey(){
				    return false;
				}
				public Integer PARTERIALSIS_VALORLength(){
				    return 40;
				}
				public Integer PARTERIALSIS_VALORPrecision(){
				    return 0;
				}
				public String PARTERIALSIS_VALORDefault(){
				
					return null;
				
				}
				public String PARTERIALSIS_VALORComment(){
				
				    return "";
				
				}
				public String PARTERIALSIS_VALORPattern(){
				
					return "";
				
				}
				public String PARTERIALSIS_VALOROriginalDbColumnName(){
				
					return "PARTERIALSIS_VALOR";
				
				}

				
			    public String PARTERIALSIS_UMEDIDA;

				public String getPARTERIALSIS_UMEDIDA () {
					return this.PARTERIALSIS_UMEDIDA;
				}

				public Boolean PARTERIALSIS_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PARTERIALSIS_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PARTERIALSIS_UMEDIDALength(){
				    return 20;
				}
				public Integer PARTERIALSIS_UMEDIDAPrecision(){
				    return 0;
				}
				public String PARTERIALSIS_UMEDIDADefault(){
				
					return null;
				
				}
				public String PARTERIALSIS_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PARTERIALSIS_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PARTERIALSIS_UMEDIDAOriginalDbColumnName(){
				
					return "PARTERIALSIS_UMEDIDA";
				
				}

				
			    public String PARTERIALDIA_VALOR;

				public String getPARTERIALDIA_VALOR () {
					return this.PARTERIALDIA_VALOR;
				}

				public Boolean PARTERIALDIA_VALORIsNullable(){
				    return true;
				}
				public Boolean PARTERIALDIA_VALORIsKey(){
				    return false;
				}
				public Integer PARTERIALDIA_VALORLength(){
				    return 40;
				}
				public Integer PARTERIALDIA_VALORPrecision(){
				    return 0;
				}
				public String PARTERIALDIA_VALORDefault(){
				
					return null;
				
				}
				public String PARTERIALDIA_VALORComment(){
				
				    return "";
				
				}
				public String PARTERIALDIA_VALORPattern(){
				
					return "";
				
				}
				public String PARTERIALDIA_VALOROriginalDbColumnName(){
				
					return "PARTERIALDIA_VALOR";
				
				}

				
			    public String PARTERIALDIA_UMEDIDA;

				public String getPARTERIALDIA_UMEDIDA () {
					return this.PARTERIALDIA_UMEDIDA;
				}

				public Boolean PARTERIALDIA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PARTERIALDIA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PARTERIALDIA_UMEDIDALength(){
				    return 20;
				}
				public Integer PARTERIALDIA_UMEDIDAPrecision(){
				    return 0;
				}
				public String PARTERIALDIA_UMEDIDADefault(){
				
					return null;
				
				}
				public String PARTERIALDIA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PARTERIALDIA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PARTERIALDIA_UMEDIDAOriginalDbColumnName(){
				
					return "PARTERIALDIA_UMEDIDA";
				
				}

				
			    public String PARTERIALMED_VALOR;

				public String getPARTERIALMED_VALOR () {
					return this.PARTERIALMED_VALOR;
				}

				public Boolean PARTERIALMED_VALORIsNullable(){
				    return true;
				}
				public Boolean PARTERIALMED_VALORIsKey(){
				    return false;
				}
				public Integer PARTERIALMED_VALORLength(){
				    return 40;
				}
				public Integer PARTERIALMED_VALORPrecision(){
				    return 0;
				}
				public String PARTERIALMED_VALORDefault(){
				
					return null;
				
				}
				public String PARTERIALMED_VALORComment(){
				
				    return "";
				
				}
				public String PARTERIALMED_VALORPattern(){
				
					return "";
				
				}
				public String PARTERIALMED_VALOROriginalDbColumnName(){
				
					return "PARTERIALMED_VALOR";
				
				}

				
			    public String PARTERIALMED_UMEDIDA;

				public String getPARTERIALMED_UMEDIDA () {
					return this.PARTERIALMED_UMEDIDA;
				}

				public Boolean PARTERIALMED_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PARTERIALMED_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PARTERIALMED_UMEDIDALength(){
				    return 20;
				}
				public Integer PARTERIALMED_UMEDIDAPrecision(){
				    return 0;
				}
				public String PARTERIALMED_UMEDIDADefault(){
				
					return null;
				
				}
				public String PARTERIALMED_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PARTERIALMED_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PARTERIALMED_UMEDIDAOriginalDbColumnName(){
				
					return "PARTERIALMED_UMEDIDA";
				
				}

				
			    public String FRESPIRATORIA_VALOR;

				public String getFRESPIRATORIA_VALOR () {
					return this.FRESPIRATORIA_VALOR;
				}

				public Boolean FRESPIRATORIA_VALORIsNullable(){
				    return true;
				}
				public Boolean FRESPIRATORIA_VALORIsKey(){
				    return false;
				}
				public Integer FRESPIRATORIA_VALORLength(){
				    return 40;
				}
				public Integer FRESPIRATORIA_VALORPrecision(){
				    return 0;
				}
				public String FRESPIRATORIA_VALORDefault(){
				
					return null;
				
				}
				public String FRESPIRATORIA_VALORComment(){
				
				    return "";
				
				}
				public String FRESPIRATORIA_VALORPattern(){
				
					return "";
				
				}
				public String FRESPIRATORIA_VALOROriginalDbColumnName(){
				
					return "FRESPIRATORIA_VALOR";
				
				}

				
			    public String FRESPIRATORIA_UMEDIDA;

				public String getFRESPIRATORIA_UMEDIDA () {
					return this.FRESPIRATORIA_UMEDIDA;
				}

				public Boolean FRESPIRATORIA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean FRESPIRATORIA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer FRESPIRATORIA_UMEDIDALength(){
				    return 20;
				}
				public Integer FRESPIRATORIA_UMEDIDAPrecision(){
				    return 0;
				}
				public String FRESPIRATORIA_UMEDIDADefault(){
				
					return null;
				
				}
				public String FRESPIRATORIA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String FRESPIRATORIA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String FRESPIRATORIA_UMEDIDAOriginalDbColumnName(){
				
					return "FRESPIRATORIA_UMEDIDA";
				
				}

				
			    public String PULSO_VALOR;

				public String getPULSO_VALOR () {
					return this.PULSO_VALOR;
				}

				public Boolean PULSO_VALORIsNullable(){
				    return true;
				}
				public Boolean PULSO_VALORIsKey(){
				    return false;
				}
				public Integer PULSO_VALORLength(){
				    return 40;
				}
				public Integer PULSO_VALORPrecision(){
				    return 0;
				}
				public String PULSO_VALORDefault(){
				
					return null;
				
				}
				public String PULSO_VALORComment(){
				
				    return "";
				
				}
				public String PULSO_VALORPattern(){
				
					return "";
				
				}
				public String PULSO_VALOROriginalDbColumnName(){
				
					return "PULSO_VALOR";
				
				}

				
			    public String PULSO_UMEDIDA;

				public String getPULSO_UMEDIDA () {
					return this.PULSO_UMEDIDA;
				}

				public Boolean PULSO_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PULSO_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PULSO_UMEDIDALength(){
				    return 20;
				}
				public Integer PULSO_UMEDIDAPrecision(){
				    return 0;
				}
				public String PULSO_UMEDIDADefault(){
				
					return null;
				
				}
				public String PULSO_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PULSO_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PULSO_UMEDIDAOriginalDbColumnName(){
				
					return "PULSO_UMEDIDA";
				
				}

				
			    public String TEMPERATURA_VALOR;

				public String getTEMPERATURA_VALOR () {
					return this.TEMPERATURA_VALOR;
				}

				public Boolean TEMPERATURA_VALORIsNullable(){
				    return true;
				}
				public Boolean TEMPERATURA_VALORIsKey(){
				    return false;
				}
				public Integer TEMPERATURA_VALORLength(){
				    return 40;
				}
				public Integer TEMPERATURA_VALORPrecision(){
				    return 0;
				}
				public String TEMPERATURA_VALORDefault(){
				
					return null;
				
				}
				public String TEMPERATURA_VALORComment(){
				
				    return "";
				
				}
				public String TEMPERATURA_VALORPattern(){
				
					return "";
				
				}
				public String TEMPERATURA_VALOROriginalDbColumnName(){
				
					return "TEMPERATURA_VALOR";
				
				}

				
			    public String TEMPERATURA_UMEDIDA;

				public String getTEMPERATURA_UMEDIDA () {
					return this.TEMPERATURA_UMEDIDA;
				}

				public Boolean TEMPERATURA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean TEMPERATURA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer TEMPERATURA_UMEDIDALength(){
				    return 20;
				}
				public Integer TEMPERATURA_UMEDIDAPrecision(){
				    return 0;
				}
				public String TEMPERATURA_UMEDIDADefault(){
				
					return null;
				
				}
				public String TEMPERATURA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String TEMPERATURA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String TEMPERATURA_UMEDIDAOriginalDbColumnName(){
				
					return "TEMPERATURA_UMEDIDA";
				
				}

				
			    public String PESO_VALOR;

				public String getPESO_VALOR () {
					return this.PESO_VALOR;
				}

				public Boolean PESO_VALORIsNullable(){
				    return true;
				}
				public Boolean PESO_VALORIsKey(){
				    return false;
				}
				public Integer PESO_VALORLength(){
				    return 40;
				}
				public Integer PESO_VALORPrecision(){
				    return 0;
				}
				public String PESO_VALORDefault(){
				
					return null;
				
				}
				public String PESO_VALORComment(){
				
				    return "";
				
				}
				public String PESO_VALORPattern(){
				
					return "";
				
				}
				public String PESO_VALOROriginalDbColumnName(){
				
					return "PESO_VALOR";
				
				}

				
			    public String PESO_UMEDIDA;

				public String getPESO_UMEDIDA () {
					return this.PESO_UMEDIDA;
				}

				public Boolean PESO_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PESO_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PESO_UMEDIDALength(){
				    return 20;
				}
				public Integer PESO_UMEDIDAPrecision(){
				    return 0;
				}
				public String PESO_UMEDIDADefault(){
				
					return null;
				
				}
				public String PESO_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PESO_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PESO_UMEDIDAOriginalDbColumnName(){
				
					return "PESO_UMEDIDA";
				
				}

				
			    public String ESTATURA_VALOR;

				public String getESTATURA_VALOR () {
					return this.ESTATURA_VALOR;
				}

				public Boolean ESTATURA_VALORIsNullable(){
				    return true;
				}
				public Boolean ESTATURA_VALORIsKey(){
				    return false;
				}
				public Integer ESTATURA_VALORLength(){
				    return 40;
				}
				public Integer ESTATURA_VALORPrecision(){
				    return 0;
				}
				public String ESTATURA_VALORDefault(){
				
					return null;
				
				}
				public String ESTATURA_VALORComment(){
				
				    return "";
				
				}
				public String ESTATURA_VALORPattern(){
				
					return "";
				
				}
				public String ESTATURA_VALOROriginalDbColumnName(){
				
					return "ESTATURA_VALOR";
				
				}

				
			    public String ESTATURA_UMEDIDA;

				public String getESTATURA_UMEDIDA () {
					return this.ESTATURA_UMEDIDA;
				}

				public Boolean ESTATURA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean ESTATURA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer ESTATURA_UMEDIDALength(){
				    return 20;
				}
				public Integer ESTATURA_UMEDIDAPrecision(){
				    return 0;
				}
				public String ESTATURA_UMEDIDADefault(){
				
					return null;
				
				}
				public String ESTATURA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String ESTATURA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String ESTATURA_UMEDIDAOriginalDbColumnName(){
				
					return "ESTATURA_UMEDIDA";
				
				}

				
			    public String IMC_VALOR;

				public String getIMC_VALOR () {
					return this.IMC_VALOR;
				}

				public Boolean IMC_VALORIsNullable(){
				    return true;
				}
				public Boolean IMC_VALORIsKey(){
				    return false;
				}
				public Integer IMC_VALORLength(){
				    return 40;
				}
				public Integer IMC_VALORPrecision(){
				    return 0;
				}
				public String IMC_VALORDefault(){
				
					return null;
				
				}
				public String IMC_VALORComment(){
				
				    return "";
				
				}
				public String IMC_VALORPattern(){
				
					return "";
				
				}
				public String IMC_VALOROriginalDbColumnName(){
				
					return "IMC_VALOR";
				
				}

				
			    public String IMC_UMEDIDA;

				public String getIMC_UMEDIDA () {
					return this.IMC_UMEDIDA;
				}

				public Boolean IMC_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean IMC_UMEDIDAIsKey(){
				    return false;
				}
				public Integer IMC_UMEDIDALength(){
				    return 20;
				}
				public Integer IMC_UMEDIDAPrecision(){
				    return 0;
				}
				public String IMC_UMEDIDADefault(){
				
					return null;
				
				}
				public String IMC_UMEDIDAComment(){
				
				    return "";
				
				}
				public String IMC_UMEDIDAPattern(){
				
					return "";
				
				}
				public String IMC_UMEDIDAOriginalDbColumnName(){
				
					return "IMC_UMEDIDA";
				
				}

				
			    public String SOXIGENO_VALOR;

				public String getSOXIGENO_VALOR () {
					return this.SOXIGENO_VALOR;
				}

				public Boolean SOXIGENO_VALORIsNullable(){
				    return true;
				}
				public Boolean SOXIGENO_VALORIsKey(){
				    return false;
				}
				public Integer SOXIGENO_VALORLength(){
				    return 40;
				}
				public Integer SOXIGENO_VALORPrecision(){
				    return 0;
				}
				public String SOXIGENO_VALORDefault(){
				
					return null;
				
				}
				public String SOXIGENO_VALORComment(){
				
				    return "";
				
				}
				public String SOXIGENO_VALORPattern(){
				
					return "";
				
				}
				public String SOXIGENO_VALOROriginalDbColumnName(){
				
					return "SOXIGENO_VALOR";
				
				}

				
			    public String SOXIGENO_UMEDIDA;

				public String getSOXIGENO_UMEDIDA () {
					return this.SOXIGENO_UMEDIDA;
				}

				public Boolean SOXIGENO_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean SOXIGENO_UMEDIDAIsKey(){
				    return false;
				}
				public Integer SOXIGENO_UMEDIDALength(){
				    return 20;
				}
				public Integer SOXIGENO_UMEDIDAPrecision(){
				    return 0;
				}
				public String SOXIGENO_UMEDIDADefault(){
				
					return null;
				
				}
				public String SOXIGENO_UMEDIDAComment(){
				
				    return "";
				
				}
				public String SOXIGENO_UMEDIDAPattern(){
				
					return "";
				
				}
				public String SOXIGENO_UMEDIDAOriginalDbColumnName(){
				
					return "SOXIGENO_UMEDIDA";
				
				}

				
			    public String NCREATININA_VALOR;

				public String getNCREATININA_VALOR () {
					return this.NCREATININA_VALOR;
				}

				public Boolean NCREATININA_VALORIsNullable(){
				    return true;
				}
				public Boolean NCREATININA_VALORIsKey(){
				    return false;
				}
				public Integer NCREATININA_VALORLength(){
				    return 40;
				}
				public Integer NCREATININA_VALORPrecision(){
				    return 0;
				}
				public String NCREATININA_VALORDefault(){
				
					return null;
				
				}
				public String NCREATININA_VALORComment(){
				
				    return "";
				
				}
				public String NCREATININA_VALORPattern(){
				
					return "";
				
				}
				public String NCREATININA_VALOROriginalDbColumnName(){
				
					return "NCREATININA_VALOR";
				
				}

				
			    public String NCREATININA_UMEDIDA;

				public String getNCREATININA_UMEDIDA () {
					return this.NCREATININA_UMEDIDA;
				}

				public Boolean NCREATININA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean NCREATININA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer NCREATININA_UMEDIDALength(){
				    return 20;
				}
				public Integer NCREATININA_UMEDIDAPrecision(){
				    return 0;
				}
				public String NCREATININA_UMEDIDADefault(){
				
					return null;
				
				}
				public String NCREATININA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String NCREATININA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String NCREATININA_UMEDIDAOriginalDbColumnName(){
				
					return "NCREATININA_UMEDIDA";
				
				}

				
			    public String FGLOMERULAR_VALOR;

				public String getFGLOMERULAR_VALOR () {
					return this.FGLOMERULAR_VALOR;
				}

				public Boolean FGLOMERULAR_VALORIsNullable(){
				    return true;
				}
				public Boolean FGLOMERULAR_VALORIsKey(){
				    return false;
				}
				public Integer FGLOMERULAR_VALORLength(){
				    return 40;
				}
				public Integer FGLOMERULAR_VALORPrecision(){
				    return 0;
				}
				public String FGLOMERULAR_VALORDefault(){
				
					return null;
				
				}
				public String FGLOMERULAR_VALORComment(){
				
				    return "";
				
				}
				public String FGLOMERULAR_VALORPattern(){
				
					return "";
				
				}
				public String FGLOMERULAR_VALOROriginalDbColumnName(){
				
					return "FGLOMERULAR_VALOR";
				
				}

				
			    public String FGLOMERULAR_UMEDIDA;

				public String getFGLOMERULAR_UMEDIDA () {
					return this.FGLOMERULAR_UMEDIDA;
				}

				public Boolean FGLOMERULAR_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean FGLOMERULAR_UMEDIDAIsKey(){
				    return false;
				}
				public Integer FGLOMERULAR_UMEDIDALength(){
				    return 20;
				}
				public Integer FGLOMERULAR_UMEDIDAPrecision(){
				    return 0;
				}
				public String FGLOMERULAR_UMEDIDADefault(){
				
					return null;
				
				}
				public String FGLOMERULAR_UMEDIDAComment(){
				
				    return "";
				
				}
				public String FGLOMERULAR_UMEDIDAPattern(){
				
					return "";
				
				}
				public String FGLOMERULAR_UMEDIDAOriginalDbColumnName(){
				
					return "FGLOMERULAR_UMEDIDA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
					this.FCARDIACA_VALOR = readString(dis);
					
					this.FCARDIACA_UMEDIDA = readString(dis);
					
					this.PARTERIALSIS_VALOR = readString(dis);
					
					this.PARTERIALSIS_UMEDIDA = readString(dis);
					
					this.PARTERIALDIA_VALOR = readString(dis);
					
					this.PARTERIALDIA_UMEDIDA = readString(dis);
					
					this.PARTERIALMED_VALOR = readString(dis);
					
					this.PARTERIALMED_UMEDIDA = readString(dis);
					
					this.FRESPIRATORIA_VALOR = readString(dis);
					
					this.FRESPIRATORIA_UMEDIDA = readString(dis);
					
					this.PULSO_VALOR = readString(dis);
					
					this.PULSO_UMEDIDA = readString(dis);
					
					this.TEMPERATURA_VALOR = readString(dis);
					
					this.TEMPERATURA_UMEDIDA = readString(dis);
					
					this.PESO_VALOR = readString(dis);
					
					this.PESO_UMEDIDA = readString(dis);
					
					this.ESTATURA_VALOR = readString(dis);
					
					this.ESTATURA_UMEDIDA = readString(dis);
					
					this.IMC_VALOR = readString(dis);
					
					this.IMC_UMEDIDA = readString(dis);
					
					this.SOXIGENO_VALOR = readString(dis);
					
					this.SOXIGENO_UMEDIDA = readString(dis);
					
					this.NCREATININA_VALOR = readString(dis);
					
					this.NCREATININA_UMEDIDA = readString(dis);
					
					this.FGLOMERULAR_VALOR = readString(dis);
					
					this.FGLOMERULAR_UMEDIDA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
					this.FCARDIACA_VALOR = readString(dis);
					
					this.FCARDIACA_UMEDIDA = readString(dis);
					
					this.PARTERIALSIS_VALOR = readString(dis);
					
					this.PARTERIALSIS_UMEDIDA = readString(dis);
					
					this.PARTERIALDIA_VALOR = readString(dis);
					
					this.PARTERIALDIA_UMEDIDA = readString(dis);
					
					this.PARTERIALMED_VALOR = readString(dis);
					
					this.PARTERIALMED_UMEDIDA = readString(dis);
					
					this.FRESPIRATORIA_VALOR = readString(dis);
					
					this.FRESPIRATORIA_UMEDIDA = readString(dis);
					
					this.PULSO_VALOR = readString(dis);
					
					this.PULSO_UMEDIDA = readString(dis);
					
					this.TEMPERATURA_VALOR = readString(dis);
					
					this.TEMPERATURA_UMEDIDA = readString(dis);
					
					this.PESO_VALOR = readString(dis);
					
					this.PESO_UMEDIDA = readString(dis);
					
					this.ESTATURA_VALOR = readString(dis);
					
					this.ESTATURA_UMEDIDA = readString(dis);
					
					this.IMC_VALOR = readString(dis);
					
					this.IMC_UMEDIDA = readString(dis);
					
					this.SOXIGENO_VALOR = readString(dis);
					
					this.SOXIGENO_UMEDIDA = readString(dis);
					
					this.NCREATININA_VALOR = readString(dis);
					
					this.NCREATININA_UMEDIDA = readString(dis);
					
					this.FGLOMERULAR_VALOR = readString(dis);
					
					this.FGLOMERULAR_UMEDIDA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// String
				
						writeString(this.FCARDIACA_VALOR,dos);
					
					// String
				
						writeString(this.FCARDIACA_UMEDIDA,dos);
					
					// String
				
						writeString(this.PARTERIALSIS_VALOR,dos);
					
					// String
				
						writeString(this.PARTERIALSIS_UMEDIDA,dos);
					
					// String
				
						writeString(this.PARTERIALDIA_VALOR,dos);
					
					// String
				
						writeString(this.PARTERIALDIA_UMEDIDA,dos);
					
					// String
				
						writeString(this.PARTERIALMED_VALOR,dos);
					
					// String
				
						writeString(this.PARTERIALMED_UMEDIDA,dos);
					
					// String
				
						writeString(this.FRESPIRATORIA_VALOR,dos);
					
					// String
				
						writeString(this.FRESPIRATORIA_UMEDIDA,dos);
					
					// String
				
						writeString(this.PULSO_VALOR,dos);
					
					// String
				
						writeString(this.PULSO_UMEDIDA,dos);
					
					// String
				
						writeString(this.TEMPERATURA_VALOR,dos);
					
					// String
				
						writeString(this.TEMPERATURA_UMEDIDA,dos);
					
					// String
				
						writeString(this.PESO_VALOR,dos);
					
					// String
				
						writeString(this.PESO_UMEDIDA,dos);
					
					// String
				
						writeString(this.ESTATURA_VALOR,dos);
					
					// String
				
						writeString(this.ESTATURA_UMEDIDA,dos);
					
					// String
				
						writeString(this.IMC_VALOR,dos);
					
					// String
				
						writeString(this.IMC_UMEDIDA,dos);
					
					// String
				
						writeString(this.SOXIGENO_VALOR,dos);
					
					// String
				
						writeString(this.SOXIGENO_UMEDIDA,dos);
					
					// String
				
						writeString(this.NCREATININA_VALOR,dos);
					
					// String
				
						writeString(this.NCREATININA_UMEDIDA,dos);
					
					// String
				
						writeString(this.FGLOMERULAR_VALOR,dos);
					
					// String
				
						writeString(this.FGLOMERULAR_UMEDIDA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// String
				
						writeString(this.FCARDIACA_VALOR,dos);
					
					// String
				
						writeString(this.FCARDIACA_UMEDIDA,dos);
					
					// String
				
						writeString(this.PARTERIALSIS_VALOR,dos);
					
					// String
				
						writeString(this.PARTERIALSIS_UMEDIDA,dos);
					
					// String
				
						writeString(this.PARTERIALDIA_VALOR,dos);
					
					// String
				
						writeString(this.PARTERIALDIA_UMEDIDA,dos);
					
					// String
				
						writeString(this.PARTERIALMED_VALOR,dos);
					
					// String
				
						writeString(this.PARTERIALMED_UMEDIDA,dos);
					
					// String
				
						writeString(this.FRESPIRATORIA_VALOR,dos);
					
					// String
				
						writeString(this.FRESPIRATORIA_UMEDIDA,dos);
					
					// String
				
						writeString(this.PULSO_VALOR,dos);
					
					// String
				
						writeString(this.PULSO_UMEDIDA,dos);
					
					// String
				
						writeString(this.TEMPERATURA_VALOR,dos);
					
					// String
				
						writeString(this.TEMPERATURA_UMEDIDA,dos);
					
					// String
				
						writeString(this.PESO_VALOR,dos);
					
					// String
				
						writeString(this.PESO_UMEDIDA,dos);
					
					// String
				
						writeString(this.ESTATURA_VALOR,dos);
					
					// String
				
						writeString(this.ESTATURA_UMEDIDA,dos);
					
					// String
				
						writeString(this.IMC_VALOR,dos);
					
					// String
				
						writeString(this.IMC_UMEDIDA,dos);
					
					// String
				
						writeString(this.SOXIGENO_VALOR,dos);
					
					// String
				
						writeString(this.SOXIGENO_UMEDIDA,dos);
					
					// String
				
						writeString(this.NCREATININA_VALOR,dos);
					
					// String
				
						writeString(this.NCREATININA_UMEDIDA,dos);
					
					// String
				
						writeString(this.FGLOMERULAR_VALOR,dos);
					
					// String
				
						writeString(this.FGLOMERULAR_UMEDIDA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",FCARDIACA_VALOR="+FCARDIACA_VALOR);
		sb.append(",FCARDIACA_UMEDIDA="+FCARDIACA_UMEDIDA);
		sb.append(",PARTERIALSIS_VALOR="+PARTERIALSIS_VALOR);
		sb.append(",PARTERIALSIS_UMEDIDA="+PARTERIALSIS_UMEDIDA);
		sb.append(",PARTERIALDIA_VALOR="+PARTERIALDIA_VALOR);
		sb.append(",PARTERIALDIA_UMEDIDA="+PARTERIALDIA_UMEDIDA);
		sb.append(",PARTERIALMED_VALOR="+PARTERIALMED_VALOR);
		sb.append(",PARTERIALMED_UMEDIDA="+PARTERIALMED_UMEDIDA);
		sb.append(",FRESPIRATORIA_VALOR="+FRESPIRATORIA_VALOR);
		sb.append(",FRESPIRATORIA_UMEDIDA="+FRESPIRATORIA_UMEDIDA);
		sb.append(",PULSO_VALOR="+PULSO_VALOR);
		sb.append(",PULSO_UMEDIDA="+PULSO_UMEDIDA);
		sb.append(",TEMPERATURA_VALOR="+TEMPERATURA_VALOR);
		sb.append(",TEMPERATURA_UMEDIDA="+TEMPERATURA_UMEDIDA);
		sb.append(",PESO_VALOR="+PESO_VALOR);
		sb.append(",PESO_UMEDIDA="+PESO_UMEDIDA);
		sb.append(",ESTATURA_VALOR="+ESTATURA_VALOR);
		sb.append(",ESTATURA_UMEDIDA="+ESTATURA_UMEDIDA);
		sb.append(",IMC_VALOR="+IMC_VALOR);
		sb.append(",IMC_UMEDIDA="+IMC_UMEDIDA);
		sb.append(",SOXIGENO_VALOR="+SOXIGENO_VALOR);
		sb.append(",SOXIGENO_UMEDIDA="+SOXIGENO_UMEDIDA);
		sb.append(",NCREATININA_VALOR="+NCREATININA_VALOR);
		sb.append(",NCREATININA_UMEDIDA="+NCREATININA_UMEDIDA);
		sb.append(",FGLOMERULAR_VALOR="+FGLOMERULAR_VALOR);
		sb.append(",FGLOMERULAR_UMEDIDA="+FGLOMERULAR_UMEDIDA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_Rips_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_2.setFetchSize(10000);


		    String dbquery_tOracleInput_2 = "SELECT * FROM \n  (\n    SELECT  MSI.PROCESOSASISTENCIALES_ID,         \n            TO_CHAR(HSV.VALOR) AS VALOR,\n    "
+"        TS.UMEDIDA,\n            TS.SIGLA\n    FROM GEN_TSIGNOSVITALES TS\n    INNER JOIN GEN_HSIGNOSVITALES HSV ON HSV."
+"TSIGNOSVITALES_ID = TS.ID \n    INNER JOIN GEN_MSIGNOSVITALES MSI ON MSI.ID = HSV.MSIGNOSVITALES_ID\n    INNER JOIN  HCL"
+"_PROCESOSASISTENCIALES PROC ON PROC.ID = MSI.PROCESOSASISTENCIALES_ID \n    WHERE TS.SIGLA IN ( 'FC', 'PAS', 'PAD', 'PAM"
+"', 'FR', 'P', 'T', 'PESO',\n                       							   'E', 'IMC', 'SO2', 'NC', 'FG' ) \n    "+context.CONDICION_SIGNOS_VITALES+"\n  ) \n  PIVOT \n  (\n    MAX( VALOR ) AS VALOR, MAX ( UMEDIDA ) AS UMEDIDA\n    FOR SIGLA IN (  'FC' AS FCARDIACA, 'P"
+"AS' AS PARTERIALSIS, 'PAD' AS PARTERIALDIA,\n                    'PAM' AS PARTERIALMED,'FR' AS FRESPIRATORIA, 'P' AS PUL"
+"SO, \n                    'T' AS TEMPERATURA, 'PESO' AS PESO , 'E' AS ESTATURA,'IMC' AS IMC, \n                    'SO2'"
+" AS SOXIGENO, 'NC' AS NCREATININA, 'FG' AS FGLOMERULAR ) \n  )";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row2.PROCESOSASISTENCIALES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row2.PROCESOSASISTENCIALES_ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
						row2.PROCESOSASISTENCIALES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row2.FCARDIACA_VALOR = null;
							} else {
	                         		
        	row2.FCARDIACA_VALOR = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row2.FCARDIACA_UMEDIDA = null;
							} else {
	                         		
        	row2.FCARDIACA_UMEDIDA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 4) {
								row2.PARTERIALSIS_VALOR = null;
							} else {
	                         		
        	row2.PARTERIALSIS_VALOR = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 5) {
								row2.PARTERIALSIS_UMEDIDA = null;
							} else {
	                         		
        	row2.PARTERIALSIS_UMEDIDA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 6) {
								row2.PARTERIALDIA_VALOR = null;
							} else {
	                         		
        	row2.PARTERIALDIA_VALOR = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 7) {
								row2.PARTERIALDIA_UMEDIDA = null;
							} else {
	                         		
        	row2.PARTERIALDIA_UMEDIDA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 8) {
								row2.PARTERIALMED_VALOR = null;
							} else {
	                         		
        	row2.PARTERIALMED_VALOR = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 9) {
								row2.PARTERIALMED_UMEDIDA = null;
							} else {
	                         		
        	row2.PARTERIALMED_UMEDIDA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 10) {
								row2.FRESPIRATORIA_VALOR = null;
							} else {
	                         		
        	row2.FRESPIRATORIA_VALOR = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 11) {
								row2.FRESPIRATORIA_UMEDIDA = null;
							} else {
	                         		
        	row2.FRESPIRATORIA_UMEDIDA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 12) {
								row2.PULSO_VALOR = null;
							} else {
	                         		
        	row2.PULSO_VALOR = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 13) {
								row2.PULSO_UMEDIDA = null;
							} else {
	                         		
        	row2.PULSO_UMEDIDA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 14) {
								row2.TEMPERATURA_VALOR = null;
							} else {
	                         		
        	row2.TEMPERATURA_VALOR = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 15) {
								row2.TEMPERATURA_UMEDIDA = null;
							} else {
	                         		
        	row2.TEMPERATURA_UMEDIDA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 16) {
								row2.PESO_VALOR = null;
							} else {
	                         		
        	row2.PESO_VALOR = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 17) {
								row2.PESO_UMEDIDA = null;
							} else {
	                         		
        	row2.PESO_UMEDIDA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 17, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 18) {
								row2.ESTATURA_VALOR = null;
							} else {
	                         		
        	row2.ESTATURA_VALOR = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 18, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 19) {
								row2.ESTATURA_UMEDIDA = null;
							} else {
	                         		
        	row2.ESTATURA_UMEDIDA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 19, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 20) {
								row2.IMC_VALOR = null;
							} else {
	                         		
        	row2.IMC_VALOR = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 20, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 21) {
								row2.IMC_UMEDIDA = null;
							} else {
	                         		
        	row2.IMC_UMEDIDA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 21, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 22) {
								row2.SOXIGENO_VALOR = null;
							} else {
	                         		
        	row2.SOXIGENO_VALOR = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 22, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 23) {
								row2.SOXIGENO_UMEDIDA = null;
							} else {
	                         		
        	row2.SOXIGENO_UMEDIDA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 23, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 24) {
								row2.NCREATININA_VALOR = null;
							} else {
	                         		
        	row2.NCREATININA_VALOR = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 24, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 25) {
								row2.NCREATININA_UMEDIDA = null;
							} else {
	                         		
        	row2.NCREATININA_UMEDIDA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 25, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 26) {
								row2.FGLOMERULAR_VALOR = null;
							} else {
	                         		
        	row2.FGLOMERULAR_VALOR = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 26, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 27) {
								row2.FGLOMERULAR_UMEDIDA = null;
							} else {
	                         		
        	row2.FGLOMERULAR_UMEDIDA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 27, false);
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					



    
		row2Struct oneRow_tHashOutput_1 = new row2Struct();
				
					oneRow_tHashOutput_1.PROCESOSASISTENCIALES_ID = row2.PROCESOSASISTENCIALES_ID;
					oneRow_tHashOutput_1.FCARDIACA_VALOR = row2.FCARDIACA_VALOR;
					oneRow_tHashOutput_1.FCARDIACA_UMEDIDA = row2.FCARDIACA_UMEDIDA;
					oneRow_tHashOutput_1.PARTERIALSIS_VALOR = row2.PARTERIALSIS_VALOR;
					oneRow_tHashOutput_1.PARTERIALSIS_UMEDIDA = row2.PARTERIALSIS_UMEDIDA;
					oneRow_tHashOutput_1.PARTERIALDIA_VALOR = row2.PARTERIALDIA_VALOR;
					oneRow_tHashOutput_1.PARTERIALDIA_UMEDIDA = row2.PARTERIALDIA_UMEDIDA;
					oneRow_tHashOutput_1.PARTERIALMED_VALOR = row2.PARTERIALMED_VALOR;
					oneRow_tHashOutput_1.PARTERIALMED_UMEDIDA = row2.PARTERIALMED_UMEDIDA;
					oneRow_tHashOutput_1.FRESPIRATORIA_VALOR = row2.FRESPIRATORIA_VALOR;
					oneRow_tHashOutput_1.FRESPIRATORIA_UMEDIDA = row2.FRESPIRATORIA_UMEDIDA;
					oneRow_tHashOutput_1.PULSO_VALOR = row2.PULSO_VALOR;
					oneRow_tHashOutput_1.PULSO_UMEDIDA = row2.PULSO_UMEDIDA;
					oneRow_tHashOutput_1.TEMPERATURA_VALOR = row2.TEMPERATURA_VALOR;
					oneRow_tHashOutput_1.TEMPERATURA_UMEDIDA = row2.TEMPERATURA_UMEDIDA;
					oneRow_tHashOutput_1.PESO_VALOR = row2.PESO_VALOR;
					oneRow_tHashOutput_1.PESO_UMEDIDA = row2.PESO_UMEDIDA;
					oneRow_tHashOutput_1.ESTATURA_VALOR = row2.ESTATURA_VALOR;
					oneRow_tHashOutput_1.ESTATURA_UMEDIDA = row2.ESTATURA_UMEDIDA;
					oneRow_tHashOutput_1.IMC_VALOR = row2.IMC_VALOR;
					oneRow_tHashOutput_1.IMC_UMEDIDA = row2.IMC_UMEDIDA;
					oneRow_tHashOutput_1.SOXIGENO_VALOR = row2.SOXIGENO_VALOR;
					oneRow_tHashOutput_1.SOXIGENO_UMEDIDA = row2.SOXIGENO_UMEDIDA;
					oneRow_tHashOutput_1.NCREATININA_VALOR = row2.NCREATININA_VALOR;
					oneRow_tHashOutput_1.NCREATININA_UMEDIDA = row2.NCREATININA_UMEDIDA;
					oneRow_tHashOutput_1.FGLOMERULAR_VALOR = row2.FGLOMERULAR_VALOR;
					oneRow_tHashOutput_1.FGLOMERULAR_UMEDIDA = row2.FGLOMERULAR_UMEDIDA;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_8", false);
		start_Hash.put("tJava_8", System.currentTimeMillis());
		
	
	currentComponent="tJava_8";
	
	
		int tos_count_tJava_8 = 0;
		


context.CODARCHIVO = "AP";
System.out.println("        - Procedimientos: " + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );

//context.ARCONTROL_ID = (BigDecimal) ((java.util.Map) globalMap.get("sharedMap")).get("ReturnValueAC_ID");

//System.out.println("ARCONTROL_ID AP : " + context.ARCONTROL_ID );
 



/**
 * [tJava_8 begin ] stop
 */
	
	/**
	 * [tJava_8 main ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 


	tos_count_tJava_8++;

/**
 * [tJava_8 main ] stop
 */
	
	/**
	 * [tJava_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 process_data_begin ] stop
 */
	
	/**
	 * [tJava_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 process_data_end ] stop
 */
	
	/**
	 * [tJava_8 end ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 

ok_Hash.put("tJava_8", true);
end_Hash.put("tJava_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk33", 0, "ok");
				}
				tOracleInput_13Process(globalMap);



/**
 * [tJava_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_8 finally ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}
	


public void tJava_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_9", false);
		start_Hash.put("tJava_9", System.currentTimeMillis());
		
	
	currentComponent="tJava_9";
	
	
		int tos_count_tJava_9 = 0;
		


context.CODARCHIVO = "AM";
/*context.ARCONTROL_ID = (BigDecimal) ((java.util.Map) globalMap.get("sharedMap")).get("ReturnValueAC_ID");
System.out.println("ARCONTROL_ID AM : " + context.ARCONTROL_ID );*/

System.out.println("        - Medicamentos: " + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );
 



/**
 * [tJava_9 begin ] stop
 */
	
	/**
	 * [tJava_9 main ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 


	tos_count_tJava_9++;

/**
 * [tJava_9 main ] stop
 */
	
	/**
	 * [tJava_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 



/**
 * [tJava_9 process_data_begin ] stop
 */
	
	/**
	 * [tJava_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 



/**
 * [tJava_9 process_data_end ] stop
 */
	
	/**
	 * [tJava_9 end ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 

ok_Hash.put("tJava_9", true);
end_Hash.put("tJava_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk21", 0, "ok");
				}
				tOracleInput_15Process(globalMap);



/**
 * [tJava_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_9 finally ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 



/**
 * [tJava_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}
	


public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String CODFACTURA;

				public String getCODFACTURA () {
					return this.CODFACTURA;
				}

				public Boolean CODFACTURAIsNullable(){
				    return true;
				}
				public Boolean CODFACTURAIsKey(){
				    return false;
				}
				public Integer CODFACTURALength(){
				    return 100;
				}
				public Integer CODFACTURAPrecision(){
				    return 0;
				}
				public String CODFACTURADefault(){
				
					return null;
				
				}
				public String CODFACTURAComment(){
				
				    return "N\u00FAmero de la factura";
				
				}
				public String CODFACTURAPattern(){
				
					return "";
				
				}
				public String CODFACTURAOriginalDbColumnName(){
				
					return "CODFACTURA";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return 100;
				}
				public Integer CODPRESTADORPrecision(){
				    return 0;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "C\u00F3digo del prestador de servicios de salud";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 50;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "Tipo de identificaci\u00F3n del usuario";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "N\u00FAmero de identificaci\u00F3n del usuario en el sistema";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return 250;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "N\u00FAmero de autorizaci\u00F3n";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public String CODMEDICAMENTO;

				public String getCODMEDICAMENTO () {
					return this.CODMEDICAMENTO;
				}

				public Boolean CODMEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean CODMEDICAMENTOIsKey(){
				    return false;
				}
				public Integer CODMEDICAMENTOLength(){
				    return 15;
				}
				public Integer CODMEDICAMENTOPrecision(){
				    return 0;
				}
				public String CODMEDICAMENTODefault(){
				
					return null;
				
				}
				public String CODMEDICAMENTOComment(){
				
				    return "C\u00F3digo del medicamento";
				
				}
				public String CODMEDICAMENTOPattern(){
				
					return "";
				
				}
				public String CODMEDICAMENTOOriginalDbColumnName(){
				
					return "CODMEDICAMENTO";
				
				}

				
			    public String TMEDICAMENTO;

				public String getTMEDICAMENTO () {
					return this.TMEDICAMENTO;
				}

				public Boolean TMEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean TMEDICAMENTOIsKey(){
				    return false;
				}
				public Integer TMEDICAMENTOLength(){
				    return 50;
				}
				public Integer TMEDICAMENTOPrecision(){
				    return 0;
				}
				public String TMEDICAMENTODefault(){
				
					return null;
				
				}
				public String TMEDICAMENTOComment(){
				
				    return "Tipo de medicamento";
				
				}
				public String TMEDICAMENTOPattern(){
				
					return "";
				
				}
				public String TMEDICAMENTOOriginalDbColumnName(){
				
					return "TMEDICAMENTO";
				
				}

				
			    public String MEDICAMENTO;

				public String getMEDICAMENTO () {
					return this.MEDICAMENTO;
				}

				public Boolean MEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean MEDICAMENTOIsKey(){
				    return false;
				}
				public Integer MEDICAMENTOLength(){
				    return 200;
				}
				public Integer MEDICAMENTOPrecision(){
				    return 0;
				}
				public String MEDICAMENTODefault(){
				
					return null;
				
				}
				public String MEDICAMENTOComment(){
				
				    return "Nombre gen\u00E9rico del medicamento";
				
				}
				public String MEDICAMENTOPattern(){
				
					return "";
				
				}
				public String MEDICAMENTOOriginalDbColumnName(){
				
					return "MEDICAMENTO";
				
				}

				
			    public String FORMA_MEDICAMENTO;

				public String getFORMA_MEDICAMENTO () {
					return this.FORMA_MEDICAMENTO;
				}

				public Boolean FORMA_MEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean FORMA_MEDICAMENTOIsKey(){
				    return false;
				}
				public Integer FORMA_MEDICAMENTOLength(){
				    return 100;
				}
				public Integer FORMA_MEDICAMENTOPrecision(){
				    return 0;
				}
				public String FORMA_MEDICAMENTODefault(){
				
					return null;
				
				}
				public String FORMA_MEDICAMENTOComment(){
				
				    return "Forma farmac\u00E9utica";
				
				}
				public String FORMA_MEDICAMENTOPattern(){
				
					return "";
				
				}
				public String FORMA_MEDICAMENTOOriginalDbColumnName(){
				
					return "FORMA_MEDICAMENTO";
				
				}

				
			    public String CONCENTRACION;

				public String getCONCENTRACION () {
					return this.CONCENTRACION;
				}

				public Boolean CONCENTRACIONIsNullable(){
				    return true;
				}
				public Boolean CONCENTRACIONIsKey(){
				    return false;
				}
				public Integer CONCENTRACIONLength(){
				    return 50;
				}
				public Integer CONCENTRACIONPrecision(){
				    return 0;
				}
				public String CONCENTRACIONDefault(){
				
					return null;
				
				}
				public String CONCENTRACIONComment(){
				
				    return "Concentraci\u00F3n del medicamento";
				
				}
				public String CONCENTRACIONPattern(){
				
					return "";
				
				}
				public String CONCENTRACIONOriginalDbColumnName(){
				
					return "CONCENTRACION";
				
				}

				
			    public BigDecimal CANTUNIDADES;

				public BigDecimal getCANTUNIDADES () {
					return this.CANTUNIDADES;
				}

				public Boolean CANTUNIDADESIsNullable(){
				    return true;
				}
				public Boolean CANTUNIDADESIsKey(){
				    return false;
				}
				public Integer CANTUNIDADESLength(){
				    return 0;
				}
				public Integer CANTUNIDADESPrecision(){
				    return null;
				}
				public String CANTUNIDADESDefault(){
				
					return null;
				
				}
				public String CANTUNIDADESComment(){
				
				    return "N\u00FAmero de unidades";
				
				}
				public String CANTUNIDADESPattern(){
				
					return "";
				
				}
				public String CANTUNIDADESOriginalDbColumnName(){
				
					return "CANTUNIDADES";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return true;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return 0;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return null;
				
				}
				public String VUNITARIOComment(){
				
				    return "Valor unitario de medicamento";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return 0;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "Valor total de medicamento";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 7;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String TRIPS;

				public String getTRIPS () {
					return this.TRIPS;
				}

				public Boolean TRIPSIsNullable(){
				    return true;
				}
				public Boolean TRIPSIsKey(){
				    return false;
				}
				public Integer TRIPSLength(){
				    return 10;
				}
				public Integer TRIPSPrecision(){
				    return 0;
				}
				public String TRIPSDefault(){
				
					return null;
				
				}
				public String TRIPSComment(){
				
				    return "";
				
				}
				public String TRIPSPattern(){
				
					return "";
				
				}
				public String TRIPSOriginalDbColumnName(){
				
					return "TRIPS";
				
				}

				
			    public BigDecimal MOVIMIENTO_ID;

				public BigDecimal getMOVIMIENTO_ID () {
					return this.MOVIMIENTO_ID;
				}

				public Boolean MOVIMIENTO_IDIsNullable(){
				    return true;
				}
				public Boolean MOVIMIENTO_IDIsKey(){
				    return false;
				}
				public Integer MOVIMIENTO_IDLength(){
				    return 0;
				}
				public Integer MOVIMIENTO_IDPrecision(){
				    return null;
				}
				public String MOVIMIENTO_IDDefault(){
				
					return null;
				
				}
				public String MOVIMIENTO_IDComment(){
				
				    return "";
				
				}
				public String MOVIMIENTO_IDPattern(){
				
					return "";
				
				}
				public String MOVIMIENTO_IDOriginalDbColumnName(){
				
					return "MOVIMIENTO_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "FK - BGEN_PERSONAS";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - BGEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String UNIDAD_MEDIDA;

				public String getUNIDAD_MEDIDA () {
					return this.UNIDAD_MEDIDA;
				}

				public Boolean UNIDAD_MEDIDAIsNullable(){
				    return true;
				}
				public Boolean UNIDAD_MEDIDAIsKey(){
				    return false;
				}
				public Integer UNIDAD_MEDIDALength(){
				    return 100;
				}
				public Integer UNIDAD_MEDIDAPrecision(){
				    return 0;
				}
				public String UNIDAD_MEDIDADefault(){
				
					return null;
				
				}
				public String UNIDAD_MEDIDAComment(){
				
				    return "Unidad de medida del medicamento";
				
				}
				public String UNIDAD_MEDIDAPattern(){
				
					return "";
				
				}
				public String UNIDAD_MEDIDAOriginalDbColumnName(){
				
					return "UNIDAD_MEDIDA";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "EDAD SIMPLE DE LA PERSONA AL MOMENTO DE LA ATENCI\u00D3N";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return 10;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return 0;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "Unidad de medida de la edad simple (A\u00F1os, Meses)";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODMEDICAMENTO = readString(dis);
					
					this.TMEDICAMENTO = readString(dis);
					
					this.MEDICAMENTO = readString(dis);
					
					this.FORMA_MEDICAMENTO = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
						this.CANTUNIDADES = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
					this.PERIODO = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.TRIPS = readString(dis);
					
						this.MOVIMIENTO_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.UNIDAD_MEDIDA = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.CODFACTURA = readString(dis);
					
					this.CODPRESTADOR = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CODMEDICAMENTO = readString(dis);
					
					this.TMEDICAMENTO = readString(dis);
					
					this.MEDICAMENTO = readString(dis);
					
					this.FORMA_MEDICAMENTO = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
						this.CANTUNIDADES = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
					this.PERIODO = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.TRIPS = readString(dis);
					
						this.MOVIMIENTO_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.UNIDAD_MEDIDA = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODMEDICAMENTO,dos);
					
					// String
				
						writeString(this.TMEDICAMENTO,dos);
					
					// String
				
						writeString(this.MEDICAMENTO,dos);
					
					// String
				
						writeString(this.FORMA_MEDICAMENTO,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTUNIDADES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MOVIMIENTO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.UNIDAD_MEDIDA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CODMEDICAMENTO,dos);
					
					// String
				
						writeString(this.TMEDICAMENTO,dos);
					
					// String
				
						writeString(this.MEDICAMENTO,dos);
					
					// String
				
						writeString(this.FORMA_MEDICAMENTO,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTUNIDADES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.TRIPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.MOVIMIENTO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.UNIDAD_MEDIDA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODFACTURA="+CODFACTURA);
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",CODMEDICAMENTO="+CODMEDICAMENTO);
		sb.append(",TMEDICAMENTO="+TMEDICAMENTO);
		sb.append(",MEDICAMENTO="+MEDICAMENTO);
		sb.append(",FORMA_MEDICAMENTO="+FORMA_MEDICAMENTO);
		sb.append(",CONCENTRACION="+CONCENTRACION);
		sb.append(",CANTUNIDADES="+String.valueOf(CANTUNIDADES));
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",PERIODO="+PERIODO);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",TRIPS="+TRIPS);
		sb.append(",MOVIMIENTO_ID="+String.valueOf(MOVIMIENTO_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",UNIDAD_MEDIDA="+UNIDAD_MEDIDA);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public BigDecimal MOVIMIENTO_ID;

				public BigDecimal getMOVIMIENTO_ID () {
					return this.MOVIMIENTO_ID;
				}

				public Boolean MOVIMIENTO_IDIsNullable(){
				    return false;
				}
				public Boolean MOVIMIENTO_IDIsKey(){
				    return false;
				}
				public Integer MOVIMIENTO_IDLength(){
				    return null;
				}
				public Integer MOVIMIENTO_IDPrecision(){
				    return null;
				}
				public String MOVIMIENTO_IDDefault(){
				
					return "";
				
				}
				public String MOVIMIENTO_IDComment(){
				
				    return "";
				
				}
				public String MOVIMIENTO_IDPattern(){
				
					return "";
				
				}
				public String MOVIMIENTO_IDOriginalDbColumnName(){
				
					return "MOVIMIENTO_ID";
				
				}

				
			    public String CODFACTURA;

				public String getCODFACTURA () {
					return this.CODFACTURA;
				}

				public Boolean CODFACTURAIsNullable(){
				    return true;
				}
				public Boolean CODFACTURAIsKey(){
				    return false;
				}
				public Integer CODFACTURALength(){
				    return null;
				}
				public Integer CODFACTURAPrecision(){
				    return null;
				}
				public String CODFACTURADefault(){
				
					return null;
				
				}
				public String CODFACTURAComment(){
				
				    return "";
				
				}
				public String CODFACTURAPattern(){
				
					return "";
				
				}
				public String CODFACTURAOriginalDbColumnName(){
				
					return "CODFACTURA";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String CODPRESTADOR;

				public String getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return null;
				}
				public Integer CODPRESTADORPrecision(){
				    return null;
				}
				public String CODPRESTADORDefault(){
				
					return null;
				
				}
				public String CODPRESTADORComment(){
				
				    return "";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return null;
				}
				public Integer TDOCUMENTOPrecision(){
				    return null;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String AUTORIZACION;

				public String getAUTORIZACION () {
					return this.AUTORIZACION;
				}

				public Boolean AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer AUTORIZACIONLength(){
				    return null;
				}
				public Integer AUTORIZACIONPrecision(){
				    return null;
				}
				public String AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String AUTORIZACIONOriginalDbColumnName(){
				
					return "AUTORIZACION";
				
				}

				
			    public String CODGENERICO;

				public String getCODGENERICO () {
					return this.CODGENERICO;
				}

				public Boolean CODGENERICOIsNullable(){
				    return true;
				}
				public Boolean CODGENERICOIsKey(){
				    return false;
				}
				public Integer CODGENERICOLength(){
				    return null;
				}
				public Integer CODGENERICOPrecision(){
				    return null;
				}
				public String CODGENERICODefault(){
				
					return null;
				
				}
				public String CODGENERICOComment(){
				
				    return "";
				
				}
				public String CODGENERICOPattern(){
				
					return "";
				
				}
				public String CODGENERICOOriginalDbColumnName(){
				
					return "CODGENERICO";
				
				}

				
			    public String NOMBRE_GENERICO;

				public String getNOMBRE_GENERICO () {
					return this.NOMBRE_GENERICO;
				}

				public Boolean NOMBRE_GENERICOIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_GENERICOIsKey(){
				    return false;
				}
				public Integer NOMBRE_GENERICOLength(){
				    return null;
				}
				public Integer NOMBRE_GENERICOPrecision(){
				    return null;
				}
				public String NOMBRE_GENERICODefault(){
				
					return null;
				
				}
				public String NOMBRE_GENERICOComment(){
				
				    return "";
				
				}
				public String NOMBRE_GENERICOPattern(){
				
					return "";
				
				}
				public String NOMBRE_GENERICOOriginalDbColumnName(){
				
					return "NOMBRE_GENERICO";
				
				}

				
			    public String TMEDICAMENTO;

				public String getTMEDICAMENTO () {
					return this.TMEDICAMENTO;
				}

				public Boolean TMEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean TMEDICAMENTOIsKey(){
				    return false;
				}
				public Integer TMEDICAMENTOLength(){
				    return null;
				}
				public Integer TMEDICAMENTOPrecision(){
				    return null;
				}
				public String TMEDICAMENTODefault(){
				
					return null;
				
				}
				public String TMEDICAMENTOComment(){
				
				    return "";
				
				}
				public String TMEDICAMENTOPattern(){
				
					return "";
				
				}
				public String TMEDICAMENTOOriginalDbColumnName(){
				
					return "TMEDICAMENTO";
				
				}

				
			    public String FORMA_FARMACEUTICA;

				public String getFORMA_FARMACEUTICA () {
					return this.FORMA_FARMACEUTICA;
				}

				public Boolean FORMA_FARMACEUTICAIsNullable(){
				    return true;
				}
				public Boolean FORMA_FARMACEUTICAIsKey(){
				    return false;
				}
				public Integer FORMA_FARMACEUTICALength(){
				    return null;
				}
				public Integer FORMA_FARMACEUTICAPrecision(){
				    return null;
				}
				public String FORMA_FARMACEUTICADefault(){
				
					return null;
				
				}
				public String FORMA_FARMACEUTICAComment(){
				
				    return "";
				
				}
				public String FORMA_FARMACEUTICAPattern(){
				
					return "";
				
				}
				public String FORMA_FARMACEUTICAOriginalDbColumnName(){
				
					return "FORMA_FARMACEUTICA";
				
				}

				
			    public String CONCENTRACION;

				public String getCONCENTRACION () {
					return this.CONCENTRACION;
				}

				public Boolean CONCENTRACIONIsNullable(){
				    return true;
				}
				public Boolean CONCENTRACIONIsKey(){
				    return false;
				}
				public Integer CONCENTRACIONLength(){
				    return null;
				}
				public Integer CONCENTRACIONPrecision(){
				    return null;
				}
				public String CONCENTRACIONDefault(){
				
					return null;
				
				}
				public String CONCENTRACIONComment(){
				
				    return "";
				
				}
				public String CONCENTRACIONPattern(){
				
					return "";
				
				}
				public String CONCENTRACIONOriginalDbColumnName(){
				
					return "CONCENTRACION";
				
				}

				
			    public String UNIDAD_MEDIDA;

				public String getUNIDAD_MEDIDA () {
					return this.UNIDAD_MEDIDA;
				}

				public Boolean UNIDAD_MEDIDAIsNullable(){
				    return true;
				}
				public Boolean UNIDAD_MEDIDAIsKey(){
				    return false;
				}
				public Integer UNIDAD_MEDIDALength(){
				    return null;
				}
				public Integer UNIDAD_MEDIDAPrecision(){
				    return null;
				}
				public String UNIDAD_MEDIDADefault(){
				
					return null;
				
				}
				public String UNIDAD_MEDIDAComment(){
				
				    return "";
				
				}
				public String UNIDAD_MEDIDAPattern(){
				
					return "";
				
				}
				public String UNIDAD_MEDIDAOriginalDbColumnName(){
				
					return "UNIDAD_MEDIDA";
				
				}

				
			    public BigDecimal CANTIDAD_DESPACHADA;

				public BigDecimal getCANTIDAD_DESPACHADA () {
					return this.CANTIDAD_DESPACHADA;
				}

				public Boolean CANTIDAD_DESPACHADAIsNullable(){
				    return false;
				}
				public Boolean CANTIDAD_DESPACHADAIsKey(){
				    return false;
				}
				public Integer CANTIDAD_DESPACHADALength(){
				    return null;
				}
				public Integer CANTIDAD_DESPACHADAPrecision(){
				    return null;
				}
				public String CANTIDAD_DESPACHADADefault(){
				
					return "";
				
				}
				public String CANTIDAD_DESPACHADAComment(){
				
				    return "";
				
				}
				public String CANTIDAD_DESPACHADAPattern(){
				
					return "";
				
				}
				public String CANTIDAD_DESPACHADAOriginalDbColumnName(){
				
					return "CANTIDAD_DESPACHADA";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return true;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return null;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return "";
				
				}
				public String VUNITARIOComment(){
				
				    return "";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal TOTAL;

				public BigDecimal getTOTAL () {
					return this.TOTAL;
				}

				public Boolean TOTALIsNullable(){
				    return true;
				}
				public Boolean TOTALIsKey(){
				    return false;
				}
				public Integer TOTALLength(){
				    return null;
				}
				public Integer TOTALPrecision(){
				    return null;
				}
				public String TOTALDefault(){
				
					return "";
				
				}
				public String TOTALComment(){
				
				    return "";
				
				}
				public String TOTALPattern(){
				
					return "";
				
				}
				public String TOTALOriginalDbColumnName(){
				
					return "TOTAL";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return null;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String UMEDIDA_EDAD;

				public String getUMEDIDA_EDAD () {
					return this.UMEDIDA_EDAD;
				}

				public Boolean UMEDIDA_EDADIsNullable(){
				    return true;
				}
				public Boolean UMEDIDA_EDADIsKey(){
				    return false;
				}
				public Integer UMEDIDA_EDADLength(){
				    return null;
				}
				public Integer UMEDIDA_EDADPrecision(){
				    return null;
				}
				public String UMEDIDA_EDADDefault(){
				
					return null;
				
				}
				public String UMEDIDA_EDADComment(){
				
				    return "";
				
				}
				public String UMEDIDA_EDADPattern(){
				
					return "";
				
				}
				public String UMEDIDA_EDADOriginalDbColumnName(){
				
					return "UMEDIDA_EDAD";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.MOVIMIENTO_ID = (BigDecimal) dis.readObject();
					
					this.CODFACTURA = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.AUTORIZACION = readString(dis);
					
					this.CODGENERICO = readString(dis);
					
					this.NOMBRE_GENERICO = readString(dis);
					
					this.TMEDICAMENTO = readString(dis);
					
					this.FORMA_FARMACEUTICA = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
					this.UNIDAD_MEDIDA = readString(dis);
					
						this.CANTIDAD_DESPACHADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.MOVIMIENTO_ID = (BigDecimal) dis.readObject();
					
					this.CODFACTURA = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.CODPRESTADOR = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.AUTORIZACION = readString(dis);
					
					this.CODGENERICO = readString(dis);
					
					this.NOMBRE_GENERICO = readString(dis);
					
					this.TMEDICAMENTO = readString(dis);
					
					this.FORMA_FARMACEUTICA = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
					this.UNIDAD_MEDIDA = readString(dis);
					
						this.CANTIDAD_DESPACHADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.TOTAL = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.UMEDIDA_EDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.MOVIMIENTO_ID);
					
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.AUTORIZACION,dos);
					
					// String
				
						writeString(this.CODGENERICO,dos);
					
					// String
				
						writeString(this.NOMBRE_GENERICO,dos);
					
					// String
				
						writeString(this.TMEDICAMENTO,dos);
					
					// String
				
						writeString(this.FORMA_FARMACEUTICA,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// String
				
						writeString(this.UNIDAD_MEDIDA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_DESPACHADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.MOVIMIENTO_ID);
					
					// String
				
						writeString(this.CODFACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.CODPRESTADOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.AUTORIZACION,dos);
					
					// String
				
						writeString(this.CODGENERICO,dos);
					
					// String
				
						writeString(this.NOMBRE_GENERICO,dos);
					
					// String
				
						writeString(this.TMEDICAMENTO,dos);
					
					// String
				
						writeString(this.FORMA_FARMACEUTICA,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// String
				
						writeString(this.UNIDAD_MEDIDA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_DESPACHADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TOTAL);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.UMEDIDA_EDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MOVIMIENTO_ID="+String.valueOf(MOVIMIENTO_ID));
		sb.append(",CODFACTURA="+CODFACTURA);
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CODPRESTADOR="+CODPRESTADOR);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",AUTORIZACION="+AUTORIZACION);
		sb.append(",CODGENERICO="+CODGENERICO);
		sb.append(",NOMBRE_GENERICO="+NOMBRE_GENERICO);
		sb.append(",TMEDICAMENTO="+TMEDICAMENTO);
		sb.append(",FORMA_FARMACEUTICA="+FORMA_FARMACEUTICA);
		sb.append(",CONCENTRACION="+CONCENTRACION);
		sb.append(",UNIDAD_MEDIDA="+UNIDAD_MEDIDA);
		sb.append(",CANTIDAD_DESPACHADA="+String.valueOf(CANTIDAD_DESPACHADA));
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",TOTAL="+String.valueOf(TOTAL));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",UMEDIDA_EDAD="+UMEDIDA_EDAD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();
out4Struct out4 = new out4Struct();





	
	/**
	 * [tOracleOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_14", false);
		start_Hash.put("tOracleOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tOracleOutput_14 = 0;
		






    
    int nb_line_tOracleOutput_14 = 0;
    int nb_line_update_tOracleOutput_14 = 0;
    int nb_line_inserted_tOracleOutput_14 = 0;
    int nb_line_deleted_tOracleOutput_14 = 0;
    int nb_line_rejected_tOracleOutput_14 = 0;

    int tmp_batchUpdateCount_tOracleOutput_14 = 0;

    int deletedCount_tOracleOutput_14=0;
    int updatedCount_tOracleOutput_14=0;
    int insertedCount_tOracleOutput_14=0;
    int rowsToCommitCount_tOracleOutput_14=0;
    int rejectedCount_tOracleOutput_14=0;

    boolean whetherReject_tOracleOutput_14 = false;

    java.sql.Connection conn_tOracleOutput_14 = null;

    //optional table
    String dbschema_tOracleOutput_14 = null;
    String tableName_tOracleOutput_14 = null;
                    String driverClass_tOracleOutput_14 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_14);
                String url_tOracleOutput_14 = null;
                    url_tOracleOutput_14 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_14 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_14 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_14 = decryptedPassword_tOracleOutput_14;
                dbschema_tOracleOutput_14 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_14 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_14.put("user",dbUser_tOracleOutput_14);
                    atnParamsPrope_tOracleOutput_14.put("password",dbPwd_tOracleOutput_14);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_14.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_14 = java.sql.DriverManager.getConnection(url_tOracleOutput_14, atnParamsPrope_tOracleOutput_14);
        resourceMap.put("conn_tOracleOutput_14", conn_tOracleOutput_14);
            conn_tOracleOutput_14.setAutoCommit(false);
            int commitEvery_tOracleOutput_14 = 1000;
            int commitCounter_tOracleOutput_14 = 0;
        int batchSize_tOracleOutput_14 = 1000;
        int batchSizeCounter_tOracleOutput_14=0;
        int count_tOracleOutput_14=0;

        if(dbschema_tOracleOutput_14 == null || dbschema_tOracleOutput_14.trim().length() == 0) {
            tableName_tOracleOutput_14 = ("BRIPS_MEDICAMENTOS");
        } else {
            tableName_tOracleOutput_14 = dbschema_tOracleOutput_14 + "." + ("BRIPS_MEDICAMENTOS");
        }
                String insert_tOracleOutput_14 = "INSERT INTO " + tableName_tOracleOutput_14 + " (CODFACTURA,CODPRESTADOR,TDOCUMENTO,DOCUMENTO,CODAUTORIZACION,CODMEDICAMENTO,TMEDICAMENTO,MEDICAMENTO,FORMA_MEDICAMENTO,CONCENTRACION,CANTUNIDADES,VUNITARIO,VTOTAL,PERIODO,FECHA,TRIPS,MOVIMIENTO_ID,PERSONAS_ID,UORG_ID,UNIDAD_MEDIDA,EDAD,UMEDIDA_EDAD) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_14 = conn_tOracleOutput_14.prepareStatement(insert_tOracleOutput_14);
                        resourceMap.put("pstmt_tOracleOutput_14", pstmt_tOracleOutput_14);





 



/**
 * [tOracleOutput_14 begin ] stop
 */



	
	/**
	 * [tMap_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_24", false);
		start_Hash.put("tMap_24", System.currentTimeMillis());
		
	
	currentComponent="tMap_24";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tMap_24 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_24__Struct  {
}
Var__tMap_24__Struct Var__tMap_24 = new Var__tMap_24__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_24 begin ] stop
 */



	
	/**
	 * [tOracleInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_15", false);
		start_Hash.put("tOracleInput_15", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_15";
	
	
		int tos_count_tOracleInput_15 = 0;
		
	


	
		    int nb_line_tOracleInput_15 = 0;
		    java.sql.Connection conn_tOracleInput_15 = null;
				conn_tOracleInput_15 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
				
                boolean isTimeZoneNull_tOracleInput_15 = false;
				boolean isConnectionWrapped_tOracleInput_15 = !(conn_tOracleInput_15 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_15.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_15 = null;
                if (isConnectionWrapped_tOracleInput_15) {
					unwrappedOraConn_tOracleInput_15 = conn_tOracleInput_15.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_15 != null) {
                        isTimeZoneNull_tOracleInput_15 = (unwrappedOraConn_tOracleInput_15.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_15 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_15).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_15) {
					java.sql.Statement stmtGetTZ_tOracleInput_15 = conn_tOracleInput_15.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_15 = stmtGetTZ_tOracleInput_15.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_15 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_15.next()) {
						sessionTimezone_tOracleInput_15 = rsGetTZ_tOracleInput_15.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_15 && unwrappedOraConn_tOracleInput_15 != null) {
                        unwrappedOraConn_tOracleInput_15.setSessionTimeZone(sessionTimezone_tOracleInput_15);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_15).setSessionTimeZone(sessionTimezone_tOracleInput_15);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_15 = conn_tOracleInput_15.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_15.setFetchSize(1000);


		    String dbquery_tOracleInput_15 = "SELECT\n  MOV.ID AS MOVIMIENTO_ID,\n  '' AS CODFACTURA,\n  UORG.ID AS UORG_ID, \n  UORG.CODIGO AS CODPRESTADOR, \n  pac"
+"iente.ID AS PERSONAS_ID,\n  TDOC_PACI.SIGLA AS TDOCUMENTO,\n  paciente.DOCUMENTO AS DOCUMENTO,\n  '' AS AUTORIZACION,\n "
+" DACU.CODSSMP AS CODGENERICO,\n  GENE.DESCRIPCION AS NOMBRE_GENERICO,\n  '1' AS TMEDICAMENTO,\n  TFORMA.NOMBRE AS FORMA_"
+"FARMACEUTICA,\n  GENE.CONCENTRACION AS CONCENTRACION,\n  MUM.NOMBRE AS UNIDAD_MEDIDA,\n  DMOV.CANTIDAD AS CANTIDAD_DESPA"
+"CHADA,\n  DMOV.VUNITARIO AS VUNITARIO,\n  DMOV.TOTAL AS TOTAL,\n  MOV.FMOVIMIENTO AS FECHA,  \n  CASE\n    WHEN TRUNC(MO"
+"NTHS_BETWEEN (MOV.FMOVIMIENTO,PACIENTE.FECHA_NACIMIENTO)/12)<1\n    THEN TRUNC(MONTHS_BETWEEN (MOV.FMOVIMIENTO,PACIENTE."
+"FECHA_NACIMIENTO))\n    ELSE TRUNC(MONTHS_BETWEEN (MOV.FMOVIMIENTO,PACIENTE.FECHA_NACIMIENTO)/12) \n  END AS EDAD,\n  CA"
+"SE\n    WHEN TRUNC(MONTHS_BETWEEN (MOV.FMOVIMIENTO,PACIENTE.FECHA_NACIMIENTO)/12)<1\n    THEN 'Meses'\n    ELSE 'Años' "
+"\n  END UMEDIDA_EDAD  \nFROM MED_MOVIMIENTOS MOV \nINNER JOIN MED_DMOVIMIENTOS DMOV ON DMOV.MOVIMIENTOS_ID = MOV.ID AND D"
+"MOV.ESTREGISTRO_ID=1\nINNER JOIN MED_TMOVIMIENTOS TMOV ON TMOV.ID = MOV.TMOVIMIENTOS_ID AND TMOV.DESCRIPCION = 'Dispensa"
+"ción' \nLEFT JOIN MED_INVENTARIOS INV ON INV.ID = DMOV.INVENTARIOS_ID AND INV.ESTREGISTRO_ID=1\nLEFT JOIN MED_BODEGAS BO"
+"D ON BOD.ID = INV.BODEGAS_ID \nLEFT JOIN GEN_UORG UORG ON UORG.ID = BOD.UORG_ID \nLEFT JOIN GEN_FUERZAS F ON F.ID = UORG"
+".FUERZA_ID \nLEFT JOIN MED_PRODUCTOS PRO ON PRO.ID = INV.PRODUCTOS_ID \nLEFT JOIN MED_UMEDIDA MUM ON MUM.ID = PRO.UMEDID"
+"A_ID \nLEFT JOIN MED_FORMASFARMACEUTICAS FORMA ON FORMA.ID = PRO.FORMASFARMACEUTICAS_ID \nLEFT JOIN MED_TFORMASFARMACEUT"
+"ICAS TFORMA ON TFORMA.ID = FORMA.TFORMASFARMACEUTICAS_ID \nINNER JOIN MED_DACUERDOSFORMAS DAC ON DAC.FORMASFARMACEUTICAS"
+"_ID = FORMA.ID AND DAC.ESTADO = 'Activo' AND DAC.ESTREGISTRO_ID=1\nLEFT JOIN MED_GENERICOS GENE ON GENE.ID = FORMA.GENER"
+"ICOS_ID \nLEFT JOIN MED_DACUERDOS DACU ON DACU.ID = DAC.DACUERDOS_ID \nLEFT JOIN HCL_FORMMEDINSUMOS FORMMEDIN ON FORMMED"
+"IN.ID = MOV.FORMMEDINSUMOS_ID \nLEFT JOIN HCL_FORMMEDICAS FORMU ON FORMU.ID = FORMMEDIN.FORMMEDICAS_ID  \nLEFT JOIN HCL_"
+"PROCESOSASISTENCIALES PROCASIS ON PROCASIS.ID = FORMU.PROCESOSASISTENCIALES_ID \nLEFT JOIN GEN_PERSONAS PACIENTE ON PACI"
+"ENTE.ID = PROCASIS.PERSONAS_ID \nLEFT JOIN GEN_TDOCUMENTOS TDOC_PACI ON TDOC_PACI.ID = PACIENTE.TDOCUMENTOS_ID \nWHERE M"
+"OV.ESTREGISTRO_ID = 1 "+context.CONDICION_MEDICAMENTOS;
		    

		    globalMap.put("tOracleInput_15_QUERY",dbquery_tOracleInput_15);

		    java.sql.ResultSet rs_tOracleInput_15 = null;

		    try {
		    	rs_tOracleInput_15 = stmt_tOracleInput_15.executeQuery(dbquery_tOracleInput_15);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_15 = rs_tOracleInput_15.getMetaData();
		    	int colQtyInRs_tOracleInput_15 = rsmd_tOracleInput_15.getColumnCount();

		    String tmpContent_tOracleInput_15 = null;
		    
		    
		    while (rs_tOracleInput_15.next()) {
		        nb_line_tOracleInput_15++;
		        
							if(colQtyInRs_tOracleInput_15 < 1) {
								row12.MOVIMIENTO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(1) != null) {
						row12.MOVIMIENTO_ID = rs_tOracleInput_15.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 2) {
								row12.CODFACTURA = null;
							} else {
	                         		
        	row12.CODFACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 3) {
								row12.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(3) != null) {
						row12.UORG_ID = rs_tOracleInput_15.getBigDecimal(3);
					} else {
				
						row12.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 4) {
								row12.CODPRESTADOR = null;
							} else {
	                         		
        	row12.CODPRESTADOR = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 5) {
								row12.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(5) != null) {
						row12.PERSONAS_ID = rs_tOracleInput_15.getBigDecimal(5);
					} else {
				
						row12.PERSONAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 6) {
								row12.TDOCUMENTO = null;
							} else {
	                         		
        	row12.TDOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 7) {
								row12.DOCUMENTO = null;
							} else {
	                         		
        	row12.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 8) {
								row12.AUTORIZACION = null;
							} else {
	                         		
        	row12.AUTORIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 9) {
								row12.CODGENERICO = null;
							} else {
	                         		
        	row12.CODGENERICO = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 10) {
								row12.NOMBRE_GENERICO = null;
							} else {
	                         		
        	row12.NOMBRE_GENERICO = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 11) {
								row12.TMEDICAMENTO = null;
							} else {
	                         		
        	row12.TMEDICAMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 12) {
								row12.FORMA_FARMACEUTICA = null;
							} else {
	                         		
        	row12.FORMA_FARMACEUTICA = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 13) {
								row12.CONCENTRACION = null;
							} else {
	                         		
        	row12.CONCENTRACION = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 14) {
								row12.UNIDAD_MEDIDA = null;
							} else {
	                         		
        	row12.UNIDAD_MEDIDA = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 15) {
								row12.CANTIDAD_DESPACHADA = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(15) != null) {
						row12.CANTIDAD_DESPACHADA = rs_tOracleInput_15.getBigDecimal(15);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 16) {
								row12.VUNITARIO = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(16) != null) {
						row12.VUNITARIO = rs_tOracleInput_15.getBigDecimal(16);
					} else {
				
						row12.VUNITARIO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 17) {
								row12.TOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(17) != null) {
						row12.TOTAL = rs_tOracleInput_15.getBigDecimal(17);
					} else {
				
						row12.TOTAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 18) {
								row12.FECHA = null;
							} else {
										
			row12.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_15, 18);
		                    }
							if(colQtyInRs_tOracleInput_15 < 19) {
								row12.EDAD = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(19) != null) {
						row12.EDAD = rs_tOracleInput_15.getBigDecimal(19);
					} else {
				
						row12.EDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 20) {
								row12.UMEDIDA_EDAD = null;
							} else {
	                         		
        	row12.UMEDIDA_EDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 20, false);
		                    }
					




 



/**
 * [tOracleInput_15 begin ] stop
 */
	
	/**
	 * [tOracleInput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 


	tos_count_tOracleInput_15++;

/**
 * [tOracleInput_15 main ] stop
 */
	
	/**
	 * [tOracleInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tMap_24 main ] start
	 */

	

	
	
	currentComponent="tMap_24";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_24 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_24 = false;
		boolean mainRowRejected_tMap_24 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_24__Struct Var = Var__tMap_24;// ###############################
        // ###############################
        // # Output tables

out4 = null;


// # Output table : 'out4'
out4_tmp.CODFACTURA = row12.CODFACTURA ;
out4_tmp.CODPRESTADOR = row12.CODPRESTADOR ;
out4_tmp.TDOCUMENTO = row12.TDOCUMENTO ;
out4_tmp.DOCUMENTO = row12.DOCUMENTO ;
out4_tmp.CODAUTORIZACION = row12.AUTORIZACION ;
out4_tmp.CODMEDICAMENTO = row12.CODGENERICO ;
out4_tmp.TMEDICAMENTO = row12.TMEDICAMENTO ;
out4_tmp.MEDICAMENTO = row12.NOMBRE_GENERICO ;
out4_tmp.FORMA_MEDICAMENTO = row12.FORMA_FARMACEUTICA ;
out4_tmp.CONCENTRACION = row12.CONCENTRACION ;
out4_tmp.CANTUNIDADES = row12.CANTIDAD_DESPACHADA ;
out4_tmp.VUNITARIO = row12.VUNITARIO ;
out4_tmp.VTOTAL = row12.TOTAL ;
out4_tmp.PERIODO = TalendDate.formatDate("yyyy-MM",row12.FECHA);
out4_tmp.FECHA = row12.FECHA ;
out4_tmp.TRIPS = "Interna";
out4_tmp.MOVIMIENTO_ID = row12.MOVIMIENTO_ID ;
out4_tmp.PERSONAS_ID = row12.PERSONAS_ID ;
out4_tmp.UORG_ID = row12.UORG_ID ;
out4_tmp.UNIDAD_MEDIDA = row12.UNIDAD_MEDIDA ;
out4_tmp.EDAD = row12.EDAD ;
out4_tmp.UMEDIDA_EDAD = row12.UMEDIDA_EDAD ;
out4 = out4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_24 = false;










 


	tos_count_tMap_24++;

/**
 * [tMap_24 main ] stop
 */
	
	/**
	 * [tMap_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_24";
	
	

 



/**
 * [tMap_24 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tOracleOutput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out4"
						
						);
					}
					



        whetherReject_tOracleOutput_14 = false;
                        if(out4.CODFACTURA == null) {
pstmt_tOracleOutput_14.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(1, out4.CODFACTURA);
}

                        if(out4.CODPRESTADOR == null) {
pstmt_tOracleOutput_14.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(2, out4.CODPRESTADOR);
}

                        if(out4.TDOCUMENTO == null) {
pstmt_tOracleOutput_14.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(3, out4.TDOCUMENTO);
}

                        if(out4.DOCUMENTO == null) {
pstmt_tOracleOutput_14.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(4, out4.DOCUMENTO);
}

                        if(out4.CODAUTORIZACION == null) {
pstmt_tOracleOutput_14.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(5, out4.CODAUTORIZACION);
}

                        if(out4.CODMEDICAMENTO == null) {
pstmt_tOracleOutput_14.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(6, out4.CODMEDICAMENTO);
}

                        if(out4.TMEDICAMENTO == null) {
pstmt_tOracleOutput_14.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(7, out4.TMEDICAMENTO);
}

                        if(out4.MEDICAMENTO == null) {
pstmt_tOracleOutput_14.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(8, out4.MEDICAMENTO);
}

                        if(out4.FORMA_MEDICAMENTO == null) {
pstmt_tOracleOutput_14.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(9, out4.FORMA_MEDICAMENTO);
}

                        if(out4.CONCENTRACION == null) {
pstmt_tOracleOutput_14.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(10, out4.CONCENTRACION);
}

                        pstmt_tOracleOutput_14.setBigDecimal(11, out4.CANTUNIDADES);

                        pstmt_tOracleOutput_14.setBigDecimal(12, out4.VUNITARIO);

                        pstmt_tOracleOutput_14.setBigDecimal(13, out4.VTOTAL);

                        if(out4.PERIODO == null) {
pstmt_tOracleOutput_14.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(14, out4.PERIODO);
}

                        if(out4.FECHA != null) {
pstmt_tOracleOutput_14.setObject(15, new java.sql.Timestamp(out4.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_14.setNull(15, java.sql.Types.DATE);
}

                        if(out4.TRIPS == null) {
pstmt_tOracleOutput_14.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(16, out4.TRIPS);
}

                        pstmt_tOracleOutput_14.setBigDecimal(17, out4.MOVIMIENTO_ID);

                        pstmt_tOracleOutput_14.setBigDecimal(18, out4.PERSONAS_ID);

                        pstmt_tOracleOutput_14.setBigDecimal(19, out4.UORG_ID);

                        if(out4.UNIDAD_MEDIDA == null) {
pstmt_tOracleOutput_14.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(20, out4.UNIDAD_MEDIDA);
}

                        pstmt_tOracleOutput_14.setBigDecimal(21, out4.EDAD);

                        if(out4.UMEDIDA_EDAD == null) {
pstmt_tOracleOutput_14.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(22, out4.UMEDIDA_EDAD);
}

                pstmt_tOracleOutput_14.addBatch();
                nb_line_tOracleOutput_14++;
                batchSizeCounter_tOracleOutput_14++;
            if (batchSize_tOracleOutput_14 > 0 &&  batchSize_tOracleOutput_14 <= batchSizeCounter_tOracleOutput_14) {
                try {
                    pstmt_tOracleOutput_14.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_14){
globalMap.put("tOracleOutput_14_ERROR_MESSAGE",e_tOracleOutput_14.getMessage());
			        java.sql.SQLException ne_tOracleOutput_14 = e_tOracleOutput_14.getNextException(),sqle_tOracleOutput_14=null;
			    	String errormessage_tOracleOutput_14;
					if (ne_tOracleOutput_14 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_14 = new java.sql.SQLException(e_tOracleOutput_14.getMessage() + "\ncaused by: " + ne_tOracleOutput_14.getMessage(), ne_tOracleOutput_14.getSQLState(), ne_tOracleOutput_14.getErrorCode(), ne_tOracleOutput_14);
						errormessage_tOracleOutput_14 = sqle_tOracleOutput_14.getMessage();
					}else{
						errormessage_tOracleOutput_14 = e_tOracleOutput_14.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_14);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_14 = pstmt_tOracleOutput_14.getUpdateCount();
                    insertedCount_tOracleOutput_14
                += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                rowsToCommitCount_tOracleOutput_14 += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                batchSizeCounter_tOracleOutput_14 = 0;
            }
                commitCounter_tOracleOutput_14++;
                if(commitEvery_tOracleOutput_14 <= commitCounter_tOracleOutput_14) {
                    if(batchSizeCounter_tOracleOutput_14 > 0) {
                        try {
                            pstmt_tOracleOutput_14.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_14){
globalMap.put("tOracleOutput_14_ERROR_MESSAGE",e_tOracleOutput_14.getMessage());
					        java.sql.SQLException ne_tOracleOutput_14 = e_tOracleOutput_14.getNextException(),sqle_tOracleOutput_14=null;
					    	String errormessage_tOracleOutput_14;
							if (ne_tOracleOutput_14 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_14 = new java.sql.SQLException(e_tOracleOutput_14.getMessage() + "\ncaused by: " + ne_tOracleOutput_14.getMessage(), ne_tOracleOutput_14.getSQLState(), ne_tOracleOutput_14.getErrorCode(), ne_tOracleOutput_14);
								errormessage_tOracleOutput_14 = sqle_tOracleOutput_14.getMessage();
							}else{
								errormessage_tOracleOutput_14 = e_tOracleOutput_14.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_14);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_14 = pstmt_tOracleOutput_14.getUpdateCount();
                            insertedCount_tOracleOutput_14
                        += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                        rowsToCommitCount_tOracleOutput_14 += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_14 != 0){
                    	
                    }
                    conn_tOracleOutput_14.commit();
                    if(rowsToCommitCount_tOracleOutput_14 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_14 = 0;
                    }
                    commitCounter_tOracleOutput_14=0;
                    	batchSizeCounter_tOracleOutput_14=0;
                }

 


	tos_count_tOracleOutput_14++;

/**
 * [tOracleOutput_14 main ] stop
 */
	
	/**
	 * [tOracleOutput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	

 



/**
 * [tOracleOutput_14 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	

 



/**
 * [tOracleOutput_14 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_24";
	
	

 



/**
 * [tMap_24 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_15 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

}
}finally{
	if (rs_tOracleInput_15 != null) {
		rs_tOracleInput_15.close();
	}
	if (stmt_tOracleInput_15 != null) {
		stmt_tOracleInput_15.close();
	}
}

globalMap.put("tOracleInput_15_NB_LINE",nb_line_tOracleInput_15);
 

ok_Hash.put("tOracleInput_15", true);
end_Hash.put("tOracleInput_15", System.currentTimeMillis());




/**
 * [tOracleInput_15 end ] stop
 */

	
	/**
	 * [tMap_24 end ] start
	 */

	

	
	
	currentComponent="tMap_24";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tMap_24", true);
end_Hash.put("tMap_24", System.currentTimeMillis());




/**
 * [tMap_24 end ] stop
 */

	
	/**
	 * [tOracleOutput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_14 > 0) {
            try {
            	if (pstmt_tOracleOutput_14 != null) {
					
					pstmt_tOracleOutput_14.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_14){
globalMap.put("tOracleOutput_14_ERROR_MESSAGE",e_tOracleOutput_14.getMessage());
		        java.sql.SQLException ne_tOracleOutput_14 = e_tOracleOutput_14.getNextException(),sqle_tOracleOutput_14=null;
		    	String errormessage_tOracleOutput_14;
				if (ne_tOracleOutput_14 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_14 = new java.sql.SQLException(e_tOracleOutput_14.getMessage() + "\ncaused by: " + ne_tOracleOutput_14.getMessage(), ne_tOracleOutput_14.getSQLState(), ne_tOracleOutput_14.getErrorCode(), ne_tOracleOutput_14);
					errormessage_tOracleOutput_14 = sqle_tOracleOutput_14.getMessage();
				}else{
					errormessage_tOracleOutput_14 = e_tOracleOutput_14.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_14);
            	
        	}
        	if (pstmt_tOracleOutput_14 != null) {
            	tmp_batchUpdateCount_tOracleOutput_14 = pstmt_tOracleOutput_14.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_14
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
				rowsToCommitCount_tOracleOutput_14 += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
            }
        }
        if(pstmt_tOracleOutput_14 != null) {
			
				pstmt_tOracleOutput_14.close();
				resourceMap.remove("pstmt_tOracleOutput_14");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_14", true);
		if(commitCounter_tOracleOutput_14 > 0 && rowsToCommitCount_tOracleOutput_14 != 0) {
			
		}
		conn_tOracleOutput_14.commit();
		if(commitCounter_tOracleOutput_14 > 0 && rowsToCommitCount_tOracleOutput_14 != 0) {
			
			rowsToCommitCount_tOracleOutput_14 = 0;
		}
		commitCounter_tOracleOutput_14 = 0;
		
		
		conn_tOracleOutput_14 .close();
		
		resourceMap.put("finish_tOracleOutput_14", true);
   	

	
	nb_line_deleted_tOracleOutput_14=nb_line_deleted_tOracleOutput_14+ deletedCount_tOracleOutput_14;
	nb_line_update_tOracleOutput_14=nb_line_update_tOracleOutput_14 + updatedCount_tOracleOutput_14;
	nb_line_inserted_tOracleOutput_14=nb_line_inserted_tOracleOutput_14 + insertedCount_tOracleOutput_14;
	nb_line_rejected_tOracleOutput_14=nb_line_rejected_tOracleOutput_14 + rejectedCount_tOracleOutput_14;
	
        globalMap.put("tOracleOutput_14_NB_LINE",nb_line_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_UPDATED",nb_line_update_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_14);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_14", true);
end_Hash.put("tOracleOutput_14", System.currentTimeMillis());




/**
 * [tOracleOutput_14 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_15:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tJava_12Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_15 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 finally ] stop
 */

	
	/**
	 * [tMap_24 finally ] start
	 */

	

	
	
	currentComponent="tMap_24";
	
	

 



/**
 * [tMap_24 finally ] stop
 */

	
	/**
	 * [tOracleOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_14") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_14 = null;
                if ((pstmtToClose_tOracleOutput_14 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_14")) != null) {
                    pstmtToClose_tOracleOutput_14.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_14") == null){
            java.sql.Connection ctn_tOracleOutput_14 = null;
            if((ctn_tOracleOutput_14 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_14")) != null){
                try {
                    ctn_tOracleOutput_14.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_14) {
                    String errorMessage_tOracleOutput_14 = "failed to close the connection in tOracleOutput_14 :" + sqlEx_tOracleOutput_14.getMessage();
                    System.err.println(errorMessage_tOracleOutput_14);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_14 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 1);
	}
	


public void tJava_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_12", false);
		start_Hash.put("tJava_12", System.currentTimeMillis());
		
	
	currentComponent="tJava_12";
	
	
		int tos_count_tJava_12 = 0;
		


System.out.println("  - End RIPS: " + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );
 



/**
 * [tJava_12 begin ] stop
 */
	
	/**
	 * [tJava_12 main ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 


	tos_count_tJava_12++;

/**
 * [tJava_12 main ] stop
 */
	
	/**
	 * [tJava_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 



/**
 * [tJava_12 process_data_begin ] stop
 */
	
	/**
	 * [tJava_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 



/**
 * [tJava_12 process_data_end ] stop
 */
	
	/**
	 * [tJava_12 end ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 

ok_Hash.put("tJava_12", true);
end_Hash.put("tJava_12", System.currentTimeMillis());




/**
 * [tJava_12 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_12 finally ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 



/**
 * [tJava_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}
	


public static class row75Struct implements routines.system.IPersistableRow<row75Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return true;
				}
				public Integer HostLength(){
				    return 13;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return true;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return true;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 16;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 12;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Host == null) ? 0 : this.Host.hashCode());
					
						result = prime * result + ((this.Port == null) ? 0 : this.Port.hashCode());
					
						result = prime * result + ((this.Sid == null) ? 0 : this.Sid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row75Struct other = (row75Struct) obj;
		
						if (this.Host == null) {
							if (other.Host != null)
								return false;
						
						} else if (!this.Host.equals(other.Host))
						
							return false;
					
						if (this.Port == null) {
							if (other.Port != null)
								return false;
						
						} else if (!this.Port.equals(other.Port))
						
							return false;
					
						if (this.Sid == null) {
							if (other.Sid != null)
								return false;
						
						} else if (!this.Sid.equals(other.Sid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row75Struct other) {

		other.Host = this.Host;
	            other.Port = this.Port;
	            other.Sid = this.Sid;
	            other.ServiceName = this.ServiceName;
	            other.Schema = this.Schema;
	            other.User = this.User;
	            other.Password = this.Password;
	            other.SMTPHost = this.SMTPHost;
	            other.SMTPPort = this.SMTPPort;
	            other.UsernameMail = this.UsernameMail;
	            other.PasswordMail = this.PasswordMail;
	            
	}

	public void copyKeysDataTo(row75Struct other) {

		other.Host = this.Host;
	            	other.Port = this.Port;
	            	other.Sid = this.Sid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row75Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Host, other.Host);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Port, other.Port);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Sid, other.Sid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row75Struct row75 = new row75Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row75");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"	
	,"SMTPHost"		
	,"SMTPHost"+"/@xsi:nil"	
	,"SMTPPort"		
	,"SMTPPort"+"/@xsi:nil"	
	,"UsernameMail"		
	,"UsernameMail"+"/@xsi:nil"	
	,"PasswordMail"		
	,"PasswordMail"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("UTF-8");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	throw(e);
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
	if (nb_line_tFileInputXML_1>=50) {
	
			looper_tFileInputXML_1.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row75 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row75 = new row75Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Host");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Host =null;
									}else{
		row75.Host = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Port");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Port =null;
									}else{
		row75.Port = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Sid");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Sid =null;
									}else{
		row75.Sid = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("ServiceName");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.ServiceName =null;
									}else{
		row75.ServiceName = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Schema");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Schema =null;
									}else{
		row75.Schema = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("User");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.User =null;
									}else{
		row75.User = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Password");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Password =null;
									}else{
		row75.Password = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPHost");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPHost"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.SMTPHost =null;
									}else{
		row75.SMTPHost = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPPort");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPPort"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.SMTPPort =null;
									}else{
		row75.SMTPPort = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("UsernameMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("UsernameMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.UsernameMail =null;
									}else{
		row75.UsernameMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PasswordMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PasswordMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.PasswordMail =null;
									}else{
		row75.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
            throw(e);
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row75"
if(row75 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row75"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.db_origen_Server = row75.Host;
context.db_origen_Port = row75.Port;
//context.db_origen_Sid = row75.Sid;
context.db_origen_Login = row75.User;
context.db_origen_Password = row75.Password;
context.db_origen_ServiceName = row75.ServiceName;
//context.db_origen_Schema = row75.Schema;

//System.out.println(context.db_origen_ServiceName);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row75"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		throw(e);
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row75");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk40", 0, "ok");
				}
				tFileInputXML_2Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public static class row77Struct implements routines.system.IPersistableRow<row77Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return true;
				}
				public Integer HostLength(){
				    return 13;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return true;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return true;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 16;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 12;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 12;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Host == null) ? 0 : this.Host.hashCode());
					
						result = prime * result + ((this.Port == null) ? 0 : this.Port.hashCode());
					
						result = prime * result + ((this.Sid == null) ? 0 : this.Sid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row77Struct other = (row77Struct) obj;
		
						if (this.Host == null) {
							if (other.Host != null)
								return false;
						
						} else if (!this.Host.equals(other.Host))
						
							return false;
					
						if (this.Port == null) {
							if (other.Port != null)
								return false;
						
						} else if (!this.Port.equals(other.Port))
						
							return false;
					
						if (this.Sid == null) {
							if (other.Sid != null)
								return false;
						
						} else if (!this.Sid.equals(other.Sid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row77Struct other) {

		other.Host = this.Host;
	            other.Port = this.Port;
	            other.Sid = this.Sid;
	            other.ServiceName = this.ServiceName;
	            other.Schema = this.Schema;
	            other.User = this.User;
	            other.Password = this.Password;
	            
	}

	public void copyKeysDataTo(row77Struct other) {

		other.Host = this.Host;
	            	other.Port = this.Port;
	            	other.Sid = this.Sid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row77Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Host, other.Host);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Port, other.Port);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Sid, other.Sid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row77Struct row77 = new row77Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row77");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputXML_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_2", false);
		start_Hash.put("tFileInputXML_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_2";
	
	
		int tos_count_tFileInputXML_2 = 0;
		

	

int nb_line_tFileInputXML_2 = 0;

	String os_tFileInputXML_2 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_2=false;
	if(os_tFileInputXML_2.indexOf("windows") > -1 || os_tFileInputXML_2.indexOf("nt") > -1){
		isWindows_tFileInputXML_2=true;
	}
class XML_API_tFileInputXML_2{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();

String[] queryPaths_tFileInputXML_2 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_2 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_2 = "";
String[] node_tFileInputXML_2 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_2 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_2,asXMLs_tFileInputXML_2);
looper_tFileInputXML_2.setEncoding("UTF-8");
Object filename_tFileInputXML_2 = null;
try {
	filename_tFileInputXML_2 = context.BODEGA;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	throw(e);
	
}
if(filename_tFileInputXML_2 != null && filename_tFileInputXML_2 instanceof String && filename_tFileInputXML_2.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_2){
		filename_tFileInputXML_2 = filename_tFileInputXML_2.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_2 instanceof java.io.InputStream){
	looper_tFileInputXML_2.parse((java.io.InputStream)filename_tFileInputXML_2);
}else{
	looper_tFileInputXML_2.parse(String.valueOf(filename_tFileInputXML_2));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_2  = looper_tFileInputXML_2.iterator();
while (it_tFileInputXML_2.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_2 = it_tFileInputXML_2.next();
	if (nb_line_tFileInputXML_2>=50) {
	
			looper_tFileInputXML_2.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_2++;
		
	row77 = null;			
	boolean whetherReject_tFileInputXML_2 = false;
	row77 = new row77Struct();
	try{
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Host");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.Host =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.Host ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.Host =null;
									}else{
		row77.Host = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Port");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.Port =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.Port ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.Port =null;
									}else{
		row77.Port = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Sid");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.Sid =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.Sid ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.Sid =null;
									}else{
		row77.Sid = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("ServiceName");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.ServiceName =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.ServiceName ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.ServiceName =null;
									}else{
		row77.ServiceName = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Schema");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.Schema =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.Schema ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.Schema =null;
									}else{
		row77.Schema = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("User");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.User =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.User ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.User =null;
									}else{
		row77.User = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Password");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.Password =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.Password ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.Password =null;
									}else{
		row77.Password = str_tFileInputXML_2;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_2 = true;
            throw(e);
    }
			
			

 



/**
 * [tFileInputXML_2 begin ] stop
 */
	
	/**
	 * [tFileInputXML_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 


	tos_count_tFileInputXML_2++;

/**
 * [tFileInputXML_2 main ] stop
 */
	
	/**
	 * [tFileInputXML_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_begin ] stop
 */
// Start of branch "row77"
if(row77 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row77"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.db_destino_Server = row77.Host;
context.db_destino_Port = row77.Port;
//context.db_destino_Sid = row77.Sid;
context.db_destino_Login = row77.User;
context.db_destino_Password = row77.Password;
context.db_destino_ServiceName = row77.ServiceName;
//context.db_destino_Schema = row77.Schema;

//System.out.println(context.db_destino_ServiceName);

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "row77"




	
	/**
	 * [tFileInputXML_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	


	}
	try {
		looper_tFileInputXML_2.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		throw(e);
	
	}
	globalMap.put("tFileInputXML_2_NB_LINE",nb_line_tFileInputXML_2);

	

 

ok_Hash.put("tFileInputXML_2", true);
end_Hash.put("tFileInputXML_2", System.currentTimeMillis());




/**
 * [tFileInputXML_2 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row77");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk41", 0, "ok");
				}
				tOracleConnection_3Process(globalMap);



/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row33Struct row33 = new row33Struct();
row33Struct row35 = row33;





	
	/**
	 * [tRunJob_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_17", false);
		start_Hash.put("tRunJob_17", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tRunJob_17 = 0;
		
class DealChildJobLibrary_tRunJob_17 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_17 dealChildJobLibrary_tRunJob_17 = new DealChildJobLibrary_tRunJob_17();

	class JVMArgumentHelper_tRunJob_17 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_17 jvm_argument_helper_tRunJob_17 = new JVMArgumentHelper_tRunJob_17();
	
	String audit_jar_path_tRunJob_17 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_17 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("moment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("root_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("father_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("project");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("context");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("priority");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("code");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row33.type = lcm.getType();
		row33.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row33.priority = lcm.getPriority();
		row33.message = lcm.getMessage();
		row33.code = lcm.getCode();
		
		row33.moment = java.util.Calendar.getInstance().getTime();
	
    	row33.pid = pid;
		row33.root_pid = rootPid;
		row33.father_pid = fatherPid;
	
    	row33.project = projectName;
    	row33.job = jobName;
    	row33.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row33"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row33.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row33.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row33.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row33.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row33.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row33.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row33.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row33.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row33.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row33.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row33.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row33.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row33.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row33.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row33.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            row33.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row33.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row33.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row33.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row33.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row33.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row33.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row33.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            row33.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

                    }



 
     row35 = row33;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_17 main ] start
	 */

	

	
	
	currentComponent="tRunJob_17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row35"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_17 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_17 = System.getProperty("os.name");
			if (osName_tRunJob_17 != null && osName_tRunJob_17.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_17.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_17.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_17 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_17 != null){
								paraList_tRunJob_17.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_17);
							}
							String log4j2_config_tRunJob_17 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_17 != null){
								paraList_tRunJob_17.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_17);
							}
							if (log4j1_config_tRunJob_17 != null || log4j2_config_tRunJob_17 != null) {
								paraList_tRunJob_17.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_17.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_17.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "-cp");
		      				
              					String classpath_tRunJob_17_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xercesImpl-2.12.2.jar;../lib/xml-apis-1.4.01.jar;../lib/slf4j-api-1.7.34.jar;../lib/crypto-utils-7.1.16.jar;../lib/TalendSAX.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/dom4j-2.1.3.jar;mail_1_3.jar;";
              					
              					if(audit_jar_path_tRunJob_17!=null && !audit_jar_path_tRunJob_17.isEmpty()) {
		      						classpath_tRunJob_17_5 += audit_jar_path_tRunJob_17;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, dealChildJobLibrary_tRunJob_17.replaceJarPathsFromCrcMap(classpath_tRunJob_17_5), true);
		      				
		      					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "rep_rips_diario.mail_1_3.Mail");
		      				
		      					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "--father_node=tRunJob_17");
		      				
		      					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_17.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_17.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_17 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_17 != null){
								paraList_tRunJob_17.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_17);
							}
							String log4j2_config_tRunJob_17 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_17 != null){
								paraList_tRunJob_17.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_17);
							}
							if (log4j1_config_tRunJob_17 != null || log4j2_config_tRunJob_17 != null) {
								paraList_tRunJob_17.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_17.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_17.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "-cp");
		      				
		      					String classpath_tRunJob_17_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xercesImpl-2.12.2.jar:$ROOT_PATH/../lib/xml-apis-1.4.01.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/TalendSAX.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/mail_1_3.jar:";
		      					
		      					if(audit_jar_path_tRunJob_17!=null && !audit_jar_path_tRunJob_17.isEmpty()) {
		      						classpath_tRunJob_17_5 += audit_jar_path_tRunJob_17;
		      					}
		      					
								jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, dealChildJobLibrary_tRunJob_17.replaceJarPathsFromCrcMap(classpath_tRunJob_17_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "rep_rips_diario.mail_1_3.Mail");
		      				
								jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "--father_node=tRunJob_17");
		      				
								jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_17.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_17.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_17.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_17 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_17 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_17".equals(tRunJobName_tRunJob_17) && childResumePath_tRunJob_17 != null){
		paraList_tRunJob_17.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_17.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_17");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_17 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_17 = null;

	
		obj_tRunJob_17 = row35.moment;
		if(obj_tRunJob_17!=null) {
			if (obj_tRunJob_17.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_17.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_17).getTime());
			} else {
				
					paraList_tRunJob_17.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_17));
					
				
			}
		} else {
			paraList_tRunJob_17.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_17.put("moment", obj_tRunJob_17);
	
		obj_tRunJob_17 = row35.project;
		if(obj_tRunJob_17!=null) {
			if (obj_tRunJob_17.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_17.add("--context_param project=" + ((java.util.Date) obj_tRunJob_17).getTime());
			} else {
				
					paraList_tRunJob_17.add("--context_param project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_17));
					
				
			}
		} else {
			paraList_tRunJob_17.add("--context_param project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_17.put("project", obj_tRunJob_17);
	
		obj_tRunJob_17 = row35.job;
		if(obj_tRunJob_17!=null) {
			if (obj_tRunJob_17.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_17.add("--context_param job=" + ((java.util.Date) obj_tRunJob_17).getTime());
			} else {
				
					paraList_tRunJob_17.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_17));
					
				
			}
		} else {
			paraList_tRunJob_17.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_17.put("job", obj_tRunJob_17);
	
		obj_tRunJob_17 = row35.context;
		if(obj_tRunJob_17!=null) {
			if (obj_tRunJob_17.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_17.add("--context_param context=" + ((java.util.Date) obj_tRunJob_17).getTime());
			} else {
				
					paraList_tRunJob_17.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_17));
					
				
			}
		} else {
			paraList_tRunJob_17.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_17.put("context", obj_tRunJob_17);
	
		obj_tRunJob_17 = row35.origin;
		if(obj_tRunJob_17!=null) {
			if (obj_tRunJob_17.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_17.add("--context_param origin=" + ((java.util.Date) obj_tRunJob_17).getTime());
			} else {
				
					paraList_tRunJob_17.add("--context_param origin=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_17));
					
				
			}
		} else {
			paraList_tRunJob_17.add("--context_param origin=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_17.put("origin", obj_tRunJob_17);
	
		obj_tRunJob_17 = row35.message;
		if(obj_tRunJob_17!=null) {
			if (obj_tRunJob_17.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_17.add("--context_param message=" + ((java.util.Date) obj_tRunJob_17).getTime());
			} else {
				
					paraList_tRunJob_17.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_17));
					
				
			}
		} else {
			paraList_tRunJob_17.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_17.put("message", obj_tRunJob_17);
	
		obj_tRunJob_17 = context.db_origen_Server;
		if(obj_tRunJob_17!=null) {
			if (obj_tRunJob_17.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_17.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_17).getTime());
			} else {
				
					paraList_tRunJob_17.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_17));
					
				
			}
		} else {
			paraList_tRunJob_17.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_17.put("server_origen", obj_tRunJob_17);
	
		obj_tRunJob_17 = context.db_origen_Login;
		if(obj_tRunJob_17!=null) {
			if (obj_tRunJob_17.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_17.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_17).getTime());
			} else {
				
					paraList_tRunJob_17.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_17));
					
				
			}
		} else {
			paraList_tRunJob_17.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_17.put("user_origen", obj_tRunJob_17);
	
		obj_tRunJob_17 = context.db_origen_ServiceName;
		if(obj_tRunJob_17!=null) {
			if (obj_tRunJob_17.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_17.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_17).getTime());
			} else {
				
					paraList_tRunJob_17.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_17));
					
				
			}
		} else {
			paraList_tRunJob_17.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_17.put("service_name_origen", obj_tRunJob_17);
	
		obj_tRunJob_17 = context.db_destino_Server;
		if(obj_tRunJob_17!=null) {
			if (obj_tRunJob_17.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_17.add("--context_param server_destino=" + ((java.util.Date) obj_tRunJob_17).getTime());
			} else {
				
					paraList_tRunJob_17.add("--context_param server_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_17));
					
				
			}
		} else {
			paraList_tRunJob_17.add("--context_param server_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_17.put("server_destino", obj_tRunJob_17);
	
		obj_tRunJob_17 = context.db_destino_Login;
		if(obj_tRunJob_17!=null) {
			if (obj_tRunJob_17.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_17.add("--context_param user_destino=" + ((java.util.Date) obj_tRunJob_17).getTime());
			} else {
				
					paraList_tRunJob_17.add("--context_param user_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_17));
					
				
			}
		} else {
			paraList_tRunJob_17.add("--context_param user_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_17.put("user_destino", obj_tRunJob_17);
	
		obj_tRunJob_17 = context.db_destino_ServiceName;
		if(obj_tRunJob_17!=null) {
			if (obj_tRunJob_17.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_17.add("--context_param service_name_destino=" + ((java.util.Date) obj_tRunJob_17).getTime());
			} else {
				
					paraList_tRunJob_17.add("--context_param service_name_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_17));
					
				
			}
		} else {
			paraList_tRunJob_17.add("--context_param service_name_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_17.put("service_name_destino", obj_tRunJob_17);
	
	
				class ConsoleHelper_tRunJob_17 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_17_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_17_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_17 consoleHelper_tRunJob_17 = new ConsoleHelper_tRunJob_17();

		Runtime runtime_tRunJob_17 = Runtime.getRuntime();
		Process ps_tRunJob_17 = null;
		
		//0 indicates normal termination
        int result_tRunJob_17;
        StringBuffer errorMsg_tRunJob_17 = new StringBuffer();
        try {
            ps_tRunJob_17 = runtime_tRunJob_17.exec((String[])paraList_tRunJob_17.toArray(new String[paraList_tRunJob_17.size()]));

            Thread normal_tRunJob_17 = consoleHelper_tRunJob_17.getNormalThread(ps_tRunJob_17);
            normal_tRunJob_17.start();

            Thread error_tRunJob_17 = consoleHelper_tRunJob_17.getErrorThread(ps_tRunJob_17, errorMsg_tRunJob_17);
            error_tRunJob_17.start();

            result_tRunJob_17 = ps_tRunJob_17.waitFor();
            normal_tRunJob_17.join();
            error_tRunJob_17.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_17_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_17.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_17_CHILD_RETURN_CODE",result_tRunJob_17);
		if(result_tRunJob_17 != 0){
   			globalMap.put("tRunJob_17_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_17.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_17 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_17.toString());
			
  		}

		

 


	tos_count_tRunJob_17++;

/**
 * [tRunJob_17 main ] stop
 */
	
	/**
	 * [tRunJob_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_17";
	
	

 



/**
 * [tRunJob_17 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_17";
	
	

 



/**
 * [tRunJob_17 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk48", 0, "ok");
				}
				tJava_13Process(globalMap);



/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */

	
	/**
	 * [tRunJob_17 end ] start
	 */

	

	
	
	currentComponent="tRunJob_17";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tRunJob_17", true);
end_Hash.put("tRunJob_17", System.currentTimeMillis());




/**
 * [tRunJob_17 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */

	
	/**
	 * [tRunJob_17 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_17";
	
	
	
 



/**
 * [tRunJob_17 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_13", false);
		start_Hash.put("tJava_13", System.currentTimeMillis());
		
	
	currentComponent="tJava_13";
	
	
		int tos_count_tJava_13 = 0;
		


context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.ESTADO_EXEC = "Interrumpido";
 



/**
 * [tJava_13 begin ] stop
 */
	
	/**
	 * [tJava_13 main ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 


	tos_count_tJava_13++;

/**
 * [tJava_13 main ] stop
 */
	
	/**
	 * [tJava_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 



/**
 * [tJava_13 process_data_begin ] stop
 */
	
	/**
	 * [tJava_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 



/**
 * [tJava_13 process_data_end ] stop
 */
	
	/**
	 * [tJava_13 end ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 

ok_Hash.put("tJava_13", true);
end_Hash.put("tJava_13", System.currentTimeMillis());




/**
 * [tJava_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_13 finally ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 



/**
 * [tJava_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_13_SUBPROCESS_STATE", 1);
	}
	


public void tJava_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_10", false);
		start_Hash.put("tJava_10", System.currentTimeMillis());
		
	
	currentComponent="tJava_10";
	
	
		int tos_count_tJava_10 = 0;
		


context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");
 



/**
 * [tJava_10 begin ] stop
 */
	
	/**
	 * [tJava_10 main ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 


	tos_count_tJava_10++;

/**
 * [tJava_10 main ] stop
 */
	
	/**
	 * [tJava_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 



/**
 * [tJava_10 process_data_begin ] stop
 */
	
	/**
	 * [tJava_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 



/**
 * [tJava_10 process_data_end ] stop
 */
	
	/**
	 * [tJava_10 end ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 

ok_Hash.put("tJava_10", true);
end_Hash.put("tJava_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk43", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tJava_10 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_10 finally ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 



/**
 * [tJava_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk44", 0, "ok");
				}
				tJava_11Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_11", false);
		start_Hash.put("tJava_11", System.currentTimeMillis());
		
	
	currentComponent="tJava_11";
	
	
		int tos_count_tJava_11 = 0;
		


context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");
 



/**
 * [tJava_11 begin ] stop
 */
	
	/**
	 * [tJava_11 main ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 


	tos_count_tJava_11++;

/**
 * [tJava_11 main ] stop
 */
	
	/**
	 * [tJava_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 



/**
 * [tJava_11 process_data_begin ] stop
 */
	
	/**
	 * [tJava_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 



/**
 * [tJava_11 process_data_end ] stop
 */
	
	/**
	 * [tJava_11 end ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 

ok_Hash.put("tJava_11", true);
end_Hash.put("tJava_11", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk45", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk26", 0, "ok");
				}
				tOracleClose_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk27", 0, "ok");
				}
				tOracleClose_2Process(globalMap);



/**
 * [tJava_11 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_11 finally ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 



/**
 * [tJava_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_RIPS_DIARIO_Rips.length) {
				if(length < 1024 && commonByteArray_REP_RIPS_DIARIO_Rips.length == 0) {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[1024];
				} else {
   					commonByteArray_REP_RIPS_DIARIO_Rips = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length);
			strReturn = new String(commonByteArray_REP_RIPS_DIARIO_Rips, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row34Struct row34 = new row34Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_INICIO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_FINAL");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ESTADO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("JOBS");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row34.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row34.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row34.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row34.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row34.JOBS = "RIPS";
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row34"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row34.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_2.append(
                            row34.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row34.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row34.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row34.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            row34.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row34.ESTADO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row34.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row34.JOBS != null) {
                        sb_tFileOutputDelimited_2.append(
                            row34.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

                    }



 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_3");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_3"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_2", false);
		start_Hash.put("tOracleClose_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_2";
	
	
		int tos_count_tOracleClose_2 = 0;
		

 



/**
 * [tOracleClose_2 begin ] stop
 */
	
	/**
	 * [tOracleClose_2 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

	java.sql.Connection conn_tOracleClose_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_4");
	
	if(conn_tOracleClose_2 != null && !conn_tOracleClose_2.isClosed())
	{
		
			conn_tOracleClose_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_4"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_2++;

/**
 * [tOracleClose_2 main ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_2 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 

ok_Hash.put("tOracleClose_2", true);
end_Hash.put("tOracleClose_2", System.currentTimeMillis());




/**
 * [tOracleClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 1);
	}
	


public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk42", 0, "ok");
				}
				tJava_10Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_REP_RIPS_DIARIO_Rips = new byte[0];
    static byte[] commonByteArray_REP_RIPS_DIARIO_Rips = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public String FCARDIACA_VALOR;

				public String getFCARDIACA_VALOR () {
					return this.FCARDIACA_VALOR;
				}

				public Boolean FCARDIACA_VALORIsNullable(){
				    return true;
				}
				public Boolean FCARDIACA_VALORIsKey(){
				    return false;
				}
				public Integer FCARDIACA_VALORLength(){
				    return 40;
				}
				public Integer FCARDIACA_VALORPrecision(){
				    return 0;
				}
				public String FCARDIACA_VALORDefault(){
				
					return null;
				
				}
				public String FCARDIACA_VALORComment(){
				
				    return "";
				
				}
				public String FCARDIACA_VALORPattern(){
				
					return "";
				
				}
				public String FCARDIACA_VALOROriginalDbColumnName(){
				
					return "FCARDIACA_VALOR";
				
				}

				
			    public String FCARDIACA_UMEDIDA;

				public String getFCARDIACA_UMEDIDA () {
					return this.FCARDIACA_UMEDIDA;
				}

				public Boolean FCARDIACA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean FCARDIACA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer FCARDIACA_UMEDIDALength(){
				    return 20;
				}
				public Integer FCARDIACA_UMEDIDAPrecision(){
				    return 0;
				}
				public String FCARDIACA_UMEDIDADefault(){
				
					return null;
				
				}
				public String FCARDIACA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String FCARDIACA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String FCARDIACA_UMEDIDAOriginalDbColumnName(){
				
					return "FCARDIACA_UMEDIDA";
				
				}

				
			    public String PARTERIALSIS_VALOR;

				public String getPARTERIALSIS_VALOR () {
					return this.PARTERIALSIS_VALOR;
				}

				public Boolean PARTERIALSIS_VALORIsNullable(){
				    return true;
				}
				public Boolean PARTERIALSIS_VALORIsKey(){
				    return false;
				}
				public Integer PARTERIALSIS_VALORLength(){
				    return 40;
				}
				public Integer PARTERIALSIS_VALORPrecision(){
				    return 0;
				}
				public String PARTERIALSIS_VALORDefault(){
				
					return null;
				
				}
				public String PARTERIALSIS_VALORComment(){
				
				    return "";
				
				}
				public String PARTERIALSIS_VALORPattern(){
				
					return "";
				
				}
				public String PARTERIALSIS_VALOROriginalDbColumnName(){
				
					return "PARTERIALSIS_VALOR";
				
				}

				
			    public String PARTERIALSIS_UMEDIDA;

				public String getPARTERIALSIS_UMEDIDA () {
					return this.PARTERIALSIS_UMEDIDA;
				}

				public Boolean PARTERIALSIS_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PARTERIALSIS_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PARTERIALSIS_UMEDIDALength(){
				    return 20;
				}
				public Integer PARTERIALSIS_UMEDIDAPrecision(){
				    return 0;
				}
				public String PARTERIALSIS_UMEDIDADefault(){
				
					return null;
				
				}
				public String PARTERIALSIS_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PARTERIALSIS_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PARTERIALSIS_UMEDIDAOriginalDbColumnName(){
				
					return "PARTERIALSIS_UMEDIDA";
				
				}

				
			    public String PARTERIALDIA_VALOR;

				public String getPARTERIALDIA_VALOR () {
					return this.PARTERIALDIA_VALOR;
				}

				public Boolean PARTERIALDIA_VALORIsNullable(){
				    return true;
				}
				public Boolean PARTERIALDIA_VALORIsKey(){
				    return false;
				}
				public Integer PARTERIALDIA_VALORLength(){
				    return 40;
				}
				public Integer PARTERIALDIA_VALORPrecision(){
				    return 0;
				}
				public String PARTERIALDIA_VALORDefault(){
				
					return null;
				
				}
				public String PARTERIALDIA_VALORComment(){
				
				    return "";
				
				}
				public String PARTERIALDIA_VALORPattern(){
				
					return "";
				
				}
				public String PARTERIALDIA_VALOROriginalDbColumnName(){
				
					return "PARTERIALDIA_VALOR";
				
				}

				
			    public String PARTERIALDIA_UMEDIDA;

				public String getPARTERIALDIA_UMEDIDA () {
					return this.PARTERIALDIA_UMEDIDA;
				}

				public Boolean PARTERIALDIA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PARTERIALDIA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PARTERIALDIA_UMEDIDALength(){
				    return 20;
				}
				public Integer PARTERIALDIA_UMEDIDAPrecision(){
				    return 0;
				}
				public String PARTERIALDIA_UMEDIDADefault(){
				
					return null;
				
				}
				public String PARTERIALDIA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PARTERIALDIA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PARTERIALDIA_UMEDIDAOriginalDbColumnName(){
				
					return "PARTERIALDIA_UMEDIDA";
				
				}

				
			    public String PARTERIALMED_VALOR;

				public String getPARTERIALMED_VALOR () {
					return this.PARTERIALMED_VALOR;
				}

				public Boolean PARTERIALMED_VALORIsNullable(){
				    return true;
				}
				public Boolean PARTERIALMED_VALORIsKey(){
				    return false;
				}
				public Integer PARTERIALMED_VALORLength(){
				    return 40;
				}
				public Integer PARTERIALMED_VALORPrecision(){
				    return 0;
				}
				public String PARTERIALMED_VALORDefault(){
				
					return null;
				
				}
				public String PARTERIALMED_VALORComment(){
				
				    return "";
				
				}
				public String PARTERIALMED_VALORPattern(){
				
					return "";
				
				}
				public String PARTERIALMED_VALOROriginalDbColumnName(){
				
					return "PARTERIALMED_VALOR";
				
				}

				
			    public String PARTERIALMED_UMEDIDA;

				public String getPARTERIALMED_UMEDIDA () {
					return this.PARTERIALMED_UMEDIDA;
				}

				public Boolean PARTERIALMED_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PARTERIALMED_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PARTERIALMED_UMEDIDALength(){
				    return 20;
				}
				public Integer PARTERIALMED_UMEDIDAPrecision(){
				    return 0;
				}
				public String PARTERIALMED_UMEDIDADefault(){
				
					return null;
				
				}
				public String PARTERIALMED_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PARTERIALMED_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PARTERIALMED_UMEDIDAOriginalDbColumnName(){
				
					return "PARTERIALMED_UMEDIDA";
				
				}

				
			    public String FRESPIRATORIA_VALOR;

				public String getFRESPIRATORIA_VALOR () {
					return this.FRESPIRATORIA_VALOR;
				}

				public Boolean FRESPIRATORIA_VALORIsNullable(){
				    return true;
				}
				public Boolean FRESPIRATORIA_VALORIsKey(){
				    return false;
				}
				public Integer FRESPIRATORIA_VALORLength(){
				    return 40;
				}
				public Integer FRESPIRATORIA_VALORPrecision(){
				    return 0;
				}
				public String FRESPIRATORIA_VALORDefault(){
				
					return null;
				
				}
				public String FRESPIRATORIA_VALORComment(){
				
				    return "";
				
				}
				public String FRESPIRATORIA_VALORPattern(){
				
					return "";
				
				}
				public String FRESPIRATORIA_VALOROriginalDbColumnName(){
				
					return "FRESPIRATORIA_VALOR";
				
				}

				
			    public String FRESPIRATORIA_UMEDIDA;

				public String getFRESPIRATORIA_UMEDIDA () {
					return this.FRESPIRATORIA_UMEDIDA;
				}

				public Boolean FRESPIRATORIA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean FRESPIRATORIA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer FRESPIRATORIA_UMEDIDALength(){
				    return 20;
				}
				public Integer FRESPIRATORIA_UMEDIDAPrecision(){
				    return 0;
				}
				public String FRESPIRATORIA_UMEDIDADefault(){
				
					return null;
				
				}
				public String FRESPIRATORIA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String FRESPIRATORIA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String FRESPIRATORIA_UMEDIDAOriginalDbColumnName(){
				
					return "FRESPIRATORIA_UMEDIDA";
				
				}

				
			    public String PULSO_VALOR;

				public String getPULSO_VALOR () {
					return this.PULSO_VALOR;
				}

				public Boolean PULSO_VALORIsNullable(){
				    return true;
				}
				public Boolean PULSO_VALORIsKey(){
				    return false;
				}
				public Integer PULSO_VALORLength(){
				    return 40;
				}
				public Integer PULSO_VALORPrecision(){
				    return 0;
				}
				public String PULSO_VALORDefault(){
				
					return null;
				
				}
				public String PULSO_VALORComment(){
				
				    return "";
				
				}
				public String PULSO_VALORPattern(){
				
					return "";
				
				}
				public String PULSO_VALOROriginalDbColumnName(){
				
					return "PULSO_VALOR";
				
				}

				
			    public String PULSO_UMEDIDA;

				public String getPULSO_UMEDIDA () {
					return this.PULSO_UMEDIDA;
				}

				public Boolean PULSO_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PULSO_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PULSO_UMEDIDALength(){
				    return 20;
				}
				public Integer PULSO_UMEDIDAPrecision(){
				    return 0;
				}
				public String PULSO_UMEDIDADefault(){
				
					return null;
				
				}
				public String PULSO_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PULSO_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PULSO_UMEDIDAOriginalDbColumnName(){
				
					return "PULSO_UMEDIDA";
				
				}

				
			    public String TEMPERATURA_VALOR;

				public String getTEMPERATURA_VALOR () {
					return this.TEMPERATURA_VALOR;
				}

				public Boolean TEMPERATURA_VALORIsNullable(){
				    return true;
				}
				public Boolean TEMPERATURA_VALORIsKey(){
				    return false;
				}
				public Integer TEMPERATURA_VALORLength(){
				    return 40;
				}
				public Integer TEMPERATURA_VALORPrecision(){
				    return 0;
				}
				public String TEMPERATURA_VALORDefault(){
				
					return null;
				
				}
				public String TEMPERATURA_VALORComment(){
				
				    return "";
				
				}
				public String TEMPERATURA_VALORPattern(){
				
					return "";
				
				}
				public String TEMPERATURA_VALOROriginalDbColumnName(){
				
					return "TEMPERATURA_VALOR";
				
				}

				
			    public String TEMPERATURA_UMEDIDA;

				public String getTEMPERATURA_UMEDIDA () {
					return this.TEMPERATURA_UMEDIDA;
				}

				public Boolean TEMPERATURA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean TEMPERATURA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer TEMPERATURA_UMEDIDALength(){
				    return 20;
				}
				public Integer TEMPERATURA_UMEDIDAPrecision(){
				    return 0;
				}
				public String TEMPERATURA_UMEDIDADefault(){
				
					return null;
				
				}
				public String TEMPERATURA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String TEMPERATURA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String TEMPERATURA_UMEDIDAOriginalDbColumnName(){
				
					return "TEMPERATURA_UMEDIDA";
				
				}

				
			    public String PESO_VALOR;

				public String getPESO_VALOR () {
					return this.PESO_VALOR;
				}

				public Boolean PESO_VALORIsNullable(){
				    return true;
				}
				public Boolean PESO_VALORIsKey(){
				    return false;
				}
				public Integer PESO_VALORLength(){
				    return 40;
				}
				public Integer PESO_VALORPrecision(){
				    return 0;
				}
				public String PESO_VALORDefault(){
				
					return null;
				
				}
				public String PESO_VALORComment(){
				
				    return "";
				
				}
				public String PESO_VALORPattern(){
				
					return "";
				
				}
				public String PESO_VALOROriginalDbColumnName(){
				
					return "PESO_VALOR";
				
				}

				
			    public String PESO_UMEDIDA;

				public String getPESO_UMEDIDA () {
					return this.PESO_UMEDIDA;
				}

				public Boolean PESO_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean PESO_UMEDIDAIsKey(){
				    return false;
				}
				public Integer PESO_UMEDIDALength(){
				    return 20;
				}
				public Integer PESO_UMEDIDAPrecision(){
				    return 0;
				}
				public String PESO_UMEDIDADefault(){
				
					return null;
				
				}
				public String PESO_UMEDIDAComment(){
				
				    return "";
				
				}
				public String PESO_UMEDIDAPattern(){
				
					return "";
				
				}
				public String PESO_UMEDIDAOriginalDbColumnName(){
				
					return "PESO_UMEDIDA";
				
				}

				
			    public String ESTATURA_VALOR;

				public String getESTATURA_VALOR () {
					return this.ESTATURA_VALOR;
				}

				public Boolean ESTATURA_VALORIsNullable(){
				    return true;
				}
				public Boolean ESTATURA_VALORIsKey(){
				    return false;
				}
				public Integer ESTATURA_VALORLength(){
				    return 40;
				}
				public Integer ESTATURA_VALORPrecision(){
				    return 0;
				}
				public String ESTATURA_VALORDefault(){
				
					return null;
				
				}
				public String ESTATURA_VALORComment(){
				
				    return "";
				
				}
				public String ESTATURA_VALORPattern(){
				
					return "";
				
				}
				public String ESTATURA_VALOROriginalDbColumnName(){
				
					return "ESTATURA_VALOR";
				
				}

				
			    public String ESTATURA_UMEDIDA;

				public String getESTATURA_UMEDIDA () {
					return this.ESTATURA_UMEDIDA;
				}

				public Boolean ESTATURA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean ESTATURA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer ESTATURA_UMEDIDALength(){
				    return 20;
				}
				public Integer ESTATURA_UMEDIDAPrecision(){
				    return 0;
				}
				public String ESTATURA_UMEDIDADefault(){
				
					return null;
				
				}
				public String ESTATURA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String ESTATURA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String ESTATURA_UMEDIDAOriginalDbColumnName(){
				
					return "ESTATURA_UMEDIDA";
				
				}

				
			    public String IMC_VALOR;

				public String getIMC_VALOR () {
					return this.IMC_VALOR;
				}

				public Boolean IMC_VALORIsNullable(){
				    return true;
				}
				public Boolean IMC_VALORIsKey(){
				    return false;
				}
				public Integer IMC_VALORLength(){
				    return 40;
				}
				public Integer IMC_VALORPrecision(){
				    return 0;
				}
				public String IMC_VALORDefault(){
				
					return null;
				
				}
				public String IMC_VALORComment(){
				
				    return "";
				
				}
				public String IMC_VALORPattern(){
				
					return "";
				
				}
				public String IMC_VALOROriginalDbColumnName(){
				
					return "IMC_VALOR";
				
				}

				
			    public String IMC_UMEDIDA;

				public String getIMC_UMEDIDA () {
					return this.IMC_UMEDIDA;
				}

				public Boolean IMC_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean IMC_UMEDIDAIsKey(){
				    return false;
				}
				public Integer IMC_UMEDIDALength(){
				    return 20;
				}
				public Integer IMC_UMEDIDAPrecision(){
				    return 0;
				}
				public String IMC_UMEDIDADefault(){
				
					return null;
				
				}
				public String IMC_UMEDIDAComment(){
				
				    return "";
				
				}
				public String IMC_UMEDIDAPattern(){
				
					return "";
				
				}
				public String IMC_UMEDIDAOriginalDbColumnName(){
				
					return "IMC_UMEDIDA";
				
				}

				
			    public String SOXIGENO_VALOR;

				public String getSOXIGENO_VALOR () {
					return this.SOXIGENO_VALOR;
				}

				public Boolean SOXIGENO_VALORIsNullable(){
				    return true;
				}
				public Boolean SOXIGENO_VALORIsKey(){
				    return false;
				}
				public Integer SOXIGENO_VALORLength(){
				    return 40;
				}
				public Integer SOXIGENO_VALORPrecision(){
				    return 0;
				}
				public String SOXIGENO_VALORDefault(){
				
					return null;
				
				}
				public String SOXIGENO_VALORComment(){
				
				    return "";
				
				}
				public String SOXIGENO_VALORPattern(){
				
					return "";
				
				}
				public String SOXIGENO_VALOROriginalDbColumnName(){
				
					return "SOXIGENO_VALOR";
				
				}

				
			    public String SOXIGENO_UMEDIDA;

				public String getSOXIGENO_UMEDIDA () {
					return this.SOXIGENO_UMEDIDA;
				}

				public Boolean SOXIGENO_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean SOXIGENO_UMEDIDAIsKey(){
				    return false;
				}
				public Integer SOXIGENO_UMEDIDALength(){
				    return 20;
				}
				public Integer SOXIGENO_UMEDIDAPrecision(){
				    return 0;
				}
				public String SOXIGENO_UMEDIDADefault(){
				
					return null;
				
				}
				public String SOXIGENO_UMEDIDAComment(){
				
				    return "";
				
				}
				public String SOXIGENO_UMEDIDAPattern(){
				
					return "";
				
				}
				public String SOXIGENO_UMEDIDAOriginalDbColumnName(){
				
					return "SOXIGENO_UMEDIDA";
				
				}

				
			    public String NCREATININA_VALOR;

				public String getNCREATININA_VALOR () {
					return this.NCREATININA_VALOR;
				}

				public Boolean NCREATININA_VALORIsNullable(){
				    return true;
				}
				public Boolean NCREATININA_VALORIsKey(){
				    return false;
				}
				public Integer NCREATININA_VALORLength(){
				    return 40;
				}
				public Integer NCREATININA_VALORPrecision(){
				    return 0;
				}
				public String NCREATININA_VALORDefault(){
				
					return null;
				
				}
				public String NCREATININA_VALORComment(){
				
				    return "";
				
				}
				public String NCREATININA_VALORPattern(){
				
					return "";
				
				}
				public String NCREATININA_VALOROriginalDbColumnName(){
				
					return "NCREATININA_VALOR";
				
				}

				
			    public String NCREATININA_UMEDIDA;

				public String getNCREATININA_UMEDIDA () {
					return this.NCREATININA_UMEDIDA;
				}

				public Boolean NCREATININA_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean NCREATININA_UMEDIDAIsKey(){
				    return false;
				}
				public Integer NCREATININA_UMEDIDALength(){
				    return 20;
				}
				public Integer NCREATININA_UMEDIDAPrecision(){
				    return 0;
				}
				public String NCREATININA_UMEDIDADefault(){
				
					return null;
				
				}
				public String NCREATININA_UMEDIDAComment(){
				
				    return "";
				
				}
				public String NCREATININA_UMEDIDAPattern(){
				
					return "";
				
				}
				public String NCREATININA_UMEDIDAOriginalDbColumnName(){
				
					return "NCREATININA_UMEDIDA";
				
				}

				
			    public String FGLOMERULAR_VALOR;

				public String getFGLOMERULAR_VALOR () {
					return this.FGLOMERULAR_VALOR;
				}

				public Boolean FGLOMERULAR_VALORIsNullable(){
				    return true;
				}
				public Boolean FGLOMERULAR_VALORIsKey(){
				    return false;
				}
				public Integer FGLOMERULAR_VALORLength(){
				    return 40;
				}
				public Integer FGLOMERULAR_VALORPrecision(){
				    return 0;
				}
				public String FGLOMERULAR_VALORDefault(){
				
					return null;
				
				}
				public String FGLOMERULAR_VALORComment(){
				
				    return "";
				
				}
				public String FGLOMERULAR_VALORPattern(){
				
					return "";
				
				}
				public String FGLOMERULAR_VALOROriginalDbColumnName(){
				
					return "FGLOMERULAR_VALOR";
				
				}

				
			    public String FGLOMERULAR_UMEDIDA;

				public String getFGLOMERULAR_UMEDIDA () {
					return this.FGLOMERULAR_UMEDIDA;
				}

				public Boolean FGLOMERULAR_UMEDIDAIsNullable(){
				    return true;
				}
				public Boolean FGLOMERULAR_UMEDIDAIsKey(){
				    return false;
				}
				public Integer FGLOMERULAR_UMEDIDALength(){
				    return 20;
				}
				public Integer FGLOMERULAR_UMEDIDAPrecision(){
				    return 0;
				}
				public String FGLOMERULAR_UMEDIDADefault(){
				
					return null;
				
				}
				public String FGLOMERULAR_UMEDIDAComment(){
				
				    return "";
				
				}
				public String FGLOMERULAR_UMEDIDAPattern(){
				
					return "";
				
				}
				public String FGLOMERULAR_UMEDIDAOriginalDbColumnName(){
				
					return "FGLOMERULAR_UMEDIDA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PROCESOSASISTENCIALES_ID == null) ? 0 : this.PROCESOSASISTENCIALES_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.PROCESOSASISTENCIALES_ID == null) {
							if (other.PROCESOSASISTENCIALES_ID != null)
								return false;
						
						} else if (!this.PROCESOSASISTENCIALES_ID.equals(other.PROCESOSASISTENCIALES_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.PROCESOSASISTENCIALES_ID = this.PROCESOSASISTENCIALES_ID;
	            other.FCARDIACA_VALOR = this.FCARDIACA_VALOR;
	            other.FCARDIACA_UMEDIDA = this.FCARDIACA_UMEDIDA;
	            other.PARTERIALSIS_VALOR = this.PARTERIALSIS_VALOR;
	            other.PARTERIALSIS_UMEDIDA = this.PARTERIALSIS_UMEDIDA;
	            other.PARTERIALDIA_VALOR = this.PARTERIALDIA_VALOR;
	            other.PARTERIALDIA_UMEDIDA = this.PARTERIALDIA_UMEDIDA;
	            other.PARTERIALMED_VALOR = this.PARTERIALMED_VALOR;
	            other.PARTERIALMED_UMEDIDA = this.PARTERIALMED_UMEDIDA;
	            other.FRESPIRATORIA_VALOR = this.FRESPIRATORIA_VALOR;
	            other.FRESPIRATORIA_UMEDIDA = this.FRESPIRATORIA_UMEDIDA;
	            other.PULSO_VALOR = this.PULSO_VALOR;
	            other.PULSO_UMEDIDA = this.PULSO_UMEDIDA;
	            other.TEMPERATURA_VALOR = this.TEMPERATURA_VALOR;
	            other.TEMPERATURA_UMEDIDA = this.TEMPERATURA_UMEDIDA;
	            other.PESO_VALOR = this.PESO_VALOR;
	            other.PESO_UMEDIDA = this.PESO_UMEDIDA;
	            other.ESTATURA_VALOR = this.ESTATURA_VALOR;
	            other.ESTATURA_UMEDIDA = this.ESTATURA_UMEDIDA;
	            other.IMC_VALOR = this.IMC_VALOR;
	            other.IMC_UMEDIDA = this.IMC_UMEDIDA;
	            other.SOXIGENO_VALOR = this.SOXIGENO_VALOR;
	            other.SOXIGENO_UMEDIDA = this.SOXIGENO_UMEDIDA;
	            other.NCREATININA_VALOR = this.NCREATININA_VALOR;
	            other.NCREATININA_UMEDIDA = this.NCREATININA_UMEDIDA;
	            other.FGLOMERULAR_VALOR = this.FGLOMERULAR_VALOR;
	            other.FGLOMERULAR_UMEDIDA = this.FGLOMERULAR_UMEDIDA;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.PROCESOSASISTENCIALES_ID = this.PROCESOSASISTENCIALES_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_RIPS_DIARIO_Rips) {

        	try {

        		int length = 0;
		
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.FCARDIACA_VALOR = readString(dis,ois);
					
						this.FCARDIACA_UMEDIDA = readString(dis,ois);
					
						this.PARTERIALSIS_VALOR = readString(dis,ois);
					
						this.PARTERIALSIS_UMEDIDA = readString(dis,ois);
					
						this.PARTERIALDIA_VALOR = readString(dis,ois);
					
						this.PARTERIALDIA_UMEDIDA = readString(dis,ois);
					
						this.PARTERIALMED_VALOR = readString(dis,ois);
					
						this.PARTERIALMED_UMEDIDA = readString(dis,ois);
					
						this.FRESPIRATORIA_VALOR = readString(dis,ois);
					
						this.FRESPIRATORIA_UMEDIDA = readString(dis,ois);
					
						this.PULSO_VALOR = readString(dis,ois);
					
						this.PULSO_UMEDIDA = readString(dis,ois);
					
						this.TEMPERATURA_VALOR = readString(dis,ois);
					
						this.TEMPERATURA_UMEDIDA = readString(dis,ois);
					
						this.PESO_VALOR = readString(dis,ois);
					
						this.PESO_UMEDIDA = readString(dis,ois);
					
						this.ESTATURA_VALOR = readString(dis,ois);
					
						this.ESTATURA_UMEDIDA = readString(dis,ois);
					
						this.IMC_VALOR = readString(dis,ois);
					
						this.IMC_UMEDIDA = readString(dis,ois);
					
						this.SOXIGENO_VALOR = readString(dis,ois);
					
						this.SOXIGENO_UMEDIDA = readString(dis,ois);
					
						this.NCREATININA_VALOR = readString(dis,ois);
					
						this.NCREATININA_UMEDIDA = readString(dis,ois);
					
						this.FGLOMERULAR_VALOR = readString(dis,ois);
					
						this.FGLOMERULAR_UMEDIDA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.FCARDIACA_VALOR = readString(dis,objectIn);
					
						this.FCARDIACA_UMEDIDA = readString(dis,objectIn);
					
						this.PARTERIALSIS_VALOR = readString(dis,objectIn);
					
						this.PARTERIALSIS_UMEDIDA = readString(dis,objectIn);
					
						this.PARTERIALDIA_VALOR = readString(dis,objectIn);
					
						this.PARTERIALDIA_UMEDIDA = readString(dis,objectIn);
					
						this.PARTERIALMED_VALOR = readString(dis,objectIn);
					
						this.PARTERIALMED_UMEDIDA = readString(dis,objectIn);
					
						this.FRESPIRATORIA_VALOR = readString(dis,objectIn);
					
						this.FRESPIRATORIA_UMEDIDA = readString(dis,objectIn);
					
						this.PULSO_VALOR = readString(dis,objectIn);
					
						this.PULSO_UMEDIDA = readString(dis,objectIn);
					
						this.TEMPERATURA_VALOR = readString(dis,objectIn);
					
						this.TEMPERATURA_UMEDIDA = readString(dis,objectIn);
					
						this.PESO_VALOR = readString(dis,objectIn);
					
						this.PESO_UMEDIDA = readString(dis,objectIn);
					
						this.ESTATURA_VALOR = readString(dis,objectIn);
					
						this.ESTATURA_UMEDIDA = readString(dis,objectIn);
					
						this.IMC_VALOR = readString(dis,objectIn);
					
						this.IMC_UMEDIDA = readString(dis,objectIn);
					
						this.SOXIGENO_VALOR = readString(dis,objectIn);
					
						this.SOXIGENO_UMEDIDA = readString(dis,objectIn);
					
						this.NCREATININA_VALOR = readString(dis,objectIn);
					
						this.NCREATININA_UMEDIDA = readString(dis,objectIn);
					
						this.FGLOMERULAR_VALOR = readString(dis,objectIn);
					
						this.FGLOMERULAR_UMEDIDA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.FCARDIACA_VALOR, dos, oos);
					
						writeString(this.FCARDIACA_UMEDIDA, dos, oos);
					
						writeString(this.PARTERIALSIS_VALOR, dos, oos);
					
						writeString(this.PARTERIALSIS_UMEDIDA, dos, oos);
					
						writeString(this.PARTERIALDIA_VALOR, dos, oos);
					
						writeString(this.PARTERIALDIA_UMEDIDA, dos, oos);
					
						writeString(this.PARTERIALMED_VALOR, dos, oos);
					
						writeString(this.PARTERIALMED_UMEDIDA, dos, oos);
					
						writeString(this.FRESPIRATORIA_VALOR, dos, oos);
					
						writeString(this.FRESPIRATORIA_UMEDIDA, dos, oos);
					
						writeString(this.PULSO_VALOR, dos, oos);
					
						writeString(this.PULSO_UMEDIDA, dos, oos);
					
						writeString(this.TEMPERATURA_VALOR, dos, oos);
					
						writeString(this.TEMPERATURA_UMEDIDA, dos, oos);
					
						writeString(this.PESO_VALOR, dos, oos);
					
						writeString(this.PESO_UMEDIDA, dos, oos);
					
						writeString(this.ESTATURA_VALOR, dos, oos);
					
						writeString(this.ESTATURA_UMEDIDA, dos, oos);
					
						writeString(this.IMC_VALOR, dos, oos);
					
						writeString(this.IMC_UMEDIDA, dos, oos);
					
						writeString(this.SOXIGENO_VALOR, dos, oos);
					
						writeString(this.SOXIGENO_UMEDIDA, dos, oos);
					
						writeString(this.NCREATININA_VALOR, dos, oos);
					
						writeString(this.NCREATININA_UMEDIDA, dos, oos);
					
						writeString(this.FGLOMERULAR_VALOR, dos, oos);
					
						writeString(this.FGLOMERULAR_UMEDIDA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.FCARDIACA_VALOR, dos, objectOut);
					
						writeString(this.FCARDIACA_UMEDIDA, dos, objectOut);
					
						writeString(this.PARTERIALSIS_VALOR, dos, objectOut);
					
						writeString(this.PARTERIALSIS_UMEDIDA, dos, objectOut);
					
						writeString(this.PARTERIALDIA_VALOR, dos, objectOut);
					
						writeString(this.PARTERIALDIA_UMEDIDA, dos, objectOut);
					
						writeString(this.PARTERIALMED_VALOR, dos, objectOut);
					
						writeString(this.PARTERIALMED_UMEDIDA, dos, objectOut);
					
						writeString(this.FRESPIRATORIA_VALOR, dos, objectOut);
					
						writeString(this.FRESPIRATORIA_UMEDIDA, dos, objectOut);
					
						writeString(this.PULSO_VALOR, dos, objectOut);
					
						writeString(this.PULSO_UMEDIDA, dos, objectOut);
					
						writeString(this.TEMPERATURA_VALOR, dos, objectOut);
					
						writeString(this.TEMPERATURA_UMEDIDA, dos, objectOut);
					
						writeString(this.PESO_VALOR, dos, objectOut);
					
						writeString(this.PESO_UMEDIDA, dos, objectOut);
					
						writeString(this.ESTATURA_VALOR, dos, objectOut);
					
						writeString(this.ESTATURA_UMEDIDA, dos, objectOut);
					
						writeString(this.IMC_VALOR, dos, objectOut);
					
						writeString(this.IMC_UMEDIDA, dos, objectOut);
					
						writeString(this.SOXIGENO_VALOR, dos, objectOut);
					
						writeString(this.SOXIGENO_UMEDIDA, dos, objectOut);
					
						writeString(this.NCREATININA_VALOR, dos, objectOut);
					
						writeString(this.NCREATININA_UMEDIDA, dos, objectOut);
					
						writeString(this.FGLOMERULAR_VALOR, dos, objectOut);
					
						writeString(this.FGLOMERULAR_UMEDIDA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",FCARDIACA_VALOR="+FCARDIACA_VALOR);
		sb.append(",FCARDIACA_UMEDIDA="+FCARDIACA_UMEDIDA);
		sb.append(",PARTERIALSIS_VALOR="+PARTERIALSIS_VALOR);
		sb.append(",PARTERIALSIS_UMEDIDA="+PARTERIALSIS_UMEDIDA);
		sb.append(",PARTERIALDIA_VALOR="+PARTERIALDIA_VALOR);
		sb.append(",PARTERIALDIA_UMEDIDA="+PARTERIALDIA_UMEDIDA);
		sb.append(",PARTERIALMED_VALOR="+PARTERIALMED_VALOR);
		sb.append(",PARTERIALMED_UMEDIDA="+PARTERIALMED_UMEDIDA);
		sb.append(",FRESPIRATORIA_VALOR="+FRESPIRATORIA_VALOR);
		sb.append(",FRESPIRATORIA_UMEDIDA="+FRESPIRATORIA_UMEDIDA);
		sb.append(",PULSO_VALOR="+PULSO_VALOR);
		sb.append(",PULSO_UMEDIDA="+PULSO_UMEDIDA);
		sb.append(",TEMPERATURA_VALOR="+TEMPERATURA_VALOR);
		sb.append(",TEMPERATURA_UMEDIDA="+TEMPERATURA_UMEDIDA);
		sb.append(",PESO_VALOR="+PESO_VALOR);
		sb.append(",PESO_UMEDIDA="+PESO_UMEDIDA);
		sb.append(",ESTATURA_VALOR="+ESTATURA_VALOR);
		sb.append(",ESTATURA_UMEDIDA="+ESTATURA_UMEDIDA);
		sb.append(",IMC_VALOR="+IMC_VALOR);
		sb.append(",IMC_UMEDIDA="+IMC_UMEDIDA);
		sb.append(",SOXIGENO_VALOR="+SOXIGENO_VALOR);
		sb.append(",SOXIGENO_UMEDIDA="+SOXIGENO_UMEDIDA);
		sb.append(",NCREATININA_VALOR="+NCREATININA_VALOR);
		sb.append(",NCREATININA_UMEDIDA="+NCREATININA_UMEDIDA);
		sb.append(",FGLOMERULAR_VALOR="+FGLOMERULAR_VALOR);
		sb.append(",FGLOMERULAR_UMEDIDA="+FGLOMERULAR_UMEDIDA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PROCESOSASISTENCIALES_ID, other.PROCESOSASISTENCIALES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tHashInput_6 - inputs:(after_tOracleInput_4) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_15 - inputs:(row6,row8) outputs:(insert_u)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_Rips_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row2Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row2Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row8.PROCESOSASISTENCIALES_ID = next_tHashInput_6.PROCESOSASISTENCIALES_ID;
	row8.FCARDIACA_VALOR = next_tHashInput_6.FCARDIACA_VALOR;
	row8.FCARDIACA_UMEDIDA = next_tHashInput_6.FCARDIACA_UMEDIDA;
	row8.PARTERIALSIS_VALOR = next_tHashInput_6.PARTERIALSIS_VALOR;
	row8.PARTERIALSIS_UMEDIDA = next_tHashInput_6.PARTERIALSIS_UMEDIDA;
	row8.PARTERIALDIA_VALOR = next_tHashInput_6.PARTERIALDIA_VALOR;
	row8.PARTERIALDIA_UMEDIDA = next_tHashInput_6.PARTERIALDIA_UMEDIDA;
	row8.PARTERIALMED_VALOR = next_tHashInput_6.PARTERIALMED_VALOR;
	row8.PARTERIALMED_UMEDIDA = next_tHashInput_6.PARTERIALMED_UMEDIDA;
	row8.FRESPIRATORIA_VALOR = next_tHashInput_6.FRESPIRATORIA_VALOR;
	row8.FRESPIRATORIA_UMEDIDA = next_tHashInput_6.FRESPIRATORIA_UMEDIDA;
	row8.PULSO_VALOR = next_tHashInput_6.PULSO_VALOR;
	row8.PULSO_UMEDIDA = next_tHashInput_6.PULSO_UMEDIDA;
	row8.TEMPERATURA_VALOR = next_tHashInput_6.TEMPERATURA_VALOR;
	row8.TEMPERATURA_UMEDIDA = next_tHashInput_6.TEMPERATURA_UMEDIDA;
	row8.PESO_VALOR = next_tHashInput_6.PESO_VALOR;
	row8.PESO_UMEDIDA = next_tHashInput_6.PESO_UMEDIDA;
	row8.ESTATURA_VALOR = next_tHashInput_6.ESTATURA_VALOR;
	row8.ESTATURA_UMEDIDA = next_tHashInput_6.ESTATURA_UMEDIDA;
	row8.IMC_VALOR = next_tHashInput_6.IMC_VALOR;
	row8.IMC_UMEDIDA = next_tHashInput_6.IMC_UMEDIDA;
	row8.SOXIGENO_VALOR = next_tHashInput_6.SOXIGENO_VALOR;
	row8.SOXIGENO_UMEDIDA = next_tHashInput_6.SOXIGENO_UMEDIDA;
	row8.NCREATININA_VALOR = next_tHashInput_6.NCREATININA_VALOR;
	row8.NCREATININA_UMEDIDA = next_tHashInput_6.NCREATININA_UMEDIDA;
	row8.FGLOMERULAR_VALOR = next_tHashInput_6.FGLOMERULAR_VALOR;
	row8.FGLOMERULAR_UMEDIDA = next_tHashInput_6.FGLOMERULAR_UMEDIDA;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.PROCESOSASISTENCIALES_ID = row8.PROCESOSASISTENCIALES_ID;
				
				row8_HashRow.FCARDIACA_VALOR = row8.FCARDIACA_VALOR;
				
				row8_HashRow.FCARDIACA_UMEDIDA = row8.FCARDIACA_UMEDIDA;
				
				row8_HashRow.PARTERIALSIS_VALOR = row8.PARTERIALSIS_VALOR;
				
				row8_HashRow.PARTERIALSIS_UMEDIDA = row8.PARTERIALSIS_UMEDIDA;
				
				row8_HashRow.PARTERIALDIA_VALOR = row8.PARTERIALDIA_VALOR;
				
				row8_HashRow.PARTERIALDIA_UMEDIDA = row8.PARTERIALDIA_UMEDIDA;
				
				row8_HashRow.PARTERIALMED_VALOR = row8.PARTERIALMED_VALOR;
				
				row8_HashRow.PARTERIALMED_UMEDIDA = row8.PARTERIALMED_UMEDIDA;
				
				row8_HashRow.FRESPIRATORIA_VALOR = row8.FRESPIRATORIA_VALOR;
				
				row8_HashRow.FRESPIRATORIA_UMEDIDA = row8.FRESPIRATORIA_UMEDIDA;
				
				row8_HashRow.PULSO_VALOR = row8.PULSO_VALOR;
				
				row8_HashRow.PULSO_UMEDIDA = row8.PULSO_UMEDIDA;
				
				row8_HashRow.TEMPERATURA_VALOR = row8.TEMPERATURA_VALOR;
				
				row8_HashRow.TEMPERATURA_UMEDIDA = row8.TEMPERATURA_UMEDIDA;
				
				row8_HashRow.PESO_VALOR = row8.PESO_VALOR;
				
				row8_HashRow.PESO_UMEDIDA = row8.PESO_UMEDIDA;
				
				row8_HashRow.ESTATURA_VALOR = row8.ESTATURA_VALOR;
				
				row8_HashRow.ESTATURA_UMEDIDA = row8.ESTATURA_UMEDIDA;
				
				row8_HashRow.IMC_VALOR = row8.IMC_VALOR;
				
				row8_HashRow.IMC_UMEDIDA = row8.IMC_UMEDIDA;
				
				row8_HashRow.SOXIGENO_VALOR = row8.SOXIGENO_VALOR;
				
				row8_HashRow.SOXIGENO_UMEDIDA = row8.SOXIGENO_UMEDIDA;
				
				row8_HashRow.NCREATININA_VALOR = row8.NCREATININA_VALOR;
				
				row8_HashRow.NCREATININA_UMEDIDA = row8.NCREATININA_UMEDIDA;
				
				row8_HashRow.FGLOMERULAR_VALOR = row8.FGLOMERULAR_VALOR;
				
				row8_HashRow.FGLOMERULAR_UMEDIDA = row8.FGLOMERULAR_UMEDIDA;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Rips_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

tHash_Lookup_row8.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final Rips RipsClass = new Rips();

        int exitCode = RipsClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Rips.class.getClassLoader().getResourceAsStream("rep_rips_diario/rips_6_7/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Rips.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("CONDICION_ACTIVIDADES_CONSULTAS", "id_String");
                        if(context.getStringValue("CONDICION_ACTIVIDADES_CONSULTAS") == null) {
                            context.CONDICION_ACTIVIDADES_CONSULTAS = null;
                        } else {
                            context.CONDICION_ACTIVIDADES_CONSULTAS=(String) context.getProperty("CONDICION_ACTIVIDADES_CONSULTAS");
                        }
                        context.setContextType("CONDICION_CONSULTAS", "id_String");
                        if(context.getStringValue("CONDICION_CONSULTAS") == null) {
                            context.CONDICION_CONSULTAS = null;
                        } else {
                            context.CONDICION_CONSULTAS=(String) context.getProperty("CONDICION_CONSULTAS");
                        }
                        context.setContextType("CONDICION_FINDRISK_CONSULTAS", "id_String");
                        if(context.getStringValue("CONDICION_FINDRISK_CONSULTAS") == null) {
                            context.CONDICION_FINDRISK_CONSULTAS = null;
                        } else {
                            context.CONDICION_FINDRISK_CONSULTAS=(String) context.getProperty("CONDICION_FINDRISK_CONSULTAS");
                        }
                        context.setContextType("CONDICION_HOSPITALIZACION", "id_String");
                        if(context.getStringValue("CONDICION_HOSPITALIZACION") == null) {
                            context.CONDICION_HOSPITALIZACION = null;
                        } else {
                            context.CONDICION_HOSPITALIZACION=(String) context.getProperty("CONDICION_HOSPITALIZACION");
                        }
                        context.setContextType("CONDICION_MEDICAMENTOS", "id_String");
                        if(context.getStringValue("CONDICION_MEDICAMENTOS") == null) {
                            context.CONDICION_MEDICAMENTOS = null;
                        } else {
                            context.CONDICION_MEDICAMENTOS=(String) context.getProperty("CONDICION_MEDICAMENTOS");
                        }
                        context.setContextType("CONDICION_OTROS_SERVICIOS", "id_String");
                        if(context.getStringValue("CONDICION_OTROS_SERVICIOS") == null) {
                            context.CONDICION_OTROS_SERVICIOS = null;
                        } else {
                            context.CONDICION_OTROS_SERVICIOS=(String) context.getProperty("CONDICION_OTROS_SERVICIOS");
                        }
                        context.setContextType("CONDICION_OTROS_SERVICIOS2", "id_String");
                        if(context.getStringValue("CONDICION_OTROS_SERVICIOS2") == null) {
                            context.CONDICION_OTROS_SERVICIOS2 = null;
                        } else {
                            context.CONDICION_OTROS_SERVICIOS2=(String) context.getProperty("CONDICION_OTROS_SERVICIOS2");
                        }
                        context.setContextType("CONDICION_PROCEDIMIENTOS_CGP", "id_String");
                        if(context.getStringValue("CONDICION_PROCEDIMIENTOS_CGP") == null) {
                            context.CONDICION_PROCEDIMIENTOS_CGP = null;
                        } else {
                            context.CONDICION_PROCEDIMIENTOS_CGP=(String) context.getProperty("CONDICION_PROCEDIMIENTOS_CGP");
                        }
                        context.setContextType("CONDICION_PROCEDIMIENTOS_CGP2", "id_String");
                        if(context.getStringValue("CONDICION_PROCEDIMIENTOS_CGP2") == null) {
                            context.CONDICION_PROCEDIMIENTOS_CGP2 = null;
                        } else {
                            context.CONDICION_PROCEDIMIENTOS_CGP2=(String) context.getProperty("CONDICION_PROCEDIMIENTOS_CGP2");
                        }
                        context.setContextType("CONDICION_PROCEDIMIENTOS_ODO", "id_String");
                        if(context.getStringValue("CONDICION_PROCEDIMIENTOS_ODO") == null) {
                            context.CONDICION_PROCEDIMIENTOS_ODO = null;
                        } else {
                            context.CONDICION_PROCEDIMIENTOS_ODO=(String) context.getProperty("CONDICION_PROCEDIMIENTOS_ODO");
                        }
                        context.setContextType("CONDICION_PROCEDIMIENTOS_PQX", "id_String");
                        if(context.getStringValue("CONDICION_PROCEDIMIENTOS_PQX") == null) {
                            context.CONDICION_PROCEDIMIENTOS_PQX = null;
                        } else {
                            context.CONDICION_PROCEDIMIENTOS_PQX=(String) context.getProperty("CONDICION_PROCEDIMIENTOS_PQX");
                        }
                        context.setContextType("CONDICION_PROCEDIMIENTOS_RCA", "id_String");
                        if(context.getStringValue("CONDICION_PROCEDIMIENTOS_RCA") == null) {
                            context.CONDICION_PROCEDIMIENTOS_RCA = null;
                        } else {
                            context.CONDICION_PROCEDIMIENTOS_RCA=(String) context.getProperty("CONDICION_PROCEDIMIENTOS_RCA");
                        }
                        context.setContextType("CONDICION_SIGNOS_VITALES", "id_String");
                        if(context.getStringValue("CONDICION_SIGNOS_VITALES") == null) {
                            context.CONDICION_SIGNOS_VITALES = null;
                        } else {
                            context.CONDICION_SIGNOS_VITALES=(String) context.getProperty("CONDICION_SIGNOS_VITALES");
                        }
                        context.setContextType("CONDICION_URGENCIAS", "id_String");
                        if(context.getStringValue("CONDICION_URGENCIAS") == null) {
                            context.CONDICION_URGENCIAS = null;
                        } else {
                            context.CONDICION_URGENCIAS=(String) context.getProperty("CONDICION_URGENCIAS");
                        }
                        context.setContextType("CONDICION_USUARIOS", "id_String");
                        if(context.getStringValue("CONDICION_USUARIOS") == null) {
                            context.CONDICION_USUARIOS = null;
                        } else {
                            context.CONDICION_USUARIOS=(String) context.getProperty("CONDICION_USUARIOS");
                        }
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_String");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            context.db_origen_Password=(String) context.getProperty("db_origen_Password");
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("ACTUALIZACION_TOTAL", "id_Boolean");
                        if(context.getStringValue("ACTUALIZACION_TOTAL") == null) {
                            context.ACTUALIZACION_TOTAL = null;
                        } else {
                            try{
                                context.ACTUALIZACION_TOTAL=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("ACTUALIZACION_TOTAL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ACTUALIZACION_TOTAL", e.getMessage()));
                                context.ACTUALIZACION_TOTAL=null;
                            }
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("ERROR", "id_String");
                        if(context.getStringValue("ERROR") == null) {
                            context.ERROR = null;
                        } else {
                            context.ERROR=(String) context.getProperty("ERROR");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FANTERIOR", "id_String");
                        if(context.getStringValue("FANTERIOR") == null) {
                            context.FANTERIOR = null;
                        } else {
                            context.FANTERIOR=(String) context.getProperty("FANTERIOR");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("ID_SOLICITUD", "id_Integer");
                        if(context.getStringValue("ID_SOLICITUD") == null) {
                            context.ID_SOLICITUD = null;
                        } else {
                            try{
                                context.ID_SOLICITUD=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ID_SOLICITUD"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ID_SOLICITUD", e.getMessage()));
                                context.ID_SOLICITUD=null;
                            }
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("mail_Message", "id_String");
                        if(context.getStringValue("mail_Message") == null) {
                            context.mail_Message = null;
                        } else {
                            context.mail_Message=(String) context.getProperty("mail_Message");
                        }
                        context.setContextType("mail_Password", "id_Password");
                        if(context.getStringValue("mail_Password") == null) {
                            context.mail_Password = null;
                        } else {
                            String pwd_mail_Password_value = context.getProperty("mail_Password");
                            context.mail_Password = null;
                            if(pwd_mail_Password_value!=null) {
                                if(context_param.containsKey("mail_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.mail_Password = pwd_mail_Password_value;
                                } else if (!pwd_mail_Password_value.isEmpty()) {
                                    try {
                                        context.mail_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_mail_Password_value);
                                        context.put("mail_Password",context.mail_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("mail_Sendername", "id_String");
                        if(context.getStringValue("mail_Sendername") == null) {
                            context.mail_Sendername = null;
                        } else {
                            context.mail_Sendername=(String) context.getProperty("mail_Sendername");
                        }
                        context.setContextType("mail_SMTP_Host", "id_String");
                        if(context.getStringValue("mail_SMTP_Host") == null) {
                            context.mail_SMTP_Host = null;
                        } else {
                            context.mail_SMTP_Host=(String) context.getProperty("mail_SMTP_Host");
                        }
                        context.setContextType("mail_SMTP_Port", "id_String");
                        if(context.getStringValue("mail_SMTP_Port") == null) {
                            context.mail_SMTP_Port = null;
                        } else {
                            context.mail_SMTP_Port=(String) context.getProperty("mail_SMTP_Port");
                        }
                        context.setContextType("mail_Subject", "id_String");
                        if(context.getStringValue("mail_Subject") == null) {
                            context.mail_Subject = null;
                        } else {
                            context.mail_Subject=(String) context.getProperty("mail_Subject");
                        }
                        context.setContextType("mail_To", "id_String");
                        if(context.getStringValue("mail_To") == null) {
                            context.mail_To = null;
                        } else {
                            context.mail_To=(String) context.getProperty("mail_To");
                        }
                        context.setContextType("mail_User", "id_String");
                        if(context.getStringValue("mail_User") == null) {
                            context.mail_User = null;
                        } else {
                            context.mail_User=(String) context.getProperty("mail_User");
                        }
                        context.setContextType("ARCONTROL_ID", "id_BigDecimal");
                        if(context.getStringValue("ARCONTROL_ID") == null) {
                            context.ARCONTROL_ID = null;
                        } else {
                            try{
                                context.ARCONTROL_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ARCONTROL_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ARCONTROL_ID", e.getMessage()));
                                context.ARCONTROL_ID=null;
                            }
                        }
                        context.setContextType("CODARCHIVO", "id_String");
                        if(context.getStringValue("CODARCHIVO") == null) {
                            context.CODARCHIVO = null;
                        } else {
                            context.CODARCHIVO=(String) context.getProperty("CODARCHIVO");
                        }
                        context.setContextType("COUNT_OS", "id_Integer");
                        if(context.getStringValue("COUNT_OS") == null) {
                            context.COUNT_OS = null;
                        } else {
                            try{
                                context.COUNT_OS=routines.system.ParserUtils.parseTo_Integer (context.getProperty("COUNT_OS"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COUNT_OS", e.getMessage()));
                                context.COUNT_OS=null;
                            }
                        }
                        context.setContextType("DIFERENCIA_MES", "id_Integer");
                        if(context.getStringValue("DIFERENCIA_MES") == null) {
                            context.DIFERENCIA_MES = null;
                        } else {
                            try{
                                context.DIFERENCIA_MES=routines.system.ParserUtils.parseTo_Integer (context.getProperty("DIFERENCIA_MES"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "DIFERENCIA_MES", e.getMessage()));
                                context.DIFERENCIA_MES=null;
                            }
                        }
                        context.setContextType("FECHA_INICIAL", "id_String");
                        if(context.getStringValue("FECHA_INICIAL") == null) {
                            context.FECHA_INICIAL = null;
                        } else {
                            context.FECHA_INICIAL=(String) context.getProperty("FECHA_INICIAL");
                        }
                        context.setContextType("FREMISION", "id_Date");
                        if(context.getStringValue("FREMISION") == null) {
                            context.FREMISION = null;
                        } else {
                            String context_FREMISION_value = context.getProperty("FREMISION");
                            try{
                                if (context_FREMISION_value == null){
                                    context_FREMISION_value = "";
                                }
                                int context_FREMISION_pos = context_FREMISION_value.indexOf(";");
                                String context_FREMISION_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_FREMISION_pos > -1){
                                    context_FREMISION_pattern = context_FREMISION_value.substring(0, context_FREMISION_pos);
                                    context_FREMISION_value = context_FREMISION_value.substring(context_FREMISION_pos + 1);
                                }

                                context.FREMISION=(java.util.Date)(new java.text.SimpleDateFormat(context_FREMISION_pattern).parse(context_FREMISION_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_FREMISION_longValue = Long.valueOf(context_FREMISION_value);
                                    context.FREMISION = new java.util.Date(context_FREMISION_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "FREMISION", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.FREMISION=null;
                                }
                            }
                        }
                        context.setContextType("LAST_DAY", "id_Integer");
                        if(context.getStringValue("LAST_DAY") == null) {
                            context.LAST_DAY = null;
                        } else {
                            try{
                                context.LAST_DAY=routines.system.ParserUtils.parseTo_Integer (context.getProperty("LAST_DAY"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "LAST_DAY", e.getMessage()));
                                context.LAST_DAY=null;
                            }
                        }
                        context.setContextType("PERIODO", "id_String");
                        if(context.getStringValue("PERIODO") == null) {
                            context.PERIODO = null;
                        } else {
                            context.PERIODO=(String) context.getProperty("PERIODO");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("CONDICION_ACTIVIDADES_CONSULTAS")) {
                context.CONDICION_ACTIVIDADES_CONSULTAS = (String) parentContextMap.get("CONDICION_ACTIVIDADES_CONSULTAS");
            }if (parentContextMap.containsKey("CONDICION_CONSULTAS")) {
                context.CONDICION_CONSULTAS = (String) parentContextMap.get("CONDICION_CONSULTAS");
            }if (parentContextMap.containsKey("CONDICION_FINDRISK_CONSULTAS")) {
                context.CONDICION_FINDRISK_CONSULTAS = (String) parentContextMap.get("CONDICION_FINDRISK_CONSULTAS");
            }if (parentContextMap.containsKey("CONDICION_HOSPITALIZACION")) {
                context.CONDICION_HOSPITALIZACION = (String) parentContextMap.get("CONDICION_HOSPITALIZACION");
            }if (parentContextMap.containsKey("CONDICION_MEDICAMENTOS")) {
                context.CONDICION_MEDICAMENTOS = (String) parentContextMap.get("CONDICION_MEDICAMENTOS");
            }if (parentContextMap.containsKey("CONDICION_OTROS_SERVICIOS")) {
                context.CONDICION_OTROS_SERVICIOS = (String) parentContextMap.get("CONDICION_OTROS_SERVICIOS");
            }if (parentContextMap.containsKey("CONDICION_OTROS_SERVICIOS2")) {
                context.CONDICION_OTROS_SERVICIOS2 = (String) parentContextMap.get("CONDICION_OTROS_SERVICIOS2");
            }if (parentContextMap.containsKey("CONDICION_PROCEDIMIENTOS_CGP")) {
                context.CONDICION_PROCEDIMIENTOS_CGP = (String) parentContextMap.get("CONDICION_PROCEDIMIENTOS_CGP");
            }if (parentContextMap.containsKey("CONDICION_PROCEDIMIENTOS_CGP2")) {
                context.CONDICION_PROCEDIMIENTOS_CGP2 = (String) parentContextMap.get("CONDICION_PROCEDIMIENTOS_CGP2");
            }if (parentContextMap.containsKey("CONDICION_PROCEDIMIENTOS_ODO")) {
                context.CONDICION_PROCEDIMIENTOS_ODO = (String) parentContextMap.get("CONDICION_PROCEDIMIENTOS_ODO");
            }if (parentContextMap.containsKey("CONDICION_PROCEDIMIENTOS_PQX")) {
                context.CONDICION_PROCEDIMIENTOS_PQX = (String) parentContextMap.get("CONDICION_PROCEDIMIENTOS_PQX");
            }if (parentContextMap.containsKey("CONDICION_PROCEDIMIENTOS_RCA")) {
                context.CONDICION_PROCEDIMIENTOS_RCA = (String) parentContextMap.get("CONDICION_PROCEDIMIENTOS_RCA");
            }if (parentContextMap.containsKey("CONDICION_SIGNOS_VITALES")) {
                context.CONDICION_SIGNOS_VITALES = (String) parentContextMap.get("CONDICION_SIGNOS_VITALES");
            }if (parentContextMap.containsKey("CONDICION_URGENCIAS")) {
                context.CONDICION_URGENCIAS = (String) parentContextMap.get("CONDICION_URGENCIAS");
            }if (parentContextMap.containsKey("CONDICION_USUARIOS")) {
                context.CONDICION_USUARIOS = (String) parentContextMap.get("CONDICION_USUARIOS");
            }if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("ACTUALIZACION_TOTAL")) {
                context.ACTUALIZACION_TOTAL = (Boolean) parentContextMap.get("ACTUALIZACION_TOTAL");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("ERROR")) {
                context.ERROR = (String) parentContextMap.get("ERROR");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FANTERIOR")) {
                context.FANTERIOR = (String) parentContextMap.get("FANTERIOR");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("ID_SOLICITUD")) {
                context.ID_SOLICITUD = (Integer) parentContextMap.get("ID_SOLICITUD");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("mail_Message")) {
                context.mail_Message = (String) parentContextMap.get("mail_Message");
            }if (parentContextMap.containsKey("mail_Password")) {
                context.mail_Password = (java.lang.String) parentContextMap.get("mail_Password");
            }if (parentContextMap.containsKey("mail_Sendername")) {
                context.mail_Sendername = (String) parentContextMap.get("mail_Sendername");
            }if (parentContextMap.containsKey("mail_SMTP_Host")) {
                context.mail_SMTP_Host = (String) parentContextMap.get("mail_SMTP_Host");
            }if (parentContextMap.containsKey("mail_SMTP_Port")) {
                context.mail_SMTP_Port = (String) parentContextMap.get("mail_SMTP_Port");
            }if (parentContextMap.containsKey("mail_Subject")) {
                context.mail_Subject = (String) parentContextMap.get("mail_Subject");
            }if (parentContextMap.containsKey("mail_To")) {
                context.mail_To = (String) parentContextMap.get("mail_To");
            }if (parentContextMap.containsKey("mail_User")) {
                context.mail_User = (String) parentContextMap.get("mail_User");
            }if (parentContextMap.containsKey("ARCONTROL_ID")) {
                context.ARCONTROL_ID = (BigDecimal) parentContextMap.get("ARCONTROL_ID");
            }if (parentContextMap.containsKey("CODARCHIVO")) {
                context.CODARCHIVO = (String) parentContextMap.get("CODARCHIVO");
            }if (parentContextMap.containsKey("COUNT_OS")) {
                context.COUNT_OS = (Integer) parentContextMap.get("COUNT_OS");
            }if (parentContextMap.containsKey("DIFERENCIA_MES")) {
                context.DIFERENCIA_MES = (Integer) parentContextMap.get("DIFERENCIA_MES");
            }if (parentContextMap.containsKey("FECHA_INICIAL")) {
                context.FECHA_INICIAL = (String) parentContextMap.get("FECHA_INICIAL");
            }if (parentContextMap.containsKey("FREMISION")) {
                context.FREMISION = (java.util.Date) parentContextMap.get("FREMISION");
            }if (parentContextMap.containsKey("LAST_DAY")) {
                context.LAST_DAY = (Integer) parentContextMap.get("LAST_DAY");
            }if (parentContextMap.containsKey("PERIODO")) {
                context.PERIODO = (String) parentContextMap.get("PERIODO");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_destino_Password");
			parametersToEncrypt.add("mail_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_8Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_8) {
globalMap.put("tJava_8_SUBPROCESS_STATE", -1);

e_tJava_8.printStackTrace();

}catch (java.lang.Error e_tJava_8) {
globalMap.put("tJava_8_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_8;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_9Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_9) {
globalMap.put("tJava_9_SUBPROCESS_STATE", -1);

e_tJava_9.printStackTrace();

}catch (java.lang.Error e_tJava_9) {
globalMap.put("tJava_9_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_9;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Rips");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_3");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tOracleConnection_4");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_3", globalMap.get("conn_tOracleConnection_3"));
            connections.put("conn_tOracleConnection_4", globalMap.get("conn_tOracleConnection_4"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     2398296 characters generated by Talend Open Studio for ESB 
 *     on the November 4, 2024, 10:12:09 PM COT
 ************************************************************************************************/