// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package cec_costos_por_cups.costosxcups_0_3;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.Utils;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJavaRow_4
	import java.net.URLDecoder;


@SuppressWarnings("unused")

/**
 * Job: CostosXCups Purpose: Calcula el costo por cups para los 4 elementos<br>
 * Description: ETL para calcular los costos por cups en los diferentes elementos <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class CostosXCups implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(ANEXO_ID != null){
				
					this.setProperty("ANEXO_ID", ANEXO_ID.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(FECHA != null){
				
					this.setProperty("FECHA", FECHA.toString());
				
			}
			
			if(FECHA_CARGUE != null){
				
					this.setProperty("FECHA_CARGUE", FECHA_CARGUE.toString());
				
			}
			
			if(MENSAJE != null){
				
					this.setProperty("MENSAJE", MENSAJE.toString());
				
			}
			
			if(PERIODO != null){
				
					this.setProperty("PERIODO", PERIODO.toString());
				
			}
			
			if(TIEMPOS_FECHA != null){
				
					String pattern_TIEMPOS_FECHA = "yyyy-MM-dd HH:mm:ss";
					String value_TIEMPOS_FECHA = "";
					String[] parts_TIEMPOS_FECHA = value_TIEMPOS_FECHA.split(";");
					if(parts_TIEMPOS_FECHA.length > 1){
						pattern_TIEMPOS_FECHA = parts_TIEMPOS_FECHA[0];
						this.setProperty("TIEMPOS_FECHA", pattern_TIEMPOS_FECHA + ";" + FormatterUtils.format_Date(TIEMPOS_FECHA, pattern_TIEMPOS_FECHA));
					}else{
						this.setProperty("TIEMPOS_FECHA", FormatterUtils.format_Date(TIEMPOS_FECHA, pattern_TIEMPOS_FECHA));
					}
				
			}
			
			if(TIEMPOS_ID != null){
				
					this.setProperty("TIEMPOS_ID", TIEMPOS_ID.toString());
				
			}
			
			if(ZERO != null){
				
					this.setProperty("ZERO", ZERO.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(JOB != null){
				
					this.setProperty("JOB", JOB.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public BigDecimal ANEXO_ID;
public BigDecimal getANEXO_ID(){
	return this.ANEXO_ID;
}
public Integer ESTADO;
public Integer getESTADO(){
	return this.ESTADO;
}
public String FECHA;
public String getFECHA(){
	return this.FECHA;
}
public String FECHA_CARGUE;
public String getFECHA_CARGUE(){
	return this.FECHA_CARGUE;
}
public String MENSAJE;
public String getMENSAJE(){
	return this.MENSAJE;
}
public String PERIODO;
public String getPERIODO(){
	return this.PERIODO;
}
public java.util.Date TIEMPOS_FECHA;
public java.util.Date getTIEMPOS_FECHA(){
	return this.TIEMPOS_FECHA;
}
public BigDecimal TIEMPOS_ID;
public BigDecimal getTIEMPOS_ID(){
	return this.TIEMPOS_ID;
}
public BigDecimal ZERO;
public BigDecimal getZERO(){
	return this.ZERO;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public String JOB;
public String getJOB(){
	return this.JOB;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.3";
	private final String jobName = "CostosXCups";
	private final String projectName = "CEC_COSTOS_POR_CUPS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				CostosXCups.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(CostosXCups.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_out2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 7;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"	
	,"PathStorage"		
	,"PathStorage"+"/@xsi:nil"	
	,"SMTPHost"		
	,"SMTPHost"+"/@xsi:nil"	
	,"SMTPPort"		
	,"SMTPPort"+"/@xsi:nil"	
	,"UsernameMail"		
	,"UsernameMail"+"/@xsi:nil"	
	,"PasswordMail"		
	,"PasswordMail"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("UTF-8");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
	if (nb_line_tFileInputXML_1>=50) {
	
			looper_tFileInputXML_1.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Host");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Host =null;
									}else{
		row1.Host = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Port");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Port =null;
									}else{
		row1.Port = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Sid");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Sid =null;
									}else{
		row1.Sid = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("ServiceName");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.ServiceName =null;
									}else{
		row1.ServiceName = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Schema");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Schema =null;
									}else{
		row1.Schema = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("User");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.User =null;
									}else{
		row1.User = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Password");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Password =null;
									}else{
		row1.Password = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PathStorage");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PathStorage"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PathStorage =null;
									}else{
		row1.PathStorage = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPHost");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPHost"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPHost =null;
									}else{
		row1.SMTPHost = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPPort");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPPort"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPPort =null;
									}else{
		row1.SMTPPort = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("UsernameMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("UsernameMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.UsernameMail =null;
									}else{
		row1.UsernameMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PasswordMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PasswordMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PasswordMail =null;
									}else{
		row1.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis
context.db_origen_Server = row1.Host;
context.db_origen_Port = row1.Port;
context.db_origen_ServiceName = row1.ServiceName;
context.db_origen_Schema = row1.Schema;
context.db_origen_Login = row1.User;
context.db_origen_Password = row1.Password;


//Guarda en variables de contexto la fecha de ejecución y la hora de inicio

context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");
context.JOB = "CostosXCups";

//Imprime en consola el job, la fecha de ejecución y la hora de inicio
System.out.println(context.JOB+" :-Start: "+context.FECHA_EJECUCION+" "+context.HORA_INICIO);


    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFileInputXML_2Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 6;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 12;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 11;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputXML_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_2", false);
		start_Hash.put("tFileInputXML_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_2";
	
	
		int tos_count_tFileInputXML_2 = 0;
		

	

int nb_line_tFileInputXML_2 = 0;

	String os_tFileInputXML_2 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_2=false;
	if(os_tFileInputXML_2.indexOf("windows") > -1 || os_tFileInputXML_2.indexOf("nt") > -1){
		isWindows_tFileInputXML_2=true;
	}
class XML_API_tFileInputXML_2{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();

String[] queryPaths_tFileInputXML_2 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_2 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_2 = "";
String[] node_tFileInputXML_2 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_2 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_2,asXMLs_tFileInputXML_2);
looper_tFileInputXML_2.setEncoding("UTF-8");
Object filename_tFileInputXML_2 = null;
try {
	filename_tFileInputXML_2 = context.BODEGA;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_2 != null && filename_tFileInputXML_2 instanceof String && filename_tFileInputXML_2.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_2){
		filename_tFileInputXML_2 = filename_tFileInputXML_2.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_2 instanceof java.io.InputStream){
	looper_tFileInputXML_2.parse((java.io.InputStream)filename_tFileInputXML_2);
}else{
	looper_tFileInputXML_2.parse(String.valueOf(filename_tFileInputXML_2));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_2  = looper_tFileInputXML_2.iterator();
while (it_tFileInputXML_2.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_2 = it_tFileInputXML_2.next();
	if (nb_line_tFileInputXML_2>=50) {
	
			looper_tFileInputXML_2.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_2++;
		
	row2 = null;			
	boolean whetherReject_tFileInputXML_2 = false;
	row2 = new row2Struct();
	try{
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Host");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row2.Host =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row2.Host ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row2.Host =null;
									}else{
		row2.Host = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Port");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row2.Port =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row2.Port ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row2.Port =null;
									}else{
		row2.Port = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Sid");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row2.Sid =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row2.Sid ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row2.Sid =null;
									}else{
		row2.Sid = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("ServiceName");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row2.ServiceName =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row2.ServiceName ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row2.ServiceName =null;
									}else{
		row2.ServiceName = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Schema");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row2.Schema =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row2.Schema ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row2.Schema =null;
									}else{
		row2.Schema = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("User");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row2.User =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row2.User ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row2.User =null;
									}else{
		row2.User = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Password");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row2.Password =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row2.Password ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row2.Password =null;
									}else{
		row2.Password = str_tFileInputXML_2;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_2 = true;
                System.err.println(e.getMessage());
                row2 = null;
    }
			
			

 



/**
 * [tFileInputXML_2 begin ] stop
 */
	
	/**
	 * [tFileInputXML_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 


	tos_count_tFileInputXML_2++;

/**
 * [tFileInputXML_2 main ] stop
 */
	
	/**
	 * [tFileInputXML_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

    //Guarda en variables de contexto los parametros para la conexión a la bodega 
context.db_destino_Server = row2.Host;
context.db_destino_Port = row2.Port;
context.db_destino_ServiceName = row2.ServiceName;
context.db_destino_Schema = row2.Schema;
context.db_destino_Login = row2.User;
context.db_destino_Password = row2.Password;

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputXML_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	


	}
	try {
		looper_tFileInputXML_2.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_2_NB_LINE",nb_line_tFileInputXML_2);

	

 

ok_Hash.put("tFileInputXML_2", true);
end_Hash.put("tFileInputXML_2", System.currentTimeMillis());




/**
 * [tFileInputXML_2 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tOracleConnection_2Process(globalMap);



/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_2", false);
		start_Hash.put("tOracleConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_2";
	
	
		int tos_count_tOracleConnection_2 = 0;
		
	

	
        String url_tOracleConnection_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_2", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_2 = context.db_destino_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_2 = context.db_destino_Password; 
		String dbPwd_tOracleConnection_2 = decryptedPassword_tOracleConnection_2;
	
	
	java.sql.Connection conn_tOracleConnection_2 = null;
	
		
			String driverClass_tOracleConnection_2 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_2 = java.lang.Class.forName(driverClass_tOracleConnection_2);
			globalMap.put("driverClass_tOracleConnection_2", driverClass_tOracleConnection_2);
		
			java.util.Properties atnParamsPrope_tOracleConnection_2 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_2.put("user",dbUser_tOracleConnection_2);
			    atnParamsPrope_tOracleConnection_2.put("password",dbPwd_tOracleConnection_2);
			if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                atnParamsPrope_tOracleConnection_2.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_2 = java.sql.DriverManager.getConnection(url_tOracleConnection_2, atnParamsPrope_tOracleConnection_2);

		globalMap.put("conn_tOracleConnection_2", conn_tOracleConnection_2);
	if (null != conn_tOracleConnection_2) {
		
			conn_tOracleConnection_2.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_2",context.db_destino_Server);
        globalMap.put("port_" + "tOracleConnection_2",context.db_destino_Port);
        globalMap.put("dbname_" + "tOracleConnection_2",context.db_destino_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_2", context.db_destino_Schema);
	globalMap.put("username_" + "tOracleConnection_2",context.db_destino_Login);
	globalMap.put("password_" + "tOracleConnection_2",dbPwd_tOracleConnection_2);

 



/**
 * [tOracleConnection_2 begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 


	tos_count_tOracleConnection_2++;

/**
 * [tOracleConnection_2 main ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_2 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 

ok_Hash.put("tOracleConnection_2", true);
end_Hash.put("tOracleConnection_2", System.currentTimeMillis());




/**
 * [tOracleConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row3Struct row5 = row3;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	
	String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("moment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("root_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("father_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("project");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("context");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("priority");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("code");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row3.type = lcm.getType();
		row3.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row3.priority = lcm.getPriority();
		row3.message = lcm.getMessage();
		row3.code = lcm.getCode();
		
		row3.moment = java.util.Calendar.getInstance().getTime();
	
    	row3.pid = pid;
		row3.root_pid = rootPid;
		row3.father_pid = fatherPid;
	
    	row3.project = projectName;
    	row3.job = jobName;
    	row3.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row3.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row3.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

                    }



 
     row5 = row3;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
              					String classpath_tRunJob_1_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xercesImpl-2.12.2.jar;../lib/xml-apis-1.4.01.jar;../lib/slf4j-api-1.7.34.jar;../lib/crypto-utils-7.1.16.jar;../lib/TalendSAX.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/dom4j-2.1.3.jar;mail_0_1.jar;";
              					
              					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5), true);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "cec_costos_por_cups.mail_0_1.Mail");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		      					String classpath_tRunJob_1_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xercesImpl-2.12.2.jar:$ROOT_PATH/../lib/xml-apis-1.4.01.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/TalendSAX.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/mail_0_1.jar:";
		      					
		      					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "cec_costos_por_cups.mail_0_1.Mail");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_1 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_1.put("ANEXO_ID", context.ANEXO_ID);
                    paraList_tRunJob_1.add("--context_type " + "ANEXO_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("ESTADO", context.ESTADO);
                    paraList_tRunJob_1.add("--context_type " + "ESTADO" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("FECHA", context.FECHA);
                    paraList_tRunJob_1.add("--context_type " + "FECHA" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FECHA_CARGUE", context.FECHA_CARGUE);
                    paraList_tRunJob_1.add("--context_type " + "FECHA_CARGUE" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("MENSAJE", context.MENSAJE);
                    paraList_tRunJob_1.add("--context_type " + "MENSAJE" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("PERIODO", context.PERIODO);
                    paraList_tRunJob_1.add("--context_type " + "PERIODO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("TIEMPOS_FECHA", context.TIEMPOS_FECHA);
                    paraList_tRunJob_1.add("--context_type " + "TIEMPOS_FECHA" + "=" + "id_Date");
                    parentContextMap_tRunJob_1.put("TIEMPOS_ID", context.TIEMPOS_ID);
                    paraList_tRunJob_1.add("--context_type " + "TIEMPOS_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("ZERO", context.ZERO);
                    paraList_tRunJob_1.add("--context_type " + "ZERO" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("db_destino_AdditionalParams", context.db_destino_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Login", context.db_destino_Login);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Login" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Password", context.db_destino_Password);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("db_destino_Port", context.db_destino_Port);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Schema", context.db_destino_Schema);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Server", context.db_destino_Server);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Server" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_ServiceName", context.db_destino_ServiceName);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_ServiceName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_AdditionalParams", context.db_origen_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Login", context.db_origen_Login);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Login" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Password", context.db_origen_Password);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("db_origen_Port", context.db_origen_Port);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Schema", context.db_origen_Schema);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Server", context.db_origen_Server);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Server" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_ServiceName", context.db_origen_ServiceName);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_ServiceName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("BODEGA", context.BODEGA);
                    paraList_tRunJob_1.add("--context_type " + "BODEGA" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ESTADO_EXEC", context.ESTADO_EXEC);
                    paraList_tRunJob_1.add("--context_type " + "ESTADO_EXEC" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FECHA_EJECUCION", context.FECHA_EJECUCION);
                    paraList_tRunJob_1.add("--context_type " + "FECHA_EJECUCION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("HORA_FINAL", context.HORA_FINAL);
                    paraList_tRunJob_1.add("--context_type " + "HORA_FINAL" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("HORA_INICIO", context.HORA_INICIO);
                    paraList_tRunJob_1.add("--context_type " + "HORA_INICIO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("JOB", context.JOB);
                    paraList_tRunJob_1.add("--context_type " + "JOB" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("LOGS_ERROR", context.LOGS_ERROR);
                    paraList_tRunJob_1.add("--context_type " + "LOGS_ERROR" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("LOGS_EXECUTION", context.LOGS_EXECUTION);
                    paraList_tRunJob_1.add("--context_type " + "LOGS_EXECUTION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ORIGEN", context.ORIGEN);
                    paraList_tRunJob_1.add("--context_type " + "ORIGEN" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_1().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
					
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = row5.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param Project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param Project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param Project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("Project", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_destino", obj_tRunJob_1);
	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;
		
		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join();
            error_tRunJob_1.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


//Guarda en variables de contexto la hora final de ejecución del etl, actualiza el estado a succes y los imprime en consola

context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");
context.ESTADO_EXEC = "Succes";

System.out.println("- End: "+context.HORA_FINAL );
System.out.println("- Estado: "+context.ESTADO_EXEC );
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tOracleClose_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tOracleClose_2Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_2", false);
		start_Hash.put("tOracleClose_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_2";
	
	
		int tos_count_tOracleClose_2 = 0;
		

 



/**
 * [tOracleClose_2 begin ] stop
 */
	
	/**
	 * [tOracleClose_2 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

	java.sql.Connection conn_tOracleClose_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
	
	if(conn_tOracleClose_2 != null && !conn_tOracleClose_2.isClosed())
	{
		
			conn_tOracleClose_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_2++;

/**
 * [tOracleClose_2 main ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_2 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 

ok_Hash.put("tOracleClose_2", true);
end_Hash.put("tOracleClose_2", System.currentTimeMillis());




/**
 * [tOracleClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_INICIO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_FINAL");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ESTADO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("JOBS");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row4.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row4.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row4.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row4.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row4.JOBS = context.JOB;
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row4.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.ESTADO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.JOBS != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

                    }



 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


/*Obtiene la fecha del dia de ejecución del ETL*/
context.FECHA = TalendDate.getDate("DD/MM/YYYY");

/*para pruebas*/
//context.FECHA = "21/05/2019";
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk1", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tOracleInput_13Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk2", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tOracleInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class out7Struct implements routines.system.IPersistableRow<out7Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public BigDecimal ANEXO_ID;

				public BigDecimal getANEXO_ID () {
					return this.ANEXO_ID;
				}

				public Boolean ANEXO_IDIsNullable(){
				    return false;
				}
				public Boolean ANEXO_IDIsKey(){
				    return false;
				}
				public Integer ANEXO_IDLength(){
				    return 0;
				}
				public Integer ANEXO_IDPrecision(){
				    return null;
				}
				public String ANEXO_IDDefault(){
				
					return "";
				
				}
				public String ANEXO_IDComment(){
				
				    return "";
				
				}
				public String ANEXO_IDPattern(){
				
					return "";
				
				}
				public String ANEXO_IDOriginalDbColumnName(){
				
					return "ANEXO_ID";
				
				}

				
			    public String FECHA_PERIODO;

				public String getFECHA_PERIODO () {
					return this.FECHA_PERIODO;
				}

				public Boolean FECHA_PERIODOIsNullable(){
				    return true;
				}
				public Boolean FECHA_PERIODOIsKey(){
				    return false;
				}
				public Integer FECHA_PERIODOLength(){
				    return 10;
				}
				public Integer FECHA_PERIODOPrecision(){
				    return 0;
				}
				public String FECHA_PERIODODefault(){
				
					return null;
				
				}
				public String FECHA_PERIODOComment(){
				
				    return "";
				
				}
				public String FECHA_PERIODOPattern(){
				
					return "";
				
				}
				public String FECHA_PERIODOOriginalDbColumnName(){
				
					return "FECHA_PERIODO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ANEXO_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_PERIODO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ANEXO_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_PERIODO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ANEXO_ID);
					
					// String
				
						writeString(this.FECHA_PERIODO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ANEXO_ID);
					
					// String
				
						writeString(this.FECHA_PERIODO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANEXO_ID="+String.valueOf(ANEXO_ID));
		sb.append(",FECHA_PERIODO="+FECHA_PERIODO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public BigDecimal ANEXO_ID;

				public BigDecimal getANEXO_ID () {
					return this.ANEXO_ID;
				}

				public Boolean ANEXO_IDIsNullable(){
				    return false;
				}
				public Boolean ANEXO_IDIsKey(){
				    return false;
				}
				public Integer ANEXO_IDLength(){
				    return 0;
				}
				public Integer ANEXO_IDPrecision(){
				    return null;
				}
				public String ANEXO_IDDefault(){
				
					return "";
				
				}
				public String ANEXO_IDComment(){
				
				    return "";
				
				}
				public String ANEXO_IDPattern(){
				
					return "";
				
				}
				public String ANEXO_IDOriginalDbColumnName(){
				
					return "ANEXO_ID";
				
				}

				
			    public String FECHA_PERIODO;

				public String getFECHA_PERIODO () {
					return this.FECHA_PERIODO;
				}

				public Boolean FECHA_PERIODOIsNullable(){
				    return true;
				}
				public Boolean FECHA_PERIODOIsKey(){
				    return false;
				}
				public Integer FECHA_PERIODOLength(){
				    return 10;
				}
				public Integer FECHA_PERIODOPrecision(){
				    return 0;
				}
				public String FECHA_PERIODODefault(){
				
					return null;
				
				}
				public String FECHA_PERIODOComment(){
				
				    return "";
				
				}
				public String FECHA_PERIODOPattern(){
				
					return "";
				
				}
				public String FECHA_PERIODOOriginalDbColumnName(){
				
					return "FECHA_PERIODO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ANEXO_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_PERIODO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ANEXO_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_PERIODO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ANEXO_ID);
					
					// String
				
						writeString(this.FECHA_PERIODO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ANEXO_ID);
					
					// String
				
						writeString(this.FECHA_PERIODO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANEXO_ID="+String.valueOf(ANEXO_ID));
		sb.append(",FECHA_PERIODO="+FECHA_PERIODO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_13Struct implements routines.system.IPersistableRow<after_tOracleInput_13Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public BigDecimal ANEXO_ID;

				public BigDecimal getANEXO_ID () {
					return this.ANEXO_ID;
				}

				public Boolean ANEXO_IDIsNullable(){
				    return false;
				}
				public Boolean ANEXO_IDIsKey(){
				    return false;
				}
				public Integer ANEXO_IDLength(){
				    return 0;
				}
				public Integer ANEXO_IDPrecision(){
				    return null;
				}
				public String ANEXO_IDDefault(){
				
					return "";
				
				}
				public String ANEXO_IDComment(){
				
				    return "";
				
				}
				public String ANEXO_IDPattern(){
				
					return "";
				
				}
				public String ANEXO_IDOriginalDbColumnName(){
				
					return "ANEXO_ID";
				
				}

				
			    public String FECHA_PERIODO;

				public String getFECHA_PERIODO () {
					return this.FECHA_PERIODO;
				}

				public Boolean FECHA_PERIODOIsNullable(){
				    return true;
				}
				public Boolean FECHA_PERIODOIsKey(){
				    return false;
				}
				public Integer FECHA_PERIODOLength(){
				    return 10;
				}
				public Integer FECHA_PERIODOPrecision(){
				    return 0;
				}
				public String FECHA_PERIODODefault(){
				
					return null;
				
				}
				public String FECHA_PERIODOComment(){
				
				    return "";
				
				}
				public String FECHA_PERIODOPattern(){
				
					return "";
				
				}
				public String FECHA_PERIODOOriginalDbColumnName(){
				
					return "FECHA_PERIODO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ANEXO_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_PERIODO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ANEXO_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_PERIODO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ANEXO_ID);
					
					// String
				
						writeString(this.FECHA_PERIODO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ANEXO_ID);
					
					// String
				
						writeString(this.FECHA_PERIODO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANEXO_ID="+String.valueOf(ANEXO_ID));
		sb.append(",FECHA_PERIODO="+FECHA_PERIODO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_14Process(globalMap);

		row22Struct row22 = new row22Struct();
out7Struct out7 = new out7Struct();





	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out7");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
					globalMap.get( "tHash_Lookup_row23" ))
					;					
					
	

row23Struct row23HashKey = new row23Struct();
row23Struct row23Default = new row23Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out7Struct out7_tmp = new out7Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_13", false);
		start_Hash.put("tOracleInput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_13";
	
	
		int tos_count_tOracleInput_13 = 0;
		
	


	
		    int nb_line_tOracleInput_13 = 0;
		    java.sql.Connection conn_tOracleInput_13 = null;
				conn_tOracleInput_13 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_13 = false;
				boolean isConnectionWrapped_tOracleInput_13 = !(conn_tOracleInput_13 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_13.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_13 = null;
                if (isConnectionWrapped_tOracleInput_13) {
					unwrappedOraConn_tOracleInput_13 = conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_13 != null) {
                        isTimeZoneNull_tOracleInput_13 = (unwrappedOraConn_tOracleInput_13.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_13 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_13).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_13) {
					java.sql.Statement stmtGetTZ_tOracleInput_13 = conn_tOracleInput_13.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_13 = stmtGetTZ_tOracleInput_13.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_13 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_13.next()) {
						sessionTimezone_tOracleInput_13 = rsGetTZ_tOracleInput_13.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_13 && unwrappedOraConn_tOracleInput_13 != null) {
                        unwrappedOraConn_tOracleInput_13.setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_13).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_13 = conn_tOracleInput_13.createStatement();

		    String dbquery_tOracleInput_13 = "select CA.ID AS ANEXO_ID, TO_CHAR( CA.PERIODO, 'DD/MM/YYYY' ) AS FECHA_PERIODO\nfrom CEC_TANEXOS ct\ninner join CEC_ANE"
+"XOS ca ON ca.TANEXOS_ID = ct.ID \ninner join AFI_ESTEXTDERECHOS ae ON ae.ID = ca.ESTADOS_ID\nwhere ca.ESTREGISTRO_ID = 1"
+"\n  and ca.ESTADO = 'Activo'\n  and ct.SIGLA = 'DISTCI'\n  and ae.CODIGO = 6\n  and ca.FECHA = TO_DATE ('"+context.FECHA+"', 'DD/MM/YYYY')\n  ";
		    

		    globalMap.put("tOracleInput_13_QUERY",dbquery_tOracleInput_13);

		    java.sql.ResultSet rs_tOracleInput_13 = null;

		    try {
		    	rs_tOracleInput_13 = stmt_tOracleInput_13.executeQuery(dbquery_tOracleInput_13);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_13 = rs_tOracleInput_13.getMetaData();
		    	int colQtyInRs_tOracleInput_13 = rsmd_tOracleInput_13.getColumnCount();

		    String tmpContent_tOracleInput_13 = null;
		    
		    
		    while (rs_tOracleInput_13.next()) {
		        nb_line_tOracleInput_13++;
		        
							if(colQtyInRs_tOracleInput_13 < 1) {
								row22.ANEXO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(1) != null) {
						row22.ANEXO_ID = rs_tOracleInput_13.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 2) {
								row22.FECHA_PERIODO = null;
							} else {
	                         		
        	row22.FECHA_PERIODO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 2, false);
		                    }
					




 



/**
 * [tOracleInput_13 begin ] stop
 */
	
	/**
	 * [tOracleInput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 


	tos_count_tOracleInput_13++;

/**
 * [tOracleInput_13 main ] stop
 */
	
	/**
	 * [tOracleInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
						row23Struct row23 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row23" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow23 = false;
       		  	    	
       		  	    	
 							row23Struct row23ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row23HashKey.ANEXOS_ID = row22.ANEXO_ID ;
                        		    		

								
		                        	row23HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row23.lookup( row23HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row23.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row23 != null && tHash_Lookup_row23.getCount(row23HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row23' and it contains more one result from keys :  row23.ANEXOS_ID = '" + row23HashKey.ANEXOS_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row23Struct fromLookup_row23 = null;
							row23 = row23Default;
										 
							
								 
							
							
								if (tHash_Lookup_row23 !=null && tHash_Lookup_row23.hasNext()) { // G 099
								
							
								
								fromLookup_row23 = tHash_Lookup_row23.next();

							
							
								} // G 099
							
							

							if(fromLookup_row23 != null) {
								row23 = fromLookup_row23;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out7 = null;

if(!rejectedInnerJoin_tMap_2 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'out7'
// # Filter conditions 
if( rejectedInnerJoin_tMap_2 ) {
out7_tmp.ANEXO_ID = row22.ANEXO_ID ;
out7_tmp.FECHA_PERIODO = row22.FECHA_PERIODO ;
out7 = out7_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out7"
if(out7 != null) { 



	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out7"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.ANEXO_ID = out7.ANEXO_ID;
context.FECHA_CARGUE = out7.FECHA_PERIODO;

    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */

} // End of branch "out7"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

}
}finally{
	if (rs_tOracleInput_13 != null) {
		rs_tOracleInput_13.close();
	}
	if (stmt_tOracleInput_13 != null) {
		stmt_tOracleInput_13.close();
	}
}

globalMap.put("tOracleInput_13_NB_LINE",nb_line_tOracleInput_13);
 

ok_Hash.put("tOracleInput_13", true);
end_Hash.put("tOracleInput_13", System.currentTimeMillis());




/**
 * [tOracleInput_13 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row23 != null) {
						tHash_Lookup_row23.endGet();
					}
					globalMap.remove( "tHash_Lookup_row23" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out7");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());

   			if (context.ANEXO_ID != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tOracleInput_4Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row23"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return null;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
					this.PERIODO = readString(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
					this.PERIODO = readString(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",PERIODO="+PERIODO);
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement();

		    String dbquery_tOracleInput_4 = "SELECT  TI.ID AS TIEMPOS_ID\n        , TO_CHAR ( TI.FECHA ,'YYYY-MM' ) AS PERIODO\n        , TI.FECHA \nFROM BGEN_TIEMP"
+"OS TI\nWHERE TI.FECHA = TRUNC ( TO_DATE ('"+context.FECHA_CARGUE+"', 'DD/MM/YYYY'), 'MONTH' )";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row9.TIEMPOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row9.TIEMPOS_ID = rs_tOracleInput_4.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row9.PERIODO = null;
							} else {
	                         		
        	row9.PERIODO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row9.FECHA = null;
							} else {
										
			row9.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_4, 3);
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.TIEMPOS_ID = row9.TIEMPOS_ID;
context.PERIODO = row9.PERIODO;
context.TIEMPOS_FECHA = row9.FECHA;

//Imprime en consola el periodo a calcular
System.out.println(" ");
System.out.println("*Periodo a calcular: "+context.PERIODO);
System.out.println("*Fecha a calcular: "+context.TIEMPOS_FECHA);
System.out.println("*Tiempos id a calcular: "+context.TIEMPOS_ID);

    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal CANTIDAD_ATENCIONES_CUPS;

				public BigDecimal getCANTIDAD_ATENCIONES_CUPS () {
					return this.CANTIDAD_ATENCIONES_CUPS;
				}

				public Boolean CANTIDAD_ATENCIONES_CUPSIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_ATENCIONES_CUPSIsKey(){
				    return false;
				}
				public Integer CANTIDAD_ATENCIONES_CUPSLength(){
				    return null;
				}
				public Integer CANTIDAD_ATENCIONES_CUPSPrecision(){
				    return null;
				}
				public String CANTIDAD_ATENCIONES_CUPSDefault(){
				
					return "";
				
				}
				public String CANTIDAD_ATENCIONES_CUPSComment(){
				
				    return "";
				
				}
				public String CANTIDAD_ATENCIONES_CUPSPattern(){
				
					return "";
				
				}
				public String CANTIDAD_ATENCIONES_CUPSOriginalDbColumnName(){
				
					return "CANTIDAD_ATENCIONES_CUPS";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_ATENCIONES_CUPS = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_ATENCIONES_CUPS = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_ATENCIONES_CUPS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_ATENCIONES_CUPS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",CANTIDAD_ATENCIONES_CUPS="+String.valueOf(CANTIDAD_ATENCIONES_CUPS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row19Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_CostosXCups_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row19Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_2.setFetchSize(1000);


		    String dbquery_tOracleInput_2 = "\nSELECT    \n    AD.UORG_ID,\n    DAD.CEBE_ID,\n    DAD.CECO_ID,\n    DAD.REGISTRO_ID AS CUPS_ID,\n    COUNT(1) AS CAN"
+"TIDAD_ATENCIONES_CUPS\nFROM\n    CEC_DADMISIONES   DAD\n    INNER JOIN ADM_ADMISIONES    AD ON DAD.ADMISIONES_ID = AD.ID"
+"\n    INNER JOIN CEC_CEBE          CB ON DAD.CEBE_ID = CB.ID\n    INNER JOIN CEC_CECO          CC ON DAD.CECO_ID = CC.ID"
+"\nWHERE\n    AD.ESTREGISTRO_ID = 1\n    AND DAD.ESTREGISTRO_ID = 1\n    AND DAD.TABLA = 'GEN_CUPS'\n    AND TO_CHAR(AD.F"
+"FINAL, 'YYYY-MM') = '"+context.PERIODO+"'\nGROUP BY    \n    AD.UORG_ID,\n    DAD.CEBE_ID,\n    DAD.CECO_ID,\n    DAD.REGISTRO_ID\n";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row19.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row19.UORG_ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row19.CEBE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(2) != null) {
						row19.CEBE_ID = rs_tOracleInput_2.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row19.CECO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(3) != null) {
						row19.CECO_ID = rs_tOracleInput_2.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 4) {
								row19.CUPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(4) != null) {
						row19.CUPS_ID = rs_tOracleInput_2.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 5) {
								row19.CANTIDAD_ATENCIONES_CUPS = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(5) != null) {
						row19.CANTIDAD_ATENCIONES_CUPS = rs_tOracleInput_2.getBigDecimal(5);
					} else {
				
						row19.CANTIDAD_ATENCIONES_CUPS = null;
					}
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					



    
		row19Struct oneRow_tHashOutput_1 = new row19Struct();
				
					oneRow_tHashOutput_1.UORG_ID = row19.UORG_ID;
					oneRow_tHashOutput_1.CEBE_ID = row19.CEBE_ID;
					oneRow_tHashOutput_1.CECO_ID = row19.CECO_ID;
					oneRow_tHashOutput_1.CUPS_ID = row19.CUPS_ID;
					oneRow_tHashOutput_1.CANTIDAD_ATENCIONES_CUPS = row19.CANTIDAD_ATENCIONES_CUPS;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tOracleInput_18Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public BigDecimal CANTIDAD_ATENCIONES_CECO;

				public BigDecimal getCANTIDAD_ATENCIONES_CECO () {
					return this.CANTIDAD_ATENCIONES_CECO;
				}

				public Boolean CANTIDAD_ATENCIONES_CECOIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_ATENCIONES_CECOIsKey(){
				    return false;
				}
				public Integer CANTIDAD_ATENCIONES_CECOLength(){
				    return null;
				}
				public Integer CANTIDAD_ATENCIONES_CECOPrecision(){
				    return null;
				}
				public String CANTIDAD_ATENCIONES_CECODefault(){
				
					return "";
				
				}
				public String CANTIDAD_ATENCIONES_CECOComment(){
				
				    return "";
				
				}
				public String CANTIDAD_ATENCIONES_CECOPattern(){
				
					return "";
				
				}
				public String CANTIDAD_ATENCIONES_CECOOriginalDbColumnName(){
				
					return "CANTIDAD_ATENCIONES_CECO";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_ATENCIONES_CECO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_ATENCIONES_CECO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_ATENCIONES_CECO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_ATENCIONES_CECO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",CANTIDAD_ATENCIONES_CECO="+String.valueOf(CANTIDAD_ATENCIONES_CECO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row27Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_CostosXCups_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row27Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_18", false);
		start_Hash.put("tOracleInput_18", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_18";
	
	
		int tos_count_tOracleInput_18 = 0;
		
	


	
		    int nb_line_tOracleInput_18 = 0;
		    java.sql.Connection conn_tOracleInput_18 = null;
				conn_tOracleInput_18 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_18 = false;
				boolean isConnectionWrapped_tOracleInput_18 = !(conn_tOracleInput_18 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_18.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_18 = null;
                if (isConnectionWrapped_tOracleInput_18) {
					unwrappedOraConn_tOracleInput_18 = conn_tOracleInput_18.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_18 != null) {
                        isTimeZoneNull_tOracleInput_18 = (unwrappedOraConn_tOracleInput_18.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_18 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_18).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_18) {
					java.sql.Statement stmtGetTZ_tOracleInput_18 = conn_tOracleInput_18.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_18 = stmtGetTZ_tOracleInput_18.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_18 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_18.next()) {
						sessionTimezone_tOracleInput_18 = rsGetTZ_tOracleInput_18.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_18 && unwrappedOraConn_tOracleInput_18 != null) {
                        unwrappedOraConn_tOracleInput_18.setSessionTimeZone(sessionTimezone_tOracleInput_18);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_18).setSessionTimeZone(sessionTimezone_tOracleInput_18);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_18 = conn_tOracleInput_18.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_18.setFetchSize(1000);


		    String dbquery_tOracleInput_18 = "\nSELECT    \n    AD.UORG_ID,\n    DAD.CEBE_ID,\n    DAD.CECO_ID,\n    COUNT(1) AS CANTIDAD_ATENCIONES_CECO\nFROM\n    "
+"CEC_DADMISIONES   DAD\n    INNER JOIN ADM_ADMISIONES    AD ON DAD.ADMISIONES_ID = AD.ID\n    INNER JOIN CEC_CEBE        "
+"  CB ON DAD.CEBE_ID = CB.ID\n    INNER JOIN CEC_CECO          CC ON DAD.CECO_ID = CC.ID\nWHERE\n    AD.ESTREGISTRO_ID = "
+"1\n    AND DAD.ESTREGISTRO_ID = 1\n    AND DAD.TABLA = 'GEN_CUPS'\n    AND TO_CHAR(AD.FFINAL, 'YYYY-MM') = '"+context.PERIODO+"'\nGROUP BY    \n    AD.UORG_ID,\n    DAD.CEBE_ID,\n    DAD.CECO_ID\n";
		    

		    globalMap.put("tOracleInput_18_QUERY",dbquery_tOracleInput_18);

		    java.sql.ResultSet rs_tOracleInput_18 = null;

		    try {
		    	rs_tOracleInput_18 = stmt_tOracleInput_18.executeQuery(dbquery_tOracleInput_18);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_18 = rs_tOracleInput_18.getMetaData();
		    	int colQtyInRs_tOracleInput_18 = rsmd_tOracleInput_18.getColumnCount();

		    String tmpContent_tOracleInput_18 = null;
		    
		    
		    while (rs_tOracleInput_18.next()) {
		        nb_line_tOracleInput_18++;
		        
							if(colQtyInRs_tOracleInput_18 < 1) {
								row27.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_18.getObject(1) != null) {
						row27.UORG_ID = rs_tOracleInput_18.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_18 < 2) {
								row27.CEBE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_18.getObject(2) != null) {
						row27.CEBE_ID = rs_tOracleInput_18.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_18 < 3) {
								row27.CECO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_18.getObject(3) != null) {
						row27.CECO_ID = rs_tOracleInput_18.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_18 < 4) {
								row27.CANTIDAD_ATENCIONES_CECO = null;
							} else {
		                          
					if(rs_tOracleInput_18.getObject(4) != null) {
						row27.CANTIDAD_ATENCIONES_CECO = rs_tOracleInput_18.getBigDecimal(4);
					} else {
				
						row27.CANTIDAD_ATENCIONES_CECO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_18 begin ] stop
 */
	
	/**
	 * [tOracleInput_18 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 


	tos_count_tOracleInput_18++;

/**
 * [tOracleInput_18 main ] stop
 */
	
	/**
	 * [tOracleInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row27"
						
						);
					}
					



    
		row27Struct oneRow_tHashOutput_2 = new row27Struct();
				
					oneRow_tHashOutput_2.UORG_ID = row27.UORG_ID;
					oneRow_tHashOutput_2.CEBE_ID = row27.CEBE_ID;
					oneRow_tHashOutput_2.CECO_ID = row27.CECO_ID;
					oneRow_tHashOutput_2.CANTIDAD_ATENCIONES_CECO = row27.CANTIDAD_ATENCIONES_CECO;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_18 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

}
}finally{
	if (rs_tOracleInput_18 != null) {
		rs_tOracleInput_18.close();
	}
	if (stmt_tOracleInput_18 != null) {
		stmt_tOracleInput_18.close();
	}
}

globalMap.put("tOracleInput_18_NB_LINE",nb_line_tOracleInput_18);
 

ok_Hash.put("tOracleInput_18", true);
end_Hash.put("tOracleInput_18", System.currentTimeMillis());




/**
 * [tOracleInput_18 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_18:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tOracleInput_15Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_18 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String UORG;

				public String getUORG () {
					return this.UORG;
				}

				public Boolean UORGIsNullable(){
				    return false;
				}
				public Boolean UORGIsKey(){
				    return false;
				}
				public Integer UORGLength(){
				    return 2000;
				}
				public Integer UORGPrecision(){
				    return 0;
				}
				public String UORGDefault(){
				
					return null;
				
				}
				public String UORGComment(){
				
				    return "";
				
				}
				public String UORGPattern(){
				
					return "";
				
				}
				public String UORGOriginalDbColumnName(){
				
					return "UORG";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return 0;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public String CEBE_COD;

				public String getCEBE_COD () {
					return this.CEBE_COD;
				}

				public Boolean CEBE_CODIsNullable(){
				    return false;
				}
				public Boolean CEBE_CODIsKey(){
				    return false;
				}
				public Integer CEBE_CODLength(){
				    return 100;
				}
				public Integer CEBE_CODPrecision(){
				    return 0;
				}
				public String CEBE_CODDefault(){
				
					return null;
				
				}
				public String CEBE_CODComment(){
				
				    return "";
				
				}
				public String CEBE_CODPattern(){
				
					return "";
				
				}
				public String CEBE_CODOriginalDbColumnName(){
				
					return "CEBE_COD";
				
				}

				
			    public String CEBE;

				public String getCEBE () {
					return this.CEBE;
				}

				public Boolean CEBEIsNullable(){
				    return false;
				}
				public Boolean CEBEIsKey(){
				    return false;
				}
				public Integer CEBELength(){
				    return 2000;
				}
				public Integer CEBEPrecision(){
				    return 0;
				}
				public String CEBEDefault(){
				
					return null;
				
				}
				public String CEBEComment(){
				
				    return "";
				
				}
				public String CEBEPattern(){
				
					return "";
				
				}
				public String CEBEOriginalDbColumnName(){
				
					return "CEBE";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return false;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return 0;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return null;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return 0;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public String CECO_COD;

				public String getCECO_COD () {
					return this.CECO_COD;
				}

				public Boolean CECO_CODIsNullable(){
				    return false;
				}
				public Boolean CECO_CODIsKey(){
				    return false;
				}
				public Integer CECO_CODLength(){
				    return 200;
				}
				public Integer CECO_CODPrecision(){
				    return 0;
				}
				public String CECO_CODDefault(){
				
					return null;
				
				}
				public String CECO_CODComment(){
				
				    return "";
				
				}
				public String CECO_CODPattern(){
				
					return "";
				
				}
				public String CECO_CODOriginalDbColumnName(){
				
					return "CECO_COD";
				
				}

				
			    public String CECO;

				public String getCECO () {
					return this.CECO;
				}

				public Boolean CECOIsNullable(){
				    return false;
				}
				public Boolean CECOIsKey(){
				    return false;
				}
				public Integer CECOLength(){
				    return 2000;
				}
				public Integer CECOPrecision(){
				    return 0;
				}
				public String CECODefault(){
				
					return null;
				
				}
				public String CECOComment(){
				
				    return "";
				
				}
				public String CECOPattern(){
				
					return "";
				
				}
				public String CECOOriginalDbColumnName(){
				
					return "CECO";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public String CUPS_COD;

				public String getCUPS_COD () {
					return this.CUPS_COD;
				}

				public Boolean CUPS_CODIsNullable(){
				    return false;
				}
				public Boolean CUPS_CODIsKey(){
				    return false;
				}
				public Integer CUPS_CODLength(){
				    return 100;
				}
				public Integer CUPS_CODPrecision(){
				    return 0;
				}
				public String CUPS_CODDefault(){
				
					return "";
				
				}
				public String CUPS_CODComment(){
				
				    return "";
				
				}
				public String CUPS_CODPattern(){
				
					return "";
				
				}
				public String CUPS_CODOriginalDbColumnName(){
				
					return "CUPS_COD";
				
				}

				
			    public String CUPS;

				public String getCUPS () {
					return this.CUPS;
				}

				public Boolean CUPSIsNullable(){
				    return true;
				}
				public Boolean CUPSIsKey(){
				    return false;
				}
				public Integer CUPSLength(){
				    return 500;
				}
				public Integer CUPSPrecision(){
				    return 0;
				}
				public String CUPSDefault(){
				
					return "";
				
				}
				public String CUPSComment(){
				
				    return "";
				
				}
				public String CUPSPattern(){
				
					return "";
				
				}
				public String CUPSOriginalDbColumnName(){
				
					return "CUPS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.UORG = readString(dis);
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
					this.CEBE_COD = readString(dis);
					
					this.CEBE = readString(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
					this.CECO_COD = readString(dis);
					
					this.CECO = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.CUPS_COD = readString(dis);
					
					this.CUPS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.UORG = readString(dis);
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
					this.CEBE_COD = readString(dis);
					
					this.CEBE = readString(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
					this.CECO_COD = readString(dis);
					
					this.CECO = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.CUPS_COD = readString(dis);
					
					this.CUPS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.UORG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// String
				
						writeString(this.CEBE_COD,dos);
					
					// String
				
						writeString(this.CEBE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
					// String
				
						writeString(this.CECO_COD,dos);
					
					// String
				
						writeString(this.CECO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.CUPS_COD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.UORG,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// String
				
						writeString(this.CEBE_COD,dos);
					
					// String
				
						writeString(this.CEBE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
					// String
				
						writeString(this.CECO_COD,dos);
					
					// String
				
						writeString(this.CECO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.CUPS_COD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",UORG="+UORG);
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CEBE_COD="+CEBE_COD);
		sb.append(",CEBE="+CEBE);
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",CECO_COD="+CECO_COD);
		sb.append(",CECO="+CECO);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",CUPS_COD="+CUPS_COD);
		sb.append(",CUPS="+CUPS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row28Struct row28 = new row28Struct();




	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row28Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_CostosXCups_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row28Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_15", false);
		start_Hash.put("tOracleInput_15", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_15";
	
	
		int tos_count_tOracleInput_15 = 0;
		
	


	
		    int nb_line_tOracleInput_15 = 0;
		    java.sql.Connection conn_tOracleInput_15 = null;
				conn_tOracleInput_15 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_15 = false;
				boolean isConnectionWrapped_tOracleInput_15 = !(conn_tOracleInput_15 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_15.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_15 = null;
                if (isConnectionWrapped_tOracleInput_15) {
					unwrappedOraConn_tOracleInput_15 = conn_tOracleInput_15.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_15 != null) {
                        isTimeZoneNull_tOracleInput_15 = (unwrappedOraConn_tOracleInput_15.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_15 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_15).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_15) {
					java.sql.Statement stmtGetTZ_tOracleInput_15 = conn_tOracleInput_15.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_15 = stmtGetTZ_tOracleInput_15.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_15 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_15.next()) {
						sessionTimezone_tOracleInput_15 = rsGetTZ_tOracleInput_15.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_15 && unwrappedOraConn_tOracleInput_15 != null) {
                        unwrappedOraConn_tOracleInput_15.setSessionTimeZone(sessionTimezone_tOracleInput_15);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_15).setSessionTimeZone(sessionTimezone_tOracleInput_15);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_15 = conn_tOracleInput_15.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_15.setFetchSize(1000);


		    String dbquery_tOracleInput_15 = "\nSELECT\n    GU.ID AS UORG_ID,\n    GU.NOMBRE AS UORG,\n	CB.ID AS CEBE_ID,\n    CB.CODIGO AS CEBE_COD,\n    CB.NOMBRE "
+"AS CEBE,    \n    GS.ID AS SERVICIOS_ID,\n    CC.ID AS CECO_ID,    \n    CC.SIGLA AS CECO_COD,\n    CC.NOMBRE AS CECO,\n"
+"    GE.ID AS ESPECIALIDADES_ID,    \n	GC.ID AS CUPS_ID,\n    GC.CODIGO AS CUPS_COD,\n    REPLACE(GC.NOMBRE, ';', ',') AS"
+" CUPS    \nFROM\n    CEC_UORG_CECO        UC\n    INNER JOIN CEC_UORG_CECO_CUPS   UCC ON UCC.UORG_CECO_ID = UC.ID\n    I"
+"NNER JOIN CEC_CECO             CC ON CC.ID = UC.CECO_ID\n    INNER JOIN CEC_CEBE             CB ON CB.ID = CC.CEBE_ID\n "
+"   INNER JOIN GEN_UORG             GU ON GU.ID = UC.UORG_ID\n    INNER JOIN GEN_SERVICIOS        GS ON GS.ID = CB.SERVIC"
+"IOS_ID\n    INNER JOIN GEN_ESPECIALIDADES   GE ON GE.ID = CC.ESPECIALIDADES_ID\n    INNER JOIN GEN_CUPS             GC O"
+"N GC.ID = UCC.CUPS_ID\n    INNER JOIN GEN_ESPCUPS          GEC ON GEC.CUPS_ID = GC.ID AND GEC.SERVICIOS_ID = GS.ID AND G"
+"EC.ESPECIALIDADES_ID = GE.ID\nWHERE\n    UC.ESTADO = 'Activo'\n    AND UC.ESTREGISTRO_ID = 1\n    AND UCC.ESTADO = 'Acti"
+"vo'\n    AND UCC.ESTREGISTRO_ID = 1\n    AND CC.ESTADO = 'Activo'\n    AND CC.ESTREGISTRO_ID = 1\n    AND CB.ESTADO = 'A"
+"ctivo'\n    AND CB.ESTREGISTRO_ID = 1\n    AND GU.ESTADO = 'Activo'\n    AND GU.ESTREGISTRO_ID = 1\n    AND GS.ESTADO = "
+"'Activo'\n    AND GS.ESTREGISTRO_ID = 1\n    AND GE.ESTADO = 'Activo'\n    AND GE.ESTREGISTRO_ID = 1\n    AND GC.ESTADO "
+"= 'Activo'\n    AND GC.ESTREGISTRO_ID = 1\n    AND GEC.ESTADO = 'Activo'\n    AND GEC.ESTREGISTRO_ID = 1\n";
		    

		    globalMap.put("tOracleInput_15_QUERY",dbquery_tOracleInput_15);

		    java.sql.ResultSet rs_tOracleInput_15 = null;

		    try {
		    	rs_tOracleInput_15 = stmt_tOracleInput_15.executeQuery(dbquery_tOracleInput_15);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_15 = rs_tOracleInput_15.getMetaData();
		    	int colQtyInRs_tOracleInput_15 = rsmd_tOracleInput_15.getColumnCount();

		    String tmpContent_tOracleInput_15 = null;
		    
		    
		    while (rs_tOracleInput_15.next()) {
		        nb_line_tOracleInput_15++;
		        
							if(colQtyInRs_tOracleInput_15 < 1) {
								row28.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(1) != null) {
						row28.UORG_ID = rs_tOracleInput_15.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 2) {
								row28.UORG = null;
							} else {
	                         		
        	row28.UORG = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 3) {
								row28.CEBE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(3) != null) {
						row28.CEBE_ID = rs_tOracleInput_15.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 4) {
								row28.CEBE_COD = null;
							} else {
	                         		
        	row28.CEBE_COD = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 5) {
								row28.CEBE = null;
							} else {
	                         		
        	row28.CEBE = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 6) {
								row28.SERVICIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(6) != null) {
						row28.SERVICIOS_ID = rs_tOracleInput_15.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 7) {
								row28.CECO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(7) != null) {
						row28.CECO_ID = rs_tOracleInput_15.getBigDecimal(7);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 8) {
								row28.CECO_COD = null;
							} else {
	                         		
        	row28.CECO_COD = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 9) {
								row28.CECO = null;
							} else {
	                         		
        	row28.CECO = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 10) {
								row28.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(10) != null) {
						row28.ESPECIALIDADES_ID = rs_tOracleInput_15.getBigDecimal(10);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 11) {
								row28.CUPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(11) != null) {
						row28.CUPS_ID = rs_tOracleInput_15.getBigDecimal(11);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 12) {
								row28.CUPS_COD = null;
							} else {
	                         		
        	row28.CUPS_COD = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 13) {
								row28.CUPS = null;
							} else {
	                         		
        	row28.CUPS = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 13, false);
		                    }
					




 



/**
 * [tOracleInput_15 begin ] stop
 */
	
	/**
	 * [tOracleInput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 


	tos_count_tOracleInput_15++;

/**
 * [tOracleInput_15 main ] stop
 */
	
	/**
	 * [tOracleInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					



    
		row28Struct oneRow_tHashOutput_3 = new row28Struct();
				
					oneRow_tHashOutput_3.UORG_ID = row28.UORG_ID;
					oneRow_tHashOutput_3.UORG = row28.UORG;
					oneRow_tHashOutput_3.CEBE_ID = row28.CEBE_ID;
					oneRow_tHashOutput_3.CEBE_COD = row28.CEBE_COD;
					oneRow_tHashOutput_3.CEBE = row28.CEBE;
					oneRow_tHashOutput_3.SERVICIOS_ID = row28.SERVICIOS_ID;
					oneRow_tHashOutput_3.CECO_ID = row28.CECO_ID;
					oneRow_tHashOutput_3.CECO_COD = row28.CECO_COD;
					oneRow_tHashOutput_3.CECO = row28.CECO;
					oneRow_tHashOutput_3.ESPECIALIDADES_ID = row28.ESPECIALIDADES_ID;
					oneRow_tHashOutput_3.CUPS_ID = row28.CUPS_ID;
					oneRow_tHashOutput_3.CUPS_COD = row28.CUPS_COD;
					oneRow_tHashOutput_3.CUPS = row28.CUPS;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_15 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

}
}finally{
	if (rs_tOracleInput_15 != null) {
		rs_tOracleInput_15.close();
	}
	if (stmt_tOracleInput_15 != null) {
		stmt_tOracleInput_15.close();
	}
}

globalMap.put("tOracleInput_15_NB_LINE",nb_line_tOracleInput_15);
 

ok_Hash.put("tOracleInput_15", true);
end_Hash.put("tOracleInput_15", System.currentTimeMillis());




/**
 * [tOracleInput_15 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_15:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tOracleInput_19Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_15 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return 0;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return 0;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public BigDecimal CONTEO_CUPS;

				public BigDecimal getCONTEO_CUPS () {
					return this.CONTEO_CUPS;
				}

				public Boolean CONTEO_CUPSIsNullable(){
				    return true;
				}
				public Boolean CONTEO_CUPSIsKey(){
				    return false;
				}
				public Integer CONTEO_CUPSLength(){
				    return 0;
				}
				public Integer CONTEO_CUPSPrecision(){
				    return 0;
				}
				public String CONTEO_CUPSDefault(){
				
					return "";
				
				}
				public String CONTEO_CUPSComment(){
				
				    return "";
				
				}
				public String CONTEO_CUPSPattern(){
				
					return "";
				
				}
				public String CONTEO_CUPSOriginalDbColumnName(){
				
					return "CONTEO_CUPS";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
						this.CONTEO_CUPS = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
						this.CONTEO_CUPS = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTEO_CUPS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTEO_CUPS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",CONTEO_CUPS="+String.valueOf(CONTEO_CUPS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row29Struct row29 = new row29Struct();




	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row29Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_CostosXCups_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row29Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_19", false);
		start_Hash.put("tOracleInput_19", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_19";
	
	
		int tos_count_tOracleInput_19 = 0;
		
	


	
		    int nb_line_tOracleInput_19 = 0;
		    java.sql.Connection conn_tOracleInput_19 = null;
				conn_tOracleInput_19 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_19 = false;
				boolean isConnectionWrapped_tOracleInput_19 = !(conn_tOracleInput_19 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_19.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_19 = null;
                if (isConnectionWrapped_tOracleInput_19) {
					unwrappedOraConn_tOracleInput_19 = conn_tOracleInput_19.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_19 != null) {
                        isTimeZoneNull_tOracleInput_19 = (unwrappedOraConn_tOracleInput_19.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_19 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_19).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_19) {
					java.sql.Statement stmtGetTZ_tOracleInput_19 = conn_tOracleInput_19.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_19 = stmtGetTZ_tOracleInput_19.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_19 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_19.next()) {
						sessionTimezone_tOracleInput_19 = rsGetTZ_tOracleInput_19.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_19 && unwrappedOraConn_tOracleInput_19 != null) {
                        unwrappedOraConn_tOracleInput_19.setSessionTimeZone(sessionTimezone_tOracleInput_19);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_19).setSessionTimeZone(sessionTimezone_tOracleInput_19);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_19 = conn_tOracleInput_19.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_19.setFetchSize(1000);


		    String dbquery_tOracleInput_19 = "\nSELECT\n    GU.ID   AS UORG_ID,\n    CB.ID   AS CEBE_ID,\n    CC.ID   AS CECO_ID,\n    COUNT(GC.ID) AS CONTEO_CUPS\nF"
+"ROM\n    CEC_UORG_CECO        UC\n    INNER JOIN CEC_UORG_CECO_CUPS   UCC ON UCC.UORG_CECO_ID = UC.ID\n    INNER JOIN CE"
+"C_CECO             CC ON CC.ID = UC.CECO_ID\n    INNER JOIN CEC_CEBE             CB ON CB.ID = CC.CEBE_ID\n    INNER JOI"
+"N GEN_UORG             GU ON GU.ID = UC.UORG_ID\n    INNER JOIN GEN_SERVICIOS        GS ON GS.ID = CB.SERVICIOS_ID\n    "
+"INNER JOIN GEN_ESPECIALIDADES   GE ON GE.ID = CC.ESPECIALIDADES_ID\n    INNER JOIN GEN_CUPS             GC ON GC.ID = UC"
+"C.CUPS_ID\n    INNER JOIN GEN_ESPCUPS          GEC ON GEC.CUPS_ID = GC.ID AND GEC.SERVICIOS_ID = GS.ID AND GEC.ESPECIALI"
+"DADES_ID = GE.ID\nWHERE  \n    UC.ESTADO = 'Activo'\n    AND UC.ESTREGISTRO_ID = 1\n    AND UCC.ESTADO = 'Activo'\n    A"
+"ND UCC.ESTREGISTRO_ID = 1\n    AND CC.ESTADO = 'Activo'\n    AND CC.ESTREGISTRO_ID = 1\n    AND CB.ESTADO = 'Activo'\n  "
+"  AND CB.ESTREGISTRO_ID = 1\n    AND GU.ESTADO = 'Activo'\n    AND GU.ESTREGISTRO_ID = 1\n    AND GS.ESTADO = 'Activo'\n"
+"    AND GS.ESTREGISTRO_ID = 1\n    AND GE.ESTADO = 'Activo'\n    AND GE.ESTREGISTRO_ID = 1\n    AND GC.ESTADO = 'Activo'"
+"\n    AND GC.ESTREGISTRO_ID = 1\n    AND GEC.ESTADO = 'Activo'\n    AND GEC.ESTREGISTRO_ID = 1\nGROUP BY\n    GU.ID,\n  "
+"  CB.ID,\n    CC.ID\n";
		    

		    globalMap.put("tOracleInput_19_QUERY",dbquery_tOracleInput_19);

		    java.sql.ResultSet rs_tOracleInput_19 = null;

		    try {
		    	rs_tOracleInput_19 = stmt_tOracleInput_19.executeQuery(dbquery_tOracleInput_19);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_19 = rs_tOracleInput_19.getMetaData();
		    	int colQtyInRs_tOracleInput_19 = rsmd_tOracleInput_19.getColumnCount();

		    String tmpContent_tOracleInput_19 = null;
		    
		    
		    while (rs_tOracleInput_19.next()) {
		        nb_line_tOracleInput_19++;
		        
							if(colQtyInRs_tOracleInput_19 < 1) {
								row29.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(1) != null) {
						row29.UORG_ID = rs_tOracleInput_19.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 2) {
								row29.CEBE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(2) != null) {
						row29.CEBE_ID = rs_tOracleInput_19.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 3) {
								row29.CECO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(3) != null) {
						row29.CECO_ID = rs_tOracleInput_19.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 4) {
								row29.CONTEO_CUPS = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(4) != null) {
						row29.CONTEO_CUPS = rs_tOracleInput_19.getBigDecimal(4);
					} else {
				
						row29.CONTEO_CUPS = null;
					}
		                    }
					




 



/**
 * [tOracleInput_19 begin ] stop
 */
	
	/**
	 * [tOracleInput_19 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 


	tos_count_tOracleInput_19++;

/**
 * [tOracleInput_19 main ] stop
 */
	
	/**
	 * [tOracleInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row29"
						
						);
					}
					



    
		row29Struct oneRow_tHashOutput_4 = new row29Struct();
				
					oneRow_tHashOutput_4.UORG_ID = row29.UORG_ID;
					oneRow_tHashOutput_4.CEBE_ID = row29.CEBE_ID;
					oneRow_tHashOutput_4.CECO_ID = row29.CECO_ID;
					oneRow_tHashOutput_4.CONTEO_CUPS = row29.CONTEO_CUPS;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_19 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

}
}finally{
	if (rs_tOracleInput_19 != null) {
		rs_tOracleInput_19.close();
	}
	if (stmt_tOracleInput_19 != null) {
		stmt_tOracleInput_19.close();
	}
}

globalMap.put("tOracleInput_19_NB_LINE",nb_line_tOracleInput_19);
 

ok_Hash.put("tOracleInput_19", true);
end_Hash.put("tOracleInput_19", System.currentTimeMillis());




/**
 * [tOracleInput_19 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_19:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tOracleRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_19 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_1", false);
		start_Hash.put("tOracleRow_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_1";
	
	
		int tos_count_tOracleRow_1 = 0;
		

	java.sql.Connection conn_tOracleRow_1 = null;
	String query_tOracleRow_1 = "";
	boolean whetherReject_tOracleRow_1 = false;
	int count_tOracleRow_1 = 0;
			String driverClass_tOracleRow_1 = "oracle.jdbc.OracleDriver";
		    java.lang.Class jdbcclazz_tOracleRow_1 = java.lang.Class.forName(driverClass_tOracleRow_1);
		
			String url_tOracleRow_1 = null;
				url_tOracleRow_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
					String dbUser_tOracleRow_1 = context.db_destino_Login;
	        
            		
            		
            		
	final String decryptedPassword_tOracleRow_1 = context.db_destino_Password; 
        		   	
        	        String dbPwd_tOracleRow_1 = decryptedPassword_tOracleRow_1;
	        
					
			conn_tOracleRow_1 = java.sql.DriverManager.getConnection(url_tOracleRow_1,dbUser_tOracleRow_1,dbPwd_tOracleRow_1);
		
        resourceMap.put("conn_tOracleRow_1", conn_tOracleRow_1);
					if(conn_tOracleRow_1.getAutoCommit()) {
						
				conn_tOracleRow_1.setAutoCommit(false);
			
					}        
					int commitEvery_tOracleRow_1 = 1000;
					int commitCounter_tOracleRow_1 = 0;
				
        java.sql.Statement stmt_tOracleRow_1 = conn_tOracleRow_1.createStatement();
        resourceMap.put("stmt_tOracleRow_1", stmt_tOracleRow_1);

 



/**
 * [tOracleRow_1 begin ] stop
 */
	
	/**
	 * [tOracleRow_1 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

query_tOracleRow_1 = "DELETE FROM BCEC_VCUPSTOTAL WHERE TIEMPOS_ID =  " +context.TIEMPOS_ID;
whetherReject_tOracleRow_1 = false;
globalMap.put("tOracleRow_1_QUERY",query_tOracleRow_1);
try {
		stmt_tOracleRow_1.execute(query_tOracleRow_1);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_1_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_1) {
		
	}
	
		commitCounter_tOracleRow_1++;
		if(commitEvery_tOracleRow_1 <= commitCounter_tOracleRow_1) {
			
			conn_tOracleRow_1.commit();
			
			commitCounter_tOracleRow_1=0;
		}
		

 


	tos_count_tOracleRow_1++;

/**
 * [tOracleRow_1 main ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_1 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

	globalMap.put("tOracleRow_1_NB_LINE", count_tOracleRow_1);
        stmt_tOracleRow_1.close();
        resourceMap.remove("stmt_tOracleRow_1");
    resourceMap.put("statementClosed_tOracleRow_1", true);
		if(commitEvery_tOracleRow_1>commitCounter_tOracleRow_1){

			
			conn_tOracleRow_1.commit();
			
	
			commitCounter_tOracleRow_1=0;
	
		}
			conn_tOracleRow_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
    resourceMap.put("finish_tOracleRow_1", true);

 

ok_Hash.put("tOracleRow_1", true);
end_Hash.put("tOracleRow_1", System.currentTimeMillis());




/**
 * [tOracleRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tHashInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

try {
    if (resourceMap.get("statementClosed_tOracleRow_1") == null) {
            java.sql.Statement stmtToClose_tOracleRow_1 = null;
            if ((stmtToClose_tOracleRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_1")) != null) {
                stmtToClose_tOracleRow_1.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tOracleRow_1") == null){
            java.sql.Connection ctn_tOracleRow_1 = null;
            if((ctn_tOracleRow_1 = (java.sql.Connection)resourceMap.get("conn_tOracleRow_1")) != null){
                try {
                    ctn_tOracleRow_1.close();
                } catch (java.sql.SQLException sqlEx_tOracleRow_1) {
                    String errorMessage_tOracleRow_1 = "failed to close the connection in tOracleRow_1 :" + sqlEx_tOracleRow_1.getMessage();
                    System.err.println(errorMessage_tOracleRow_1);
                }
            }
        }
    }
 



/**
 * [tOracleRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class out6Struct implements routines.system.IPersistableRow<out6Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return null;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return null;
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal VMOD;

				public BigDecimal getVMOD () {
					return this.VMOD;
				}

				public Boolean VMODIsNullable(){
				    return true;
				}
				public Boolean VMODIsKey(){
				    return false;
				}
				public Integer VMODLength(){
				    return null;
				}
				public Integer VMODPrecision(){
				    return null;
				}
				public String VMODDefault(){
				
					return null;
				
				}
				public String VMODComment(){
				
				    return "";
				
				}
				public String VMODPattern(){
				
					return "";
				
				}
				public String VMODOriginalDbColumnName(){
				
					return "VMOD";
				
				}

				
			    public BigDecimal VMPD;

				public BigDecimal getVMPD () {
					return this.VMPD;
				}

				public Boolean VMPDIsNullable(){
				    return true;
				}
				public Boolean VMPDIsKey(){
				    return false;
				}
				public Integer VMPDLength(){
				    return null;
				}
				public Integer VMPDPrecision(){
				    return null;
				}
				public String VMPDDefault(){
				
					return null;
				
				}
				public String VMPDComment(){
				
				    return "";
				
				}
				public String VMPDPattern(){
				
					return "";
				
				}
				public String VMPDOriginalDbColumnName(){
				
					return "VMPD";
				
				}

				
			    public BigDecimal VCI;

				public BigDecimal getVCI () {
					return this.VCI;
				}

				public Boolean VCIIsNullable(){
				    return true;
				}
				public Boolean VCIIsKey(){
				    return false;
				}
				public Integer VCILength(){
				    return null;
				}
				public Integer VCIPrecision(){
				    return null;
				}
				public String VCIDefault(){
				
					return null;
				
				}
				public String VCIComment(){
				
				    return "";
				
				}
				public String VCIPattern(){
				
					return "";
				
				}
				public String VCIOriginalDbColumnName(){
				
					return "VCI";
				
				}

				
			    public java.util.Date FMODIFICACION;

				public java.util.Date getFMODIFICACION () {
					return this.FMODIFICACION;
				}

				public Boolean FMODIFICACIONIsNullable(){
				    return true;
				}
				public Boolean FMODIFICACIONIsKey(){
				    return false;
				}
				public Integer FMODIFICACIONLength(){
				    return null;
				}
				public Integer FMODIFICACIONPrecision(){
				    return null;
				}
				public String FMODIFICACIONDefault(){
				
					return null;
				
				}
				public String FMODIFICACIONComment(){
				
				    return "";
				
				}
				public String FMODIFICACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FMODIFICACIONOriginalDbColumnName(){
				
					return "FMODIFICACION";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out6Struct other = (out6Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out6Struct other) {

		other.ID = this.ID;
	            other.VALOR = this.VALOR;
	            other.VMOD = this.VMOD;
	            other.VMPD = this.VMPD;
	            other.VCI = this.VCI;
	            other.FMODIFICACION = this.FMODIFICACION;
	            
	}

	public void copyKeysDataTo(out6Struct other) {

		other.ID = this.ID;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.VMOD = (BigDecimal) dis.readObject();
					
						this.VMPD = (BigDecimal) dis.readObject();
					
						this.VCI = (BigDecimal) dis.readObject();
					
					this.FMODIFICACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.VMOD = (BigDecimal) dis.readObject();
					
						this.VMPD = (BigDecimal) dis.readObject();
					
						this.VCI = (BigDecimal) dis.readObject();
					
					this.FMODIFICACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VMOD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VMPD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCI);
					
					// java.util.Date
				
						writeDate(this.FMODIFICACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VMOD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VMPD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCI);
					
					// java.util.Date
				
						writeDate(this.FMODIFICACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",VMOD="+String.valueOf(VMOD));
		sb.append(",VMPD="+String.valueOf(VMPD));
		sb.append(",VCI="+String.valueOf(VCI));
		sb.append(",FMODIFICACION="+String.valueOf(FMODIFICACION));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return null;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return null;
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal ANEXOS_ID;

				public BigDecimal getANEXOS_ID () {
					return this.ANEXOS_ID;
				}

				public Boolean ANEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean ANEXOS_IDIsKey(){
				    return false;
				}
				public Integer ANEXOS_IDLength(){
				    return null;
				}
				public Integer ANEXOS_IDPrecision(){
				    return null;
				}
				public String ANEXOS_IDDefault(){
				
					return "";
				
				}
				public String ANEXOS_IDComment(){
				
				    return "";
				
				}
				public String ANEXOS_IDPattern(){
				
					return "";
				
				}
				public String ANEXOS_IDOriginalDbColumnName(){
				
					return "ANEXOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String UORG;

				public String getUORG () {
					return this.UORG;
				}

				public Boolean UORGIsNullable(){
				    return false;
				}
				public Boolean UORGIsKey(){
				    return false;
				}
				public Integer UORGLength(){
				    return null;
				}
				public Integer UORGPrecision(){
				    return null;
				}
				public String UORGDefault(){
				
					return null;
				
				}
				public String UORGComment(){
				
				    return "";
				
				}
				public String UORGPattern(){
				
					return "";
				
				}
				public String UORGOriginalDbColumnName(){
				
					return "UORG";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public String COD_CEBE;

				public String getCOD_CEBE () {
					return this.COD_CEBE;
				}

				public Boolean COD_CEBEIsNullable(){
				    return false;
				}
				public Boolean COD_CEBEIsKey(){
				    return false;
				}
				public Integer COD_CEBELength(){
				    return null;
				}
				public Integer COD_CEBEPrecision(){
				    return null;
				}
				public String COD_CEBEDefault(){
				
					return null;
				
				}
				public String COD_CEBEComment(){
				
				    return "";
				
				}
				public String COD_CEBEPattern(){
				
					return "";
				
				}
				public String COD_CEBEOriginalDbColumnName(){
				
					return "COD_CEBE";
				
				}

				
			    public String CEBE;

				public String getCEBE () {
					return this.CEBE;
				}

				public Boolean CEBEIsNullable(){
				    return false;
				}
				public Boolean CEBEIsKey(){
				    return false;
				}
				public Integer CEBELength(){
				    return null;
				}
				public Integer CEBEPrecision(){
				    return null;
				}
				public String CEBEDefault(){
				
					return null;
				
				}
				public String CEBEComment(){
				
				    return "";
				
				}
				public String CEBEPattern(){
				
					return "";
				
				}
				public String CEBEOriginalDbColumnName(){
				
					return "CEBE";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return false;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return null;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return null;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public String COD_CECO;

				public String getCOD_CECO () {
					return this.COD_CECO;
				}

				public Boolean COD_CECOIsNullable(){
				    return false;
				}
				public Boolean COD_CECOIsKey(){
				    return false;
				}
				public Integer COD_CECOLength(){
				    return null;
				}
				public Integer COD_CECOPrecision(){
				    return null;
				}
				public String COD_CECODefault(){
				
					return null;
				
				}
				public String COD_CECOComment(){
				
				    return "";
				
				}
				public String COD_CECOPattern(){
				
					return "";
				
				}
				public String COD_CECOOriginalDbColumnName(){
				
					return "COD_CECO";
				
				}

				
			    public String CECO;

				public String getCECO () {
					return this.CECO;
				}

				public Boolean CECOIsNullable(){
				    return false;
				}
				public Boolean CECOIsKey(){
				    return false;
				}
				public Integer CECOLength(){
				    return null;
				}
				public Integer CECOPrecision(){
				    return null;
				}
				public String CECODefault(){
				
					return null;
				
				}
				public String CECOComment(){
				
				    return "";
				
				}
				public String CECOPattern(){
				
					return "";
				
				}
				public String CECOOriginalDbColumnName(){
				
					return "CECO";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public String COD_CUPS;

				public String getCOD_CUPS () {
					return this.COD_CUPS;
				}

				public Boolean COD_CUPSIsNullable(){
				    return false;
				}
				public Boolean COD_CUPSIsKey(){
				    return false;
				}
				public Integer COD_CUPSLength(){
				    return null;
				}
				public Integer COD_CUPSPrecision(){
				    return null;
				}
				public String COD_CUPSDefault(){
				
					return null;
				
				}
				public String COD_CUPSComment(){
				
				    return "";
				
				}
				public String COD_CUPSPattern(){
				
					return "";
				
				}
				public String COD_CUPSOriginalDbColumnName(){
				
					return "COD_CUPS";
				
				}

				
			    public String CUPS;

				public String getCUPS () {
					return this.CUPS;
				}

				public Boolean CUPSIsNullable(){
				    return false;
				}
				public Boolean CUPSIsKey(){
				    return false;
				}
				public Integer CUPSLength(){
				    return null;
				}
				public Integer CUPSPrecision(){
				    return null;
				}
				public String CUPSDefault(){
				
					return null;
				
				}
				public String CUPSComment(){
				
				    return "";
				
				}
				public String CUPSPattern(){
				
					return "";
				
				}
				public String CUPSOriginalDbColumnName(){
				
					return "CUPS";
				
				}

				
			    public BigDecimal VCIND;

				public BigDecimal getVCIND () {
					return this.VCIND;
				}

				public Boolean VCINDIsNullable(){
				    return false;
				}
				public Boolean VCINDIsKey(){
				    return false;
				}
				public Integer VCINDLength(){
				    return null;
				}
				public Integer VCINDPrecision(){
				    return null;
				}
				public String VCINDDefault(){
				
					return "";
				
				}
				public String VCINDComment(){
				
				    return "";
				
				}
				public String VCINDPattern(){
				
					return "";
				
				}
				public String VCINDOriginalDbColumnName(){
				
					return "VCIND";
				
				}

				
			    public BigDecimal VTCIND;

				public BigDecimal getVTCIND () {
					return this.VTCIND;
				}

				public Boolean VTCINDIsNullable(){
				    return false;
				}
				public Boolean VTCINDIsKey(){
				    return false;
				}
				public Integer VTCINDLength(){
				    return null;
				}
				public Integer VTCINDPrecision(){
				    return null;
				}
				public String VTCINDDefault(){
				
					return "";
				
				}
				public String VTCINDComment(){
				
				    return "";
				
				}
				public String VTCINDPattern(){
				
					return "";
				
				}
				public String VTCINDOriginalDbColumnName(){
				
					return "VTCIND";
				
				}

				
			    public BigDecimal VMOD;

				public BigDecimal getVMOD () {
					return this.VMOD;
				}

				public Boolean VMODIsNullable(){
				    return true;
				}
				public Boolean VMODIsKey(){
				    return false;
				}
				public Integer VMODLength(){
				    return null;
				}
				public Integer VMODPrecision(){
				    return null;
				}
				public String VMODDefault(){
				
					return null;
				
				}
				public String VMODComment(){
				
				    return "";
				
				}
				public String VMODPattern(){
				
					return "";
				
				}
				public String VMODOriginalDbColumnName(){
				
					return "VMOD";
				
				}

				
			    public BigDecimal VTMOD;

				public BigDecimal getVTMOD () {
					return this.VTMOD;
				}

				public Boolean VTMODIsNullable(){
				    return true;
				}
				public Boolean VTMODIsKey(){
				    return false;
				}
				public Integer VTMODLength(){
				    return null;
				}
				public Integer VTMODPrecision(){
				    return null;
				}
				public String VTMODDefault(){
				
					return "";
				
				}
				public String VTMODComment(){
				
				    return "";
				
				}
				public String VTMODPattern(){
				
					return "";
				
				}
				public String VTMODOriginalDbColumnName(){
				
					return "VTMOD";
				
				}

				
			    public BigDecimal VMPD;

				public BigDecimal getVMPD () {
					return this.VMPD;
				}

				public Boolean VMPDIsNullable(){
				    return true;
				}
				public Boolean VMPDIsKey(){
				    return false;
				}
				public Integer VMPDLength(){
				    return null;
				}
				public Integer VMPDPrecision(){
				    return null;
				}
				public String VMPDDefault(){
				
					return null;
				
				}
				public String VMPDComment(){
				
				    return "";
				
				}
				public String VMPDPattern(){
				
					return "";
				
				}
				public String VMPDOriginalDbColumnName(){
				
					return "VMPD";
				
				}

				
			    public BigDecimal VTMPD;

				public BigDecimal getVTMPD () {
					return this.VTMPD;
				}

				public Boolean VTMPDIsNullable(){
				    return true;
				}
				public Boolean VTMPDIsKey(){
				    return false;
				}
				public Integer VTMPDLength(){
				    return null;
				}
				public Integer VTMPDPrecision(){
				    return null;
				}
				public String VTMPDDefault(){
				
					return null;
				
				}
				public String VTMPDComment(){
				
				    return "";
				
				}
				public String VTMPDPattern(){
				
					return "";
				
				}
				public String VTMPDOriginalDbColumnName(){
				
					return "VTMPD";
				
				}

				
			    public BigDecimal VRE;

				public BigDecimal getVRE () {
					return this.VRE;
				}

				public Boolean VREIsNullable(){
				    return true;
				}
				public Boolean VREIsKey(){
				    return false;
				}
				public Integer VRELength(){
				    return null;
				}
				public Integer VREPrecision(){
				    return null;
				}
				public String VREDefault(){
				
					return null;
				
				}
				public String VREComment(){
				
				    return "";
				
				}
				public String VREPattern(){
				
					return "";
				
				}
				public String VREOriginalDbColumnName(){
				
					return "VRE";
				
				}

				
			    public BigDecimal VTRE;

				public BigDecimal getVTRE () {
					return this.VTRE;
				}

				public Boolean VTREIsNullable(){
				    return true;
				}
				public Boolean VTREIsKey(){
				    return false;
				}
				public Integer VTRELength(){
				    return null;
				}
				public Integer VTREPrecision(){
				    return null;
				}
				public String VTREDefault(){
				
					return null;
				
				}
				public String VTREComment(){
				
				    return "";
				
				}
				public String VTREPattern(){
				
					return "";
				
				}
				public String VTREOriginalDbColumnName(){
				
					return "VTRE";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VTOTAL_ESTANDAR;

				public BigDecimal getVTOTAL_ESTANDAR () {
					return this.VTOTAL_ESTANDAR;
				}

				public Boolean VTOTAL_ESTANDARIsNullable(){
				    return true;
				}
				public Boolean VTOTAL_ESTANDARIsKey(){
				    return false;
				}
				public Integer VTOTAL_ESTANDARLength(){
				    return null;
				}
				public Integer VTOTAL_ESTANDARPrecision(){
				    return null;
				}
				public String VTOTAL_ESTANDARDefault(){
				
					return null;
				
				}
				public String VTOTAL_ESTANDARComment(){
				
				    return "";
				
				}
				public String VTOTAL_ESTANDARPattern(){
				
					return "";
				
				}
				public String VTOTAL_ESTANDAROriginalDbColumnName(){
				
					return "VTOTAL_ESTANDAR";
				
				}

				
			    public BigDecimal TIPO;

				public BigDecimal getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return null;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return null;
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public BigDecimal VMOD_ESTANDAR;

				public BigDecimal getVMOD_ESTANDAR () {
					return this.VMOD_ESTANDAR;
				}

				public Boolean VMOD_ESTANDARIsNullable(){
				    return true;
				}
				public Boolean VMOD_ESTANDARIsKey(){
				    return false;
				}
				public Integer VMOD_ESTANDARLength(){
				    return null;
				}
				public Integer VMOD_ESTANDARPrecision(){
				    return null;
				}
				public String VMOD_ESTANDARDefault(){
				
					return null;
				
				}
				public String VMOD_ESTANDARComment(){
				
				    return "";
				
				}
				public String VMOD_ESTANDARPattern(){
				
					return "";
				
				}
				public String VMOD_ESTANDAROriginalDbColumnName(){
				
					return "VMOD_ESTANDAR";
				
				}

				
			    public BigDecimal VMPD_ESTANDAR;

				public BigDecimal getVMPD_ESTANDAR () {
					return this.VMPD_ESTANDAR;
				}

				public Boolean VMPD_ESTANDARIsNullable(){
				    return true;
				}
				public Boolean VMPD_ESTANDARIsKey(){
				    return false;
				}
				public Integer VMPD_ESTANDARLength(){
				    return null;
				}
				public Integer VMPD_ESTANDARPrecision(){
				    return null;
				}
				public String VMPD_ESTANDARDefault(){
				
					return null;
				
				}
				public String VMPD_ESTANDARComment(){
				
				    return "";
				
				}
				public String VMPD_ESTANDARPattern(){
				
					return "";
				
				}
				public String VMPD_ESTANDAROriginalDbColumnName(){
				
					return "VMPD_ESTANDAR";
				
				}

				
			    public BigDecimal VCIND_ESTANDAR;

				public BigDecimal getVCIND_ESTANDAR () {
					return this.VCIND_ESTANDAR;
				}

				public Boolean VCIND_ESTANDARIsNullable(){
				    return true;
				}
				public Boolean VCIND_ESTANDARIsKey(){
				    return false;
				}
				public Integer VCIND_ESTANDARLength(){
				    return null;
				}
				public Integer VCIND_ESTANDARPrecision(){
				    return null;
				}
				public String VCIND_ESTANDARDefault(){
				
					return null;
				
				}
				public String VCIND_ESTANDARComment(){
				
				    return "";
				
				}
				public String VCIND_ESTANDARPattern(){
				
					return "";
				
				}
				public String VCIND_ESTANDAROriginalDbColumnName(){
				
					return "VCIND_ESTANDAR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.ANEXOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.UORG = readString(dis);
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
					this.COD_CEBE = readString(dis);
					
					this.CEBE = readString(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
					this.COD_CECO = readString(dis);
					
					this.CECO = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.COD_CUPS = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.VCIND = (BigDecimal) dis.readObject();
					
						this.VTCIND = (BigDecimal) dis.readObject();
					
						this.VMOD = (BigDecimal) dis.readObject();
					
						this.VTMOD = (BigDecimal) dis.readObject();
					
						this.VMPD = (BigDecimal) dis.readObject();
					
						this.VTMPD = (BigDecimal) dis.readObject();
					
						this.VRE = (BigDecimal) dis.readObject();
					
						this.VTRE = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VTOTAL_ESTANDAR = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
						this.VMOD_ESTANDAR = (BigDecimal) dis.readObject();
					
						this.VMPD_ESTANDAR = (BigDecimal) dis.readObject();
					
						this.VCIND_ESTANDAR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.ANEXOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.UORG = readString(dis);
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
					this.COD_CEBE = readString(dis);
					
					this.CEBE = readString(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
					this.COD_CECO = readString(dis);
					
					this.CECO = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.COD_CUPS = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.VCIND = (BigDecimal) dis.readObject();
					
						this.VTCIND = (BigDecimal) dis.readObject();
					
						this.VMOD = (BigDecimal) dis.readObject();
					
						this.VTMOD = (BigDecimal) dis.readObject();
					
						this.VMPD = (BigDecimal) dis.readObject();
					
						this.VTMPD = (BigDecimal) dis.readObject();
					
						this.VRE = (BigDecimal) dis.readObject();
					
						this.VTRE = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VTOTAL_ESTANDAR = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
						this.VMOD_ESTANDAR = (BigDecimal) dis.readObject();
					
						this.VMPD_ESTANDAR = (BigDecimal) dis.readObject();
					
						this.VCIND_ESTANDAR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ANEXOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.UORG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// String
				
						writeString(this.COD_CEBE,dos);
					
					// String
				
						writeString(this.CEBE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
					// String
				
						writeString(this.COD_CECO,dos);
					
					// String
				
						writeString(this.CECO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.COD_CUPS,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCIND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTCIND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VMOD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTMOD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VMPD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTMPD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTRE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL_ESTANDAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VMOD_ESTANDAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VMPD_ESTANDAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCIND_ESTANDAR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ANEXOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.UORG,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// String
				
						writeString(this.COD_CEBE,dos);
					
					// String
				
						writeString(this.CEBE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
					// String
				
						writeString(this.COD_CECO,dos);
					
					// String
				
						writeString(this.CECO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.COD_CUPS,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCIND);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTCIND);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VMOD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTMOD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VMPD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTMPD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTRE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL_ESTANDAR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VMOD_ESTANDAR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VMPD_ESTANDAR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCIND_ESTANDAR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",ANEXOS_ID="+String.valueOf(ANEXOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",UORG="+UORG);
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",COD_CEBE="+COD_CEBE);
		sb.append(",CEBE="+CEBE);
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",COD_CECO="+COD_CECO);
		sb.append(",CECO="+CECO);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",COD_CUPS="+COD_CUPS);
		sb.append(",CUPS="+CUPS);
		sb.append(",VCIND="+String.valueOf(VCIND));
		sb.append(",VTCIND="+String.valueOf(VTCIND));
		sb.append(",VMOD="+String.valueOf(VMOD));
		sb.append(",VTMOD="+String.valueOf(VTMOD));
		sb.append(",VMPD="+String.valueOf(VMPD));
		sb.append(",VTMPD="+String.valueOf(VTMPD));
		sb.append(",VRE="+String.valueOf(VRE));
		sb.append(",VTRE="+String.valueOf(VTRE));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VTOTAL_ESTANDAR="+String.valueOf(VTOTAL_ESTANDAR));
		sb.append(",TIPO="+String.valueOf(TIPO));
		sb.append(",VMOD_ESTANDAR="+String.valueOf(VMOD_ESTANDAR));
		sb.append(",VMPD_ESTANDAR="+String.valueOf(VMPD_ESTANDAR));
		sb.append(",VCIND_ESTANDAR="+String.valueOf(VCIND_ESTANDAR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return null;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return null;
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal ANEXOS_ID;

				public BigDecimal getANEXOS_ID () {
					return this.ANEXOS_ID;
				}

				public Boolean ANEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean ANEXOS_IDIsKey(){
				    return false;
				}
				public Integer ANEXOS_IDLength(){
				    return null;
				}
				public Integer ANEXOS_IDPrecision(){
				    return null;
				}
				public String ANEXOS_IDDefault(){
				
					return "";
				
				}
				public String ANEXOS_IDComment(){
				
				    return "";
				
				}
				public String ANEXOS_IDPattern(){
				
					return "";
				
				}
				public String ANEXOS_IDOriginalDbColumnName(){
				
					return "ANEXOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String UORG;

				public String getUORG () {
					return this.UORG;
				}

				public Boolean UORGIsNullable(){
				    return false;
				}
				public Boolean UORGIsKey(){
				    return false;
				}
				public Integer UORGLength(){
				    return null;
				}
				public Integer UORGPrecision(){
				    return null;
				}
				public String UORGDefault(){
				
					return null;
				
				}
				public String UORGComment(){
				
				    return "";
				
				}
				public String UORGPattern(){
				
					return "";
				
				}
				public String UORGOriginalDbColumnName(){
				
					return "UORG";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public String COD_CEBE;

				public String getCOD_CEBE () {
					return this.COD_CEBE;
				}

				public Boolean COD_CEBEIsNullable(){
				    return false;
				}
				public Boolean COD_CEBEIsKey(){
				    return false;
				}
				public Integer COD_CEBELength(){
				    return null;
				}
				public Integer COD_CEBEPrecision(){
				    return null;
				}
				public String COD_CEBEDefault(){
				
					return null;
				
				}
				public String COD_CEBEComment(){
				
				    return "";
				
				}
				public String COD_CEBEPattern(){
				
					return "";
				
				}
				public String COD_CEBEOriginalDbColumnName(){
				
					return "COD_CEBE";
				
				}

				
			    public String CEBE;

				public String getCEBE () {
					return this.CEBE;
				}

				public Boolean CEBEIsNullable(){
				    return false;
				}
				public Boolean CEBEIsKey(){
				    return false;
				}
				public Integer CEBELength(){
				    return null;
				}
				public Integer CEBEPrecision(){
				    return null;
				}
				public String CEBEDefault(){
				
					return null;
				
				}
				public String CEBEComment(){
				
				    return "";
				
				}
				public String CEBEPattern(){
				
					return "";
				
				}
				public String CEBEOriginalDbColumnName(){
				
					return "CEBE";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return false;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return null;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return null;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public String COD_CECO;

				public String getCOD_CECO () {
					return this.COD_CECO;
				}

				public Boolean COD_CECOIsNullable(){
				    return false;
				}
				public Boolean COD_CECOIsKey(){
				    return false;
				}
				public Integer COD_CECOLength(){
				    return null;
				}
				public Integer COD_CECOPrecision(){
				    return null;
				}
				public String COD_CECODefault(){
				
					return null;
				
				}
				public String COD_CECOComment(){
				
				    return "";
				
				}
				public String COD_CECOPattern(){
				
					return "";
				
				}
				public String COD_CECOOriginalDbColumnName(){
				
					return "COD_CECO";
				
				}

				
			    public String CECO;

				public String getCECO () {
					return this.CECO;
				}

				public Boolean CECOIsNullable(){
				    return false;
				}
				public Boolean CECOIsKey(){
				    return false;
				}
				public Integer CECOLength(){
				    return null;
				}
				public Integer CECOPrecision(){
				    return null;
				}
				public String CECODefault(){
				
					return null;
				
				}
				public String CECOComment(){
				
				    return "";
				
				}
				public String CECOPattern(){
				
					return "";
				
				}
				public String CECOOriginalDbColumnName(){
				
					return "CECO";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public String COD_CUPS;

				public String getCOD_CUPS () {
					return this.COD_CUPS;
				}

				public Boolean COD_CUPSIsNullable(){
				    return false;
				}
				public Boolean COD_CUPSIsKey(){
				    return false;
				}
				public Integer COD_CUPSLength(){
				    return null;
				}
				public Integer COD_CUPSPrecision(){
				    return null;
				}
				public String COD_CUPSDefault(){
				
					return null;
				
				}
				public String COD_CUPSComment(){
				
				    return "";
				
				}
				public String COD_CUPSPattern(){
				
					return "";
				
				}
				public String COD_CUPSOriginalDbColumnName(){
				
					return "COD_CUPS";
				
				}

				
			    public String CUPS;

				public String getCUPS () {
					return this.CUPS;
				}

				public Boolean CUPSIsNullable(){
				    return false;
				}
				public Boolean CUPSIsKey(){
				    return false;
				}
				public Integer CUPSLength(){
				    return null;
				}
				public Integer CUPSPrecision(){
				    return null;
				}
				public String CUPSDefault(){
				
					return null;
				
				}
				public String CUPSComment(){
				
				    return "";
				
				}
				public String CUPSPattern(){
				
					return "";
				
				}
				public String CUPSOriginalDbColumnName(){
				
					return "CUPS";
				
				}

				
			    public BigDecimal VCIND;

				public BigDecimal getVCIND () {
					return this.VCIND;
				}

				public Boolean VCINDIsNullable(){
				    return false;
				}
				public Boolean VCINDIsKey(){
				    return false;
				}
				public Integer VCINDLength(){
				    return null;
				}
				public Integer VCINDPrecision(){
				    return null;
				}
				public String VCINDDefault(){
				
					return "";
				
				}
				public String VCINDComment(){
				
				    return "";
				
				}
				public String VCINDPattern(){
				
					return "";
				
				}
				public String VCINDOriginalDbColumnName(){
				
					return "VCIND";
				
				}

				
			    public BigDecimal VTCIND;

				public BigDecimal getVTCIND () {
					return this.VTCIND;
				}

				public Boolean VTCINDIsNullable(){
				    return false;
				}
				public Boolean VTCINDIsKey(){
				    return false;
				}
				public Integer VTCINDLength(){
				    return null;
				}
				public Integer VTCINDPrecision(){
				    return null;
				}
				public String VTCINDDefault(){
				
					return "";
				
				}
				public String VTCINDComment(){
				
				    return "";
				
				}
				public String VTCINDPattern(){
				
					return "";
				
				}
				public String VTCINDOriginalDbColumnName(){
				
					return "VTCIND";
				
				}

				
			    public BigDecimal VMOD;

				public BigDecimal getVMOD () {
					return this.VMOD;
				}

				public Boolean VMODIsNullable(){
				    return true;
				}
				public Boolean VMODIsKey(){
				    return false;
				}
				public Integer VMODLength(){
				    return null;
				}
				public Integer VMODPrecision(){
				    return null;
				}
				public String VMODDefault(){
				
					return null;
				
				}
				public String VMODComment(){
				
				    return "";
				
				}
				public String VMODPattern(){
				
					return "";
				
				}
				public String VMODOriginalDbColumnName(){
				
					return "VMOD";
				
				}

				
			    public BigDecimal VTMOD;

				public BigDecimal getVTMOD () {
					return this.VTMOD;
				}

				public Boolean VTMODIsNullable(){
				    return true;
				}
				public Boolean VTMODIsKey(){
				    return false;
				}
				public Integer VTMODLength(){
				    return null;
				}
				public Integer VTMODPrecision(){
				    return null;
				}
				public String VTMODDefault(){
				
					return "";
				
				}
				public String VTMODComment(){
				
				    return "";
				
				}
				public String VTMODPattern(){
				
					return "";
				
				}
				public String VTMODOriginalDbColumnName(){
				
					return "VTMOD";
				
				}

				
			    public BigDecimal VMPD;

				public BigDecimal getVMPD () {
					return this.VMPD;
				}

				public Boolean VMPDIsNullable(){
				    return true;
				}
				public Boolean VMPDIsKey(){
				    return false;
				}
				public Integer VMPDLength(){
				    return null;
				}
				public Integer VMPDPrecision(){
				    return null;
				}
				public String VMPDDefault(){
				
					return null;
				
				}
				public String VMPDComment(){
				
				    return "";
				
				}
				public String VMPDPattern(){
				
					return "";
				
				}
				public String VMPDOriginalDbColumnName(){
				
					return "VMPD";
				
				}

				
			    public BigDecimal VTMPD;

				public BigDecimal getVTMPD () {
					return this.VTMPD;
				}

				public Boolean VTMPDIsNullable(){
				    return true;
				}
				public Boolean VTMPDIsKey(){
				    return false;
				}
				public Integer VTMPDLength(){
				    return null;
				}
				public Integer VTMPDPrecision(){
				    return null;
				}
				public String VTMPDDefault(){
				
					return null;
				
				}
				public String VTMPDComment(){
				
				    return "";
				
				}
				public String VTMPDPattern(){
				
					return "";
				
				}
				public String VTMPDOriginalDbColumnName(){
				
					return "VTMPD";
				
				}

				
			    public BigDecimal VRE;

				public BigDecimal getVRE () {
					return this.VRE;
				}

				public Boolean VREIsNullable(){
				    return true;
				}
				public Boolean VREIsKey(){
				    return false;
				}
				public Integer VRELength(){
				    return null;
				}
				public Integer VREPrecision(){
				    return null;
				}
				public String VREDefault(){
				
					return null;
				
				}
				public String VREComment(){
				
				    return "";
				
				}
				public String VREPattern(){
				
					return "";
				
				}
				public String VREOriginalDbColumnName(){
				
					return "VRE";
				
				}

				
			    public BigDecimal VTRE;

				public BigDecimal getVTRE () {
					return this.VTRE;
				}

				public Boolean VTREIsNullable(){
				    return true;
				}
				public Boolean VTREIsKey(){
				    return false;
				}
				public Integer VTRELength(){
				    return null;
				}
				public Integer VTREPrecision(){
				    return null;
				}
				public String VTREDefault(){
				
					return null;
				
				}
				public String VTREComment(){
				
				    return "";
				
				}
				public String VTREPattern(){
				
					return "";
				
				}
				public String VTREOriginalDbColumnName(){
				
					return "VTRE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.ANEXOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.UORG = readString(dis);
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
					this.COD_CEBE = readString(dis);
					
					this.CEBE = readString(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
					this.COD_CECO = readString(dis);
					
					this.CECO = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.COD_CUPS = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.VCIND = (BigDecimal) dis.readObject();
					
						this.VTCIND = (BigDecimal) dis.readObject();
					
						this.VMOD = (BigDecimal) dis.readObject();
					
						this.VTMOD = (BigDecimal) dis.readObject();
					
						this.VMPD = (BigDecimal) dis.readObject();
					
						this.VTMPD = (BigDecimal) dis.readObject();
					
						this.VRE = (BigDecimal) dis.readObject();
					
						this.VTRE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.ANEXOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.UORG = readString(dis);
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
					this.COD_CEBE = readString(dis);
					
					this.CEBE = readString(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
					this.COD_CECO = readString(dis);
					
					this.CECO = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.COD_CUPS = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.VCIND = (BigDecimal) dis.readObject();
					
						this.VTCIND = (BigDecimal) dis.readObject();
					
						this.VMOD = (BigDecimal) dis.readObject();
					
						this.VTMOD = (BigDecimal) dis.readObject();
					
						this.VMPD = (BigDecimal) dis.readObject();
					
						this.VTMPD = (BigDecimal) dis.readObject();
					
						this.VRE = (BigDecimal) dis.readObject();
					
						this.VTRE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ANEXOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.UORG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// String
				
						writeString(this.COD_CEBE,dos);
					
					// String
				
						writeString(this.CEBE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
					// String
				
						writeString(this.COD_CECO,dos);
					
					// String
				
						writeString(this.CECO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.COD_CUPS,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCIND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTCIND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VMOD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTMOD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VMPD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTMPD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTRE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ANEXOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.UORG,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// String
				
						writeString(this.COD_CEBE,dos);
					
					// String
				
						writeString(this.CEBE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
					// String
				
						writeString(this.COD_CECO,dos);
					
					// String
				
						writeString(this.CECO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.COD_CUPS,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCIND);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTCIND);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VMOD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTMOD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VMPD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTMPD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTRE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",ANEXOS_ID="+String.valueOf(ANEXOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",UORG="+UORG);
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",COD_CEBE="+COD_CEBE);
		sb.append(",CEBE="+CEBE);
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",COD_CECO="+COD_CECO);
		sb.append(",CECO="+CECO);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",COD_CUPS="+COD_CUPS);
		sb.append(",CUPS="+CUPS);
		sb.append(",VCIND="+String.valueOf(VCIND));
		sb.append(",VTCIND="+String.valueOf(VTCIND));
		sb.append(",VMOD="+String.valueOf(VMOD));
		sb.append(",VTMOD="+String.valueOf(VTMOD));
		sb.append(",VMPD="+String.valueOf(VMPD));
		sb.append(",VTMPD="+String.valueOf(VTMPD));
		sb.append(",VRE="+String.valueOf(VRE));
		sb.append(",VTRE="+String.valueOf(VTRE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public BigDecimal ANEXOS_ID;

				public BigDecimal getANEXOS_ID () {
					return this.ANEXOS_ID;
				}

				public Boolean ANEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean ANEXOS_IDIsKey(){
				    return false;
				}
				public Integer ANEXOS_IDLength(){
				    return null;
				}
				public Integer ANEXOS_IDPrecision(){
				    return null;
				}
				public String ANEXOS_IDDefault(){
				
					return "";
				
				}
				public String ANEXOS_IDComment(){
				
				    return "";
				
				}
				public String ANEXOS_IDPattern(){
				
					return "";
				
				}
				public String ANEXOS_IDOriginalDbColumnName(){
				
					return "ANEXOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String UORG;

				public String getUORG () {
					return this.UORG;
				}

				public Boolean UORGIsNullable(){
				    return false;
				}
				public Boolean UORGIsKey(){
				    return false;
				}
				public Integer UORGLength(){
				    return null;
				}
				public Integer UORGPrecision(){
				    return null;
				}
				public String UORGDefault(){
				
					return null;
				
				}
				public String UORGComment(){
				
				    return "";
				
				}
				public String UORGPattern(){
				
					return "";
				
				}
				public String UORGOriginalDbColumnName(){
				
					return "UORG";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public String CEBE_COD;

				public String getCEBE_COD () {
					return this.CEBE_COD;
				}

				public Boolean CEBE_CODIsNullable(){
				    return false;
				}
				public Boolean CEBE_CODIsKey(){
				    return false;
				}
				public Integer CEBE_CODLength(){
				    return null;
				}
				public Integer CEBE_CODPrecision(){
				    return null;
				}
				public String CEBE_CODDefault(){
				
					return null;
				
				}
				public String CEBE_CODComment(){
				
				    return "";
				
				}
				public String CEBE_CODPattern(){
				
					return "";
				
				}
				public String CEBE_CODOriginalDbColumnName(){
				
					return "CEBE_COD";
				
				}

				
			    public String CEBE;

				public String getCEBE () {
					return this.CEBE;
				}

				public Boolean CEBEIsNullable(){
				    return false;
				}
				public Boolean CEBEIsKey(){
				    return false;
				}
				public Integer CEBELength(){
				    return null;
				}
				public Integer CEBEPrecision(){
				    return null;
				}
				public String CEBEDefault(){
				
					return null;
				
				}
				public String CEBEComment(){
				
				    return "";
				
				}
				public String CEBEPattern(){
				
					return "";
				
				}
				public String CEBEOriginalDbColumnName(){
				
					return "CEBE";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return false;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return null;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return null;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public String CECO_COD;

				public String getCECO_COD () {
					return this.CECO_COD;
				}

				public Boolean CECO_CODIsNullable(){
				    return false;
				}
				public Boolean CECO_CODIsKey(){
				    return false;
				}
				public Integer CECO_CODLength(){
				    return null;
				}
				public Integer CECO_CODPrecision(){
				    return null;
				}
				public String CECO_CODDefault(){
				
					return null;
				
				}
				public String CECO_CODComment(){
				
				    return "";
				
				}
				public String CECO_CODPattern(){
				
					return "";
				
				}
				public String CECO_CODOriginalDbColumnName(){
				
					return "CECO_COD";
				
				}

				
			    public String CECO;

				public String getCECO () {
					return this.CECO;
				}

				public Boolean CECOIsNullable(){
				    return false;
				}
				public Boolean CECOIsKey(){
				    return false;
				}
				public Integer CECOLength(){
				    return null;
				}
				public Integer CECOPrecision(){
				    return null;
				}
				public String CECODefault(){
				
					return null;
				
				}
				public String CECOComment(){
				
				    return "";
				
				}
				public String CECOPattern(){
				
					return "";
				
				}
				public String CECOOriginalDbColumnName(){
				
					return "CECO";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public String CUPS_COD;

				public String getCUPS_COD () {
					return this.CUPS_COD;
				}

				public Boolean CUPS_CODIsNullable(){
				    return false;
				}
				public Boolean CUPS_CODIsKey(){
				    return false;
				}
				public Integer CUPS_CODLength(){
				    return null;
				}
				public Integer CUPS_CODPrecision(){
				    return null;
				}
				public String CUPS_CODDefault(){
				
					return null;
				
				}
				public String CUPS_CODComment(){
				
				    return "";
				
				}
				public String CUPS_CODPattern(){
				
					return "";
				
				}
				public String CUPS_CODOriginalDbColumnName(){
				
					return "CUPS_COD";
				
				}

				
			    public String CUPS;

				public String getCUPS () {
					return this.CUPS;
				}

				public Boolean CUPSIsNullable(){
				    return false;
				}
				public Boolean CUPSIsKey(){
				    return false;
				}
				public Integer CUPSLength(){
				    return null;
				}
				public Integer CUPSPrecision(){
				    return null;
				}
				public String CUPSDefault(){
				
					return null;
				
				}
				public String CUPSComment(){
				
				    return "";
				
				}
				public String CUPSPattern(){
				
					return "";
				
				}
				public String CUPSOriginalDbColumnName(){
				
					return "CUPS";
				
				}

				
			    public BigDecimal VCIND;

				public BigDecimal getVCIND () {
					return this.VCIND;
				}

				public Boolean VCINDIsNullable(){
				    return false;
				}
				public Boolean VCINDIsKey(){
				    return false;
				}
				public Integer VCINDLength(){
				    return null;
				}
				public Integer VCINDPrecision(){
				    return null;
				}
				public String VCINDDefault(){
				
					return "";
				
				}
				public String VCINDComment(){
				
				    return "";
				
				}
				public String VCINDPattern(){
				
					return "";
				
				}
				public String VCINDOriginalDbColumnName(){
				
					return "VCIND";
				
				}

				
			    public BigDecimal VTCIND;

				public BigDecimal getVTCIND () {
					return this.VTCIND;
				}

				public Boolean VTCINDIsNullable(){
				    return false;
				}
				public Boolean VTCINDIsKey(){
				    return false;
				}
				public Integer VTCINDLength(){
				    return null;
				}
				public Integer VTCINDPrecision(){
				    return null;
				}
				public String VTCINDDefault(){
				
					return "";
				
				}
				public String VTCINDComment(){
				
				    return "";
				
				}
				public String VTCINDPattern(){
				
					return "";
				
				}
				public String VTCINDOriginalDbColumnName(){
				
					return "VTCIND";
				
				}

				
			    public BigDecimal VMOD;

				public BigDecimal getVMOD () {
					return this.VMOD;
				}

				public Boolean VMODIsNullable(){
				    return true;
				}
				public Boolean VMODIsKey(){
				    return false;
				}
				public Integer VMODLength(){
				    return null;
				}
				public Integer VMODPrecision(){
				    return null;
				}
				public String VMODDefault(){
				
					return null;
				
				}
				public String VMODComment(){
				
				    return "";
				
				}
				public String VMODPattern(){
				
					return "";
				
				}
				public String VMODOriginalDbColumnName(){
				
					return "VMOD";
				
				}

				
			    public BigDecimal VTMOD;

				public BigDecimal getVTMOD () {
					return this.VTMOD;
				}

				public Boolean VTMODIsNullable(){
				    return true;
				}
				public Boolean VTMODIsKey(){
				    return false;
				}
				public Integer VTMODLength(){
				    return null;
				}
				public Integer VTMODPrecision(){
				    return null;
				}
				public String VTMODDefault(){
				
					return "";
				
				}
				public String VTMODComment(){
				
				    return "";
				
				}
				public String VTMODPattern(){
				
					return "";
				
				}
				public String VTMODOriginalDbColumnName(){
				
					return "VTMOD";
				
				}

				
			    public BigDecimal VMPD;

				public BigDecimal getVMPD () {
					return this.VMPD;
				}

				public Boolean VMPDIsNullable(){
				    return true;
				}
				public Boolean VMPDIsKey(){
				    return false;
				}
				public Integer VMPDLength(){
				    return null;
				}
				public Integer VMPDPrecision(){
				    return null;
				}
				public String VMPDDefault(){
				
					return null;
				
				}
				public String VMPDComment(){
				
				    return "";
				
				}
				public String VMPDPattern(){
				
					return "";
				
				}
				public String VMPDOriginalDbColumnName(){
				
					return "VMPD";
				
				}

				
			    public BigDecimal VTMPD;

				public BigDecimal getVTMPD () {
					return this.VTMPD;
				}

				public Boolean VTMPDIsNullable(){
				    return true;
				}
				public Boolean VTMPDIsKey(){
				    return false;
				}
				public Integer VTMPDLength(){
				    return null;
				}
				public Integer VTMPDPrecision(){
				    return null;
				}
				public String VTMPDDefault(){
				
					return null;
				
				}
				public String VTMPDComment(){
				
				    return "";
				
				}
				public String VTMPDPattern(){
				
					return "";
				
				}
				public String VTMPDOriginalDbColumnName(){
				
					return "VTMPD";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ANEXOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.UORG = readString(dis);
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
					this.CEBE_COD = readString(dis);
					
					this.CEBE = readString(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
					this.CECO_COD = readString(dis);
					
					this.CECO = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.CUPS_COD = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.VCIND = (BigDecimal) dis.readObject();
					
						this.VTCIND = (BigDecimal) dis.readObject();
					
						this.VMOD = (BigDecimal) dis.readObject();
					
						this.VTMOD = (BigDecimal) dis.readObject();
					
						this.VMPD = (BigDecimal) dis.readObject();
					
						this.VTMPD = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ANEXOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.UORG = readString(dis);
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
					this.CEBE_COD = readString(dis);
					
					this.CEBE = readString(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
					this.CECO_COD = readString(dis);
					
					this.CECO = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.CUPS_COD = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.VCIND = (BigDecimal) dis.readObject();
					
						this.VTCIND = (BigDecimal) dis.readObject();
					
						this.VMOD = (BigDecimal) dis.readObject();
					
						this.VTMOD = (BigDecimal) dis.readObject();
					
						this.VMPD = (BigDecimal) dis.readObject();
					
						this.VTMPD = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ANEXOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.UORG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// String
				
						writeString(this.CEBE_COD,dos);
					
					// String
				
						writeString(this.CEBE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
					// String
				
						writeString(this.CECO_COD,dos);
					
					// String
				
						writeString(this.CECO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.CUPS_COD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCIND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTCIND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VMOD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTMOD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VMPD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTMPD);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ANEXOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.UORG,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// String
				
						writeString(this.CEBE_COD,dos);
					
					// String
				
						writeString(this.CEBE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
					// String
				
						writeString(this.CECO_COD,dos);
					
					// String
				
						writeString(this.CECO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.CUPS_COD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCIND);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTCIND);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VMOD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTMOD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VMPD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTMPD);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANEXOS_ID="+String.valueOf(ANEXOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",UORG="+UORG);
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CEBE_COD="+CEBE_COD);
		sb.append(",CEBE="+CEBE);
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",CECO_COD="+CECO_COD);
		sb.append(",CECO="+CECO);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",CUPS_COD="+CUPS_COD);
		sb.append(",CUPS="+CUPS);
		sb.append(",VCIND="+String.valueOf(VCIND));
		sb.append(",VTCIND="+String.valueOf(VTCIND));
		sb.append(",VMOD="+String.valueOf(VMOD));
		sb.append(",VTMOD="+String.valueOf(VTMOD));
		sb.append(",VMPD="+String.valueOf(VMPD));
		sb.append(",VTMPD="+String.valueOf(VTMPD));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public BigDecimal ANEXOS_ID;

				public BigDecimal getANEXOS_ID () {
					return this.ANEXOS_ID;
				}

				public Boolean ANEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean ANEXOS_IDIsKey(){
				    return false;
				}
				public Integer ANEXOS_IDLength(){
				    return null;
				}
				public Integer ANEXOS_IDPrecision(){
				    return null;
				}
				public String ANEXOS_IDDefault(){
				
					return "";
				
				}
				public String ANEXOS_IDComment(){
				
				    return "";
				
				}
				public String ANEXOS_IDPattern(){
				
					return "";
				
				}
				public String ANEXOS_IDOriginalDbColumnName(){
				
					return "ANEXOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String UORG;

				public String getUORG () {
					return this.UORG;
				}

				public Boolean UORGIsNullable(){
				    return false;
				}
				public Boolean UORGIsKey(){
				    return false;
				}
				public Integer UORGLength(){
				    return null;
				}
				public Integer UORGPrecision(){
				    return null;
				}
				public String UORGDefault(){
				
					return null;
				
				}
				public String UORGComment(){
				
				    return "";
				
				}
				public String UORGPattern(){
				
					return "";
				
				}
				public String UORGOriginalDbColumnName(){
				
					return "UORG";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public String CEBE_COD;

				public String getCEBE_COD () {
					return this.CEBE_COD;
				}

				public Boolean CEBE_CODIsNullable(){
				    return false;
				}
				public Boolean CEBE_CODIsKey(){
				    return false;
				}
				public Integer CEBE_CODLength(){
				    return null;
				}
				public Integer CEBE_CODPrecision(){
				    return null;
				}
				public String CEBE_CODDefault(){
				
					return null;
				
				}
				public String CEBE_CODComment(){
				
				    return "";
				
				}
				public String CEBE_CODPattern(){
				
					return "";
				
				}
				public String CEBE_CODOriginalDbColumnName(){
				
					return "CEBE_COD";
				
				}

				
			    public String CEBE;

				public String getCEBE () {
					return this.CEBE;
				}

				public Boolean CEBEIsNullable(){
				    return false;
				}
				public Boolean CEBEIsKey(){
				    return false;
				}
				public Integer CEBELength(){
				    return null;
				}
				public Integer CEBEPrecision(){
				    return null;
				}
				public String CEBEDefault(){
				
					return null;
				
				}
				public String CEBEComment(){
				
				    return "";
				
				}
				public String CEBEPattern(){
				
					return "";
				
				}
				public String CEBEOriginalDbColumnName(){
				
					return "CEBE";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return false;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return null;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return null;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public String CECO_COD;

				public String getCECO_COD () {
					return this.CECO_COD;
				}

				public Boolean CECO_CODIsNullable(){
				    return false;
				}
				public Boolean CECO_CODIsKey(){
				    return false;
				}
				public Integer CECO_CODLength(){
				    return null;
				}
				public Integer CECO_CODPrecision(){
				    return null;
				}
				public String CECO_CODDefault(){
				
					return null;
				
				}
				public String CECO_CODComment(){
				
				    return "";
				
				}
				public String CECO_CODPattern(){
				
					return "";
				
				}
				public String CECO_CODOriginalDbColumnName(){
				
					return "CECO_COD";
				
				}

				
			    public String CECO;

				public String getCECO () {
					return this.CECO;
				}

				public Boolean CECOIsNullable(){
				    return false;
				}
				public Boolean CECOIsKey(){
				    return false;
				}
				public Integer CECOLength(){
				    return null;
				}
				public Integer CECOPrecision(){
				    return null;
				}
				public String CECODefault(){
				
					return null;
				
				}
				public String CECOComment(){
				
				    return "";
				
				}
				public String CECOPattern(){
				
					return "";
				
				}
				public String CECOOriginalDbColumnName(){
				
					return "CECO";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public String CUPS_COD;

				public String getCUPS_COD () {
					return this.CUPS_COD;
				}

				public Boolean CUPS_CODIsNullable(){
				    return false;
				}
				public Boolean CUPS_CODIsKey(){
				    return false;
				}
				public Integer CUPS_CODLength(){
				    return null;
				}
				public Integer CUPS_CODPrecision(){
				    return null;
				}
				public String CUPS_CODDefault(){
				
					return null;
				
				}
				public String CUPS_CODComment(){
				
				    return "";
				
				}
				public String CUPS_CODPattern(){
				
					return "";
				
				}
				public String CUPS_CODOriginalDbColumnName(){
				
					return "CUPS_COD";
				
				}

				
			    public String CUPS;

				public String getCUPS () {
					return this.CUPS;
				}

				public Boolean CUPSIsNullable(){
				    return false;
				}
				public Boolean CUPSIsKey(){
				    return false;
				}
				public Integer CUPSLength(){
				    return null;
				}
				public Integer CUPSPrecision(){
				    return null;
				}
				public String CUPSDefault(){
				
					return null;
				
				}
				public String CUPSComment(){
				
				    return "";
				
				}
				public String CUPSPattern(){
				
					return "";
				
				}
				public String CUPSOriginalDbColumnName(){
				
					return "CUPS";
				
				}

				
			    public BigDecimal VCIND;

				public BigDecimal getVCIND () {
					return this.VCIND;
				}

				public Boolean VCINDIsNullable(){
				    return false;
				}
				public Boolean VCINDIsKey(){
				    return false;
				}
				public Integer VCINDLength(){
				    return null;
				}
				public Integer VCINDPrecision(){
				    return null;
				}
				public String VCINDDefault(){
				
					return "";
				
				}
				public String VCINDComment(){
				
				    return "";
				
				}
				public String VCINDPattern(){
				
					return "";
				
				}
				public String VCINDOriginalDbColumnName(){
				
					return "VCIND";
				
				}

				
			    public BigDecimal VTCIND;

				public BigDecimal getVTCIND () {
					return this.VTCIND;
				}

				public Boolean VTCINDIsNullable(){
				    return false;
				}
				public Boolean VTCINDIsKey(){
				    return false;
				}
				public Integer VTCINDLength(){
				    return null;
				}
				public Integer VTCINDPrecision(){
				    return null;
				}
				public String VTCINDDefault(){
				
					return "";
				
				}
				public String VTCINDComment(){
				
				    return "";
				
				}
				public String VTCINDPattern(){
				
					return "";
				
				}
				public String VTCINDOriginalDbColumnName(){
				
					return "VTCIND";
				
				}

				
			    public BigDecimal VMOD;

				public BigDecimal getVMOD () {
					return this.VMOD;
				}

				public Boolean VMODIsNullable(){
				    return true;
				}
				public Boolean VMODIsKey(){
				    return false;
				}
				public Integer VMODLength(){
				    return null;
				}
				public Integer VMODPrecision(){
				    return null;
				}
				public String VMODDefault(){
				
					return null;
				
				}
				public String VMODComment(){
				
				    return "";
				
				}
				public String VMODPattern(){
				
					return "";
				
				}
				public String VMODOriginalDbColumnName(){
				
					return "VMOD";
				
				}

				
			    public BigDecimal VTMOD;

				public BigDecimal getVTMOD () {
					return this.VTMOD;
				}

				public Boolean VTMODIsNullable(){
				    return true;
				}
				public Boolean VTMODIsKey(){
				    return false;
				}
				public Integer VTMODLength(){
				    return null;
				}
				public Integer VTMODPrecision(){
				    return null;
				}
				public String VTMODDefault(){
				
					return "";
				
				}
				public String VTMODComment(){
				
				    return "";
				
				}
				public String VTMODPattern(){
				
					return "";
				
				}
				public String VTMODOriginalDbColumnName(){
				
					return "VTMOD";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ANEXOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.UORG = readString(dis);
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
					this.CEBE_COD = readString(dis);
					
					this.CEBE = readString(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
					this.CECO_COD = readString(dis);
					
					this.CECO = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.CUPS_COD = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.VCIND = (BigDecimal) dis.readObject();
					
						this.VTCIND = (BigDecimal) dis.readObject();
					
						this.VMOD = (BigDecimal) dis.readObject();
					
						this.VTMOD = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ANEXOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.UORG = readString(dis);
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
					this.CEBE_COD = readString(dis);
					
					this.CEBE = readString(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
					this.CECO_COD = readString(dis);
					
					this.CECO = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.CUPS_COD = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.VCIND = (BigDecimal) dis.readObject();
					
						this.VTCIND = (BigDecimal) dis.readObject();
					
						this.VMOD = (BigDecimal) dis.readObject();
					
						this.VTMOD = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ANEXOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.UORG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// String
				
						writeString(this.CEBE_COD,dos);
					
					// String
				
						writeString(this.CEBE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
					// String
				
						writeString(this.CECO_COD,dos);
					
					// String
				
						writeString(this.CECO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.CUPS_COD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCIND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTCIND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VMOD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTMOD);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ANEXOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.UORG,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// String
				
						writeString(this.CEBE_COD,dos);
					
					// String
				
						writeString(this.CEBE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
					// String
				
						writeString(this.CECO_COD,dos);
					
					// String
				
						writeString(this.CECO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.CUPS_COD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCIND);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTCIND);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VMOD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTMOD);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANEXOS_ID="+String.valueOf(ANEXOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",UORG="+UORG);
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CEBE_COD="+CEBE_COD);
		sb.append(",CEBE="+CEBE);
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",CECO_COD="+CECO_COD);
		sb.append(",CECO="+CECO);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",CUPS_COD="+CUPS_COD);
		sb.append(",CUPS="+CUPS);
		sb.append(",VCIND="+String.valueOf(VCIND));
		sb.append(",VTCIND="+String.valueOf(VTCIND));
		sb.append(",VMOD="+String.valueOf(VMOD));
		sb.append(",VTMOD="+String.valueOf(VTMOD));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CIStruct implements routines.system.IPersistableRow<CIStruct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public BigDecimal ANEXOS_ID;

				public BigDecimal getANEXOS_ID () {
					return this.ANEXOS_ID;
				}

				public Boolean ANEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean ANEXOS_IDIsKey(){
				    return false;
				}
				public Integer ANEXOS_IDLength(){
				    return null;
				}
				public Integer ANEXOS_IDPrecision(){
				    return null;
				}
				public String ANEXOS_IDDefault(){
				
					return "";
				
				}
				public String ANEXOS_IDComment(){
				
				    return "";
				
				}
				public String ANEXOS_IDPattern(){
				
					return "";
				
				}
				public String ANEXOS_IDOriginalDbColumnName(){
				
					return "ANEXOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String UORG;

				public String getUORG () {
					return this.UORG;
				}

				public Boolean UORGIsNullable(){
				    return false;
				}
				public Boolean UORGIsKey(){
				    return false;
				}
				public Integer UORGLength(){
				    return null;
				}
				public Integer UORGPrecision(){
				    return null;
				}
				public String UORGDefault(){
				
					return null;
				
				}
				public String UORGComment(){
				
				    return "";
				
				}
				public String UORGPattern(){
				
					return "";
				
				}
				public String UORGOriginalDbColumnName(){
				
					return "UORG";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public String CEBE_COD;

				public String getCEBE_COD () {
					return this.CEBE_COD;
				}

				public Boolean CEBE_CODIsNullable(){
				    return false;
				}
				public Boolean CEBE_CODIsKey(){
				    return false;
				}
				public Integer CEBE_CODLength(){
				    return null;
				}
				public Integer CEBE_CODPrecision(){
				    return null;
				}
				public String CEBE_CODDefault(){
				
					return null;
				
				}
				public String CEBE_CODComment(){
				
				    return "";
				
				}
				public String CEBE_CODPattern(){
				
					return "";
				
				}
				public String CEBE_CODOriginalDbColumnName(){
				
					return "CEBE_COD";
				
				}

				
			    public String CEBE;

				public String getCEBE () {
					return this.CEBE;
				}

				public Boolean CEBEIsNullable(){
				    return false;
				}
				public Boolean CEBEIsKey(){
				    return false;
				}
				public Integer CEBELength(){
				    return null;
				}
				public Integer CEBEPrecision(){
				    return null;
				}
				public String CEBEDefault(){
				
					return null;
				
				}
				public String CEBEComment(){
				
				    return "";
				
				}
				public String CEBEPattern(){
				
					return "";
				
				}
				public String CEBEOriginalDbColumnName(){
				
					return "CEBE";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return false;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return null;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return null;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public String CECO_COD;

				public String getCECO_COD () {
					return this.CECO_COD;
				}

				public Boolean CECO_CODIsNullable(){
				    return false;
				}
				public Boolean CECO_CODIsKey(){
				    return false;
				}
				public Integer CECO_CODLength(){
				    return null;
				}
				public Integer CECO_CODPrecision(){
				    return null;
				}
				public String CECO_CODDefault(){
				
					return null;
				
				}
				public String CECO_CODComment(){
				
				    return "";
				
				}
				public String CECO_CODPattern(){
				
					return "";
				
				}
				public String CECO_CODOriginalDbColumnName(){
				
					return "CECO_COD";
				
				}

				
			    public String CECO;

				public String getCECO () {
					return this.CECO;
				}

				public Boolean CECOIsNullable(){
				    return false;
				}
				public Boolean CECOIsKey(){
				    return false;
				}
				public Integer CECOLength(){
				    return null;
				}
				public Integer CECOPrecision(){
				    return null;
				}
				public String CECODefault(){
				
					return null;
				
				}
				public String CECOComment(){
				
				    return "";
				
				}
				public String CECOPattern(){
				
					return "";
				
				}
				public String CECOOriginalDbColumnName(){
				
					return "CECO";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public String CUPS_COD;

				public String getCUPS_COD () {
					return this.CUPS_COD;
				}

				public Boolean CUPS_CODIsNullable(){
				    return false;
				}
				public Boolean CUPS_CODIsKey(){
				    return false;
				}
				public Integer CUPS_CODLength(){
				    return null;
				}
				public Integer CUPS_CODPrecision(){
				    return null;
				}
				public String CUPS_CODDefault(){
				
					return null;
				
				}
				public String CUPS_CODComment(){
				
				    return "";
				
				}
				public String CUPS_CODPattern(){
				
					return "";
				
				}
				public String CUPS_CODOriginalDbColumnName(){
				
					return "CUPS_COD";
				
				}

				
			    public String CUPS;

				public String getCUPS () {
					return this.CUPS;
				}

				public Boolean CUPSIsNullable(){
				    return true;
				}
				public Boolean CUPSIsKey(){
				    return false;
				}
				public Integer CUPSLength(){
				    return null;
				}
				public Integer CUPSPrecision(){
				    return null;
				}
				public String CUPSDefault(){
				
					return null;
				
				}
				public String CUPSComment(){
				
				    return "";
				
				}
				public String CUPSPattern(){
				
					return "";
				
				}
				public String CUPSOriginalDbColumnName(){
				
					return "CUPS";
				
				}

				
			    public BigDecimal VCIND;

				public BigDecimal getVCIND () {
					return this.VCIND;
				}

				public Boolean VCINDIsNullable(){
				    return false;
				}
				public Boolean VCINDIsKey(){
				    return false;
				}
				public Integer VCINDLength(){
				    return null;
				}
				public Integer VCINDPrecision(){
				    return null;
				}
				public String VCINDDefault(){
				
					return "";
				
				}
				public String VCINDComment(){
				
				    return "";
				
				}
				public String VCINDPattern(){
				
					return "";
				
				}
				public String VCINDOriginalDbColumnName(){
				
					return "VCIND";
				
				}

				
			    public BigDecimal VTCIND;

				public BigDecimal getVTCIND () {
					return this.VTCIND;
				}

				public Boolean VTCINDIsNullable(){
				    return false;
				}
				public Boolean VTCINDIsKey(){
				    return false;
				}
				public Integer VTCINDLength(){
				    return null;
				}
				public Integer VTCINDPrecision(){
				    return null;
				}
				public String VTCINDDefault(){
				
					return null;
				
				}
				public String VTCINDComment(){
				
				    return "";
				
				}
				public String VTCINDPattern(){
				
					return "";
				
				}
				public String VTCINDOriginalDbColumnName(){
				
					return "VTCIND";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ANEXOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.UORG = readString(dis);
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
					this.CEBE_COD = readString(dis);
					
					this.CEBE = readString(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
					this.CECO_COD = readString(dis);
					
					this.CECO = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.CUPS_COD = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.VCIND = (BigDecimal) dis.readObject();
					
						this.VTCIND = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ANEXOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.UORG = readString(dis);
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
					this.CEBE_COD = readString(dis);
					
					this.CEBE = readString(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
					this.CECO_COD = readString(dis);
					
					this.CECO = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.CUPS_COD = readString(dis);
					
					this.CUPS = readString(dis);
					
						this.VCIND = (BigDecimal) dis.readObject();
					
						this.VTCIND = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ANEXOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.UORG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// String
				
						writeString(this.CEBE_COD,dos);
					
					// String
				
						writeString(this.CEBE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
					// String
				
						writeString(this.CECO_COD,dos);
					
					// String
				
						writeString(this.CECO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.CUPS_COD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCIND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTCIND);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ANEXOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.UORG,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// String
				
						writeString(this.CEBE_COD,dos);
					
					// String
				
						writeString(this.CEBE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
					// String
				
						writeString(this.CECO_COD,dos);
					
					// String
				
						writeString(this.CECO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.CUPS_COD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCIND);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTCIND);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANEXOS_ID="+String.valueOf(ANEXOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",UORG="+UORG);
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CEBE_COD="+CEBE_COD);
		sb.append(",CEBE="+CEBE);
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",CECO_COD="+CECO_COD);
		sb.append(",CECO="+CECO);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",CUPS_COD="+CUPS_COD);
		sb.append(",CUPS="+CUPS);
		sb.append(",VCIND="+String.valueOf(VCIND));
		sb.append(",VTCIND="+String.valueOf(VTCIND));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CIStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String UORG;

				public String getUORG () {
					return this.UORG;
				}

				public Boolean UORGIsNullable(){
				    return false;
				}
				public Boolean UORGIsKey(){
				    return false;
				}
				public Integer UORGLength(){
				    return 2000;
				}
				public Integer UORGPrecision(){
				    return 0;
				}
				public String UORGDefault(){
				
					return null;
				
				}
				public String UORGComment(){
				
				    return "";
				
				}
				public String UORGPattern(){
				
					return "";
				
				}
				public String UORGOriginalDbColumnName(){
				
					return "UORG";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return 0;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public String CEBE_COD;

				public String getCEBE_COD () {
					return this.CEBE_COD;
				}

				public Boolean CEBE_CODIsNullable(){
				    return false;
				}
				public Boolean CEBE_CODIsKey(){
				    return false;
				}
				public Integer CEBE_CODLength(){
				    return 100;
				}
				public Integer CEBE_CODPrecision(){
				    return 0;
				}
				public String CEBE_CODDefault(){
				
					return null;
				
				}
				public String CEBE_CODComment(){
				
				    return "";
				
				}
				public String CEBE_CODPattern(){
				
					return "";
				
				}
				public String CEBE_CODOriginalDbColumnName(){
				
					return "CEBE_COD";
				
				}

				
			    public String CEBE;

				public String getCEBE () {
					return this.CEBE;
				}

				public Boolean CEBEIsNullable(){
				    return false;
				}
				public Boolean CEBEIsKey(){
				    return false;
				}
				public Integer CEBELength(){
				    return 2000;
				}
				public Integer CEBEPrecision(){
				    return 0;
				}
				public String CEBEDefault(){
				
					return null;
				
				}
				public String CEBEComment(){
				
				    return "";
				
				}
				public String CEBEPattern(){
				
					return "";
				
				}
				public String CEBEOriginalDbColumnName(){
				
					return "CEBE";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return false;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return 0;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return null;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return 0;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public String CECO_COD;

				public String getCECO_COD () {
					return this.CECO_COD;
				}

				public Boolean CECO_CODIsNullable(){
				    return false;
				}
				public Boolean CECO_CODIsKey(){
				    return false;
				}
				public Integer CECO_CODLength(){
				    return 200;
				}
				public Integer CECO_CODPrecision(){
				    return 0;
				}
				public String CECO_CODDefault(){
				
					return null;
				
				}
				public String CECO_CODComment(){
				
				    return "";
				
				}
				public String CECO_CODPattern(){
				
					return "";
				
				}
				public String CECO_CODOriginalDbColumnName(){
				
					return "CECO_COD";
				
				}

				
			    public String CECO;

				public String getCECO () {
					return this.CECO;
				}

				public Boolean CECOIsNullable(){
				    return false;
				}
				public Boolean CECOIsKey(){
				    return false;
				}
				public Integer CECOLength(){
				    return 2000;
				}
				public Integer CECOPrecision(){
				    return 0;
				}
				public String CECODefault(){
				
					return null;
				
				}
				public String CECOComment(){
				
				    return "";
				
				}
				public String CECOPattern(){
				
					return "";
				
				}
				public String CECOOriginalDbColumnName(){
				
					return "CECO";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public String CUPS_COD;

				public String getCUPS_COD () {
					return this.CUPS_COD;
				}

				public Boolean CUPS_CODIsNullable(){
				    return false;
				}
				public Boolean CUPS_CODIsKey(){
				    return false;
				}
				public Integer CUPS_CODLength(){
				    return 100;
				}
				public Integer CUPS_CODPrecision(){
				    return 0;
				}
				public String CUPS_CODDefault(){
				
					return null;
				
				}
				public String CUPS_CODComment(){
				
				    return "";
				
				}
				public String CUPS_CODPattern(){
				
					return "";
				
				}
				public String CUPS_CODOriginalDbColumnName(){
				
					return "CUPS_COD";
				
				}

				
			    public String CUPS;

				public String getCUPS () {
					return this.CUPS;
				}

				public Boolean CUPSIsNullable(){
				    return true;
				}
				public Boolean CUPSIsKey(){
				    return false;
				}
				public Integer CUPSLength(){
				    return 500;
				}
				public Integer CUPSPrecision(){
				    return 0;
				}
				public String CUPSDefault(){
				
					return "";
				
				}
				public String CUPSComment(){
				
				    return "";
				
				}
				public String CUPSPattern(){
				
					return "";
				
				}
				public String CUPSOriginalDbColumnName(){
				
					return "CUPS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.UORG = readString(dis);
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
					this.CEBE_COD = readString(dis);
					
					this.CEBE = readString(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
					this.CECO_COD = readString(dis);
					
					this.CECO = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.CUPS_COD = readString(dis);
					
					this.CUPS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.UORG = readString(dis);
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
					this.CEBE_COD = readString(dis);
					
					this.CEBE = readString(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
					this.CECO_COD = readString(dis);
					
					this.CECO = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.CUPS_COD = readString(dis);
					
					this.CUPS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.UORG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// String
				
						writeString(this.CEBE_COD,dos);
					
					// String
				
						writeString(this.CEBE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
					// String
				
						writeString(this.CECO_COD,dos);
					
					// String
				
						writeString(this.CECO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.CUPS_COD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.UORG,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// String
				
						writeString(this.CEBE_COD,dos);
					
					// String
				
						writeString(this.CEBE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
					// String
				
						writeString(this.CECO_COD,dos);
					
					// String
				
						writeString(this.CECO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.CUPS_COD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",UORG="+UORG);
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CEBE_COD="+CEBE_COD);
		sb.append(",CEBE="+CEBE);
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",CECO_COD="+CECO_COD);
		sb.append(",CECO="+CECO);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",CUPS_COD="+CUPS_COD);
		sb.append(",CUPS="+CUPS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_4Struct implements routines.system.IPersistableRow<after_tHashInput_4Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String UORG;

				public String getUORG () {
					return this.UORG;
				}

				public Boolean UORGIsNullable(){
				    return false;
				}
				public Boolean UORGIsKey(){
				    return false;
				}
				public Integer UORGLength(){
				    return 2000;
				}
				public Integer UORGPrecision(){
				    return 0;
				}
				public String UORGDefault(){
				
					return null;
				
				}
				public String UORGComment(){
				
				    return "";
				
				}
				public String UORGPattern(){
				
					return "";
				
				}
				public String UORGOriginalDbColumnName(){
				
					return "UORG";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return 0;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public String CEBE_COD;

				public String getCEBE_COD () {
					return this.CEBE_COD;
				}

				public Boolean CEBE_CODIsNullable(){
				    return false;
				}
				public Boolean CEBE_CODIsKey(){
				    return false;
				}
				public Integer CEBE_CODLength(){
				    return 100;
				}
				public Integer CEBE_CODPrecision(){
				    return 0;
				}
				public String CEBE_CODDefault(){
				
					return null;
				
				}
				public String CEBE_CODComment(){
				
				    return "";
				
				}
				public String CEBE_CODPattern(){
				
					return "";
				
				}
				public String CEBE_CODOriginalDbColumnName(){
				
					return "CEBE_COD";
				
				}

				
			    public String CEBE;

				public String getCEBE () {
					return this.CEBE;
				}

				public Boolean CEBEIsNullable(){
				    return false;
				}
				public Boolean CEBEIsKey(){
				    return false;
				}
				public Integer CEBELength(){
				    return 2000;
				}
				public Integer CEBEPrecision(){
				    return 0;
				}
				public String CEBEDefault(){
				
					return null;
				
				}
				public String CEBEComment(){
				
				    return "";
				
				}
				public String CEBEPattern(){
				
					return "";
				
				}
				public String CEBEOriginalDbColumnName(){
				
					return "CEBE";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return false;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return 0;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return null;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return 0;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public String CECO_COD;

				public String getCECO_COD () {
					return this.CECO_COD;
				}

				public Boolean CECO_CODIsNullable(){
				    return false;
				}
				public Boolean CECO_CODIsKey(){
				    return false;
				}
				public Integer CECO_CODLength(){
				    return 200;
				}
				public Integer CECO_CODPrecision(){
				    return 0;
				}
				public String CECO_CODDefault(){
				
					return null;
				
				}
				public String CECO_CODComment(){
				
				    return "";
				
				}
				public String CECO_CODPattern(){
				
					return "";
				
				}
				public String CECO_CODOriginalDbColumnName(){
				
					return "CECO_COD";
				
				}

				
			    public String CECO;

				public String getCECO () {
					return this.CECO;
				}

				public Boolean CECOIsNullable(){
				    return false;
				}
				public Boolean CECOIsKey(){
				    return false;
				}
				public Integer CECOLength(){
				    return 2000;
				}
				public Integer CECOPrecision(){
				    return 0;
				}
				public String CECODefault(){
				
					return null;
				
				}
				public String CECOComment(){
				
				    return "";
				
				}
				public String CECOPattern(){
				
					return "";
				
				}
				public String CECOOriginalDbColumnName(){
				
					return "CECO";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public String CUPS_COD;

				public String getCUPS_COD () {
					return this.CUPS_COD;
				}

				public Boolean CUPS_CODIsNullable(){
				    return false;
				}
				public Boolean CUPS_CODIsKey(){
				    return false;
				}
				public Integer CUPS_CODLength(){
				    return 100;
				}
				public Integer CUPS_CODPrecision(){
				    return 0;
				}
				public String CUPS_CODDefault(){
				
					return null;
				
				}
				public String CUPS_CODComment(){
				
				    return "";
				
				}
				public String CUPS_CODPattern(){
				
					return "";
				
				}
				public String CUPS_CODOriginalDbColumnName(){
				
					return "CUPS_COD";
				
				}

				
			    public String CUPS;

				public String getCUPS () {
					return this.CUPS;
				}

				public Boolean CUPSIsNullable(){
				    return true;
				}
				public Boolean CUPSIsKey(){
				    return false;
				}
				public Integer CUPSLength(){
				    return 500;
				}
				public Integer CUPSPrecision(){
				    return 0;
				}
				public String CUPSDefault(){
				
					return "";
				
				}
				public String CUPSComment(){
				
				    return "";
				
				}
				public String CUPSPattern(){
				
					return "";
				
				}
				public String CUPSOriginalDbColumnName(){
				
					return "CUPS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.UORG = readString(dis);
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
					this.CEBE_COD = readString(dis);
					
					this.CEBE = readString(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
					this.CECO_COD = readString(dis);
					
					this.CECO = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.CUPS_COD = readString(dis);
					
					this.CUPS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.UORG = readString(dis);
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
					this.CEBE_COD = readString(dis);
					
					this.CEBE = readString(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
					this.CECO_COD = readString(dis);
					
					this.CECO = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.CUPS_COD = readString(dis);
					
					this.CUPS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.UORG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// String
				
						writeString(this.CEBE_COD,dos);
					
					// String
				
						writeString(this.CEBE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
					// String
				
						writeString(this.CECO_COD,dos);
					
					// String
				
						writeString(this.CECO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.CUPS_COD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.UORG,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// String
				
						writeString(this.CEBE_COD,dos);
					
					// String
				
						writeString(this.CEBE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
					// String
				
						writeString(this.CECO_COD,dos);
					
					// String
				
						writeString(this.CECO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.CUPS_COD,dos);
					
					// String
				
						writeString(this.CUPS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",UORG="+UORG);
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CEBE_COD="+CEBE_COD);
		sb.append(",CEBE="+CEBE);
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",CECO_COD="+CECO_COD);
		sb.append(",CECO="+CECO);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",CUPS_COD="+CUPS_COD);
		sb.append(",CUPS="+CUPS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_7Process(globalMap);
		tHashInput_1Process(globalMap);
		tOracleInput_6Process(globalMap);
		tHashInput_2Process(globalMap);
		tHashInput_5Process(globalMap);
		tOracleInput_1Process(globalMap);
		tOracleInput_16Process(globalMap);
		tHashInput_3Process(globalMap);
		tOracleInput_12Process(globalMap);
		tOracleInput_11Process(globalMap);
		tOracleInput_10Process(globalMap);
		tOracleInput_8Process(globalMap);
		tOracleInput_9Process(globalMap);

		row14Struct row14 = new row14Struct();
CIStruct CI = new CIStruct();
out3Struct out3 = new out3Struct();
out1Struct out1 = new out1Struct();
out5Struct out5 = new out5Struct();
out6Struct out6 = new out6Struct();
out4Struct out4 = new out4Struct();









	
	/**
	 * [tOracleOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_2", false);
		start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out6");
					}
				
		int tos_count_tOracleOutput_2 = 0;
		






        int updateKeyCount_tOracleOutput_2 = 1;
        if(updateKeyCount_tOracleOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_2 == 6 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_2 = 0;
    int nb_line_update_tOracleOutput_2 = 0;
    int nb_line_inserted_tOracleOutput_2 = 0;
    int nb_line_deleted_tOracleOutput_2 = 0;
    int nb_line_rejected_tOracleOutput_2 = 0;

    int tmp_batchUpdateCount_tOracleOutput_2 = 0;

    int deletedCount_tOracleOutput_2=0;
    int updatedCount_tOracleOutput_2=0;
    int insertedCount_tOracleOutput_2=0;
    int rowsToCommitCount_tOracleOutput_2=0;
    int rejectedCount_tOracleOutput_2=0;

    boolean whetherReject_tOracleOutput_2 = false;

    java.sql.Connection conn_tOracleOutput_2 = null;

    //optional table
    String dbschema_tOracleOutput_2 = null;
    String tableName_tOracleOutput_2 = null;
                    String driverClass_tOracleOutput_2 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_2);
                String url_tOracleOutput_2 = null;
                    url_tOracleOutput_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_2 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_2 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_2 = decryptedPassword_tOracleOutput_2;
                dbschema_tOracleOutput_2 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_2 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_2.put("user",dbUser_tOracleOutput_2);
                    atnParamsPrope_tOracleOutput_2.put("password",dbPwd_tOracleOutput_2);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_2.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_2 = java.sql.DriverManager.getConnection(url_tOracleOutput_2, atnParamsPrope_tOracleOutput_2);
        resourceMap.put("conn_tOracleOutput_2", conn_tOracleOutput_2);
            conn_tOracleOutput_2.setAutoCommit(false);
            int commitEvery_tOracleOutput_2 = 1000;
            int commitCounter_tOracleOutput_2 = 0;
        int batchSize_tOracleOutput_2 = 1000;
        int batchSizeCounter_tOracleOutput_2=0;
        int count_tOracleOutput_2=0;

        if(dbschema_tOracleOutput_2 == null || dbschema_tOracleOutput_2.trim().length() == 0) {
            tableName_tOracleOutput_2 = ("CEC_UORG_CECO_CUPS");
        } else {
            tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "." + ("CEC_UORG_CECO_CUPS");
        }
                String update_tOracleOutput_2 = "UPDATE " + tableName_tOracleOutput_2 + " SET VALOR = ?,VMOD = ?,VMPD = ?,VCI = ?,FMODIFICACION = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(update_tOracleOutput_2);
                resourceMap.put("pstmt_tOracleOutput_2", pstmt_tOracleOutput_2);





 



/**
 * [tOracleOutput_2 begin ] stop
 */




	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
                    String driverClass_tOracleOutput_1 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_1);
                String url_tOracleOutput_1 = null;
                    url_tOracleOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_1 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_1 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_1 = decryptedPassword_tOracleOutput_1;
                dbschema_tOracleOutput_1 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_1 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_1.put("user",dbUser_tOracleOutput_1);
                    atnParamsPrope_tOracleOutput_1.put("password",dbPwd_tOracleOutput_1);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_1.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_1 = java.sql.DriverManager.getConnection(url_tOracleOutput_1, atnParamsPrope_tOracleOutput_1);
        resourceMap.put("conn_tOracleOutput_1", conn_tOracleOutput_1);
            conn_tOracleOutput_1.setAutoCommit(false);
            int commitEvery_tOracleOutput_1 = 1000;
            int commitCounter_tOracleOutput_1 = 0;
        int batchSize_tOracleOutput_1 = 1000;
        int batchSizeCounter_tOracleOutput_1=0;
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("BCEC_VCUPSTOTAL");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("BCEC_VCUPSTOTAL");
        }
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (TIEMPOS_ID,ANEXOS_ID,UORG_ID,UORG,CEBE_ID,COD_CEBE,CEBE,SERVICIOS_ID,CECO_ID,COD_CECO,CECO,ESPECIALIDADES_ID,CUPS_ID,COD_CUPS,CUPS,VCIND,VTCIND,VMOD,VTMOD,VMPD,VTMPD,VRE,VTRE,VTOTAL,VTOTAL_ESTANDAR,TIPO,VMOD_ESTANDAR,VMPD_ESTANDAR,VCIND_ESTANDAR) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                        resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out5");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
					globalMap.get( "tHash_Lookup_row16" ))
					;					
					
	

row16Struct row16HashKey = new row16Struct();
row16Struct row16Default = new row16Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
					globalMap.get( "tHash_Lookup_row15" ))
					;					
					
	

row15Struct row15HashKey = new row15Struct();
row15Struct row15Default = new row15Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
	BigDecimal VMOD;
	BigDecimal VMPD;
	BigDecimal VCIND;
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
out6Struct out6_tmp = new out6Struct();
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
					globalMap.get( "tHash_Lookup_row11" ))
					;					
					
	

row11Struct row11HashKey = new row11Struct();
row11Struct row11Default = new row11Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
					globalMap.get( "tHash_Lookup_row18" ))
					;					
					
	

row18Struct row18HashKey = new row18Struct();
row18Struct row18Default = new row18Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
					globalMap.get( "tHash_Lookup_row10" ))
					;					
					
	

row10Struct row10HashKey = new row10Struct();
row10Struct row10Default = new row10Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	BigDecimal CONTEO_CUPS;
	BigDecimal CANTIDAD_ATENCIONES;
	BigDecimal VALOR_DISPENSACIONES;
	BigDecimal VALOR_CARGUE;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CI");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<out2Struct> tHash_Lookup_out2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<out2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<out2Struct>) 
					globalMap.get( "tHash_Lookup_out2" ))
					;					
					
	

out2Struct out2HashKey = new out2Struct();
out2Struct out2Default = new out2Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
					globalMap.get( "tHash_Lookup_row12" ))
					;					
					
	

row12Struct row12HashKey = new row12Struct();
row12Struct row12Default = new row12Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
	BigDecimal CANTIDAD_ATENCIONES_CUPS;
	BigDecimal VTMOD;
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
					globalMap.get( "tHash_Lookup_row25" ))
					;					
					
	

row25Struct row25HashKey = new row25Struct();
row25Struct row25Default = new row25Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) 
					globalMap.get( "tHash_Lookup_row26" ))
					;					
					
	

row26Struct row26HashKey = new row26Struct();
row26Struct row26Default = new row26Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
	BigDecimal CANTIDAD_ATENCIONES_CUPS;
	BigDecimal VTCIND;
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
CIStruct CI_tmp = new CIStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row28Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_CostosXCups_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row28Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row28Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row14.UORG_ID = next_tHashInput_4.UORG_ID;
	row14.UORG = next_tHashInput_4.UORG;
	row14.CEBE_ID = next_tHashInput_4.CEBE_ID;
	row14.CEBE_COD = next_tHashInput_4.CEBE_COD;
	row14.CEBE = next_tHashInput_4.CEBE;
	row14.SERVICIOS_ID = next_tHashInput_4.SERVICIOS_ID;
	row14.CECO_ID = next_tHashInput_4.CECO_ID;
	row14.CECO_COD = next_tHashInput_4.CECO_COD;
	row14.CECO = next_tHashInput_4.CECO;
	row14.ESPECIALIDADES_ID = next_tHashInput_4.ESPECIALIDADES_ID;
	row14.CUPS_ID = next_tHashInput_4.CUPS_ID;
	row14.CUPS_COD = next_tHashInput_4.CUPS_COD;
	row14.CUPS = next_tHashInput_4.CUPS;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
						row25Struct row25 = null;
					
						row26Struct row26 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row25" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow25 = false;
       		  	    	
       		  	    	
 							row25Struct row25ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row25HashKey.UORG_ID = row14.UORG_ID ;
                        		    		
                        		    		    row25HashKey.CEBE_ID = row14.CEBE_ID ;
                        		    		
                        		    		    row25HashKey.CECO_ID = row14.CECO_ID ;
                        		    		
                        		    		    row25HashKey.CUPS_ID = row14.CUPS_ID ;
                        		    		

								
		                        	row25HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row25.lookup( row25HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row25 != null && tHash_Lookup_row25.getCount(row25HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row25' and it contains more one result from keys :  row25.UORG_ID = '" + row25HashKey.UORG_ID + "', row25.CEBE_ID = '" + row25HashKey.CEBE_ID + "', row25.CECO_ID = '" + row25HashKey.CECO_ID + "', row25.CUPS_ID = '" + row25HashKey.CUPS_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row25Struct fromLookup_row25 = null;
							row25 = row25Default;
										 
							
								 
							
							
								if (tHash_Lookup_row25 !=null && tHash_Lookup_row25.hasNext()) { // G 099
								
							
								
								fromLookup_row25 = tHash_Lookup_row25.next();

							
							
								} // G 099
							
							

							if(fromLookup_row25 != null) {
								row25 = fromLookup_row25;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row26" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow26 = false;
       		  	    	
       		  	    	
 							row26Struct row26ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row26HashKey.UORG_ID = row14.UORG_ID ;
                        		    		
                        		    		    row26HashKey.CEBE_ID = row14.CEBE_ID ;
                        		    		
                        		    		    row26HashKey.CECO_ID = row14.CECO_ID ;
                        		    		
                        		    		    row26HashKey.CUPS_ID = row14.CUPS_ID ;
                        		    		

								
		                        	row26HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row26.lookup( row26HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row26 != null && tHash_Lookup_row26.getCount(row26HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row26' and it contains more one result from keys :  row26.UORG_ID = '" + row26HashKey.UORG_ID + "', row26.CEBE_ID = '" + row26HashKey.CEBE_ID + "', row26.CECO_ID = '" + row26HashKey.CECO_ID + "', row26.CUPS_ID = '" + row26HashKey.CUPS_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row26Struct fromLookup_row26 = null;
							row26 = row26Default;
										 
							
								 
							
							
								if (tHash_Lookup_row26 !=null && tHash_Lookup_row26.hasNext()) { // G 099
								
							
								
								fromLookup_row26 = tHash_Lookup_row26.next();

							
							
								} // G 099
							
							

							if(fromLookup_row26 != null) {
								row26 = fromLookup_row26;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;
Var.CANTIDAD_ATENCIONES_CUPS = row26.CANTIDAD_ATENCIONES_CUPS == null ? new BigDecimal(0): row26.CANTIDAD_ATENCIONES_CUPS ;
Var.VTCIND = row25.VCIND == null ? new BigDecimal(0) : row25.VCIND ;// ###############################
        // ###############################
        // # Output tables

CI = null;


// # Output table : 'CI'
CI_tmp.ANEXOS_ID = context.ANEXO_ID;
CI_tmp.UORG_ID = row14.UORG_ID ;
CI_tmp.UORG = row14.UORG ;
CI_tmp.CEBE_ID = row14.CEBE_ID ;
CI_tmp.CEBE_COD = row14.CEBE_COD ;
CI_tmp.CEBE = row14.CEBE ;
CI_tmp.SERVICIOS_ID = row14.SERVICIOS_ID ;
CI_tmp.CECO_ID = row14.CECO_ID ;
CI_tmp.CECO_COD = row14.CECO_COD ;
CI_tmp.CECO = row14.CECO ;
CI_tmp.ESPECIALIDADES_ID = row14.ESPECIALIDADES_ID ;
CI_tmp.CUPS_ID = row14.CUPS_ID ;
CI_tmp.CUPS_COD = row14.CUPS_COD ;
CI_tmp.CUPS = row14.CUPS ;
CI_tmp.VCIND = Utils.divide(Var.VTCIND, Var.CANTIDAD_ATENCIONES_CUPS) ;
CI_tmp.VTCIND = Var.VTCIND;
CI = CI_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "CI"
if(CI != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CI"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
						out2Struct out2 = null;
					
						row12Struct row12 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "out2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopout2 = false;
       		  	    	
       		  	    	
 							out2Struct out2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    out2HashKey.UORG_ID = CI.UORG_ID ;
                        		    		
                        		    		    out2HashKey.CEBE_ID = CI.CEBE_ID ;
                        		    		
                        		    		    out2HashKey.CECO_ID = CI.CECO_ID ;
                        		    		
                        		    		    out2HashKey.CUPS_ID = CI.CUPS_ID ;
                        		    		

								
		                        	out2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_out2.lookup( out2HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_out2 != null && tHash_Lookup_out2.getCount(out2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'out2' and it contains more one result from keys :  out2.UORG_ID = '" + out2HashKey.UORG_ID + "', out2.CEBE_ID = '" + out2HashKey.CEBE_ID + "', out2.CECO_ID = '" + out2HashKey.CECO_ID + "', out2.CUPS_ID = '" + out2HashKey.CUPS_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	out2Struct fromLookup_out2 = null;
							out2 = out2Default;
										 
							
								 
							
							
								if (tHash_Lookup_out2 !=null && tHash_Lookup_out2.hasNext()) { // G 099
								
							
								
								fromLookup_out2 = tHash_Lookup_out2.next();

							
							
								} // G 099
							
							

							if(fromLookup_out2 != null) {
								out2 = fromLookup_out2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row12HashKey.UORG_ID = CI.UORG_ID ;
                        		    		
                        		    		    row12HashKey.CEBE_ID = CI.CEBE_ID ;
                        		    		
                        		    		    row12HashKey.CECO_ID = CI.CECO_ID ;
                        		    		
                        		    		    row12HashKey.CUPS_ID = CI.CUPS_ID ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.UORG_ID = '" + row12HashKey.UORG_ID + "', row12.CEBE_ID = '" + row12HashKey.CEBE_ID + "', row12.CECO_ID = '" + row12HashKey.CECO_ID + "', row12.CUPS_ID = '" + row12HashKey.CUPS_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;
Var.CANTIDAD_ATENCIONES_CUPS = row12.CANTIDAD_ATENCIONES_CUPS == null ? new BigDecimal(0): row12.CANTIDAD_ATENCIONES_CUPS ;
Var.VTMOD = out2.VTMOD == null ? new BigDecimal(0) : out2.VTMOD ;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp.ANEXOS_ID = CI.ANEXOS_ID ;
out3_tmp.UORG_ID = CI.UORG_ID ;
out3_tmp.UORG = CI.UORG ;
out3_tmp.CEBE_ID = CI.CEBE_ID ;
out3_tmp.CEBE_COD = CI.CEBE_COD;
out3_tmp.CEBE = CI.CEBE ;
out3_tmp.SERVICIOS_ID = CI.SERVICIOS_ID ;
out3_tmp.CECO_ID = CI.CECO_ID ;
out3_tmp.CECO_COD = CI.CECO_COD;
out3_tmp.CECO = CI.CECO ;
out3_tmp.ESPECIALIDADES_ID = CI.ESPECIALIDADES_ID ;
out3_tmp.CUPS_ID = CI.CUPS_ID ;
out3_tmp.CUPS_COD = CI.CUPS_COD;
out3_tmp.CUPS = CI.CUPS ;
out3_tmp.VCIND = CI.VCIND ;
out3_tmp.VTCIND = CI.VTCIND ;
out3_tmp.VMOD = Utils.divide(Var.VTMOD, Var.CANTIDAD_ATENCIONES_CUPS) ;
out3_tmp.VTMOD = Var.VTMOD ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row6Struct row6 = null;
					
						row7Struct row7 = null;
					
						row8Struct row8 = null;
					
						row10Struct row10 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row6HashKey.UORG_ID = out3.UORG_ID ;
                        		    		
                        		    		    row6HashKey.CEBE_ID = out3.CEBE_ID ;
                        		    		
                        		    		    row6HashKey.CECO_ID = out3.CECO_ID ;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLooprow6 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow6 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row6 != null && tHash_Lookup_row6.hasNext()) || forceLooprow6) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row6'
									
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								
								if(!forceLooprow6) { // G 46
								
							
								 
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow6 = false;
									 	
							
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row7HashKey.UORG_ID = out3.UORG_ID ;
                        		    		
                        		    		    row7HashKey.CEBE_ID = out3.CEBE_ID ;
                        		    		
                        		    		    row7HashKey.CECO_ID = out3.CECO_ID ;
                        		    		

								
		                        	row7HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow7 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow7 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row7 != null && tHash_Lookup_row7.hasNext()) || forceLooprow7) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row7'
									
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								
								if(!forceLooprow7) { // G 46
								
							
								 
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow7 = false;
									 	
							
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row8HashKey.UORG_ID = out3.UORG_ID ;
                        		    		
                        		    		    row8HashKey.CEBE_ID = out3.CEBE_ID ;
                        		    		
                        		    		    row8HashKey.CECO_ID = out3.CECO_ID ;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row8.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow8 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow8 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row8 != null && tHash_Lookup_row8.hasNext()) || forceLooprow8) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row8'
									
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								
								if(!forceLooprow8) { // G 46
								
							
								 
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow8 = false;
									 	
							
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row10" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow10 = false;
       		  	    	
       		  	    	
 							row10Struct row10ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row10HashKey.UORG_ID = out3.UORG_ID ;
                        		    		
                        		    		    row10HashKey.CEBE_ID = out3.CEBE_ID ;
                        		    		
                        		    		    row10HashKey.CECO_ID = out3.CECO_ID ;
                        		    		

								
		                        	row10HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row10.lookup( row10HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row10.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow10 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow10 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row10 != null && tHash_Lookup_row10.hasNext()) || forceLooprow10) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row10'
									
                    		  	 
							   
                    		  	 
	       		  	    	row10Struct fromLookup_row10 = null;
							row10 = row10Default;
										 
							
								
								if(!forceLooprow10) { // G 46
								
							
								 
							
								
								fromLookup_row10 = tHash_Lookup_row10.next();

							

							if(fromLookup_row10 != null) {
								row10 = fromLookup_row10;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow10 = false;
									 	
							
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.CONTEO_CUPS = row6.CONTEO_CUPS == null ? new BigDecimal(1) : row6.CONTEO_CUPS ;
Var.CANTIDAD_ATENCIONES = row10.CANTIDAD_ATENCIONES_CECO == null ? new BigDecimal(1) :row10.CANTIDAD_ATENCIONES_CECO ;
Var.VALOR_DISPENSACIONES = row7.VALOR_DISPENSACION == null ? new BigDecimal(0) :row7.VALOR_DISPENSACION ;
Var.VALOR_CARGUE = row8.VALOR_CARGUE == null ? new BigDecimal(0) : row8.VALOR_CARGUE ;// ###############################
        // ###############################
        // # Output tables

out1 = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'out1'
out1_tmp.ANEXOS_ID = out3.ANEXOS_ID ;
out1_tmp.UORG_ID = out3.UORG_ID ;
out1_tmp.UORG = out3.UORG ;
out1_tmp.CEBE_ID = out3.CEBE_ID ;
out1_tmp.CEBE_COD = out3.CEBE_COD ;
out1_tmp.CEBE = out3.CEBE ;
out1_tmp.SERVICIOS_ID = out3.SERVICIOS_ID ;
out1_tmp.CECO_ID = out3.CECO_ID ;
out1_tmp.CECO_COD = out3.CECO_COD ;
out1_tmp.CECO = out3.CECO ;
out1_tmp.ESPECIALIDADES_ID = out3.ESPECIALIDADES_ID ;
out1_tmp.CUPS_ID = out3.CUPS_ID ;
out1_tmp.CUPS_COD = out3.CUPS_COD ;
out1_tmp.CUPS = out3.CUPS ;
out1_tmp.VCIND = out3.VCIND ;
out1_tmp.VTCIND = out3.VTCIND ;
out1_tmp.VMOD = out3.VMOD ;
out1_tmp.VTMOD = out3.VTMOD ;
out1_tmp.VMPD = (Utils.divide(Var.VALOR_DISPENSACIONES, Var.CANTIDAD_ATENCIONES)).add(Utils.divide((Utils.divide(Var.VALOR_CARGUE, Var.CONTEO_CUPS)), Var.CANTIDAD_ATENCIONES)) ;
out1_tmp.VTMPD = Utils.divide((Var.VALOR_DISPENSACIONES.add(Var.VALOR_CARGUE)), Var.CONTEO_CUPS) ;
out1 = out1_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
						row11Struct row11 = null;
					
						row13Struct row13 = null;
					
						row18Struct row18 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row11" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow11 = false;
       		  	    	
       		  	    	
 							row11Struct row11ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row11HashKey.CUPS_ID = out1.CUPS_ID ;
                        		    		
                        		    		    row11HashKey.ESPECIALIDADES_ID = out1.ESPECIALIDADES_ID ;
                        		    		
                        		    		    row11HashKey.SERVICIO_ID = out1.SERVICIOS_ID ;
                        		    		
                        		    		    row11HashKey.UORG_CONTRATO = out1.UORG_ID ;
                        		    		

								
		                        	row11HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row11.lookup( row11HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row11 != null && tHash_Lookup_row11.getCount(row11HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row11' and it contains more one result from keys :  row11.CUPS_ID = '" + row11HashKey.CUPS_ID + "', row11.ESPECIALIDADES_ID = '" + row11HashKey.ESPECIALIDADES_ID + "', row11.SERVICIO_ID = '" + row11HashKey.SERVICIO_ID + "', row11.UORG_CONTRATO = '" + row11HashKey.UORG_CONTRATO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row11Struct fromLookup_row11 = null;
							row11 = row11Default;
										 
							
								 
							
							
								if (tHash_Lookup_row11 !=null && tHash_Lookup_row11.hasNext()) { // G 099
								
							
								
								fromLookup_row11 = tHash_Lookup_row11.next();

							
							
								} // G 099
							
							

							if(fromLookup_row11 != null) {
								row11 = fromLookup_row11;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row13HashKey.ESPECIALIDADES_ID = out1.ESPECIALIDADES_ID ;
                        		    		
                        		    		    row13HashKey.SERVICIOS_ID = out1.SERVICIOS_ID ;
                        		    		
                        		    		    row13HashKey.UORG_CONTRATO = out1.UORG_ID ;
                        		    		
                        		    		    row13HashKey.CUPS_ID = out1.CUPS_ID ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.ESPECIALIDADES_ID = '" + row13HashKey.ESPECIALIDADES_ID + "', row13.SERVICIOS_ID = '" + row13HashKey.SERVICIOS_ID + "', row13.UORG_CONTRATO = '" + row13HashKey.UORG_CONTRATO + "', row13.CUPS_ID = '" + row13HashKey.CUPS_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row18" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow18 = false;
       		  	    	
       		  	    	
 							row18Struct row18ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row18HashKey.ESPECIALIDADES_ID = out1.ESPECIALIDADES_ID ;
                        		    		
                        		    		    row18HashKey.SERVICIOS_ID = out1.SERVICIOS_ID ;
                        		    		
                        		    		    row18HashKey.UORG_CONTRATO = out1.UORG_ID ;
                        		    		
                        		    		    row18HashKey.CUPS_ID = out1.CUPS_ID ;
                        		    		

								
		                        	row18HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row18.lookup( row18HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row18 != null && tHash_Lookup_row18.getCount(row18HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row18' and it contains more one result from keys :  row18.ESPECIALIDADES_ID = '" + row18HashKey.ESPECIALIDADES_ID + "', row18.SERVICIOS_ID = '" + row18HashKey.SERVICIOS_ID + "', row18.UORG_CONTRATO = '" + row18HashKey.UORG_CONTRATO + "', row18.CUPS_ID = '" + row18HashKey.CUPS_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row18Struct fromLookup_row18 = null;
							row18 = row18Default;
										 
							
								 
							
							
								if (tHash_Lookup_row18 !=null && tHash_Lookup_row18.hasNext()) { // G 099
								
							
								
								fromLookup_row18 = tHash_Lookup_row18.next();

							
							
								} // G 099
							
							

							if(fromLookup_row18 != null) {
								row18 = fromLookup_row18;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

out5 = null;


// # Output table : 'out5'
out5_tmp.TIEMPOS_ID = context.TIEMPOS_ID;
out5_tmp.ANEXOS_ID = out1.ANEXOS_ID ;
out5_tmp.UORG_ID = out1.UORG_ID ;
out5_tmp.UORG = out1.UORG ;
out5_tmp.CEBE_ID = out1.CEBE_ID ;
out5_tmp.COD_CEBE = out1.CEBE_COD;
out5_tmp.CEBE = out1.CEBE ;
out5_tmp.SERVICIOS_ID = out1.SERVICIOS_ID ;
out5_tmp.CECO_ID = out1.CECO_ID ;
out5_tmp.COD_CECO = out1.CECO_COD;
out5_tmp.CECO = out1.CECO ;
out5_tmp.ESPECIALIDADES_ID = out1.ESPECIALIDADES_ID ;
out5_tmp.CUPS_ID = out1.CUPS_ID ;
out5_tmp.COD_CUPS = out1.CUPS_COD;
out5_tmp.CUPS = out1.CUPS ;
out5_tmp.VCIND = out1.VCIND ;
out5_tmp.VTCIND = out1.VTCIND ;
out5_tmp.VMOD = out1.VMOD ;
out5_tmp.VTMOD = out1.VTMOD ;
out5_tmp.VMPD = out1.VMPD ;
out5_tmp.VTMPD = out1.VTMPD ;
out5_tmp.VRE = (row11.VCONSULTAS == null ? new BigDecimal(0):row11.VCONSULTAS).add(row13.VPROCEDIMIENTOS == null ? new BigDecimal(0):row13.VPROCEDIMIENTOS).add( row18.VOTROSSERVICIOS == null ? new BigDecimal(0):row18.VOTROSSERVICIOS) ;
out5_tmp.VTRE = (row11.VTC == null ? new BigDecimal(0):row11.VTC).add(row13.VTP == null ? new BigDecimal(0):row13.VTP).add( row18.VTOS == null ? new BigDecimal(0):row18.VTOS) ;
out5 = out5_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
						row16Struct row16 = null;
					
						row15Struct row15 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row16" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow16 = false;
       		  	    	
       		  	    	
 							row16Struct row16ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row16HashKey.UORG_ID = out5.UORG_ID ;
                        		    		
                        		    		    row16HashKey.CEBE_ID = out5.CEBE_ID ;
                        		    		
                        		    		    row16HashKey.CECO_ID = out5.CECO_ID ;
                        		    		
                        		    		    row16HashKey.CUPS_ID = out5.CUPS_ID ;
                        		    		

								
		                        	row16HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row16.lookup( row16HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row16.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_6 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row16 != null && tHash_Lookup_row16.getCount(row16HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row16' and it contains more one result from keys :  row16.UORG_ID = '" + row16HashKey.UORG_ID + "', row16.CEBE_ID = '" + row16HashKey.CEBE_ID + "', row16.CECO_ID = '" + row16HashKey.CECO_ID + "', row16.CUPS_ID = '" + row16HashKey.CUPS_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row16Struct fromLookup_row16 = null;
							row16 = row16Default;
										 
							
								 
							
							
								if (tHash_Lookup_row16 !=null && tHash_Lookup_row16.hasNext()) { // G 099
								
							
								
								fromLookup_row16 = tHash_Lookup_row16.next();

							
							
								} // G 099
							
							

							if(fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row15" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow15 = false;
       		  	    	
       		  	    	
 							row15Struct row15ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row15HashKey.CECO_ID = out5.CECO_ID ;
                        		    		
                        		    		    row15HashKey.CUPS_ID = out5.CUPS_ID ;
                        		    		

								
		                        	row15HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row15.lookup( row15HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row15.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow15 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow15 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row15 != null && tHash_Lookup_row15.hasNext()) || forceLooprow15) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row15'
									
                    		  	 
							   
                    		  	 
	       		  	    	row15Struct fromLookup_row15 = null;
							row15 = row15Default;
										 
							
								
								if(!forceLooprow15) { // G 46
								
							
								 
							
								
								fromLookup_row15 = tHash_Lookup_row15.next();

							

							if(fromLookup_row15 != null) {
								row15 = fromLookup_row15;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow15 = false;
									 	
							
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;
Var.VMOD = Utils.getBase(row15.BASE) ? row15.VMOD_ESTANDAR : (out5.VMOD.compareTo(new BigDecimal(0)) == 0 ? row16.VMOD : out5.VMOD) ;
Var.VMPD = Utils.getBase(row15.BASE) ? row15.VMPD_ESTANDAR : (out5.VMPD.compareTo(new BigDecimal(0)) == 0 ? row16.VMPD : out5.VMPD) ;
Var.VCIND = Utils.getBase(row15.BASE) ? row15.VCIND_ESTANDAR : (out5.VCIND.compareTo(new BigDecimal(0)) == 0 ? row16.VCI : out5.VCIND) ;// ###############################
        // ###############################
        // # Output tables

out6 = null;
out4 = null;

if(!rejectedInnerJoin_tMap_6 ) {

// # Output table : 'out6'
out6_tmp.ID = row16.ID ;
out6_tmp.VALOR = (Var.VMOD.add(Var.VMPD)).add(Var.VCIND) ;
out6_tmp.VMOD = Var.VMOD ;
out6_tmp.VMPD = Var.VMPD ;
out6_tmp.VCI = Var.VCIND ;
out6_tmp.FMODIFICACION = TalendDate.getCurrentDate();
out6 = out6_tmp;

// # Output table : 'out4'
out4_tmp.TIEMPOS_ID = out5.TIEMPOS_ID ;
out4_tmp.ANEXOS_ID = out5.ANEXOS_ID ;
out4_tmp.UORG_ID = out5.UORG_ID ;
out4_tmp.UORG = out5.UORG ;
out4_tmp.CEBE_ID = out5.CEBE_ID ;
out4_tmp.COD_CEBE = out5.COD_CEBE ;
out4_tmp.CEBE = out5.CEBE ;
out4_tmp.SERVICIOS_ID = out5.SERVICIOS_ID ;
out4_tmp.CECO_ID = out5.CECO_ID ;
out4_tmp.COD_CECO = out5.COD_CECO ;
out4_tmp.CECO = out5.CECO ;
out4_tmp.ESPECIALIDADES_ID = out5.ESPECIALIDADES_ID ;
out4_tmp.CUPS_ID = out5.CUPS_ID ;
out4_tmp.COD_CUPS = out5.COD_CUPS ;
out4_tmp.CUPS = out5.CUPS ;
out4_tmp.VCIND = Var.VCIND ;
out4_tmp.VTCIND = out5.VTCIND ;
out4_tmp.VMOD = Var.VMOD ;
out4_tmp.VTMOD = out5.VTMOD ;
out4_tmp.VMPD = Var.VMPD ;
out4_tmp.VTMPD = out5.VTMPD ;
out4_tmp.VRE = out5.VRE ;
out4_tmp.VTRE = out5.VTRE ;
out4_tmp.VTOTAL = (Var.VMOD.add(Var.VMPD)).add(Var.VCIND) ;
out4_tmp.VTOTAL_ESTANDAR = row15.VTOTAL ;
out4_tmp.TIPO = row15.BASE == null ? new BigDecimal(0) : row15.BASE ;
out4_tmp.VMOD_ESTANDAR = row15.VMOD_ESTANDAR ;
out4_tmp.VMPD_ESTANDAR = row15.VMPD_ESTANDAR  ;
out4_tmp.VCIND_ESTANDAR = row15.VCIND_ESTANDAR ;
out4 = out4_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "out6"
if(out6 != null) { 



	
	/**
	 * [tOracleOutput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out6"
						
						);
					}
					



        whetherReject_tOracleOutput_2 = false;
                    pstmt_tOracleOutput_2.setBigDecimal(1, out6.VALOR);

                    pstmt_tOracleOutput_2.setBigDecimal(2, out6.VMOD);

                    pstmt_tOracleOutput_2.setBigDecimal(3, out6.VMPD);

                    pstmt_tOracleOutput_2.setBigDecimal(4, out6.VCI);

                    if(out6.FMODIFICACION != null) {
pstmt_tOracleOutput_2.setObject(5, new java.sql.Timestamp(out6.FMODIFICACION.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_2.setNull(5, java.sql.Types.DATE);
}


                    pstmt_tOracleOutput_2.setBigDecimal(6 + count_tOracleOutput_2, out6.ID);

                pstmt_tOracleOutput_2.addBatch();
                nb_line_tOracleOutput_2++;
                batchSizeCounter_tOracleOutput_2++;
            if (batchSize_tOracleOutput_2 > 0 &&  batchSize_tOracleOutput_2 <= batchSizeCounter_tOracleOutput_2) {
                try {
                    pstmt_tOracleOutput_2.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
			        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
			    	String errormessage_tOracleOutput_2;
					if (ne_tOracleOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
						errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
					}else{
						errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_2);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
                    updatedCount_tOracleOutput_2
                += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                batchSizeCounter_tOracleOutput_2 = 0;
            }
                commitCounter_tOracleOutput_2++;
                if(commitEvery_tOracleOutput_2 <= commitCounter_tOracleOutput_2) {
                    if(batchSizeCounter_tOracleOutput_2 > 0) {
                        try {
                            pstmt_tOracleOutput_2.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
					        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
					    	String errormessage_tOracleOutput_2;
							if (ne_tOracleOutput_2 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
								errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
							}else{
								errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_2);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
                            updatedCount_tOracleOutput_2
                        += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                        rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_2 != 0){
                    	
                    }
                    conn_tOracleOutput_2.commit();
                    if(rowsToCommitCount_tOracleOutput_2 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_2 = 0;
                    }
                    commitCounter_tOracleOutput_2=0;
                    	batchSizeCounter_tOracleOutput_2=0;
                }

 


	tos_count_tOracleOutput_2++;

/**
 * [tOracleOutput_2 main ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_end ] stop
 */

} // End of branch "out6"




// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out4"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                        pstmt_tOracleOutput_1.setBigDecimal(1, out4.TIEMPOS_ID);

                        pstmt_tOracleOutput_1.setBigDecimal(2, out4.ANEXOS_ID);

                        pstmt_tOracleOutput_1.setBigDecimal(3, out4.UORG_ID);

                        if(out4.UORG == null) {
pstmt_tOracleOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(4, out4.UORG);
}

                        pstmt_tOracleOutput_1.setBigDecimal(5, out4.CEBE_ID);

                        if(out4.COD_CEBE == null) {
pstmt_tOracleOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(6, out4.COD_CEBE);
}

                        if(out4.CEBE == null) {
pstmt_tOracleOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(7, out4.CEBE);
}

                        pstmt_tOracleOutput_1.setBigDecimal(8, out4.SERVICIOS_ID);

                        pstmt_tOracleOutput_1.setBigDecimal(9, out4.CECO_ID);

                        if(out4.COD_CECO == null) {
pstmt_tOracleOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(10, out4.COD_CECO);
}

                        if(out4.CECO == null) {
pstmt_tOracleOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(11, out4.CECO);
}

                        pstmt_tOracleOutput_1.setBigDecimal(12, out4.ESPECIALIDADES_ID);

                        pstmt_tOracleOutput_1.setBigDecimal(13, out4.CUPS_ID);

                        if(out4.COD_CUPS == null) {
pstmt_tOracleOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(14, out4.COD_CUPS);
}

                        if(out4.CUPS == null) {
pstmt_tOracleOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(15, out4.CUPS);
}

                        pstmt_tOracleOutput_1.setBigDecimal(16, out4.VCIND);

                        pstmt_tOracleOutput_1.setBigDecimal(17, out4.VTCIND);

                        pstmt_tOracleOutput_1.setBigDecimal(18, out4.VMOD);

                        pstmt_tOracleOutput_1.setBigDecimal(19, out4.VTMOD);

                        pstmt_tOracleOutput_1.setBigDecimal(20, out4.VMPD);

                        pstmt_tOracleOutput_1.setBigDecimal(21, out4.VTMPD);

                        pstmt_tOracleOutput_1.setBigDecimal(22, out4.VRE);

                        pstmt_tOracleOutput_1.setBigDecimal(23, out4.VTRE);

                        pstmt_tOracleOutput_1.setBigDecimal(24, out4.VTOTAL);

                        pstmt_tOracleOutput_1.setBigDecimal(25, out4.VTOTAL_ESTANDAR);

                        pstmt_tOracleOutput_1.setBigDecimal(26, out4.TIPO);

                        pstmt_tOracleOutput_1.setBigDecimal(27, out4.VMOD_ESTANDAR);

                        pstmt_tOracleOutput_1.setBigDecimal(28, out4.VMPD_ESTANDAR);

                        pstmt_tOracleOutput_1.setBigDecimal(29, out4.VCIND_ESTANDAR);

                pstmt_tOracleOutput_1.addBatch();
                nb_line_tOracleOutput_1++;
                batchSizeCounter_tOracleOutput_1++;
            if (batchSize_tOracleOutput_1 > 0 &&  batchSize_tOracleOutput_1 <= batchSizeCounter_tOracleOutput_1) {
                try {
                    pstmt_tOracleOutput_1.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
			        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
			    	String errormessage_tOracleOutput_1;
					if (ne_tOracleOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
						errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
					}else{
						errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_1);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
                    insertedCount_tOracleOutput_1
                += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                batchSizeCounter_tOracleOutput_1 = 0;
            }
                commitCounter_tOracleOutput_1++;
                if(commitEvery_tOracleOutput_1 <= commitCounter_tOracleOutput_1) {
                    if(batchSizeCounter_tOracleOutput_1 > 0) {
                        try {
                            pstmt_tOracleOutput_1.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
					        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
					    	String errormessage_tOracleOutput_1;
							if (ne_tOracleOutput_1 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
								errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
							}else{
								errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_1);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
                            insertedCount_tOracleOutput_1
                        += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                        rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    }
                    conn_tOracleOutput_1.commit();
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_1 = 0;
                    }
                    commitCounter_tOracleOutput_1=0;
                    	batchSizeCounter_tOracleOutput_1=0;
                }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */

} // End of branch "out4"



	
		} // close loop of lookup 'row15' // G_TM_M_043
	
	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "out5"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "out1"



	
		} // close loop of lookup 'row10' // G_TM_M_043
		
		} // close loop of lookup 'row8' // G_TM_M_043
		
		} // close loop of lookup 'row7' // G_TM_M_043
		
		} // close loop of lookup 'row6' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "CI"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    		
    		mf_tHashInput_4.clearCache("tHashFile_CostosXCups_" + pid +"_tHashOutput_3");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CostosXCups_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row25 != null) {
						tHash_Lookup_row25.endGet();
					}
					globalMap.remove( "tHash_Lookup_row25" );

					
					
				
					if(tHash_Lookup_row26 != null) {
						tHash_Lookup_row26.endGet();
					}
					globalMap.remove( "tHash_Lookup_row26" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_out2 != null) {
						tHash_Lookup_out2.endGet();
					}
					globalMap.remove( "tHash_Lookup_out2" );

					
					
				
					if(tHash_Lookup_row12 != null) {
						tHash_Lookup_row12.endGet();
					}
					globalMap.remove( "tHash_Lookup_row12" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CI");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
					if(tHash_Lookup_row10 != null) {
						tHash_Lookup_row10.endGet();
					}
					globalMap.remove( "tHash_Lookup_row10" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row11 != null) {
						tHash_Lookup_row11.endGet();
					}
					globalMap.remove( "tHash_Lookup_row11" );

					
					
				
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
					if(tHash_Lookup_row18 != null) {
						tHash_Lookup_row18.endGet();
					}
					globalMap.remove( "tHash_Lookup_row18" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row16 != null) {
						tHash_Lookup_row16.endGet();
					}
					globalMap.remove( "tHash_Lookup_row16" );

					
					
				
					if(tHash_Lookup_row15 != null) {
						tHash_Lookup_row15.endGet();
					}
					globalMap.remove( "tHash_Lookup_row15" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out5");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tOracleOutput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_2 > 0) {
            try {
            	if (pstmt_tOracleOutput_2 != null) {
					
					pstmt_tOracleOutput_2.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
		        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
		    	String errormessage_tOracleOutput_2;
				if (ne_tOracleOutput_2 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
					errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
				}else{
					errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_2);
            	
        	}
        	if (pstmt_tOracleOutput_2 != null) {
            	tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_2
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
				rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
            }
        }
        if(pstmt_tOracleOutput_2 != null) {
			
				pstmt_tOracleOutput_2.close();
				resourceMap.remove("pstmt_tOracleOutput_2");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_2", true);
		if(commitCounter_tOracleOutput_2 > 0 && rowsToCommitCount_tOracleOutput_2 != 0) {
			
		}
		conn_tOracleOutput_2.commit();
		if(commitCounter_tOracleOutput_2 > 0 && rowsToCommitCount_tOracleOutput_2 != 0) {
			
			rowsToCommitCount_tOracleOutput_2 = 0;
		}
		commitCounter_tOracleOutput_2 = 0;
		
		
		conn_tOracleOutput_2 .close();
		
		resourceMap.put("finish_tOracleOutput_2", true);
   	

	
	nb_line_deleted_tOracleOutput_2=nb_line_deleted_tOracleOutput_2+ deletedCount_tOracleOutput_2;
	nb_line_update_tOracleOutput_2=nb_line_update_tOracleOutput_2 + updatedCount_tOracleOutput_2;
	nb_line_inserted_tOracleOutput_2=nb_line_inserted_tOracleOutput_2 + insertedCount_tOracleOutput_2;
	nb_line_rejected_tOracleOutput_2=nb_line_rejected_tOracleOutput_2 + rejectedCount_tOracleOutput_2;
	
        globalMap.put("tOracleOutput_2_NB_LINE",nb_line_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",nb_line_update_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out6");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_2", true);
end_Hash.put("tOracleOutput_2", System.currentTimeMillis());




/**
 * [tOracleOutput_2 end ] stop
 */




	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_1 > 0) {
            try {
            	if (pstmt_tOracleOutput_1 != null) {
					
					pstmt_tOracleOutput_1.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
		        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
		    	String errormessage_tOracleOutput_1;
				if (ne_tOracleOutput_1 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
					errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
				}else{
					errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_1);
            	
        	}
        	if (pstmt_tOracleOutput_1 != null) {
            	tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_1
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
				rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
            }
        }
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
		}
		conn_tOracleOutput_1.commit();
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
			rowsToCommitCount_tOracleOutput_1 = 0;
		}
		commitCounter_tOracleOutput_1 = 0;
		
		
		conn_tOracleOutput_1 .close();
		
		resourceMap.put("finish_tOracleOutput_1", true);
   	

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */


















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tFixedFlowInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row16"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row15"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row11"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row18"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row10"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_out2"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row12"); 
				     			
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row25"); 
				     			
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row26"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tOracleOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_2 = null;
                if ((pstmtToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_2")) != null) {
                    pstmtToClose_tOracleOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_2") == null){
            java.sql.Connection ctn_tOracleOutput_2 = null;
            if((ctn_tOracleOutput_2 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_2")) != null){
                try {
                    ctn_tOracleOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_2) {
                    String errorMessage_tOracleOutput_2 = "failed to close the connection in tOracleOutput_2 :" + sqlEx_tOracleOutput_2.getMessage();
                    System.err.println(errorMessage_tOracleOutput_2);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_2 finally ] stop
 */




	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_1") == null){
            java.sql.Connection ctn_tOracleOutput_1 = null;
            if((ctn_tOracleOutput_1 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_1")) != null){
                try {
                    ctn_tOracleOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_1) {
                    String errorMessage_tOracleOutput_1 = "failed to close the connection in tOracleOutput_1 :" + sqlEx_tOracleOutput_1.getMessage();
                    System.err.println(errorMessage_tOracleOutput_1);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public String Periodo;

				public String getPeriodo () {
					return this.Periodo;
				}

				public Boolean PeriodoIsNullable(){
				    return true;
				}
				public Boolean PeriodoIsKey(){
				    return false;
				}
				public Integer PeriodoLength(){
				    return null;
				}
				public Integer PeriodoPrecision(){
				    return null;
				}
				public String PeriodoDefault(){
				
					return null;
				
				}
				public String PeriodoComment(){
				
				    return "";
				
				}
				public String PeriodoPattern(){
				
					return "";
				
				}
				public String PeriodoOriginalDbColumnName(){
				
					return "Periodo";
				
				}

				
			    public String sproc;

				public String getSproc () {
					return this.sproc;
				}

				public Boolean sprocIsNullable(){
				    return true;
				}
				public Boolean sprocIsKey(){
				    return false;
				}
				public Integer sprocLength(){
				    return null;
				}
				public Integer sprocPrecision(){
				    return null;
				}
				public String sprocDefault(){
				
					return null;
				
				}
				public String sprocComment(){
				
				    return "";
				
				}
				public String sprocPattern(){
				
					return "";
				
				}
				public String sprocOriginalDbColumnName(){
				
					return "sproc";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
					this.Periodo = readString(dis);
					
					this.sproc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
					this.Periodo = readString(dis);
					
					this.sproc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Periodo,dos);
					
					// String
				
						writeString(this.sproc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Periodo,dos);
					
					// String
				
						writeString(this.sproc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Periodo="+Periodo);
		sb.append(",sproc="+sproc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];

	
			    public String Periodo;

				public String getPeriodo () {
					return this.Periodo;
				}

				public Boolean PeriodoIsNullable(){
				    return true;
				}
				public Boolean PeriodoIsKey(){
				    return false;
				}
				public Integer PeriodoLength(){
				    return null;
				}
				public Integer PeriodoPrecision(){
				    return null;
				}
				public String PeriodoDefault(){
				
					return null;
				
				}
				public String PeriodoComment(){
				
				    return "";
				
				}
				public String PeriodoPattern(){
				
					return "";
				
				}
				public String PeriodoOriginalDbColumnName(){
				
					return "Periodo";
				
				}

				
			    public String sproc;

				public String getSproc () {
					return this.sproc;
				}

				public Boolean sprocIsNullable(){
				    return true;
				}
				public Boolean sprocIsKey(){
				    return false;
				}
				public Integer sprocLength(){
				    return null;
				}
				public Integer sprocPrecision(){
				    return null;
				}
				public String sprocDefault(){
				
					return null;
				
				}
				public String sprocComment(){
				
				    return "";
				
				}
				public String sprocPattern(){
				
					return "";
				
				}
				public String sprocOriginalDbColumnName(){
				
					return "sproc";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length) {
				if(length < 1024 && commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups.length == 0) {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[1024];
				} else {
   					commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length);
			strReturn = new String(commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
					this.Periodo = readString(dis);
					
					this.sproc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
					this.Periodo = readString(dis);
					
					this.sproc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Periodo,dos);
					
					// String
				
						writeString(this.sproc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Periodo,dos);
					
					// String
				
						writeString(this.sproc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Periodo="+Periodo);
		sb.append(",sproc="+sproc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();
row21Struct row21 = new row21Struct();





	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tOracleSP_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_1", false);
		start_Hash.put("tOracleSP_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tOracleSP_1 = 0;
		

	java.sql.Connection connection_tOracleSP_1 = null;
	connection_tOracleSP_1 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_1 = connection_tOracleSP_1.prepareCall("{call " + "REP.InsCostosvsPresupuesto" + "(?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_1;
String tmpString_tOracleSP_1;

 



/**
 * [tOracleSP_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row20.Periodo = context.PERIODO;
    	            	        	            	
    	            		row20.sproc = null;        	            	
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_1 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					

			// code for the argument 1 (Periodo) of type 'IN AUTOMAPPING'
    					if (row20.Periodo == null) {
    						statement_tOracleSP_1.setNull(1, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_1.setString(1, row20.Periodo);
    					}
    					
			// code for the argument 2 (sproc) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_1.registerOutParameter(2, java.sql.Types.VARCHAR);
		statement_tOracleSP_1.execute();
		
								row21.Periodo = row20.Periodo;
								
									row21.sproc = statement_tOracleSP_1.getString(2);
									
									if (statement_tOracleSP_1.wasNull()) {
										row21.sproc = null;
									}
									

 


	tos_count_tOracleSP_1++;

/**
 * [tOracleSP_1 main ] stop
 */
	
	/**
	 * [tOracleSP_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					

    /*Convierte el string a un objeto json*/
JSONObject data = new JSONObject(row21.sproc);

/*Obtiene la variable estado*/
context.ESTADO = Integer.parseInt(data.getString("State")); 

/*Obtiene la variable mensaje*/
context.MENSAJE = URLDecoder.decode(data.getString("Message"), "UTF-8");

/*Valida si el estado de ejecución fue erróneo y complementa el mensaje*/

if ( context.ESTADO.equals(0) ) {//Error en la ejecución del procedimiento estado = 0
	context.MENSAJE = context.MENSAJE + " Código SQL: "+data.getString("Sqlcode")+ ", Mensaje de error SQL: "+URLDecoder.decode(data.getString("Sqlerrm"), "UTF-8")+", Traza del error: "+URLDecoder.decode(data.getString("ErrorBacktrace"), "UTF-8")+" Parámetro de entrada periodo: "+context.PERIODO;   
}

/*Imprime variables de ejecución del procedimiento de control de los indicadores*/
System.out.println(" ");
System.out.println("Estado ejecución procedimiento: "+context.ESTADO);
System.out.println("Mensaje ejecución procedimiento: "+context.MENSAJE);
    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleSP_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tOracleSP_1 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	


	statement_tOracleSP_1.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tOracleSP_1", true);
end_Hash.put("tOracleSP_1", System.currentTimeMillis());




/**
 * [tOracleSP_1 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());

   			if (context.ESTADO.equals(0)) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tDie_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tOracleSP_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 6, context.MENSAJE, context.ESTADO);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 6);
	System.err.println(context.MENSAJE);
	
	globalMap.put("tDie_1_DIE_MESSAGE", context.MENSAJE);
	globalMap.put("tDie_1_DIE_MESSAGES", context.MENSAJE);
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
    	errorCode = new Integer(context.ESTADO);
        ((java.util.Map)threadLocal.get()).put("errorCode", new Integer(context.ESTADO));
        ((java.util.Map)threadLocal.get()).put("status", "failure");
        globalMap.put("tDie_1_DIE_CODE", errorCode);

    
	if(true){	
		TDieException e_tDie_1 = new TDieException();

		

		throw e_tDie_1;
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public static class row23Struct implements routines.system.IPersistableComparableLookupRow<row23Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ANEXOS_ID;

				public BigDecimal getANEXOS_ID () {
					return this.ANEXOS_ID;
				}

				public Boolean ANEXOS_IDIsNullable(){
				    return true;
				}
				public Boolean ANEXOS_IDIsKey(){
				    return false;
				}
				public Integer ANEXOS_IDLength(){
				    return 0;
				}
				public Integer ANEXOS_IDPrecision(){
				    return null;
				}
				public String ANEXOS_IDDefault(){
				
					return "";
				
				}
				public String ANEXOS_IDComment(){
				
				    return "";
				
				}
				public String ANEXOS_IDPattern(){
				
					return "";
				
				}
				public String ANEXOS_IDOriginalDbColumnName(){
				
					return "ANEXOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ANEXOS_ID == null) ? 0 : this.ANEXOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row23Struct other = (row23Struct) obj;
		
						if (this.ANEXOS_ID == null) {
							if (other.ANEXOS_ID != null)
								return false;
						
						} else if (!this.ANEXOS_ID.equals(other.ANEXOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row23Struct other) {

		other.ANEXOS_ID = this.ANEXOS_ID;
	            
	}

	public void copyKeysDataTo(row23Struct other) {

		other.ANEXOS_ID = this.ANEXOS_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ANEXOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ANEXOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ANEXOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ANEXOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ANEXOS_ID="+String.valueOf(ANEXOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ANEXOS_ID, other.ANEXOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row23Struct row23 = new row23Struct();




	
	/**
	 * [tAdvancedHash_row23 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row23", false);
		start_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row23";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tAdvancedHash_row23 = 0;
		

			   		// connection name:row23
			   		// source node:tOracleInput_14 - inputs:(after_tOracleInput_13) outputs:(row23,row23) | target node:tAdvancedHash_row23 - inputs:(row23) outputs:()
			   		// linked node: tMap_2 - inputs:(row22,row23) outputs:(out7)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row23 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row23Struct>getLookup(matchingModeEnum_row23);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row23", tHash_Lookup_row23);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row23 begin ] stop
 */



	
	/**
	 * [tOracleInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_14", false);
		start_Hash.put("tOracleInput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_14";
	
	
		int tos_count_tOracleInput_14 = 0;
		
	


	
		    int nb_line_tOracleInput_14 = 0;
		    java.sql.Connection conn_tOracleInput_14 = null;
				conn_tOracleInput_14 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_14 = false;
				boolean isConnectionWrapped_tOracleInput_14 = !(conn_tOracleInput_14 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_14.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_14 = null;
                if (isConnectionWrapped_tOracleInput_14) {
					unwrappedOraConn_tOracleInput_14 = conn_tOracleInput_14.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_14 != null) {
                        isTimeZoneNull_tOracleInput_14 = (unwrappedOraConn_tOracleInput_14.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_14 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_14).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_14) {
					java.sql.Statement stmtGetTZ_tOracleInput_14 = conn_tOracleInput_14.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_14 = stmtGetTZ_tOracleInput_14.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_14 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_14.next()) {
						sessionTimezone_tOracleInput_14 = rsGetTZ_tOracleInput_14.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_14 && unwrappedOraConn_tOracleInput_14 != null) {
                        unwrappedOraConn_tOracleInput_14.setSessionTimeZone(sessionTimezone_tOracleInput_14);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_14).setSessionTimeZone(sessionTimezone_tOracleInput_14);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_14 = conn_tOracleInput_14.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_14.setFetchSize(10000);


		    String dbquery_tOracleInput_14 = "select DISTINCT ANEXOS_ID\nfrom BCEC_VCUPSTOTAL";
		    

		    globalMap.put("tOracleInput_14_QUERY",dbquery_tOracleInput_14);

		    java.sql.ResultSet rs_tOracleInput_14 = null;

		    try {
		    	rs_tOracleInput_14 = stmt_tOracleInput_14.executeQuery(dbquery_tOracleInput_14);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_14 = rs_tOracleInput_14.getMetaData();
		    	int colQtyInRs_tOracleInput_14 = rsmd_tOracleInput_14.getColumnCount();

		    String tmpContent_tOracleInput_14 = null;
		    
		    
		    while (rs_tOracleInput_14.next()) {
		        nb_line_tOracleInput_14++;
		        
							if(colQtyInRs_tOracleInput_14 < 1) {
								row23.ANEXOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(1) != null) {
						row23.ANEXOS_ID = rs_tOracleInput_14.getBigDecimal(1);
					} else {
				
						row23.ANEXOS_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_14 begin ] stop
 */
	
	/**
	 * [tOracleInput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 


	tos_count_tOracleInput_14++;

/**
 * [tOracleInput_14 main ] stop
 */
	
	/**
	 * [tOracleInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					


			   
			   

					row23Struct row23_HashRow = new row23Struct();
		   	   	   
				
				row23_HashRow.ANEXOS_ID = row23.ANEXOS_ID;
				
			tHash_Lookup_row23.put(row23_HashRow);
			
            




 


	tos_count_tAdvancedHash_row23++;

/**
 * [tAdvancedHash_row23 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";
	
	

 



/**
 * [tAdvancedHash_row23 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";
	
	

 



/**
 * [tAdvancedHash_row23 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

}
}finally{
	if (rs_tOracleInput_14 != null) {
		rs_tOracleInput_14.close();
	}
	if (stmt_tOracleInput_14 != null) {
		stmt_tOracleInput_14.close();
	}
}

globalMap.put("tOracleInput_14_NB_LINE",nb_line_tOracleInput_14);
 

ok_Hash.put("tOracleInput_14", true);
end_Hash.put("tOracleInput_14", System.currentTimeMillis());




/**
 * [tOracleInput_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";
	
	

tHash_Lookup_row23.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row23", true);
end_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());




/**
 * [tAdvancedHash_row23 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";
	
	

 



/**
 * [tAdvancedHash_row23 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row25Struct implements routines.system.IPersistableComparableLookupRow<row25Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal VCIND;

				public BigDecimal getVCIND () {
					return this.VCIND;
				}

				public Boolean VCINDIsNullable(){
				    return false;
				}
				public Boolean VCINDIsKey(){
				    return false;
				}
				public Integer VCINDLength(){
				    return null;
				}
				public Integer VCINDPrecision(){
				    return null;
				}
				public String VCINDDefault(){
				
					return "";
				
				}
				public String VCINDComment(){
				
				    return "";
				
				}
				public String VCINDPattern(){
				
					return "";
				
				}
				public String VCINDOriginalDbColumnName(){
				
					return "VCIND";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.CEBE_ID == null) ? 0 : this.CEBE_ID.hashCode());
					
						result = prime * result + ((this.CECO_ID == null) ? 0 : this.CECO_ID.hashCode());
					
						result = prime * result + ((this.CUPS_ID == null) ? 0 : this.CUPS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row25Struct other = (row25Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.CEBE_ID == null) {
							if (other.CEBE_ID != null)
								return false;
						
						} else if (!this.CEBE_ID.equals(other.CEBE_ID))
						
							return false;
					
						if (this.CECO_ID == null) {
							if (other.CECO_ID != null)
								return false;
						
						} else if (!this.CECO_ID.equals(other.CECO_ID))
						
							return false;
					
						if (this.CUPS_ID == null) {
							if (other.CUPS_ID != null)
								return false;
						
						} else if (!this.CUPS_ID.equals(other.CUPS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row25Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.CEBE_ID = this.CEBE_ID;
	            other.CECO_ID = this.CECO_ID;
	            other.CUPS_ID = this.CUPS_ID;
	            other.VCIND = this.VCIND;
	            
	}

	public void copyKeysDataTo(row25Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.CEBE_ID = this.CEBE_ID;
	            	other.CECO_ID = this.CECO_ID;
	            	other.CUPS_ID = this.CUPS_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.VCIND = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.VCIND = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.VCIND);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VCIND);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",VCIND="+String.valueOf(VCIND));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CEBE_ID, other.CEBE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CECO_ID, other.CECO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CUPS_ID, other.CUPS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();




	
	/**
	 * [tAdvancedHash_row25 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row25", false);
		start_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row25";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tAdvancedHash_row25 = 0;
		

			   		// connection name:row25
			   		// source node:tOracleInput_7 - inputs:(after_tHashInput_4) outputs:(row25,row25) | target node:tAdvancedHash_row25 - inputs:(row25) outputs:()
			   		// linked node: tMap_7 - inputs:(row14,row25,row26) outputs:(CI)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row25 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row25Struct>getLookup(matchingModeEnum_row25);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row25", tHash_Lookup_row25);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row25 begin ] stop
 */



	
	/**
	 * [tOracleInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_7", false);
		start_Hash.put("tOracleInput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_7";
	
	
		int tos_count_tOracleInput_7 = 0;
		
	


	
		    int nb_line_tOracleInput_7 = 0;
		    java.sql.Connection conn_tOracleInput_7 = null;
				conn_tOracleInput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_7 = false;
				boolean isConnectionWrapped_tOracleInput_7 = !(conn_tOracleInput_7 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_7.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_7 = null;
                if (isConnectionWrapped_tOracleInput_7) {
					unwrappedOraConn_tOracleInput_7 = conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_7 != null) {
                        isTimeZoneNull_tOracleInput_7 = (unwrappedOraConn_tOracleInput_7.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_7 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_7).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_7) {
					java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_7 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_7.next()) {
						sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_7 && unwrappedOraConn_tOracleInput_7 != null) {
                        unwrappedOraConn_tOracleInput_7.setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_7).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_7.setFetchSize(1000);


		    String dbquery_tOracleInput_7 = "\nSELECT\n    VCR.UORG_ID,\n    VCR.CEBE_ID,\n    VCR.CECO_ID,    \n    VCR.CUPS_ID,\n    VCR.VALOR AS VCIND\nFROM\n   "
+" CEC_VCUPSCIREAL   VCR\n    INNER JOIN CEC_ANEXOS        CA ON CA.ID = VCR.ANEXOS_ID\nWHERE\n    VCR.ESTREGISTRO_ID = 1"
+"\n    AND VCR.ESTADO = 'Activo'\n    AND CA.ESTREGISTRO_ID = 1\n    AND CA.ESTADO = 'Activo'\n	AND CA.ID = "+context.ANEXO_ID+"\n	AND TO_CHAR ( VCR.PERIODO , 'YYYY-MM' ) ='"+context.PERIODO+"'";
		    

		    globalMap.put("tOracleInput_7_QUERY",dbquery_tOracleInput_7);

		    java.sql.ResultSet rs_tOracleInput_7 = null;

		    try {
		    	rs_tOracleInput_7 = stmt_tOracleInput_7.executeQuery(dbquery_tOracleInput_7);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7.getMetaData();
		    	int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7.getColumnCount();

		    String tmpContent_tOracleInput_7 = null;
		    
		    
		    while (rs_tOracleInput_7.next()) {
		        nb_line_tOracleInput_7++;
		        
							if(colQtyInRs_tOracleInput_7 < 1) {
								row25.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(1) != null) {
						row25.UORG_ID = rs_tOracleInput_7.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 2) {
								row25.CEBE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(2) != null) {
						row25.CEBE_ID = rs_tOracleInput_7.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 3) {
								row25.CECO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(3) != null) {
						row25.CECO_ID = rs_tOracleInput_7.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 4) {
								row25.CUPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(4) != null) {
						row25.CUPS_ID = rs_tOracleInput_7.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 5) {
								row25.VCIND = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(5) != null) {
						row25.VCIND = rs_tOracleInput_7.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_7 begin ] stop
 */
	
	/**
	 * [tOracleInput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 


	tos_count_tOracleInput_7++;

/**
 * [tOracleInput_7 main ] stop
 */
	
	/**
	 * [tOracleInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row25"
						
						);
					}
					


			   
			   

					row25Struct row25_HashRow = new row25Struct();
		   	   	   
				
				row25_HashRow.UORG_ID = row25.UORG_ID;
				
				row25_HashRow.CEBE_ID = row25.CEBE_ID;
				
				row25_HashRow.CECO_ID = row25.CECO_ID;
				
				row25_HashRow.CUPS_ID = row25.CUPS_ID;
				
				row25_HashRow.VCIND = row25.VCIND;
				
			tHash_Lookup_row25.put(row25_HashRow);
			
            




 


	tos_count_tAdvancedHash_row25++;

/**
 * [tAdvancedHash_row25 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	

 



/**
 * [tAdvancedHash_row25 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row25 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	

 



/**
 * [tAdvancedHash_row25 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

}
}finally{
	if (rs_tOracleInput_7 != null) {
		rs_tOracleInput_7.close();
	}
	if (stmt_tOracleInput_7 != null) {
		stmt_tOracleInput_7.close();
	}
}

globalMap.put("tOracleInput_7_NB_LINE",nb_line_tOracleInput_7);
 

ok_Hash.put("tOracleInput_7", true);
end_Hash.put("tOracleInput_7", System.currentTimeMillis());




/**
 * [tOracleInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	

tHash_Lookup_row25.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row25", true);
end_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());




/**
 * [tAdvancedHash_row25 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	

 



/**
 * [tAdvancedHash_row25 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row26Struct implements routines.system.IPersistableComparableLookupRow<row26Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal CANTIDAD_ATENCIONES_CUPS;

				public BigDecimal getCANTIDAD_ATENCIONES_CUPS () {
					return this.CANTIDAD_ATENCIONES_CUPS;
				}

				public Boolean CANTIDAD_ATENCIONES_CUPSIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_ATENCIONES_CUPSIsKey(){
				    return false;
				}
				public Integer CANTIDAD_ATENCIONES_CUPSLength(){
				    return null;
				}
				public Integer CANTIDAD_ATENCIONES_CUPSPrecision(){
				    return null;
				}
				public String CANTIDAD_ATENCIONES_CUPSDefault(){
				
					return "";
				
				}
				public String CANTIDAD_ATENCIONES_CUPSComment(){
				
				    return "";
				
				}
				public String CANTIDAD_ATENCIONES_CUPSPattern(){
				
					return "";
				
				}
				public String CANTIDAD_ATENCIONES_CUPSOriginalDbColumnName(){
				
					return "CANTIDAD_ATENCIONES_CUPS";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.CEBE_ID == null) ? 0 : this.CEBE_ID.hashCode());
					
						result = prime * result + ((this.CECO_ID == null) ? 0 : this.CECO_ID.hashCode());
					
						result = prime * result + ((this.CUPS_ID == null) ? 0 : this.CUPS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row26Struct other = (row26Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.CEBE_ID == null) {
							if (other.CEBE_ID != null)
								return false;
						
						} else if (!this.CEBE_ID.equals(other.CEBE_ID))
						
							return false;
					
						if (this.CECO_ID == null) {
							if (other.CECO_ID != null)
								return false;
						
						} else if (!this.CECO_ID.equals(other.CECO_ID))
						
							return false;
					
						if (this.CUPS_ID == null) {
							if (other.CUPS_ID != null)
								return false;
						
						} else if (!this.CUPS_ID.equals(other.CUPS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row26Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.CEBE_ID = this.CEBE_ID;
	            other.CECO_ID = this.CECO_ID;
	            other.CUPS_ID = this.CUPS_ID;
	            other.CANTIDAD_ATENCIONES_CUPS = this.CANTIDAD_ATENCIONES_CUPS;
	            
	}

	public void copyKeysDataTo(row26Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.CEBE_ID = this.CEBE_ID;
	            	other.CECO_ID = this.CECO_ID;
	            	other.CUPS_ID = this.CUPS_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.CANTIDAD_ATENCIONES_CUPS = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.CANTIDAD_ATENCIONES_CUPS = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.CANTIDAD_ATENCIONES_CUPS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CANTIDAD_ATENCIONES_CUPS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",CANTIDAD_ATENCIONES_CUPS="+String.valueOf(CANTIDAD_ATENCIONES_CUPS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CEBE_ID, other.CEBE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CECO_ID, other.CECO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CUPS_ID, other.CUPS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row26Struct row26 = new row26Struct();




	
	/**
	 * [tAdvancedHash_row26 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row26", false);
		start_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row26";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tAdvancedHash_row26 = 0;
		

			   		// connection name:row26
			   		// source node:tHashInput_1 - inputs:(after_tHashInput_4) outputs:(row26,row26) | target node:tAdvancedHash_row26 - inputs:(row26) outputs:()
			   		// linked node: tMap_7 - inputs:(row14,row25,row26) outputs:(CI)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row26 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row26Struct>getLookup(matchingModeEnum_row26);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row26", tHash_Lookup_row26);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row26 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row19Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_CostosXCups_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row19Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row19Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row26.UORG_ID = next_tHashInput_1.UORG_ID;
	row26.CEBE_ID = next_tHashInput_1.CEBE_ID;
	row26.CECO_ID = next_tHashInput_1.CECO_ID;
	row26.CUPS_ID = next_tHashInput_1.CUPS_ID;
	row26.CANTIDAD_ATENCIONES_CUPS = next_tHashInput_1.CANTIDAD_ATENCIONES_CUPS;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row26 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row26"
						
						);
					}
					


			   
			   

					row26Struct row26_HashRow = new row26Struct();
		   	   	   
				
				row26_HashRow.UORG_ID = row26.UORG_ID;
				
				row26_HashRow.CEBE_ID = row26.CEBE_ID;
				
				row26_HashRow.CECO_ID = row26.CECO_ID;
				
				row26_HashRow.CUPS_ID = row26.CUPS_ID;
				
				row26_HashRow.CANTIDAD_ATENCIONES_CUPS = row26.CANTIDAD_ATENCIONES_CUPS;
				
			tHash_Lookup_row26.put(row26_HashRow);
			
            




 


	tos_count_tAdvancedHash_row26++;

/**
 * [tAdvancedHash_row26 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";
	
	

 



/**
 * [tAdvancedHash_row26 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row26 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";
	
	

 



/**
 * [tAdvancedHash_row26 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CostosXCups_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row26 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";
	
	

tHash_Lookup_row26.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row26", true);
end_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());




/**
 * [tAdvancedHash_row26 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row26 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";
	
	

 



/**
 * [tAdvancedHash_row26 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableComparableLookupRow<out2Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal VTMOD;

				public BigDecimal getVTMOD () {
					return this.VTMOD;
				}

				public Boolean VTMODIsNullable(){
				    return true;
				}
				public Boolean VTMODIsKey(){
				    return false;
				}
				public Integer VTMODLength(){
				    return null;
				}
				public Integer VTMODPrecision(){
				    return null;
				}
				public String VTMODDefault(){
				
					return "";
				
				}
				public String VTMODComment(){
				
				    return "";
				
				}
				public String VTMODPattern(){
				
					return "";
				
				}
				public String VTMODOriginalDbColumnName(){
				
					return "VTMOD";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.CEBE_ID == null) ? 0 : this.CEBE_ID.hashCode());
					
						result = prime * result + ((this.CECO_ID == null) ? 0 : this.CECO_ID.hashCode());
					
						result = prime * result + ((this.CUPS_ID == null) ? 0 : this.CUPS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out2Struct other = (out2Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.CEBE_ID == null) {
							if (other.CEBE_ID != null)
								return false;
						
						} else if (!this.CEBE_ID.equals(other.CEBE_ID))
						
							return false;
					
						if (this.CECO_ID == null) {
							if (other.CECO_ID != null)
								return false;
						
						} else if (!this.CECO_ID.equals(other.CECO_ID))
						
							return false;
					
						if (this.CUPS_ID == null) {
							if (other.CUPS_ID != null)
								return false;
						
						} else if (!this.CUPS_ID.equals(other.CUPS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out2Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.CEBE_ID = this.CEBE_ID;
	            other.CECO_ID = this.CECO_ID;
	            other.CUPS_ID = this.CUPS_ID;
	            other.VTMOD = this.VTMOD;
	            
	}

	public void copyKeysDataTo(out2Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.CEBE_ID = this.CEBE_ID;
	            	other.CECO_ID = this.CECO_ID;
	            	other.CUPS_ID = this.CUPS_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.VTMOD = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.VTMOD = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.VTMOD);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VTMOD);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",VTMOD="+String.valueOf(VTMOD));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CEBE_ID, other.CEBE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CECO_ID, other.CECO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CUPS_ID, other.CUPS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		out2Struct out2 = new out2Struct();




	
	/**
	 * [tAdvancedHash_out2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_out2", false);
		start_Hash.put("tAdvancedHash_out2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_out2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tAdvancedHash_out2 = 0;
		

			   		// connection name:out2
			   		// source node:tOracleInput_6 - inputs:(after_tHashInput_4) outputs:(out2,out2) | target node:tAdvancedHash_out2 - inputs:(out2) outputs:()
			   		// linked node: tMap_3 - inputs:(CI,out2,row12) outputs:(out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_out2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<out2Struct> tHash_Lookup_out2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<out2Struct>getLookup(matchingModeEnum_out2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_out2", tHash_Lookup_out2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_out2 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_6.setFetchSize(1000);


		    String dbquery_tOracleInput_6 = "\nSELECT\n    AD.UORG_ID,\n    DAD.CEBE_ID,\n    DAD.CECO_ID,\n    DAD.REGISTRO_ID AS CUPS_ID,\n    SUM (NVL(PRO.VMOD, "
+"0)) AS VTMOD\nFROM\n    CEC_DADMISIONES   DAD\n    INNER JOIN ADM_ADMISIONES    AD ON DAD.ADMISIONES_ID = AD.ID\n    INN"
+"ER JOIN HCL_PROCESOSASISTENCIALES PRO ON DAD.PROCESOSASISTENCIALES_ID = PRO.ID\n    INNER JOIN CEC_CEBE          CB ON D"
+"AD.CEBE_ID = CB.ID\n    INNER JOIN CEC_CECO          CC ON DAD.CECO_ID = CC.ID    \nWHERE\n    AD.ESTREGISTRO_ID = 1\n  "
+"  AND DAD.ESTREGISTRO_ID = 1\n    AND DAD.TABLA = 'GEN_CUPS'        \n    AND TO_CHAR(AD.FFINAL, 'YYYY-MM') = '"+context.PERIODO+"' \nGROUP BY\n    AD.UORG_ID,\n    DAD.CEBE_ID,\n    DAD.CECO_ID,\n    DAD.REGISTRO_ID\n";
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								out2.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(1) != null) {
						out2.UORG_ID = rs_tOracleInput_6.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								out2.CEBE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(2) != null) {
						out2.CEBE_ID = rs_tOracleInput_6.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 3) {
								out2.CECO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(3) != null) {
						out2.CECO_ID = rs_tOracleInput_6.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 4) {
								out2.CUPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(4) != null) {
						out2.CUPS_ID = rs_tOracleInput_6.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 5) {
								out2.VTMOD = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(5) != null) {
						out2.VTMOD = rs_tOracleInput_6.getBigDecimal(5);
					} else {
				
						out2.VTMOD = null;
					}
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_out2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_out2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out2"
						
						);
					}
					


			   
			   

					out2Struct out2_HashRow = new out2Struct();
		   	   	   
				
				out2_HashRow.UORG_ID = out2.UORG_ID;
				
				out2_HashRow.CEBE_ID = out2.CEBE_ID;
				
				out2_HashRow.CECO_ID = out2.CECO_ID;
				
				out2_HashRow.CUPS_ID = out2.CUPS_ID;
				
				out2_HashRow.VTMOD = out2.VTMOD;
				
			tHash_Lookup_out2.put(out2_HashRow);
			
            




 


	tos_count_tAdvancedHash_out2++;

/**
 * [tAdvancedHash_out2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_out2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_out2";
	
	

 



/**
 * [tAdvancedHash_out2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_out2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_out2";
	
	

 



/**
 * [tAdvancedHash_out2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());




/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_out2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_out2";
	
	

tHash_Lookup_out2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_out2", true);
end_Hash.put("tAdvancedHash_out2", System.currentTimeMillis());




/**
 * [tAdvancedHash_out2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_out2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_out2";
	
	

 



/**
 * [tAdvancedHash_out2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal CANTIDAD_ATENCIONES_CUPS;

				public BigDecimal getCANTIDAD_ATENCIONES_CUPS () {
					return this.CANTIDAD_ATENCIONES_CUPS;
				}

				public Boolean CANTIDAD_ATENCIONES_CUPSIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_ATENCIONES_CUPSIsKey(){
				    return false;
				}
				public Integer CANTIDAD_ATENCIONES_CUPSLength(){
				    return null;
				}
				public Integer CANTIDAD_ATENCIONES_CUPSPrecision(){
				    return null;
				}
				public String CANTIDAD_ATENCIONES_CUPSDefault(){
				
					return "";
				
				}
				public String CANTIDAD_ATENCIONES_CUPSComment(){
				
				    return "";
				
				}
				public String CANTIDAD_ATENCIONES_CUPSPattern(){
				
					return "";
				
				}
				public String CANTIDAD_ATENCIONES_CUPSOriginalDbColumnName(){
				
					return "CANTIDAD_ATENCIONES_CUPS";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.CEBE_ID == null) ? 0 : this.CEBE_ID.hashCode());
					
						result = prime * result + ((this.CECO_ID == null) ? 0 : this.CECO_ID.hashCode());
					
						result = prime * result + ((this.CUPS_ID == null) ? 0 : this.CUPS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row12Struct other = (row12Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.CEBE_ID == null) {
							if (other.CEBE_ID != null)
								return false;
						
						} else if (!this.CEBE_ID.equals(other.CEBE_ID))
						
							return false;
					
						if (this.CECO_ID == null) {
							if (other.CECO_ID != null)
								return false;
						
						} else if (!this.CECO_ID.equals(other.CECO_ID))
						
							return false;
					
						if (this.CUPS_ID == null) {
							if (other.CUPS_ID != null)
								return false;
						
						} else if (!this.CUPS_ID.equals(other.CUPS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row12Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.CEBE_ID = this.CEBE_ID;
	            other.CECO_ID = this.CECO_ID;
	            other.CUPS_ID = this.CUPS_ID;
	            other.CANTIDAD_ATENCIONES_CUPS = this.CANTIDAD_ATENCIONES_CUPS;
	            
	}

	public void copyKeysDataTo(row12Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.CEBE_ID = this.CEBE_ID;
	            	other.CECO_ID = this.CECO_ID;
	            	other.CUPS_ID = this.CUPS_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.CANTIDAD_ATENCIONES_CUPS = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.CANTIDAD_ATENCIONES_CUPS = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.CANTIDAD_ATENCIONES_CUPS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CANTIDAD_ATENCIONES_CUPS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",CANTIDAD_ATENCIONES_CUPS="+String.valueOf(CANTIDAD_ATENCIONES_CUPS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CEBE_ID, other.CEBE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CECO_ID, other.CECO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CUPS_ID, other.CUPS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tAdvancedHash_row12 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row12", false);
		start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tAdvancedHash_row12 = 0;
		

			   		// connection name:row12
			   		// source node:tHashInput_2 - inputs:(after_tHashInput_4) outputs:(row12,row12) | target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
			   		// linked node: tMap_3 - inputs:(CI,out2,row12) outputs:(out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row12Struct>getLookup(matchingModeEnum_row12);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row12 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row19Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_CostosXCups_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row19Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row19Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row12.UORG_ID = next_tHashInput_2.UORG_ID;
	row12.CEBE_ID = next_tHashInput_2.CEBE_ID;
	row12.CECO_ID = next_tHashInput_2.CECO_ID;
	row12.CUPS_ID = next_tHashInput_2.CUPS_ID;
	row12.CANTIDAD_ATENCIONES_CUPS = next_tHashInput_2.CANTIDAD_ATENCIONES_CUPS;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					


			   
			   

					row12Struct row12_HashRow = new row12Struct();
		   	   	   
				
				row12_HashRow.UORG_ID = row12.UORG_ID;
				
				row12_HashRow.CEBE_ID = row12.CEBE_ID;
				
				row12_HashRow.CECO_ID = row12.CECO_ID;
				
				row12_HashRow.CUPS_ID = row12.CUPS_ID;
				
				row12_HashRow.CANTIDAD_ATENCIONES_CUPS = row12.CANTIDAD_ATENCIONES_CUPS;
				
			tHash_Lookup_row12.put(row12_HashRow);
			
            




 


	tos_count_tAdvancedHash_row12++;

/**
 * [tAdvancedHash_row12 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    		
    		mf_tHashInput_2.clearCache("tHashFile_CostosXCups_" + pid +"_tHashOutput_1");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CostosXCups_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

tHash_Lookup_row12.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row12", true);
end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());




/**
 * [tAdvancedHash_row12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return 0;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return 0;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public BigDecimal CONTEO_CUPS;

				public BigDecimal getCONTEO_CUPS () {
					return this.CONTEO_CUPS;
				}

				public Boolean CONTEO_CUPSIsNullable(){
				    return true;
				}
				public Boolean CONTEO_CUPSIsKey(){
				    return false;
				}
				public Integer CONTEO_CUPSLength(){
				    return 0;
				}
				public Integer CONTEO_CUPSPrecision(){
				    return 0;
				}
				public String CONTEO_CUPSDefault(){
				
					return "";
				
				}
				public String CONTEO_CUPSComment(){
				
				    return "";
				
				}
				public String CONTEO_CUPSPattern(){
				
					return "";
				
				}
				public String CONTEO_CUPSOriginalDbColumnName(){
				
					return "CONTEO_CUPS";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.CEBE_ID == null) ? 0 : this.CEBE_ID.hashCode());
					
						result = prime * result + ((this.CECO_ID == null) ? 0 : this.CECO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.CEBE_ID == null) {
							if (other.CEBE_ID != null)
								return false;
						
						} else if (!this.CEBE_ID.equals(other.CEBE_ID))
						
							return false;
					
						if (this.CECO_ID == null) {
							if (other.CECO_ID != null)
								return false;
						
						} else if (!this.CECO_ID.equals(other.CECO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.CEBE_ID = this.CEBE_ID;
	            other.CECO_ID = this.CECO_ID;
	            other.CONTEO_CUPS = this.CONTEO_CUPS;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.CEBE_ID = this.CEBE_ID;
	            	other.CECO_ID = this.CECO_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.CONTEO_CUPS = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.CONTEO_CUPS = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.CONTEO_CUPS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CONTEO_CUPS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",CONTEO_CUPS="+String.valueOf(CONTEO_CUPS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CEBE_ID, other.CEBE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CECO_ID, other.CECO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tHashInput_5 - inputs:(after_tHashInput_4) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_1 - inputs:(out3,row6,row7,row8,row10) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row29Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_CostosXCups_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row29Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    row29Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row6.UORG_ID = next_tHashInput_5.UORG_ID;
	row6.CEBE_ID = next_tHashInput_5.CEBE_ID;
	row6.CECO_ID = next_tHashInput_5.CECO_ID;
	row6.CONTEO_CUPS = next_tHashInput_5.CONTEO_CUPS;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.UORG_ID = row6.UORG_ID;
				
				row6_HashRow.CEBE_ID = row6.CEBE_ID;
				
				row6_HashRow.CECO_ID = row6.CECO_ID;
				
				row6_HashRow.CONTEO_CUPS = row6.CONTEO_CUPS;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    		
    		mf_tHashInput_5.clearCache("tHashFile_CostosXCups_" + pid +"_tHashOutput_4");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CostosXCups_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public BigDecimal VALOR_DISPENSACION;

				public BigDecimal getVALOR_DISPENSACION () {
					return this.VALOR_DISPENSACION;
				}

				public Boolean VALOR_DISPENSACIONIsNullable(){
				    return true;
				}
				public Boolean VALOR_DISPENSACIONIsKey(){
				    return false;
				}
				public Integer VALOR_DISPENSACIONLength(){
				    return null;
				}
				public Integer VALOR_DISPENSACIONPrecision(){
				    return null;
				}
				public String VALOR_DISPENSACIONDefault(){
				
					return "";
				
				}
				public String VALOR_DISPENSACIONComment(){
				
				    return "";
				
				}
				public String VALOR_DISPENSACIONPattern(){
				
					return "";
				
				}
				public String VALOR_DISPENSACIONOriginalDbColumnName(){
				
					return "VALOR_DISPENSACION";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.CEBE_ID == null) ? 0 : this.CEBE_ID.hashCode());
					
						result = prime * result + ((this.CECO_ID == null) ? 0 : this.CECO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.CEBE_ID == null) {
							if (other.CEBE_ID != null)
								return false;
						
						} else if (!this.CEBE_ID.equals(other.CEBE_ID))
						
							return false;
					
						if (this.CECO_ID == null) {
							if (other.CECO_ID != null)
								return false;
						
						} else if (!this.CECO_ID.equals(other.CECO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.CEBE_ID = this.CEBE_ID;
	            other.CECO_ID = this.CECO_ID;
	            other.VALOR_DISPENSACION = this.VALOR_DISPENSACION;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.CEBE_ID = this.CEBE_ID;
	            	other.CECO_ID = this.CECO_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.VALOR_DISPENSACION = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.VALOR_DISPENSACION = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.VALOR_DISPENSACION);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VALOR_DISPENSACION);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",VALOR_DISPENSACION="+String.valueOf(VALOR_DISPENSACION));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CEBE_ID, other.CEBE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CECO_ID, other.CECO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tAdvancedHash_row7 = 0;
		

			   		// connection name:row7
			   		// source node:tOracleInput_1 - inputs:(after_tHashInput_4) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_1 - inputs:(out3,row6,row7,row8,row10) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_1.setFetchSize(1000);


		    String dbquery_tOracleInput_1 = "\nSELECT\n    AD.UORG_ID,\n    DAD.CEBE_ID,\n    DAD.CECO_ID,    \n    SUM (NVL(DAD.VALOR,0)) AS VALOR_DISPENSACION\nFR"
+"OM\n    CEC_DADMISIONES   DAD\n    INNER JOIN ADM_ADMISIONES    AD ON DAD.ADMISIONES_ID = AD.ID     \nWHERE\n    AD.ESTR"
+"EGISTRO_ID = 1\n    AND DAD.ESTREGISTRO_ID = 1\n    AND DAD.TABLA <> 'GEN_CUPS'    \n    AND TO_CHAR(AD.FFINAL, 'YYYY-MM"
+"') = '"+context.PERIODO+"'\nGROUP BY    \n    AD.UORG_ID,\n    DAD.CEBE_ID,\n    DAD.CECO_ID\n";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row7.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row7.UORG_ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row7.CEBE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(2) != null) {
						row7.CEBE_ID = rs_tOracleInput_1.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row7.CECO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(3) != null) {
						row7.CECO_ID = rs_tOracleInput_1.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 4) {
								row7.VALOR_DISPENSACION = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(4) != null) {
						row7.VALOR_DISPENSACION = rs_tOracleInput_1.getBigDecimal(4);
					} else {
				
						row7.VALOR_DISPENSACION = null;
					}
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.UORG_ID = row7.UORG_ID;
				
				row7_HashRow.CEBE_ID = row7.CEBE_ID;
				
				row7_HashRow.CECO_ID = row7.CECO_ID;
				
				row7_HashRow.VALOR_DISPENSACION = row7.VALOR_DISPENSACION;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

tHash_Lookup_row7.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public BigDecimal VALOR_CARGUE;

				public BigDecimal getVALOR_CARGUE () {
					return this.VALOR_CARGUE;
				}

				public Boolean VALOR_CARGUEIsNullable(){
				    return true;
				}
				public Boolean VALOR_CARGUEIsKey(){
				    return false;
				}
				public Integer VALOR_CARGUELength(){
				    return null;
				}
				public Integer VALOR_CARGUEPrecision(){
				    return null;
				}
				public String VALOR_CARGUEDefault(){
				
					return "";
				
				}
				public String VALOR_CARGUEComment(){
				
				    return "";
				
				}
				public String VALOR_CARGUEPattern(){
				
					return "";
				
				}
				public String VALOR_CARGUEOriginalDbColumnName(){
				
					return "VALOR_CARGUE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.CEBE_ID == null) ? 0 : this.CEBE_ID.hashCode());
					
						result = prime * result + ((this.CECO_ID == null) ? 0 : this.CECO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.CEBE_ID == null) {
							if (other.CEBE_ID != null)
								return false;
						
						} else if (!this.CEBE_ID.equals(other.CEBE_ID))
						
							return false;
					
						if (this.CECO_ID == null) {
							if (other.CECO_ID != null)
								return false;
						
						} else if (!this.CECO_ID.equals(other.CECO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.CEBE_ID = this.CEBE_ID;
	            other.CECO_ID = this.CECO_ID;
	            other.VALOR_CARGUE = this.VALOR_CARGUE;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.CEBE_ID = this.CEBE_ID;
	            	other.CECO_ID = this.CECO_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.VALOR_CARGUE = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.VALOR_CARGUE = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.VALOR_CARGUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VALOR_CARGUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",VALOR_CARGUE="+String.valueOf(VALOR_CARGUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CEBE_ID, other.CEBE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CECO_ID, other.CECO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tOracleInput_16 - inputs:(after_tHashInput_4) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_1 - inputs:(out3,row6,row7,row8,row10) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tOracleInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_16", false);
		start_Hash.put("tOracleInput_16", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_16";
	
	
		int tos_count_tOracleInput_16 = 0;
		
	


	
		    int nb_line_tOracleInput_16 = 0;
		    java.sql.Connection conn_tOracleInput_16 = null;
				conn_tOracleInput_16 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_16 = false;
				boolean isConnectionWrapped_tOracleInput_16 = !(conn_tOracleInput_16 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_16.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_16 = null;
                if (isConnectionWrapped_tOracleInput_16) {
					unwrappedOraConn_tOracleInput_16 = conn_tOracleInput_16.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_16 != null) {
                        isTimeZoneNull_tOracleInput_16 = (unwrappedOraConn_tOracleInput_16.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_16 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_16).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_16) {
					java.sql.Statement stmtGetTZ_tOracleInput_16 = conn_tOracleInput_16.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_16 = stmtGetTZ_tOracleInput_16.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_16 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_16.next()) {
						sessionTimezone_tOracleInput_16 = rsGetTZ_tOracleInput_16.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_16 && unwrappedOraConn_tOracleInput_16 != null) {
                        unwrappedOraConn_tOracleInput_16.setSessionTimeZone(sessionTimezone_tOracleInput_16);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_16).setSessionTimeZone(sessionTimezone_tOracleInput_16);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_16 = conn_tOracleInput_16.createStatement();

		    String dbquery_tOracleInput_16 = "\nSELECT\n    CA.UORG_ID,\n    CC.CEBE_ID,\n    CC.ID AS CECO_ID,    \n    SUM( NVL(DA.VALOR, 0)) AS VALOR_CARGUE\nFROM"
+"\n    CEC_DCARGA           DA\n    INNER JOIN CEC_ANEXOS           CA ON DA.ANEXOS_ID = CA.ID\n        INNER JOIN AFI_ES"
+"TEXTDERECHOS   AE ON CA.ESTADOS_ID = AE.ID\n        INNER JOIN CEC_TANEXOS          CE ON CA.TANEXOS_ID = CE.ID\n       "
+" INNER JOIN GEN_UORG             GU ON CA.UORG_ID = GU.ID\n        INNER JOIN GEN_TUORG            GT ON GU.TUORG_ID = G"
+"T.ID\n    INNER JOIN CEC_TGASTOS          TG ON DA.TGASTOS_ID = TG.ID\n    INNER JOIN CEC_CECO             CC ON DA.CECO"
+"_ID = CC.ID       \nWHERE\n    AE.CODIGO = 6\n    AND TG.SIGLA = 'MATE'\n    AND CE.SIGLA = 'GGRL'\n    AND GT.NOMBRE IN"
+" ('ESM', 'SATELITE')\n    AND TO_CHAR(DA.PERIODO, 'YYYY-MM') = '"+context.PERIODO+"' \n    AND TO_CHAR(CA.PERIODO, 'YYYY-MM') = '"+context.PERIODO+"' \n    AND DA.ESTREGISTRO_ID = 1 \n    AND CA.ESTREGISTRO_ID = 1 AND CA.ESTADO = 'Activo'\n    AND AE.ESTREGISTRO_ID ="
+" 1\n    AND CE.ESTREGISTRO_ID = 1 AND CE.ESTADO = 'Activo'\n    AND GU.ESTREGISTRO_ID = 1 AND GU.ESTADO = 'Activo'\n    "
+"AND GT.ESTREGISTRO_ID = 1 AND GT.ESTADO = 'Activo'\n    AND TG.ESTREGISTRO_ID = 1 AND TG.ESTADO = 'Activo'\n    AND CC.E"
+"STREGISTRO_ID = 1 AND CC.ESTADO = 'Activo'     \nGROUP BY\n    CA.UORG_ID,\n    CC.CEBE_ID,\n    CC.ID\n";
		    

		    globalMap.put("tOracleInput_16_QUERY",dbquery_tOracleInput_16);

		    java.sql.ResultSet rs_tOracleInput_16 = null;

		    try {
		    	rs_tOracleInput_16 = stmt_tOracleInput_16.executeQuery(dbquery_tOracleInput_16);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_16 = rs_tOracleInput_16.getMetaData();
		    	int colQtyInRs_tOracleInput_16 = rsmd_tOracleInput_16.getColumnCount();

		    String tmpContent_tOracleInput_16 = null;
		    
		    
		    while (rs_tOracleInput_16.next()) {
		        nb_line_tOracleInput_16++;
		        
							if(colQtyInRs_tOracleInput_16 < 1) {
								row8.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(1) != null) {
						row8.UORG_ID = rs_tOracleInput_16.getBigDecimal(1);
					} else {
				
						row8.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_16 < 2) {
								row8.CEBE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(2) != null) {
						row8.CEBE_ID = rs_tOracleInput_16.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_16 < 3) {
								row8.CECO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(3) != null) {
						row8.CECO_ID = rs_tOracleInput_16.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_16 < 4) {
								row8.VALOR_CARGUE = null;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(4) != null) {
						row8.VALOR_CARGUE = rs_tOracleInput_16.getBigDecimal(4);
					} else {
				
						row8.VALOR_CARGUE = null;
					}
		                    }
					




 



/**
 * [tOracleInput_16 begin ] stop
 */
	
	/**
	 * [tOracleInput_16 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 


	tos_count_tOracleInput_16++;

/**
 * [tOracleInput_16 main ] stop
 */
	
	/**
	 * [tOracleInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.UORG_ID = row8.UORG_ID;
				
				row8_HashRow.CEBE_ID = row8.CEBE_ID;
				
				row8_HashRow.CECO_ID = row8.CECO_ID;
				
				row8_HashRow.VALOR_CARGUE = row8.VALOR_CARGUE;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_16 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

}
}finally{
	if (rs_tOracleInput_16 != null) {
		rs_tOracleInput_16.close();
	}
	if (stmt_tOracleInput_16 != null) {
		stmt_tOracleInput_16.close();
	}
}

globalMap.put("tOracleInput_16_NB_LINE",nb_line_tOracleInput_16);
 

ok_Hash.put("tOracleInput_16", true);
end_Hash.put("tOracleInput_16", System.currentTimeMillis());




/**
 * [tOracleInput_16 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

tHash_Lookup_row8.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_16 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableComparableLookupRow<row10Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return null;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return null;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public BigDecimal CANTIDAD_ATENCIONES_CECO;

				public BigDecimal getCANTIDAD_ATENCIONES_CECO () {
					return this.CANTIDAD_ATENCIONES_CECO;
				}

				public Boolean CANTIDAD_ATENCIONES_CECOIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_ATENCIONES_CECOIsKey(){
				    return false;
				}
				public Integer CANTIDAD_ATENCIONES_CECOLength(){
				    return null;
				}
				public Integer CANTIDAD_ATENCIONES_CECOPrecision(){
				    return null;
				}
				public String CANTIDAD_ATENCIONES_CECODefault(){
				
					return "";
				
				}
				public String CANTIDAD_ATENCIONES_CECOComment(){
				
				    return "";
				
				}
				public String CANTIDAD_ATENCIONES_CECOPattern(){
				
					return "";
				
				}
				public String CANTIDAD_ATENCIONES_CECOOriginalDbColumnName(){
				
					return "CANTIDAD_ATENCIONES_CECO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.CEBE_ID == null) ? 0 : this.CEBE_ID.hashCode());
					
						result = prime * result + ((this.CECO_ID == null) ? 0 : this.CECO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.CEBE_ID == null) {
							if (other.CEBE_ID != null)
								return false;
						
						} else if (!this.CEBE_ID.equals(other.CEBE_ID))
						
							return false;
					
						if (this.CECO_ID == null) {
							if (other.CECO_ID != null)
								return false;
						
						} else if (!this.CECO_ID.equals(other.CECO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.CEBE_ID = this.CEBE_ID;
	            other.CECO_ID = this.CECO_ID;
	            other.CANTIDAD_ATENCIONES_CECO = this.CANTIDAD_ATENCIONES_CECO;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.CEBE_ID = this.CEBE_ID;
	            	other.CECO_ID = this.CECO_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.CANTIDAD_ATENCIONES_CECO = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.CANTIDAD_ATENCIONES_CECO = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.CANTIDAD_ATENCIONES_CECO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CANTIDAD_ATENCIONES_CECO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",CANTIDAD_ATENCIONES_CECO="+String.valueOf(CANTIDAD_ATENCIONES_CECO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CEBE_ID, other.CEBE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CECO_ID, other.CECO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tAdvancedHash_row10 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row10", false);
		start_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tAdvancedHash_row10 = 0;
		

			   		// connection name:row10
			   		// source node:tHashInput_3 - inputs:(after_tHashInput_4) outputs:(row10,row10) | target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
			   		// linked node: tMap_1 - inputs:(out3,row6,row7,row8,row10) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row10Struct>getLookup(matchingModeEnum_row10);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row10 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row27Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_CostosXCups_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row27Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row27Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row10.UORG_ID = next_tHashInput_3.UORG_ID;
	row10.CEBE_ID = next_tHashInput_3.CEBE_ID;
	row10.CECO_ID = next_tHashInput_3.CECO_ID;
	row10.CANTIDAD_ATENCIONES_CECO = next_tHashInput_3.CANTIDAD_ATENCIONES_CECO;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					


			   
			   

					row10Struct row10_HashRow = new row10Struct();
		   	   	   
				
				row10_HashRow.UORG_ID = row10.UORG_ID;
				
				row10_HashRow.CEBE_ID = row10.CEBE_ID;
				
				row10_HashRow.CECO_ID = row10.CECO_ID;
				
				row10_HashRow.CANTIDAD_ATENCIONES_CECO = row10.CANTIDAD_ATENCIONES_CECO;
				
			tHash_Lookup_row10.put(row10_HashRow);
			
            




 


	tos_count_tAdvancedHash_row10++;

/**
 * [tAdvancedHash_row10 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    		
    		mf_tHashInput_3.clearCache("tHashFile_CostosXCups_" + pid +"_tHashOutput_2");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CostosXCups_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

tHash_Lookup_row10.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row10", true);
end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());




/**
 * [tAdvancedHash_row10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableComparableLookupRow<row11Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal SERVICIO_ID;

				public BigDecimal getSERVICIO_ID () {
					return this.SERVICIO_ID;
				}

				public Boolean SERVICIO_IDIsNullable(){
				    return true;
				}
				public Boolean SERVICIO_IDIsKey(){
				    return false;
				}
				public Integer SERVICIO_IDLength(){
				    return null;
				}
				public Integer SERVICIO_IDPrecision(){
				    return null;
				}
				public String SERVICIO_IDDefault(){
				
					return "";
				
				}
				public String SERVICIO_IDComment(){
				
				    return "";
				
				}
				public String SERVICIO_IDPattern(){
				
					return "";
				
				}
				public String SERVICIO_IDOriginalDbColumnName(){
				
					return "SERVICIO_ID";
				
				}

				
			    public BigDecimal UORG_CONTRATO;

				public BigDecimal getUORG_CONTRATO () {
					return this.UORG_CONTRATO;
				}

				public Boolean UORG_CONTRATOIsNullable(){
				    return true;
				}
				public Boolean UORG_CONTRATOIsKey(){
				    return false;
				}
				public Integer UORG_CONTRATOLength(){
				    return null;
				}
				public Integer UORG_CONTRATOPrecision(){
				    return null;
				}
				public String UORG_CONTRATODefault(){
				
					return "";
				
				}
				public String UORG_CONTRATOComment(){
				
				    return "";
				
				}
				public String UORG_CONTRATOPattern(){
				
					return "";
				
				}
				public String UORG_CONTRATOOriginalDbColumnName(){
				
					return "UORG_CONTRATO";
				
				}

				
			    public BigDecimal VCONSULTAS;

				public BigDecimal getVCONSULTAS () {
					return this.VCONSULTAS;
				}

				public Boolean VCONSULTASIsNullable(){
				    return true;
				}
				public Boolean VCONSULTASIsKey(){
				    return false;
				}
				public Integer VCONSULTASLength(){
				    return null;
				}
				public Integer VCONSULTASPrecision(){
				    return null;
				}
				public String VCONSULTASDefault(){
				
					return "";
				
				}
				public String VCONSULTASComment(){
				
				    return "";
				
				}
				public String VCONSULTASPattern(){
				
					return "";
				
				}
				public String VCONSULTASOriginalDbColumnName(){
				
					return "VCONSULTAS";
				
				}

				
			    public BigDecimal VTC;

				public BigDecimal getVTC () {
					return this.VTC;
				}

				public Boolean VTCIsNullable(){
				    return true;
				}
				public Boolean VTCIsKey(){
				    return false;
				}
				public Integer VTCLength(){
				    return null;
				}
				public Integer VTCPrecision(){
				    return null;
				}
				public String VTCDefault(){
				
					return "";
				
				}
				public String VTCComment(){
				
				    return "";
				
				}
				public String VTCPattern(){
				
					return "";
				
				}
				public String VTCOriginalDbColumnName(){
				
					return "VTC";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CUPS_ID == null) ? 0 : this.CUPS_ID.hashCode());
					
						result = prime * result + ((this.ESPECIALIDADES_ID == null) ? 0 : this.ESPECIALIDADES_ID.hashCode());
					
						result = prime * result + ((this.SERVICIO_ID == null) ? 0 : this.SERVICIO_ID.hashCode());
					
						result = prime * result + ((this.UORG_CONTRATO == null) ? 0 : this.UORG_CONTRATO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row11Struct other = (row11Struct) obj;
		
						if (this.CUPS_ID == null) {
							if (other.CUPS_ID != null)
								return false;
						
						} else if (!this.CUPS_ID.equals(other.CUPS_ID))
						
							return false;
					
						if (this.ESPECIALIDADES_ID == null) {
							if (other.ESPECIALIDADES_ID != null)
								return false;
						
						} else if (!this.ESPECIALIDADES_ID.equals(other.ESPECIALIDADES_ID))
						
							return false;
					
						if (this.SERVICIO_ID == null) {
							if (other.SERVICIO_ID != null)
								return false;
						
						} else if (!this.SERVICIO_ID.equals(other.SERVICIO_ID))
						
							return false;
					
						if (this.UORG_CONTRATO == null) {
							if (other.UORG_CONTRATO != null)
								return false;
						
						} else if (!this.UORG_CONTRATO.equals(other.UORG_CONTRATO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row11Struct other) {

		other.CUPS_ID = this.CUPS_ID;
	            other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            other.SERVICIO_ID = this.SERVICIO_ID;
	            other.UORG_CONTRATO = this.UORG_CONTRATO;
	            other.VCONSULTAS = this.VCONSULTAS;
	            other.VTC = this.VTC;
	            
	}

	public void copyKeysDataTo(row11Struct other) {

		other.CUPS_ID = this.CUPS_ID;
	            	other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            	other.SERVICIO_ID = this.SERVICIO_ID;
	            	other.UORG_CONTRATO = this.UORG_CONTRATO;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIO_ID = (BigDecimal) dis.readObject();
					
						this.UORG_CONTRATO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIO_ID = (BigDecimal) dis.readObject();
					
						this.UORG_CONTRATO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_CONTRATO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_CONTRATO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.VCONSULTAS = (BigDecimal) ois.readObject();
					
       			    	this.VTC = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.VCONSULTAS = (BigDecimal) objectIn.readObject();
					
       			    	this.VTC = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.VCONSULTAS);
					
       			    	oos.writeObject(this.VTC);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VCONSULTAS);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VTC);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",SERVICIO_ID="+String.valueOf(SERVICIO_ID));
		sb.append(",UORG_CONTRATO="+String.valueOf(UORG_CONTRATO));
		sb.append(",VCONSULTAS="+String.valueOf(VCONSULTAS));
		sb.append(",VTC="+String.valueOf(VTC));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CUPS_ID, other.CUPS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ESPECIALIDADES_ID, other.ESPECIALIDADES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SERVICIO_ID, other.SERVICIO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.UORG_CONTRATO, other.UORG_CONTRATO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tAdvancedHash_row11 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row11", false);
		start_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tAdvancedHash_row11 = 0;
		

			   		// connection name:row11
			   		// source node:tOracleInput_12 - inputs:(after_tHashInput_4) outputs:(row11,row11) | target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
			   		// linked node: tMap_5 - inputs:(out1,row11,row13,row18) outputs:(out5)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row11Struct>getLookup(matchingModeEnum_row11);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row11 begin ] stop
 */



	
	/**
	 * [tOracleInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_12", false);
		start_Hash.put("tOracleInput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_12";
	
	
		int tos_count_tOracleInput_12 = 0;
		
	


	
		    int nb_line_tOracleInput_12 = 0;
		    java.sql.Connection conn_tOracleInput_12 = null;
				conn_tOracleInput_12 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_12 = false;
				boolean isConnectionWrapped_tOracleInput_12 = !(conn_tOracleInput_12 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_12.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_12 = null;
                if (isConnectionWrapped_tOracleInput_12) {
					unwrappedOraConn_tOracleInput_12 = conn_tOracleInput_12.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_12 != null) {
                        isTimeZoneNull_tOracleInput_12 = (unwrappedOraConn_tOracleInput_12.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_12 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_12).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_12) {
					java.sql.Statement stmtGetTZ_tOracleInput_12 = conn_tOracleInput_12.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_12 = stmtGetTZ_tOracleInput_12.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_12 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_12.next()) {
						sessionTimezone_tOracleInput_12 = rsGetTZ_tOracleInput_12.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_12 && unwrappedOraConn_tOracleInput_12 != null) {
                        unwrappedOraConn_tOracleInput_12.setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_12).setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_12 = conn_tOracleInput_12.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_12.setFetchSize(1000);


		    String dbquery_tOracleInput_12 = "SELECT  RC.CUPS_ID\n        ,RC.ESPECIALIDADES_ID\n        ,RC.SERVICIO_ID\n        ,RC.UORG_CONTRATO\n        ,CASE \n"
+"          WHEN COUNT ( RC.ID )  > 0 \n          THEN SUM ( NVL( RC.VNETOPAGAR, 0 ) ) / COUNT ( RC.ID )\n          ELSE S"
+"UM ( NVL( RC.VNETOPAGAR, 0 ) )\n         END VCONSULTAS\n		,SUM ( NVL( RC.VNETOPAGAR, 0 ) ) AS VTC\nFROM BRIPS_CONSULTA "
+"RC\nWHERE TO_CHAR ( RC.FECHA , 'YYYY-MM' ) = '"+context.PERIODO+"'\n  AND RC.TRIPS = 'Externa'\nGROUP BY RC.CUPS_ID\n        ,RC.ESPECIALIDADES_ID\n        ,RC.SERVICIO_ID\n        ,RC"
+".UORG_CONTRATO";
		    

		    globalMap.put("tOracleInput_12_QUERY",dbquery_tOracleInput_12);

		    java.sql.ResultSet rs_tOracleInput_12 = null;

		    try {
		    	rs_tOracleInput_12 = stmt_tOracleInput_12.executeQuery(dbquery_tOracleInput_12);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_12 = rs_tOracleInput_12.getMetaData();
		    	int colQtyInRs_tOracleInput_12 = rsmd_tOracleInput_12.getColumnCount();

		    String tmpContent_tOracleInput_12 = null;
		    
		    
		    while (rs_tOracleInput_12.next()) {
		        nb_line_tOracleInput_12++;
		        
							if(colQtyInRs_tOracleInput_12 < 1) {
								row11.CUPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(1) != null) {
						row11.CUPS_ID = rs_tOracleInput_12.getBigDecimal(1);
					} else {
				
						row11.CUPS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 2) {
								row11.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(2) != null) {
						row11.ESPECIALIDADES_ID = rs_tOracleInput_12.getBigDecimal(2);
					} else {
				
						row11.ESPECIALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 3) {
								row11.SERVICIO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(3) != null) {
						row11.SERVICIO_ID = rs_tOracleInput_12.getBigDecimal(3);
					} else {
				
						row11.SERVICIO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 4) {
								row11.UORG_CONTRATO = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(4) != null) {
						row11.UORG_CONTRATO = rs_tOracleInput_12.getBigDecimal(4);
					} else {
				
						row11.UORG_CONTRATO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 5) {
								row11.VCONSULTAS = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(5) != null) {
						row11.VCONSULTAS = rs_tOracleInput_12.getBigDecimal(5);
					} else {
				
						row11.VCONSULTAS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 6) {
								row11.VTC = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(6) != null) {
						row11.VTC = rs_tOracleInput_12.getBigDecimal(6);
					} else {
				
						row11.VTC = null;
					}
		                    }
					




 



/**
 * [tOracleInput_12 begin ] stop
 */
	
	/**
	 * [tOracleInput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 


	tos_count_tOracleInput_12++;

/**
 * [tOracleInput_12 main ] stop
 */
	
	/**
	 * [tOracleInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					


			   
			   

					row11Struct row11_HashRow = new row11Struct();
		   	   	   
				
				row11_HashRow.CUPS_ID = row11.CUPS_ID;
				
				row11_HashRow.ESPECIALIDADES_ID = row11.ESPECIALIDADES_ID;
				
				row11_HashRow.SERVICIO_ID = row11.SERVICIO_ID;
				
				row11_HashRow.UORG_CONTRATO = row11.UORG_CONTRATO;
				
				row11_HashRow.VCONSULTAS = row11.VCONSULTAS;
				
				row11_HashRow.VTC = row11.VTC;
				
			tHash_Lookup_row11.put(row11_HashRow);
			
            




 


	tos_count_tAdvancedHash_row11++;

/**
 * [tAdvancedHash_row11 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	

 



/**
 * [tAdvancedHash_row11 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	

 



/**
 * [tAdvancedHash_row11 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

}
}finally{
	if (rs_tOracleInput_12 != null) {
		rs_tOracleInput_12.close();
	}
	if (stmt_tOracleInput_12 != null) {
		stmt_tOracleInput_12.close();
	}
}

globalMap.put("tOracleInput_12_NB_LINE",nb_line_tOracleInput_12);
 

ok_Hash.put("tOracleInput_12", true);
end_Hash.put("tOracleInput_12", System.currentTimeMillis());




/**
 * [tOracleInput_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	

tHash_Lookup_row11.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row11", true);
end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());




/**
 * [tAdvancedHash_row11 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	

 



/**
 * [tAdvancedHash_row11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return true;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return null;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return null;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal UORG_CONTRATO;

				public BigDecimal getUORG_CONTRATO () {
					return this.UORG_CONTRATO;
				}

				public Boolean UORG_CONTRATOIsNullable(){
				    return true;
				}
				public Boolean UORG_CONTRATOIsKey(){
				    return false;
				}
				public Integer UORG_CONTRATOLength(){
				    return null;
				}
				public Integer UORG_CONTRATOPrecision(){
				    return null;
				}
				public String UORG_CONTRATODefault(){
				
					return "";
				
				}
				public String UORG_CONTRATOComment(){
				
				    return "";
				
				}
				public String UORG_CONTRATOPattern(){
				
					return "";
				
				}
				public String UORG_CONTRATOOriginalDbColumnName(){
				
					return "UORG_CONTRATO";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal VPROCEDIMIENTOS;

				public BigDecimal getVPROCEDIMIENTOS () {
					return this.VPROCEDIMIENTOS;
				}

				public Boolean VPROCEDIMIENTOSIsNullable(){
				    return true;
				}
				public Boolean VPROCEDIMIENTOSIsKey(){
				    return false;
				}
				public Integer VPROCEDIMIENTOSLength(){
				    return null;
				}
				public Integer VPROCEDIMIENTOSPrecision(){
				    return null;
				}
				public String VPROCEDIMIENTOSDefault(){
				
					return "";
				
				}
				public String VPROCEDIMIENTOSComment(){
				
				    return "";
				
				}
				public String VPROCEDIMIENTOSPattern(){
				
					return "";
				
				}
				public String VPROCEDIMIENTOSOriginalDbColumnName(){
				
					return "VPROCEDIMIENTOS";
				
				}

				
			    public BigDecimal VTP;

				public BigDecimal getVTP () {
					return this.VTP;
				}

				public Boolean VTPIsNullable(){
				    return true;
				}
				public Boolean VTPIsKey(){
				    return false;
				}
				public Integer VTPLength(){
				    return null;
				}
				public Integer VTPPrecision(){
				    return null;
				}
				public String VTPDefault(){
				
					return "";
				
				}
				public String VTPComment(){
				
				    return "";
				
				}
				public String VTPPattern(){
				
					return "";
				
				}
				public String VTPOriginalDbColumnName(){
				
					return "VTP";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ESPECIALIDADES_ID == null) ? 0 : this.ESPECIALIDADES_ID.hashCode());
					
						result = prime * result + ((this.SERVICIOS_ID == null) ? 0 : this.SERVICIOS_ID.hashCode());
					
						result = prime * result + ((this.UORG_CONTRATO == null) ? 0 : this.UORG_CONTRATO.hashCode());
					
						result = prime * result + ((this.CUPS_ID == null) ? 0 : this.CUPS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.ESPECIALIDADES_ID == null) {
							if (other.ESPECIALIDADES_ID != null)
								return false;
						
						} else if (!this.ESPECIALIDADES_ID.equals(other.ESPECIALIDADES_ID))
						
							return false;
					
						if (this.SERVICIOS_ID == null) {
							if (other.SERVICIOS_ID != null)
								return false;
						
						} else if (!this.SERVICIOS_ID.equals(other.SERVICIOS_ID))
						
							return false;
					
						if (this.UORG_CONTRATO == null) {
							if (other.UORG_CONTRATO != null)
								return false;
						
						} else if (!this.UORG_CONTRATO.equals(other.UORG_CONTRATO))
						
							return false;
					
						if (this.CUPS_ID == null) {
							if (other.CUPS_ID != null)
								return false;
						
						} else if (!this.CUPS_ID.equals(other.CUPS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            other.SERVICIOS_ID = this.SERVICIOS_ID;
	            other.UORG_CONTRATO = this.UORG_CONTRATO;
	            other.CUPS_ID = this.CUPS_ID;
	            other.VPROCEDIMIENTOS = this.VPROCEDIMIENTOS;
	            other.VTP = this.VTP;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            	other.SERVICIOS_ID = this.SERVICIOS_ID;
	            	other.UORG_CONTRATO = this.UORG_CONTRATO;
	            	other.CUPS_ID = this.CUPS_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_CONTRATO = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_CONTRATO = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_CONTRATO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_CONTRATO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.VPROCEDIMIENTOS = (BigDecimal) ois.readObject();
					
       			    	this.VTP = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.VPROCEDIMIENTOS = (BigDecimal) objectIn.readObject();
					
       			    	this.VTP = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.VPROCEDIMIENTOS);
					
       			    	oos.writeObject(this.VTP);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VPROCEDIMIENTOS);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VTP);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",UORG_CONTRATO="+String.valueOf(UORG_CONTRATO));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",VPROCEDIMIENTOS="+String.valueOf(VPROCEDIMIENTOS));
		sb.append(",VTP="+String.valueOf(VTP));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ESPECIALIDADES_ID, other.ESPECIALIDADES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SERVICIOS_ID, other.SERVICIOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.UORG_CONTRATO, other.UORG_CONTRATO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CUPS_ID, other.CUPS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tOracleInput_11 - inputs:(after_tHashInput_4) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_5 - inputs:(out1,row11,row13,row18) outputs:(out5)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tOracleInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_11", false);
		start_Hash.put("tOracleInput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_11";
	
	
		int tos_count_tOracleInput_11 = 0;
		
	


	
		    int nb_line_tOracleInput_11 = 0;
		    java.sql.Connection conn_tOracleInput_11 = null;
				conn_tOracleInput_11 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_11 = false;
				boolean isConnectionWrapped_tOracleInput_11 = !(conn_tOracleInput_11 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_11.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_11 = null;
                if (isConnectionWrapped_tOracleInput_11) {
					unwrappedOraConn_tOracleInput_11 = conn_tOracleInput_11.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_11 != null) {
                        isTimeZoneNull_tOracleInput_11 = (unwrappedOraConn_tOracleInput_11.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_11 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_11).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_11) {
					java.sql.Statement stmtGetTZ_tOracleInput_11 = conn_tOracleInput_11.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_11 = stmtGetTZ_tOracleInput_11.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_11 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_11.next()) {
						sessionTimezone_tOracleInput_11 = rsGetTZ_tOracleInput_11.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_11 && unwrappedOraConn_tOracleInput_11 != null) {
                        unwrappedOraConn_tOracleInput_11.setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_11).setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_11 = conn_tOracleInput_11.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_11.setFetchSize(1000);


		    String dbquery_tOracleInput_11 = "SELECT  RP.ESPECIALIDADES_ID\n        ,RP.SERVICIOS_ID\n        ,RP.UORG_CONTRATO\n        ,RP.CUPS_ID\n        ,CASE "
+"\n            WHEN COUNT ( RP.ID ) > 0\n            THEN SUM( RP.VPROCEDIMIENTO )/COUNT ( RP.ID )\n            ELSE SUM( "
+"RP.VPROCEDIMIENTO )\n         END AS VPROCEDIMIENTOS\n		,SUM( RP.VPROCEDIMIENTO ) AS VTP\nFROM BRIPS_PROCEDIMIENTOS RP\n"
+"WHERE TO_CHAR ( RP.FECHA , 'YYYY-MM' ) =  '"+context.PERIODO+"'\n  AND RP.TRIPS = 'Externa'\nGROUP BY RP.ESPECIALIDADES_ID\n        ,RP.SERVICIOS_ID\n        ,RP.UORG_CONTRATO\n    "
+"    ,RP.CUPS_ID";
		    

		    globalMap.put("tOracleInput_11_QUERY",dbquery_tOracleInput_11);

		    java.sql.ResultSet rs_tOracleInput_11 = null;

		    try {
		    	rs_tOracleInput_11 = stmt_tOracleInput_11.executeQuery(dbquery_tOracleInput_11);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_11 = rs_tOracleInput_11.getMetaData();
		    	int colQtyInRs_tOracleInput_11 = rsmd_tOracleInput_11.getColumnCount();

		    String tmpContent_tOracleInput_11 = null;
		    
		    
		    while (rs_tOracleInput_11.next()) {
		        nb_line_tOracleInput_11++;
		        
							if(colQtyInRs_tOracleInput_11 < 1) {
								row13.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(1) != null) {
						row13.ESPECIALIDADES_ID = rs_tOracleInput_11.getBigDecimal(1);
					} else {
				
						row13.ESPECIALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 2) {
								row13.SERVICIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(2) != null) {
						row13.SERVICIOS_ID = rs_tOracleInput_11.getBigDecimal(2);
					} else {
				
						row13.SERVICIOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 3) {
								row13.UORG_CONTRATO = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(3) != null) {
						row13.UORG_CONTRATO = rs_tOracleInput_11.getBigDecimal(3);
					} else {
				
						row13.UORG_CONTRATO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 4) {
								row13.CUPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(4) != null) {
						row13.CUPS_ID = rs_tOracleInput_11.getBigDecimal(4);
					} else {
				
						row13.CUPS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 5) {
								row13.VPROCEDIMIENTOS = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(5) != null) {
						row13.VPROCEDIMIENTOS = rs_tOracleInput_11.getBigDecimal(5);
					} else {
				
						row13.VPROCEDIMIENTOS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 6) {
								row13.VTP = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(6) != null) {
						row13.VTP = rs_tOracleInput_11.getBigDecimal(6);
					} else {
				
						row13.VTP = null;
					}
		                    }
					




 



/**
 * [tOracleInput_11 begin ] stop
 */
	
	/**
	 * [tOracleInput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 


	tos_count_tOracleInput_11++;

/**
 * [tOracleInput_11 main ] stop
 */
	
	/**
	 * [tOracleInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.ESPECIALIDADES_ID = row13.ESPECIALIDADES_ID;
				
				row13_HashRow.SERVICIOS_ID = row13.SERVICIOS_ID;
				
				row13_HashRow.UORG_CONTRATO = row13.UORG_CONTRATO;
				
				row13_HashRow.CUPS_ID = row13.CUPS_ID;
				
				row13_HashRow.VPROCEDIMIENTOS = row13.VPROCEDIMIENTOS;
				
				row13_HashRow.VTP = row13.VTP;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

}
}finally{
	if (rs_tOracleInput_11 != null) {
		rs_tOracleInput_11.close();
	}
	if (stmt_tOracleInput_11 != null) {
		stmt_tOracleInput_11.close();
	}
}

globalMap.put("tOracleInput_11_NB_LINE",nb_line_tOracleInput_11);
 

ok_Hash.put("tOracleInput_11", true);
end_Hash.put("tOracleInput_11", System.currentTimeMillis());




/**
 * [tOracleInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

tHash_Lookup_row13.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableComparableLookupRow<row18Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return true;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return null;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return null;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal UORG_CONTRATO;

				public BigDecimal getUORG_CONTRATO () {
					return this.UORG_CONTRATO;
				}

				public Boolean UORG_CONTRATOIsNullable(){
				    return true;
				}
				public Boolean UORG_CONTRATOIsKey(){
				    return false;
				}
				public Integer UORG_CONTRATOLength(){
				    return null;
				}
				public Integer UORG_CONTRATOPrecision(){
				    return null;
				}
				public String UORG_CONTRATODefault(){
				
					return "";
				
				}
				public String UORG_CONTRATOComment(){
				
				    return "";
				
				}
				public String UORG_CONTRATOPattern(){
				
					return "";
				
				}
				public String UORG_CONTRATOOriginalDbColumnName(){
				
					return "UORG_CONTRATO";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal VOTROSSERVICIOS;

				public BigDecimal getVOTROSSERVICIOS () {
					return this.VOTROSSERVICIOS;
				}

				public Boolean VOTROSSERVICIOSIsNullable(){
				    return true;
				}
				public Boolean VOTROSSERVICIOSIsKey(){
				    return false;
				}
				public Integer VOTROSSERVICIOSLength(){
				    return null;
				}
				public Integer VOTROSSERVICIOSPrecision(){
				    return null;
				}
				public String VOTROSSERVICIOSDefault(){
				
					return "";
				
				}
				public String VOTROSSERVICIOSComment(){
				
				    return "";
				
				}
				public String VOTROSSERVICIOSPattern(){
				
					return "";
				
				}
				public String VOTROSSERVICIOSOriginalDbColumnName(){
				
					return "VOTROSSERVICIOS";
				
				}

				
			    public BigDecimal VTOS;

				public BigDecimal getVTOS () {
					return this.VTOS;
				}

				public Boolean VTOSIsNullable(){
				    return true;
				}
				public Boolean VTOSIsKey(){
				    return false;
				}
				public Integer VTOSLength(){
				    return null;
				}
				public Integer VTOSPrecision(){
				    return null;
				}
				public String VTOSDefault(){
				
					return "";
				
				}
				public String VTOSComment(){
				
				    return "";
				
				}
				public String VTOSPattern(){
				
					return "";
				
				}
				public String VTOSOriginalDbColumnName(){
				
					return "VTOS";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ESPECIALIDADES_ID == null) ? 0 : this.ESPECIALIDADES_ID.hashCode());
					
						result = prime * result + ((this.SERVICIOS_ID == null) ? 0 : this.SERVICIOS_ID.hashCode());
					
						result = prime * result + ((this.UORG_CONTRATO == null) ? 0 : this.UORG_CONTRATO.hashCode());
					
						result = prime * result + ((this.CUPS_ID == null) ? 0 : this.CUPS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.ESPECIALIDADES_ID == null) {
							if (other.ESPECIALIDADES_ID != null)
								return false;
						
						} else if (!this.ESPECIALIDADES_ID.equals(other.ESPECIALIDADES_ID))
						
							return false;
					
						if (this.SERVICIOS_ID == null) {
							if (other.SERVICIOS_ID != null)
								return false;
						
						} else if (!this.SERVICIOS_ID.equals(other.SERVICIOS_ID))
						
							return false;
					
						if (this.UORG_CONTRATO == null) {
							if (other.UORG_CONTRATO != null)
								return false;
						
						} else if (!this.UORG_CONTRATO.equals(other.UORG_CONTRATO))
						
							return false;
					
						if (this.CUPS_ID == null) {
							if (other.CUPS_ID != null)
								return false;
						
						} else if (!this.CUPS_ID.equals(other.CUPS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            other.SERVICIOS_ID = this.SERVICIOS_ID;
	            other.UORG_CONTRATO = this.UORG_CONTRATO;
	            other.CUPS_ID = this.CUPS_ID;
	            other.VOTROSSERVICIOS = this.VOTROSSERVICIOS;
	            other.VTOS = this.VTOS;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            	other.SERVICIOS_ID = this.SERVICIOS_ID;
	            	other.UORG_CONTRATO = this.UORG_CONTRATO;
	            	other.CUPS_ID = this.CUPS_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_CONTRATO = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_CONTRATO = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_CONTRATO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_CONTRATO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.VOTROSSERVICIOS = (BigDecimal) ois.readObject();
					
       			    	this.VTOS = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.VOTROSSERVICIOS = (BigDecimal) objectIn.readObject();
					
       			    	this.VTOS = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.VOTROSSERVICIOS);
					
       			    	oos.writeObject(this.VTOS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VOTROSSERVICIOS);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VTOS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",UORG_CONTRATO="+String.valueOf(UORG_CONTRATO));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",VOTROSSERVICIOS="+String.valueOf(VOTROSSERVICIOS));
		sb.append(",VTOS="+String.valueOf(VTOS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ESPECIALIDADES_ID, other.ESPECIALIDADES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SERVICIOS_ID, other.SERVICIOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.UORG_CONTRATO, other.UORG_CONTRATO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CUPS_ID, other.CUPS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tAdvancedHash_row18 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row18", false);
		start_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tAdvancedHash_row18 = 0;
		

			   		// connection name:row18
			   		// source node:tOracleInput_10 - inputs:(after_tHashInput_4) outputs:(row18,row18) | target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
			   		// linked node: tMap_5 - inputs:(out1,row11,row13,row18) outputs:(out5)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row18Struct>getLookup(matchingModeEnum_row18);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row18 begin ] stop
 */



	
	/**
	 * [tOracleInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_10", false);
		start_Hash.put("tOracleInput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_10";
	
	
		int tos_count_tOracleInput_10 = 0;
		
	


	
		    int nb_line_tOracleInput_10 = 0;
		    java.sql.Connection conn_tOracleInput_10 = null;
				conn_tOracleInput_10 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_10 = false;
				boolean isConnectionWrapped_tOracleInput_10 = !(conn_tOracleInput_10 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_10.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_10 = null;
                if (isConnectionWrapped_tOracleInput_10) {
					unwrappedOraConn_tOracleInput_10 = conn_tOracleInput_10.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_10 != null) {
                        isTimeZoneNull_tOracleInput_10 = (unwrappedOraConn_tOracleInput_10.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_10 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_10).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_10) {
					java.sql.Statement stmtGetTZ_tOracleInput_10 = conn_tOracleInput_10.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_10 = stmtGetTZ_tOracleInput_10.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_10 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_10.next()) {
						sessionTimezone_tOracleInput_10 = rsGetTZ_tOracleInput_10.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_10 && unwrappedOraConn_tOracleInput_10 != null) {
                        unwrappedOraConn_tOracleInput_10.setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_10).setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_10 = conn_tOracleInput_10.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_10.setFetchSize(1000);


		    String dbquery_tOracleInput_10 = "SELECT RO.ESPECIALIDADES_ID\n      ,RO.SERVICIOS_ID\n      ,RO.UORG_CONTRATO\n      ,RO.CUPS_ID\n      ,CASE \n        "
+"  WHEN COUNT ( RO.ID ) > 0\n          THEN SUM( RO.VALOR_UNITARIO )/COUNT ( RO.ID )\n          ELSE SUM( RO.VALOR_UNITAR"
+"IO )\n       END AS VOTROSSERVICIOS\n	,SUM( RO.VALOR_UNITARIO ) AS VTOS\nFROM BRIPS_OTROSSERVICIOS RO\nWHERE TO_CHAR ( R"
+"O.FECHA , 'YYYY-MM' ) = '"+context.PERIODO+"'\n  AND RO.TRIPS = 'Externa'\n  AND RO.TSERVICIO IN (2,3)\nGROUP BY RO.ESPECIALIDADES_ID\n      ,RO.SERVICIOS_ID\n    "
+"  ,RO.UORG_CONTRATO\n      ,RO.CUPS_ID";
		    

		    globalMap.put("tOracleInput_10_QUERY",dbquery_tOracleInput_10);

		    java.sql.ResultSet rs_tOracleInput_10 = null;

		    try {
		    	rs_tOracleInput_10 = stmt_tOracleInput_10.executeQuery(dbquery_tOracleInput_10);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_10 = rs_tOracleInput_10.getMetaData();
		    	int colQtyInRs_tOracleInput_10 = rsmd_tOracleInput_10.getColumnCount();

		    String tmpContent_tOracleInput_10 = null;
		    
		    
		    while (rs_tOracleInput_10.next()) {
		        nb_line_tOracleInput_10++;
		        
							if(colQtyInRs_tOracleInput_10 < 1) {
								row18.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(1) != null) {
						row18.ESPECIALIDADES_ID = rs_tOracleInput_10.getBigDecimal(1);
					} else {
				
						row18.ESPECIALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 2) {
								row18.SERVICIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(2) != null) {
						row18.SERVICIOS_ID = rs_tOracleInput_10.getBigDecimal(2);
					} else {
				
						row18.SERVICIOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 3) {
								row18.UORG_CONTRATO = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(3) != null) {
						row18.UORG_CONTRATO = rs_tOracleInput_10.getBigDecimal(3);
					} else {
				
						row18.UORG_CONTRATO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 4) {
								row18.CUPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(4) != null) {
						row18.CUPS_ID = rs_tOracleInput_10.getBigDecimal(4);
					} else {
				
						row18.CUPS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 5) {
								row18.VOTROSSERVICIOS = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(5) != null) {
						row18.VOTROSSERVICIOS = rs_tOracleInput_10.getBigDecimal(5);
					} else {
				
						row18.VOTROSSERVICIOS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 6) {
								row18.VTOS = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(6) != null) {
						row18.VTOS = rs_tOracleInput_10.getBigDecimal(6);
					} else {
				
						row18.VTOS = null;
					}
		                    }
					




 



/**
 * [tOracleInput_10 begin ] stop
 */
	
	/**
	 * [tOracleInput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 


	tos_count_tOracleInput_10++;

/**
 * [tOracleInput_10 main ] stop
 */
	
	/**
	 * [tOracleInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					


			   
			   

					row18Struct row18_HashRow = new row18Struct();
		   	   	   
				
				row18_HashRow.ESPECIALIDADES_ID = row18.ESPECIALIDADES_ID;
				
				row18_HashRow.SERVICIOS_ID = row18.SERVICIOS_ID;
				
				row18_HashRow.UORG_CONTRATO = row18.UORG_CONTRATO;
				
				row18_HashRow.CUPS_ID = row18.CUPS_ID;
				
				row18_HashRow.VOTROSSERVICIOS = row18.VOTROSSERVICIOS;
				
				row18_HashRow.VTOS = row18.VTOS;
				
			tHash_Lookup_row18.put(row18_HashRow);
			
            




 


	tos_count_tAdvancedHash_row18++;

/**
 * [tAdvancedHash_row18 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

 



/**
 * [tAdvancedHash_row18 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row18 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

 



/**
 * [tAdvancedHash_row18 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

}
}finally{
	if (rs_tOracleInput_10 != null) {
		rs_tOracleInput_10.close();
	}
	if (stmt_tOracleInput_10 != null) {
		stmt_tOracleInput_10.close();
	}
}

globalMap.put("tOracleInput_10_NB_LINE",nb_line_tOracleInput_10);
 

ok_Hash.put("tOracleInput_10", true);
end_Hash.put("tOracleInput_10", System.currentTimeMillis());




/**
 * [tOracleInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

tHash_Lookup_row18.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row18", true);
end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());




/**
 * [tAdvancedHash_row18 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

 



/**
 * [tAdvancedHash_row18 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableComparableLookupRow<row16Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal CEBE_ID;

				public BigDecimal getCEBE_ID () {
					return this.CEBE_ID;
				}

				public Boolean CEBE_IDIsNullable(){
				    return false;
				}
				public Boolean CEBE_IDIsKey(){
				    return false;
				}
				public Integer CEBE_IDLength(){
				    return 0;
				}
				public Integer CEBE_IDPrecision(){
				    return null;
				}
				public String CEBE_IDDefault(){
				
					return "";
				
				}
				public String CEBE_IDComment(){
				
				    return "";
				
				}
				public String CEBE_IDPattern(){
				
					return "";
				
				}
				public String CEBE_IDOriginalDbColumnName(){
				
					return "CEBE_ID";
				
				}

				
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return 0;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal VMOD;

				public BigDecimal getVMOD () {
					return this.VMOD;
				}

				public Boolean VMODIsNullable(){
				    return false;
				}
				public Boolean VMODIsKey(){
				    return false;
				}
				public Integer VMODLength(){
				    return 0;
				}
				public Integer VMODPrecision(){
				    return null;
				}
				public String VMODDefault(){
				
					return "";
				
				}
				public String VMODComment(){
				
				    return "";
				
				}
				public String VMODPattern(){
				
					return "";
				
				}
				public String VMODOriginalDbColumnName(){
				
					return "VMOD";
				
				}

				
			    public BigDecimal VMPD;

				public BigDecimal getVMPD () {
					return this.VMPD;
				}

				public Boolean VMPDIsNullable(){
				    return false;
				}
				public Boolean VMPDIsKey(){
				    return false;
				}
				public Integer VMPDLength(){
				    return 0;
				}
				public Integer VMPDPrecision(){
				    return null;
				}
				public String VMPDDefault(){
				
					return "";
				
				}
				public String VMPDComment(){
				
				    return "";
				
				}
				public String VMPDPattern(){
				
					return "";
				
				}
				public String VMPDOriginalDbColumnName(){
				
					return "VMPD";
				
				}

				
			    public BigDecimal VCI;

				public BigDecimal getVCI () {
					return this.VCI;
				}

				public Boolean VCIIsNullable(){
				    return false;
				}
				public Boolean VCIIsKey(){
				    return false;
				}
				public Integer VCILength(){
				    return 0;
				}
				public Integer VCIPrecision(){
				    return null;
				}
				public String VCIDefault(){
				
					return "";
				
				}
				public String VCIComment(){
				
				    return "";
				
				}
				public String VCIPattern(){
				
					return "";
				
				}
				public String VCIOriginalDbColumnName(){
				
					return "VCI";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.CEBE_ID == null) ? 0 : this.CEBE_ID.hashCode());
					
						result = prime * result + ((this.CECO_ID == null) ? 0 : this.CECO_ID.hashCode());
					
						result = prime * result + ((this.CUPS_ID == null) ? 0 : this.CUPS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row16Struct other = (row16Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.CEBE_ID == null) {
							if (other.CEBE_ID != null)
								return false;
						
						} else if (!this.CEBE_ID.equals(other.CEBE_ID))
						
							return false;
					
						if (this.CECO_ID == null) {
							if (other.CECO_ID != null)
								return false;
						
						} else if (!this.CECO_ID.equals(other.CECO_ID))
						
							return false;
					
						if (this.CUPS_ID == null) {
							if (other.CUPS_ID != null)
								return false;
						
						} else if (!this.CUPS_ID.equals(other.CUPS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row16Struct other) {

		other.ID = this.ID;
	            other.UORG_ID = this.UORG_ID;
	            other.CEBE_ID = this.CEBE_ID;
	            other.CECO_ID = this.CECO_ID;
	            other.CUPS_ID = this.CUPS_ID;
	            other.VMOD = this.VMOD;
	            other.VMPD = this.VMPD;
	            other.VCI = this.VCI;
	            
	}

	public void copyKeysDataTo(row16Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.CEBE_ID = this.CEBE_ID;
	            	other.CECO_ID = this.CECO_ID;
	            	other.CUPS_ID = this.CUPS_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CEBE_ID = (BigDecimal) dis.readObject();
					
						this.CECO_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CEBE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
       			    	this.VMOD = (BigDecimal) ois.readObject();
					
       			    	this.VMPD = (BigDecimal) ois.readObject();
					
       			    	this.VCI = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
       			    	this.VMOD = (BigDecimal) objectIn.readObject();
					
       			    	this.VMPD = (BigDecimal) objectIn.readObject();
					
       			    	this.VCI = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
       			    	oos.writeObject(this.VMOD);
					
       			    	oos.writeObject(this.VMPD);
					
       			    	oos.writeObject(this.VCI);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VMOD);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VMPD);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VCI);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CEBE_ID="+String.valueOf(CEBE_ID));
		sb.append(",CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",VMOD="+String.valueOf(VMOD));
		sb.append(",VMPD="+String.valueOf(VMPD));
		sb.append(",VCI="+String.valueOf(VCI));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CEBE_ID, other.CEBE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CECO_ID, other.CECO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CUPS_ID, other.CUPS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tAdvancedHash_row16 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row16", false);
		start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tAdvancedHash_row16 = 0;
		

			   		// connection name:row16
			   		// source node:tOracleInput_8 - inputs:(after_tHashInput_4) outputs:(row16,row16) | target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
			   		// linked node: tMap_6 - inputs:(out5,row16,row15) outputs:(out6,out4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row16Struct>getLookup(matchingModeEnum_row16);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row16 begin ] stop
 */



	
	/**
	 * [tOracleInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_8", false);
		start_Hash.put("tOracleInput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_8";
	
	
		int tos_count_tOracleInput_8 = 0;
		
	


	
		    int nb_line_tOracleInput_8 = 0;
		    java.sql.Connection conn_tOracleInput_8 = null;
				conn_tOracleInput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_8 = false;
				boolean isConnectionWrapped_tOracleInput_8 = !(conn_tOracleInput_8 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_8.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_8 = null;
                if (isConnectionWrapped_tOracleInput_8) {
					unwrappedOraConn_tOracleInput_8 = conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_8 != null) {
                        isTimeZoneNull_tOracleInput_8 = (unwrappedOraConn_tOracleInput_8.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_8 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_8).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_8) {
					java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_8 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_8.next()) {
						sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_8 && unwrappedOraConn_tOracleInput_8 != null) {
                        unwrappedOraConn_tOracleInput_8.setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_8).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_8.setFetchSize(1000);


		    String dbquery_tOracleInput_8 = "\nSELECT\n    UCC.ID,\n    UC.UORG_ID,\n    CC.CEBE_ID,\n    UC.CECO_ID,\n    UCC.CUPS_ID,\n    UCC.VMOD,\n    UCC.VMPD"
+",\n    UCC.VCI\nFROM\n    CEC_UORG_CECO_CUPS   UCC\n    INNER JOIN CEC_UORG_CECO        UC ON UCC.UORG_CECO_ID = UC.ID\n"
+"    INNER JOIN CEC_CECO             CC ON CC.ID = UC.CECO_ID\nWHERE\n    UCC.ESTREGISTRO_ID = 1\n    AND UCC.ESTADO = 'A"
+"ctivo'\n    AND UC.ESTREGISTRO_ID = 1\n    AND UC.ESTADO = 'Activo'\n";
		    

		    globalMap.put("tOracleInput_8_QUERY",dbquery_tOracleInput_8);

		    java.sql.ResultSet rs_tOracleInput_8 = null;

		    try {
		    	rs_tOracleInput_8 = stmt_tOracleInput_8.executeQuery(dbquery_tOracleInput_8);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8.getMetaData();
		    	int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8.getColumnCount();

		    String tmpContent_tOracleInput_8 = null;
		    
		    
		    while (rs_tOracleInput_8.next()) {
		        nb_line_tOracleInput_8++;
		        
							if(colQtyInRs_tOracleInput_8 < 1) {
								row16.ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(1) != null) {
						row16.ID = rs_tOracleInput_8.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 2) {
								row16.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(2) != null) {
						row16.UORG_ID = rs_tOracleInput_8.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 3) {
								row16.CEBE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(3) != null) {
						row16.CEBE_ID = rs_tOracleInput_8.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 4) {
								row16.CECO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(4) != null) {
						row16.CECO_ID = rs_tOracleInput_8.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 5) {
								row16.CUPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(5) != null) {
						row16.CUPS_ID = rs_tOracleInput_8.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 6) {
								row16.VMOD = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(6) != null) {
						row16.VMOD = rs_tOracleInput_8.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 7) {
								row16.VMPD = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(7) != null) {
						row16.VMPD = rs_tOracleInput_8.getBigDecimal(7);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 8) {
								row16.VCI = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(8) != null) {
						row16.VCI = rs_tOracleInput_8.getBigDecimal(8);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_8 begin ] stop
 */
	
	/**
	 * [tOracleInput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 


	tos_count_tOracleInput_8++;

/**
 * [tOracleInput_8 main ] stop
 */
	
	/**
	 * [tOracleInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					


			   
			   

					row16Struct row16_HashRow = new row16Struct();
		   	   	   
				
				row16_HashRow.ID = row16.ID;
				
				row16_HashRow.UORG_ID = row16.UORG_ID;
				
				row16_HashRow.CEBE_ID = row16.CEBE_ID;
				
				row16_HashRow.CECO_ID = row16.CECO_ID;
				
				row16_HashRow.CUPS_ID = row16.CUPS_ID;
				
				row16_HashRow.VMOD = row16.VMOD;
				
				row16_HashRow.VMPD = row16.VMPD;
				
				row16_HashRow.VCI = row16.VCI;
				
			tHash_Lookup_row16.put(row16_HashRow);
			
            




 


	tos_count_tAdvancedHash_row16++;

/**
 * [tAdvancedHash_row16 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

}
}finally{
	if (rs_tOracleInput_8 != null) {
		rs_tOracleInput_8.close();
	}
	if (stmt_tOracleInput_8 != null) {
		stmt_tOracleInput_8.close();
	}
}

globalMap.put("tOracleInput_8_NB_LINE",nb_line_tOracleInput_8);
 

ok_Hash.put("tOracleInput_8", true);
end_Hash.put("tOracleInput_8", System.currentTimeMillis());




/**
 * [tOracleInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

tHash_Lookup_row16.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row16", true);
end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());




/**
 * [tAdvancedHash_row16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
    final static byte[] commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
    static byte[] commonByteArray_CEC_COSTOS_POR_CUPS_CostosXCups = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal CECO_ID;

				public BigDecimal getCECO_ID () {
					return this.CECO_ID;
				}

				public Boolean CECO_IDIsNullable(){
				    return false;
				}
				public Boolean CECO_IDIsKey(){
				    return false;
				}
				public Integer CECO_IDLength(){
				    return 0;
				}
				public Integer CECO_IDPrecision(){
				    return null;
				}
				public String CECO_IDDefault(){
				
					return "";
				
				}
				public String CECO_IDComment(){
				
				    return "";
				
				}
				public String CECO_IDPattern(){
				
					return "";
				
				}
				public String CECO_IDOriginalDbColumnName(){
				
					return "CECO_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return 0;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal BASE;

				public BigDecimal getBASE () {
					return this.BASE;
				}

				public Boolean BASEIsNullable(){
				    return false;
				}
				public Boolean BASEIsKey(){
				    return false;
				}
				public Integer BASELength(){
				    return 0;
				}
				public Integer BASEPrecision(){
				    return null;
				}
				public String BASEDefault(){
				
					return "";
				
				}
				public String BASEComment(){
				
				    return "";
				
				}
				public String BASEPattern(){
				
					return "";
				
				}
				public String BASEOriginalDbColumnName(){
				
					return "BASE";
				
				}

				
			    public BigDecimal VMOD_ESTANDAR;

				public BigDecimal getVMOD_ESTANDAR () {
					return this.VMOD_ESTANDAR;
				}

				public Boolean VMOD_ESTANDARIsNullable(){
				    return false;
				}
				public Boolean VMOD_ESTANDARIsKey(){
				    return false;
				}
				public Integer VMOD_ESTANDARLength(){
				    return 0;
				}
				public Integer VMOD_ESTANDARPrecision(){
				    return null;
				}
				public String VMOD_ESTANDARDefault(){
				
					return "";
				
				}
				public String VMOD_ESTANDARComment(){
				
				    return "";
				
				}
				public String VMOD_ESTANDARPattern(){
				
					return "";
				
				}
				public String VMOD_ESTANDAROriginalDbColumnName(){
				
					return "VMOD_ESTANDAR";
				
				}

				
			    public BigDecimal VMPD_ESTANDAR;

				public BigDecimal getVMPD_ESTANDAR () {
					return this.VMPD_ESTANDAR;
				}

				public Boolean VMPD_ESTANDARIsNullable(){
				    return false;
				}
				public Boolean VMPD_ESTANDARIsKey(){
				    return false;
				}
				public Integer VMPD_ESTANDARLength(){
				    return 0;
				}
				public Integer VMPD_ESTANDARPrecision(){
				    return null;
				}
				public String VMPD_ESTANDARDefault(){
				
					return "";
				
				}
				public String VMPD_ESTANDARComment(){
				
				    return "";
				
				}
				public String VMPD_ESTANDARPattern(){
				
					return "";
				
				}
				public String VMPD_ESTANDAROriginalDbColumnName(){
				
					return "VMPD_ESTANDAR";
				
				}

				
			    public BigDecimal VCIND_ESTANDAR;

				public BigDecimal getVCIND_ESTANDAR () {
					return this.VCIND_ESTANDAR;
				}

				public Boolean VCIND_ESTANDARIsNullable(){
				    return false;
				}
				public Boolean VCIND_ESTANDARIsKey(){
				    return false;
				}
				public Integer VCIND_ESTANDARLength(){
				    return 0;
				}
				public Integer VCIND_ESTANDARPrecision(){
				    return null;
				}
				public String VCIND_ESTANDARDefault(){
				
					return "";
				
				}
				public String VCIND_ESTANDARComment(){
				
				    return "";
				
				}
				public String VCIND_ESTANDARPattern(){
				
					return "";
				
				}
				public String VCIND_ESTANDAROriginalDbColumnName(){
				
					return "VCIND_ESTANDAR";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CECO_ID == null) ? 0 : this.CECO_ID.hashCode());
					
						result = prime * result + ((this.CUPS_ID == null) ? 0 : this.CUPS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row15Struct other = (row15Struct) obj;
		
						if (this.CECO_ID == null) {
							if (other.CECO_ID != null)
								return false;
						
						} else if (!this.CECO_ID.equals(other.CECO_ID))
						
							return false;
					
						if (this.CUPS_ID == null) {
							if (other.CUPS_ID != null)
								return false;
						
						} else if (!this.CUPS_ID.equals(other.CUPS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row15Struct other) {

		other.CECO_ID = this.CECO_ID;
	            other.CUPS_ID = this.CUPS_ID;
	            other.VTOTAL = this.VTOTAL;
	            other.BASE = this.BASE;
	            other.VMOD_ESTANDAR = this.VMOD_ESTANDAR;
	            other.VMPD_ESTANDAR = this.VMPD_ESTANDAR;
	            other.VCIND_ESTANDAR = this.VCIND_ESTANDAR;
	            
	}

	public void copyKeysDataTo(row15Struct other) {

		other.CECO_ID = this.CECO_ID;
	            	other.CUPS_ID = this.CUPS_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.CECO_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_CEC_COSTOS_POR_CUPS_CostosXCups) {

        	try {

        		int length = 0;
		
						this.CECO_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CECO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CECO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.VTOTAL = (BigDecimal) ois.readObject();
					
       			    	this.BASE = (BigDecimal) ois.readObject();
					
       			    	this.VMOD_ESTANDAR = (BigDecimal) ois.readObject();
					
       			    	this.VMPD_ESTANDAR = (BigDecimal) ois.readObject();
					
       			    	this.VCIND_ESTANDAR = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.VTOTAL = (BigDecimal) objectIn.readObject();
					
       			    	this.BASE = (BigDecimal) objectIn.readObject();
					
       			    	this.VMOD_ESTANDAR = (BigDecimal) objectIn.readObject();
					
       			    	this.VMPD_ESTANDAR = (BigDecimal) objectIn.readObject();
					
       			    	this.VCIND_ESTANDAR = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.VTOTAL);
					
       			    	oos.writeObject(this.BASE);
					
       			    	oos.writeObject(this.VMOD_ESTANDAR);
					
       			    	oos.writeObject(this.VMPD_ESTANDAR);
					
       			    	oos.writeObject(this.VCIND_ESTANDAR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VTOTAL);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.BASE);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VMOD_ESTANDAR);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VMPD_ESTANDAR);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VCIND_ESTANDAR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CECO_ID="+String.valueOf(CECO_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",BASE="+String.valueOf(BASE));
		sb.append(",VMOD_ESTANDAR="+String.valueOf(VMOD_ESTANDAR));
		sb.append(",VMPD_ESTANDAR="+String.valueOf(VMPD_ESTANDAR));
		sb.append(",VCIND_ESTANDAR="+String.valueOf(VCIND_ESTANDAR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CECO_ID, other.CECO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CUPS_ID, other.CUPS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tAdvancedHash_row15 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row15", false);
		start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tAdvancedHash_row15 = 0;
		

			   		// connection name:row15
			   		// source node:tOracleInput_9 - inputs:(after_tHashInput_4) outputs:(row15,row15) | target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
			   		// linked node: tMap_6 - inputs:(out5,row16,row15) outputs:(out6,out4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row15Struct>getLookup(matchingModeEnum_row15);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row15 begin ] stop
 */



	
	/**
	 * [tOracleInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_9", false);
		start_Hash.put("tOracleInput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_9";
	
	
		int tos_count_tOracleInput_9 = 0;
		
	


	
		    int nb_line_tOracleInput_9 = 0;
		    java.sql.Connection conn_tOracleInput_9 = null;
				conn_tOracleInput_9 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_9 = false;
				boolean isConnectionWrapped_tOracleInput_9 = !(conn_tOracleInput_9 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_9.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_9 = null;
                if (isConnectionWrapped_tOracleInput_9) {
					unwrappedOraConn_tOracleInput_9 = conn_tOracleInput_9.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_9 != null) {
                        isTimeZoneNull_tOracleInput_9 = (unwrappedOraConn_tOracleInput_9.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_9 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_9).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_9) {
					java.sql.Statement stmtGetTZ_tOracleInput_9 = conn_tOracleInput_9.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_9 = stmtGetTZ_tOracleInput_9.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_9 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_9.next()) {
						sessionTimezone_tOracleInput_9 = rsGetTZ_tOracleInput_9.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_9 && unwrappedOraConn_tOracleInput_9 != null) {
                        unwrappedOraConn_tOracleInput_9.setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_9).setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_9 = conn_tOracleInput_9.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_9.setFetchSize(1000);


		    String dbquery_tOracleInput_9 = "SELECT  VCE.CECO_ID\n        ,VCE.CUPS_ID\n        ,VCE.VTOTAL\n        ,VCE.BASE\n        ,VCE.VMOD AS VMOD_ESTANDAR\n"
+"        ,VCE.VMPD AS VMPD_ESTANDAR\n        ,VCE.VCI AS VCIND_ESTANDAR\nFROM CEC_VCUPSESTANDAR VCE\nWHERE VCE.ESTREGISTR"
+"O_ID = 1";
		    

		    globalMap.put("tOracleInput_9_QUERY",dbquery_tOracleInput_9);

		    java.sql.ResultSet rs_tOracleInput_9 = null;

		    try {
		    	rs_tOracleInput_9 = stmt_tOracleInput_9.executeQuery(dbquery_tOracleInput_9);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_9 = rs_tOracleInput_9.getMetaData();
		    	int colQtyInRs_tOracleInput_9 = rsmd_tOracleInput_9.getColumnCount();

		    String tmpContent_tOracleInput_9 = null;
		    
		    
		    while (rs_tOracleInput_9.next()) {
		        nb_line_tOracleInput_9++;
		        
							if(colQtyInRs_tOracleInput_9 < 1) {
								row15.CECO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(1) != null) {
						row15.CECO_ID = rs_tOracleInput_9.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 2) {
								row15.CUPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(2) != null) {
						row15.CUPS_ID = rs_tOracleInput_9.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 3) {
								row15.VTOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(3) != null) {
						row15.VTOTAL = rs_tOracleInput_9.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 4) {
								row15.BASE = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(4) != null) {
						row15.BASE = rs_tOracleInput_9.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 5) {
								row15.VMOD_ESTANDAR = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(5) != null) {
						row15.VMOD_ESTANDAR = rs_tOracleInput_9.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 6) {
								row15.VMPD_ESTANDAR = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(6) != null) {
						row15.VMPD_ESTANDAR = rs_tOracleInput_9.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 7) {
								row15.VCIND_ESTANDAR = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(7) != null) {
						row15.VCIND_ESTANDAR = rs_tOracleInput_9.getBigDecimal(7);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_9 begin ] stop
 */
	
	/**
	 * [tOracleInput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 


	tos_count_tOracleInput_9++;

/**
 * [tOracleInput_9 main ] stop
 */
	
	/**
	 * [tOracleInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					


			   
			   

					row15Struct row15_HashRow = new row15Struct();
		   	   	   
				
				row15_HashRow.CECO_ID = row15.CECO_ID;
				
				row15_HashRow.CUPS_ID = row15.CUPS_ID;
				
				row15_HashRow.VTOTAL = row15.VTOTAL;
				
				row15_HashRow.BASE = row15.BASE;
				
				row15_HashRow.VMOD_ESTANDAR = row15.VMOD_ESTANDAR;
				
				row15_HashRow.VMPD_ESTANDAR = row15.VMPD_ESTANDAR;
				
				row15_HashRow.VCIND_ESTANDAR = row15.VCIND_ESTANDAR;
				
			tHash_Lookup_row15.put(row15_HashRow);
			
            




 


	tos_count_tAdvancedHash_row15++;

/**
 * [tAdvancedHash_row15 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

}
}finally{
	if (rs_tOracleInput_9 != null) {
		rs_tOracleInput_9.close();
	}
	if (stmt_tOracleInput_9 != null) {
		stmt_tOracleInput_9.close();
	}
}

globalMap.put("tOracleInput_9_NB_LINE",nb_line_tOracleInput_9);
 

ok_Hash.put("tOracleInput_9", true);
end_Hash.put("tOracleInput_9", System.currentTimeMillis());




/**
 * [tOracleInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

tHash_Lookup_row15.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row15", true);
end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());




/**
 * [tAdvancedHash_row15 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final CostosXCups CostosXCupsClass = new CostosXCups();

        int exitCode = CostosXCupsClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = CostosXCups.class.getClassLoader().getResourceAsStream("cec_costos_por_cups/costosxcups_0_3/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = CostosXCups.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("ANEXO_ID", "id_BigDecimal");
                        if(context.getStringValue("ANEXO_ID") == null) {
                            context.ANEXO_ID = null;
                        } else {
                            try{
                                context.ANEXO_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ANEXO_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ANEXO_ID", e.getMessage()));
                                context.ANEXO_ID=null;
                            }
                        }
                        context.setContextType("ESTADO", "id_Integer");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            try{
                                context.ESTADO=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ESTADO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ESTADO", e.getMessage()));
                                context.ESTADO=null;
                            }
                        }
                        context.setContextType("FECHA", "id_String");
                        if(context.getStringValue("FECHA") == null) {
                            context.FECHA = null;
                        } else {
                            context.FECHA=(String) context.getProperty("FECHA");
                        }
                        context.setContextType("FECHA_CARGUE", "id_String");
                        if(context.getStringValue("FECHA_CARGUE") == null) {
                            context.FECHA_CARGUE = null;
                        } else {
                            context.FECHA_CARGUE=(String) context.getProperty("FECHA_CARGUE");
                        }
                        context.setContextType("MENSAJE", "id_String");
                        if(context.getStringValue("MENSAJE") == null) {
                            context.MENSAJE = null;
                        } else {
                            context.MENSAJE=(String) context.getProperty("MENSAJE");
                        }
                        context.setContextType("PERIODO", "id_String");
                        if(context.getStringValue("PERIODO") == null) {
                            context.PERIODO = null;
                        } else {
                            context.PERIODO=(String) context.getProperty("PERIODO");
                        }
                        context.setContextType("TIEMPOS_FECHA", "id_Date");
                        if(context.getStringValue("TIEMPOS_FECHA") == null) {
                            context.TIEMPOS_FECHA = null;
                        } else {
                            String context_TIEMPOS_FECHA_value = context.getProperty("TIEMPOS_FECHA");
                            try{
                                if (context_TIEMPOS_FECHA_value == null){
                                    context_TIEMPOS_FECHA_value = "";
                                }
                                int context_TIEMPOS_FECHA_pos = context_TIEMPOS_FECHA_value.indexOf(";");
                                String context_TIEMPOS_FECHA_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_TIEMPOS_FECHA_pos > -1){
                                    context_TIEMPOS_FECHA_pattern = context_TIEMPOS_FECHA_value.substring(0, context_TIEMPOS_FECHA_pos);
                                    context_TIEMPOS_FECHA_value = context_TIEMPOS_FECHA_value.substring(context_TIEMPOS_FECHA_pos + 1);
                                }

                                context.TIEMPOS_FECHA=(java.util.Date)(new java.text.SimpleDateFormat(context_TIEMPOS_FECHA_pattern).parse(context_TIEMPOS_FECHA_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_TIEMPOS_FECHA_longValue = Long.valueOf(context_TIEMPOS_FECHA_value);
                                    context.TIEMPOS_FECHA = new java.util.Date(context_TIEMPOS_FECHA_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "TIEMPOS_FECHA", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.TIEMPOS_FECHA=null;
                                }
                            }
                        }
                        context.setContextType("TIEMPOS_ID", "id_BigDecimal");
                        if(context.getStringValue("TIEMPOS_ID") == null) {
                            context.TIEMPOS_ID = null;
                        } else {
                            try{
                                context.TIEMPOS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("TIEMPOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TIEMPOS_ID", e.getMessage()));
                                context.TIEMPOS_ID=null;
                            }
                        }
                        context.setContextType("ZERO", "id_BigDecimal");
                        if(context.getStringValue("ZERO") == null) {
                            context.ZERO = null;
                        } else {
                            try{
                                context.ZERO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ZERO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ZERO", e.getMessage()));
                                context.ZERO=null;
                            }
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("JOB", "id_String");
                        if(context.getStringValue("JOB") == null) {
                            context.JOB = null;
                        } else {
                            context.JOB=(String) context.getProperty("JOB");
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("ANEXO_ID")) {
                context.ANEXO_ID = (BigDecimal) parentContextMap.get("ANEXO_ID");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (Integer) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("FECHA")) {
                context.FECHA = (String) parentContextMap.get("FECHA");
            }if (parentContextMap.containsKey("FECHA_CARGUE")) {
                context.FECHA_CARGUE = (String) parentContextMap.get("FECHA_CARGUE");
            }if (parentContextMap.containsKey("MENSAJE")) {
                context.MENSAJE = (String) parentContextMap.get("MENSAJE");
            }if (parentContextMap.containsKey("PERIODO")) {
                context.PERIODO = (String) parentContextMap.get("PERIODO");
            }if (parentContextMap.containsKey("TIEMPOS_FECHA")) {
                context.TIEMPOS_FECHA = (java.util.Date) parentContextMap.get("TIEMPOS_FECHA");
            }if (parentContextMap.containsKey("TIEMPOS_ID")) {
                context.TIEMPOS_ID = (BigDecimal) parentContextMap.get("TIEMPOS_ID");
            }if (parentContextMap.containsKey("ZERO")) {
                context.ZERO = (BigDecimal) parentContextMap.get("ZERO");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("JOB")) {
                context.JOB = (String) parentContextMap.get("JOB");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_destino_Password");
			parametersToEncrypt.add("db_origen_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_2Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_2) {
globalMap.put("tJava_2_SUBPROCESS_STATE", -1);

e_tJava_2.printStackTrace();

}catch (java.lang.Error e_tJava_2) {
globalMap.put("tJava_2_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_2;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : CostosXCups");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tOracleConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));
            connections.put("conn_tOracleConnection_2", globalMap.get("conn_tOracleConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1056567 characters generated by Talend Open Studio for ESB 
 *     on the November 1, 2024, 10:28:41 AM COT
 ************************************************************************************************/