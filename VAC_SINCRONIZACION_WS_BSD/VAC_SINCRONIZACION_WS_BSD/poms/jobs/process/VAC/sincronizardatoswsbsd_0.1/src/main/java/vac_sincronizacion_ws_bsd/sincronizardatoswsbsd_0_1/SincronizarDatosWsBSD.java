// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package vac_sincronizacion_ws_bsd.sincronizardatoswsbsd_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_5
	//import java.util.List;

	//the import part of tJavaRow_7
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJavaRow_9
	//import java.util.List;

	//the import part of tJavaRow_10
	//import java.util.List;

	//the import part of tJavaRow_8
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_6
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: SincronizarDatosWsBSD Purpose: Sincronizar datos no registrados en el WS de vacunaci√≥n<br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class SincronizarDatosWsBSD implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(PathStorage != null){
				
					this.setProperty("PathStorage", PathStorage.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(ERROR != null){
				
					this.setProperty("ERROR", ERROR.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FANTERIOR != null){
				
					this.setProperty("FANTERIOR", FANTERIOR.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ACOMPANANTE != null){
				
					this.setProperty("ACOMPANANTE", ACOMPANANTE.toString());
				
			}
			
			if(CERTIFICADO != null){
				
					this.setProperty("CERTIFICADO", CERTIFICADO.toString());
				
			}
			
			if(COD_ASEGURADORA != null){
				
					this.setProperty("COD_ASEGURADORA", COD_ASEGURADORA.toString());
				
			}
			
			if(COD_DEPTO != null){
				
					this.setProperty("COD_DEPTO", COD_DEPTO.toString());
				
			}
			
			if(COD_MCPIO != null){
				
					this.setProperty("COD_MCPIO", COD_MCPIO.toString());
				
			}
			
			if(COD_PAIS != null){
				
					this.setProperty("COD_PAIS", COD_PAIS.toString());
				
			}
			
			if(COD_REGIMEN != null){
				
					this.setProperty("COD_REGIMEN", COD_REGIMEN.toString());
				
			}
			
			if(COD_RH != null){
				
					this.setProperty("COD_RH", COD_RH.toString());
				
			}
			
			if(CODIGO_ETNIA != null){
				
					this.setProperty("CODIGO_ETNIA", CODIGO_ETNIA.toString());
				
			}
			
			if(CONSECUTIVO != null){
				
					this.setProperty("CONSECUTIVO", CONSECUTIVO.toString());
				
			}
			
			if(CORREO != null){
				
					this.setProperty("CORREO", CORREO.toString());
				
			}
			
			if(CUIDADOR_ID != null){
				
					this.setProperty("CUIDADOR_ID", CUIDADOR_ID.toString());
				
			}
			
			if(DIRECCION != null){
				
					this.setProperty("DIRECCION", DIRECCION.toString());
				
			}
			
			if(DOCUMENTO != null){
				
					this.setProperty("DOCUMENTO", DOCUMENTO.toString());
				
			}
			
			if(DOCUMENTO_M != null){
				
					this.setProperty("DOCUMENTO_M", DOCUMENTO_M.toString());
				
			}
			
			if(EDAD != null){
				
					this.setProperty("EDAD", EDAD.toString());
				
			}
			
			if(ESTADO_REG != null){
				
					this.setProperty("ESTADO_REG", ESTADO_REG.toString());
				
			}
			
			if(FECHA_NACIMIENTO != null){
				
					String pattern_FECHA_NACIMIENTO = "yyyy-MM-dd HH:mm:ss";
					String value_FECHA_NACIMIENTO = "";
					String[] parts_FECHA_NACIMIENTO = value_FECHA_NACIMIENTO.split(";");
					if(parts_FECHA_NACIMIENTO.length > 1){
						pattern_FECHA_NACIMIENTO = parts_FECHA_NACIMIENTO[0];
						this.setProperty("FECHA_NACIMIENTO", pattern_FECHA_NACIMIENTO + ";" + FormatterUtils.format_Date(FECHA_NACIMIENTO, pattern_FECHA_NACIMIENTO));
					}else{
						this.setProperty("FECHA_NACIMIENTO", FormatterUtils.format_Date(FECHA_NACIMIENTO, pattern_FECHA_NACIMIENTO));
					}
				
			}
			
			if(FECHA_NACIMIENTOP != null){
				
					this.setProperty("FECHA_NACIMIENTOP", FECHA_NACIMIENTOP.toString());
				
			}
			
			if(GRUPO_SANGUINEO != null){
				
					this.setProperty("GRUPO_SANGUINEO", GRUPO_SANGUINEO.toString());
				
			}
			
			if(JSON_PERSONAS != null){
				
					this.setProperty("JSON_PERSONAS", JSON_PERSONAS.toString());
				
			}
			
			if(PARENTESCO_CUIDADOR != null){
				
					this.setProperty("PARENTESCO_CUIDADOR", PARENTESCO_CUIDADOR.toString());
				
			}
			
			if(PERSONAS_ID != null){
				
					this.setProperty("PERSONAS_ID", PERSONAS_ID.toString());
				
			}
			
			if(PRIMER_APELLIDO != null){
				
					this.setProperty("PRIMER_APELLIDO", PRIMER_APELLIDO.toString());
				
			}
			
			if(PRIMER_APELLIDO_M != null){
				
					this.setProperty("PRIMER_APELLIDO_M", PRIMER_APELLIDO_M.toString());
				
			}
			
			if(PRIMER_NOMBRE != null){
				
					this.setProperty("PRIMER_NOMBRE", PRIMER_NOMBRE.toString());
				
			}
			
			if(PRIMER_NOMBRE_M != null){
				
					this.setProperty("PRIMER_NOMBRE_M", PRIMER_NOMBRE_M.toString());
				
			}
			
			if(REGISTRO_TABLA_ID != null){
				
					this.setProperty("REGISTRO_TABLA_ID", REGISTRO_TABLA_ID.toString());
				
			}
			
			if(REGISTROSDSB_ID != null){
				
					this.setProperty("REGISTROSDSB_ID", REGISTROSDSB_ID.toString());
				
			}
			
			if(SEGUNDO_APELLIDO != null){
				
					this.setProperty("SEGUNDO_APELLIDO", SEGUNDO_APELLIDO.toString());
				
			}
			
			if(SEGUNDO_APELLIDO_M != null){
				
					this.setProperty("SEGUNDO_APELLIDO_M", SEGUNDO_APELLIDO_M.toString());
				
			}
			
			if(SEGUNDO_NOMBRE != null){
				
					this.setProperty("SEGUNDO_NOMBRE", SEGUNDO_NOMBRE.toString());
				
			}
			
			if(SEGUNDO_NOMBRE_M != null){
				
					this.setProperty("SEGUNDO_NOMBRE_M", SEGUNDO_NOMBRE_M.toString());
				
			}
			
			if(SIGLA_SEXO != null){
				
					this.setProperty("SIGLA_SEXO", SIGLA_SEXO.toString());
				
			}
			
			if(TELEFONO != null){
				
					this.setProperty("TELEFONO", TELEFONO.toString());
				
			}
			
			if(TIPO_AFILIACION != null){
				
					this.setProperty("TIPO_AFILIACION", TIPO_AFILIACION.toString());
				
			}
			
			if(TIPODOCUMENTO != null){
				
					this.setProperty("TIPODOCUMENTO", TIPODOCUMENTO.toString());
				
			}
			
			if(TIPODOCUMENTO_M != null){
				
					this.setProperty("TIPODOCUMENTO_M", TIPODOCUMENTO_M.toString());
				
			}
			
			if(ACTUALIZACION != null){
				
					this.setProperty("ACTUALIZACION", ACTUALIZACION.toString());
				
			}
			
			if(BIOLOGICOS_ID != null){
				
					this.setProperty("BIOLOGICOS_ID", BIOLOGICOS_ID.toString());
				
			}
			
			if(CAMPANIA_ID != null){
				
					this.setProperty("CAMPANIA_ID", CAMPANIA_ID.toString());
				
			}
			
			if(COMERCIAL_ID != null){
				
					this.setProperty("COMERCIAL_ID", COMERCIAL_ID.toString());
				
			}
			
			if(DOSIS_ID != null){
				
					this.setProperty("DOSIS_ID", DOSIS_ID.toString());
				
			}
			
			if(EDAD_ANIOS != null){
				
					this.setProperty("EDAD_ANIOS", EDAD_ANIOS.toString());
				
			}
			
			if(EDAD_DIAS != null){
				
					this.setProperty("EDAD_DIAS", EDAD_DIAS.toString());
				
			}
			
			if(EDAD_MESES != null){
				
					this.setProperty("EDAD_MESES", EDAD_MESES.toString());
				
			}
			
			if(EDAD_TOTAL != null){
				
					this.setProperty("EDAD_TOTAL", EDAD_TOTAL.toString());
				
			}
			
			if(FECHA_VACUNA != null){
				
					this.setProperty("FECHA_VACUNA", FECHA_VACUNA.toString());
				
			}
			
			if(FECHA_VACUNA_EDAD != null){
				
					String pattern_FECHA_VACUNA_EDAD = "yyyy-MM-dd HH:mm:ss";
					String value_FECHA_VACUNA_EDAD = "";
					String[] parts_FECHA_VACUNA_EDAD = value_FECHA_VACUNA_EDAD.split(";");
					if(parts_FECHA_VACUNA_EDAD.length > 1){
						pattern_FECHA_VACUNA_EDAD = parts_FECHA_VACUNA_EDAD[0];
						this.setProperty("FECHA_VACUNA_EDAD", pattern_FECHA_VACUNA_EDAD + ";" + FormatterUtils.format_Date(FECHA_VACUNA_EDAD, pattern_FECHA_VACUNA_EDAD));
					}else{
						this.setProperty("FECHA_VACUNA_EDAD", FormatterUtils.format_Date(FECHA_VACUNA_EDAD, pattern_FECHA_VACUNA_EDAD));
					}
				
			}
			
			if(FUNCIONARIO != null){
				
					this.setProperty("FUNCIONARIO", FUNCIONARIO.toString());
				
			}
			
			if(INSTITUCION != null){
				
					this.setProperty("INSTITUCION", INSTITUCION.toString());
				
			}
			
			if(JSON_VACUNAS != null){
				
					this.setProperty("JSON_VACUNAS", JSON_VACUNAS.toString());
				
			}
			
			if(LOTE != null){
				
					this.setProperty("LOTE", LOTE.toString());
				
			}
			
			if(PRESENTACION_ID != null){
				
					this.setProperty("PRESENTACION_ID", PRESENTACION_ID.toString());
				
			}
			
			if(TIPO_VACUNA != null){
				
					this.setProperty("TIPO_VACUNA", TIPO_VACUNA.toString());
				
			}
			
			if(VACUNAS_ID != null){
				
					this.setProperty("VACUNAS_ID", VACUNAS_ID.toString());
				
			}
			
			if(ERRORES != null){
				
					this.setProperty("ERRORES", ERRORES.toString());
				
			}
			
			if(IdTabla != null){
				
					this.setProperty("IdTabla", IdTabla.toString());
				
			}
			
			if(RESULTADO != null){
				
					this.setProperty("RESULTADO", RESULTADO.toString());
				
			}
			
			if(UlrActionSoapConsultarPersona != null){
				
					this.setProperty("UlrActionSoapConsultarPersona", UlrActionSoapConsultarPersona.toString());
				
			}
			
			if(UlrActionSoapInsertarPersona != null){
				
					this.setProperty("UlrActionSoapInsertarPersona", UlrActionSoapInsertarPersona.toString());
				
			}
			
			if(UlrActionSoapInsertarPersonaVacuna != null){
				
					this.setProperty("UlrActionSoapInsertarPersonaVacuna", UlrActionSoapInsertarPersonaVacuna.toString());
				
			}
			
			if(UrlActionSoap != null){
				
					this.setProperty("UrlActionSoap", UrlActionSoap.toString());
				
			}
			
			if(UrlActionSoapInsertarAfiliacionPersona != null){
				
					this.setProperty("UrlActionSoapInsertarAfiliacionPersona", UrlActionSoapInsertarAfiliacionPersona.toString());
				
			}
			
			if(UrlActionSoapInsertarUbicacionPersona != null){
				
					this.setProperty("UrlActionSoapInsertarUbicacionPersona", UrlActionSoapInsertarUbicacionPersona.toString());
				
			}
			
			if(UrlActionSoapInsertarVacuna != null){
				
					this.setProperty("UrlActionSoapInsertarVacuna", UrlActionSoapInsertarVacuna.toString());
				
			}
			
			if(UrlEndPoint != null){
				
					this.setProperty("UrlEndPoint", UrlEndPoint.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(DAPLICADAS_ID != null){
				
					this.setProperty("DAPLICADAS_ID", DAPLICADAS_ID.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String PathStorage;
public String getPathStorage(){
	return this.PathStorage;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String ERROR;
public String getERROR(){
	return this.ERROR;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FANTERIOR;
public String getFANTERIOR(){
	return this.FANTERIOR;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ACOMPANANTE;
public String getACOMPANANTE(){
	return this.ACOMPANANTE;
}
public BigDecimal CERTIFICADO;
public BigDecimal getCERTIFICADO(){
	return this.CERTIFICADO;
}
public String COD_ASEGURADORA;
public String getCOD_ASEGURADORA(){
	return this.COD_ASEGURADORA;
}
public Integer COD_DEPTO;
public Integer getCOD_DEPTO(){
	return this.COD_DEPTO;
}
public Integer COD_MCPIO;
public Integer getCOD_MCPIO(){
	return this.COD_MCPIO;
}
public String COD_PAIS;
public String getCOD_PAIS(){
	return this.COD_PAIS;
}
public Integer COD_REGIMEN;
public Integer getCOD_REGIMEN(){
	return this.COD_REGIMEN;
}
public String COD_RH;
public String getCOD_RH(){
	return this.COD_RH;
}
public Integer CODIGO_ETNIA;
public Integer getCODIGO_ETNIA(){
	return this.CODIGO_ETNIA;
}
public BigDecimal CONSECUTIVO;
public BigDecimal getCONSECUTIVO(){
	return this.CONSECUTIVO;
}
public String CORREO;
public String getCORREO(){
	return this.CORREO;
}
public BigDecimal CUIDADOR_ID;
public BigDecimal getCUIDADOR_ID(){
	return this.CUIDADOR_ID;
}
public String DIRECCION;
public String getDIRECCION(){
	return this.DIRECCION;
}
public String DOCUMENTO;
public String getDOCUMENTO(){
	return this.DOCUMENTO;
}
public String DOCUMENTO_M;
public String getDOCUMENTO_M(){
	return this.DOCUMENTO_M;
}
public String EDAD;
public String getEDAD(){
	return this.EDAD;
}
public Integer ESTADO_REG;
public Integer getESTADO_REG(){
	return this.ESTADO_REG;
}
public java.util.Date FECHA_NACIMIENTO;
public java.util.Date getFECHA_NACIMIENTO(){
	return this.FECHA_NACIMIENTO;
}
public String FECHA_NACIMIENTOP;
public String getFECHA_NACIMIENTOP(){
	return this.FECHA_NACIMIENTOP;
}
public String GRUPO_SANGUINEO;
public String getGRUPO_SANGUINEO(){
	return this.GRUPO_SANGUINEO;
}
public String JSON_PERSONAS;
public String getJSON_PERSONAS(){
	return this.JSON_PERSONAS;
}
public String PARENTESCO_CUIDADOR;
public String getPARENTESCO_CUIDADOR(){
	return this.PARENTESCO_CUIDADOR;
}
public BigDecimal PERSONAS_ID;
public BigDecimal getPERSONAS_ID(){
	return this.PERSONAS_ID;
}
public String PRIMER_APELLIDO;
public String getPRIMER_APELLIDO(){
	return this.PRIMER_APELLIDO;
}
public String PRIMER_APELLIDO_M;
public String getPRIMER_APELLIDO_M(){
	return this.PRIMER_APELLIDO_M;
}
public String PRIMER_NOMBRE;
public String getPRIMER_NOMBRE(){
	return this.PRIMER_NOMBRE;
}
public String PRIMER_NOMBRE_M;
public String getPRIMER_NOMBRE_M(){
	return this.PRIMER_NOMBRE_M;
}
public BigDecimal REGISTRO_TABLA_ID;
public BigDecimal getREGISTRO_TABLA_ID(){
	return this.REGISTRO_TABLA_ID;
}
public BigDecimal REGISTROSDSB_ID;
public BigDecimal getREGISTROSDSB_ID(){
	return this.REGISTROSDSB_ID;
}
public String SEGUNDO_APELLIDO;
public String getSEGUNDO_APELLIDO(){
	return this.SEGUNDO_APELLIDO;
}
public String SEGUNDO_APELLIDO_M;
public String getSEGUNDO_APELLIDO_M(){
	return this.SEGUNDO_APELLIDO_M;
}
public String SEGUNDO_NOMBRE;
public String getSEGUNDO_NOMBRE(){
	return this.SEGUNDO_NOMBRE;
}
public String SEGUNDO_NOMBRE_M;
public String getSEGUNDO_NOMBRE_M(){
	return this.SEGUNDO_NOMBRE_M;
}
public String SIGLA_SEXO;
public String getSIGLA_SEXO(){
	return this.SIGLA_SEXO;
}
public String TELEFONO;
public String getTELEFONO(){
	return this.TELEFONO;
}
public Integer TIPO_AFILIACION;
public Integer getTIPO_AFILIACION(){
	return this.TIPO_AFILIACION;
}
public String TIPODOCUMENTO;
public String getTIPODOCUMENTO(){
	return this.TIPODOCUMENTO;
}
public String TIPODOCUMENTO_M;
public String getTIPODOCUMENTO_M(){
	return this.TIPODOCUMENTO_M;
}
public Boolean ACTUALIZACION;
public Boolean getACTUALIZACION(){
	return this.ACTUALIZACION;
}
public BigDecimal BIOLOGICOS_ID;
public BigDecimal getBIOLOGICOS_ID(){
	return this.BIOLOGICOS_ID;
}
public Integer CAMPANIA_ID;
public Integer getCAMPANIA_ID(){
	return this.CAMPANIA_ID;
}
public Integer COMERCIAL_ID;
public Integer getCOMERCIAL_ID(){
	return this.COMERCIAL_ID;
}
public Integer DOSIS_ID;
public Integer getDOSIS_ID(){
	return this.DOSIS_ID;
}
public Integer EDAD_ANIOS;
public Integer getEDAD_ANIOS(){
	return this.EDAD_ANIOS;
}
public Integer EDAD_DIAS;
public Integer getEDAD_DIAS(){
	return this.EDAD_DIAS;
}
public Integer EDAD_MESES;
public Integer getEDAD_MESES(){
	return this.EDAD_MESES;
}
public Integer EDAD_TOTAL;
public Integer getEDAD_TOTAL(){
	return this.EDAD_TOTAL;
}
public String FECHA_VACUNA;
public String getFECHA_VACUNA(){
	return this.FECHA_VACUNA;
}
public java.util.Date FECHA_VACUNA_EDAD;
public java.util.Date getFECHA_VACUNA_EDAD(){
	return this.FECHA_VACUNA_EDAD;
}
public String FUNCIONARIO;
public String getFUNCIONARIO(){
	return this.FUNCIONARIO;
}
public String INSTITUCION;
public String getINSTITUCION(){
	return this.INSTITUCION;
}
public String JSON_VACUNAS;
public String getJSON_VACUNAS(){
	return this.JSON_VACUNAS;
}
public String LOTE;
public String getLOTE(){
	return this.LOTE;
}
public Integer PRESENTACION_ID;
public Integer getPRESENTACION_ID(){
	return this.PRESENTACION_ID;
}
public Integer TIPO_VACUNA;
public Integer getTIPO_VACUNA(){
	return this.TIPO_VACUNA;
}
public Integer VACUNAS_ID;
public Integer getVACUNAS_ID(){
	return this.VACUNAS_ID;
}
public String ERRORES;
public String getERRORES(){
	return this.ERRORES;
}
public String IdTabla;
public String getIdTabla(){
	return this.IdTabla;
}
public Boolean RESULTADO;
public Boolean getRESULTADO(){
	return this.RESULTADO;
}
public String UlrActionSoapConsultarPersona;
public String getUlrActionSoapConsultarPersona(){
	return this.UlrActionSoapConsultarPersona;
}
public String UlrActionSoapInsertarPersona;
public String getUlrActionSoapInsertarPersona(){
	return this.UlrActionSoapInsertarPersona;
}
public String UlrActionSoapInsertarPersonaVacuna;
public String getUlrActionSoapInsertarPersonaVacuna(){
	return this.UlrActionSoapInsertarPersonaVacuna;
}
public String UrlActionSoap;
public String getUrlActionSoap(){
	return this.UrlActionSoap;
}
public String UrlActionSoapInsertarAfiliacionPersona;
public String getUrlActionSoapInsertarAfiliacionPersona(){
	return this.UrlActionSoapInsertarAfiliacionPersona;
}
public String UrlActionSoapInsertarUbicacionPersona;
public String getUrlActionSoapInsertarUbicacionPersona(){
	return this.UrlActionSoapInsertarUbicacionPersona;
}
public String UrlActionSoapInsertarVacuna;
public String getUrlActionSoapInsertarVacuna(){
	return this.UrlActionSoapInsertarVacuna;
}
public String UrlEndPoint;
public String getUrlEndPoint(){
	return this.UrlEndPoint;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public BigDecimal DAPLICADAS_ID;
public BigDecimal getDAPLICADAS_ID(){
	return this.DAPLICADAS_ID;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "SincronizarDatosWsBSD";
	private final String projectName = "VAC_SINCRONIZACION_WS_BSD";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				SincronizarDatosWsBSD.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(SincronizarDatosWsBSD.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tDie_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSOAP_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSOAP_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSOAP_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSOAP_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSOAP_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSOAP_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSOAP_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSOAP_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSOAP_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSOAP_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSOAP_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSOAP_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSOAP_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSOAP_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_3_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_3_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_3_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_5_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_5_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_5_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSOAP_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_6_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_6_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_6_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSOAP_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_7_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_7_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_7_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSOAP_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_4_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_4_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_4_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_2_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_2_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_2_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSOAP_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSOAP_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSOAP_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSOAP_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSOAP_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");

//VARIABLE QUE LLEVA EL CONTEO DE FILAS (REGISTROS) DEL ARCHIVO
globalMap.put("FILAS_ARCHIVO", 0);
//VARIABLE QUE LLEVA EL CONTEO DE FILAS DE ERROR DEL ARCHIVO
globalMap.put("FILAS_ERROR", 0);
//VARIABLE QUE LLEVA EL CONTEO DE FILAS DE ERROR DEL ARCHIVO POR CONFIGURACION
globalMap.put("FILAS_ERROR_CONFIGURACION", 0);
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row75Struct implements routines.system.IPersistableRow<row75Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return true;
				}
				public Integer HostLength(){
				    return 13;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return true;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return true;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 16;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 12;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Host == null) ? 0 : this.Host.hashCode());
					
						result = prime * result + ((this.Port == null) ? 0 : this.Port.hashCode());
					
						result = prime * result + ((this.Sid == null) ? 0 : this.Sid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row75Struct other = (row75Struct) obj;
		
						if (this.Host == null) {
							if (other.Host != null)
								return false;
						
						} else if (!this.Host.equals(other.Host))
						
							return false;
					
						if (this.Port == null) {
							if (other.Port != null)
								return false;
						
						} else if (!this.Port.equals(other.Port))
						
							return false;
					
						if (this.Sid == null) {
							if (other.Sid != null)
								return false;
						
						} else if (!this.Sid.equals(other.Sid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row75Struct other) {

		other.Host = this.Host;
	            other.Port = this.Port;
	            other.Sid = this.Sid;
	            other.ServiceName = this.ServiceName;
	            other.Schema = this.Schema;
	            other.User = this.User;
	            other.Password = this.Password;
	            other.SMTPHost = this.SMTPHost;
	            other.SMTPPort = this.SMTPPort;
	            other.UsernameMail = this.UsernameMail;
	            other.PasswordMail = this.PasswordMail;
	            
	}

	public void copyKeysDataTo(row75Struct other) {

		other.Host = this.Host;
	            	other.Port = this.Port;
	            	other.Sid = this.Sid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row75Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Host, other.Host);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Port, other.Port);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Sid, other.Sid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row75Struct row75 = new row75Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row75");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"	
	,"SMTPHost"		
	,"SMTPHost"+"/@xsi:nil"	
	,"SMTPPort"		
	,"SMTPPort"+"/@xsi:nil"	
	,"UsernameMail"		
	,"UsernameMail"+"/@xsi:nil"	
	,"PasswordMail"		
	,"PasswordMail"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("UTF-8");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	throw(e);
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
	if (nb_line_tFileInputXML_1>=50) {
	
			looper_tFileInputXML_1.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row75 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row75 = new row75Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Host");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Host =null;
									}else{
		row75.Host = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Port");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Port =null;
									}else{
		row75.Port = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Sid");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Sid =null;
									}else{
		row75.Sid = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("ServiceName");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.ServiceName =null;
									}else{
		row75.ServiceName = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Schema");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Schema =null;
									}else{
		row75.Schema = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("User");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.User =null;
									}else{
		row75.User = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Password");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Password =null;
									}else{
		row75.Password = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPHost");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPHost"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.SMTPHost =null;
									}else{
		row75.SMTPHost = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPPort");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPPort"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.SMTPPort =null;
									}else{
		row75.SMTPPort = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("UsernameMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("UsernameMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.UsernameMail =null;
									}else{
		row75.UsernameMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PasswordMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PasswordMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.PasswordMail =null;
									}else{
		row75.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
            throw(e);
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row75"
if(row75 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row75"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.db_origen_Server = row75.Host;
context.db_origen_Port = row75.Port;
//context.db_origen_Sid = row75.Sid;
context.db_origen_Login = row75.User;
context.db_origen_Password = row75.Password;
context.db_origen_ServiceName = row75.ServiceName;
/*context.mail_SMTP_Port = row75.SMTPPort;
context.mail_User = row75.UsernameMail;
context.mail_SMTP_Host = row75.SMTPHost;
context.mail_Password = row75.PasswordMail;*/
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row75"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		throw(e);
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row75");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());




/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "Fail connection", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("Fail connection");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "Fail connection");
	globalMap.put("tDie_1_DIE_MESSAGES", "Fail connection");
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        

    
	

	
	
	System.exit(4);

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public static class row80Struct implements routines.system.IPersistableRow<row80Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row80Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row79Struct implements routines.system.IPersistableRow<row79Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row79Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row79Struct row79 = new row79Struct();
row79Struct row80 = row79;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row80");
					}
				
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	
	String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row79");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("moment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("root_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("father_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("project");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("context");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("priority");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("code");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row79.type = lcm.getType();
		row79.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row79.priority = lcm.getPriority();
		row79.message = lcm.getMessage();
		row79.code = lcm.getCode();
		
		row79.moment = java.util.Calendar.getInstance().getTime();
	
    	row79.pid = pid;
		row79.root_pid = rootPid;
		row79.father_pid = fatherPid;
	
    	row79.project = projectName;
    	row79.job = jobName;
    	row79.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row79"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row79.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row79.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row79.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            row79.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 
     row80 = row79;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row80"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
              					String classpath_tRunJob_1_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xercesImpl-2.12.2.jar;../lib/xml-apis-1.4.01.jar;../lib/crypto-utils-7.1.16.jar;../lib/TalendSAX.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/slf4j-api-1.7.34.jar;../lib/commons-lang3-3.9.jar;../lib/dom4j-2.1.3.jar;mail_1_3.jar;";
              					
              					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5), true);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "vac_sincronizacion_ws_bsd.mail_1_3.Mail");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		      					String classpath_tRunJob_1_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xercesImpl-2.12.2.jar:$ROOT_PATH/../lib/xml-apis-1.4.01.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/TalendSAX.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/commons-lang3-3.9.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/mail_1_3.jar:";
		      					
		      					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "vac_sincronizacion_ws_bsd.mail_1_3.Mail");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = row80.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = row80.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("project", obj_tRunJob_1);
	
		obj_tRunJob_1 = row80.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = row80.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = row80.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origin=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origin=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origin=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origin", obj_tRunJob_1);
	
		obj_tRunJob_1 = row80.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_origen", obj_tRunJob_1);
	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;
		
		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join();
            error_tRunJob_1.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row79");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row80");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.ESTADO_EXEC = "Interrumpido";
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tOracleClose_1Process(globalMap);



/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row34Struct row34 = new row34Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_INICIO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_FINAL");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ESTADO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("JOBS");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row34.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row34.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row34.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row34.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row34.JOBS = "RIPS";
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row34"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row34.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_2.append(
                            row34.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row34.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row34.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row34.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            row34.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row34.ESTADO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row34.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row34.JOBS != null) {
                        sb_tFileOutputDelimited_2.append(
                            row34.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout2Struct implements routines.system.IPersistableRow<copyOfout2Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public String per_Consecutivo;

				public String getPer_Consecutivo () {
					return this.per_Consecutivo;
				}

				public Boolean per_ConsecutivoIsNullable(){
				    return true;
				}
				public Boolean per_ConsecutivoIsKey(){
				    return false;
				}
				public Integer per_ConsecutivoLength(){
				    return null;
				}
				public Integer per_ConsecutivoPrecision(){
				    return null;
				}
				public String per_ConsecutivoDefault(){
				
					return null;
				
				}
				public String per_ConsecutivoComment(){
				
				    return "";
				
				}
				public String per_ConsecutivoPattern(){
				
					return "";
				
				}
				public String per_ConsecutivoOriginalDbColumnName(){
				
					return "per_Consecutivo";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.per_Consecutivo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.per_Consecutivo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.per_Consecutivo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.per_Consecutivo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("per_Consecutivo="+per_Consecutivo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public routines.system.Document Soap;

				public routines.system.Document getSoap () {
					return this.Soap;
				}

				public Boolean SoapIsNullable(){
				    return true;
				}
				public Boolean SoapIsKey(){
				    return false;
				}
				public Integer SoapLength(){
				    return 0;
				}
				public Integer SoapPrecision(){
				    return 0;
				}
				public String SoapDefault(){
				
					return "";
				
				}
				public String SoapComment(){
				
				    return null;
				
				}
				public String SoapPattern(){
				
				    return null;
				
				}
				public String SoapOriginalDbColumnName(){
				
					return "Soap";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.Soap = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.Soap = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.Soap);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Document
				
						dos.clearInstanceCache();
						dos.writeObject(this.Soap);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Soap="+String.valueOf(Soap));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public routines.system.Document Soap;

				public routines.system.Document getSoap () {
					return this.Soap;
				}

				public Boolean SoapIsNullable(){
				    return true;
				}
				public Boolean SoapIsKey(){
				    return false;
				}
				public Integer SoapLength(){
				    return 0;
				}
				public Integer SoapPrecision(){
				    return 0;
				}
				public String SoapDefault(){
				
					return "";
				
				}
				public String SoapComment(){
				
				    return null;
				
				}
				public String SoapPattern(){
				
				    return null;
				
				}
				public String SoapOriginalDbColumnName(){
				
					return "Soap";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.Soap = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.Soap = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.Soap);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Document
				
						dos.clearInstanceCache();
						dos.writeObject(this.Soap);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Soap="+String.valueOf(Soap));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return false;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return null;
				}
				public Integer DATAPrecision(){
				    return 0;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.DATA = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.DATA = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.DATA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.DATA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",DATA="+DATA);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();
row10Struct row10 = new row10Struct();
copyOfout2Struct copyOfout2 = new copyOfout2Struct();




	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tJava_5 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "SELECT id,\n					data,\n					personas_id					\nFROM saludsis.vac_registrosdsb\nWHERE estado = 'Activo'\nAND estregistro"
+"_id = 1\nAND daplicadas_id is null";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row1.ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row1.ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row1.DATA = null;
							} else {
	                         		
        	row1.DATA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row1.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(3) != null) {
						row1.PERSONAS_ID = rs_tOracleInput_1.getBigDecimal(3);
					} else {
				
						row1.PERSONAS_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					


    	            
            globalMap.put("row1.ID", row1.ID);
    	            
            globalMap.put("row1.DATA", row1.DATA);
    	            
            globalMap.put("row1.PERSONAS_ID", row1.PERSONAS_ID);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tJava_5++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("out3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfout2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfout1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfout5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfcopyOfout5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJava_5);
					//Thread.sleep(1000);
				}				
			



	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_3_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_3_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tXMLMap_3_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_3_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_3_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_3_TXMLMAP_OUT__Struct Var__tXMLMap_3_TXMLMAP_OUT = new Var__tXMLMap_3_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
copyOfout2Struct copyOfout2_tmp = new copyOfout2Struct();
copyOfout2Struct copyOfout2_save = null;
//the aggregate variable
copyOfout2Struct copyOfout2_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_3 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_3",allOutsForAggregate_tXMLMap_3);
// ###############################
class TreeNode_API_tXMLMap_3_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
}
			TreeNode_API_tXMLMap_3_TXMLMAP_OUT treeNodeAPI_tXMLMap_3_TXMLMAP_OUT = new TreeNode_API_tXMLMap_3_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_3_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_3_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_3_TXMLMAP_OUT xml_api_tXMLMap_3_TXMLMAP_OUT = new XML_API_tXMLMap_3_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_3_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            

 



/**
 * [tXMLMap_3_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tSOAP_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tSOAP_3", false);
		start_Hash.put("tSOAP_3", System.currentTimeMillis());
		
	
	currentComponent="tSOAP_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tSOAP_3 = 0;
		
 org.talend.soap.SOAPUtil soapUtil_tSOAP_3 = new org.talend.soap.SOAPUtil();

 
	final String decryptedPassword_tSOAP_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:y1CXjBvaeoY28oR0onu05ZcYAkPsRzgyyPiICS1wz59k0tJ2");


     
    	final String decryptedProxyPwd_tSOAP_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:mJqlnfvRH6EPq3fF+u5aWVmT2DUzGrbjDMe2tg==");

soapUtil_tSOAP_3.setProxy("172.20.19.254",3128,"",decryptedProxyPwd_tSOAP_3);
 



/**
 * [tSOAP_3 begin ] stop
 */



	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";
	
	
		int tos_count_tJava_5 = 0;
		


//Code generate according to input schema and output schema
context.PERSONAS_ID = row1.PERSONAS_ID;
context.REGISTROSDSB_ID = row1.ID;

JSONObject dataJson = new JSONObject(row1.DATA);

//Datos de la persona vacunada
context.TIPODOCUMENTO = dataJson.getString("SiglaTipoIdentificacion");
context.CERTIFICADO = new BigDecimal(dataJson.getString("CertNacVivo"));
context.DOCUMENTO = dataJson.getString("Documento");
context.PRIMER_NOMBRE = dataJson.getString("PrimerNombre");
context.SEGUNDO_NOMBRE = dataJson.getString("SegundoNombre");
context.PRIMER_APELLIDO = dataJson.getString("PrimerApellido");
context.SEGUNDO_APELLIDO = dataJson.getString("SegundoApellido");
context.FECHA_NACIMIENTOP = dataJson.getString("FechaNacimiento");
context.CODIGO_ETNIA = dataJson.getInt("CodEtnia");
context.SIGLA_SEXO = dataJson.getString("SiglaSexo");
context.GRUPO_SANGUINEO = dataJson.getString("CodGrupoSanguineo");
context.COD_RH = dataJson.getString("CodRh");
context.TELEFONO = dataJson.has("Telefono") ? dataJson.getString("Telefono") : null;
context.DIRECCION = dataJson.has("Direccion") ? dataJson.getString("Direccion") : null;
context.COD_MCPIO = dataJson.has("Municipio") ? Integer.parseInt(dataJson.getString("Municipio")) : null;
context.COD_DEPTO = dataJson.has("Departamento") ? Integer.parseInt(dataJson.getString("Departamento")) : null;
context.COD_PAIS = dataJson.has("Pais") ? dataJson.getString("Pais") : null;
context.CORREO = dataJson.has("Correo") ? dataJson.getString("Correo") : null;
context.COD_ASEGURADORA = dataJson.getString("Aseguradora");
context.TIPO_AFILIACION = dataJson.has("TipoAfiliado") ? dataJson.getInt("TipoAfiliado") : 2;

//Datos de la madre
context.TIPODOCUMENTO_M = dataJson.has("SiglaTipoIdentificacionM") ? dataJson.getString("SiglaTipoIdentificacionM") : null;
context.DOCUMENTO_M = dataJson.has("DocumentoM") ? dataJson.getString("DocumentoM") : null;
context.PRIMER_NOMBRE_M = dataJson.has("PrimerNombreM") ? dataJson.getString("PrimerNombreM") : null;
context.SEGUNDO_NOMBRE_M = dataJson.has("SegundoNombreM") ? dataJson.getString("SegundoNombreM") : null;
context.PRIMER_APELLIDO_M = dataJson.has("PrimerApellidoM") ? dataJson.getString("PrimerApellidoM") : null;
context.SEGUNDO_APELLIDO_M = dataJson.has("SegundoApellidoM") ? dataJson.getString("SegundoApellidoM") : null;
 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 process_data_begin ] stop
 */

	
	/**
	 * [tSOAP_3 main ] start
	 */

	

	
	
	currentComponent="tSOAP_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
			String document_tSOAP_3 = soapUtil_tSOAP_3.extractContentAsDocument(org.talend.soap.SOAPUtil.SOAP11,context.UrlEndPoint,context.UlrActionSoapConsultarPersona,"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:sds=\"http://Sds.SaludPublica\">  <soapenv:Body>        <sds:seleccionarPersonaBusqueda>           <sds:TipoIdVacunado>"+context.TIPODOCUMENTO+"</sds:TipoIdVacunado>  	<sds:NumeroIdVacunado>"+context.DOCUMENTO+"</sds:NumeroIdVacunado>  	<sds:PrimerNombreVacunado>"+context.PRIMER_NOMBRE+"</sds:PrimerNombreVacunado>  	<sds:PrimerApellidoVacunado>"+context.PRIMER_APELLIDO+"</sds:PrimerApellidoVacunado>        </sds:seleccionarPersonaBusqueda>     </soapenv:Body>  </soapenv:Envelope>");
		
		
	

	// for output
			
				row10 = new row10Struct();
				
					row10.Soap = ParserUtils.parseTo_Document(document_tSOAP_3);
				
        


 


	tos_count_tSOAP_3++;

/**
 * [tSOAP_3 main ] stop
 */
	
	/**
	 * [tSOAP_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSOAP_3";
	
	

 



/**
 * [tSOAP_3 process_data_begin ] stop
 */

	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

	boolean rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_3_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_3_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setOriginalLoop("/s:Envelope/s:Body/seleccionarPersonaBusquedaResponse/seleccionarPersonaBusquedaResult");
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setIsOptional(false);
				if(row10.Soap == null || row10.Soap.getDocument() == null) {
					throw new RuntimeException("row10.Soap can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_3_TXMLMAP_OUT = row10.Soap.getDocument();
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setDoc(doc_tXMLMap_3_TXMLMAP_OUT);
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setDefineNS(false);
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_3_TXMLMAP_OUT);
				
					//old version, find NS from doc
					nsTool_tXMLMap_3_TXMLMAP_OUT.countNSMap(doc_tXMLMap_3_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT = nsTool_tXMLMap_3_TXMLMAP_OUT.xmlNameSpaceMap;
				
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_3_TXMLMAP_OUT = new String[1];
				String[] relativePathMappings_tXMLMap_3_TXMLMAP_OUT = new String[1];
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[0] = "row10.Soap:/s:Envelope/s:Body/seleccionarPersonaBusquedaResponse/seleccionarPersonaBusquedaResult/Persona/per_Consecutivo";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[0] = "Persona/per_Consecutivo";
				
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_3_TXMLMAP_OUT);
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_3_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_3_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_3_TXMLMAP_OUT = docToFlat_tXMLMap_3_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_3_TXMLMAP_OUT: resultSet_tXMLMap_3_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_3_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_3_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_3_TXMLMAP_OUT : oneRow_tXMLMap_3_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.put(entry_tXMLMap_3_TXMLMAP_OUT.getKey(),entry_tXMLMap_3_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_3_TXMLMAP_OUT__Struct Var = Var__tXMLMap_3_TXMLMAP_OUT;
		// ###############################
		// # Output tables

copyOfout2 = null;


// # Output table : 'copyOfout2'

copyOfout2_tmp = new copyOfout2Struct();
copyOfout2_tmp.per_Consecutivo = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row10.Soap:/s:Envelope/s:Body/seleccionarPersonaBusquedaResponse/seleccionarPersonaBusquedaResult/Persona/per_Consecutivo");allOutsForAggregate_tXMLMap_3.add(copyOfout2_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_3_TXMLMAP_OUT++;

/**
 * [tXMLMap_3_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_3_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_3_TXMLMAP_OUT process_data_end ] stop
 */



	
	/**
	 * [tSOAP_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tSOAP_3";
	
	

 



/**
 * [tSOAP_3 process_data_end ] stop
 */



	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());

   			if (context.CODIGO_ETNIA == 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If7", 0, "true");
					}
				tOracleInput_3Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If7", 0, "false");
					}   	 
   				}



/**
 * [tJava_5 end ] stop
 */

	
	/**
	 * [tSOAP_3 end ] start
	 */

	

	
	
	currentComponent="tSOAP_3";
	
	
soapUtil_tSOAP_3.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tSOAP_3", true);
end_Hash.put("tSOAP_3", System.currentTimeMillis());




/**
 * [tSOAP_3 end ] stop
 */

	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";
	
	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tXMLMap_3_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_3_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_3_TXMLMAP_OUT end ] stop
 */


	
	/**
	 * [tJavaRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_7", false);
		start_Hash.put("tJavaRow_7", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout2");
					}
				
		int tos_count_tJavaRow_7 = 0;
		

int nb_line_tJavaRow_7 = 0;

 



/**
 * [tJavaRow_7 begin ] stop
 */



	
	/**
	 * [tXMLMap_3_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_3_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_3_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";
	
	
		int tos_count_tXMLMap_3_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_3 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_3");
for(Object  row_out_tXMLMap_3_TXMLMAP_IN : outs_tXMLMap_3) {//TD512
 



/**
 * [tXMLMap_3_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";
	
	

	copyOfout2 = null;
	if(row_out_tXMLMap_3_TXMLMAP_IN!=null && row_out_tXMLMap_3_TXMLMAP_IN instanceof copyOfout2Struct) {
		copyOfout2 = (copyOfout2Struct)row_out_tXMLMap_3_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_3_TXMLMAP_IN++;

/**
 * [tXMLMap_3_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_3_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "copyOfout2"
if(copyOfout2 != null) { 



	
	/**
	 * [tJavaRow_7 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout2"
						
						);
					}
					

    //Code generate according to input schema and output schema
if(copyOfout2.per_Consecutivo != null){
	context.CONSECUTIVO = new BigDecimal(copyOfout2.per_Consecutivo);
}
    nb_line_tJavaRow_7++;   

 


	tos_count_tJavaRow_7++;

/**
 * [tJavaRow_7 main ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_end ] stop
 */

} // End of branch "copyOfout2"




	
	/**
	 * [tXMLMap_3_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_3_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";
	
	

}//TD512
 

ok_Hash.put("tXMLMap_3_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_3_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_3_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tJavaRow_7 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

globalMap.put("tJavaRow_7_NB_LINE",nb_line_tJavaRow_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout2");
			  	}
			  	
 

ok_Hash.put("tJavaRow_7", true);
end_Hash.put("tJavaRow_7", System.currentTimeMillis());

   			if (context.CONSECUTIVO == null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tSOAP_5Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_7 end ] stop
 */












						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJava_5);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tOracleInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 finally ] stop
 */

	
	/**
	 * [tSOAP_3 finally ] start
	 */

	

	
	
	currentComponent="tSOAP_3";
	
	

 



/**
 * [tSOAP_3 finally ] stop
 */

	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_3_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_3_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_3_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tJavaRow_7 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout1Struct implements routines.system.IPersistableRow<copyOfout1Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public String consecutivo;

				public String getConsecutivo () {
					return this.consecutivo;
				}

				public Boolean consecutivoIsNullable(){
				    return true;
				}
				public Boolean consecutivoIsKey(){
				    return false;
				}
				public Integer consecutivoLength(){
				    return null;
				}
				public Integer consecutivoPrecision(){
				    return null;
				}
				public String consecutivoDefault(){
				
					return null;
				
				}
				public String consecutivoComment(){
				
				    return "";
				
				}
				public String consecutivoPattern(){
				
				    return null;
				
				}
				public String consecutivoOriginalDbColumnName(){
				
					return "consecutivo";
				
				}

				
			    public String errores;

				public String getErrores () {
					return this.errores;
				}

				public Boolean erroresIsNullable(){
				    return true;
				}
				public Boolean erroresIsKey(){
				    return false;
				}
				public Integer erroresLength(){
				    return null;
				}
				public Integer erroresPrecision(){
				    return null;
				}
				public String erroresDefault(){
				
					return null;
				
				}
				public String erroresComment(){
				
				    return "";
				
				}
				public String erroresPattern(){
				
				    return null;
				
				}
				public String erroresOriginalDbColumnName(){
				
					return "errores";
				
				}

				
			    public Boolean resultado;

				public Boolean getResultado () {
					return this.resultado;
				}

				public Boolean resultadoIsNullable(){
				    return true;
				}
				public Boolean resultadoIsKey(){
				    return false;
				}
				public Integer resultadoLength(){
				    return null;
				}
				public Integer resultadoPrecision(){
				    return null;
				}
				public String resultadoDefault(){
				
					return null;
				
				}
				public String resultadoComment(){
				
				    return "";
				
				}
				public String resultadoPattern(){
				
				    return null;
				
				}
				public String resultadoOriginalDbColumnName(){
				
					return "resultado";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.consecutivo = readString(dis);
					
					this.errores = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.resultado = null;
           				} else {
           			    	this.resultado = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.consecutivo = readString(dis);
					
					this.errores = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.resultado = null;
           				} else {
           			    	this.resultado = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.consecutivo,dos);
					
					// String
				
						writeString(this.errores,dos);
					
					// Boolean
				
						if(this.resultado == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.resultado);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.consecutivo,dos);
					
					// String
				
						writeString(this.errores,dos);
					
					// Boolean
				
						if(this.resultado == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.resultado);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("consecutivo="+consecutivo);
		sb.append(",errores="+errores);
		sb.append(",resultado="+String.valueOf(resultado));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public routines.system.Document Soap;

				public routines.system.Document getSoap () {
					return this.Soap;
				}

				public Boolean SoapIsNullable(){
				    return true;
				}
				public Boolean SoapIsKey(){
				    return false;
				}
				public Integer SoapLength(){
				    return 0;
				}
				public Integer SoapPrecision(){
				    return 0;
				}
				public String SoapDefault(){
				
					return "";
				
				}
				public String SoapComment(){
				
				    return null;
				
				}
				public String SoapPattern(){
				
				    return null;
				
				}
				public String SoapOriginalDbColumnName(){
				
					return "Soap";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.Soap = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.Soap = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.Soap);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Document
				
						dos.clearInstanceCache();
						dos.writeObject(this.Soap);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Soap="+String.valueOf(Soap));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tSOAP_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSOAP_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
copyOfout1Struct copyOfout1 = new copyOfout1Struct();




	
	/**
	 * [tXMLMap_5_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_5_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_5_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_OUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tXMLMap_5_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_5_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_5_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_5_TXMLMAP_OUT__Struct Var__tXMLMap_5_TXMLMAP_OUT = new Var__tXMLMap_5_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
copyOfout1Struct copyOfout1_save = null;
//the aggregate variable
copyOfout1Struct copyOfout1_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_5 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_5",allOutsForAggregate_tXMLMap_5);
// ###############################
class TreeNode_API_tXMLMap_5_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
}
			TreeNode_API_tXMLMap_5_TXMLMAP_OUT treeNodeAPI_tXMLMap_5_TXMLMAP_OUT = new TreeNode_API_tXMLMap_5_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_5_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_5_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_5_TXMLMAP_OUT xml_api_tXMLMap_5_TXMLMAP_OUT = new XML_API_tXMLMap_5_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_5_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            

 



/**
 * [tXMLMap_5_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tSOAP_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tSOAP_5", false);
		start_Hash.put("tSOAP_5", System.currentTimeMillis());
		
	
	currentComponent="tSOAP_5";
	
	
		int tos_count_tSOAP_5 = 0;
		
 org.talend.soap.SOAPUtil soapUtil_tSOAP_5 = new org.talend.soap.SOAPUtil();

 
	final String decryptedPassword_tSOAP_5 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:VBRlo12GgIxkQ1dxMQ3r1w+gxSsX9gW+fW530NvQDTeXyu4Q");


     
    	final String decryptedProxyPwd_tSOAP_5 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:f5jlpdRgf2mZavAeMfDHRCiL0lRM4c5Hk4q1Jg==");

soapUtil_tSOAP_5.setProxy("172.20.19.254",3128,"",decryptedProxyPwd_tSOAP_5);
 



/**
 * [tSOAP_5 begin ] stop
 */
	
	/**
	 * [tSOAP_5 main ] start
	 */

	

	
	
	currentComponent="tSOAP_5";
	
	

		
		
			String document_tSOAP_5 = soapUtil_tSOAP_5.extractContentAsDocument(org.talend.soap.SOAPUtil.SOAP11,context.UrlEndPoint,context.UlrActionSoapInsertarPersona,"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:sds=\"http://Sds.SaludPublica\">  <soapenv:Body>        <sds:InsertarPersona>  	<sds:per_TipoId>"+context.TIPODOCUMENTO+"</sds:per_TipoId>   	<sds:per_Id>"+context.DOCUMENTO+"</sds:per_Id>           	<sds:per_CertNacVivo>"+context.CERTIFICADO+"</sds:per_CertNacVivo>  	<sds:per_TipoIdM>"+context.TIPODOCUMENTO_M+"</sds:per_TipoIdM>  	<sds:per_IdM>"+context.DOCUMENTO_M+"</sds:per_IdM>  	<sds:per_Nombre1M>"+context.PRIMER_NOMBRE_M+"</sds:per_Nombre1M>  	<sds:per_Nombre2M>"+context.SEGUNDO_NOMBRE_M+"</sds:per_Nombre2M>  	<sds:per_Apellido1M>"+context.PRIMER_APELLIDO_M+"</sds:per_Apellido1M>  	<sds:per_Apellido2M>"+context.SEGUNDO_APELLIDO_M+"</sds:per_Apellido2M>  	<sds:per_Nombre1>"+context.PRIMER_NOMBRE+"</sds:per_Nombre1>  	<sds:per_Nombre2>"+context.SEGUNDO_NOMBRE+"</sds:per_Nombre2>  	<sds:per_Apellido1>"+context.PRIMER_APELLIDO+"</sds:per_Apellido1>  	<sds:per_Apellido2>"+context.SEGUNDO_APELLIDO+"</sds:per_Apellido2>  	<sds:per_FechaNac>"+context.FECHA_NACIMIENTOP+"</sds:per_FechaNac>  	<sds:per_Func>"+context.FUNCIONARIO+"</sds:per_Func>  	<sds:per_Institucion>"+context.INSTITUCION+"</sds:per_Institucion>  	<sds:per_Estado>"+context.ESTADO_REG+"</sds:per_Estado>  	<sds:per_idEtnia>"+context.CODIGO_ETNIA+"</sds:per_idEtnia>  	<sds:per_IdGenero>"+context.SIGLA_SEXO+"</sds:per_IdGenero>  	<sds:per_IdGrupoSanguineo>"+context.GRUPO_SANGUINEO+"</sds:per_IdGrupoSanguineo>  	<sds:per_IdRh>"+context.COD_RH+"</sds:per_IdRh>	        </sds:InsertarPersona>     </soapenv:Body>  </soapenv:Envelope>");
		
		
	

	// for output
			
				row6 = new row6Struct();
				
					row6.Soap = ParserUtils.parseTo_Document(document_tSOAP_5);
				
        


 


	tos_count_tSOAP_5++;

/**
 * [tSOAP_5 main ] stop
 */
	
	/**
	 * [tSOAP_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSOAP_5";
	
	

 



/**
 * [tSOAP_5 process_data_begin ] stop
 */

	
	/**
	 * [tXMLMap_5_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_OUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

	boolean rejectedInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_5_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_5_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_5_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setOriginalLoop("/s:Envelope/s:Body/InsertarPersonaResponse/InsertarPersonaResult");
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setIsOptional(false);
				if(row6.Soap == null || row6.Soap.getDocument() == null) {
					throw new RuntimeException("row6.Soap can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_5_TXMLMAP_OUT = row6.Soap.getDocument();
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setDoc(doc_tXMLMap_5_TXMLMAP_OUT);
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setDefineNS(false);
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_5_TXMLMAP_OUT);
				
					//old version, find NS from doc
					nsTool_tXMLMap_5_TXMLMAP_OUT.countNSMap(doc_tXMLMap_5_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_5_TXMLMAP_OUT = nsTool_tXMLMap_5_TXMLMAP_OUT.xmlNameSpaceMap;
				
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_5_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_5_TXMLMAP_OUT = new String[3];
				String[] relativePathMappings_tXMLMap_5_TXMLMAP_OUT = new String[3];
				
				absolutePathMappings_tXMLMap_5_TXMLMAP_OUT[0] = "row6.Soap:/s:Envelope/s:Body/InsertarPersonaResponse/InsertarPersonaResult/resultado";
				relativePathMappings_tXMLMap_5_TXMLMAP_OUT[0] = "resultado";
				
				absolutePathMappings_tXMLMap_5_TXMLMAP_OUT[1] = "row6.Soap:/s:Envelope/s:Body/InsertarPersonaResponse/InsertarPersonaResult/consecutivo";
				relativePathMappings_tXMLMap_5_TXMLMAP_OUT[1] = "consecutivo";
				
				absolutePathMappings_tXMLMap_5_TXMLMAP_OUT[2] = "row6.Soap:/s:Envelope/s:Body/InsertarPersonaResponse/InsertarPersonaResult/errores";
				relativePathMappings_tXMLMap_5_TXMLMAP_OUT[2] = "errores";
				
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_5_TXMLMAP_OUT);
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_5_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_5_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_5_TXMLMAP_OUT = docToFlat_tXMLMap_5_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_5_TXMLMAP_OUT: resultSet_tXMLMap_5_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_5_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_5_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_5_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_5_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_5_TXMLMAP_OUT : oneRow_tXMLMap_5_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_5_TXMLMAP_OUT.put(entry_tXMLMap_5_TXMLMAP_OUT.getKey(),entry_tXMLMap_5_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_5_TXMLMAP_OUT__Struct Var = Var__tXMLMap_5_TXMLMAP_OUT;
		// ###############################
		// # Output tables

copyOfout1 = null;


// # Output table : 'copyOfout1'

copyOfout1_tmp = new copyOfout1Struct();
copyOfout1_tmp.consecutivo =  treeNodeAPI_tXMLMap_5_TXMLMAP_OUT.get_String("row6.Soap:/s:Envelope/s:Body/InsertarPersonaResponse/InsertarPersonaResult/consecutivo");
copyOfout1_tmp.errores =  treeNodeAPI_tXMLMap_5_TXMLMAP_OUT.get_String("row6.Soap:/s:Envelope/s:Body/InsertarPersonaResponse/InsertarPersonaResult/errores");
copyOfout1_tmp.resultado = Boolean.parseBoolean( treeNodeAPI_tXMLMap_5_TXMLMAP_OUT.get_String("row6.Soap:/s:Envelope/s:Body/InsertarPersonaResponse/InsertarPersonaResult/resultado"));allOutsForAggregate_tXMLMap_5.add(copyOfout1_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_5_TXMLMAP_OUT++;

/**
 * [tXMLMap_5_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_5_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_5_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_5_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_5_TXMLMAP_OUT process_data_end ] stop
 */



	
	/**
	 * [tSOAP_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tSOAP_5";
	
	

 



/**
 * [tSOAP_5 process_data_end ] stop
 */
	
	/**
	 * [tSOAP_5 end ] start
	 */

	

	
	
	currentComponent="tSOAP_5";
	
	
soapUtil_tSOAP_5.close();

 

ok_Hash.put("tSOAP_5", true);
end_Hash.put("tSOAP_5", System.currentTimeMillis());




/**
 * [tSOAP_5 end ] stop
 */

	
	/**
	 * [tXMLMap_5_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_OUT";
	
	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tXMLMap_5_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_5_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_5_TXMLMAP_OUT end ] stop
 */


	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout1");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tXMLMap_5_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_5_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_5_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_IN";
	
	
		int tos_count_tXMLMap_5_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_5 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_5");
for(Object  row_out_tXMLMap_5_TXMLMAP_IN : outs_tXMLMap_5) {//TD512
 



/**
 * [tXMLMap_5_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_5_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_IN";
	
	

	copyOfout1 = null;
	if(row_out_tXMLMap_5_TXMLMAP_IN!=null && row_out_tXMLMap_5_TXMLMAP_IN instanceof copyOfout1Struct) {
		copyOfout1 = (copyOfout1Struct)row_out_tXMLMap_5_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_5_TXMLMAP_IN++;

/**
 * [tXMLMap_5_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_5_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_5_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "copyOfout1"
if(copyOfout1 != null) { 



	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout1"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.ERRORES = copyOfout1.errores;
context.RESULTADO = copyOfout1.resultado;

if(context.RESULTADO){
	context.CONSECUTIVO = new BigDecimal(copyOfout1.consecutivo);
}
    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */

} // End of branch "copyOfout1"




	
	/**
	 * [tXMLMap_5_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_5_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_5_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_IN";
	
	

}//TD512
 

ok_Hash.put("tXMLMap_5_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_5_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_5_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());

   			if (context.CONSECUTIVO != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If11", 0, "true");
					}
				tSOAP_6Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If11", 0, "false");
					}   	 
   				}
   			if (context.CONSECUTIVO != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If12", 0, "true");
					}
				tSOAP_7Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If12", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_4 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSOAP_5 finally ] start
	 */

	

	
	
	currentComponent="tSOAP_5";
	
	

 



/**
 * [tSOAP_5 finally ] stop
 */

	
	/**
	 * [tXMLMap_5_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_5_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_5_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_5_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSOAP_5_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout5Struct implements routines.system.IPersistableRow<copyOfout5Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public Boolean resultado;

				public Boolean getResultado () {
					return this.resultado;
				}

				public Boolean resultadoIsNullable(){
				    return true;
				}
				public Boolean resultadoIsKey(){
				    return false;
				}
				public Integer resultadoLength(){
				    return null;
				}
				public Integer resultadoPrecision(){
				    return null;
				}
				public String resultadoDefault(){
				
					return null;
				
				}
				public String resultadoComment(){
				
				    return "";
				
				}
				public String resultadoPattern(){
				
					return "";
				
				}
				public String resultadoOriginalDbColumnName(){
				
					return "resultado";
				
				}

				
			    public String errores;

				public String getErrores () {
					return this.errores;
				}

				public Boolean erroresIsNullable(){
				    return true;
				}
				public Boolean erroresIsKey(){
				    return false;
				}
				public Integer erroresLength(){
				    return null;
				}
				public Integer erroresPrecision(){
				    return null;
				}
				public String erroresDefault(){
				
					return null;
				
				}
				public String erroresComment(){
				
				    return "";
				
				}
				public String erroresPattern(){
				
					return "";
				
				}
				public String erroresOriginalDbColumnName(){
				
					return "errores";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.resultado = null;
           				} else {
           			    	this.resultado = dis.readBoolean();
           				}
					
					this.errores = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.resultado = null;
           				} else {
           			    	this.resultado = dis.readBoolean();
           				}
					
					this.errores = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Boolean
				
						if(this.resultado == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.resultado);
		            	}
					
					// String
				
						writeString(this.errores,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Boolean
				
						if(this.resultado == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.resultado);
		            	}
					
					// String
				
						writeString(this.errores,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("resultado="+String.valueOf(resultado));
		sb.append(",errores="+errores);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public routines.system.Document Soap;

				public routines.system.Document getSoap () {
					return this.Soap;
				}

				public Boolean SoapIsNullable(){
				    return true;
				}
				public Boolean SoapIsKey(){
				    return false;
				}
				public Integer SoapLength(){
				    return 0;
				}
				public Integer SoapPrecision(){
				    return 0;
				}
				public String SoapDefault(){
				
					return "";
				
				}
				public String SoapComment(){
				
				    return null;
				
				}
				public String SoapPattern(){
				
				    return null;
				
				}
				public String SoapOriginalDbColumnName(){
				
					return "Soap";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.Soap = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.Soap = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.Soap);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Document
				
						dos.clearInstanceCache();
						dos.writeObject(this.Soap);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Soap="+String.valueOf(Soap));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tSOAP_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSOAP_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();
copyOfout5Struct copyOfout5 = new copyOfout5Struct();




	
	/**
	 * [tXMLMap_6_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_6_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_6_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_OUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tXMLMap_6_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_6_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_6_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_6_TXMLMAP_OUT__Struct Var__tXMLMap_6_TXMLMAP_OUT = new Var__tXMLMap_6_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
copyOfout5Struct copyOfout5_tmp = new copyOfout5Struct();
copyOfout5Struct copyOfout5_save = null;
//the aggregate variable
copyOfout5Struct copyOfout5_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_6 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_6",allOutsForAggregate_tXMLMap_6);
// ###############################
class TreeNode_API_tXMLMap_6_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
}
			TreeNode_API_tXMLMap_6_TXMLMAP_OUT treeNodeAPI_tXMLMap_6_TXMLMAP_OUT = new TreeNode_API_tXMLMap_6_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_6_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_6_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_6_TXMLMAP_OUT xml_api_tXMLMap_6_TXMLMAP_OUT = new XML_API_tXMLMap_6_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_6_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            

 



/**
 * [tXMLMap_6_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tSOAP_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tSOAP_6", false);
		start_Hash.put("tSOAP_6", System.currentTimeMillis());
		
	
	currentComponent="tSOAP_6";
	
	
		int tos_count_tSOAP_6 = 0;
		
 org.talend.soap.SOAPUtil soapUtil_tSOAP_6 = new org.talend.soap.SOAPUtil();

 
	final String decryptedPassword_tSOAP_6 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:gRMlFXl5dKwPADDjosOuohjrYLoUxcVn/jkmInPHRjTGU4sF");


     
    	final String decryptedProxyPwd_tSOAP_6 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:Ek7JhphkwnA3QVFS+xCEO+uW3Fmb2aFQN2b2kA==");

soapUtil_tSOAP_6.setProxy("172.20.19.254",3128,"",decryptedProxyPwd_tSOAP_6);
 



/**
 * [tSOAP_6 begin ] stop
 */
	
	/**
	 * [tSOAP_6 main ] start
	 */

	

	
	
	currentComponent="tSOAP_6";
	
	

		
		
			String document_tSOAP_6 = soapUtil_tSOAP_6.extractContentAsDocument(org.talend.soap.SOAPUtil.SOAP11,context.UrlEndPoint,context.UrlActionSoapInsertarUbicacionPersona,"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:sds=\"http://Sds.SaludPublica\">     <soapenv:Header/>     <soapenv:Body>        <sds:insertarUbicacionPersona>           <sds:per_Consecutivo>"+context.CONSECUTIVO+"</sds:per_Consecutivo>           <sds:dir_Direccion>"+context.DIRECCION+"</sds:dir_Direccion>           <sds:tel_Telefono>"+context.TELEFONO+"</sds:tel_Telefono>           <sds:cor_correo>"+context.CORREO+"</sds:cor_correo>   	<sds:dir_mun_id>"+context.COD_MCPIO+"</sds:dir_mun_id>          <sds:dir_dep_Id>"+context.COD_DEPTO+"</sds:dir_dep_Id>          <sds:dir_pais_Id>"+context.COD_PAIS+"</sds:dir_pais_Id>         </sds:insertarUbicacionPersona>     </soapenv:Body>  </soapenv:Envelope>");
		
		
	

	// for output
			
				row13 = new row13Struct();
				
					row13.Soap = ParserUtils.parseTo_Document(document_tSOAP_6);
				
        


 


	tos_count_tSOAP_6++;

/**
 * [tSOAP_6 main ] stop
 */
	
	/**
	 * [tSOAP_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSOAP_6";
	
	

 



/**
 * [tSOAP_6 process_data_begin ] stop
 */

	
	/**
	 * [tXMLMap_6_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_OUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					

	boolean rejectedInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_6_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_6_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_6_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_6_TXMLMAP_OUT.setOriginalLoop("/s:Envelope/s:Body/insertarUbicacionPersonaResponse/insertarUbicacionPersonaResult");
				docToFlat_tXMLMap_6_TXMLMAP_OUT.setIsOptional(false);
				if(row13.Soap == null || row13.Soap.getDocument() == null) {
					throw new RuntimeException("row13.Soap can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_6_TXMLMAP_OUT = row13.Soap.getDocument();
				docToFlat_tXMLMap_6_TXMLMAP_OUT.setDoc(doc_tXMLMap_6_TXMLMAP_OUT);
				docToFlat_tXMLMap_6_TXMLMAP_OUT.setDefineNS(false);
				docToFlat_tXMLMap_6_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_6_TXMLMAP_OUT);
				
					//old version, find NS from doc
					nsTool_tXMLMap_6_TXMLMAP_OUT.countNSMap(doc_tXMLMap_6_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_6_TXMLMAP_OUT = nsTool_tXMLMap_6_TXMLMAP_OUT.xmlNameSpaceMap;
				
				docToFlat_tXMLMap_6_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_6_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_6_TXMLMAP_OUT = new String[2];
				String[] relativePathMappings_tXMLMap_6_TXMLMAP_OUT = new String[2];
				
				absolutePathMappings_tXMLMap_6_TXMLMAP_OUT[0] = "row13.Soap:/s:Envelope/s:Body/insertarUbicacionPersonaResponse/insertarUbicacionPersonaResult/resultado";
				relativePathMappings_tXMLMap_6_TXMLMAP_OUT[0] = "resultado";
				
				absolutePathMappings_tXMLMap_6_TXMLMAP_OUT[1] = "row13.Soap:/s:Envelope/s:Body/insertarUbicacionPersonaResponse/insertarUbicacionPersonaResult/errores";
				relativePathMappings_tXMLMap_6_TXMLMAP_OUT[1] = "errores";
				
				docToFlat_tXMLMap_6_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_6_TXMLMAP_OUT);
				docToFlat_tXMLMap_6_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_6_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_6_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_6_TXMLMAP_OUT = docToFlat_tXMLMap_6_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_6_TXMLMAP_OUT: resultSet_tXMLMap_6_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_6_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_6_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_6_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_6_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_6_TXMLMAP_OUT : oneRow_tXMLMap_6_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_6_TXMLMAP_OUT.put(entry_tXMLMap_6_TXMLMAP_OUT.getKey(),entry_tXMLMap_6_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_6_TXMLMAP_OUT__Struct Var = Var__tXMLMap_6_TXMLMAP_OUT;
		// ###############################
		// # Output tables

copyOfout5 = null;


// # Output table : 'copyOfout5'

copyOfout5_tmp = new copyOfout5Struct();
copyOfout5_tmp.resultado = Boolean.parseBoolean(treeNodeAPI_tXMLMap_6_TXMLMAP_OUT.get_String("row13.Soap:/s:Envelope/s:Body/insertarUbicacionPersonaResponse/insertarUbicacionPersonaResult/resultado")) ;
copyOfout5_tmp.errores =  treeNodeAPI_tXMLMap_6_TXMLMAP_OUT.get_String("row13.Soap:/s:Envelope/s:Body/insertarUbicacionPersonaResponse/insertarUbicacionPersonaResult/errores");allOutsForAggregate_tXMLMap_6.add(copyOfout5_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_6_TXMLMAP_OUT++;

/**
 * [tXMLMap_6_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_6_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_6_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_6_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_6_TXMLMAP_OUT process_data_end ] stop
 */



	
	/**
	 * [tSOAP_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tSOAP_6";
	
	

 



/**
 * [tSOAP_6 process_data_end ] stop
 */
	
	/**
	 * [tSOAP_6 end ] start
	 */

	

	
	
	currentComponent="tSOAP_6";
	
	
soapUtil_tSOAP_6.close();

 

ok_Hash.put("tSOAP_6", true);
end_Hash.put("tSOAP_6", System.currentTimeMillis());




/**
 * [tSOAP_6 end ] stop
 */

	
	/**
	 * [tXMLMap_6_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_OUT";
	
	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tXMLMap_6_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_6_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_6_TXMLMAP_OUT end ] stop
 */


	
	/**
	 * [tJavaRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_9", false);
		start_Hash.put("tJavaRow_9", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout5");
					}
				
		int tos_count_tJavaRow_9 = 0;
		

int nb_line_tJavaRow_9 = 0;

 



/**
 * [tJavaRow_9 begin ] stop
 */



	
	/**
	 * [tXMLMap_6_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_6_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_6_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_IN";
	
	
		int tos_count_tXMLMap_6_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_6 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_6");
for(Object  row_out_tXMLMap_6_TXMLMAP_IN : outs_tXMLMap_6) {//TD512
 



/**
 * [tXMLMap_6_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_6_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_IN";
	
	

	copyOfout5 = null;
	if(row_out_tXMLMap_6_TXMLMAP_IN!=null && row_out_tXMLMap_6_TXMLMAP_IN instanceof copyOfout5Struct) {
		copyOfout5 = (copyOfout5Struct)row_out_tXMLMap_6_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_6_TXMLMAP_IN++;

/**
 * [tXMLMap_6_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_6_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_6_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "copyOfout5"
if(copyOfout5 != null) { 



	
	/**
	 * [tJavaRow_9 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout5"
						
						);
					}
					

    context.RESULTADO = copyOfout5.resultado;
context.ERRORES = copyOfout5.errores;
    nb_line_tJavaRow_9++;   

 


	tos_count_tJavaRow_9++;

/**
 * [tJavaRow_9 main ] stop
 */
	
	/**
	 * [tJavaRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 process_data_end ] stop
 */

} // End of branch "copyOfout5"




	
	/**
	 * [tXMLMap_6_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_6_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_6_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_IN";
	
	

}//TD512
 

ok_Hash.put("tXMLMap_6_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_6_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_6_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tJavaRow_9 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

globalMap.put("tJavaRow_9_NB_LINE",nb_line_tJavaRow_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout5");
			  	}
			  	
 

ok_Hash.put("tJavaRow_9", true);
end_Hash.put("tJavaRow_9", System.currentTimeMillis());




/**
 * [tJavaRow_9 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSOAP_6 finally ] start
	 */

	

	
	
	currentComponent="tSOAP_6";
	
	

 



/**
 * [tSOAP_6 finally ] stop
 */

	
	/**
	 * [tXMLMap_6_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_6_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_6_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_6_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tJavaRow_9 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSOAP_6_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfcopyOfout5Struct implements routines.system.IPersistableRow<copyOfcopyOfout5Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public Boolean resultado;

				public Boolean getResultado () {
					return this.resultado;
				}

				public Boolean resultadoIsNullable(){
				    return true;
				}
				public Boolean resultadoIsKey(){
				    return false;
				}
				public Integer resultadoLength(){
				    return null;
				}
				public Integer resultadoPrecision(){
				    return null;
				}
				public String resultadoDefault(){
				
					return null;
				
				}
				public String resultadoComment(){
				
				    return "";
				
				}
				public String resultadoPattern(){
				
					return "";
				
				}
				public String resultadoOriginalDbColumnName(){
				
					return "resultado";
				
				}

				
			    public String errores;

				public String getErrores () {
					return this.errores;
				}

				public Boolean erroresIsNullable(){
				    return true;
				}
				public Boolean erroresIsKey(){
				    return false;
				}
				public Integer erroresLength(){
				    return null;
				}
				public Integer erroresPrecision(){
				    return null;
				}
				public String erroresDefault(){
				
					return null;
				
				}
				public String erroresComment(){
				
				    return "";
				
				}
				public String erroresPattern(){
				
					return "";
				
				}
				public String erroresOriginalDbColumnName(){
				
					return "errores";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.resultado = null;
           				} else {
           			    	this.resultado = dis.readBoolean();
           				}
					
					this.errores = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.resultado = null;
           				} else {
           			    	this.resultado = dis.readBoolean();
           				}
					
					this.errores = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Boolean
				
						if(this.resultado == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.resultado);
		            	}
					
					// String
				
						writeString(this.errores,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Boolean
				
						if(this.resultado == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.resultado);
		            	}
					
					// String
				
						writeString(this.errores,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("resultado="+String.valueOf(resultado));
		sb.append(",errores="+errores);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfout5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public routines.system.Document Soap;

				public routines.system.Document getSoap () {
					return this.Soap;
				}

				public Boolean SoapIsNullable(){
				    return true;
				}
				public Boolean SoapIsKey(){
				    return false;
				}
				public Integer SoapLength(){
				    return 0;
				}
				public Integer SoapPrecision(){
				    return 0;
				}
				public String SoapDefault(){
				
					return "";
				
				}
				public String SoapComment(){
				
				    return null;
				
				}
				public String SoapPattern(){
				
				    return null;
				
				}
				public String SoapOriginalDbColumnName(){
				
					return "Soap";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.Soap = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.Soap = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.Soap);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Document
				
						dos.clearInstanceCache();
						dos.writeObject(this.Soap);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Soap="+String.valueOf(Soap));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tSOAP_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSOAP_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();
copyOfcopyOfout5Struct copyOfcopyOfout5 = new copyOfcopyOfout5Struct();




	
	/**
	 * [tXMLMap_7_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_7_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_7_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_OUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tXMLMap_7_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_7_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_7_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_7_TXMLMAP_OUT__Struct Var__tXMLMap_7_TXMLMAP_OUT = new Var__tXMLMap_7_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
copyOfcopyOfout5Struct copyOfcopyOfout5_tmp = new copyOfcopyOfout5Struct();
copyOfcopyOfout5Struct copyOfcopyOfout5_save = null;
//the aggregate variable
copyOfcopyOfout5Struct copyOfcopyOfout5_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_7 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_7",allOutsForAggregate_tXMLMap_7);
// ###############################
class TreeNode_API_tXMLMap_7_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
}
			TreeNode_API_tXMLMap_7_TXMLMAP_OUT treeNodeAPI_tXMLMap_7_TXMLMAP_OUT = new TreeNode_API_tXMLMap_7_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_7_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_7_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_7_TXMLMAP_OUT xml_api_tXMLMap_7_TXMLMAP_OUT = new XML_API_tXMLMap_7_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_7_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            

 



/**
 * [tXMLMap_7_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tSOAP_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tSOAP_7", false);
		start_Hash.put("tSOAP_7", System.currentTimeMillis());
		
	
	currentComponent="tSOAP_7";
	
	
		int tos_count_tSOAP_7 = 0;
		
 org.talend.soap.SOAPUtil soapUtil_tSOAP_7 = new org.talend.soap.SOAPUtil();

 
	final String decryptedPassword_tSOAP_7 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:9bvrfFG1iRssfXqP1lYuVyZpA/gi3FLY/R8RjIllcIv47u8Z");


     
    	final String decryptedProxyPwd_tSOAP_7 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:2Buri06q3kyflSfTV3LKYx+Bu/crWAUf8BzLxA==");

soapUtil_tSOAP_7.setProxy("172.20.19.254",3128,"",decryptedProxyPwd_tSOAP_7);
 



/**
 * [tSOAP_7 begin ] stop
 */
	
	/**
	 * [tSOAP_7 main ] start
	 */

	

	
	
	currentComponent="tSOAP_7";
	
	

		
		
			String document_tSOAP_7 = soapUtil_tSOAP_7.extractContentAsDocument(org.talend.soap.SOAPUtil.SOAP11,context.UrlEndPoint,context.UrlActionSoapInsertarAfiliacionPersona,"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:sds=\"http://Sds.SaludPublica\">     <soapenv:Header/>     <soapenv:Body>        <sds:insertarAfiliacionPersona>           <sds:per_Consecutivo>"+context.CONSECUTIVO+"</sds:per_Consecutivo>          <sds:ase_id>"+context.COD_ASEGURADORA+"</sds:ase_id>           <sds:reg_Id>"+context.COD_REGIMEN+"</sds:reg_Id>	          <sds:tia_id>"+context.TIPO_AFILIACION+"</sds:tia_id>        </sds:insertarAfiliacionPersona>     </soapenv:Body>  </soapenv:Envelope>");
		
		
	

	// for output
			
				row14 = new row14Struct();
				
					row14.Soap = ParserUtils.parseTo_Document(document_tSOAP_7);
				
        


 


	tos_count_tSOAP_7++;

/**
 * [tSOAP_7 main ] stop
 */
	
	/**
	 * [tSOAP_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSOAP_7";
	
	

 



/**
 * [tSOAP_7 process_data_begin ] stop
 */

	
	/**
	 * [tXMLMap_7_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_OUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

	boolean rejectedInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_7_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_7_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_7_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_7_TXMLMAP_OUT.setOriginalLoop("/s:Envelope/s:Body/insertarAfiliacionPersonaResponse/insertarAfiliacionPersonaResult");
				docToFlat_tXMLMap_7_TXMLMAP_OUT.setIsOptional(false);
				if(row14.Soap == null || row14.Soap.getDocument() == null) {
					throw new RuntimeException("row14.Soap can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_7_TXMLMAP_OUT = row14.Soap.getDocument();
				docToFlat_tXMLMap_7_TXMLMAP_OUT.setDoc(doc_tXMLMap_7_TXMLMAP_OUT);
				docToFlat_tXMLMap_7_TXMLMAP_OUT.setDefineNS(false);
				docToFlat_tXMLMap_7_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_7_TXMLMAP_OUT);
				
					//old version, find NS from doc
					nsTool_tXMLMap_7_TXMLMAP_OUT.countNSMap(doc_tXMLMap_7_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_7_TXMLMAP_OUT = nsTool_tXMLMap_7_TXMLMAP_OUT.xmlNameSpaceMap;
				
				docToFlat_tXMLMap_7_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_7_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_7_TXMLMAP_OUT = new String[2];
				String[] relativePathMappings_tXMLMap_7_TXMLMAP_OUT = new String[2];
				
				absolutePathMappings_tXMLMap_7_TXMLMAP_OUT[0] = "row14.Soap:/s:Envelope/s:Body/insertarAfiliacionPersonaResponse/insertarAfiliacionPersonaResult/resultado";
				relativePathMappings_tXMLMap_7_TXMLMAP_OUT[0] = "resultado";
				
				absolutePathMappings_tXMLMap_7_TXMLMAP_OUT[1] = "row14.Soap:/s:Envelope/s:Body/insertarAfiliacionPersonaResponse/insertarAfiliacionPersonaResult/errores";
				relativePathMappings_tXMLMap_7_TXMLMAP_OUT[1] = "errores";
				
				docToFlat_tXMLMap_7_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_7_TXMLMAP_OUT);
				docToFlat_tXMLMap_7_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_7_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_7_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_7_TXMLMAP_OUT = docToFlat_tXMLMap_7_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_7_TXMLMAP_OUT: resultSet_tXMLMap_7_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_7_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_7_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_7_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_7_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_7_TXMLMAP_OUT : oneRow_tXMLMap_7_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_7_TXMLMAP_OUT.put(entry_tXMLMap_7_TXMLMAP_OUT.getKey(),entry_tXMLMap_7_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_7_TXMLMAP_OUT__Struct Var = Var__tXMLMap_7_TXMLMAP_OUT;
		// ###############################
		// # Output tables

copyOfcopyOfout5 = null;


// # Output table : 'copyOfcopyOfout5'

copyOfcopyOfout5_tmp = new copyOfcopyOfout5Struct();
copyOfcopyOfout5_tmp.resultado = Boolean.parseBoolean(treeNodeAPI_tXMLMap_7_TXMLMAP_OUT.get_String("row14.Soap:/s:Envelope/s:Body/insertarAfiliacionPersonaResponse/insertarAfiliacionPersonaResult/resultado")) ;
copyOfcopyOfout5_tmp.errores =  treeNodeAPI_tXMLMap_7_TXMLMAP_OUT.get_String("row14.Soap:/s:Envelope/s:Body/insertarAfiliacionPersonaResponse/insertarAfiliacionPersonaResult/errores");allOutsForAggregate_tXMLMap_7.add(copyOfcopyOfout5_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_7_TXMLMAP_OUT++;

/**
 * [tXMLMap_7_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_7_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_7_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_7_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_7_TXMLMAP_OUT process_data_end ] stop
 */



	
	/**
	 * [tSOAP_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tSOAP_7";
	
	

 



/**
 * [tSOAP_7 process_data_end ] stop
 */
	
	/**
	 * [tSOAP_7 end ] start
	 */

	

	
	
	currentComponent="tSOAP_7";
	
	
soapUtil_tSOAP_7.close();

 

ok_Hash.put("tSOAP_7", true);
end_Hash.put("tSOAP_7", System.currentTimeMillis());




/**
 * [tSOAP_7 end ] stop
 */

	
	/**
	 * [tXMLMap_7_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_OUT";
	
	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tXMLMap_7_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_7_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_7_TXMLMAP_OUT end ] stop
 */


	
	/**
	 * [tJavaRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_10", false);
		start_Hash.put("tJavaRow_10", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfout5");
					}
				
		int tos_count_tJavaRow_10 = 0;
		

int nb_line_tJavaRow_10 = 0;

 



/**
 * [tJavaRow_10 begin ] stop
 */



	
	/**
	 * [tXMLMap_7_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_7_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_7_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_IN";
	
	
		int tos_count_tXMLMap_7_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_7 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_7");
for(Object  row_out_tXMLMap_7_TXMLMAP_IN : outs_tXMLMap_7) {//TD512
 



/**
 * [tXMLMap_7_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_7_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_IN";
	
	

	copyOfcopyOfout5 = null;
	if(row_out_tXMLMap_7_TXMLMAP_IN!=null && row_out_tXMLMap_7_TXMLMAP_IN instanceof copyOfcopyOfout5Struct) {
		copyOfcopyOfout5 = (copyOfcopyOfout5Struct)row_out_tXMLMap_7_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_7_TXMLMAP_IN++;

/**
 * [tXMLMap_7_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_7_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_7_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfout5"
if(copyOfcopyOfout5 != null) { 



	
	/**
	 * [tJavaRow_10 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfout5"
						
						);
					}
					

    context.RESULTADO = copyOfcopyOfout5.resultado;
context.ERRORES = copyOfcopyOfout5.errores;
    nb_line_tJavaRow_10++;   

 


	tos_count_tJavaRow_10++;

/**
 * [tJavaRow_10 main ] stop
 */
	
	/**
	 * [tJavaRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfout5"




	
	/**
	 * [tXMLMap_7_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_7_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_7_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_IN";
	
	

}//TD512
 

ok_Hash.put("tXMLMap_7_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_7_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_7_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tJavaRow_10 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

globalMap.put("tJavaRow_10_NB_LINE",nb_line_tJavaRow_10);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfout5");
			  	}
			  	
 

ok_Hash.put("tJavaRow_10", true);
end_Hash.put("tJavaRow_10", System.currentTimeMillis());

   			if (context.RESULTADO == true) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If13", 0, "true");
					}
				tOracleRow_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If13", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_10 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSOAP_7 finally ] start
	 */

	

	
	
	currentComponent="tSOAP_7";
	
	

 



/**
 * [tSOAP_7 finally ] stop
 */

	
	/**
	 * [tXMLMap_7_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_7_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_7_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_7_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tJavaRow_10 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSOAP_7_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_1", false);
		start_Hash.put("tOracleRow_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_1";
	
	
		int tos_count_tOracleRow_1 = 0;
		

	java.sql.Connection conn_tOracleRow_1 = null;
	String query_tOracleRow_1 = "";
	boolean whetherReject_tOracleRow_1 = false;
	int count_tOracleRow_1 = 0;
			String driverClass_tOracleRow_1 = "oracle.jdbc.OracleDriver";
		    java.lang.Class jdbcclazz_tOracleRow_1 = java.lang.Class.forName(driverClass_tOracleRow_1);
		
			String url_tOracleRow_1 = null;
				url_tOracleRow_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
					String dbUser_tOracleRow_1 = context.db_origen_Login;
	        
            		
            		
            		
	final String decryptedPassword_tOracleRow_1 = context.db_origen_Password; 
        		   	
        	        String dbPwd_tOracleRow_1 = decryptedPassword_tOracleRow_1;
	        
					
			conn_tOracleRow_1 = java.sql.DriverManager.getConnection(url_tOracleRow_1,dbUser_tOracleRow_1,dbPwd_tOracleRow_1);
		
        resourceMap.put("conn_tOracleRow_1", conn_tOracleRow_1);
					if(conn_tOracleRow_1.getAutoCommit()) {
						
				conn_tOracleRow_1.setAutoCommit(false);
			
					}        
					int commitEvery_tOracleRow_1 = 1000;
					int commitCounter_tOracleRow_1 = 0;
				
        java.sql.Statement stmt_tOracleRow_1 = conn_tOracleRow_1.createStatement();
        resourceMap.put("stmt_tOracleRow_1", stmt_tOracleRow_1);

 



/**
 * [tOracleRow_1 begin ] stop
 */
	
	/**
	 * [tOracleRow_1 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

query_tOracleRow_1 = "UPDATE VAC_REGISTROSDSB\nSET ESTADO = 'Inactivo'\nWHERE ID = " + context.REGISTROSDSB_ID;
whetherReject_tOracleRow_1 = false;
globalMap.put("tOracleRow_1_QUERY",query_tOracleRow_1);
try {
		stmt_tOracleRow_1.execute(query_tOracleRow_1);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_1_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tOracleRow_1++;
		if(commitEvery_tOracleRow_1 <= commitCounter_tOracleRow_1) {
			
			conn_tOracleRow_1.commit();
			
			commitCounter_tOracleRow_1=0;
		}
		

 


	tos_count_tOracleRow_1++;

/**
 * [tOracleRow_1 main ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_1 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

	globalMap.put("tOracleRow_1_NB_LINE", count_tOracleRow_1);
        stmt_tOracleRow_1.close();
        resourceMap.remove("stmt_tOracleRow_1");
    resourceMap.put("statementClosed_tOracleRow_1", true);
		if(commitEvery_tOracleRow_1>commitCounter_tOracleRow_1){

			
			conn_tOracleRow_1.commit();
			
	
			commitCounter_tOracleRow_1=0;
	
		}
			conn_tOracleRow_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
    resourceMap.put("finish_tOracleRow_1", true);

 

ok_Hash.put("tOracleRow_1", true);
end_Hash.put("tOracleRow_1", System.currentTimeMillis());




/**
 * [tOracleRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

try {
    if (resourceMap.get("statementClosed_tOracleRow_1") == null) {
            java.sql.Statement stmtToClose_tOracleRow_1 = null;
            if ((stmtToClose_tOracleRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_1")) != null) {
                stmtToClose_tOracleRow_1.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tOracleRow_1") == null){
            java.sql.Connection ctn_tOracleRow_1 = null;
            if((ctn_tOracleRow_1 = (java.sql.Connection)resourceMap.get("conn_tOracleRow_1")) != null){
                try {
                    ctn_tOracleRow_1.close();
                } catch (java.sql.SQLException sqlEx_tOracleRow_1) {
                    String errorMessage_tOracleRow_1 = "failed to close the connection in tOracleRow_1 :" + sqlEx_tOracleRow_1.getMessage();
                    System.err.println(errorMessage_tOracleRow_1);
                }
            }
        }
    }
 



/**
 * [tOracleRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public String GRUPO_ETNICO;

				public String getGRUPO_ETNICO () {
					return this.GRUPO_ETNICO;
				}

				public Boolean GRUPO_ETNICOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_ETNICOIsKey(){
				    return false;
				}
				public Integer GRUPO_ETNICOLength(){
				    return null;
				}
				public Integer GRUPO_ETNICOPrecision(){
				    return null;
				}
				public String GRUPO_ETNICODefault(){
				
					return null;
				
				}
				public String GRUPO_ETNICOComment(){
				
				    return "";
				
				}
				public String GRUPO_ETNICOPattern(){
				
					return "";
				
				}
				public String GRUPO_ETNICOOriginalDbColumnName(){
				
					return "GRUPO_ETNICO";
				
				}

				
			    public String CODIGO_ETNICO;

				public String getCODIGO_ETNICO () {
					return this.CODIGO_ETNICO;
				}

				public Boolean CODIGO_ETNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ETNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_ETNICOLength(){
				    return null;
				}
				public Integer CODIGO_ETNICOPrecision(){
				    return null;
				}
				public String CODIGO_ETNICODefault(){
				
					return null;
				
				}
				public String CODIGO_ETNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_ETNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_ETNICOOriginalDbColumnName(){
				
					return "CODIGO_ETNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.GRUPO_ETNICO = readString(dis);
					
					this.CODIGO_ETNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.GRUPO_ETNICO = readString(dis);
					
					this.CODIGO_ETNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.CODIGO_ETNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.CODIGO_ETNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("GRUPO_ETNICO="+GRUPO_ETNICO);
		sb.append(",CODIGO_ETNICO="+CODIGO_ETNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public String GRUPO_ETNICO;

				public String getGRUPO_ETNICO () {
					return this.GRUPO_ETNICO;
				}

				public Boolean GRUPO_ETNICOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_ETNICOIsKey(){
				    return false;
				}
				public Integer GRUPO_ETNICOLength(){
				    return null;
				}
				public Integer GRUPO_ETNICOPrecision(){
				    return null;
				}
				public String GRUPO_ETNICODefault(){
				
					return null;
				
				}
				public String GRUPO_ETNICOComment(){
				
				    return "";
				
				}
				public String GRUPO_ETNICOPattern(){
				
					return "";
				
				}
				public String GRUPO_ETNICOOriginalDbColumnName(){
				
					return "GRUPO_ETNICO";
				
				}

				
			    public String CODIGO_ETNICO;

				public String getCODIGO_ETNICO () {
					return this.CODIGO_ETNICO;
				}

				public Boolean CODIGO_ETNICOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ETNICOIsKey(){
				    return false;
				}
				public Integer CODIGO_ETNICOLength(){
				    return null;
				}
				public Integer CODIGO_ETNICOPrecision(){
				    return null;
				}
				public String CODIGO_ETNICODefault(){
				
					return null;
				
				}
				public String CODIGO_ETNICOComment(){
				
				    return "";
				
				}
				public String CODIGO_ETNICOPattern(){
				
					return "";
				
				}
				public String CODIGO_ETNICOOriginalDbColumnName(){
				
					return "CODIGO_ETNICO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.GRUPO_ETNICO = readString(dis);
					
					this.CODIGO_ETNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.GRUPO_ETNICO = readString(dis);
					
					this.CODIGO_ETNICO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.CODIGO_ETNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.CODIGO_ETNICO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("GRUPO_ETNICO="+GRUPO_ETNICO);
		sb.append(",CODIGO_ETNICO="+CODIGO_ETNICO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
out3Struct out3 = new out3Struct();





	
	/**
	 * [tJavaRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_8", false);
		start_Hash.put("tJavaRow_8", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tJavaRow_8 = 0;
		

int nb_line_tJavaRow_8 = 0;

 



/**
 * [tJavaRow_8 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = "SELECT\n      GE.NOMBRE AS GRUPO_ETNICO,\n      GE.CODIGO AS CODIGO_ETNICO\n        FROM\n      GEN_PERSONAS gp\n      "
+"LEFT JOIN GEN_ETNICAS ge ON GE.ID = GP.ETNICAS_ID\n    WHERE\n      GP.Id = " + context.PERSONAS_ID;
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row7.GRUPO_ETNICO = null;
							} else {
	                         		
        	row7.GRUPO_ETNICO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row7.CODIGO_ETNICO = null;
							} else {
	                         		
        	row7.CODIGO_ETNICO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 2, false);
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp.GRUPO_ETNICO = row7.GRUPO_ETNICO ;
out3_tmp.CODIGO_ETNICO = row7.CODIGO_ETNICO ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tJavaRow_8 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out3"
						
						);
					}
					

    //Code generate according to input schema and output schema
if(out3.GRUPO_ETNICO != null){
	context.CODIGO_ETNIA = (out3.GRUPO_ETNICO.equals("No aplica")) ? 9 : Integer.parseInt(out3.CODIGO_ETNICO);
} else{
	context.CODIGO_ETNIA = null;
}
    nb_line_tJavaRow_8++;   

 


	tos_count_tJavaRow_8++;

/**
 * [tJavaRow_8 main ] stop
 */
	
	/**
	 * [tJavaRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tJavaRow_8 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

globalMap.put("tJavaRow_8_NB_LINE",nb_line_tJavaRow_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tJavaRow_8", true);
end_Hash.put("tJavaRow_8", System.currentTimeMillis());




/**
 * [tJavaRow_8 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_8 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String DATA;

				public String getDATA () {
					return this.DATA;
				}

				public Boolean DATAIsNullable(){
				    return false;
				}
				public Boolean DATAIsKey(){
				    return false;
				}
				public Integer DATALength(){
				    return null;
				}
				public Integer DATAPrecision(){
				    return null;
				}
				public String DATADefault(){
				
					return null;
				
				}
				public String DATAComment(){
				
				    return "";
				
				}
				public String DATAPattern(){
				
					return "";
				
				}
				public String DATAOriginalDbColumnName(){
				
					return "DATA";
				
				}

				
			    public BigDecimal DAPLICADAS_ID;

				public BigDecimal getDAPLICADAS_ID () {
					return this.DAPLICADAS_ID;
				}

				public Boolean DAPLICADAS_IDIsNullable(){
				    return true;
				}
				public Boolean DAPLICADAS_IDIsKey(){
				    return false;
				}
				public Integer DAPLICADAS_IDLength(){
				    return null;
				}
				public Integer DAPLICADAS_IDPrecision(){
				    return null;
				}
				public String DAPLICADAS_IDDefault(){
				
					return "";
				
				}
				public String DAPLICADAS_IDComment(){
				
				    return "";
				
				}
				public String DAPLICADAS_IDPattern(){
				
					return "";
				
				}
				public String DAPLICADAS_IDOriginalDbColumnName(){
				
					return "DAPLICADAS_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.DATA = readString(dis);
					
						this.DAPLICADAS_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.DATA = readString(dis);
					
						this.DAPLICADAS_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.DATA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DAPLICADAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.DATA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DAPLICADAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",DATA="+DATA);
		sb.append(",DAPLICADAS_ID="+String.valueOf(DAPLICADAS_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tFlowToIterate_2 begin ] start
	 */

				
			int NB_ITERATE_tJava_4 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_2", false);
		start_Hash.put("tFlowToIterate_2", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tFlowToIterate_2 = 0;
		

int nb_line_tFlowToIterate_2 = 0;
int counter_tFlowToIterate_2 = 0;

 



/**
 * [tFlowToIterate_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				String driverClass_tOracleInput_2 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_2);
				
			String url_tOracleInput_2 = null;
				url_tOracleInput_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_2 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_2 = context.db_origen_Password; 

				String dbPwd_tOracleInput_2 = decryptedPassword_tOracleInput_2;

				
					java.util.Properties atnParamsPrope_tOracleInput_2 = new java.util.Properties();
					atnParamsPrope_tOracleInput_2.put("user",dbUser_tOracleInput_2);
					atnParamsPrope_tOracleInput_2.put("password",dbPwd_tOracleInput_2);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_2.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_2 = java.sql.DriverManager.getConnection(url_tOracleInput_2, atnParamsPrope_tOracleInput_2);
				java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_2.next()) {
					sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
				}
                                if (!(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                                }
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement();

		    String dbquery_tOracleInput_2 = "SELECT id,\n					data,\n					daplicadas_id,\n                    personas_id					\nFROM saludsis.vac_registrosdsb\nWHER"
+"E estado = 'Activo'\nAND estregistro_id = 1\nAND daplicadas_id is not null";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row4.ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row4.ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row4.DATA = null;
							} else {
	                         		
        	row4.DATA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row4.DAPLICADAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(3) != null) {
						row4.DAPLICADAS_ID = rs_tOracleInput_2.getBigDecimal(3);
					} else {
				
						row4.DAPLICADAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 4) {
								row4.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(4) != null) {
						row4.PERSONAS_ID = rs_tOracleInput_2.getBigDecimal(4);
					} else {
				
						row4.PERSONAS_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_2 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


    	            
            globalMap.put("row4.ID", row4.ID);
    	            
            globalMap.put("row4.DATA", row4.DATA);
    	            
            globalMap.put("row4.DAPLICADAS_ID", row4.DAPLICADAS_ID);
    	            
            globalMap.put("row4.PERSONAS_ID", row4.PERSONAS_ID);
    	
 
	   nb_line_tFlowToIterate_2++;  
       counter_tFlowToIterate_2++;
       globalMap.put("tFlowToIterate_2_CURRENT_ITERATION", counter_tFlowToIterate_2);
 


	tos_count_tFlowToIterate_2++;

/**
 * [tFlowToIterate_2 main ] stop
 */
	
	/**
	 * [tFlowToIterate_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

 



/**
 * [tFlowToIterate_2 process_data_begin ] stop
 */
	NB_ITERATE_tJava_4++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row9", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tJava_4);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
		int tos_count_tJava_4 = 0;
		


//Code generate according to input schema and output schema
context.REGISTROSDSB_ID = row4.ID;
context.DAPLICADAS_ID = row4.DAPLICADAS_ID;

JSONObject dataJson = new JSONObject(row4.DATA);

context.PERSONAS_ID = new BigDecimal(dataJson.getString("PersonaId"));
context.VACUNAS_ID = dataJson.getInt("VacunaId");
context.DOSIS_ID = dataJson.getInt("DosisId");
context.COMERCIAL_ID = dataJson.getInt("ComercialId");
context.PRESENTACION_ID = dataJson.getInt("PresentacionId");
context.ACTUALIZACION = dataJson.getBoolean("Actualizacion");
context.LOTE = dataJson.getString("Lote");
context.TIPO_VACUNA = dataJson.getInt("TipoVacuna");
context.FECHA_VACUNA = dataJson.getString("FechaVacuna");
context.EDAD_ANIOS = dataJson.getInt("EdadAnios");
context.EDAD_MESES = dataJson.getInt("EdadMeses");
context.EDAD_DIAS = dataJson.getInt("EdadDias");
context.EDAD_TOTAL = dataJson.getInt("EdadTotal");
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());

   			if (context.PERSONAS_ID.intValue() > 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If4", 0, "true");
					}
				tOracleInput_4Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "false");
					}   	 
   				}



/**
 * [tJava_4 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tJava_4);
						}				
					




	
	/**
	 * [tFlowToIterate_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

 



/**
 * [tFlowToIterate_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
	if(conn_tOracleInput_2 != null && !conn_tOracleInput_2.isClosed()) {
	
			conn_tOracleInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tFlowToIterate_2 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

globalMap.put("tFlowToIterate_2_NB_LINE",nb_line_tFlowToIterate_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_2", true);
end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());




/**
 * [tFlowToIterate_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_2 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

 



/**
 * [tFlowToIterate_2 finally ] stop
 */

	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public String per_Consecutivo;

				public String getPer_Consecutivo () {
					return this.per_Consecutivo;
				}

				public Boolean per_ConsecutivoIsNullable(){
				    return true;
				}
				public Boolean per_ConsecutivoIsKey(){
				    return false;
				}
				public Integer per_ConsecutivoLength(){
				    return null;
				}
				public Integer per_ConsecutivoPrecision(){
				    return null;
				}
				public String per_ConsecutivoDefault(){
				
					return null;
				
				}
				public String per_ConsecutivoComment(){
				
				    return "";
				
				}
				public String per_ConsecutivoPattern(){
				
				    return null;
				
				}
				public String per_ConsecutivoOriginalDbColumnName(){
				
					return "per_Consecutivo";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.per_Consecutivo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.per_Consecutivo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.per_Consecutivo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.per_Consecutivo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("per_Consecutivo="+per_Consecutivo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public routines.system.Document Soap;

				public routines.system.Document getSoap () {
					return this.Soap;
				}

				public Boolean SoapIsNullable(){
				    return true;
				}
				public Boolean SoapIsKey(){
				    return false;
				}
				public Integer SoapLength(){
				    return 0;
				}
				public Integer SoapPrecision(){
				    return 0;
				}
				public String SoapDefault(){
				
					return "";
				
				}
				public String SoapComment(){
				
				    return null;
				
				}
				public String SoapPattern(){
				
				    return null;
				
				}
				public String SoapOriginalDbColumnName(){
				
					return "Soap";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.Soap = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.Soap = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.Soap);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Document
				
						dos.clearInstanceCache();
						dos.writeObject(this.Soap);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Soap="+String.valueOf(Soap));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String TIPODOCUMENTO;

				public String getTIPODOCUMENTO () {
					return this.TIPODOCUMENTO;
				}

				public Boolean TIPODOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPODOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPODOCUMENTOLength(){
				    return null;
				}
				public Integer TIPODOCUMENTOPrecision(){
				    return null;
				}
				public String TIPODOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPODOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPODOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPODOCUMENTOOriginalDbColumnName(){
				
					return "TIPODOCUMENTO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.TIPODOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.TIPODOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.TIPODOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.TIPODOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TIPODOCUMENTO="+TIPODOCUMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String TIPODOCUMENTO;

				public String getTIPODOCUMENTO () {
					return this.TIPODOCUMENTO;
				}

				public Boolean TIPODOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPODOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPODOCUMENTOLength(){
				    return null;
				}
				public Integer TIPODOCUMENTOPrecision(){
				    return null;
				}
				public String TIPODOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPODOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPODOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPODOCUMENTOOriginalDbColumnName(){
				
					return "TIPODOCUMENTO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.TIPODOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.TIPODOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.TIPODOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.TIPODOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TIPODOCUMENTO="+TIPODOCUMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String TIPODOCUMENTO;

				public String getTIPODOCUMENTO () {
					return this.TIPODOCUMENTO;
				}

				public Boolean TIPODOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPODOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPODOCUMENTOLength(){
				    return null;
				}
				public Integer TIPODOCUMENTOPrecision(){
				    return null;
				}
				public String TIPODOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPODOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPODOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPODOCUMENTOOriginalDbColumnName(){
				
					return "TIPODOCUMENTO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.TIPODOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.TIPODOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.TIPODOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.TIPODOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TIPODOCUMENTO="+TIPODOCUMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();
out1Struct out1 = new out1Struct();
row3Struct row3 = new row3Struct();
row8Struct row8 = new row8Struct();
out2Struct out2 = new out2Struct();







	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_4_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_4_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tXMLMap_4_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_4_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_4_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_4_TXMLMAP_OUT__Struct Var__tXMLMap_4_TXMLMAP_OUT = new Var__tXMLMap_4_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
out2Struct out2_save = null;
//the aggregate variable
out2Struct out2_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_4 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_4",allOutsForAggregate_tXMLMap_4);
// ###############################
class TreeNode_API_tXMLMap_4_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
}
			TreeNode_API_tXMLMap_4_TXMLMAP_OUT treeNodeAPI_tXMLMap_4_TXMLMAP_OUT = new TreeNode_API_tXMLMap_4_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_4_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_4_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_4_TXMLMAP_OUT xml_api_tXMLMap_4_TXMLMAP_OUT = new XML_API_tXMLMap_4_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_4_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            

 



/**
 * [tXMLMap_4_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tSOAP_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tSOAP_4", false);
		start_Hash.put("tSOAP_4", System.currentTimeMillis());
		
	
	currentComponent="tSOAP_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tSOAP_4 = 0;
		
 org.talend.soap.SOAPUtil soapUtil_tSOAP_4 = new org.talend.soap.SOAPUtil();

 
	final String decryptedPassword_tSOAP_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:I/Jrwj3Nbsk6cLRC5aB1lg0kDvz2fVJv1s5Hn7OmACidUhoE");


     
    	final String decryptedProxyPwd_tSOAP_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:U6tTAllYU6YcmCOjNbqJwjtbAaofERzu2omVTg==");

soapUtil_tSOAP_4.setProxy("172.20.19.254",3128,"",decryptedProxyPwd_tSOAP_4);
 



/**
 * [tSOAP_4 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement();

		    String dbquery_tOracleInput_4 = "SELECT\n      GP.PRIMER_NOMBRE,\n      GP.PRIMER_APELLIDO,\n      GP.DOCUMENTO,\n      GTD.SIGLA AS Tipodocumento\n    "
+"    FROM\n      GEN_PERSONAS gp\n      LEFT JOIN GEN_TDOCUMENTOS GTD ON GTD.ID = GP.TDOCUMENTOS_ID\n    WHERE\n      GP."
+"Id = " + context.PERSONAS_ID;
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row11.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row11.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row11.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row11.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row11.DOCUMENTO = null;
							} else {
	                         		
        	row11.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 4) {
								row11.TIPODOCUMENTO = null;
							} else {
	                         		
        	row11.TIPODOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 4, false);
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.PRIMER_NOMBRE = row11.PRIMER_NOMBRE ;
out1_tmp.PRIMER_APELLIDO = row11.PRIMER_APELLIDO ;
out1_tmp.DOCUMENTO = row11.DOCUMENTO ;
out1_tmp.TIPODOCUMENTO = row11.TIPODOCUMENTO ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.PRIMER_NOMBRE = out1.PRIMER_NOMBRE;
context.PRIMER_APELLIDO = out1.PRIMER_APELLIDO;
context.TIPODOCUMENTO = out1.TIPODOCUMENTO;
context.DOCUMENTO = out1.DOCUMENTO;

if(context.TIPODOCUMENTO.equals("CN")) {
	if(out1.DOCUMENTO.indexOf('-') > -1){
		context.DOCUMENTO = out1.DOCUMENTO.replace("-", "");
	} else{
		context.DOCUMENTO = out1.DOCUMENTO;
	}	
}
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tSOAP_4 main ] start
	 */

	

	
	
	currentComponent="tSOAP_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
			String document_tSOAP_4 = soapUtil_tSOAP_4.extractContentAsDocument(org.talend.soap.SOAPUtil.SOAP11,context.UrlEndPoint,context.UlrActionSoapConsultarPersona,"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:sds=\"http://Sds.SaludPublica\">  <soapenv:Body>        <sds:seleccionarPersonaBusqueda>           <sds:TipoIdVacunado>"+context.TIPODOCUMENTO+"</sds:TipoIdVacunado>  	<sds:NumeroIdVacunado>"+context.DOCUMENTO+"</sds:NumeroIdVacunado>  	<sds:PrimerNombreVacunado>"+context.PRIMER_NOMBRE+"</sds:PrimerNombreVacunado>  	<sds:PrimerApellidoVacunado>"+context.PRIMER_APELLIDO+"</sds:PrimerApellidoVacunado>        </sds:seleccionarPersonaBusqueda>     </soapenv:Body>  </soapenv:Envelope>");
		
		
	

	// for output
			
				row8 = new row8Struct();
				
					row8.Soap = ParserUtils.parseTo_Document(document_tSOAP_4);
				
        


 


	tos_count_tSOAP_4++;

/**
 * [tSOAP_4 main ] stop
 */
	
	/**
	 * [tSOAP_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSOAP_4";
	
	

 



/**
 * [tSOAP_4 process_data_begin ] stop
 */

	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

	boolean rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_4_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_4_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_4_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setOriginalLoop("/s:Envelope/s:Body/seleccionarPersonaBusquedaResponse/seleccionarPersonaBusquedaResult");
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setIsOptional(false);
				if(row8.Soap == null || row8.Soap.getDocument() == null) {
					throw new RuntimeException("row8.Soap can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_4_TXMLMAP_OUT = row8.Soap.getDocument();
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setDoc(doc_tXMLMap_4_TXMLMAP_OUT);
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setDefineNS(false);
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_4_TXMLMAP_OUT);
				
					//old version, find NS from doc
					nsTool_tXMLMap_4_TXMLMAP_OUT.countNSMap(doc_tXMLMap_4_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_4_TXMLMAP_OUT = nsTool_tXMLMap_4_TXMLMAP_OUT.xmlNameSpaceMap;
				
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_4_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_4_TXMLMAP_OUT = new String[1];
				String[] relativePathMappings_tXMLMap_4_TXMLMAP_OUT = new String[1];
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[0] = "row8.Soap:/s:Envelope/s:Body/seleccionarPersonaBusquedaResponse/seleccionarPersonaBusquedaResult/Persona/per_Consecutivo";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[0] = "Persona/per_Consecutivo";
				
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_4_TXMLMAP_OUT);
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_4_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_4_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_4_TXMLMAP_OUT = docToFlat_tXMLMap_4_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_4_TXMLMAP_OUT: resultSet_tXMLMap_4_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_4_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_4_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_4_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_4_TXMLMAP_OUT : oneRow_tXMLMap_4_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.put(entry_tXMLMap_4_TXMLMAP_OUT.getKey(),entry_tXMLMap_4_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_4_TXMLMAP_OUT__Struct Var = Var__tXMLMap_4_TXMLMAP_OUT;
		// ###############################
		// # Output tables

out2 = null;


// # Output table : 'out2'

out2_tmp = new out2Struct();
out2_tmp.per_Consecutivo = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row8.Soap:/s:Envelope/s:Body/seleccionarPersonaBusquedaResponse/seleccionarPersonaBusquedaResult/Persona/per_Consecutivo");allOutsForAggregate_tXMLMap_4.add(out2_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_4_TXMLMAP_OUT++;

/**
 * [tXMLMap_4_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_4_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_4_TXMLMAP_OUT process_data_end ] stop
 */



	
	/**
	 * [tSOAP_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tSOAP_4";
	
	

 



/**
 * [tSOAP_4 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tSOAP_4 end ] start
	 */

	

	
	
	currentComponent="tSOAP_4";
	
	
soapUtil_tSOAP_4.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tSOAP_4", true);
end_Hash.put("tSOAP_4", System.currentTimeMillis());




/**
 * [tSOAP_4 end ] stop
 */

	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";
	
	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tXMLMap_4_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_4_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_4_TXMLMAP_OUT end ] stop
 */


	
	/**
	 * [tJavaRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_6", false);
		start_Hash.put("tJavaRow_6", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tJavaRow_6 = 0;
		

int nb_line_tJavaRow_6 = 0;

 



/**
 * [tJavaRow_6 begin ] stop
 */



	
	/**
	 * [tXMLMap_4_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_4_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_4_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";
	
	
		int tos_count_tXMLMap_4_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_4 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_4");
for(Object  row_out_tXMLMap_4_TXMLMAP_IN : outs_tXMLMap_4) {//TD512
 



/**
 * [tXMLMap_4_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";
	
	

	out2 = null;
	if(row_out_tXMLMap_4_TXMLMAP_IN!=null && row_out_tXMLMap_4_TXMLMAP_IN instanceof out2Struct) {
		out2 = (out2Struct)row_out_tXMLMap_4_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_4_TXMLMAP_IN++;

/**
 * [tXMLMap_4_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_4_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tJavaRow_6 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out2"
						
						);
					}
					

    //Code generate according to input schema and output schema
if(out2.per_Consecutivo != null){
	context.CONSECUTIVO = new BigDecimal(out2.per_Consecutivo);
}
    nb_line_tJavaRow_6++;   

 


	tos_count_tJavaRow_6++;

/**
 * [tJavaRow_6 main ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tXMLMap_4_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_4_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";
	
	

}//TD512
 

ok_Hash.put("tXMLMap_4_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_4_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_4_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tJavaRow_6 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

globalMap.put("tJavaRow_6_NB_LINE",nb_line_tJavaRow_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tJavaRow_6", true);
end_Hash.put("tJavaRow_6", System.currentTimeMillis());

   			if (context.CONSECUTIVO.intValue() > 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If8", 0, "true");
					}
				tSOAP_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If8", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_6 end ] stop
 */


















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tSOAP_4 finally ] start
	 */

	

	
	
	currentComponent="tSOAP_4";
	
	

 



/**
 * [tSOAP_4 finally ] stop
 */

	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_4_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_4_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_4_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tJavaRow_6 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public Boolean resultado;

				public Boolean getResultado () {
					return this.resultado;
				}

				public Boolean resultadoIsNullable(){
				    return true;
				}
				public Boolean resultadoIsKey(){
				    return false;
				}
				public Integer resultadoLength(){
				    return null;
				}
				public Integer resultadoPrecision(){
				    return null;
				}
				public String resultadoDefault(){
				
					return null;
				
				}
				public String resultadoComment(){
				
				    return "";
				
				}
				public String resultadoPattern(){
				
					return "";
				
				}
				public String resultadoOriginalDbColumnName(){
				
					return "resultado";
				
				}

				
			    public String errores;

				public String getErrores () {
					return this.errores;
				}

				public Boolean erroresIsNullable(){
				    return true;
				}
				public Boolean erroresIsKey(){
				    return false;
				}
				public Integer erroresLength(){
				    return null;
				}
				public Integer erroresPrecision(){
				    return null;
				}
				public String erroresDefault(){
				
					return null;
				
				}
				public String erroresComment(){
				
				    return "";
				
				}
				public String erroresPattern(){
				
					return "";
				
				}
				public String erroresOriginalDbColumnName(){
				
					return "errores";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length) {
				if(length < 1024 && commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD.length == 0) {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[1024];
				} else {
   					commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length);
			strReturn = new String(commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.resultado = null;
           				} else {
           			    	this.resultado = dis.readBoolean();
           				}
					
					this.errores = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.resultado = null;
           				} else {
           			    	this.resultado = dis.readBoolean();
           				}
					
					this.errores = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Boolean
				
						if(this.resultado == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.resultado);
		            	}
					
					// String
				
						writeString(this.errores,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Boolean
				
						if(this.resultado == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.resultado);
		            	}
					
					// String
				
						writeString(this.errores,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("resultado="+String.valueOf(resultado));
		sb.append(",errores="+errores);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public routines.system.Document Soap;

				public routines.system.Document getSoap () {
					return this.Soap;
				}

				public Boolean SoapIsNullable(){
				    return true;
				}
				public Boolean SoapIsKey(){
				    return false;
				}
				public Integer SoapLength(){
				    return 0;
				}
				public Integer SoapPrecision(){
				    return 0;
				}
				public String SoapDefault(){
				
					return "";
				
				}
				public String SoapComment(){
				
				    return null;
				
				}
				public String SoapPattern(){
				
				    return null;
				
				}
				public String SoapOriginalDbColumnName(){
				
					return "Soap";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.Soap = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.Soap = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.Soap);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Document
				
						dos.clearInstanceCache();
						dos.writeObject(this.Soap);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Soap="+String.valueOf(Soap));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tSOAP_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSOAP_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
out5Struct out5 = new out5Struct();




	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_2_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_2_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tXMLMap_2_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_2_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_2_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_2_TXMLMAP_OUT__Struct Var__tXMLMap_2_TXMLMAP_OUT = new Var__tXMLMap_2_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
out5Struct out5_save = null;
//the aggregate variable
out5Struct out5_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_2 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_2",allOutsForAggregate_tXMLMap_2);
// ###############################
class TreeNode_API_tXMLMap_2_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
}
			TreeNode_API_tXMLMap_2_TXMLMAP_OUT treeNodeAPI_tXMLMap_2_TXMLMAP_OUT = new TreeNode_API_tXMLMap_2_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_2_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_2_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_2_TXMLMAP_OUT xml_api_tXMLMap_2_TXMLMAP_OUT = new XML_API_tXMLMap_2_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_2_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            

 



/**
 * [tXMLMap_2_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tSOAP_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSOAP_2", false);
		start_Hash.put("tSOAP_2", System.currentTimeMillis());
		
	
	currentComponent="tSOAP_2";
	
	
		int tos_count_tSOAP_2 = 0;
		
 org.talend.soap.SOAPUtil soapUtil_tSOAP_2 = new org.talend.soap.SOAPUtil();

 
	final String decryptedPassword_tSOAP_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:t9RY1ZfqSDp9wleuJoA/0bMRCWY4v471tKE6MTOWvZjLJ3eu");


     
    	final String decryptedProxyPwd_tSOAP_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:K7vKR9OciRdr252XE8RJBU5nBfa3t3/ZGIFLSQ==");

soapUtil_tSOAP_2.setProxy("172.20.19.254",3128,"",decryptedProxyPwd_tSOAP_2);
 



/**
 * [tSOAP_2 begin ] stop
 */
	
	/**
	 * [tSOAP_2 main ] start
	 */

	

	
	
	currentComponent="tSOAP_2";
	
	

		
		
			String document_tSOAP_2 = soapUtil_tSOAP_2.extractContentAsDocument(org.talend.soap.SOAPUtil.SOAP11,context.UrlEndPoint,context.UrlActionSoapInsertarVacuna,"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:sds=\"http://Sds.SaludPublica\">  <soapenv:Body>        <sds:insertarVacunaPersona>           <sds:per_Consecutivo>"+context.CONSECUTIVO+"</sds:per_Consecutivo>  	<sds:vac_Id>"+context.VACUNAS_ID+"</sds:vac_Id>  	<sds:dos_Id>"+context.DOSIS_ID+"</sds:dos_Id>  	<sds:pse_Id>"+context.PRESENTACION_ID+"</sds:pse_Id>  	<sds:cam_Id>"+context.CAMPANIA_ID+"</sds:cam_Id>  	<sds:vac_FechaVacuna>"+context.FECHA_VACUNA+"</sds:vac_FechaVacuna>  	<sds:vac_actualizacion>"+context.ACTUALIZACION+"</sds:vac_actualizacion>  	<sds:ins_Id>"+context.INSTITUCION+"</sds:ins_Id>  	<sds:fun_idFunc>"+context.FUNCIONARIO+"</sds:fun_idFunc>  	<sds:com_Id>"+context.COMERCIAL_ID+"</sds:com_Id>  	<sds:pos_Id>"+context.TIPO_VACUNA+"</sds:pos_Id>  	<sds:vac_Lote>"+context.LOTE+"</sds:vac_Lote>  	<sds:vac_EdadVacunaAnios>"+context.EDAD_ANIOS+"</sds:vac_EdadVacunaAnios>  	<sds:vac_EdadVacunaMeses>"+context.EDAD_MESES+"</sds:vac_EdadVacunaMeses>  	<sds:vac_EdadVacunaDias>"+context.EDAD_DIAS+"</sds:vac_EdadVacunaDias>  	<sds:vac_EdadVacunaTotalDias>"+context.EDAD_TOTAL+"</sds:vac_EdadVacunaTotalDias>  	<sds:cdm_idCondicion>0</sds:cdm_idCondicion>        </sds:insertarVacunaPersona>     </soapenv:Body>  </soapenv:Envelope>");
		
		
	

	// for output
			
				row5 = new row5Struct();
				
					row5.Soap = ParserUtils.parseTo_Document(document_tSOAP_2);
				
        


 


	tos_count_tSOAP_2++;

/**
 * [tSOAP_2 main ] stop
 */
	
	/**
	 * [tSOAP_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSOAP_2";
	
	

 



/**
 * [tSOAP_2 process_data_begin ] stop
 */

	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

	boolean rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_2_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_2_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setOriginalLoop("/s:Envelope/s:Body/insertarVacunaPersonaResponse/insertarVacunaPersonaResult");
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setIsOptional(false);
				if(row5.Soap == null || row5.Soap.getDocument() == null) {
					throw new RuntimeException("row5.Soap can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_2_TXMLMAP_OUT = row5.Soap.getDocument();
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setDoc(doc_tXMLMap_2_TXMLMAP_OUT);
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setDefineNS(false);
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_2_TXMLMAP_OUT);
				
					//old version, find NS from doc
					nsTool_tXMLMap_2_TXMLMAP_OUT.countNSMap(doc_tXMLMap_2_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT = nsTool_tXMLMap_2_TXMLMAP_OUT.xmlNameSpaceMap;
				
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_2_TXMLMAP_OUT = new String[2];
				String[] relativePathMappings_tXMLMap_2_TXMLMAP_OUT = new String[2];
				
				absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[0] = "row5.Soap:/s:Envelope/s:Body/insertarVacunaPersonaResponse/insertarVacunaPersonaResult/errores";
				relativePathMappings_tXMLMap_2_TXMLMAP_OUT[0] = "errores";
				
				absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[1] = "row5.Soap:/s:Envelope/s:Body/insertarVacunaPersonaResponse/insertarVacunaPersonaResult/resultado";
				relativePathMappings_tXMLMap_2_TXMLMAP_OUT[1] = "resultado";
				
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_2_TXMLMAP_OUT);
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_2_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_2_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_2_TXMLMAP_OUT = docToFlat_tXMLMap_2_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_2_TXMLMAP_OUT: resultSet_tXMLMap_2_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_2_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_2_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_2_TXMLMAP_OUT : oneRow_tXMLMap_2_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.put(entry_tXMLMap_2_TXMLMAP_OUT.getKey(),entry_tXMLMap_2_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
		// ###############################
		// # Output tables

out5 = null;


// # Output table : 'out5'

out5_tmp = new out5Struct();
out5_tmp.resultado = Boolean.parseBoolean(treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row5.Soap:/s:Envelope/s:Body/insertarVacunaPersonaResponse/insertarVacunaPersonaResult/resultado")) ;
out5_tmp.errores =  treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row5.Soap:/s:Envelope/s:Body/insertarVacunaPersonaResponse/insertarVacunaPersonaResult/errores");allOutsForAggregate_tXMLMap_2.add(out5_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_2_TXMLMAP_OUT++;

/**
 * [tXMLMap_2_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_2_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_2_TXMLMAP_OUT process_data_end ] stop
 */



	
	/**
	 * [tSOAP_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSOAP_2";
	
	

 



/**
 * [tSOAP_2 process_data_end ] stop
 */
	
	/**
	 * [tSOAP_2 end ] start
	 */

	

	
	
	currentComponent="tSOAP_2";
	
	
soapUtil_tSOAP_2.close();

 

ok_Hash.put("tSOAP_2", true);
end_Hash.put("tSOAP_2", System.currentTimeMillis());




/**
 * [tSOAP_2 end ] stop
 */

	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";
	
	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tXMLMap_2_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_2_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_2_TXMLMAP_OUT end ] stop
 */


	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out5");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tXMLMap_2_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_2_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_2_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";
	
	
		int tos_count_tXMLMap_2_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_2 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_2");
for(Object  row_out_tXMLMap_2_TXMLMAP_IN : outs_tXMLMap_2) {//TD512
 



/**
 * [tXMLMap_2_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_2_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";
	
	

	out5 = null;
	if(row_out_tXMLMap_2_TXMLMAP_IN!=null && row_out_tXMLMap_2_TXMLMAP_IN instanceof out5Struct) {
		out5 = (out5Struct)row_out_tXMLMap_2_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_2_TXMLMAP_IN++;

/**
 * [tXMLMap_2_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_2_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_2_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out5"
						
						);
					}
					

    context.RESULTADO = out5.resultado;
context.ERRORES = out5.errores;
    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */

} // End of branch "out5"




	
	/**
	 * [tXMLMap_2_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_2_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_2_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";
	
	

}//TD512
 

ok_Hash.put("tXMLMap_2_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_2_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_2_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out5");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());

   			if (context.RESULTADO == true) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tOracleRow_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_5 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSOAP_2 finally ] start
	 */

	

	
	
	currentComponent="tSOAP_2";
	
	

 



/**
 * [tSOAP_2 finally ] stop
 */

	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";
	
	

 



/**
 * [tXMLMap_2_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_2_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";
	
	

 



/**
 * [tXMLMap_2_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSOAP_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_2", false);
		start_Hash.put("tOracleRow_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_2";
	
	
		int tos_count_tOracleRow_2 = 0;
		

	java.sql.Connection conn_tOracleRow_2 = null;
	String query_tOracleRow_2 = "";
	boolean whetherReject_tOracleRow_2 = false;
	int count_tOracleRow_2 = 0;
			String driverClass_tOracleRow_2 = "oracle.jdbc.OracleDriver";
		    java.lang.Class jdbcclazz_tOracleRow_2 = java.lang.Class.forName(driverClass_tOracleRow_2);
		
			String url_tOracleRow_2 = null;
				url_tOracleRow_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
					String dbUser_tOracleRow_2 = context.db_origen_Login;
	        
            		
            		
            		
	final String decryptedPassword_tOracleRow_2 = context.db_origen_Password; 
        		   	
        	        String dbPwd_tOracleRow_2 = decryptedPassword_tOracleRow_2;
	        
					
			conn_tOracleRow_2 = java.sql.DriverManager.getConnection(url_tOracleRow_2,dbUser_tOracleRow_2,dbPwd_tOracleRow_2);
		
        resourceMap.put("conn_tOracleRow_2", conn_tOracleRow_2);
					if(conn_tOracleRow_2.getAutoCommit()) {
						
				conn_tOracleRow_2.setAutoCommit(false);
			
					}        
					int commitEvery_tOracleRow_2 = 10000;
					int commitCounter_tOracleRow_2 = 0;
				
        java.sql.Statement stmt_tOracleRow_2 = conn_tOracleRow_2.createStatement();
        resourceMap.put("stmt_tOracleRow_2", stmt_tOracleRow_2);

 



/**
 * [tOracleRow_2 begin ] stop
 */
	
	/**
	 * [tOracleRow_2 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

query_tOracleRow_2 = "UPDATE VAC_REGISTROSDSB\nSET ESTADO = 'Inactivo'\nWHERE ID = " + context.REGISTROSDSB_ID;
whetherReject_tOracleRow_2 = false;
globalMap.put("tOracleRow_2_QUERY",query_tOracleRow_2);
try {
		stmt_tOracleRow_2.execute(query_tOracleRow_2);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_2_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_2 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_2) {
		
	}
	
		commitCounter_tOracleRow_2++;
		if(commitEvery_tOracleRow_2 <= commitCounter_tOracleRow_2) {
			
			conn_tOracleRow_2.commit();
			
			commitCounter_tOracleRow_2=0;
		}
		

 


	tos_count_tOracleRow_2++;

/**
 * [tOracleRow_2 main ] stop
 */
	
	/**
	 * [tOracleRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

 



/**
 * [tOracleRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

 



/**
 * [tOracleRow_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_2 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

	globalMap.put("tOracleRow_2_NB_LINE", count_tOracleRow_2);
        stmt_tOracleRow_2.close();
        resourceMap.remove("stmt_tOracleRow_2");
    resourceMap.put("statementClosed_tOracleRow_2", true);
		if(commitEvery_tOracleRow_2>commitCounter_tOracleRow_2){

			
			conn_tOracleRow_2.commit();
			
	
			commitCounter_tOracleRow_2=0;
	
		}
			conn_tOracleRow_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
    resourceMap.put("finish_tOracleRow_2", true);

 

ok_Hash.put("tOracleRow_2", true);
end_Hash.put("tOracleRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tOracleInput_5Process(globalMap);



/**
 * [tOracleRow_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

try {
    if (resourceMap.get("statementClosed_tOracleRow_2") == null) {
            java.sql.Statement stmtToClose_tOracleRow_2 = null;
            if ((stmtToClose_tOracleRow_2 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_2")) != null) {
                stmtToClose_tOracleRow_2.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tOracleRow_2") == null){
            java.sql.Connection ctn_tOracleRow_2 = null;
            if((ctn_tOracleRow_2 = (java.sql.Connection)resourceMap.get("conn_tOracleRow_2")) != null){
                try {
                    ctn_tOracleRow_2.close();
                } catch (java.sql.SQLException sqlEx_tOracleRow_2) {
                    String errorMessage_tOracleRow_2 = "failed to close the connection in tOracleRow_2 :" + sqlEx_tOracleRow_2.getMessage();
                    System.err.println(errorMessage_tOracleRow_2);
                }
            }
        }
    }
 



/**
 * [tOracleRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_2_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public BigDecimal PADRE_ID;

				public BigDecimal getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return null;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return "";
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];
    static byte[] commonByteArray_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD = new byte[0];

	
			    public BigDecimal PADRE_ID;

				public BigDecimal getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return null;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return "";
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_VAC_SINCRONIZACION_WS_BSD_SincronizarDatosWsBSD) {

        	try {

        		int length = 0;
		
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
out4Struct out4 = new out4Struct();
row12Struct row12 = new row12Struct();






	
	/**
	 * [tOracleRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_4", false);
		start_Hash.put("tOracleRow_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tOracleRow_4 = 0;
		

	java.sql.Connection conn_tOracleRow_4 = null;
	String query_tOracleRow_4 = "";
	boolean whetherReject_tOracleRow_4 = false;
	int count_tOracleRow_4 = 0;
			String driverClass_tOracleRow_4 = "oracle.jdbc.OracleDriver";
		    java.lang.Class jdbcclazz_tOracleRow_4 = java.lang.Class.forName(driverClass_tOracleRow_4);
		
			String url_tOracleRow_4 = null;
				url_tOracleRow_4 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
					String dbUser_tOracleRow_4 = context.db_origen_Login;
	        
            		
            		
            		
	final String decryptedPassword_tOracleRow_4 = context.db_origen_Password; 
        		   	
        	        String dbPwd_tOracleRow_4 = decryptedPassword_tOracleRow_4;
	        
					
			conn_tOracleRow_4 = java.sql.DriverManager.getConnection(url_tOracleRow_4,dbUser_tOracleRow_4,dbPwd_tOracleRow_4);
		
        resourceMap.put("conn_tOracleRow_4", conn_tOracleRow_4);
					if(conn_tOracleRow_4.getAutoCommit()) {
						
				conn_tOracleRow_4.setAutoCommit(false);
			
					}        
					int commitEvery_tOracleRow_4 = 10000;
					int commitCounter_tOracleRow_4 = 0;
				
        java.sql.Statement stmt_tOracleRow_4 = conn_tOracleRow_4.createStatement();
        resourceMap.put("stmt_tOracleRow_4", stmt_tOracleRow_4);

 



/**
 * [tOracleRow_4 begin ] stop
 */



	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				String driverClass_tOracleInput_5 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_5);
				
			String url_tOracleInput_5 = null;
				url_tOracleInput_5 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_5 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_5 = context.db_origen_Password; 

				String dbPwd_tOracleInput_5 = decryptedPassword_tOracleInput_5;

				
					java.util.Properties atnParamsPrope_tOracleInput_5 = new java.util.Properties();
					atnParamsPrope_tOracleInput_5.put("user",dbUser_tOracleInput_5);
					atnParamsPrope_tOracleInput_5.put("password",dbPwd_tOracleInput_5);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_5.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_5 = java.sql.DriverManager.getConnection(url_tOracleInput_5, atnParamsPrope_tOracleInput_5);
				java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_5.next()) {
					sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
				}
                                if (!(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                                }
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement();

		    String dbquery_tOracleInput_5 = "select  padre_id\n    from vac_registrosdsb \n   where id = "+context.REGISTROSDSB_ID;
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row9.PADRE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row9.PADRE_ID = rs_tOracleInput_5.getBigDecimal(1);
					} else {
				
						row9.PADRE_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out4 = null;


// # Output table : 'out4'
out4_tmp.PADRE_ID = row9.PADRE_ID ;
out4 = out4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out4"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.REGISTRO_TABLA_ID = out4.PADRE_ID;
    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tOracleRow_4 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					

query_tOracleRow_4 = "UPDATE VAC_REGISTROSDSB\nSET ESTADO = 'Inactivo'\nWHERE ID = " +context.REGISTRO_TABLA_ID;
whetherReject_tOracleRow_4 = false;
globalMap.put("tOracleRow_4_QUERY",query_tOracleRow_4);
try {
		stmt_tOracleRow_4.execute(query_tOracleRow_4);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_4_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_4 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tOracleRow_4++;
		if(commitEvery_tOracleRow_4 <= commitCounter_tOracleRow_4) {
			
			conn_tOracleRow_4.commit();
			
			commitCounter_tOracleRow_4=0;
		}
		

 


	tos_count_tOracleRow_4++;

/**
 * [tOracleRow_4 main ] stop
 */
	
	/**
	 * [tOracleRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_4";
	
	

 



/**
 * [tOracleRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_4";
	
	

 



/**
 * [tOracleRow_4 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
	if(conn_tOracleInput_5 != null && !conn_tOracleInput_5.isClosed()) {
	
			conn_tOracleInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */

	
	/**
	 * [tOracleRow_4 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_4";
	
	

	globalMap.put("tOracleRow_4_NB_LINE", count_tOracleRow_4);
        stmt_tOracleRow_4.close();
        resourceMap.remove("stmt_tOracleRow_4");
    resourceMap.put("statementClosed_tOracleRow_4", true);
		if(commitEvery_tOracleRow_4>commitCounter_tOracleRow_4){

			
			conn_tOracleRow_4.commit();
			
	
			commitCounter_tOracleRow_4=0;
	
		}
			conn_tOracleRow_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
    resourceMap.put("finish_tOracleRow_4", true);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tOracleRow_4", true);
end_Hash.put("tOracleRow_4", System.currentTimeMillis());




/**
 * [tOracleRow_4 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */

	
	/**
	 * [tOracleRow_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_4";
	
	

try {
    if (resourceMap.get("statementClosed_tOracleRow_4") == null) {
            java.sql.Statement stmtToClose_tOracleRow_4 = null;
            if ((stmtToClose_tOracleRow_4 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_4")) != null) {
                stmtToClose_tOracleRow_4.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tOracleRow_4") == null){
            java.sql.Connection ctn_tOracleRow_4 = null;
            if((ctn_tOracleRow_4 = (java.sql.Connection)resourceMap.get("conn_tOracleRow_4")) != null){
                try {
                    ctn_tOracleRow_4.close();
                } catch (java.sql.SQLException sqlEx_tOracleRow_4) {
                    String errorMessage_tOracleRow_4 = "failed to close the connection in tOracleRow_4 :" + sqlEx_tOracleRow_4.getMessage();
                    System.err.println(errorMessage_tOracleRow_4);
                }
            }
        }
    }
 



/**
 * [tOracleRow_4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final SincronizarDatosWsBSD SincronizarDatosWsBSDClass = new SincronizarDatosWsBSD();

        int exitCode = SincronizarDatosWsBSDClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = SincronizarDatosWsBSD.class.getClassLoader().getResourceAsStream("vac_sincronizacion_ws_bsd/sincronizardatoswsbsd_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = SincronizarDatosWsBSD.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("PathStorage", "id_String");
                        if(context.getStringValue("PathStorage") == null) {
                            context.PathStorage = null;
                        } else {
                            context.PathStorage=(String) context.getProperty("PathStorage");
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("ERROR", "id_String");
                        if(context.getStringValue("ERROR") == null) {
                            context.ERROR = null;
                        } else {
                            context.ERROR=(String) context.getProperty("ERROR");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FANTERIOR", "id_String");
                        if(context.getStringValue("FANTERIOR") == null) {
                            context.FANTERIOR = null;
                        } else {
                            context.FANTERIOR=(String) context.getProperty("FANTERIOR");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ACOMPANANTE", "id_String");
                        if(context.getStringValue("ACOMPANANTE") == null) {
                            context.ACOMPANANTE = null;
                        } else {
                            context.ACOMPANANTE=(String) context.getProperty("ACOMPANANTE");
                        }
                        context.setContextType("CERTIFICADO", "id_BigDecimal");
                        if(context.getStringValue("CERTIFICADO") == null) {
                            context.CERTIFICADO = null;
                        } else {
                            try{
                                context.CERTIFICADO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("CERTIFICADO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "CERTIFICADO", e.getMessage()));
                                context.CERTIFICADO=null;
                            }
                        }
                        context.setContextType("COD_ASEGURADORA", "id_String");
                        if(context.getStringValue("COD_ASEGURADORA") == null) {
                            context.COD_ASEGURADORA = null;
                        } else {
                            context.COD_ASEGURADORA=(String) context.getProperty("COD_ASEGURADORA");
                        }
                        context.setContextType("COD_DEPTO", "id_Integer");
                        if(context.getStringValue("COD_DEPTO") == null) {
                            context.COD_DEPTO = null;
                        } else {
                            try{
                                context.COD_DEPTO=routines.system.ParserUtils.parseTo_Integer (context.getProperty("COD_DEPTO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COD_DEPTO", e.getMessage()));
                                context.COD_DEPTO=null;
                            }
                        }
                        context.setContextType("COD_MCPIO", "id_Integer");
                        if(context.getStringValue("COD_MCPIO") == null) {
                            context.COD_MCPIO = null;
                        } else {
                            try{
                                context.COD_MCPIO=routines.system.ParserUtils.parseTo_Integer (context.getProperty("COD_MCPIO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COD_MCPIO", e.getMessage()));
                                context.COD_MCPIO=null;
                            }
                        }
                        context.setContextType("COD_PAIS", "id_String");
                        if(context.getStringValue("COD_PAIS") == null) {
                            context.COD_PAIS = null;
                        } else {
                            context.COD_PAIS=(String) context.getProperty("COD_PAIS");
                        }
                        context.setContextType("COD_REGIMEN", "id_Integer");
                        if(context.getStringValue("COD_REGIMEN") == null) {
                            context.COD_REGIMEN = null;
                        } else {
                            try{
                                context.COD_REGIMEN=routines.system.ParserUtils.parseTo_Integer (context.getProperty("COD_REGIMEN"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COD_REGIMEN", e.getMessage()));
                                context.COD_REGIMEN=null;
                            }
                        }
                        context.setContextType("COD_RH", "id_String");
                        if(context.getStringValue("COD_RH") == null) {
                            context.COD_RH = null;
                        } else {
                            context.COD_RH=(String) context.getProperty("COD_RH");
                        }
                        context.setContextType("CODIGO_ETNIA", "id_Integer");
                        if(context.getStringValue("CODIGO_ETNIA") == null) {
                            context.CODIGO_ETNIA = null;
                        } else {
                            try{
                                context.CODIGO_ETNIA=routines.system.ParserUtils.parseTo_Integer (context.getProperty("CODIGO_ETNIA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "CODIGO_ETNIA", e.getMessage()));
                                context.CODIGO_ETNIA=null;
                            }
                        }
                        context.setContextType("CONSECUTIVO", "id_BigDecimal");
                        if(context.getStringValue("CONSECUTIVO") == null) {
                            context.CONSECUTIVO = null;
                        } else {
                            try{
                                context.CONSECUTIVO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("CONSECUTIVO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "CONSECUTIVO", e.getMessage()));
                                context.CONSECUTIVO=null;
                            }
                        }
                        context.setContextType("CORREO", "id_String");
                        if(context.getStringValue("CORREO") == null) {
                            context.CORREO = null;
                        } else {
                            context.CORREO=(String) context.getProperty("CORREO");
                        }
                        context.setContextType("CUIDADOR_ID", "id_BigDecimal");
                        if(context.getStringValue("CUIDADOR_ID") == null) {
                            context.CUIDADOR_ID = null;
                        } else {
                            try{
                                context.CUIDADOR_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("CUIDADOR_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "CUIDADOR_ID", e.getMessage()));
                                context.CUIDADOR_ID=null;
                            }
                        }
                        context.setContextType("DIRECCION", "id_String");
                        if(context.getStringValue("DIRECCION") == null) {
                            context.DIRECCION = null;
                        } else {
                            context.DIRECCION=(String) context.getProperty("DIRECCION");
                        }
                        context.setContextType("DOCUMENTO", "id_String");
                        if(context.getStringValue("DOCUMENTO") == null) {
                            context.DOCUMENTO = null;
                        } else {
                            context.DOCUMENTO=(String) context.getProperty("DOCUMENTO");
                        }
                        context.setContextType("DOCUMENTO_M", "id_String");
                        if(context.getStringValue("DOCUMENTO_M") == null) {
                            context.DOCUMENTO_M = null;
                        } else {
                            context.DOCUMENTO_M=(String) context.getProperty("DOCUMENTO_M");
                        }
                        context.setContextType("EDAD", "id_String");
                        if(context.getStringValue("EDAD") == null) {
                            context.EDAD = null;
                        } else {
                            context.EDAD=(String) context.getProperty("EDAD");
                        }
                        context.setContextType("ESTADO_REG", "id_Integer");
                        if(context.getStringValue("ESTADO_REG") == null) {
                            context.ESTADO_REG = null;
                        } else {
                            try{
                                context.ESTADO_REG=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ESTADO_REG"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ESTADO_REG", e.getMessage()));
                                context.ESTADO_REG=null;
                            }
                        }
                        context.setContextType("FECHA_NACIMIENTO", "id_Date");
                        if(context.getStringValue("FECHA_NACIMIENTO") == null) {
                            context.FECHA_NACIMIENTO = null;
                        } else {
                            String context_FECHA_NACIMIENTO_value = context.getProperty("FECHA_NACIMIENTO");
                            try{
                                if (context_FECHA_NACIMIENTO_value == null){
                                    context_FECHA_NACIMIENTO_value = "";
                                }
                                int context_FECHA_NACIMIENTO_pos = context_FECHA_NACIMIENTO_value.indexOf(";");
                                String context_FECHA_NACIMIENTO_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_FECHA_NACIMIENTO_pos > -1){
                                    context_FECHA_NACIMIENTO_pattern = context_FECHA_NACIMIENTO_value.substring(0, context_FECHA_NACIMIENTO_pos);
                                    context_FECHA_NACIMIENTO_value = context_FECHA_NACIMIENTO_value.substring(context_FECHA_NACIMIENTO_pos + 1);
                                }

                                context.FECHA_NACIMIENTO=(java.util.Date)(new java.text.SimpleDateFormat(context_FECHA_NACIMIENTO_pattern).parse(context_FECHA_NACIMIENTO_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_FECHA_NACIMIENTO_longValue = Long.valueOf(context_FECHA_NACIMIENTO_value);
                                    context.FECHA_NACIMIENTO = new java.util.Date(context_FECHA_NACIMIENTO_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "FECHA_NACIMIENTO", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.FECHA_NACIMIENTO=null;
                                }
                            }
                        }
                        context.setContextType("FECHA_NACIMIENTOP", "id_String");
                        if(context.getStringValue("FECHA_NACIMIENTOP") == null) {
                            context.FECHA_NACIMIENTOP = null;
                        } else {
                            context.FECHA_NACIMIENTOP=(String) context.getProperty("FECHA_NACIMIENTOP");
                        }
                        context.setContextType("GRUPO_SANGUINEO", "id_String");
                        if(context.getStringValue("GRUPO_SANGUINEO") == null) {
                            context.GRUPO_SANGUINEO = null;
                        } else {
                            context.GRUPO_SANGUINEO=(String) context.getProperty("GRUPO_SANGUINEO");
                        }
                        context.setContextType("JSON_PERSONAS", "id_String");
                        if(context.getStringValue("JSON_PERSONAS") == null) {
                            context.JSON_PERSONAS = null;
                        } else {
                            context.JSON_PERSONAS=(String) context.getProperty("JSON_PERSONAS");
                        }
                        context.setContextType("PARENTESCO_CUIDADOR", "id_String");
                        if(context.getStringValue("PARENTESCO_CUIDADOR") == null) {
                            context.PARENTESCO_CUIDADOR = null;
                        } else {
                            context.PARENTESCO_CUIDADOR=(String) context.getProperty("PARENTESCO_CUIDADOR");
                        }
                        context.setContextType("PERSONAS_ID", "id_BigDecimal");
                        if(context.getStringValue("PERSONAS_ID") == null) {
                            context.PERSONAS_ID = null;
                        } else {
                            try{
                                context.PERSONAS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PERSONAS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PERSONAS_ID", e.getMessage()));
                                context.PERSONAS_ID=null;
                            }
                        }
                        context.setContextType("PRIMER_APELLIDO", "id_String");
                        if(context.getStringValue("PRIMER_APELLIDO") == null) {
                            context.PRIMER_APELLIDO = null;
                        } else {
                            context.PRIMER_APELLIDO=(String) context.getProperty("PRIMER_APELLIDO");
                        }
                        context.setContextType("PRIMER_APELLIDO_M", "id_String");
                        if(context.getStringValue("PRIMER_APELLIDO_M") == null) {
                            context.PRIMER_APELLIDO_M = null;
                        } else {
                            context.PRIMER_APELLIDO_M=(String) context.getProperty("PRIMER_APELLIDO_M");
                        }
                        context.setContextType("PRIMER_NOMBRE", "id_String");
                        if(context.getStringValue("PRIMER_NOMBRE") == null) {
                            context.PRIMER_NOMBRE = null;
                        } else {
                            context.PRIMER_NOMBRE=(String) context.getProperty("PRIMER_NOMBRE");
                        }
                        context.setContextType("PRIMER_NOMBRE_M", "id_String");
                        if(context.getStringValue("PRIMER_NOMBRE_M") == null) {
                            context.PRIMER_NOMBRE_M = null;
                        } else {
                            context.PRIMER_NOMBRE_M=(String) context.getProperty("PRIMER_NOMBRE_M");
                        }
                        context.setContextType("REGISTRO_TABLA_ID", "id_BigDecimal");
                        if(context.getStringValue("REGISTRO_TABLA_ID") == null) {
                            context.REGISTRO_TABLA_ID = null;
                        } else {
                            try{
                                context.REGISTRO_TABLA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("REGISTRO_TABLA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "REGISTRO_TABLA_ID", e.getMessage()));
                                context.REGISTRO_TABLA_ID=null;
                            }
                        }
                        context.setContextType("REGISTROSDSB_ID", "id_BigDecimal");
                        if(context.getStringValue("REGISTROSDSB_ID") == null) {
                            context.REGISTROSDSB_ID = null;
                        } else {
                            try{
                                context.REGISTROSDSB_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("REGISTROSDSB_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "REGISTROSDSB_ID", e.getMessage()));
                                context.REGISTROSDSB_ID=null;
                            }
                        }
                        context.setContextType("SEGUNDO_APELLIDO", "id_String");
                        if(context.getStringValue("SEGUNDO_APELLIDO") == null) {
                            context.SEGUNDO_APELLIDO = null;
                        } else {
                            context.SEGUNDO_APELLIDO=(String) context.getProperty("SEGUNDO_APELLIDO");
                        }
                        context.setContextType("SEGUNDO_APELLIDO_M", "id_String");
                        if(context.getStringValue("SEGUNDO_APELLIDO_M") == null) {
                            context.SEGUNDO_APELLIDO_M = null;
                        } else {
                            context.SEGUNDO_APELLIDO_M=(String) context.getProperty("SEGUNDO_APELLIDO_M");
                        }
                        context.setContextType("SEGUNDO_NOMBRE", "id_String");
                        if(context.getStringValue("SEGUNDO_NOMBRE") == null) {
                            context.SEGUNDO_NOMBRE = null;
                        } else {
                            context.SEGUNDO_NOMBRE=(String) context.getProperty("SEGUNDO_NOMBRE");
                        }
                        context.setContextType("SEGUNDO_NOMBRE_M", "id_String");
                        if(context.getStringValue("SEGUNDO_NOMBRE_M") == null) {
                            context.SEGUNDO_NOMBRE_M = null;
                        } else {
                            context.SEGUNDO_NOMBRE_M=(String) context.getProperty("SEGUNDO_NOMBRE_M");
                        }
                        context.setContextType("SIGLA_SEXO", "id_String");
                        if(context.getStringValue("SIGLA_SEXO") == null) {
                            context.SIGLA_SEXO = null;
                        } else {
                            context.SIGLA_SEXO=(String) context.getProperty("SIGLA_SEXO");
                        }
                        context.setContextType("TELEFONO", "id_String");
                        if(context.getStringValue("TELEFONO") == null) {
                            context.TELEFONO = null;
                        } else {
                            context.TELEFONO=(String) context.getProperty("TELEFONO");
                        }
                        context.setContextType("TIPO_AFILIACION", "id_Integer");
                        if(context.getStringValue("TIPO_AFILIACION") == null) {
                            context.TIPO_AFILIACION = null;
                        } else {
                            try{
                                context.TIPO_AFILIACION=routines.system.ParserUtils.parseTo_Integer (context.getProperty("TIPO_AFILIACION"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TIPO_AFILIACION", e.getMessage()));
                                context.TIPO_AFILIACION=null;
                            }
                        }
                        context.setContextType("TIPODOCUMENTO", "id_String");
                        if(context.getStringValue("TIPODOCUMENTO") == null) {
                            context.TIPODOCUMENTO = null;
                        } else {
                            context.TIPODOCUMENTO=(String) context.getProperty("TIPODOCUMENTO");
                        }
                        context.setContextType("TIPODOCUMENTO_M", "id_String");
                        if(context.getStringValue("TIPODOCUMENTO_M") == null) {
                            context.TIPODOCUMENTO_M = null;
                        } else {
                            context.TIPODOCUMENTO_M=(String) context.getProperty("TIPODOCUMENTO_M");
                        }
                        context.setContextType("ACTUALIZACION", "id_Boolean");
                        if(context.getStringValue("ACTUALIZACION") == null) {
                            context.ACTUALIZACION = null;
                        } else {
                            try{
                                context.ACTUALIZACION=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("ACTUALIZACION"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ACTUALIZACION", e.getMessage()));
                                context.ACTUALIZACION=null;
                            }
                        }
                        context.setContextType("BIOLOGICOS_ID", "id_BigDecimal");
                        if(context.getStringValue("BIOLOGICOS_ID") == null) {
                            context.BIOLOGICOS_ID = null;
                        } else {
                            try{
                                context.BIOLOGICOS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("BIOLOGICOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "BIOLOGICOS_ID", e.getMessage()));
                                context.BIOLOGICOS_ID=null;
                            }
                        }
                        context.setContextType("CAMPANIA_ID", "id_Integer");
                        if(context.getStringValue("CAMPANIA_ID") == null) {
                            context.CAMPANIA_ID = null;
                        } else {
                            try{
                                context.CAMPANIA_ID=routines.system.ParserUtils.parseTo_Integer (context.getProperty("CAMPANIA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "CAMPANIA_ID", e.getMessage()));
                                context.CAMPANIA_ID=null;
                            }
                        }
                        context.setContextType("COMERCIAL_ID", "id_Integer");
                        if(context.getStringValue("COMERCIAL_ID") == null) {
                            context.COMERCIAL_ID = null;
                        } else {
                            try{
                                context.COMERCIAL_ID=routines.system.ParserUtils.parseTo_Integer (context.getProperty("COMERCIAL_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COMERCIAL_ID", e.getMessage()));
                                context.COMERCIAL_ID=null;
                            }
                        }
                        context.setContextType("DOSIS_ID", "id_Integer");
                        if(context.getStringValue("DOSIS_ID") == null) {
                            context.DOSIS_ID = null;
                        } else {
                            try{
                                context.DOSIS_ID=routines.system.ParserUtils.parseTo_Integer (context.getProperty("DOSIS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "DOSIS_ID", e.getMessage()));
                                context.DOSIS_ID=null;
                            }
                        }
                        context.setContextType("EDAD_ANIOS", "id_Integer");
                        if(context.getStringValue("EDAD_ANIOS") == null) {
                            context.EDAD_ANIOS = null;
                        } else {
                            try{
                                context.EDAD_ANIOS=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EDAD_ANIOS"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EDAD_ANIOS", e.getMessage()));
                                context.EDAD_ANIOS=null;
                            }
                        }
                        context.setContextType("EDAD_DIAS", "id_Integer");
                        if(context.getStringValue("EDAD_DIAS") == null) {
                            context.EDAD_DIAS = null;
                        } else {
                            try{
                                context.EDAD_DIAS=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EDAD_DIAS"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EDAD_DIAS", e.getMessage()));
                                context.EDAD_DIAS=null;
                            }
                        }
                        context.setContextType("EDAD_MESES", "id_Integer");
                        if(context.getStringValue("EDAD_MESES") == null) {
                            context.EDAD_MESES = null;
                        } else {
                            try{
                                context.EDAD_MESES=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EDAD_MESES"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EDAD_MESES", e.getMessage()));
                                context.EDAD_MESES=null;
                            }
                        }
                        context.setContextType("EDAD_TOTAL", "id_Integer");
                        if(context.getStringValue("EDAD_TOTAL") == null) {
                            context.EDAD_TOTAL = null;
                        } else {
                            try{
                                context.EDAD_TOTAL=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EDAD_TOTAL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EDAD_TOTAL", e.getMessage()));
                                context.EDAD_TOTAL=null;
                            }
                        }
                        context.setContextType("FECHA_VACUNA", "id_String");
                        if(context.getStringValue("FECHA_VACUNA") == null) {
                            context.FECHA_VACUNA = null;
                        } else {
                            context.FECHA_VACUNA=(String) context.getProperty("FECHA_VACUNA");
                        }
                        context.setContextType("FECHA_VACUNA_EDAD", "id_Date");
                        if(context.getStringValue("FECHA_VACUNA_EDAD") == null) {
                            context.FECHA_VACUNA_EDAD = null;
                        } else {
                            String context_FECHA_VACUNA_EDAD_value = context.getProperty("FECHA_VACUNA_EDAD");
                            try{
                                if (context_FECHA_VACUNA_EDAD_value == null){
                                    context_FECHA_VACUNA_EDAD_value = "";
                                }
                                int context_FECHA_VACUNA_EDAD_pos = context_FECHA_VACUNA_EDAD_value.indexOf(";");
                                String context_FECHA_VACUNA_EDAD_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_FECHA_VACUNA_EDAD_pos > -1){
                                    context_FECHA_VACUNA_EDAD_pattern = context_FECHA_VACUNA_EDAD_value.substring(0, context_FECHA_VACUNA_EDAD_pos);
                                    context_FECHA_VACUNA_EDAD_value = context_FECHA_VACUNA_EDAD_value.substring(context_FECHA_VACUNA_EDAD_pos + 1);
                                }

                                context.FECHA_VACUNA_EDAD=(java.util.Date)(new java.text.SimpleDateFormat(context_FECHA_VACUNA_EDAD_pattern).parse(context_FECHA_VACUNA_EDAD_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_FECHA_VACUNA_EDAD_longValue = Long.valueOf(context_FECHA_VACUNA_EDAD_value);
                                    context.FECHA_VACUNA_EDAD = new java.util.Date(context_FECHA_VACUNA_EDAD_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "FECHA_VACUNA_EDAD", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.FECHA_VACUNA_EDAD=null;
                                }
                            }
                        }
                        context.setContextType("FUNCIONARIO", "id_String");
                        if(context.getStringValue("FUNCIONARIO") == null) {
                            context.FUNCIONARIO = null;
                        } else {
                            context.FUNCIONARIO=(String) context.getProperty("FUNCIONARIO");
                        }
                        context.setContextType("INSTITUCION", "id_String");
                        if(context.getStringValue("INSTITUCION") == null) {
                            context.INSTITUCION = null;
                        } else {
                            context.INSTITUCION=(String) context.getProperty("INSTITUCION");
                        }
                        context.setContextType("JSON_VACUNAS", "id_String");
                        if(context.getStringValue("JSON_VACUNAS") == null) {
                            context.JSON_VACUNAS = null;
                        } else {
                            context.JSON_VACUNAS=(String) context.getProperty("JSON_VACUNAS");
                        }
                        context.setContextType("LOTE", "id_String");
                        if(context.getStringValue("LOTE") == null) {
                            context.LOTE = null;
                        } else {
                            context.LOTE=(String) context.getProperty("LOTE");
                        }
                        context.setContextType("PRESENTACION_ID", "id_Integer");
                        if(context.getStringValue("PRESENTACION_ID") == null) {
                            context.PRESENTACION_ID = null;
                        } else {
                            try{
                                context.PRESENTACION_ID=routines.system.ParserUtils.parseTo_Integer (context.getProperty("PRESENTACION_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PRESENTACION_ID", e.getMessage()));
                                context.PRESENTACION_ID=null;
                            }
                        }
                        context.setContextType("TIPO_VACUNA", "id_Integer");
                        if(context.getStringValue("TIPO_VACUNA") == null) {
                            context.TIPO_VACUNA = null;
                        } else {
                            try{
                                context.TIPO_VACUNA=routines.system.ParserUtils.parseTo_Integer (context.getProperty("TIPO_VACUNA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TIPO_VACUNA", e.getMessage()));
                                context.TIPO_VACUNA=null;
                            }
                        }
                        context.setContextType("VACUNAS_ID", "id_Integer");
                        if(context.getStringValue("VACUNAS_ID") == null) {
                            context.VACUNAS_ID = null;
                        } else {
                            try{
                                context.VACUNAS_ID=routines.system.ParserUtils.parseTo_Integer (context.getProperty("VACUNAS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "VACUNAS_ID", e.getMessage()));
                                context.VACUNAS_ID=null;
                            }
                        }
                        context.setContextType("ERRORES", "id_String");
                        if(context.getStringValue("ERRORES") == null) {
                            context.ERRORES = null;
                        } else {
                            context.ERRORES=(String) context.getProperty("ERRORES");
                        }
                        context.setContextType("IdTabla", "id_String");
                        if(context.getStringValue("IdTabla") == null) {
                            context.IdTabla = null;
                        } else {
                            context.IdTabla=(String) context.getProperty("IdTabla");
                        }
                        context.setContextType("RESULTADO", "id_Boolean");
                        if(context.getStringValue("RESULTADO") == null) {
                            context.RESULTADO = null;
                        } else {
                            try{
                                context.RESULTADO=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("RESULTADO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "RESULTADO", e.getMessage()));
                                context.RESULTADO=null;
                            }
                        }
                        context.setContextType("UlrActionSoapConsultarPersona", "id_String");
                        if(context.getStringValue("UlrActionSoapConsultarPersona") == null) {
                            context.UlrActionSoapConsultarPersona = null;
                        } else {
                            context.UlrActionSoapConsultarPersona=(String) context.getProperty("UlrActionSoapConsultarPersona");
                        }
                        context.setContextType("UlrActionSoapInsertarPersona", "id_String");
                        if(context.getStringValue("UlrActionSoapInsertarPersona") == null) {
                            context.UlrActionSoapInsertarPersona = null;
                        } else {
                            context.UlrActionSoapInsertarPersona=(String) context.getProperty("UlrActionSoapInsertarPersona");
                        }
                        context.setContextType("UlrActionSoapInsertarPersonaVacuna", "id_String");
                        if(context.getStringValue("UlrActionSoapInsertarPersonaVacuna") == null) {
                            context.UlrActionSoapInsertarPersonaVacuna = null;
                        } else {
                            context.UlrActionSoapInsertarPersonaVacuna=(String) context.getProperty("UlrActionSoapInsertarPersonaVacuna");
                        }
                        context.setContextType("UrlActionSoap", "id_String");
                        if(context.getStringValue("UrlActionSoap") == null) {
                            context.UrlActionSoap = null;
                        } else {
                            context.UrlActionSoap=(String) context.getProperty("UrlActionSoap");
                        }
                        context.setContextType("UrlActionSoapInsertarAfiliacionPersona", "id_String");
                        if(context.getStringValue("UrlActionSoapInsertarAfiliacionPersona") == null) {
                            context.UrlActionSoapInsertarAfiliacionPersona = null;
                        } else {
                            context.UrlActionSoapInsertarAfiliacionPersona=(String) context.getProperty("UrlActionSoapInsertarAfiliacionPersona");
                        }
                        context.setContextType("UrlActionSoapInsertarUbicacionPersona", "id_String");
                        if(context.getStringValue("UrlActionSoapInsertarUbicacionPersona") == null) {
                            context.UrlActionSoapInsertarUbicacionPersona = null;
                        } else {
                            context.UrlActionSoapInsertarUbicacionPersona=(String) context.getProperty("UrlActionSoapInsertarUbicacionPersona");
                        }
                        context.setContextType("UrlActionSoapInsertarVacuna", "id_String");
                        if(context.getStringValue("UrlActionSoapInsertarVacuna") == null) {
                            context.UrlActionSoapInsertarVacuna = null;
                        } else {
                            context.UrlActionSoapInsertarVacuna=(String) context.getProperty("UrlActionSoapInsertarVacuna");
                        }
                        context.setContextType("UrlEndPoint", "id_String");
                        if(context.getStringValue("UrlEndPoint") == null) {
                            context.UrlEndPoint = null;
                        } else {
                            context.UrlEndPoint=(String) context.getProperty("UrlEndPoint");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("DAPLICADAS_ID", "id_BigDecimal");
                        if(context.getStringValue("DAPLICADAS_ID") == null) {
                            context.DAPLICADAS_ID = null;
                        } else {
                            try{
                                context.DAPLICADAS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("DAPLICADAS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "DAPLICADAS_ID", e.getMessage()));
                                context.DAPLICADAS_ID=null;
                            }
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("PathStorage")) {
                context.PathStorage = (String) parentContextMap.get("PathStorage");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("ERROR")) {
                context.ERROR = (String) parentContextMap.get("ERROR");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FANTERIOR")) {
                context.FANTERIOR = (String) parentContextMap.get("FANTERIOR");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ACOMPANANTE")) {
                context.ACOMPANANTE = (String) parentContextMap.get("ACOMPANANTE");
            }if (parentContextMap.containsKey("CERTIFICADO")) {
                context.CERTIFICADO = (BigDecimal) parentContextMap.get("CERTIFICADO");
            }if (parentContextMap.containsKey("COD_ASEGURADORA")) {
                context.COD_ASEGURADORA = (String) parentContextMap.get("COD_ASEGURADORA");
            }if (parentContextMap.containsKey("COD_DEPTO")) {
                context.COD_DEPTO = (Integer) parentContextMap.get("COD_DEPTO");
            }if (parentContextMap.containsKey("COD_MCPIO")) {
                context.COD_MCPIO = (Integer) parentContextMap.get("COD_MCPIO");
            }if (parentContextMap.containsKey("COD_PAIS")) {
                context.COD_PAIS = (String) parentContextMap.get("COD_PAIS");
            }if (parentContextMap.containsKey("COD_REGIMEN")) {
                context.COD_REGIMEN = (Integer) parentContextMap.get("COD_REGIMEN");
            }if (parentContextMap.containsKey("COD_RH")) {
                context.COD_RH = (String) parentContextMap.get("COD_RH");
            }if (parentContextMap.containsKey("CODIGO_ETNIA")) {
                context.CODIGO_ETNIA = (Integer) parentContextMap.get("CODIGO_ETNIA");
            }if (parentContextMap.containsKey("CONSECUTIVO")) {
                context.CONSECUTIVO = (BigDecimal) parentContextMap.get("CONSECUTIVO");
            }if (parentContextMap.containsKey("CORREO")) {
                context.CORREO = (String) parentContextMap.get("CORREO");
            }if (parentContextMap.containsKey("CUIDADOR_ID")) {
                context.CUIDADOR_ID = (BigDecimal) parentContextMap.get("CUIDADOR_ID");
            }if (parentContextMap.containsKey("DIRECCION")) {
                context.DIRECCION = (String) parentContextMap.get("DIRECCION");
            }if (parentContextMap.containsKey("DOCUMENTO")) {
                context.DOCUMENTO = (String) parentContextMap.get("DOCUMENTO");
            }if (parentContextMap.containsKey("DOCUMENTO_M")) {
                context.DOCUMENTO_M = (String) parentContextMap.get("DOCUMENTO_M");
            }if (parentContextMap.containsKey("EDAD")) {
                context.EDAD = (String) parentContextMap.get("EDAD");
            }if (parentContextMap.containsKey("ESTADO_REG")) {
                context.ESTADO_REG = (Integer) parentContextMap.get("ESTADO_REG");
            }if (parentContextMap.containsKey("FECHA_NACIMIENTO")) {
                context.FECHA_NACIMIENTO = (java.util.Date) parentContextMap.get("FECHA_NACIMIENTO");
            }if (parentContextMap.containsKey("FECHA_NACIMIENTOP")) {
                context.FECHA_NACIMIENTOP = (String) parentContextMap.get("FECHA_NACIMIENTOP");
            }if (parentContextMap.containsKey("GRUPO_SANGUINEO")) {
                context.GRUPO_SANGUINEO = (String) parentContextMap.get("GRUPO_SANGUINEO");
            }if (parentContextMap.containsKey("JSON_PERSONAS")) {
                context.JSON_PERSONAS = (String) parentContextMap.get("JSON_PERSONAS");
            }if (parentContextMap.containsKey("PARENTESCO_CUIDADOR")) {
                context.PARENTESCO_CUIDADOR = (String) parentContextMap.get("PARENTESCO_CUIDADOR");
            }if (parentContextMap.containsKey("PERSONAS_ID")) {
                context.PERSONAS_ID = (BigDecimal) parentContextMap.get("PERSONAS_ID");
            }if (parentContextMap.containsKey("PRIMER_APELLIDO")) {
                context.PRIMER_APELLIDO = (String) parentContextMap.get("PRIMER_APELLIDO");
            }if (parentContextMap.containsKey("PRIMER_APELLIDO_M")) {
                context.PRIMER_APELLIDO_M = (String) parentContextMap.get("PRIMER_APELLIDO_M");
            }if (parentContextMap.containsKey("PRIMER_NOMBRE")) {
                context.PRIMER_NOMBRE = (String) parentContextMap.get("PRIMER_NOMBRE");
            }if (parentContextMap.containsKey("PRIMER_NOMBRE_M")) {
                context.PRIMER_NOMBRE_M = (String) parentContextMap.get("PRIMER_NOMBRE_M");
            }if (parentContextMap.containsKey("REGISTRO_TABLA_ID")) {
                context.REGISTRO_TABLA_ID = (BigDecimal) parentContextMap.get("REGISTRO_TABLA_ID");
            }if (parentContextMap.containsKey("REGISTROSDSB_ID")) {
                context.REGISTROSDSB_ID = (BigDecimal) parentContextMap.get("REGISTROSDSB_ID");
            }if (parentContextMap.containsKey("SEGUNDO_APELLIDO")) {
                context.SEGUNDO_APELLIDO = (String) parentContextMap.get("SEGUNDO_APELLIDO");
            }if (parentContextMap.containsKey("SEGUNDO_APELLIDO_M")) {
                context.SEGUNDO_APELLIDO_M = (String) parentContextMap.get("SEGUNDO_APELLIDO_M");
            }if (parentContextMap.containsKey("SEGUNDO_NOMBRE")) {
                context.SEGUNDO_NOMBRE = (String) parentContextMap.get("SEGUNDO_NOMBRE");
            }if (parentContextMap.containsKey("SEGUNDO_NOMBRE_M")) {
                context.SEGUNDO_NOMBRE_M = (String) parentContextMap.get("SEGUNDO_NOMBRE_M");
            }if (parentContextMap.containsKey("SIGLA_SEXO")) {
                context.SIGLA_SEXO = (String) parentContextMap.get("SIGLA_SEXO");
            }if (parentContextMap.containsKey("TELEFONO")) {
                context.TELEFONO = (String) parentContextMap.get("TELEFONO");
            }if (parentContextMap.containsKey("TIPO_AFILIACION")) {
                context.TIPO_AFILIACION = (Integer) parentContextMap.get("TIPO_AFILIACION");
            }if (parentContextMap.containsKey("TIPODOCUMENTO")) {
                context.TIPODOCUMENTO = (String) parentContextMap.get("TIPODOCUMENTO");
            }if (parentContextMap.containsKey("TIPODOCUMENTO_M")) {
                context.TIPODOCUMENTO_M = (String) parentContextMap.get("TIPODOCUMENTO_M");
            }if (parentContextMap.containsKey("ACTUALIZACION")) {
                context.ACTUALIZACION = (Boolean) parentContextMap.get("ACTUALIZACION");
            }if (parentContextMap.containsKey("BIOLOGICOS_ID")) {
                context.BIOLOGICOS_ID = (BigDecimal) parentContextMap.get("BIOLOGICOS_ID");
            }if (parentContextMap.containsKey("CAMPANIA_ID")) {
                context.CAMPANIA_ID = (Integer) parentContextMap.get("CAMPANIA_ID");
            }if (parentContextMap.containsKey("COMERCIAL_ID")) {
                context.COMERCIAL_ID = (Integer) parentContextMap.get("COMERCIAL_ID");
            }if (parentContextMap.containsKey("DOSIS_ID")) {
                context.DOSIS_ID = (Integer) parentContextMap.get("DOSIS_ID");
            }if (parentContextMap.containsKey("EDAD_ANIOS")) {
                context.EDAD_ANIOS = (Integer) parentContextMap.get("EDAD_ANIOS");
            }if (parentContextMap.containsKey("EDAD_DIAS")) {
                context.EDAD_DIAS = (Integer) parentContextMap.get("EDAD_DIAS");
            }if (parentContextMap.containsKey("EDAD_MESES")) {
                context.EDAD_MESES = (Integer) parentContextMap.get("EDAD_MESES");
            }if (parentContextMap.containsKey("EDAD_TOTAL")) {
                context.EDAD_TOTAL = (Integer) parentContextMap.get("EDAD_TOTAL");
            }if (parentContextMap.containsKey("FECHA_VACUNA")) {
                context.FECHA_VACUNA = (String) parentContextMap.get("FECHA_VACUNA");
            }if (parentContextMap.containsKey("FECHA_VACUNA_EDAD")) {
                context.FECHA_VACUNA_EDAD = (java.util.Date) parentContextMap.get("FECHA_VACUNA_EDAD");
            }if (parentContextMap.containsKey("FUNCIONARIO")) {
                context.FUNCIONARIO = (String) parentContextMap.get("FUNCIONARIO");
            }if (parentContextMap.containsKey("INSTITUCION")) {
                context.INSTITUCION = (String) parentContextMap.get("INSTITUCION");
            }if (parentContextMap.containsKey("JSON_VACUNAS")) {
                context.JSON_VACUNAS = (String) parentContextMap.get("JSON_VACUNAS");
            }if (parentContextMap.containsKey("LOTE")) {
                context.LOTE = (String) parentContextMap.get("LOTE");
            }if (parentContextMap.containsKey("PRESENTACION_ID")) {
                context.PRESENTACION_ID = (Integer) parentContextMap.get("PRESENTACION_ID");
            }if (parentContextMap.containsKey("TIPO_VACUNA")) {
                context.TIPO_VACUNA = (Integer) parentContextMap.get("TIPO_VACUNA");
            }if (parentContextMap.containsKey("VACUNAS_ID")) {
                context.VACUNAS_ID = (Integer) parentContextMap.get("VACUNAS_ID");
            }if (parentContextMap.containsKey("ERRORES")) {
                context.ERRORES = (String) parentContextMap.get("ERRORES");
            }if (parentContextMap.containsKey("IdTabla")) {
                context.IdTabla = (String) parentContextMap.get("IdTabla");
            }if (parentContextMap.containsKey("RESULTADO")) {
                context.RESULTADO = (Boolean) parentContextMap.get("RESULTADO");
            }if (parentContextMap.containsKey("UlrActionSoapConsultarPersona")) {
                context.UlrActionSoapConsultarPersona = (String) parentContextMap.get("UlrActionSoapConsultarPersona");
            }if (parentContextMap.containsKey("UlrActionSoapInsertarPersona")) {
                context.UlrActionSoapInsertarPersona = (String) parentContextMap.get("UlrActionSoapInsertarPersona");
            }if (parentContextMap.containsKey("UlrActionSoapInsertarPersonaVacuna")) {
                context.UlrActionSoapInsertarPersonaVacuna = (String) parentContextMap.get("UlrActionSoapInsertarPersonaVacuna");
            }if (parentContextMap.containsKey("UrlActionSoap")) {
                context.UrlActionSoap = (String) parentContextMap.get("UrlActionSoap");
            }if (parentContextMap.containsKey("UrlActionSoapInsertarAfiliacionPersona")) {
                context.UrlActionSoapInsertarAfiliacionPersona = (String) parentContextMap.get("UrlActionSoapInsertarAfiliacionPersona");
            }if (parentContextMap.containsKey("UrlActionSoapInsertarUbicacionPersona")) {
                context.UrlActionSoapInsertarUbicacionPersona = (String) parentContextMap.get("UrlActionSoapInsertarUbicacionPersona");
            }if (parentContextMap.containsKey("UrlActionSoapInsertarVacuna")) {
                context.UrlActionSoapInsertarVacuna = (String) parentContextMap.get("UrlActionSoapInsertarVacuna");
            }if (parentContextMap.containsKey("UrlEndPoint")) {
                context.UrlEndPoint = (String) parentContextMap.get("UrlEndPoint");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("DAPLICADAS_ID")) {
                context.DAPLICADAS_ID = (BigDecimal) parentContextMap.get("DAPLICADAS_ID");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_origen_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tOracleInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tOracleInput_1) {
globalMap.put("tOracleInput_1_SUBPROCESS_STATE", -1);

e_tOracleInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : SincronizarDatosWsBSD");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     621005 characters generated by Talend Open Studio for ESB 
 *     on the November 1, 2024, 12:57:20‚ÄØAM COT
 ************************************************************************************************/