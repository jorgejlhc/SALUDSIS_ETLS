// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package rep_inicio_f5.acm_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_12
	//import java.util.List;

	//the import part of tJava_13
	//import java.util.List;

	//the import part of tJava_11
	//import java.util.List;

	//the import part of tJava_10
	//import java.util.List;

	//the import part of tJava_9
	//import java.util.List;

	//the import part of tJava_8
	//import java.util.List;

	//the import part of tJava_7
	//import java.util.List;

	//the import part of tJava_6
	//import java.util.List;

	//the import part of tJava_5
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: ACM Purpose: Plantilla para inicial el desarrollo de un ETL<br>
 * Description: Para iniciar el desarrollo de un ETL con conexión de base de datos, log de errores y log de ejecución <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class ACM implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(JOB != null){
				
					this.setProperty("JOB", JOB.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(ACTUALIZACION_TOTAL != null){
				
					this.setProperty("ACTUALIZACION_TOTAL", ACTUALIZACION_TOTAL.toString());
				
			}
			
			if(CONDICION != null){
				
					this.setProperty("CONDICION", CONDICION.toString());
				
			}
			
			if(CONDICION_AUDITORES != null){
				
					this.setProperty("CONDICION_AUDITORES", CONDICION_AUDITORES.toString());
				
			}
			
			if(CONDICION_INDICADORES != null){
				
					this.setProperty("CONDICION_INDICADORES", CONDICION_INDICADORES.toString());
				
			}
			
			if(CONDICION2 != null){
				
					this.setProperty("CONDICION2", CONDICION2.toString());
				
			}
			
			if(DEJECUCION != null){
				
					this.setProperty("DEJECUCION", DEJECUCION.toString());
				
			}
			
			if(FANTERIOR != null){
				
					this.setProperty("FANTERIOR", FANTERIOR.toString());
				
			}
			
			if(FEJECUCION != null){
				
					this.setProperty("FEJECUCION", FEJECUCION.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(CONDITION != null){
				
					this.setProperty("CONDITION", CONDITION.toString());
				
			}
			
			if(CONDITION_PRINCIPAL != null){
				
					this.setProperty("CONDITION_PRINCIPAL", CONDITION_PRINCIPAL.toString());
				
			}
			
			if(ERROR != null){
				
					this.setProperty("ERROR", ERROR.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(FECHA_TERMINACION != null){
				
					this.setProperty("FECHA_TERMINACION", FECHA_TERMINACION.toString());
				
			}
			
			if(ID_SOLICITUD != null){
				
					this.setProperty("ID_SOLICITUD", ID_SOLICITUD.toString());
				
			}
			
			if(LAST_DAYS != null){
				
					this.setProperty("LAST_DAYS", LAST_DAYS.toString());
				
			}
			
			if(LOGS_STAT != null){
				
					this.setProperty("LOGS_STAT", LOGS_STAT.toString());
				
			}
			
			if(RutaSistema != null){
				
					this.setProperty("RutaSistema", RutaSistema.toString());
				
			}
			
			if(mail_Message != null){
				
					this.setProperty("mail_Message", mail_Message.toString());
				
			}
			
			if(mail_Password != null){
				
					this.setProperty("mail_Password", mail_Password.toString());
				
			}
			
			if(mail_Sendername != null){
				
					this.setProperty("mail_Sendername", mail_Sendername.toString());
				
			}
			
			if(mail_SMTP_Host != null){
				
					this.setProperty("mail_SMTP_Host", mail_SMTP_Host.toString());
				
			}
			
			if(mail_SMTP_Port != null){
				
					this.setProperty("mail_SMTP_Port", mail_SMTP_Port.toString());
				
			}
			
			if(mail_Subject != null){
				
					this.setProperty("mail_Subject", mail_Subject.toString());
				
			}
			
			if(mail_To != null){
				
					this.setProperty("mail_To", mail_To.toString());
				
			}
			
			if(mail_User != null){
				
					this.setProperty("mail_User", mail_User.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public String JOB;
public String getJOB(){
	return this.JOB;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public Boolean ACTUALIZACION_TOTAL;
public Boolean getACTUALIZACION_TOTAL(){
	return this.ACTUALIZACION_TOTAL;
}
public String CONDICION;
public String getCONDICION(){
	return this.CONDICION;
}
public String CONDICION_AUDITORES;
public String getCONDICION_AUDITORES(){
	return this.CONDICION_AUDITORES;
}
public String CONDICION_INDICADORES;
public String getCONDICION_INDICADORES(){
	return this.CONDICION_INDICADORES;
}
public String CONDICION2;
public String getCONDICION2(){
	return this.CONDICION2;
}
public String DEJECUCION;
public String getDEJECUCION(){
	return this.DEJECUCION;
}
public String FANTERIOR;
public String getFANTERIOR(){
	return this.FANTERIOR;
}
public String FEJECUCION;
public String getFEJECUCION(){
	return this.FEJECUCION;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String CONDITION;
public String getCONDITION(){
	return this.CONDITION;
}
public String CONDITION_PRINCIPAL;
public String getCONDITION_PRINCIPAL(){
	return this.CONDITION_PRINCIPAL;
}
public String ERROR;
public String getERROR(){
	return this.ERROR;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public String FECHA_TERMINACION;
public String getFECHA_TERMINACION(){
	return this.FECHA_TERMINACION;
}
public Integer ID_SOLICITUD;
public Integer getID_SOLICITUD(){
	return this.ID_SOLICITUD;
}
public Integer LAST_DAYS;
public Integer getLAST_DAYS(){
	return this.LAST_DAYS;
}
public String LOGS_STAT;
public String getLOGS_STAT(){
	return this.LOGS_STAT;
}
public String RutaSistema;
public String getRutaSistema(){
	return this.RutaSistema;
}
public String mail_Message;
public String getMail_Message(){
	return this.mail_Message;
}
public java.lang.String mail_Password;
public java.lang.String getMail_Password(){
	return this.mail_Password;
}
public String mail_Sendername;
public String getMail_Sendername(){
	return this.mail_Sendername;
}
public String mail_SMTP_Host;
public String getMail_SMTP_Host(){
	return this.mail_SMTP_Host;
}
public String mail_SMTP_Port;
public String getMail_SMTP_Port(){
	return this.mail_SMTP_Port;
}
public String mail_Subject;
public String getMail_Subject(){
	return this.mail_Subject;
}
public String mail_To;
public String getMail_To(){
	return this.mail_To;
}
public String mail_User;
public String getMail_User(){
	return this.mail_User;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ACM";
	private final String projectName = "REP_INICIO_F5";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ACM.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ACM.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_39_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_41_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_36_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_37_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_38_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row37_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row38_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row40_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row41_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row43_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row44_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row46_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_22_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 7;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"UTF-8");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_1 = false;
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	org.dom4j.XPath xpath_7 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PathStorage","/connectionStrings"));
	xpath_7.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(7,xpath_7);
			
	org.dom4j.XPath xpath_8 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPHost","/connectionStrings"));
	xpath_8.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(8,xpath_8);
			
	org.dom4j.XPath xpath_9 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPPort","/connectionStrings"));
	xpath_9.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(9,xpath_9);
			
	org.dom4j.XPath xpath_10 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("UsernameMail","/connectionStrings"));
	xpath_10.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(10,xpath_10);
			
	org.dom4j.XPath xpath_11 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PasswordMail","/connectionStrings"));
	xpath_11.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(11,xpath_11);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.Node temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
	if (nb_line_tFileInputXML_1>=50) {
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Host =null;
									}else{
		row1.Host = str_tFileInputXML_1;
	}
    Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
    if(obj1_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj1_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_1 instanceof String || obj1_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
    } else if(obj1_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Port =null;
									}else{
		row1.Port = str_tFileInputXML_1;
	}
    Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
    if(obj2_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj2_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_1 instanceof String || obj2_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
    } else if(obj2_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Sid =null;
									}else{
		row1.Sid = str_tFileInputXML_1;
	}
    Object obj3_tFileInputXML_1 = xpaths_tFileInputXML_1.get(3).evaluate(temp_tFileInputXML_1);
    if(obj3_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj3_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_1 instanceof String || obj3_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj3_tFileInputXML_1);
    } else if(obj3_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.ServiceName =null;
									}else{
		row1.ServiceName = str_tFileInputXML_1;
	}
    Object obj4_tFileInputXML_1 = xpaths_tFileInputXML_1.get(4).evaluate(temp_tFileInputXML_1);
    if(obj4_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj4_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj4_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_1 instanceof String || obj4_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj4_tFileInputXML_1);
    } else if(obj4_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Schema =null;
									}else{
		row1.Schema = str_tFileInputXML_1;
	}
    Object obj5_tFileInputXML_1 = xpaths_tFileInputXML_1.get(5).evaluate(temp_tFileInputXML_1);
    if(obj5_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj5_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj5_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_1 instanceof String || obj5_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj5_tFileInputXML_1);
    } else if(obj5_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.User =null;
									}else{
		row1.User = str_tFileInputXML_1;
	}
    Object obj6_tFileInputXML_1 = xpaths_tFileInputXML_1.get(6).evaluate(temp_tFileInputXML_1);
    if(obj6_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj6_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj6_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_1 instanceof String || obj6_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj6_tFileInputXML_1);
    } else if(obj6_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Password =null;
									}else{
		row1.Password = str_tFileInputXML_1;
	}
    Object obj7_tFileInputXML_1 = xpaths_tFileInputXML_1.get(7).evaluate(temp_tFileInputXML_1);
    if(obj7_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj7_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj7_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj7_tFileInputXML_1 instanceof String || obj7_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj7_tFileInputXML_1);
    } else if(obj7_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj7_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PathStorage =null;
									}else{
		row1.PathStorage = str_tFileInputXML_1;
	}
    Object obj8_tFileInputXML_1 = xpaths_tFileInputXML_1.get(8).evaluate(temp_tFileInputXML_1);
    if(obj8_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj8_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj8_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj8_tFileInputXML_1 instanceof String || obj8_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj8_tFileInputXML_1);
    } else if(obj8_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj8_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPHost =null;
									}else{
		row1.SMTPHost = str_tFileInputXML_1;
	}
    Object obj9_tFileInputXML_1 = xpaths_tFileInputXML_1.get(9).evaluate(temp_tFileInputXML_1);
    if(obj9_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj9_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj9_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj9_tFileInputXML_1 instanceof String || obj9_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj9_tFileInputXML_1);
    } else if(obj9_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj9_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPPort =null;
									}else{
		row1.SMTPPort = str_tFileInputXML_1;
	}
    Object obj10_tFileInputXML_1 = xpaths_tFileInputXML_1.get(10).evaluate(temp_tFileInputXML_1);
    if(obj10_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj10_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj10_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj10_tFileInputXML_1 instanceof String || obj10_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj10_tFileInputXML_1);
    } else if(obj10_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj10_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.UsernameMail =null;
									}else{
		row1.UsernameMail = str_tFileInputXML_1;
	}
    Object obj11_tFileInputXML_1 = xpaths_tFileInputXML_1.get(11).evaluate(temp_tFileInputXML_1);
    if(obj11_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj11_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj11_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj11_tFileInputXML_1 instanceof String || obj11_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj11_tFileInputXML_1);
    } else if(obj11_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj11_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PasswordMail =null;
									}else{
		row1.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis
context.db_origen_Server = row1.Host;
context.db_origen_Port = row1.Port;
context.db_origen_ServiceName = row1.ServiceName;
context.db_origen_Schema = row1.Schema;
context.db_origen_Login = row1.User;
context.db_origen_Password = row1.Password;


//Guarda en variables de contexto la fecha de ejecución y la hora de inicio

context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");
context.JOB = "ACM";
context.ESTADO_EXEC = "Succes";

//Imprime en consola el job, la fecha de ejecución y la hora de inicio
System.out.println(context.JOB+" :-Start: "+context.FECHA_EJECUCION+" "+context.HORA_INICIO);


    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFileInputXML_2Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 6;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 12;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 11;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputXML_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_2", false);
		start_Hash.put("tFileInputXML_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_2";
	
	
		int tos_count_tFileInputXML_2 = 0;
		

	

int nb_line_tFileInputXML_2 = 0;

	String os_tFileInputXML_2 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_2=false;
	if(os_tFileInputXML_2.indexOf("windows") > -1 || os_tFileInputXML_2.indexOf("nt") > -1){
		isWindows_tFileInputXML_2=true;
	}
class NameSpaceTool_tFileInputXML_2 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_2{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_2 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_2 = null;
try {
	filename_tFileInputXML_2 = context.BODEGA;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_2 != null && filename_tFileInputXML_2 instanceof String && filename_tFileInputXML_2.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_2){
		filename_tFileInputXML_2 = filename_tFileInputXML_2.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_2 = true;
org.dom4j.Document doc_tFileInputXML_2 = null;
java.io.Closeable toClose_tFileInputXML_2 = null;
try{
	if(filename_tFileInputXML_2 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_2 = (java.io.InputStream)filename_tFileInputXML_2;
		toClose_tFileInputXML_2 = inputStream_tFileInputXML_2;
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(inputStream_tFileInputXML_2);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_2 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_2)),"UTF-8");
		toClose_tFileInputXML_2 = unicodeReader_tFileInputXML_2;
		org.xml.sax.InputSource in_tFileInputXML_2= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_2);
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(in_tFileInputXML_2);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_2 = false;
} finally {
	if(toClose_tFileInputXML_2!=null) {
		toClose_tFileInputXML_2.close();
	}
}
if(isValidFile_tFileInputXML_2){
NameSpaceTool_tFileInputXML_2 nsTool_tFileInputXML_2 = new NameSpaceTool_tFileInputXML_2();
nsTool_tFileInputXML_2.countNSMap(doc_tFileInputXML_2.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_2 = nsTool_tFileInputXML_2.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_2 = doc_tFileInputXML_2.createXPath(nsTool_tFileInputXML_2.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_2.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_2.selectNodes(doc_tFileInputXML_2);	
XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();
String str_tFileInputXML_2 = "";
org.dom4j.Node node_tFileInputXML_2 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_2=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_2{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_2 xPathUtil_tFileInputXML_2 = new XPathUtil_tFileInputXML_2();
	xPathUtil_tFileInputXML_2.initXPaths(xpaths_tFileInputXML_2, nsTool_tFileInputXML_2, xmlNameSpaceMap_tFileInputXML_2);
for (org.dom4j.Node temp_tFileInputXML_2: nodeList_tFileInputXML_2) {
	if (nb_line_tFileInputXML_2>=50) {
	
		break;
	}
		nb_line_tFileInputXML_2++;
		
	row2 = null;			
	boolean whetherReject_tFileInputXML_2 = false;
	row2 = new row2Struct();
	try{
    Object obj0_tFileInputXML_2 = xpaths_tFileInputXML_2.get(0).evaluate(temp_tFileInputXML_2);
    if(obj0_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj0_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj0_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_2 instanceof String || obj0_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj0_tFileInputXML_2);
    } else if(obj0_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row2.Host =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row2.Host ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row2.Host =null;
									}else{
		row2.Host = str_tFileInputXML_2;
	}
    Object obj1_tFileInputXML_2 = xpaths_tFileInputXML_2.get(1).evaluate(temp_tFileInputXML_2);
    if(obj1_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj1_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj1_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_2 instanceof String || obj1_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj1_tFileInputXML_2);
    } else if(obj1_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row2.Port =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row2.Port ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row2.Port =null;
									}else{
		row2.Port = str_tFileInputXML_2;
	}
    Object obj2_tFileInputXML_2 = xpaths_tFileInputXML_2.get(2).evaluate(temp_tFileInputXML_2);
    if(obj2_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj2_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj2_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_2 instanceof String || obj2_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj2_tFileInputXML_2);
    } else if(obj2_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row2.Sid =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row2.Sid ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row2.Sid =null;
									}else{
		row2.Sid = str_tFileInputXML_2;
	}
    Object obj3_tFileInputXML_2 = xpaths_tFileInputXML_2.get(3).evaluate(temp_tFileInputXML_2);
    if(obj3_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj3_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj3_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_2 instanceof String || obj3_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj3_tFileInputXML_2);
    } else if(obj3_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row2.ServiceName =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row2.ServiceName ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row2.ServiceName =null;
									}else{
		row2.ServiceName = str_tFileInputXML_2;
	}
    Object obj4_tFileInputXML_2 = xpaths_tFileInputXML_2.get(4).evaluate(temp_tFileInputXML_2);
    if(obj4_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj4_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj4_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_2 instanceof String || obj4_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj4_tFileInputXML_2);
    } else if(obj4_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row2.Schema =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row2.Schema ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row2.Schema =null;
									}else{
		row2.Schema = str_tFileInputXML_2;
	}
    Object obj5_tFileInputXML_2 = xpaths_tFileInputXML_2.get(5).evaluate(temp_tFileInputXML_2);
    if(obj5_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj5_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj5_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_2 instanceof String || obj5_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj5_tFileInputXML_2);
    } else if(obj5_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row2.User =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row2.User ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row2.User =null;
									}else{
		row2.User = str_tFileInputXML_2;
	}
    Object obj6_tFileInputXML_2 = xpaths_tFileInputXML_2.get(6).evaluate(temp_tFileInputXML_2);
    if(obj6_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj6_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj6_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_2 instanceof String || obj6_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj6_tFileInputXML_2);
    } else if(obj6_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row2.Password =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row2.Password ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row2.Password =null;
									}else{
		row2.Password = str_tFileInputXML_2;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_2 = true;
                System.err.println(e.getMessage());
                row2 = null;
    }
			
			

 



/**
 * [tFileInputXML_2 begin ] stop
 */
	
	/**
	 * [tFileInputXML_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 


	tos_count_tFileInputXML_2++;

/**
 * [tFileInputXML_2 main ] stop
 */
	
	/**
	 * [tFileInputXML_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

    //Guarda en variables de contexto los parametros para la conexión a la bodega 
context.db_destino_Server = row2.Host;
context.db_destino_Port = row2.Port;
context.db_destino_ServiceName = row2.ServiceName;
context.db_destino_Schema = row2.Schema;
context.db_destino_Login = row2.User;
context.db_destino_Password = row2.Password;

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputXML_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	


}
	}
	globalMap.put("tFileInputXML_2_NB_LINE",nb_line_tFileInputXML_2);

	

 

ok_Hash.put("tFileInputXML_2", true);
end_Hash.put("tFileInputXML_2", System.currentTimeMillis());




/**
 * [tFileInputXML_2 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tOracleConnection_2Process(globalMap);



/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_2", false);
		start_Hash.put("tOracleConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_2";
	
	
		int tos_count_tOracleConnection_2 = 0;
		
	

	
        String url_tOracleConnection_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_2", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_2 = context.db_destino_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_2 = context.db_destino_Password; 
		String dbPwd_tOracleConnection_2 = decryptedPassword_tOracleConnection_2;
	
	
	java.sql.Connection conn_tOracleConnection_2 = null;
	
		
			String driverClass_tOracleConnection_2 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_2 = java.lang.Class.forName(driverClass_tOracleConnection_2);
			globalMap.put("driverClass_tOracleConnection_2", driverClass_tOracleConnection_2);
		
			java.util.Properties atnParamsPrope_tOracleConnection_2 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_2.put("user",dbUser_tOracleConnection_2);
			    atnParamsPrope_tOracleConnection_2.put("password",dbPwd_tOracleConnection_2);
			if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                atnParamsPrope_tOracleConnection_2.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_2 = java.sql.DriverManager.getConnection(url_tOracleConnection_2, atnParamsPrope_tOracleConnection_2);

		globalMap.put("conn_tOracleConnection_2", conn_tOracleConnection_2);
	if (null != conn_tOracleConnection_2) {
		
			conn_tOracleConnection_2.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_2",context.db_destino_Server);
        globalMap.put("port_" + "tOracleConnection_2",context.db_destino_Port);
        globalMap.put("dbname_" + "tOracleConnection_2",context.db_destino_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_2", context.db_destino_Schema);
	globalMap.put("username_" + "tOracleConnection_2",context.db_destino_Login);
	globalMap.put("password_" + "tOracleConnection_2",dbPwd_tOracleConnection_2);

 



/**
 * [tOracleConnection_2 begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 


	tos_count_tOracleConnection_2++;

/**
 * [tOracleConnection_2 main ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_2 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 

ok_Hash.put("tOracleConnection_2", true);
end_Hash.put("tOracleConnection_2", System.currentTimeMillis());




/**
 * [tOracleConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row3Struct row5 = row3;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	
	String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("moment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("root_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("father_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("project");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("context");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("priority");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("code");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row3.type = lcm.getType();
		row3.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row3.priority = lcm.getPriority();
		row3.message = lcm.getMessage();
		row3.code = lcm.getCode();
		
		row3.moment = java.util.Calendar.getInstance().getTime();
	
    	row3.pid = pid;
		row3.root_pid = rootPid;
		row3.father_pid = fatherPid;
	
    	row3.project = projectName;
    	row3.job = jobName;
    	row3.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row3.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row3.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 
     row5 = row3;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
              					String classpath_tRunJob_1_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xpathutil-1.0.0.jar;../lib/slf4j-api-1.7.34.jar;../lib/crypto-utils-7.1.16.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/dom4j-2.1.3.jar;../lib/jaxen-1.1.6.jar;mail_1_3.jar;";
              					
              					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5), true);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "rep_inicio_f5.mail_1_3.Mail");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		      					String classpath_tRunJob_1_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xpathutil-1.0.0.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/../lib/jaxen-1.1.6.jar:$ROOT_PATH/mail_1_3.jar:";
		      					
		      					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "rep_inicio_f5.mail_1_3.Mail");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_1 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_1.put("BODEGA", context.BODEGA);
                    paraList_tRunJob_1.add("--context_type " + "BODEGA" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ESTADO_EXEC", context.ESTADO_EXEC);
                    paraList_tRunJob_1.add("--context_type " + "ESTADO_EXEC" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FECHA_EJECUCION", context.FECHA_EJECUCION);
                    paraList_tRunJob_1.add("--context_type " + "FECHA_EJECUCION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("HORA_FINAL", context.HORA_FINAL);
                    paraList_tRunJob_1.add("--context_type " + "HORA_FINAL" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("HORA_INICIO", context.HORA_INICIO);
                    paraList_tRunJob_1.add("--context_type " + "HORA_INICIO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("JOB", context.JOB);
                    paraList_tRunJob_1.add("--context_type " + "JOB" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("LOGS_ERROR", context.LOGS_ERROR);
                    paraList_tRunJob_1.add("--context_type " + "LOGS_ERROR" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("LOGS_EXECUTION", context.LOGS_EXECUTION);
                    paraList_tRunJob_1.add("--context_type " + "LOGS_EXECUTION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ORIGEN", context.ORIGEN);
                    paraList_tRunJob_1.add("--context_type " + "ORIGEN" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ACTUALIZACION_TOTAL", context.ACTUALIZACION_TOTAL);
                    paraList_tRunJob_1.add("--context_type " + "ACTUALIZACION_TOTAL" + "=" + "id_Boolean");
                    parentContextMap_tRunJob_1.put("CONDICION", context.CONDICION);
                    paraList_tRunJob_1.add("--context_type " + "CONDICION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("CONDICION_AUDITORES", context.CONDICION_AUDITORES);
                    paraList_tRunJob_1.add("--context_type " + "CONDICION_AUDITORES" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("CONDICION_INDICADORES", context.CONDICION_INDICADORES);
                    paraList_tRunJob_1.add("--context_type " + "CONDICION_INDICADORES" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("CONDICION2", context.CONDICION2);
                    paraList_tRunJob_1.add("--context_type " + "CONDICION2" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("DEJECUCION", context.DEJECUCION);
                    paraList_tRunJob_1.add("--context_type " + "DEJECUCION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FANTERIOR", context.FANTERIOR);
                    paraList_tRunJob_1.add("--context_type " + "FANTERIOR" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FEJECUCION", context.FEJECUCION);
                    paraList_tRunJob_1.add("--context_type " + "FEJECUCION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_AdditionalParams", context.db_destino_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Login", context.db_destino_Login);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Login" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Password", context.db_destino_Password);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("db_destino_Port", context.db_destino_Port);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Schema", context.db_destino_Schema);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Server", context.db_destino_Server);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Server" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_ServiceName", context.db_destino_ServiceName);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_ServiceName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_AdditionalParams", context.db_origen_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Login", context.db_origen_Login);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Login" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Password", context.db_origen_Password);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("db_origen_Port", context.db_origen_Port);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Schema", context.db_origen_Schema);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Server", context.db_origen_Server);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Server" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_ServiceName", context.db_origen_ServiceName);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_ServiceName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("CONDITION", context.CONDITION);
                    paraList_tRunJob_1.add("--context_type " + "CONDITION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("CONDITION_PRINCIPAL", context.CONDITION_PRINCIPAL);
                    paraList_tRunJob_1.add("--context_type " + "CONDITION_PRINCIPAL" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ERROR", context.ERROR);
                    paraList_tRunJob_1.add("--context_type " + "ERROR" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ESTADO", context.ESTADO);
                    paraList_tRunJob_1.add("--context_type " + "ESTADO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FECHA_TERMINACION", context.FECHA_TERMINACION);
                    paraList_tRunJob_1.add("--context_type " + "FECHA_TERMINACION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ID_SOLICITUD", context.ID_SOLICITUD);
                    paraList_tRunJob_1.add("--context_type " + "ID_SOLICITUD" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("LAST_DAYS", context.LAST_DAYS);
                    paraList_tRunJob_1.add("--context_type " + "LAST_DAYS" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("LOGS_STAT", context.LOGS_STAT);
                    paraList_tRunJob_1.add("--context_type " + "LOGS_STAT" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("RutaSistema", context.RutaSistema);
                    paraList_tRunJob_1.add("--context_type " + "RutaSistema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_Message", context.mail_Message);
                    paraList_tRunJob_1.add("--context_type " + "mail_Message" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_Password", context.mail_Password);
                    paraList_tRunJob_1.add("--context_type " + "mail_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("mail_Sendername", context.mail_Sendername);
                    paraList_tRunJob_1.add("--context_type " + "mail_Sendername" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_SMTP_Host", context.mail_SMTP_Host);
                    paraList_tRunJob_1.add("--context_type " + "mail_SMTP_Host" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_SMTP_Port", context.mail_SMTP_Port);
                    paraList_tRunJob_1.add("--context_type " + "mail_SMTP_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_Subject", context.mail_Subject);
                    paraList_tRunJob_1.add("--context_type " + "mail_Subject" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_To", context.mail_To);
                    paraList_tRunJob_1.add("--context_type " + "mail_To" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_User", context.mail_User);
                    paraList_tRunJob_1.add("--context_type " + "mail_User" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_1().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
					
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = row5.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("project", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origin=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origin=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origin=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origin", obj_tRunJob_1);
	
		obj_tRunJob_1 = row5.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_destino", obj_tRunJob_1);
	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;
		
		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join();
            error_tRunJob_1.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


context.ESTADO_EXEC = "Fail";
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


//Guarda en variables de contexto la hora final de ejecución del etl, actualiza el estado a succes y los imprime en consola

context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");


System.out.println("- End: "+context.HORA_FINAL );
System.out.println("- Estado: "+context.ESTADO_EXEC );
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tOracleClose_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tOracleClose_2Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_2", false);
		start_Hash.put("tOracleClose_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_2";
	
	
		int tos_count_tOracleClose_2 = 0;
		

 



/**
 * [tOracleClose_2 begin ] stop
 */
	
	/**
	 * [tOracleClose_2 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

	java.sql.Connection conn_tOracleClose_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
	
	if(conn_tOracleClose_2 != null && !conn_tOracleClose_2.isClosed())
	{
		
			conn_tOracleClose_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_2++;

/**
 * [tOracleClose_2 main ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_2 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 

ok_Hash.put("tOracleClose_2", true);
end_Hash.put("tOracleClose_2", System.currentTimeMillis());




/**
 * [tOracleClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_INICIO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_FINAL");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ESTADO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("JOBS");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row4.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row4.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row4.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row4.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row4.JOBS = context.JOB;
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row4.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.ESTADO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row4.JOBS != null) {
                        sb_tFileOutputDelimited_2.append(
                            row4.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


context.FEJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.DEJECUCION = TalendDate.getDate("DD");
//context.FANTERIOR = TalendDate.formatDate("dd/MM/YYYY",TalendDate.addDate(TalendDate.getCurrentDate(),-1,"DD"));

/*Para pruebas*/

//context.ACTUALIZACION_TOTAL = true;
//context.FEJECUCION = "01/09/2019";
context.DEJECUCION = "01";
context.FANTERIOR = "31/10/2019";


if ( context.ACTUALIZACION_TOTAL ) {
	context.CONDICION = " ";
	context.CONDICION2 = " ";
	context.CONDICION_AUDITORES = " ";
	context.CONDICION_INDICADORES = " ";
	
} else {
	context.CONDICION = " AND ( TRUNC( HA.FFETAPA, 'MONTH') = TRUNC( TO_DATE ('"+context.FANTERIOR+"', 'DD/MM/YYYY' ) , 'MONTH')) ";
	context.CONDICION2 = " AND ( TRUNC( HFA.FECHA, 'MONTH' ) = TRUNC ( TO_DATE ( '"+context.FANTERIOR+"', 'DD/MM/YYYY'), 'MONTH') OR TRUNC( REC.FRADICADO, 'MONTH' ) = TRUNC ( TO_DATE ( '"+context.FANTERIOR+"', 'DD/MM/YYYY'), 'MONTH') )  ";
	context.CONDICION_AUDITORES = " AND ( TRUNC( AF.FECHA, 'MONTH' ) = TRUNC ( TO_DATE ( '"+context.FANTERIOR+"', 'DD/MM/YYYY'), 'MONTH') ) ";
	context.CONDICION_INDICADORES = " AND ( TRUNC( HA.FFETAPA, 'MONTH') = TRUNC( TO_DATE ( '"+context.FANTERIOR+"', 'DD/MM/YYYY'), 'MONTH') ) ";
}

System.out.println("\nFecha de ejecución: "+context.FEJECUCION);
System.out.println("\nDía de ejecución: "+context.DEJECUCION);
System.out.println("\nCondición: "+context.CONDICION);
System.out.println("\nCondición2: "+context.CONDICION2);
System.out.println("\nCondición auditores: "+context.CONDICION_AUDITORES);
System.out.println("\nCondición indicadores: "+context.CONDICION_INDICADORES);

 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

   			if (context.ACTUALIZACION_TOTAL || context.DEJECUCION.equals("01")) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tOracleInput_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class ActualizaStruct implements routines.system.IPersistableRow<ActualizaStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return true;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal CODIGO;

				public BigDecimal getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 0;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return "";
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal TIPO;

				public BigDecimal getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 0;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return "";
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public String NUMCONTRATO;

				public String getNUMCONTRATO () {
					return this.NUMCONTRATO;
				}

				public Boolean NUMCONTRATOIsNullable(){
				    return true;
				}
				public Boolean NUMCONTRATOIsKey(){
				    return false;
				}
				public Integer NUMCONTRATOLength(){
				    return 100;
				}
				public Integer NUMCONTRATOPrecision(){
				    return 0;
				}
				public String NUMCONTRATODefault(){
				
					return null;
				
				}
				public String NUMCONTRATOComment(){
				
				    return "";
				
				}
				public String NUMCONTRATOPattern(){
				
					return "";
				
				}
				public String NUMCONTRATOOriginalDbColumnName(){
				
					return "NUMCONTRATO";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return true;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return true;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public BigDecimal PADRE_ID;

				public BigDecimal getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return "";
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CONTRATOS_ID == null) ? 0 : this.CONTRATOS_ID.hashCode());
					
						result = prime * result + ((this.CLASE == null) ? 0 : this.CLASE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ActualizaStruct other = (ActualizaStruct) obj;
		
						if (this.CONTRATOS_ID == null) {
							if (other.CONTRATOS_ID != null)
								return false;
						
						} else if (!this.CONTRATOS_ID.equals(other.CONTRATOS_ID))
						
							return false;
					
						if (this.CLASE == null) {
							if (other.CLASE != null)
								return false;
						
						} else if (!this.CLASE.equals(other.CLASE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ActualizaStruct other) {

		other.UORG_ID = this.UORG_ID;
	            other.IPS_ID = this.IPS_ID;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            other.VALOR = this.VALOR;
	            other.TIPO = this.TIPO;
	            other.NUMCONTRATO = this.NUMCONTRATO;
	            other.CONTRATOS_ID = this.CONTRATOS_ID;
	            other.CLASE = this.CLASE;
	            other.PADRE_ID = this.PADRE_ID;
	            
	}

	public void copyKeysDataTo(ActualizaStruct other) {

		other.CONTRATOS_ID = this.CONTRATOS_ID;
	            	other.CLASE = this.CLASE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.CODIGO = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NUMCONTRATO = readString(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.CODIGO = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NUMCONTRATO = readString(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NUMCONTRATO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NUMCONTRATO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TIPO="+String.valueOf(TIPO));
		sb.append(",NUMCONTRATO="+NUMCONTRATO);
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ActualizaStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CONTRATOS_ID, other.CONTRATOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CLASE, other.CLASE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class InsertaStruct implements routines.system.IPersistableRow<InsertaStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return true;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal CODIGO;

				public BigDecimal getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 0;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return "";
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal TIPO;

				public BigDecimal getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 0;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return "";
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public String NUMCONTRATO;

				public String getNUMCONTRATO () {
					return this.NUMCONTRATO;
				}

				public Boolean NUMCONTRATOIsNullable(){
				    return true;
				}
				public Boolean NUMCONTRATOIsKey(){
				    return false;
				}
				public Integer NUMCONTRATOLength(){
				    return 100;
				}
				public Integer NUMCONTRATOPrecision(){
				    return 0;
				}
				public String NUMCONTRATODefault(){
				
					return null;
				
				}
				public String NUMCONTRATOComment(){
				
				    return "";
				
				}
				public String NUMCONTRATOPattern(){
				
					return "";
				
				}
				public String NUMCONTRATOOriginalDbColumnName(){
				
					return "NUMCONTRATO";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public BigDecimal PADRE_ID;

				public BigDecimal getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return "";
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.CODIGO = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NUMCONTRATO = readString(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.CODIGO = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NUMCONTRATO = readString(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NUMCONTRATO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NUMCONTRATO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TIPO="+String.valueOf(TIPO));
		sb.append(",NUMCONTRATO="+NUMCONTRATO);
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(InsertaStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return true;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal CODIGO;

				public BigDecimal getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 0;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return "";
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal TIPO;

				public BigDecimal getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 0;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return "";
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public String NUMCONTRATO;

				public String getNUMCONTRATO () {
					return this.NUMCONTRATO;
				}

				public Boolean NUMCONTRATOIsNullable(){
				    return true;
				}
				public Boolean NUMCONTRATOIsKey(){
				    return false;
				}
				public Integer NUMCONTRATOLength(){
				    return 100;
				}
				public Integer NUMCONTRATOPrecision(){
				    return 0;
				}
				public String NUMCONTRATODefault(){
				
					return null;
				
				}
				public String NUMCONTRATOComment(){
				
				    return "";
				
				}
				public String NUMCONTRATOPattern(){
				
					return "";
				
				}
				public String NUMCONTRATOOriginalDbColumnName(){
				
					return "NUMCONTRATO";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public BigDecimal PADRE_ID;

				public BigDecimal getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return "";
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.CODIGO = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NUMCONTRATO = readString(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.CODIGO = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NUMCONTRATO = readString(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NUMCONTRATO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NUMCONTRATO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TIPO="+String.valueOf(TIPO));
		sb.append(",NUMCONTRATO="+NUMCONTRATO);
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_1Struct implements routines.system.IPersistableRow<after_tOracleInput_1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return true;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal CODIGO;

				public BigDecimal getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 0;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return "";
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal TIPO;

				public BigDecimal getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 0;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return "";
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public String NUMCONTRATO;

				public String getNUMCONTRATO () {
					return this.NUMCONTRATO;
				}

				public Boolean NUMCONTRATOIsNullable(){
				    return true;
				}
				public Boolean NUMCONTRATOIsKey(){
				    return false;
				}
				public Integer NUMCONTRATOLength(){
				    return 100;
				}
				public Integer NUMCONTRATOPrecision(){
				    return 0;
				}
				public String NUMCONTRATODefault(){
				
					return null;
				
				}
				public String NUMCONTRATOComment(){
				
				    return "";
				
				}
				public String NUMCONTRATOPattern(){
				
					return "";
				
				}
				public String NUMCONTRATOOriginalDbColumnName(){
				
					return "NUMCONTRATO";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public BigDecimal PADRE_ID;

				public BigDecimal getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return "";
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.CODIGO = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NUMCONTRATO = readString(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.CODIGO = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NUMCONTRATO = readString(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NUMCONTRATO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NUMCONTRATO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TIPO="+String.valueOf(TIPO));
		sb.append(",NUMCONTRATO="+NUMCONTRATO);
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_2Process(globalMap);
		tOracleInput_3Process(globalMap);

		row6Struct row6 = new row6Struct();
ActualizaStruct Actualiza = new ActualizaStruct();
InsertaStruct Inserta = new InsertaStruct();





	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Actualiza");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






        int updateKeyCount_tOracleOutput_1 = 2;
        if(updateKeyCount_tOracleOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_1 == 10 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
                    String driverClass_tOracleOutput_1 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_1);
                String url_tOracleOutput_1 = null;
                    url_tOracleOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_1 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_1 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_1 = decryptedPassword_tOracleOutput_1;
                dbschema_tOracleOutput_1 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_1 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_1.put("user",dbUser_tOracleOutput_1);
                    atnParamsPrope_tOracleOutput_1.put("password",dbPwd_tOracleOutput_1);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_1.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_1 = java.sql.DriverManager.getConnection(url_tOracleOutput_1, atnParamsPrope_tOracleOutput_1);
        resourceMap.put("conn_tOracleOutput_1", conn_tOracleOutput_1);
            conn_tOracleOutput_1.setAutoCommit(false);
            int commitEvery_tOracleOutput_1 = 1000;
            int commitCounter_tOracleOutput_1 = 0;
        int batchSize_tOracleOutput_1 = 1000;
        int batchSizeCounter_tOracleOutput_1=0;
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("BACM_TPAGOS");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("BACM_TPAGOS");
        }
                String update_tOracleOutput_1 = "UPDATE " + tableName_tOracleOutput_1 + " SET UORG_ID = ?,IPS_ID = ?,NOMBRE = ?,CODIGO = ?,VALOR = ?,TIPO = ?,NUMCONTRATO = ?,PADRE_ID = ? WHERE CONTRATOS_ID = ? AND CLASE = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(update_tOracleOutput_1);
                resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */




	
	/**
	 * [tOracleOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_2", false);
		start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta");
					}
				
		int tos_count_tOracleOutput_2 = 0;
		






    
    int nb_line_tOracleOutput_2 = 0;
    int nb_line_update_tOracleOutput_2 = 0;
    int nb_line_inserted_tOracleOutput_2 = 0;
    int nb_line_deleted_tOracleOutput_2 = 0;
    int nb_line_rejected_tOracleOutput_2 = 0;

    int tmp_batchUpdateCount_tOracleOutput_2 = 0;

    int deletedCount_tOracleOutput_2=0;
    int updatedCount_tOracleOutput_2=0;
    int insertedCount_tOracleOutput_2=0;
    int rowsToCommitCount_tOracleOutput_2=0;
    int rejectedCount_tOracleOutput_2=0;

    boolean whetherReject_tOracleOutput_2 = false;

    java.sql.Connection conn_tOracleOutput_2 = null;

    //optional table
    String dbschema_tOracleOutput_2 = null;
    String tableName_tOracleOutput_2 = null;
                    String driverClass_tOracleOutput_2 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_2);
                String url_tOracleOutput_2 = null;
                    url_tOracleOutput_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_2 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_2 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_2 = decryptedPassword_tOracleOutput_2;
                dbschema_tOracleOutput_2 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_2 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_2.put("user",dbUser_tOracleOutput_2);
                    atnParamsPrope_tOracleOutput_2.put("password",dbPwd_tOracleOutput_2);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_2.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_2 = java.sql.DriverManager.getConnection(url_tOracleOutput_2, atnParamsPrope_tOracleOutput_2);
        resourceMap.put("conn_tOracleOutput_2", conn_tOracleOutput_2);
            conn_tOracleOutput_2.setAutoCommit(false);
            int commitEvery_tOracleOutput_2 = 1000;
            int commitCounter_tOracleOutput_2 = 0;
        int batchSize_tOracleOutput_2 = 1000;
        int batchSizeCounter_tOracleOutput_2=0;
        int count_tOracleOutput_2=0;

        if(dbschema_tOracleOutput_2 == null || dbschema_tOracleOutput_2.trim().length() == 0) {
            tableName_tOracleOutput_2 = ("BACM_TPAGOS");
        } else {
            tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "." + ("BACM_TPAGOS");
        }
                String insert_tOracleOutput_2 = "INSERT INTO " + tableName_tOracleOutput_2 + " (UORG_ID,IPS_ID,NOMBRE,CODIGO,VALOR,TIPO,NUMCONTRATO,CONTRATOS_ID,CLASE,PADRE_ID) VALUES (?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(insert_tOracleOutput_2);
                        resourceMap.put("pstmt_tOracleOutput_2", pstmt_tOracleOutput_2);





 



/**
 * [tOracleOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
ActualizaStruct Actualiza_tmp = new ActualizaStruct();
InsertaStruct Inserta_tmp = new InsertaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_1.setFetchSize(1000);


		    String dbquery_tOracleInput_1 = "SELECT    CT.UORG_ID\n        , CT.IPS_ID  \n        , CT.OBJETO AS NOMBRE \n        , CT.CODIGO \n        , CT.VALOR\n"
+"        , 1 AS TIPO\n        , CT.NUMCONTRATO\n        , CT.ID AS CONTRATOS_ID\n        , 1 AS CLASE\n        , CT.PADRE"
+"_ID                \nFROM GEN_CONTRATOS CT \nWHERE CT.ESTREGISTRO_ID = 1\nUNION\nSELECT    NULL AS UORG_ID\n       ,  MC"
+"T.PRESTADOR_ID AS IPS_ID\n       ,  MCT.DESCRIPCIONI AS NOMBRE\n       ,  NULL AS CODIGO \n       ,  NULL AS VALOR\n    "
+"   ,  1 AS TIPO\n       ,  MCT.CONTRATO AS NUMCONTRATO\n       ,  MCT.ID AS CONTRATOS_ID\n       ,  2 AS CLASE \n       "
+",  NULL AS PADRE_ID\nFROM MED_CONTRATOS MCT\nWHERE MCT.ESTREGISTRO_ID = 1 \nUNION\nSELECT    NULL AS UORG_ID\n        , "
+"NULL AS IPS_ID\n        , 'Pago por resolución' AS NOMBRE\n        , 0 AS CODIGO\n        , NULL AS VALOR\n        , 2 A"
+"S TIPO\n        , NULL AS NUMCONTRATO\n        , 0 AS CONTRATOS_ID\n        , 3 AS CLASE\n        , NULL AS PADRE_ID\nFR"
+"OM DUAL";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row6.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row6.UORG_ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
						row6.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row6.IPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(2) != null) {
						row6.IPS_ID = rs_tOracleInput_1.getBigDecimal(2);
					} else {
				
						row6.IPS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row6.NOMBRE = null;
							} else {
	                         		
        	row6.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 4) {
								row6.CODIGO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(4) != null) {
						row6.CODIGO = rs_tOracleInput_1.getBigDecimal(4);
					} else {
				
						row6.CODIGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 5) {
								row6.VALOR = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(5) != null) {
						row6.VALOR = rs_tOracleInput_1.getBigDecimal(5);
					} else {
				
						row6.VALOR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 6) {
								row6.TIPO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(6) != null) {
						row6.TIPO = rs_tOracleInput_1.getBigDecimal(6);
					} else {
				
						row6.TIPO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 7) {
								row6.NUMCONTRATO = null;
							} else {
	                         		
        	row6.NUMCONTRATO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 8) {
								row6.CONTRATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(8) != null) {
						row6.CONTRATOS_ID = rs_tOracleInput_1.getBigDecimal(8);
					} else {
				
						row6.CONTRATOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 9) {
								row6.CLASE = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(9) != null) {
						row6.CLASE = rs_tOracleInput_1.getBigDecimal(9);
					} else {
				
						row6.CLASE = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 10) {
								row6.PADRE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(10) != null) {
						row6.PADRE_ID = rs_tOracleInput_1.getBigDecimal(10);
					} else {
				
						row6.PADRE_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row7Struct row7 = null;
					
						row8Struct row8 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row7HashKey.UORG_ID = row6.UORG_ID ;
                        		    		
                        		    		    row7HashKey.IPS_ID = row6.IPS_ID ;
                        		    		
                        		    		    row7HashKey.NOMBRE = row6.NOMBRE ;
                        		    		
                        		    		    row7HashKey.CODIGO = row6.CODIGO ;
                        		    		
                        		    		    row7HashKey.VALOR = row6.VALOR ;
                        		    		
                        		    		    row7HashKey.TIPO = row6.TIPO ;
                        		    		
                        		    		    row7HashKey.NUMCONTRATO = row6.NUMCONTRATO ;
                        		    		
                        		    		    row7HashKey.CONTRATOS_ID = row6.CONTRATOS_ID ;
                        		    		
                        		    		    row7HashKey.CLASE = row6.CLASE ;
                        		    		
                        		    		    row7HashKey.PADRE_ID = row6.PADRE_ID ;
                        		    		

								
		                        	row7HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row7 != null && tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.UORG_ID = '" + row7HashKey.UORG_ID + "', row7.IPS_ID = '" + row7HashKey.IPS_ID + "', row7.NOMBRE = '" + row7HashKey.NOMBRE + "', row7.CODIGO = '" + row7HashKey.CODIGO + "', row7.VALOR = '" + row7HashKey.VALOR + "', row7.TIPO = '" + row7HashKey.TIPO + "', row7.NUMCONTRATO = '" + row7HashKey.NUMCONTRATO + "', row7.CONTRATOS_ID = '" + row7HashKey.CONTRATOS_ID + "', row7.CLASE = '" + row7HashKey.CLASE + "', row7.PADRE_ID = '" + row7HashKey.PADRE_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								 
							
							
								if (tHash_Lookup_row7 !=null && tHash_Lookup_row7.hasNext()) { // G 099
								
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							
							
								} // G 099
							
							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row8HashKey.CONTRATOS_ID = row6.CONTRATOS_ID ;
                        		    		
                        		    		    row8HashKey.CLASE = row6.CLASE ;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row8 != null && tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.CONTRATOS_ID = '" + row8HashKey.CONTRATOS_ID + "', row8.CLASE = '" + row8HashKey.CLASE + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								 
							
							
								if (tHash_Lookup_row8 !=null && tHash_Lookup_row8.hasNext()) { // G 099
								
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							
							
								} // G 099
							
							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

Actualiza = null;
Inserta = null;


// # Output table : 'Actualiza'
// # Filter conditions 
if( 

row8.CONTRATOS_ID != null &&  row7.CONTRATOS_ID ==null

 ) {
Actualiza_tmp.UORG_ID = row6.UORG_ID ;
Actualiza_tmp.IPS_ID = row6.IPS_ID ;
Actualiza_tmp.NOMBRE = row6.NOMBRE ;
Actualiza_tmp.CODIGO = row6.CODIGO ;
Actualiza_tmp.VALOR = row6.VALOR ;
Actualiza_tmp.TIPO = row6.TIPO ;
Actualiza_tmp.NUMCONTRATO = row6.NUMCONTRATO ;
Actualiza_tmp.CONTRATOS_ID = row6.CONTRATOS_ID ;
Actualiza_tmp.CLASE = row6.CLASE ;
Actualiza_tmp.PADRE_ID = row6.PADRE_ID ;
Actualiza = Actualiza_tmp;
} // closing filter/reject

// # Output table : 'Inserta'
// # Filter conditions 
if( 

row8.CONTRATOS_ID == null

 ) {
Inserta_tmp.UORG_ID = row6.UORG_ID ;
Inserta_tmp.IPS_ID = row6.IPS_ID ;
Inserta_tmp.NOMBRE = row6.NOMBRE ;
Inserta_tmp.CODIGO = row6.CODIGO ;
Inserta_tmp.VALOR = row6.VALOR ;
Inserta_tmp.TIPO = row6.TIPO ;
Inserta_tmp.NUMCONTRATO = row6.NUMCONTRATO ;
Inserta_tmp.CONTRATOS_ID = row6.CONTRATOS_ID ;
Inserta_tmp.CLASE = row6.CLASE ;
Inserta_tmp.PADRE_ID = row6.PADRE_ID ;
Inserta = Inserta_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "Actualiza"
if(Actualiza != null) { 



	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Actualiza"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                    pstmt_tOracleOutput_1.setBigDecimal(1, Actualiza.UORG_ID);

                    pstmt_tOracleOutput_1.setBigDecimal(2, Actualiza.IPS_ID);

                    if(Actualiza.NOMBRE == null) {
pstmt_tOracleOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(3, Actualiza.NOMBRE);
}

                    pstmt_tOracleOutput_1.setBigDecimal(4, Actualiza.CODIGO);

                    pstmt_tOracleOutput_1.setBigDecimal(5, Actualiza.VALOR);

                    pstmt_tOracleOutput_1.setBigDecimal(6, Actualiza.TIPO);

                    if(Actualiza.NUMCONTRATO == null) {
pstmt_tOracleOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(7, Actualiza.NUMCONTRATO);
}

                    pstmt_tOracleOutput_1.setBigDecimal(8, Actualiza.PADRE_ID);


                    pstmt_tOracleOutput_1.setBigDecimal(9 + count_tOracleOutput_1, Actualiza.CONTRATOS_ID);


                    pstmt_tOracleOutput_1.setBigDecimal(10 + count_tOracleOutput_1, Actualiza.CLASE);

                pstmt_tOracleOutput_1.addBatch();
                nb_line_tOracleOutput_1++;
                batchSizeCounter_tOracleOutput_1++;
            if (batchSize_tOracleOutput_1 > 0 &&  batchSize_tOracleOutput_1 <= batchSizeCounter_tOracleOutput_1) {
                try {
                    pstmt_tOracleOutput_1.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
			        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
			    	String errormessage_tOracleOutput_1;
					if (ne_tOracleOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
						errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
					}else{
						errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_1);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
                    updatedCount_tOracleOutput_1
                += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                batchSizeCounter_tOracleOutput_1 = 0;
            }
                commitCounter_tOracleOutput_1++;
                if(commitEvery_tOracleOutput_1 <= commitCounter_tOracleOutput_1) {
                    if(batchSizeCounter_tOracleOutput_1 > 0) {
                        try {
                            pstmt_tOracleOutput_1.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
					        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
					    	String errormessage_tOracleOutput_1;
							if (ne_tOracleOutput_1 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
								errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
							}else{
								errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_1);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
                            updatedCount_tOracleOutput_1
                        += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                        rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    }
                    conn_tOracleOutput_1.commit();
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_1 = 0;
                    }
                    commitCounter_tOracleOutput_1=0;
                    	batchSizeCounter_tOracleOutput_1=0;
                }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */

} // End of branch "Actualiza"




// Start of branch "Inserta"
if(Inserta != null) { 



	
	/**
	 * [tOracleOutput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta"
						
						);
					}
					



        whetherReject_tOracleOutput_2 = false;
                        pstmt_tOracleOutput_2.setBigDecimal(1, Inserta.UORG_ID);

                        pstmt_tOracleOutput_2.setBigDecimal(2, Inserta.IPS_ID);

                        if(Inserta.NOMBRE == null) {
pstmt_tOracleOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(3, Inserta.NOMBRE);
}

                        pstmt_tOracleOutput_2.setBigDecimal(4, Inserta.CODIGO);

                        pstmt_tOracleOutput_2.setBigDecimal(5, Inserta.VALOR);

                        pstmt_tOracleOutput_2.setBigDecimal(6, Inserta.TIPO);

                        if(Inserta.NUMCONTRATO == null) {
pstmt_tOracleOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(7, Inserta.NUMCONTRATO);
}

                        pstmt_tOracleOutput_2.setBigDecimal(8, Inserta.CONTRATOS_ID);

                        pstmt_tOracleOutput_2.setBigDecimal(9, Inserta.CLASE);

                        pstmt_tOracleOutput_2.setBigDecimal(10, Inserta.PADRE_ID);

                pstmt_tOracleOutput_2.addBatch();
                nb_line_tOracleOutput_2++;
                batchSizeCounter_tOracleOutput_2++;
            if (batchSize_tOracleOutput_2 > 0 &&  batchSize_tOracleOutput_2 <= batchSizeCounter_tOracleOutput_2) {
                try {
                    pstmt_tOracleOutput_2.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
			        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
			    	String errormessage_tOracleOutput_2;
					if (ne_tOracleOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
						errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
					}else{
						errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_2);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
                    insertedCount_tOracleOutput_2
                += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                batchSizeCounter_tOracleOutput_2 = 0;
            }
                commitCounter_tOracleOutput_2++;
                if(commitEvery_tOracleOutput_2 <= commitCounter_tOracleOutput_2) {
                    if(batchSizeCounter_tOracleOutput_2 > 0) {
                        try {
                            pstmt_tOracleOutput_2.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
					        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
					    	String errormessage_tOracleOutput_2;
							if (ne_tOracleOutput_2 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
								errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
							}else{
								errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_2);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
                            insertedCount_tOracleOutput_2
                        += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                        rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_2 != 0){
                    	
                    }
                    conn_tOracleOutput_2.commit();
                    if(rowsToCommitCount_tOracleOutput_2 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_2 = 0;
                    }
                    commitCounter_tOracleOutput_2=0;
                    	batchSizeCounter_tOracleOutput_2=0;
                }

 


	tos_count_tOracleOutput_2++;

/**
 * [tOracleOutput_2 main ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_end ] stop
 */

} // End of branch "Inserta"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_1 > 0) {
            try {
            	if (pstmt_tOracleOutput_1 != null) {
					
					pstmt_tOracleOutput_1.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
		        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
		    	String errormessage_tOracleOutput_1;
				if (ne_tOracleOutput_1 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
					errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
				}else{
					errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_1);
            	
        	}
        	if (pstmt_tOracleOutput_1 != null) {
            	tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_1
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
				rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
            }
        }
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
		}
		conn_tOracleOutput_1.commit();
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
			rowsToCommitCount_tOracleOutput_1 = 0;
		}
		commitCounter_tOracleOutput_1 = 0;
		
		
		conn_tOracleOutput_1 .close();
		
		resourceMap.put("finish_tOracleOutput_1", true);
   	

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Actualiza");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */




	
	/**
	 * [tOracleOutput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_2 > 0) {
            try {
            	if (pstmt_tOracleOutput_2 != null) {
					
					pstmt_tOracleOutput_2.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
		        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
		    	String errormessage_tOracleOutput_2;
				if (ne_tOracleOutput_2 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
					errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
				}else{
					errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_2);
            	
        	}
        	if (pstmt_tOracleOutput_2 != null) {
            	tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_2
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
				rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
            }
        }
        if(pstmt_tOracleOutput_2 != null) {
			
				pstmt_tOracleOutput_2.close();
				resourceMap.remove("pstmt_tOracleOutput_2");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_2", true);
		if(commitCounter_tOracleOutput_2 > 0 && rowsToCommitCount_tOracleOutput_2 != 0) {
			
		}
		conn_tOracleOutput_2.commit();
		if(commitCounter_tOracleOutput_2 > 0 && rowsToCommitCount_tOracleOutput_2 != 0) {
			
			rowsToCommitCount_tOracleOutput_2 = 0;
		}
		commitCounter_tOracleOutput_2 = 0;
		
		
		conn_tOracleOutput_2 .close();
		
		resourceMap.put("finish_tOracleOutput_2", true);
   	

	
	nb_line_deleted_tOracleOutput_2=nb_line_deleted_tOracleOutput_2+ deletedCount_tOracleOutput_2;
	nb_line_update_tOracleOutput_2=nb_line_update_tOracleOutput_2 + updatedCount_tOracleOutput_2;
	nb_line_inserted_tOracleOutput_2=nb_line_inserted_tOracleOutput_2 + insertedCount_tOracleOutput_2;
	nb_line_rejected_tOracleOutput_2=nb_line_rejected_tOracleOutput_2 + rejectedCount_tOracleOutput_2;
	
        globalMap.put("tOracleOutput_2_NB_LINE",nb_line_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",nb_line_update_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_2", true);
end_Hash.put("tOracleOutput_2", System.currentTimeMillis());




/**
 * [tOracleOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tOracleInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_1") == null){
            java.sql.Connection ctn_tOracleOutput_1 = null;
            if((ctn_tOracleOutput_1 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_1")) != null){
                try {
                    ctn_tOracleOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_1) {
                    String errorMessage_tOracleOutput_1 = "failed to close the connection in tOracleOutput_1 :" + sqlEx_tOracleOutput_1.getMessage();
                    System.err.println(errorMessage_tOracleOutput_1);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */




	
	/**
	 * [tOracleOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_2 = null;
                if ((pstmtToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_2")) != null) {
                    pstmtToClose_tOracleOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_2") == null){
            java.sql.Connection ctn_tOracleOutput_2 = null;
            if((ctn_tOracleOutput_2 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_2")) != null){
                try {
                    ctn_tOracleOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_2) {
                    String errorMessage_tOracleOutput_2 = "failed to close the connection in tOracleOutput_2 :" + sqlEx_tOracleOutput_2.getMessage();
                    System.err.println(errorMessage_tOracleOutput_2);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return true;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal CODIGO;

				public BigDecimal getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 0;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return "";
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal TIPO;

				public BigDecimal getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 0;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return "";
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public String NUMCONTRATO;

				public String getNUMCONTRATO () {
					return this.NUMCONTRATO;
				}

				public Boolean NUMCONTRATOIsNullable(){
				    return true;
				}
				public Boolean NUMCONTRATOIsKey(){
				    return false;
				}
				public Integer NUMCONTRATOLength(){
				    return 50;
				}
				public Integer NUMCONTRATOPrecision(){
				    return 0;
				}
				public String NUMCONTRATODefault(){
				
					return null;
				
				}
				public String NUMCONTRATOComment(){
				
				    return "";
				
				}
				public String NUMCONTRATOPattern(){
				
					return "";
				
				}
				public String NUMCONTRATOOriginalDbColumnName(){
				
					return "NUMCONTRATO";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public BigDecimal PADRE_ID;

				public BigDecimal getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return "";
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.CODIGO = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NUMCONTRATO = readString(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.CODIGO = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NUMCONTRATO = readString(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NUMCONTRATO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NUMCONTRATO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TIPO="+String.valueOf(TIPO));
		sb.append(",NUMCONTRATO="+NUMCONTRATO);
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_ACM_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_4.setFetchSize(1000);


		    String dbquery_tOracleInput_4 = "SELECT   ID\n		, UORG_ID\n        , IPS_ID\n        , NOMBRE\n        , CODIGO \n        , VALOR\n        , TIPO\n     "
+"   , NUMCONTRATO\n        , CONTRATOS_ID\n        , CLASE \n        , PADRE_ID        \nFROM BACM_TPAGOS";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row9.ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row9.ID = rs_tOracleInput_4.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row9.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(2) != null) {
						row9.UORG_ID = rs_tOracleInput_4.getBigDecimal(2);
					} else {
				
						row9.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row9.IPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(3) != null) {
						row9.IPS_ID = rs_tOracleInput_4.getBigDecimal(3);
					} else {
				
						row9.IPS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 4) {
								row9.NOMBRE = null;
							} else {
	                         		
        	row9.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 5) {
								row9.CODIGO = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(5) != null) {
						row9.CODIGO = rs_tOracleInput_4.getBigDecimal(5);
					} else {
				
						row9.CODIGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 6) {
								row9.VALOR = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(6) != null) {
						row9.VALOR = rs_tOracleInput_4.getBigDecimal(6);
					} else {
				
						row9.VALOR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 7) {
								row9.TIPO = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(7) != null) {
						row9.TIPO = rs_tOracleInput_4.getBigDecimal(7);
					} else {
				
						row9.TIPO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 8) {
								row9.NUMCONTRATO = null;
							} else {
	                         		
        	row9.NUMCONTRATO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 9) {
								row9.CONTRATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(9) != null) {
						row9.CONTRATOS_ID = rs_tOracleInput_4.getBigDecimal(9);
					} else {
				
						row9.CONTRATOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 10) {
								row9.CLASE = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(10) != null) {
						row9.CLASE = rs_tOracleInput_4.getBigDecimal(10);
					} else {
				
						row9.CLASE = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 11) {
								row9.PADRE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(11) != null) {
						row9.PADRE_ID = rs_tOracleInput_4.getBigDecimal(11);
					} else {
				
						row9.PADRE_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					



    
		row9Struct oneRow_tHashOutput_1 = new row9Struct();
				
					oneRow_tHashOutput_1.ID = row9.ID;
					oneRow_tHashOutput_1.UORG_ID = row9.UORG_ID;
					oneRow_tHashOutput_1.IPS_ID = row9.IPS_ID;
					oneRow_tHashOutput_1.NOMBRE = row9.NOMBRE;
					oneRow_tHashOutput_1.CODIGO = row9.CODIGO;
					oneRow_tHashOutput_1.VALOR = row9.VALOR;
					oneRow_tHashOutput_1.TIPO = row9.TIPO;
					oneRow_tHashOutput_1.NUMCONTRATO = row9.NUMCONTRATO;
					oneRow_tHashOutput_1.CONTRATOS_ID = row9.CONTRATOS_ID;
					oneRow_tHashOutput_1.CLASE = row9.CLASE;
					oneRow_tHashOutput_1.PADRE_ID = row9.PADRE_ID;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tOracleInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_ACM_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_5.setFetchSize(1000);


		    String dbquery_tOracleInput_5 = "SELECT    ID \n        , FECHA\nFROM BGEN_TIEMPOS\nWHERE DIA = 1";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row10.ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row10.ID = rs_tOracleInput_5.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row10.FECHA = null;
							} else {
										
			row10.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_5, 2);
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					



    
		row10Struct oneRow_tHashOutput_2 = new row10Struct();
				
					oneRow_tHashOutput_2.ID = row10.ID;
					oneRow_tHashOutput_2.FECHA = row10.FECHA;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tOracleInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal VFACTURADO;

				public BigDecimal getVFACTURADO () {
					return this.VFACTURADO;
				}

				public Boolean VFACTURADOIsNullable(){
				    return true;
				}
				public Boolean VFACTURADOIsKey(){
				    return false;
				}
				public Integer VFACTURADOLength(){
				    return 0;
				}
				public Integer VFACTURADOPrecision(){
				    return 0;
				}
				public String VFACTURADODefault(){
				
					return "";
				
				}
				public String VFACTURADOComment(){
				
				    return "";
				
				}
				public String VFACTURADOPattern(){
				
					return "";
				
				}
				public String VFACTURADOOriginalDbColumnName(){
				
					return "VFACTURADO";
				
				}

				
			    public BigDecimal VPAGAR;

				public BigDecimal getVPAGAR () {
					return this.VPAGAR;
				}

				public Boolean VPAGARIsNullable(){
				    return true;
				}
				public Boolean VPAGARIsKey(){
				    return false;
				}
				public Integer VPAGARLength(){
				    return 0;
				}
				public Integer VPAGARPrecision(){
				    return 0;
				}
				public String VPAGARDefault(){
				
					return "";
				
				}
				public String VPAGARComment(){
				
				    return "";
				
				}
				public String VPAGARPattern(){
				
					return "";
				
				}
				public String VPAGAROriginalDbColumnName(){
				
					return "VPAGAR";
				
				}

				
			    public BigDecimal TRADICADO_ID;

				public BigDecimal getTRADICADO_ID () {
					return this.TRADICADO_ID;
				}

				public Boolean TRADICADO_IDIsNullable(){
				    return true;
				}
				public Boolean TRADICADO_IDIsKey(){
				    return false;
				}
				public Integer TRADICADO_IDLength(){
				    return null;
				}
				public Integer TRADICADO_IDPrecision(){
				    return null;
				}
				public String TRADICADO_IDDefault(){
				
					return null;
				
				}
				public String TRADICADO_IDComment(){
				
				    return "";
				
				}
				public String TRADICADO_IDPattern(){
				
					return "";
				
				}
				public String TRADICADO_IDOriginalDbColumnName(){
				
					return "TRADICADO_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
						this.TRADICADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
						this.TRADICADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VFACTURADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPAGAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRADICADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VFACTURADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPAGAR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TRADICADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",VFACTURADO="+String.valueOf(VFACTURADO));
		sb.append(",VPAGAR="+String.valueOf(VPAGAR));
		sb.append(",TRADICADO_ID="+String.valueOf(TRADICADO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal VFACTURADO;

				public BigDecimal getVFACTURADO () {
					return this.VFACTURADO;
				}

				public Boolean VFACTURADOIsNullable(){
				    return true;
				}
				public Boolean VFACTURADOIsKey(){
				    return false;
				}
				public Integer VFACTURADOLength(){
				    return 0;
				}
				public Integer VFACTURADOPrecision(){
				    return 0;
				}
				public String VFACTURADODefault(){
				
					return "";
				
				}
				public String VFACTURADOComment(){
				
				    return "";
				
				}
				public String VFACTURADOPattern(){
				
					return "";
				
				}
				public String VFACTURADOOriginalDbColumnName(){
				
					return "VFACTURADO";
				
				}

				
			    public BigDecimal VPAGAR;

				public BigDecimal getVPAGAR () {
					return this.VPAGAR;
				}

				public Boolean VPAGARIsNullable(){
				    return true;
				}
				public Boolean VPAGARIsKey(){
				    return false;
				}
				public Integer VPAGARLength(){
				    return 0;
				}
				public Integer VPAGARPrecision(){
				    return 0;
				}
				public String VPAGARDefault(){
				
					return "";
				
				}
				public String VPAGARComment(){
				
				    return "";
				
				}
				public String VPAGARPattern(){
				
					return "";
				
				}
				public String VPAGAROriginalDbColumnName(){
				
					return "VPAGAR";
				
				}

				
			    public BigDecimal TRADICADO_ID;

				public BigDecimal getTRADICADO_ID () {
					return this.TRADICADO_ID;
				}

				public Boolean TRADICADO_IDIsNullable(){
				    return true;
				}
				public Boolean TRADICADO_IDIsKey(){
				    return false;
				}
				public Integer TRADICADO_IDLength(){
				    return null;
				}
				public Integer TRADICADO_IDPrecision(){
				    return null;
				}
				public String TRADICADO_IDDefault(){
				
					return null;
				
				}
				public String TRADICADO_IDComment(){
				
				    return "";
				
				}
				public String TRADICADO_IDPattern(){
				
					return "";
				
				}
				public String TRADICADO_IDOriginalDbColumnName(){
				
					return "TRADICADO_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
						this.TRADICADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
						this.TRADICADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VFACTURADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPAGAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRADICADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VFACTURADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPAGAR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TRADICADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",VFACTURADO="+String.valueOf(VFACTURADO));
		sb.append(",VPAGAR="+String.valueOf(VPAGAR));
		sb.append(",TRADICADO_ID="+String.valueOf(TRADICADO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return false;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal VFACTURADO;

				public BigDecimal getVFACTURADO () {
					return this.VFACTURADO;
				}

				public Boolean VFACTURADOIsNullable(){
				    return true;
				}
				public Boolean VFACTURADOIsKey(){
				    return false;
				}
				public Integer VFACTURADOLength(){
				    return 0;
				}
				public Integer VFACTURADOPrecision(){
				    return 0;
				}
				public String VFACTURADODefault(){
				
					return "";
				
				}
				public String VFACTURADOComment(){
				
				    return "";
				
				}
				public String VFACTURADOPattern(){
				
					return "";
				
				}
				public String VFACTURADOOriginalDbColumnName(){
				
					return "VFACTURADO";
				
				}

				
			    public BigDecimal NCREDITO;

				public BigDecimal getNCREDITO () {
					return this.NCREDITO;
				}

				public Boolean NCREDITOIsNullable(){
				    return true;
				}
				public Boolean NCREDITOIsKey(){
				    return false;
				}
				public Integer NCREDITOLength(){
				    return 0;
				}
				public Integer NCREDITOPrecision(){
				    return 0;
				}
				public String NCREDITODefault(){
				
					return "";
				
				}
				public String NCREDITOComment(){
				
				    return "";
				
				}
				public String NCREDITOPattern(){
				
					return "";
				
				}
				public String NCREDITOOriginalDbColumnName(){
				
					return "NCREDITO";
				
				}

				
			    public BigDecimal NDEBITO;

				public BigDecimal getNDEBITO () {
					return this.NDEBITO;
				}

				public Boolean NDEBITOIsNullable(){
				    return true;
				}
				public Boolean NDEBITOIsKey(){
				    return false;
				}
				public Integer NDEBITOLength(){
				    return 0;
				}
				public Integer NDEBITOPrecision(){
				    return 0;
				}
				public String NDEBITODefault(){
				
					return "";
				
				}
				public String NDEBITOComment(){
				
				    return "";
				
				}
				public String NDEBITOPattern(){
				
					return "";
				
				}
				public String NDEBITOOriginalDbColumnName(){
				
					return "NDEBITO";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return 0;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return 0;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return 0;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return 0;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VPAGAR;

				public BigDecimal getVPAGAR () {
					return this.VPAGAR;
				}

				public Boolean VPAGARIsNullable(){
				    return true;
				}
				public Boolean VPAGARIsKey(){
				    return false;
				}
				public Integer VPAGARLength(){
				    return 0;
				}
				public Integer VPAGARPrecision(){
				    return 0;
				}
				public String VPAGARDefault(){
				
					return "";
				
				}
				public String VPAGARComment(){
				
				    return "";
				
				}
				public String VPAGARPattern(){
				
					return "";
				
				}
				public String VPAGAROriginalDbColumnName(){
				
					return "VPAGAR";
				
				}

				
			    public BigDecimal CT_FACTURAS;

				public BigDecimal getCT_FACTURAS () {
					return this.CT_FACTURAS;
				}

				public Boolean CT_FACTURASIsNullable(){
				    return true;
				}
				public Boolean CT_FACTURASIsKey(){
				    return false;
				}
				public Integer CT_FACTURASLength(){
				    return 0;
				}
				public Integer CT_FACTURASPrecision(){
				    return 0;
				}
				public String CT_FACTURASDefault(){
				
					return "";
				
				}
				public String CT_FACTURASComment(){
				
				    return "";
				
				}
				public String CT_FACTURASPattern(){
				
					return "";
				
				}
				public String CT_FACTURASOriginalDbColumnName(){
				
					return "CT_FACTURAS";
				
				}

				
			    public BigDecimal PV_PAGADO_PRESTADOR;

				public BigDecimal getPV_PAGADO_PRESTADOR () {
					return this.PV_PAGADO_PRESTADOR;
				}

				public Boolean PV_PAGADO_PRESTADORIsNullable(){
				    return true;
				}
				public Boolean PV_PAGADO_PRESTADORIsKey(){
				    return false;
				}
				public Integer PV_PAGADO_PRESTADORLength(){
				    return 0;
				}
				public Integer PV_PAGADO_PRESTADORPrecision(){
				    return 0;
				}
				public String PV_PAGADO_PRESTADORDefault(){
				
					return "";
				
				}
				public String PV_PAGADO_PRESTADORComment(){
				
				    return "";
				
				}
				public String PV_PAGADO_PRESTADORPattern(){
				
					return "";
				
				}
				public String PV_PAGADO_PRESTADOROriginalDbColumnName(){
				
					return "PV_PAGADO_PRESTADOR";
				
				}

				
			    public BigDecimal TRADICADO_ID;

				public BigDecimal getTRADICADO_ID () {
					return this.TRADICADO_ID;
				}

				public Boolean TRADICADO_IDIsNullable(){
				    return true;
				}
				public Boolean TRADICADO_IDIsKey(){
				    return false;
				}
				public Integer TRADICADO_IDLength(){
				    return null;
				}
				public Integer TRADICADO_IDPrecision(){
				    return null;
				}
				public String TRADICADO_IDDefault(){
				
					return null;
				
				}
				public String TRADICADO_IDComment(){
				
				    return "";
				
				}
				public String TRADICADO_IDPattern(){
				
					return "";
				
				}
				public String TRADICADO_IDOriginalDbColumnName(){
				
					return "TRADICADO_ID";
				
				}

				
			    public BigDecimal TIPO_PAGO;

				public BigDecimal getTIPO_PAGO () {
					return this.TIPO_PAGO;
				}

				public Boolean TIPO_PAGOIsNullable(){
				    return true;
				}
				public Boolean TIPO_PAGOIsKey(){
				    return false;
				}
				public Integer TIPO_PAGOLength(){
				    return null;
				}
				public Integer TIPO_PAGOPrecision(){
				    return null;
				}
				public String TIPO_PAGODefault(){
				
					return null;
				
				}
				public String TIPO_PAGOComment(){
				
				    return "";
				
				}
				public String TIPO_PAGOPattern(){
				
					return "";
				
				}
				public String TIPO_PAGOOriginalDbColumnName(){
				
					return "TIPO_PAGO";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
						this.NCREDITO = (BigDecimal) dis.readObject();
					
						this.NDEBITO = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
						this.CT_FACTURAS = (BigDecimal) dis.readObject();
					
						this.PV_PAGADO_PRESTADOR = (BigDecimal) dis.readObject();
					
						this.TRADICADO_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
						this.NCREDITO = (BigDecimal) dis.readObject();
					
						this.NDEBITO = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
						this.CT_FACTURAS = (BigDecimal) dis.readObject();
					
						this.PV_PAGADO_PRESTADOR = (BigDecimal) dis.readObject();
					
						this.TRADICADO_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VFACTURADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NCREDITO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NDEBITO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPAGAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CT_FACTURAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PV_PAGADO_PRESTADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRADICADO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO_PAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VFACTURADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NCREDITO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NDEBITO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPAGAR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CT_FACTURAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PV_PAGADO_PRESTADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TRADICADO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO_PAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",VFACTURADO="+String.valueOf(VFACTURADO));
		sb.append(",NCREDITO="+String.valueOf(NCREDITO));
		sb.append(",NDEBITO="+String.valueOf(NDEBITO));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VPAGAR="+String.valueOf(VPAGAR));
		sb.append(",CT_FACTURAS="+String.valueOf(CT_FACTURAS));
		sb.append(",PV_PAGADO_PRESTADOR="+String.valueOf(PV_PAGADO_PRESTADOR));
		sb.append(",TRADICADO_ID="+String.valueOf(TRADICADO_ID));
		sb.append(",TIPO_PAGO="+String.valueOf(TIPO_PAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EliminaStruct implements routines.system.IPersistableRow<EliminaStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return false;
				}
				public Boolean IPS_IDIsKey(){
				    return true;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal TPAGOS_ID;

				public BigDecimal getTPAGOS_ID () {
					return this.TPAGOS_ID;
				}

				public Boolean TPAGOS_IDIsNullable(){
				    return false;
				}
				public Boolean TPAGOS_IDIsKey(){
				    return true;
				}
				public Integer TPAGOS_IDLength(){
				    return 0;
				}
				public Integer TPAGOS_IDPrecision(){
				    return null;
				}
				public String TPAGOS_IDDefault(){
				
					return "";
				
				}
				public String TPAGOS_IDComment(){
				
				    return "";
				
				}
				public String TPAGOS_IDPattern(){
				
					return "";
				
				}
				public String TPAGOS_IDOriginalDbColumnName(){
				
					return "TPAGOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.IPS_ID == null) ? 0 : this.IPS_ID.hashCode());
					
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
						result = prime * result + ((this.TPAGOS_ID == null) ? 0 : this.TPAGOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final EliminaStruct other = (EliminaStruct) obj;
		
						if (this.IPS_ID == null) {
							if (other.IPS_ID != null)
								return false;
						
						} else if (!this.IPS_ID.equals(other.IPS_ID))
						
							return false;
					
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					
						if (this.TPAGOS_ID == null) {
							if (other.TPAGOS_ID != null)
								return false;
						
						} else if (!this.TPAGOS_ID.equals(other.TPAGOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(EliminaStruct other) {

		other.IPS_ID = this.IPS_ID;
	            other.UORG_ID = this.UORG_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            other.TPAGOS_ID = this.TPAGOS_ID;
	            
	}

	public void copyKeysDataTo(EliminaStruct other) {

		other.IPS_ID = this.IPS_ID;
	            	other.UORG_ID = this.UORG_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	other.TPAGOS_ID = this.TPAGOS_ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",TPAGOS_ID="+String.valueOf(TPAGOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(EliminaStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.IPS_ID, other.IPS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TPAGOS_ID, other.TPAGOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Inserta1Struct implements routines.system.IPersistableRow<Inserta1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return false;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal VFACTURADO;

				public BigDecimal getVFACTURADO () {
					return this.VFACTURADO;
				}

				public Boolean VFACTURADOIsNullable(){
				    return true;
				}
				public Boolean VFACTURADOIsKey(){
				    return false;
				}
				public Integer VFACTURADOLength(){
				    return 0;
				}
				public Integer VFACTURADOPrecision(){
				    return 0;
				}
				public String VFACTURADODefault(){
				
					return "";
				
				}
				public String VFACTURADOComment(){
				
				    return "";
				
				}
				public String VFACTURADOPattern(){
				
					return "";
				
				}
				public String VFACTURADOOriginalDbColumnName(){
				
					return "VFACTURADO";
				
				}

				
			    public BigDecimal NCREDITO;

				public BigDecimal getNCREDITO () {
					return this.NCREDITO;
				}

				public Boolean NCREDITOIsNullable(){
				    return true;
				}
				public Boolean NCREDITOIsKey(){
				    return false;
				}
				public Integer NCREDITOLength(){
				    return 0;
				}
				public Integer NCREDITOPrecision(){
				    return 0;
				}
				public String NCREDITODefault(){
				
					return "";
				
				}
				public String NCREDITOComment(){
				
				    return "";
				
				}
				public String NCREDITOPattern(){
				
					return "";
				
				}
				public String NCREDITOOriginalDbColumnName(){
				
					return "NCREDITO";
				
				}

				
			    public BigDecimal NDEBITO;

				public BigDecimal getNDEBITO () {
					return this.NDEBITO;
				}

				public Boolean NDEBITOIsNullable(){
				    return true;
				}
				public Boolean NDEBITOIsKey(){
				    return false;
				}
				public Integer NDEBITOLength(){
				    return 0;
				}
				public Integer NDEBITOPrecision(){
				    return 0;
				}
				public String NDEBITODefault(){
				
					return "";
				
				}
				public String NDEBITOComment(){
				
				    return "";
				
				}
				public String NDEBITOPattern(){
				
					return "";
				
				}
				public String NDEBITOOriginalDbColumnName(){
				
					return "NDEBITO";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return 0;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return 0;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return 0;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return 0;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VPAGAR;

				public BigDecimal getVPAGAR () {
					return this.VPAGAR;
				}

				public Boolean VPAGARIsNullable(){
				    return true;
				}
				public Boolean VPAGARIsKey(){
				    return false;
				}
				public Integer VPAGARLength(){
				    return 0;
				}
				public Integer VPAGARPrecision(){
				    return 0;
				}
				public String VPAGARDefault(){
				
					return "";
				
				}
				public String VPAGARComment(){
				
				    return "";
				
				}
				public String VPAGARPattern(){
				
					return "";
				
				}
				public String VPAGAROriginalDbColumnName(){
				
					return "VPAGAR";
				
				}

				
			    public BigDecimal TPAGOS_ID;

				public BigDecimal getTPAGOS_ID () {
					return this.TPAGOS_ID;
				}

				public Boolean TPAGOS_IDIsNullable(){
				    return false;
				}
				public Boolean TPAGOS_IDIsKey(){
				    return false;
				}
				public Integer TPAGOS_IDLength(){
				    return 0;
				}
				public Integer TPAGOS_IDPrecision(){
				    return null;
				}
				public String TPAGOS_IDDefault(){
				
					return "";
				
				}
				public String TPAGOS_IDComment(){
				
				    return "";
				
				}
				public String TPAGOS_IDPattern(){
				
					return "";
				
				}
				public String TPAGOS_IDOriginalDbColumnName(){
				
					return "TPAGOS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
						this.NCREDITO = (BigDecimal) dis.readObject();
					
						this.NDEBITO = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
						this.NCREDITO = (BigDecimal) dis.readObject();
					
						this.NDEBITO = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VFACTURADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NCREDITO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NDEBITO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPAGAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VFACTURADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NCREDITO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NDEBITO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPAGAR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",VFACTURADO="+String.valueOf(VFACTURADO));
		sb.append(",NCREDITO="+String.valueOf(NCREDITO));
		sb.append(",NDEBITO="+String.valueOf(NDEBITO));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VPAGAR="+String.valueOf(VPAGAR));
		sb.append(",TPAGOS_ID="+String.valueOf(TPAGOS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class MemoriaStruct implements routines.system.IPersistableRow<MemoriaStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return false;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal VFACTURADO;

				public BigDecimal getVFACTURADO () {
					return this.VFACTURADO;
				}

				public Boolean VFACTURADOIsNullable(){
				    return true;
				}
				public Boolean VFACTURADOIsKey(){
				    return false;
				}
				public Integer VFACTURADOLength(){
				    return 0;
				}
				public Integer VFACTURADOPrecision(){
				    return 0;
				}
				public String VFACTURADODefault(){
				
					return "";
				
				}
				public String VFACTURADOComment(){
				
				    return "";
				
				}
				public String VFACTURADOPattern(){
				
					return "";
				
				}
				public String VFACTURADOOriginalDbColumnName(){
				
					return "VFACTURADO";
				
				}

				
			    public BigDecimal NCREDITO;

				public BigDecimal getNCREDITO () {
					return this.NCREDITO;
				}

				public Boolean NCREDITOIsNullable(){
				    return true;
				}
				public Boolean NCREDITOIsKey(){
				    return false;
				}
				public Integer NCREDITOLength(){
				    return 0;
				}
				public Integer NCREDITOPrecision(){
				    return 0;
				}
				public String NCREDITODefault(){
				
					return "";
				
				}
				public String NCREDITOComment(){
				
				    return "";
				
				}
				public String NCREDITOPattern(){
				
					return "";
				
				}
				public String NCREDITOOriginalDbColumnName(){
				
					return "NCREDITO";
				
				}

				
			    public BigDecimal NDEBITO;

				public BigDecimal getNDEBITO () {
					return this.NDEBITO;
				}

				public Boolean NDEBITOIsNullable(){
				    return true;
				}
				public Boolean NDEBITOIsKey(){
				    return false;
				}
				public Integer NDEBITOLength(){
				    return 0;
				}
				public Integer NDEBITOPrecision(){
				    return 0;
				}
				public String NDEBITODefault(){
				
					return "";
				
				}
				public String NDEBITOComment(){
				
				    return "";
				
				}
				public String NDEBITOPattern(){
				
					return "";
				
				}
				public String NDEBITOOriginalDbColumnName(){
				
					return "NDEBITO";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return 0;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return 0;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return 0;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return 0;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VPAGAR;

				public BigDecimal getVPAGAR () {
					return this.VPAGAR;
				}

				public Boolean VPAGARIsNullable(){
				    return true;
				}
				public Boolean VPAGARIsKey(){
				    return false;
				}
				public Integer VPAGARLength(){
				    return 0;
				}
				public Integer VPAGARPrecision(){
				    return 0;
				}
				public String VPAGARDefault(){
				
					return "";
				
				}
				public String VPAGARComment(){
				
				    return "";
				
				}
				public String VPAGARPattern(){
				
					return "";
				
				}
				public String VPAGAROriginalDbColumnName(){
				
					return "VPAGAR";
				
				}

				
			    public BigDecimal CT_FACTURAS;

				public BigDecimal getCT_FACTURAS () {
					return this.CT_FACTURAS;
				}

				public Boolean CT_FACTURASIsNullable(){
				    return true;
				}
				public Boolean CT_FACTURASIsKey(){
				    return false;
				}
				public Integer CT_FACTURASLength(){
				    return 0;
				}
				public Integer CT_FACTURASPrecision(){
				    return 0;
				}
				public String CT_FACTURASDefault(){
				
					return "";
				
				}
				public String CT_FACTURASComment(){
				
				    return "";
				
				}
				public String CT_FACTURASPattern(){
				
					return "";
				
				}
				public String CT_FACTURASOriginalDbColumnName(){
				
					return "CT_FACTURAS";
				
				}

				
			    public BigDecimal PV_PAGADO_PRESTADOR;

				public BigDecimal getPV_PAGADO_PRESTADOR () {
					return this.PV_PAGADO_PRESTADOR;
				}

				public Boolean PV_PAGADO_PRESTADORIsNullable(){
				    return true;
				}
				public Boolean PV_PAGADO_PRESTADORIsKey(){
				    return false;
				}
				public Integer PV_PAGADO_PRESTADORLength(){
				    return 0;
				}
				public Integer PV_PAGADO_PRESTADORPrecision(){
				    return 0;
				}
				public String PV_PAGADO_PRESTADORDefault(){
				
					return "";
				
				}
				public String PV_PAGADO_PRESTADORComment(){
				
				    return "";
				
				}
				public String PV_PAGADO_PRESTADORPattern(){
				
					return "";
				
				}
				public String PV_PAGADO_PRESTADOROriginalDbColumnName(){
				
					return "PV_PAGADO_PRESTADOR";
				
				}

				
			    public BigDecimal TRADICADO_ID;

				public BigDecimal getTRADICADO_ID () {
					return this.TRADICADO_ID;
				}

				public Boolean TRADICADO_IDIsNullable(){
				    return true;
				}
				public Boolean TRADICADO_IDIsKey(){
				    return false;
				}
				public Integer TRADICADO_IDLength(){
				    return null;
				}
				public Integer TRADICADO_IDPrecision(){
				    return null;
				}
				public String TRADICADO_IDDefault(){
				
					return null;
				
				}
				public String TRADICADO_IDComment(){
				
				    return "";
				
				}
				public String TRADICADO_IDPattern(){
				
					return "";
				
				}
				public String TRADICADO_IDOriginalDbColumnName(){
				
					return "TRADICADO_ID";
				
				}

				
			    public BigDecimal TIPO_PAGO;

				public BigDecimal getTIPO_PAGO () {
					return this.TIPO_PAGO;
				}

				public Boolean TIPO_PAGOIsNullable(){
				    return true;
				}
				public Boolean TIPO_PAGOIsKey(){
				    return false;
				}
				public Integer TIPO_PAGOLength(){
				    return null;
				}
				public Integer TIPO_PAGOPrecision(){
				    return null;
				}
				public String TIPO_PAGODefault(){
				
					return null;
				
				}
				public String TIPO_PAGOComment(){
				
				    return "";
				
				}
				public String TIPO_PAGOPattern(){
				
					return "";
				
				}
				public String TIPO_PAGOOriginalDbColumnName(){
				
					return "TIPO_PAGO";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
						this.NCREDITO = (BigDecimal) dis.readObject();
					
						this.NDEBITO = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
						this.CT_FACTURAS = (BigDecimal) dis.readObject();
					
						this.PV_PAGADO_PRESTADOR = (BigDecimal) dis.readObject();
					
						this.TRADICADO_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
						this.NCREDITO = (BigDecimal) dis.readObject();
					
						this.NDEBITO = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
						this.CT_FACTURAS = (BigDecimal) dis.readObject();
					
						this.PV_PAGADO_PRESTADOR = (BigDecimal) dis.readObject();
					
						this.TRADICADO_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VFACTURADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NCREDITO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NDEBITO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPAGAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CT_FACTURAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PV_PAGADO_PRESTADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRADICADO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO_PAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VFACTURADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NCREDITO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NDEBITO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPAGAR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CT_FACTURAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PV_PAGADO_PRESTADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TRADICADO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO_PAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",VFACTURADO="+String.valueOf(VFACTURADO));
		sb.append(",NCREDITO="+String.valueOf(NCREDITO));
		sb.append(",NDEBITO="+String.valueOf(NDEBITO));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VPAGAR="+String.valueOf(VPAGAR));
		sb.append(",CT_FACTURAS="+String.valueOf(CT_FACTURAS));
		sb.append(",PV_PAGADO_PRESTADOR="+String.valueOf(PV_PAGADO_PRESTADOR));
		sb.append(",TRADICADO_ID="+String.valueOf(TRADICADO_ID));
		sb.append(",TIPO_PAGO="+String.valueOf(TIPO_PAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(MemoriaStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return false;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public java.util.Date FFACTURA;

				public java.util.Date getFFACTURA () {
					return this.FFACTURA;
				}

				public Boolean FFACTURAIsNullable(){
				    return true;
				}
				public Boolean FFACTURAIsKey(){
				    return false;
				}
				public Integer FFACTURALength(){
				    return 0;
				}
				public Integer FFACTURAPrecision(){
				    return 0;
				}
				public String FFACTURADefault(){
				
					return null;
				
				}
				public String FFACTURAComment(){
				
				    return "";
				
				}
				public String FFACTURAPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FFACTURAOriginalDbColumnName(){
				
					return "FFACTURA";
				
				}

				
			    public BigDecimal VFACTURADO;

				public BigDecimal getVFACTURADO () {
					return this.VFACTURADO;
				}

				public Boolean VFACTURADOIsNullable(){
				    return true;
				}
				public Boolean VFACTURADOIsKey(){
				    return false;
				}
				public Integer VFACTURADOLength(){
				    return 0;
				}
				public Integer VFACTURADOPrecision(){
				    return 0;
				}
				public String VFACTURADODefault(){
				
					return "";
				
				}
				public String VFACTURADOComment(){
				
				    return "";
				
				}
				public String VFACTURADOPattern(){
				
					return "";
				
				}
				public String VFACTURADOOriginalDbColumnName(){
				
					return "VFACTURADO";
				
				}

				
			    public BigDecimal NCREDITO;

				public BigDecimal getNCREDITO () {
					return this.NCREDITO;
				}

				public Boolean NCREDITOIsNullable(){
				    return true;
				}
				public Boolean NCREDITOIsKey(){
				    return false;
				}
				public Integer NCREDITOLength(){
				    return 0;
				}
				public Integer NCREDITOPrecision(){
				    return 0;
				}
				public String NCREDITODefault(){
				
					return "";
				
				}
				public String NCREDITOComment(){
				
				    return "";
				
				}
				public String NCREDITOPattern(){
				
					return "";
				
				}
				public String NCREDITOOriginalDbColumnName(){
				
					return "NCREDITO";
				
				}

				
			    public BigDecimal NDEBITO;

				public BigDecimal getNDEBITO () {
					return this.NDEBITO;
				}

				public Boolean NDEBITOIsNullable(){
				    return true;
				}
				public Boolean NDEBITOIsKey(){
				    return false;
				}
				public Integer NDEBITOLength(){
				    return 0;
				}
				public Integer NDEBITOPrecision(){
				    return 0;
				}
				public String NDEBITODefault(){
				
					return "";
				
				}
				public String NDEBITOComment(){
				
				    return "";
				
				}
				public String NDEBITOPattern(){
				
					return "";
				
				}
				public String NDEBITOOriginalDbColumnName(){
				
					return "NDEBITO";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return 0;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return 0;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return 0;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return 0;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VPAGAR;

				public BigDecimal getVPAGAR () {
					return this.VPAGAR;
				}

				public Boolean VPAGARIsNullable(){
				    return true;
				}
				public Boolean VPAGARIsKey(){
				    return false;
				}
				public Integer VPAGARLength(){
				    return 0;
				}
				public Integer VPAGARPrecision(){
				    return 0;
				}
				public String VPAGARDefault(){
				
					return "";
				
				}
				public String VPAGARComment(){
				
				    return "";
				
				}
				public String VPAGARPattern(){
				
					return "";
				
				}
				public String VPAGAROriginalDbColumnName(){
				
					return "VPAGAR";
				
				}

				
			    public BigDecimal CT_FACTURAS;

				public BigDecimal getCT_FACTURAS () {
					return this.CT_FACTURAS;
				}

				public Boolean CT_FACTURASIsNullable(){
				    return true;
				}
				public Boolean CT_FACTURASIsKey(){
				    return false;
				}
				public Integer CT_FACTURASLength(){
				    return 0;
				}
				public Integer CT_FACTURASPrecision(){
				    return 0;
				}
				public String CT_FACTURASDefault(){
				
					return "";
				
				}
				public String CT_FACTURASComment(){
				
				    return "";
				
				}
				public String CT_FACTURASPattern(){
				
					return "";
				
				}
				public String CT_FACTURASOriginalDbColumnName(){
				
					return "CT_FACTURAS";
				
				}

				
			    public BigDecimal PV_PAGADO_PRESTADOR;

				public BigDecimal getPV_PAGADO_PRESTADOR () {
					return this.PV_PAGADO_PRESTADOR;
				}

				public Boolean PV_PAGADO_PRESTADORIsNullable(){
				    return true;
				}
				public Boolean PV_PAGADO_PRESTADORIsKey(){
				    return false;
				}
				public Integer PV_PAGADO_PRESTADORLength(){
				    return 0;
				}
				public Integer PV_PAGADO_PRESTADORPrecision(){
				    return 0;
				}
				public String PV_PAGADO_PRESTADORDefault(){
				
					return "";
				
				}
				public String PV_PAGADO_PRESTADORComment(){
				
				    return "";
				
				}
				public String PV_PAGADO_PRESTADORPattern(){
				
					return "";
				
				}
				public String PV_PAGADO_PRESTADOROriginalDbColumnName(){
				
					return "PV_PAGADO_PRESTADOR";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.FFACTURA = readDate(dis);
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
						this.NCREDITO = (BigDecimal) dis.readObject();
					
						this.NDEBITO = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
						this.CT_FACTURAS = (BigDecimal) dis.readObject();
					
						this.PV_PAGADO_PRESTADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.FFACTURA = readDate(dis);
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
						this.NCREDITO = (BigDecimal) dis.readObject();
					
						this.NDEBITO = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
						this.CT_FACTURAS = (BigDecimal) dis.readObject();
					
						this.PV_PAGADO_PRESTADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// java.util.Date
				
						writeDate(this.FFACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VFACTURADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NCREDITO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NDEBITO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPAGAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CT_FACTURAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PV_PAGADO_PRESTADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// java.util.Date
				
						writeDate(this.FFACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VFACTURADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NCREDITO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NDEBITO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPAGAR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CT_FACTURAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PV_PAGADO_PRESTADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",FFACTURA="+String.valueOf(FFACTURA));
		sb.append(",VFACTURADO="+String.valueOf(VFACTURADO));
		sb.append(",NCREDITO="+String.valueOf(NCREDITO));
		sb.append(",NDEBITO="+String.valueOf(NDEBITO));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VPAGAR="+String.valueOf(VPAGAR));
		sb.append(",CT_FACTURAS="+String.valueOf(CT_FACTURAS));
		sb.append(",PV_PAGADO_PRESTADOR="+String.valueOf(PV_PAGADO_PRESTADOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_6Struct implements routines.system.IPersistableRow<after_tOracleInput_6Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return false;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public java.util.Date FFACTURA;

				public java.util.Date getFFACTURA () {
					return this.FFACTURA;
				}

				public Boolean FFACTURAIsNullable(){
				    return true;
				}
				public Boolean FFACTURAIsKey(){
				    return false;
				}
				public Integer FFACTURALength(){
				    return 0;
				}
				public Integer FFACTURAPrecision(){
				    return 0;
				}
				public String FFACTURADefault(){
				
					return null;
				
				}
				public String FFACTURAComment(){
				
				    return "";
				
				}
				public String FFACTURAPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FFACTURAOriginalDbColumnName(){
				
					return "FFACTURA";
				
				}

				
			    public BigDecimal VFACTURADO;

				public BigDecimal getVFACTURADO () {
					return this.VFACTURADO;
				}

				public Boolean VFACTURADOIsNullable(){
				    return true;
				}
				public Boolean VFACTURADOIsKey(){
				    return false;
				}
				public Integer VFACTURADOLength(){
				    return 0;
				}
				public Integer VFACTURADOPrecision(){
				    return 0;
				}
				public String VFACTURADODefault(){
				
					return "";
				
				}
				public String VFACTURADOComment(){
				
				    return "";
				
				}
				public String VFACTURADOPattern(){
				
					return "";
				
				}
				public String VFACTURADOOriginalDbColumnName(){
				
					return "VFACTURADO";
				
				}

				
			    public BigDecimal NCREDITO;

				public BigDecimal getNCREDITO () {
					return this.NCREDITO;
				}

				public Boolean NCREDITOIsNullable(){
				    return true;
				}
				public Boolean NCREDITOIsKey(){
				    return false;
				}
				public Integer NCREDITOLength(){
				    return 0;
				}
				public Integer NCREDITOPrecision(){
				    return 0;
				}
				public String NCREDITODefault(){
				
					return "";
				
				}
				public String NCREDITOComment(){
				
				    return "";
				
				}
				public String NCREDITOPattern(){
				
					return "";
				
				}
				public String NCREDITOOriginalDbColumnName(){
				
					return "NCREDITO";
				
				}

				
			    public BigDecimal NDEBITO;

				public BigDecimal getNDEBITO () {
					return this.NDEBITO;
				}

				public Boolean NDEBITOIsNullable(){
				    return true;
				}
				public Boolean NDEBITOIsKey(){
				    return false;
				}
				public Integer NDEBITOLength(){
				    return 0;
				}
				public Integer NDEBITOPrecision(){
				    return 0;
				}
				public String NDEBITODefault(){
				
					return "";
				
				}
				public String NDEBITOComment(){
				
				    return "";
				
				}
				public String NDEBITOPattern(){
				
					return "";
				
				}
				public String NDEBITOOriginalDbColumnName(){
				
					return "NDEBITO";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return 0;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return 0;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return 0;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return 0;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VPAGAR;

				public BigDecimal getVPAGAR () {
					return this.VPAGAR;
				}

				public Boolean VPAGARIsNullable(){
				    return true;
				}
				public Boolean VPAGARIsKey(){
				    return false;
				}
				public Integer VPAGARLength(){
				    return 0;
				}
				public Integer VPAGARPrecision(){
				    return 0;
				}
				public String VPAGARDefault(){
				
					return "";
				
				}
				public String VPAGARComment(){
				
				    return "";
				
				}
				public String VPAGARPattern(){
				
					return "";
				
				}
				public String VPAGAROriginalDbColumnName(){
				
					return "VPAGAR";
				
				}

				
			    public BigDecimal CT_FACTURAS;

				public BigDecimal getCT_FACTURAS () {
					return this.CT_FACTURAS;
				}

				public Boolean CT_FACTURASIsNullable(){
				    return true;
				}
				public Boolean CT_FACTURASIsKey(){
				    return false;
				}
				public Integer CT_FACTURASLength(){
				    return 0;
				}
				public Integer CT_FACTURASPrecision(){
				    return 0;
				}
				public String CT_FACTURASDefault(){
				
					return "";
				
				}
				public String CT_FACTURASComment(){
				
				    return "";
				
				}
				public String CT_FACTURASPattern(){
				
					return "";
				
				}
				public String CT_FACTURASOriginalDbColumnName(){
				
					return "CT_FACTURAS";
				
				}

				
			    public BigDecimal PV_PAGADO_PRESTADOR;

				public BigDecimal getPV_PAGADO_PRESTADOR () {
					return this.PV_PAGADO_PRESTADOR;
				}

				public Boolean PV_PAGADO_PRESTADORIsNullable(){
				    return true;
				}
				public Boolean PV_PAGADO_PRESTADORIsKey(){
				    return false;
				}
				public Integer PV_PAGADO_PRESTADORLength(){
				    return 0;
				}
				public Integer PV_PAGADO_PRESTADORPrecision(){
				    return 0;
				}
				public String PV_PAGADO_PRESTADORDefault(){
				
					return "";
				
				}
				public String PV_PAGADO_PRESTADORComment(){
				
				    return "";
				
				}
				public String PV_PAGADO_PRESTADORPattern(){
				
					return "";
				
				}
				public String PV_PAGADO_PRESTADOROriginalDbColumnName(){
				
					return "PV_PAGADO_PRESTADOR";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.FFACTURA = readDate(dis);
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
						this.NCREDITO = (BigDecimal) dis.readObject();
					
						this.NDEBITO = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
						this.CT_FACTURAS = (BigDecimal) dis.readObject();
					
						this.PV_PAGADO_PRESTADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.FFACTURA = readDate(dis);
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
						this.NCREDITO = (BigDecimal) dis.readObject();
					
						this.NDEBITO = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
						this.CT_FACTURAS = (BigDecimal) dis.readObject();
					
						this.PV_PAGADO_PRESTADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// java.util.Date
				
						writeDate(this.FFACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VFACTURADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NCREDITO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NDEBITO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPAGAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CT_FACTURAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PV_PAGADO_PRESTADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// java.util.Date
				
						writeDate(this.FFACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VFACTURADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NCREDITO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NDEBITO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPAGAR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CT_FACTURAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PV_PAGADO_PRESTADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",FFACTURA="+String.valueOf(FFACTURA));
		sb.append(",VFACTURADO="+String.valueOf(VFACTURADO));
		sb.append(",NCREDITO="+String.valueOf(NCREDITO));
		sb.append(",NDEBITO="+String.valueOf(NDEBITO));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VPAGAR="+String.valueOf(VPAGAR));
		sb.append(",CT_FACTURAS="+String.valueOf(CT_FACTURAS));
		sb.append(",PV_PAGADO_PRESTADOR="+String.valueOf(PV_PAGADO_PRESTADOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_2Process(globalMap);
		tHashInput_1Process(globalMap);

		row11Struct row11 = new row11Struct();
EliminaStruct Elimina = new EliminaStruct();
Inserta1Struct Inserta1 = new Inserta1Struct();
MemoriaStruct Memoria = new MemoriaStruct();
MemoriaStruct row16 = Memoria;
row14Struct row14 = new row14Struct();





	
	/**
	 * [tOracleOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_3", false);
		start_Hash.put("tOracleOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Elimina");
					}
				
		int tos_count_tOracleOutput_3 = 0;
		






        int deleteKeyCount_tOracleOutput_3 = 4;
        if(deleteKeyCount_tOracleOutput_3 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_3 = 0;
    int nb_line_update_tOracleOutput_3 = 0;
    int nb_line_inserted_tOracleOutput_3 = 0;
    int nb_line_deleted_tOracleOutput_3 = 0;
    int nb_line_rejected_tOracleOutput_3 = 0;

    int tmp_batchUpdateCount_tOracleOutput_3 = 0;

    int deletedCount_tOracleOutput_3=0;
    int updatedCount_tOracleOutput_3=0;
    int insertedCount_tOracleOutput_3=0;
    int rowsToCommitCount_tOracleOutput_3=0;
    int rejectedCount_tOracleOutput_3=0;

    boolean whetherReject_tOracleOutput_3 = false;

    java.sql.Connection conn_tOracleOutput_3 = null;

    //optional table
    String dbschema_tOracleOutput_3 = null;
    String tableName_tOracleOutput_3 = null;
                    String driverClass_tOracleOutput_3 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_3);
                String url_tOracleOutput_3 = null;
                    url_tOracleOutput_3 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_3 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_3 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_3 = decryptedPassword_tOracleOutput_3;
                dbschema_tOracleOutput_3 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_3 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_3.put("user",dbUser_tOracleOutput_3);
                    atnParamsPrope_tOracleOutput_3.put("password",dbPwd_tOracleOutput_3);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_3.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_3 = java.sql.DriverManager.getConnection(url_tOracleOutput_3, atnParamsPrope_tOracleOutput_3);
        resourceMap.put("conn_tOracleOutput_3", conn_tOracleOutput_3);
            conn_tOracleOutput_3.setAutoCommit(false);
            int commitEvery_tOracleOutput_3 = 1000;
            int commitCounter_tOracleOutput_3 = 0;
        int batchSize_tOracleOutput_3 = 1000;
        int batchSizeCounter_tOracleOutput_3=0;
        int count_tOracleOutput_3=0;

        if(dbschema_tOracleOutput_3 == null || dbschema_tOracleOutput_3.trim().length() == 0) {
            tableName_tOracleOutput_3 = ("BACM_CAUDITORIA_PGLOSAS");
        } else {
            tableName_tOracleOutput_3 = dbschema_tOracleOutput_3 + "." + ("BACM_CAUDITORIA_PGLOSAS");
        }
                String delete_tOracleOutput_3 = "DELETE FROM " + tableName_tOracleOutput_3 + " WHERE IPS_ID = ? AND UORG_ID = ? AND TIEMPOS_ID = ? AND TPAGOS_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_3 = conn_tOracleOutput_3.prepareStatement(delete_tOracleOutput_3);
                resourceMap.put("pstmt_tOracleOutput_3", pstmt_tOracleOutput_3);





 



/**
 * [tOracleOutput_3 begin ] stop
 */




	
	/**
	 * [tOracleOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_4", false);
		start_Hash.put("tOracleOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta1");
					}
				
		int tos_count_tOracleOutput_4 = 0;
		






    
    int nb_line_tOracleOutput_4 = 0;
    int nb_line_update_tOracleOutput_4 = 0;
    int nb_line_inserted_tOracleOutput_4 = 0;
    int nb_line_deleted_tOracleOutput_4 = 0;
    int nb_line_rejected_tOracleOutput_4 = 0;

    int tmp_batchUpdateCount_tOracleOutput_4 = 0;

    int deletedCount_tOracleOutput_4=0;
    int updatedCount_tOracleOutput_4=0;
    int insertedCount_tOracleOutput_4=0;
    int rowsToCommitCount_tOracleOutput_4=0;
    int rejectedCount_tOracleOutput_4=0;

    boolean whetherReject_tOracleOutput_4 = false;

    java.sql.Connection conn_tOracleOutput_4 = null;

    //optional table
    String dbschema_tOracleOutput_4 = null;
    String tableName_tOracleOutput_4 = null;
                    String driverClass_tOracleOutput_4 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_4);
                String url_tOracleOutput_4 = null;
                    url_tOracleOutput_4 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_4 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_4 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_4 = decryptedPassword_tOracleOutput_4;
                dbschema_tOracleOutput_4 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_4 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_4.put("user",dbUser_tOracleOutput_4);
                    atnParamsPrope_tOracleOutput_4.put("password",dbPwd_tOracleOutput_4);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_4.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_4 = java.sql.DriverManager.getConnection(url_tOracleOutput_4, atnParamsPrope_tOracleOutput_4);
        resourceMap.put("conn_tOracleOutput_4", conn_tOracleOutput_4);
            conn_tOracleOutput_4.setAutoCommit(false);
            int commitEvery_tOracleOutput_4 = 1000;
            int commitCounter_tOracleOutput_4 = 0;
        int batchSize_tOracleOutput_4 = 1000;
        int batchSizeCounter_tOracleOutput_4=0;
        int count_tOracleOutput_4=0;

        if(dbschema_tOracleOutput_4 == null || dbschema_tOracleOutput_4.trim().length() == 0) {
            tableName_tOracleOutput_4 = ("BACM_CAUDITORIA_PGLOSAS");
        } else {
            tableName_tOracleOutput_4 = dbschema_tOracleOutput_4 + "." + ("BACM_CAUDITORIA_PGLOSAS");
        }
                String insert_tOracleOutput_4 = "INSERT INTO " + tableName_tOracleOutput_4 + " (IPS_ID,UORG_ID,VFACTURADO,NCREDITO,NDEBITO,VGLOSADO,VSOPORTADO,VACEPTADO,VRATIFICADO,VPAGAR,TPAGOS_ID,TIEMPOS_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_4 = conn_tOracleOutput_4.prepareStatement(insert_tOracleOutput_4);
                        resourceMap.put("pstmt_tOracleOutput_4", pstmt_tOracleOutput_4);





 



/**
 * [tOracleOutput_4 begin ] stop
 */





	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				BigDecimal UORG_ID;
    				BigDecimal TRADICADO_ID;BigDecimal VFACTURADO_sum;
           			BigDecimal VPAGAR_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
							
							result = prime * result + ((this.TRADICADO_ID == null) ? 0 : this.TRADICADO_ID.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.UORG_ID == null) {
								if (other.UORG_ID != null) 
									return false;
							} else if (!this.UORG_ID.equals(other.UORG_ID)) 
								return false;
						
							if (this.TRADICADO_ID == null) {
								if (other.TRADICADO_ID != null) 
									return false;
							} else if (!this.TRADICADO_ID.equals(other.TRADICADO_ID)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Memoria");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<MemoriaStruct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_ACM_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<MemoriaStruct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
					globalMap.get( "tHash_Lookup_row12" ))
					;					
					
	

row12Struct row12HashKey = new row12Struct();
row12Struct row12Default = new row12Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
EliminaStruct Elimina_tmp = new EliminaStruct();
Inserta1Struct Inserta1_tmp = new Inserta1Struct();
MemoriaStruct Memoria_tmp = new MemoriaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_6.setFetchSize(1000);


		    String dbquery_tOracleInput_6 = "SELECT    COND.CONTRATOS_ID \n        , COND.CLASE\n        , RC.PRESTADOR_ID AS IPS_ID\n        , RC.UORG_ID \n       "
+" , COND.FPERIODO AS FFACTURA        \n        , SUM(FA.VCALCULADO) AS VFACTURADO\n        , SUM(FA.VACEPTADO) AS NCREDIT"
+"O\n        , SUM(ND.NDEBITO) AS NDEBITO\n        , SUM(FA.VGLOSADO) AS VGLOSADO\n        , SUM(FA.VSOPORTADO) AS VSOPORT"
+"ADO\n        , SUM(FA.VACEPTADO) AS VACEPTADO\n        , SUM(FA.VRATIFICADO) AS VRATIFICADO\n        , SUM(FA.VAVALPAGO)"
+" AS VPAGAR\n        , COUNT(FA.ID) AS CT_FACTURAS\n        , CASE \n            WHEN SUM(FA.VCALCULADO)  > 0 \n         "
+"   THEN SUM(FA.VAVALPAGO)*100/SUM(FA.VCALCULADO)\n            ELSE NULL\n          END AS PV_PAGADO_PRESTADOR\nFROM ACM_"
+"FACTURA FA \nINNER JOIN ACM_HAUDITORIAS AH ON AH.RECEPCION_ID = FA.RECEPCION_ID \nINNER JOIN ACM_RECEPCION RC ON RC.ID ="
+" FA.RECEPCION_ID\nINNER JOIN ACM_ETAPASNORMATIVIDAD NE ON NE.ID = AH.ETAPASNORMATIVIDAD_ID\nINNER JOIN ACM_ESTAUDITORIAS"
+" ESA ON ESA.ID = AH.ESTAUDITORIA_ID\nINNER JOIN ( \n    SELECT   CONTRATOS_ID\n           , FPERIODO\n           , CLASE"
+"\n    FROM ( \n      SELECT    COALESCE( AF.CONTRATOS_ID, AF.MEDCONTRATOS_ID, 0 ) AS CONTRATOS_ID\n              , CASE "
+" \n                  WHEN AF.CONTRATOS_ID IS NOT NULL\n                  THEN 1\n                  WHEN AF.MEDCONTRATOS_"
+"ID IS NOT NULL \n                  THEN 2\n                  ELSE 3\n                END AS CLASE                       "
+"\n              , TRUNC (AF.FECHA, 'MONTH') AS FPERIODO\n              , ROW_NUMBER() OVER ( PARTITION BY COALESCE( AF.C"
+"ONTRATOS_ID, AF.MEDCONTRATOS_ID, 0 ) \n                                                  , CASE  \n                     "
+"                                 WHEN AF.CONTRATOS_ID IS NOT NULL\n                                                     "
+" THEN 1\n                                                      WHEN AF.MEDCONTRATOS_ID IS NOT NULL \n                   "
+"                                   THEN 2\n                                                      ELSE 3\n               "
+"                                     END \n                                                  , TRUNC (AF.FECHA, 'MONTH')"
+" ORDER BY AF.ID ) R\n      FROM ACM_HAUDITORIAS HA\n      INNER JOIN ACM_ETAPASNORMATIVIDAD EN ON EN.ID = HA.ETAPASNORMA"
+"TIVIDAD_ID    \n      INNER JOIN ACM_ESTAUDITORIAS ESA ON ESA.ID = HA.ESTAUDITORIA_ID	\n      INNER JOIN ACM_FACTURA AF "
+"ON AF.RECEPCION_ID = HA.RECEPCION_ID\n      WHERE HA.ESTREGISTRO_ID = 1 \n        AND AF.ESTREGISTRO_ID = 1\n        AND"
+" (      EN.RESPONSABLE = 'AUDITOR' \n              OR ( EN.RESPONSABLE = 'PRESTADOR' AND HA.TIPO = 'Conciliación' )\n   "
+"         )\n        AND ( HA.EJECUCION = 1)\n		AND ESA.NOMBRE = 'Finalizada'\n        "+context.CONDICION+"\n    ) WHERE R = 1\n) COND ON ( COND.CONTRATOS_ID = COALESCE( FA.CONTRATOS_ID, FA.MEDCONTRATOS_ID, 0 ) )\n      AND CO"
+"ND.FPERIODO =  TRUNC( FA.FECHA, 'MONTH' )\n      AND COND.CLASE = DECODE ( FA.CONTRATOS_ID, NULL, DECODE (FA.MEDCONTRATO"
+"S_ID, NULL, 3, 2),1 )\nLEFT JOIN ( \n  SELECT    NVL( DFS.FACTURA_ID, DFF.FACTURA_ID ) AS FACTURA_ID\n			        , SUM( "
+"NVL( DFS.VMENORCOBRADO , DFF.VMENORCOBRADO) ) AS NDEBITO\n	FROM ACM_HAUDITORIAS HA\n	INNER JOIN ACM_ETAPASNORMATIVIDAD E"
+"N ON EN.ID = HA.ETAPASNORMATIVIDAD_ID    \n	INNER JOIN ACM_ESTAUDITORIAS ESA ON ESA.ID = HA.ESTAUDITORIA_ID	\n	INNER JOI"
+"N ACM_FACTURA AF ON AF.RECEPCION_ID = HA.RECEPCION_ID\n	LEFT JOIN ACM_DFACTURASERVICIO DFS ON DFS.RECEPCION_ID = HA.RECE"
+"PCION_ID  \n    	                               AND DFS.ESTREGISTRO_ID = 1\n	LEFT JOIN ACM_DFACTURAFORMULACION DFF ON DF"
+"F.RECEPCION_ID = HA.RECEPCION_ID \n    	                                 AND  DFF.ESTREGISTRO_ID = 1 	\n	WHERE ( DFS.ID "
+"IS NOT NULL OR DFF.ID IS NOT NULL )\n  			AND HA.ESTREGISTRO_ID = 1 \n  			AND AF.ESTREGISTRO_ID = 1\n  			AND EN.CODIGO"
+" = 1\n  			AND HA.EJECUCION = 1\n			AND ESA.NOMBRE = 'Finalizada'\n  			"+context.CONDICION+"\n  	GROUP BY NVL( DFS.FACTURA_ID, DFF.FACTURA_ID )\n) ND ON ND.FACTURA_ID = FA.ID     \nWHERE NE.CODIGO = 1\n  AND AH."
+"ESTREGISTRO_ID = 1\n  AND RC.ESTREGISTRO_ID = 1\n   AND ( AH.EJECUCION = 1 )\n  AND AH.FFETAPA IS NOT NULL \n  AND ESA.N"
+"OMBRE = 'Finalizada'\nGROUP BY  COND.CONTRATOS_ID \n        , RC.PRESTADOR_ID \n        , RC.UORG_ID  \n        , COND.F"
+"PERIODO\n        , COND.CLASE";
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row11.CONTRATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(1) != null) {
						row11.CONTRATOS_ID = rs_tOracleInput_6.getBigDecimal(1);
					} else {
				
						row11.CONTRATOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								row11.CLASE = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(2) != null) {
						row11.CLASE = rs_tOracleInput_6.getBigDecimal(2);
					} else {
				
						row11.CLASE = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 3) {
								row11.IPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(3) != null) {
						row11.IPS_ID = rs_tOracleInput_6.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 4) {
								row11.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(4) != null) {
						row11.UORG_ID = rs_tOracleInput_6.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 5) {
								row11.FFACTURA = null;
							} else {
										
			row11.FFACTURA = routines.system.JDBCUtil.getDate(rs_tOracleInput_6, 5);
		                    }
							if(colQtyInRs_tOracleInput_6 < 6) {
								row11.VFACTURADO = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(6) != null) {
						row11.VFACTURADO = rs_tOracleInput_6.getBigDecimal(6);
					} else {
				
						row11.VFACTURADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 7) {
								row11.NCREDITO = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(7) != null) {
						row11.NCREDITO = rs_tOracleInput_6.getBigDecimal(7);
					} else {
				
						row11.NCREDITO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 8) {
								row11.NDEBITO = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(8) != null) {
						row11.NDEBITO = rs_tOracleInput_6.getBigDecimal(8);
					} else {
				
						row11.NDEBITO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 9) {
								row11.VGLOSADO = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(9) != null) {
						row11.VGLOSADO = rs_tOracleInput_6.getBigDecimal(9);
					} else {
				
						row11.VGLOSADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 10) {
								row11.VSOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(10) != null) {
						row11.VSOPORTADO = rs_tOracleInput_6.getBigDecimal(10);
					} else {
				
						row11.VSOPORTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 11) {
								row11.VACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(11) != null) {
						row11.VACEPTADO = rs_tOracleInput_6.getBigDecimal(11);
					} else {
				
						row11.VACEPTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 12) {
								row11.VRATIFICADO = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(12) != null) {
						row11.VRATIFICADO = rs_tOracleInput_6.getBigDecimal(12);
					} else {
				
						row11.VRATIFICADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 13) {
								row11.VPAGAR = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(13) != null) {
						row11.VPAGAR = rs_tOracleInput_6.getBigDecimal(13);
					} else {
				
						row11.VPAGAR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 14) {
								row11.CT_FACTURAS = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(14) != null) {
						row11.CT_FACTURAS = rs_tOracleInput_6.getBigDecimal(14);
					} else {
				
						row11.CT_FACTURAS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 15) {
								row11.PV_PAGADO_PRESTADOR = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(15) != null) {
						row11.PV_PAGADO_PRESTADOR = rs_tOracleInput_6.getBigDecimal(15);
					} else {
				
						row11.PV_PAGADO_PRESTADOR = null;
					}
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
						row12Struct row12 = null;
					
						row13Struct row13 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row12HashKey.FECHA = row11.FFACTURA  == null ? null : new java.util.Date((row11.FFACTURA ).getTime());
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.FECHA = '" + row12HashKey.FECHA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row13HashKey.CONTRATOS_ID = row11.CONTRATOS_ID ;
                        		    		
                        		    		    row13HashKey.CLASE = row11.CLASE ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row13.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.CONTRATOS_ID = '" + row13HashKey.CONTRATOS_ID + "', row13.CLASE = '" + row13HashKey.CLASE + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

Elimina = null;
Inserta1 = null;
Memoria = null;

if(!rejectedInnerJoin_tMap_2 ) {

// # Output table : 'Elimina'
Elimina_tmp.IPS_ID =  row11.IPS_ID ;
Elimina_tmp.UORG_ID = row11.UORG_ID ;
Elimina_tmp.TIEMPOS_ID = row12.ID ;
Elimina_tmp.TPAGOS_ID = row13.ID ;
Elimina = Elimina_tmp;

// # Output table : 'Inserta1'
Inserta1_tmp.IPS_ID = row11.IPS_ID ;
Inserta1_tmp.UORG_ID = row11.UORG_ID ;
Inserta1_tmp.VFACTURADO = row11.VFACTURADO ;
Inserta1_tmp.NCREDITO = row11.NCREDITO ;
Inserta1_tmp.NDEBITO = row11.NDEBITO ;
Inserta1_tmp.VGLOSADO = row11.VGLOSADO ;
Inserta1_tmp.VSOPORTADO = row11.VSOPORTADO ;
Inserta1_tmp.VACEPTADO = row11.VACEPTADO ;
Inserta1_tmp.VRATIFICADO = row11.VRATIFICADO ;
Inserta1_tmp.VPAGAR = row11.VPAGAR ;
Inserta1_tmp.TPAGOS_ID = row13.ID ;
Inserta1_tmp.TIEMPOS_ID = row12.ID ;
Inserta1 = Inserta1_tmp;

// # Output table : 'Memoria'
Memoria_tmp.IPS_ID = row11.IPS_ID ;
Memoria_tmp.UORG_ID = row11.UORG_ID ;
Memoria_tmp.VFACTURADO = row11.VFACTURADO ;
Memoria_tmp.NCREDITO = row11.NCREDITO ;
Memoria_tmp.NDEBITO = row11.NDEBITO ;
Memoria_tmp.VGLOSADO = row11.VGLOSADO ;
Memoria_tmp.VSOPORTADO = row11.VSOPORTADO ;
Memoria_tmp.VACEPTADO = row11.VACEPTADO ;
Memoria_tmp.VRATIFICADO = row11.VRATIFICADO ;
Memoria_tmp.VPAGAR = row11.VPAGAR ;
Memoria_tmp.CT_FACTURAS = row11.CT_FACTURAS ;
Memoria_tmp.PV_PAGADO_PRESTADOR = row11.PV_PAGADO_PRESTADOR ;
Memoria_tmp.TRADICADO_ID = row12.ID ;
Memoria_tmp.TIPO_PAGO = row11.CLASE.compareTo(new BigDecimal(3)) == 0?new BigDecimal(2): new BigDecimal(1) ;
Memoria = Memoria_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "Elimina"
if(Elimina != null) { 



	
	/**
	 * [tOracleOutput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Elimina"
						
						);
					}
					



        whetherReject_tOracleOutput_3 = false;
                    pstmt_tOracleOutput_3.setBigDecimal(1, Elimina.IPS_ID);

                    pstmt_tOracleOutput_3.setBigDecimal(2, Elimina.UORG_ID);

                    pstmt_tOracleOutput_3.setBigDecimal(3, Elimina.TIEMPOS_ID);

                    pstmt_tOracleOutput_3.setBigDecimal(4, Elimina.TPAGOS_ID);

                pstmt_tOracleOutput_3.addBatch();
                nb_line_tOracleOutput_3++;
                batchSizeCounter_tOracleOutput_3++;
            if (batchSize_tOracleOutput_3 > 0 &&  batchSize_tOracleOutput_3 <= batchSizeCounter_tOracleOutput_3) {
                try {
                    pstmt_tOracleOutput_3.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_3){
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
			        java.sql.SQLException ne_tOracleOutput_3 = e_tOracleOutput_3.getNextException(),sqle_tOracleOutput_3=null;
			    	String errormessage_tOracleOutput_3;
					if (ne_tOracleOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_3 = new java.sql.SQLException(e_tOracleOutput_3.getMessage() + "\ncaused by: " + ne_tOracleOutput_3.getMessage(), ne_tOracleOutput_3.getSQLState(), ne_tOracleOutput_3.getErrorCode(), ne_tOracleOutput_3);
						errormessage_tOracleOutput_3 = sqle_tOracleOutput_3.getMessage();
					}else{
						errormessage_tOracleOutput_3 = e_tOracleOutput_3.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_3);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3.getUpdateCount();
                    deletedCount_tOracleOutput_3
                += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                rowsToCommitCount_tOracleOutput_3 += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                batchSizeCounter_tOracleOutput_3 = 0;
            }
                commitCounter_tOracleOutput_3++;
                if(commitEvery_tOracleOutput_3 <= commitCounter_tOracleOutput_3) {
                    if(batchSizeCounter_tOracleOutput_3 > 0) {
                        try {
                            pstmt_tOracleOutput_3.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_3){
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
					        java.sql.SQLException ne_tOracleOutput_3 = e_tOracleOutput_3.getNextException(),sqle_tOracleOutput_3=null;
					    	String errormessage_tOracleOutput_3;
							if (ne_tOracleOutput_3 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_3 = new java.sql.SQLException(e_tOracleOutput_3.getMessage() + "\ncaused by: " + ne_tOracleOutput_3.getMessage(), ne_tOracleOutput_3.getSQLState(), ne_tOracleOutput_3.getErrorCode(), ne_tOracleOutput_3);
								errormessage_tOracleOutput_3 = sqle_tOracleOutput_3.getMessage();
							}else{
								errormessage_tOracleOutput_3 = e_tOracleOutput_3.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_3);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3.getUpdateCount();
                            deletedCount_tOracleOutput_3
                        += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                        rowsToCommitCount_tOracleOutput_3 += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_3 != 0){
                    	
                    }
                    conn_tOracleOutput_3.commit();
                    if(rowsToCommitCount_tOracleOutput_3 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_3 = 0;
                    }
                    commitCounter_tOracleOutput_3=0;
                    	batchSizeCounter_tOracleOutput_3=0;
                }

 


	tos_count_tOracleOutput_3++;

/**
 * [tOracleOutput_3 main ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_end ] stop
 */

} // End of branch "Elimina"




// Start of branch "Inserta1"
if(Inserta1 != null) { 



	
	/**
	 * [tOracleOutput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta1"
						
						);
					}
					



        whetherReject_tOracleOutput_4 = false;
                        pstmt_tOracleOutput_4.setBigDecimal(1, Inserta1.IPS_ID);

                        pstmt_tOracleOutput_4.setBigDecimal(2, Inserta1.UORG_ID);

                        pstmt_tOracleOutput_4.setBigDecimal(3, Inserta1.VFACTURADO);

                        pstmt_tOracleOutput_4.setBigDecimal(4, Inserta1.NCREDITO);

                        pstmt_tOracleOutput_4.setBigDecimal(5, Inserta1.NDEBITO);

                        pstmt_tOracleOutput_4.setBigDecimal(6, Inserta1.VGLOSADO);

                        pstmt_tOracleOutput_4.setBigDecimal(7, Inserta1.VSOPORTADO);

                        pstmt_tOracleOutput_4.setBigDecimal(8, Inserta1.VACEPTADO);

                        pstmt_tOracleOutput_4.setBigDecimal(9, Inserta1.VRATIFICADO);

                        pstmt_tOracleOutput_4.setBigDecimal(10, Inserta1.VPAGAR);

                        pstmt_tOracleOutput_4.setBigDecimal(11, Inserta1.TPAGOS_ID);

                        pstmt_tOracleOutput_4.setBigDecimal(12, Inserta1.TIEMPOS_ID);

                pstmt_tOracleOutput_4.addBatch();
                nb_line_tOracleOutput_4++;
                batchSizeCounter_tOracleOutput_4++;
            if (batchSize_tOracleOutput_4 > 0 &&  batchSize_tOracleOutput_4 <= batchSizeCounter_tOracleOutput_4) {
                try {
                    pstmt_tOracleOutput_4.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_4){
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
			        java.sql.SQLException ne_tOracleOutput_4 = e_tOracleOutput_4.getNextException(),sqle_tOracleOutput_4=null;
			    	String errormessage_tOracleOutput_4;
					if (ne_tOracleOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_4 = new java.sql.SQLException(e_tOracleOutput_4.getMessage() + "\ncaused by: " + ne_tOracleOutput_4.getMessage(), ne_tOracleOutput_4.getSQLState(), ne_tOracleOutput_4.getErrorCode(), ne_tOracleOutput_4);
						errormessage_tOracleOutput_4 = sqle_tOracleOutput_4.getMessage();
					}else{
						errormessage_tOracleOutput_4 = e_tOracleOutput_4.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_4);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_4 = pstmt_tOracleOutput_4.getUpdateCount();
                    insertedCount_tOracleOutput_4
                += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                rowsToCommitCount_tOracleOutput_4 += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                batchSizeCounter_tOracleOutput_4 = 0;
            }
                commitCounter_tOracleOutput_4++;
                if(commitEvery_tOracleOutput_4 <= commitCounter_tOracleOutput_4) {
                    if(batchSizeCounter_tOracleOutput_4 > 0) {
                        try {
                            pstmt_tOracleOutput_4.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_4){
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
					        java.sql.SQLException ne_tOracleOutput_4 = e_tOracleOutput_4.getNextException(),sqle_tOracleOutput_4=null;
					    	String errormessage_tOracleOutput_4;
							if (ne_tOracleOutput_4 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_4 = new java.sql.SQLException(e_tOracleOutput_4.getMessage() + "\ncaused by: " + ne_tOracleOutput_4.getMessage(), ne_tOracleOutput_4.getSQLState(), ne_tOracleOutput_4.getErrorCode(), ne_tOracleOutput_4);
								errormessage_tOracleOutput_4 = sqle_tOracleOutput_4.getMessage();
							}else{
								errormessage_tOracleOutput_4 = e_tOracleOutput_4.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_4);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_4 = pstmt_tOracleOutput_4.getUpdateCount();
                            insertedCount_tOracleOutput_4
                        += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                        rowsToCommitCount_tOracleOutput_4 += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_4 != 0){
                    	
                    }
                    conn_tOracleOutput_4.commit();
                    if(rowsToCommitCount_tOracleOutput_4 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_4 = 0;
                    }
                    commitCounter_tOracleOutput_4=0;
                    	batchSizeCounter_tOracleOutput_4=0;
                }

 


	tos_count_tOracleOutput_4++;

/**
 * [tOracleOutput_4 main ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_end ] stop
 */

} // End of branch "Inserta1"




// Start of branch "Memoria"
if(Memoria != null) { 



	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Memoria"
						
						);
					}
					



    
		MemoriaStruct oneRow_tHashOutput_4 = new MemoriaStruct();
				
					oneRow_tHashOutput_4.IPS_ID = Memoria.IPS_ID;
					oneRow_tHashOutput_4.UORG_ID = Memoria.UORG_ID;
					oneRow_tHashOutput_4.VFACTURADO = Memoria.VFACTURADO;
					oneRow_tHashOutput_4.NCREDITO = Memoria.NCREDITO;
					oneRow_tHashOutput_4.NDEBITO = Memoria.NDEBITO;
					oneRow_tHashOutput_4.VGLOSADO = Memoria.VGLOSADO;
					oneRow_tHashOutput_4.VSOPORTADO = Memoria.VSOPORTADO;
					oneRow_tHashOutput_4.VACEPTADO = Memoria.VACEPTADO;
					oneRow_tHashOutput_4.VRATIFICADO = Memoria.VRATIFICADO;
					oneRow_tHashOutput_4.VPAGAR = Memoria.VPAGAR;
					oneRow_tHashOutput_4.CT_FACTURAS = Memoria.CT_FACTURAS;
					oneRow_tHashOutput_4.PV_PAGADO_PRESTADOR = Memoria.PV_PAGADO_PRESTADOR;
					oneRow_tHashOutput_4.TRADICADO_ID = Memoria.TRADICADO_ID;
					oneRow_tHashOutput_4.TIPO_PAGO = Memoria.TIPO_PAGO;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 
     row16 = Memoria;


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					
	
operation_finder_tAggregateRow_1.UORG_ID = row16.UORG_ID;
			operation_finder_tAggregateRow_1.TRADICADO_ID = row16.TRADICADO_ID;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.UORG_ID = operation_finder_tAggregateRow_1.UORG_ID;
				operation_result_tAggregateRow_1.TRADICADO_ID = operation_finder_tAggregateRow_1.TRADICADO_ID;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_1.VFACTURADO_sum == null) {
						operation_result_tAggregateRow_1.VFACTURADO_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_1.VFACTURADO_sum = operation_result_tAggregateRow_1.VFACTURADO_sum.add(
						new BigDecimal(
							String.valueOf(
								row16.VFACTURADO
							)
						)
					);
					
					if(operation_result_tAggregateRow_1.VPAGAR_sum == null) {
						operation_result_tAggregateRow_1.VPAGAR_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_1.VPAGAR_sum = operation_result_tAggregateRow_1.VPAGAR_sum.add(
						new BigDecimal(
							String.valueOf(
								row16.VPAGAR
							)
						)
					);
					


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */



	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */

} // End of branch "Memoria"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tJava_4Process(globalMap);



/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row12 != null) {
						tHash_Lookup_row12.endGet();
					}
					globalMap.remove( "tHash_Lookup_row12" );

					
					
				
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tOracleOutput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_3 > 0) {
            try {
            	if (pstmt_tOracleOutput_3 != null) {
					
					pstmt_tOracleOutput_3.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_3){
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
		        java.sql.SQLException ne_tOracleOutput_3 = e_tOracleOutput_3.getNextException(),sqle_tOracleOutput_3=null;
		    	String errormessage_tOracleOutput_3;
				if (ne_tOracleOutput_3 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_3 = new java.sql.SQLException(e_tOracleOutput_3.getMessage() + "\ncaused by: " + ne_tOracleOutput_3.getMessage(), ne_tOracleOutput_3.getSQLState(), ne_tOracleOutput_3.getErrorCode(), ne_tOracleOutput_3);
					errormessage_tOracleOutput_3 = sqle_tOracleOutput_3.getMessage();
				}else{
					errormessage_tOracleOutput_3 = e_tOracleOutput_3.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_3);
            	
        	}
        	if (pstmt_tOracleOutput_3 != null) {
            	tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_3
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
				rowsToCommitCount_tOracleOutput_3 += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
            }
        }
        if(pstmt_tOracleOutput_3 != null) {
			
				pstmt_tOracleOutput_3.close();
				resourceMap.remove("pstmt_tOracleOutput_3");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_3", true);
		if(commitCounter_tOracleOutput_3 > 0 && rowsToCommitCount_tOracleOutput_3 != 0) {
			
		}
		conn_tOracleOutput_3.commit();
		if(commitCounter_tOracleOutput_3 > 0 && rowsToCommitCount_tOracleOutput_3 != 0) {
			
			rowsToCommitCount_tOracleOutput_3 = 0;
		}
		commitCounter_tOracleOutput_3 = 0;
		
		
		conn_tOracleOutput_3 .close();
		
		resourceMap.put("finish_tOracleOutput_3", true);
   	

	
	nb_line_deleted_tOracleOutput_3=nb_line_deleted_tOracleOutput_3+ deletedCount_tOracleOutput_3;
	nb_line_update_tOracleOutput_3=nb_line_update_tOracleOutput_3 + updatedCount_tOracleOutput_3;
	nb_line_inserted_tOracleOutput_3=nb_line_inserted_tOracleOutput_3 + insertedCount_tOracleOutput_3;
	nb_line_rejected_tOracleOutput_3=nb_line_rejected_tOracleOutput_3 + rejectedCount_tOracleOutput_3;
	
        globalMap.put("tOracleOutput_3_NB_LINE",nb_line_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_UPDATED",nb_line_update_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_3);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Elimina");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_3", true);
end_Hash.put("tOracleOutput_3", System.currentTimeMillis());




/**
 * [tOracleOutput_3 end ] stop
 */




	
	/**
	 * [tOracleOutput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_4 > 0) {
            try {
            	if (pstmt_tOracleOutput_4 != null) {
					
					pstmt_tOracleOutput_4.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_4){
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
		        java.sql.SQLException ne_tOracleOutput_4 = e_tOracleOutput_4.getNextException(),sqle_tOracleOutput_4=null;
		    	String errormessage_tOracleOutput_4;
				if (ne_tOracleOutput_4 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_4 = new java.sql.SQLException(e_tOracleOutput_4.getMessage() + "\ncaused by: " + ne_tOracleOutput_4.getMessage(), ne_tOracleOutput_4.getSQLState(), ne_tOracleOutput_4.getErrorCode(), ne_tOracleOutput_4);
					errormessage_tOracleOutput_4 = sqle_tOracleOutput_4.getMessage();
				}else{
					errormessage_tOracleOutput_4 = e_tOracleOutput_4.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_4);
            	
        	}
        	if (pstmt_tOracleOutput_4 != null) {
            	tmp_batchUpdateCount_tOracleOutput_4 = pstmt_tOracleOutput_4.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_4
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
				rowsToCommitCount_tOracleOutput_4 += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
            }
        }
        if(pstmt_tOracleOutput_4 != null) {
			
				pstmt_tOracleOutput_4.close();
				resourceMap.remove("pstmt_tOracleOutput_4");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_4", true);
		if(commitCounter_tOracleOutput_4 > 0 && rowsToCommitCount_tOracleOutput_4 != 0) {
			
		}
		conn_tOracleOutput_4.commit();
		if(commitCounter_tOracleOutput_4 > 0 && rowsToCommitCount_tOracleOutput_4 != 0) {
			
			rowsToCommitCount_tOracleOutput_4 = 0;
		}
		commitCounter_tOracleOutput_4 = 0;
		
		
		conn_tOracleOutput_4 .close();
		
		resourceMap.put("finish_tOracleOutput_4", true);
   	

	
	nb_line_deleted_tOracleOutput_4=nb_line_deleted_tOracleOutput_4+ deletedCount_tOracleOutput_4;
	nb_line_update_tOracleOutput_4=nb_line_update_tOracleOutput_4 + updatedCount_tOracleOutput_4;
	nb_line_inserted_tOracleOutput_4=nb_line_inserted_tOracleOutput_4 + insertedCount_tOracleOutput_4;
	nb_line_rejected_tOracleOutput_4=nb_line_rejected_tOracleOutput_4 + rejectedCount_tOracleOutput_4;
	
        globalMap.put("tOracleOutput_4_NB_LINE",nb_line_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_UPDATED",nb_line_update_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_4);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta1");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_4", true);
end_Hash.put("tOracleOutput_4", System.currentTimeMillis());




/**
 * [tOracleOutput_4 end ] stop
 */




	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Memoria");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_ACM_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

            				    row14.UORG_ID = aggregated_row_tAggregateRow_1.UORG_ID;
            				    row14.VFACTURADO = aggregated_row_tAggregateRow_1.VFACTURADO_sum;
                                	row14.VPAGAR = aggregated_row_tAggregateRow_1.VPAGAR_sum;
                                	
            				    row14.TRADICADO_ID = aggregated_row_tAggregateRow_1.TRADICADO_ID;
            				    

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					



    
		row14Struct oneRow_tHashOutput_3 = new row14Struct();
				
					oneRow_tHashOutput_3.UORG_ID = row14.UORG_ID;
					oneRow_tHashOutput_3.VFACTURADO = row14.VFACTURADO;
					oneRow_tHashOutput_3.VPAGAR = row14.VPAGAR;
					oneRow_tHashOutput_3.TRADICADO_ID = row14.TRADICADO_ID;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tHashInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row12"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tOracleOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_3 = null;
                if ((pstmtToClose_tOracleOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_3")) != null) {
                    pstmtToClose_tOracleOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_3") == null){
            java.sql.Connection ctn_tOracleOutput_3 = null;
            if((ctn_tOracleOutput_3 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_3")) != null){
                try {
                    ctn_tOracleOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_3) {
                    String errorMessage_tOracleOutput_3 = "failed to close the connection in tOracleOutput_3 :" + sqlEx_tOracleOutput_3.getMessage();
                    System.err.println(errorMessage_tOracleOutput_3);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_3 finally ] stop
 */




	
	/**
	 * [tOracleOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_4 = null;
                if ((pstmtToClose_tOracleOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_4")) != null) {
                    pstmtToClose_tOracleOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_4") == null){
            java.sql.Connection ctn_tOracleOutput_4 = null;
            if((ctn_tOracleOutput_4 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_4")) != null){
                try {
                    ctn_tOracleOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_4) {
                    String errorMessage_tOracleOutput_4 = "failed to close the connection in tOracleOutput_4 :" + sqlEx_tOracleOutput_4.getMessage();
                    System.err.println(errorMessage_tOracleOutput_4);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_4 finally ] stop
 */




	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class Elimina1Struct implements routines.system.IPersistableRow<Elimina1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return false;
				}
				public Boolean IPS_IDIsKey(){
				    return true;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal TRADICADO_ID;

				public BigDecimal getTRADICADO_ID () {
					return this.TRADICADO_ID;
				}

				public Boolean TRADICADO_IDIsNullable(){
				    return false;
				}
				public Boolean TRADICADO_IDIsKey(){
				    return true;
				}
				public Integer TRADICADO_IDLength(){
				    return 0;
				}
				public Integer TRADICADO_IDPrecision(){
				    return null;
				}
				public String TRADICADO_IDDefault(){
				
					return "";
				
				}
				public String TRADICADO_IDComment(){
				
				    return "";
				
				}
				public String TRADICADO_IDPattern(){
				
					return "";
				
				}
				public String TRADICADO_IDOriginalDbColumnName(){
				
					return "TRADICADO_ID";
				
				}

				
			    public BigDecimal TIPO_PAGO;

				public BigDecimal getTIPO_PAGO () {
					return this.TIPO_PAGO;
				}

				public Boolean TIPO_PAGOIsNullable(){
				    return true;
				}
				public Boolean TIPO_PAGOIsKey(){
				    return true;
				}
				public Integer TIPO_PAGOLength(){
				    return 0;
				}
				public Integer TIPO_PAGOPrecision(){
				    return null;
				}
				public String TIPO_PAGODefault(){
				
					return "";
				
				}
				public String TIPO_PAGOComment(){
				
				    return "";
				
				}
				public String TIPO_PAGOPattern(){
				
					return "";
				
				}
				public String TIPO_PAGOOriginalDbColumnName(){
				
					return "TIPO_PAGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.IPS_ID == null) ? 0 : this.IPS_ID.hashCode());
					
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.TRADICADO_ID == null) ? 0 : this.TRADICADO_ID.hashCode());
					
						result = prime * result + ((this.TIPO_PAGO == null) ? 0 : this.TIPO_PAGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Elimina1Struct other = (Elimina1Struct) obj;
		
						if (this.IPS_ID == null) {
							if (other.IPS_ID != null)
								return false;
						
						} else if (!this.IPS_ID.equals(other.IPS_ID))
						
							return false;
					
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.TRADICADO_ID == null) {
							if (other.TRADICADO_ID != null)
								return false;
						
						} else if (!this.TRADICADO_ID.equals(other.TRADICADO_ID))
						
							return false;
					
						if (this.TIPO_PAGO == null) {
							if (other.TIPO_PAGO != null)
								return false;
						
						} else if (!this.TIPO_PAGO.equals(other.TIPO_PAGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Elimina1Struct other) {

		other.IPS_ID = this.IPS_ID;
	            other.UORG_ID = this.UORG_ID;
	            other.TRADICADO_ID = this.TRADICADO_ID;
	            other.TIPO_PAGO = this.TIPO_PAGO;
	            
	}

	public void copyKeysDataTo(Elimina1Struct other) {

		other.IPS_ID = this.IPS_ID;
	            	other.UORG_ID = this.UORG_ID;
	            	other.TRADICADO_ID = this.TRADICADO_ID;
	            	other.TIPO_PAGO = this.TIPO_PAGO;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.TRADICADO_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.TRADICADO_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRADICADO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO_PAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TRADICADO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO_PAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",TRADICADO_ID="+String.valueOf(TRADICADO_ID));
		sb.append(",TIPO_PAGO="+String.valueOf(TIPO_PAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Elimina1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.IPS_ID, other.IPS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TRADICADO_ID, other.TRADICADO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIPO_PAGO, other.TIPO_PAGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Inserta2Struct implements routines.system.IPersistableRow<Inserta2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return false;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public BigDecimal TRADICADO_ID;

				public BigDecimal getTRADICADO_ID () {
					return this.TRADICADO_ID;
				}

				public Boolean TRADICADO_IDIsNullable(){
				    return false;
				}
				public Boolean TRADICADO_IDIsKey(){
				    return false;
				}
				public Integer TRADICADO_IDLength(){
				    return 0;
				}
				public Integer TRADICADO_IDPrecision(){
				    return null;
				}
				public String TRADICADO_IDDefault(){
				
					return "";
				
				}
				public String TRADICADO_IDComment(){
				
				    return "";
				
				}
				public String TRADICADO_IDPattern(){
				
					return "";
				
				}
				public String TRADICADO_IDOriginalDbColumnName(){
				
					return "TRADICADO_ID";
				
				}

				
			    public BigDecimal TIPO_PAGO;

				public BigDecimal getTIPO_PAGO () {
					return this.TIPO_PAGO;
				}

				public Boolean TIPO_PAGOIsNullable(){
				    return true;
				}
				public Boolean TIPO_PAGOIsKey(){
				    return false;
				}
				public Integer TIPO_PAGOLength(){
				    return 0;
				}
				public Integer TIPO_PAGOPrecision(){
				    return null;
				}
				public String TIPO_PAGODefault(){
				
					return "";
				
				}
				public String TIPO_PAGOComment(){
				
				    return "";
				
				}
				public String TIPO_PAGOPattern(){
				
					return "";
				
				}
				public String TIPO_PAGOOriginalDbColumnName(){
				
					return "TIPO_PAGO";
				
				}

				
			    public BigDecimal CT_FACTURAS;

				public BigDecimal getCT_FACTURAS () {
					return this.CT_FACTURAS;
				}

				public Boolean CT_FACTURASIsNullable(){
				    return true;
				}
				public Boolean CT_FACTURASIsKey(){
				    return false;
				}
				public Integer CT_FACTURASLength(){
				    return 0;
				}
				public Integer CT_FACTURASPrecision(){
				    return 0;
				}
				public String CT_FACTURASDefault(){
				
					return "";
				
				}
				public String CT_FACTURASComment(){
				
				    return "";
				
				}
				public String CT_FACTURASPattern(){
				
					return "";
				
				}
				public String CT_FACTURASOriginalDbColumnName(){
				
					return "CT_FACTURAS";
				
				}

				
			    public BigDecimal VALOR_FACTURADO;

				public BigDecimal getVALOR_FACTURADO () {
					return this.VALOR_FACTURADO;
				}

				public Boolean VALOR_FACTURADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_FACTURADOIsKey(){
				    return false;
				}
				public Integer VALOR_FACTURADOLength(){
				    return 0;
				}
				public Integer VALOR_FACTURADOPrecision(){
				    return 0;
				}
				public String VALOR_FACTURADODefault(){
				
					return "";
				
				}
				public String VALOR_FACTURADOComment(){
				
				    return "";
				
				}
				public String VALOR_FACTURADOPattern(){
				
					return "";
				
				}
				public String VALOR_FACTURADOOriginalDbColumnName(){
				
					return "VALOR_FACTURADO";
				
				}

				
			    public BigDecimal VT_PAGADO_IPS;

				public BigDecimal getVT_PAGADO_IPS () {
					return this.VT_PAGADO_IPS;
				}

				public Boolean VT_PAGADO_IPSIsNullable(){
				    return true;
				}
				public Boolean VT_PAGADO_IPSIsKey(){
				    return false;
				}
				public Integer VT_PAGADO_IPSLength(){
				    return 0;
				}
				public Integer VT_PAGADO_IPSPrecision(){
				    return 0;
				}
				public String VT_PAGADO_IPSDefault(){
				
					return "";
				
				}
				public String VT_PAGADO_IPSComment(){
				
				    return "";
				
				}
				public String VT_PAGADO_IPSPattern(){
				
					return "";
				
				}
				public String VT_PAGADO_IPSOriginalDbColumnName(){
				
					return "VT_PAGADO_IPS";
				
				}

				
			    public BigDecimal VT_PAGADO_ESM;

				public BigDecimal getVT_PAGADO_ESM () {
					return this.VT_PAGADO_ESM;
				}

				public Boolean VT_PAGADO_ESMIsNullable(){
				    return true;
				}
				public Boolean VT_PAGADO_ESMIsKey(){
				    return false;
				}
				public Integer VT_PAGADO_ESMLength(){
				    return 0;
				}
				public Integer VT_PAGADO_ESMPrecision(){
				    return 0;
				}
				public String VT_PAGADO_ESMDefault(){
				
					return "";
				
				}
				public String VT_PAGADO_ESMComment(){
				
				    return "";
				
				}
				public String VT_PAGADO_ESMPattern(){
				
					return "";
				
				}
				public String VT_PAGADO_ESMOriginalDbColumnName(){
				
					return "VT_PAGADO_ESM";
				
				}

				
			    public BigDecimal TFACTURADO_ESM;

				public BigDecimal getTFACTURADO_ESM () {
					return this.TFACTURADO_ESM;
				}

				public Boolean TFACTURADO_ESMIsNullable(){
				    return true;
				}
				public Boolean TFACTURADO_ESMIsKey(){
				    return false;
				}
				public Integer TFACTURADO_ESMLength(){
				    return 0;
				}
				public Integer TFACTURADO_ESMPrecision(){
				    return 0;
				}
				public String TFACTURADO_ESMDefault(){
				
					return "";
				
				}
				public String TFACTURADO_ESMComment(){
				
				    return "";
				
				}
				public String TFACTURADO_ESMPattern(){
				
					return "";
				
				}
				public String TFACTURADO_ESMOriginalDbColumnName(){
				
					return "TFACTURADO_ESM";
				
				}

				
			    public BigDecimal PFACTURADO_TOTAL;

				public BigDecimal getPFACTURADO_TOTAL () {
					return this.PFACTURADO_TOTAL;
				}

				public Boolean PFACTURADO_TOTALIsNullable(){
				    return true;
				}
				public Boolean PFACTURADO_TOTALIsKey(){
				    return false;
				}
				public Integer PFACTURADO_TOTALLength(){
				    return null;
				}
				public Integer PFACTURADO_TOTALPrecision(){
				    return null;
				}
				public String PFACTURADO_TOTALDefault(){
				
					return null;
				
				}
				public String PFACTURADO_TOTALComment(){
				
				    return "";
				
				}
				public String PFACTURADO_TOTALPattern(){
				
					return "";
				
				}
				public String PFACTURADO_TOTALOriginalDbColumnName(){
				
					return "PFACTURADO_TOTAL";
				
				}

				
			    public BigDecimal PV_PAGADO_PRESTADOR;

				public BigDecimal getPV_PAGADO_PRESTADOR () {
					return this.PV_PAGADO_PRESTADOR;
				}

				public Boolean PV_PAGADO_PRESTADORIsNullable(){
				    return true;
				}
				public Boolean PV_PAGADO_PRESTADORIsKey(){
				    return false;
				}
				public Integer PV_PAGADO_PRESTADORLength(){
				    return 0;
				}
				public Integer PV_PAGADO_PRESTADORPrecision(){
				    return 0;
				}
				public String PV_PAGADO_PRESTADORDefault(){
				
					return "";
				
				}
				public String PV_PAGADO_PRESTADORComment(){
				
				    return "";
				
				}
				public String PV_PAGADO_PRESTADORPattern(){
				
					return "";
				
				}
				public String PV_PAGADO_PRESTADOROriginalDbColumnName(){
				
					return "PV_PAGADO_PRESTADOR";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.TRADICADO_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
						this.CT_FACTURAS = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
						this.VT_PAGADO_IPS = (BigDecimal) dis.readObject();
					
						this.VT_PAGADO_ESM = (BigDecimal) dis.readObject();
					
						this.TFACTURADO_ESM = (BigDecimal) dis.readObject();
					
						this.PFACTURADO_TOTAL = (BigDecimal) dis.readObject();
					
						this.PV_PAGADO_PRESTADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.TRADICADO_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
						this.CT_FACTURAS = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
						this.VT_PAGADO_IPS = (BigDecimal) dis.readObject();
					
						this.VT_PAGADO_ESM = (BigDecimal) dis.readObject();
					
						this.TFACTURADO_ESM = (BigDecimal) dis.readObject();
					
						this.PFACTURADO_TOTAL = (BigDecimal) dis.readObject();
					
						this.PV_PAGADO_PRESTADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRADICADO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO_PAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CT_FACTURAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_FACTURADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VT_PAGADO_IPS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VT_PAGADO_ESM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TFACTURADO_ESM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PFACTURADO_TOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PV_PAGADO_PRESTADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TRADICADO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO_PAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CT_FACTURAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_FACTURADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VT_PAGADO_IPS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VT_PAGADO_ESM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFACTURADO_ESM);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PFACTURADO_TOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PV_PAGADO_PRESTADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",TRADICADO_ID="+String.valueOf(TRADICADO_ID));
		sb.append(",TIPO_PAGO="+String.valueOf(TIPO_PAGO));
		sb.append(",CT_FACTURAS="+String.valueOf(CT_FACTURAS));
		sb.append(",VALOR_FACTURADO="+String.valueOf(VALOR_FACTURADO));
		sb.append(",VT_PAGADO_IPS="+String.valueOf(VT_PAGADO_IPS));
		sb.append(",VT_PAGADO_ESM="+String.valueOf(VT_PAGADO_ESM));
		sb.append(",TFACTURADO_ESM="+String.valueOf(TFACTURADO_ESM));
		sb.append(",PFACTURADO_TOTAL="+String.valueOf(PFACTURADO_TOTAL));
		sb.append(",PV_PAGADO_PRESTADOR="+String.valueOf(PV_PAGADO_PRESTADOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return false;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal VFACTURADO;

				public BigDecimal getVFACTURADO () {
					return this.VFACTURADO;
				}

				public Boolean VFACTURADOIsNullable(){
				    return true;
				}
				public Boolean VFACTURADOIsKey(){
				    return false;
				}
				public Integer VFACTURADOLength(){
				    return 0;
				}
				public Integer VFACTURADOPrecision(){
				    return 0;
				}
				public String VFACTURADODefault(){
				
					return "";
				
				}
				public String VFACTURADOComment(){
				
				    return "";
				
				}
				public String VFACTURADOPattern(){
				
					return "";
				
				}
				public String VFACTURADOOriginalDbColumnName(){
				
					return "VFACTURADO";
				
				}

				
			    public BigDecimal NCREDITO;

				public BigDecimal getNCREDITO () {
					return this.NCREDITO;
				}

				public Boolean NCREDITOIsNullable(){
				    return true;
				}
				public Boolean NCREDITOIsKey(){
				    return false;
				}
				public Integer NCREDITOLength(){
				    return 0;
				}
				public Integer NCREDITOPrecision(){
				    return 0;
				}
				public String NCREDITODefault(){
				
					return "";
				
				}
				public String NCREDITOComment(){
				
				    return "";
				
				}
				public String NCREDITOPattern(){
				
					return "";
				
				}
				public String NCREDITOOriginalDbColumnName(){
				
					return "NCREDITO";
				
				}

				
			    public BigDecimal NDEBITO;

				public BigDecimal getNDEBITO () {
					return this.NDEBITO;
				}

				public Boolean NDEBITOIsNullable(){
				    return true;
				}
				public Boolean NDEBITOIsKey(){
				    return false;
				}
				public Integer NDEBITOLength(){
				    return 0;
				}
				public Integer NDEBITOPrecision(){
				    return 0;
				}
				public String NDEBITODefault(){
				
					return "";
				
				}
				public String NDEBITOComment(){
				
				    return "";
				
				}
				public String NDEBITOPattern(){
				
					return "";
				
				}
				public String NDEBITOOriginalDbColumnName(){
				
					return "NDEBITO";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return 0;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return 0;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return 0;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return 0;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VPAGAR;

				public BigDecimal getVPAGAR () {
					return this.VPAGAR;
				}

				public Boolean VPAGARIsNullable(){
				    return true;
				}
				public Boolean VPAGARIsKey(){
				    return false;
				}
				public Integer VPAGARLength(){
				    return 0;
				}
				public Integer VPAGARPrecision(){
				    return 0;
				}
				public String VPAGARDefault(){
				
					return "";
				
				}
				public String VPAGARComment(){
				
				    return "";
				
				}
				public String VPAGARPattern(){
				
					return "";
				
				}
				public String VPAGAROriginalDbColumnName(){
				
					return "VPAGAR";
				
				}

				
			    public BigDecimal CT_FACTURAS;

				public BigDecimal getCT_FACTURAS () {
					return this.CT_FACTURAS;
				}

				public Boolean CT_FACTURASIsNullable(){
				    return true;
				}
				public Boolean CT_FACTURASIsKey(){
				    return false;
				}
				public Integer CT_FACTURASLength(){
				    return 0;
				}
				public Integer CT_FACTURASPrecision(){
				    return 0;
				}
				public String CT_FACTURASDefault(){
				
					return "";
				
				}
				public String CT_FACTURASComment(){
				
				    return "";
				
				}
				public String CT_FACTURASPattern(){
				
					return "";
				
				}
				public String CT_FACTURASOriginalDbColumnName(){
				
					return "CT_FACTURAS";
				
				}

				
			    public BigDecimal PV_PAGADO_PRESTADOR;

				public BigDecimal getPV_PAGADO_PRESTADOR () {
					return this.PV_PAGADO_PRESTADOR;
				}

				public Boolean PV_PAGADO_PRESTADORIsNullable(){
				    return true;
				}
				public Boolean PV_PAGADO_PRESTADORIsKey(){
				    return false;
				}
				public Integer PV_PAGADO_PRESTADORLength(){
				    return 0;
				}
				public Integer PV_PAGADO_PRESTADORPrecision(){
				    return 0;
				}
				public String PV_PAGADO_PRESTADORDefault(){
				
					return "";
				
				}
				public String PV_PAGADO_PRESTADORComment(){
				
				    return "";
				
				}
				public String PV_PAGADO_PRESTADORPattern(){
				
					return "";
				
				}
				public String PV_PAGADO_PRESTADOROriginalDbColumnName(){
				
					return "PV_PAGADO_PRESTADOR";
				
				}

				
			    public BigDecimal TRADICADO_ID;

				public BigDecimal getTRADICADO_ID () {
					return this.TRADICADO_ID;
				}

				public Boolean TRADICADO_IDIsNullable(){
				    return true;
				}
				public Boolean TRADICADO_IDIsKey(){
				    return false;
				}
				public Integer TRADICADO_IDLength(){
				    return null;
				}
				public Integer TRADICADO_IDPrecision(){
				    return null;
				}
				public String TRADICADO_IDDefault(){
				
					return null;
				
				}
				public String TRADICADO_IDComment(){
				
				    return "";
				
				}
				public String TRADICADO_IDPattern(){
				
					return "";
				
				}
				public String TRADICADO_IDOriginalDbColumnName(){
				
					return "TRADICADO_ID";
				
				}

				
			    public BigDecimal TIPO_PAGO;

				public BigDecimal getTIPO_PAGO () {
					return this.TIPO_PAGO;
				}

				public Boolean TIPO_PAGOIsNullable(){
				    return true;
				}
				public Boolean TIPO_PAGOIsKey(){
				    return false;
				}
				public Integer TIPO_PAGOLength(){
				    return null;
				}
				public Integer TIPO_PAGOPrecision(){
				    return null;
				}
				public String TIPO_PAGODefault(){
				
					return null;
				
				}
				public String TIPO_PAGOComment(){
				
				    return "";
				
				}
				public String TIPO_PAGOPattern(){
				
					return "";
				
				}
				public String TIPO_PAGOOriginalDbColumnName(){
				
					return "TIPO_PAGO";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
						this.NCREDITO = (BigDecimal) dis.readObject();
					
						this.NDEBITO = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
						this.CT_FACTURAS = (BigDecimal) dis.readObject();
					
						this.PV_PAGADO_PRESTADOR = (BigDecimal) dis.readObject();
					
						this.TRADICADO_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
						this.NCREDITO = (BigDecimal) dis.readObject();
					
						this.NDEBITO = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
						this.CT_FACTURAS = (BigDecimal) dis.readObject();
					
						this.PV_PAGADO_PRESTADOR = (BigDecimal) dis.readObject();
					
						this.TRADICADO_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VFACTURADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NCREDITO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NDEBITO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPAGAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CT_FACTURAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PV_PAGADO_PRESTADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRADICADO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO_PAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VFACTURADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NCREDITO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NDEBITO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPAGAR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CT_FACTURAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PV_PAGADO_PRESTADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TRADICADO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO_PAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",VFACTURADO="+String.valueOf(VFACTURADO));
		sb.append(",NCREDITO="+String.valueOf(NCREDITO));
		sb.append(",NDEBITO="+String.valueOf(NDEBITO));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VPAGAR="+String.valueOf(VPAGAR));
		sb.append(",CT_FACTURAS="+String.valueOf(CT_FACTURAS));
		sb.append(",PV_PAGADO_PRESTADOR="+String.valueOf(PV_PAGADO_PRESTADOR));
		sb.append(",TRADICADO_ID="+String.valueOf(TRADICADO_ID));
		sb.append(",TIPO_PAGO="+String.valueOf(TIPO_PAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_4Struct implements routines.system.IPersistableRow<after_tHashInput_4Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return false;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal VFACTURADO;

				public BigDecimal getVFACTURADO () {
					return this.VFACTURADO;
				}

				public Boolean VFACTURADOIsNullable(){
				    return true;
				}
				public Boolean VFACTURADOIsKey(){
				    return false;
				}
				public Integer VFACTURADOLength(){
				    return 0;
				}
				public Integer VFACTURADOPrecision(){
				    return 0;
				}
				public String VFACTURADODefault(){
				
					return "";
				
				}
				public String VFACTURADOComment(){
				
				    return "";
				
				}
				public String VFACTURADOPattern(){
				
					return "";
				
				}
				public String VFACTURADOOriginalDbColumnName(){
				
					return "VFACTURADO";
				
				}

				
			    public BigDecimal NCREDITO;

				public BigDecimal getNCREDITO () {
					return this.NCREDITO;
				}

				public Boolean NCREDITOIsNullable(){
				    return true;
				}
				public Boolean NCREDITOIsKey(){
				    return false;
				}
				public Integer NCREDITOLength(){
				    return 0;
				}
				public Integer NCREDITOPrecision(){
				    return 0;
				}
				public String NCREDITODefault(){
				
					return "";
				
				}
				public String NCREDITOComment(){
				
				    return "";
				
				}
				public String NCREDITOPattern(){
				
					return "";
				
				}
				public String NCREDITOOriginalDbColumnName(){
				
					return "NCREDITO";
				
				}

				
			    public BigDecimal NDEBITO;

				public BigDecimal getNDEBITO () {
					return this.NDEBITO;
				}

				public Boolean NDEBITOIsNullable(){
				    return true;
				}
				public Boolean NDEBITOIsKey(){
				    return false;
				}
				public Integer NDEBITOLength(){
				    return 0;
				}
				public Integer NDEBITOPrecision(){
				    return 0;
				}
				public String NDEBITODefault(){
				
					return "";
				
				}
				public String NDEBITOComment(){
				
				    return "";
				
				}
				public String NDEBITOPattern(){
				
					return "";
				
				}
				public String NDEBITOOriginalDbColumnName(){
				
					return "NDEBITO";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return 0;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return 0;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return 0;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return 0;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VPAGAR;

				public BigDecimal getVPAGAR () {
					return this.VPAGAR;
				}

				public Boolean VPAGARIsNullable(){
				    return true;
				}
				public Boolean VPAGARIsKey(){
				    return false;
				}
				public Integer VPAGARLength(){
				    return 0;
				}
				public Integer VPAGARPrecision(){
				    return 0;
				}
				public String VPAGARDefault(){
				
					return "";
				
				}
				public String VPAGARComment(){
				
				    return "";
				
				}
				public String VPAGARPattern(){
				
					return "";
				
				}
				public String VPAGAROriginalDbColumnName(){
				
					return "VPAGAR";
				
				}

				
			    public BigDecimal CT_FACTURAS;

				public BigDecimal getCT_FACTURAS () {
					return this.CT_FACTURAS;
				}

				public Boolean CT_FACTURASIsNullable(){
				    return true;
				}
				public Boolean CT_FACTURASIsKey(){
				    return false;
				}
				public Integer CT_FACTURASLength(){
				    return 0;
				}
				public Integer CT_FACTURASPrecision(){
				    return 0;
				}
				public String CT_FACTURASDefault(){
				
					return "";
				
				}
				public String CT_FACTURASComment(){
				
				    return "";
				
				}
				public String CT_FACTURASPattern(){
				
					return "";
				
				}
				public String CT_FACTURASOriginalDbColumnName(){
				
					return "CT_FACTURAS";
				
				}

				
			    public BigDecimal PV_PAGADO_PRESTADOR;

				public BigDecimal getPV_PAGADO_PRESTADOR () {
					return this.PV_PAGADO_PRESTADOR;
				}

				public Boolean PV_PAGADO_PRESTADORIsNullable(){
				    return true;
				}
				public Boolean PV_PAGADO_PRESTADORIsKey(){
				    return false;
				}
				public Integer PV_PAGADO_PRESTADORLength(){
				    return 0;
				}
				public Integer PV_PAGADO_PRESTADORPrecision(){
				    return 0;
				}
				public String PV_PAGADO_PRESTADORDefault(){
				
					return "";
				
				}
				public String PV_PAGADO_PRESTADORComment(){
				
				    return "";
				
				}
				public String PV_PAGADO_PRESTADORPattern(){
				
					return "";
				
				}
				public String PV_PAGADO_PRESTADOROriginalDbColumnName(){
				
					return "PV_PAGADO_PRESTADOR";
				
				}

				
			    public BigDecimal TRADICADO_ID;

				public BigDecimal getTRADICADO_ID () {
					return this.TRADICADO_ID;
				}

				public Boolean TRADICADO_IDIsNullable(){
				    return true;
				}
				public Boolean TRADICADO_IDIsKey(){
				    return false;
				}
				public Integer TRADICADO_IDLength(){
				    return null;
				}
				public Integer TRADICADO_IDPrecision(){
				    return null;
				}
				public String TRADICADO_IDDefault(){
				
					return null;
				
				}
				public String TRADICADO_IDComment(){
				
				    return "";
				
				}
				public String TRADICADO_IDPattern(){
				
					return "";
				
				}
				public String TRADICADO_IDOriginalDbColumnName(){
				
					return "TRADICADO_ID";
				
				}

				
			    public BigDecimal TIPO_PAGO;

				public BigDecimal getTIPO_PAGO () {
					return this.TIPO_PAGO;
				}

				public Boolean TIPO_PAGOIsNullable(){
				    return true;
				}
				public Boolean TIPO_PAGOIsKey(){
				    return false;
				}
				public Integer TIPO_PAGOLength(){
				    return null;
				}
				public Integer TIPO_PAGOPrecision(){
				    return null;
				}
				public String TIPO_PAGODefault(){
				
					return null;
				
				}
				public String TIPO_PAGOComment(){
				
				    return "";
				
				}
				public String TIPO_PAGOPattern(){
				
					return "";
				
				}
				public String TIPO_PAGOOriginalDbColumnName(){
				
					return "TIPO_PAGO";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
						this.NCREDITO = (BigDecimal) dis.readObject();
					
						this.NDEBITO = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
						this.CT_FACTURAS = (BigDecimal) dis.readObject();
					
						this.PV_PAGADO_PRESTADOR = (BigDecimal) dis.readObject();
					
						this.TRADICADO_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
						this.NCREDITO = (BigDecimal) dis.readObject();
					
						this.NDEBITO = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VPAGAR = (BigDecimal) dis.readObject();
					
						this.CT_FACTURAS = (BigDecimal) dis.readObject();
					
						this.PV_PAGADO_PRESTADOR = (BigDecimal) dis.readObject();
					
						this.TRADICADO_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VFACTURADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NCREDITO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NDEBITO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VPAGAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CT_FACTURAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PV_PAGADO_PRESTADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRADICADO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO_PAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VFACTURADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NCREDITO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NDEBITO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VPAGAR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CT_FACTURAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PV_PAGADO_PRESTADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TRADICADO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO_PAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",VFACTURADO="+String.valueOf(VFACTURADO));
		sb.append(",NCREDITO="+String.valueOf(NCREDITO));
		sb.append(",NDEBITO="+String.valueOf(NDEBITO));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VPAGAR="+String.valueOf(VPAGAR));
		sb.append(",CT_FACTURAS="+String.valueOf(CT_FACTURAS));
		sb.append(",PV_PAGADO_PRESTADOR="+String.valueOf(PV_PAGADO_PRESTADOR));
		sb.append(",TRADICADO_ID="+String.valueOf(TRADICADO_ID));
		sb.append(",TIPO_PAGO="+String.valueOf(TIPO_PAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_3Process(globalMap);

		row17Struct row17 = new row17Struct();
Elimina1Struct Elimina1 = new Elimina1Struct();
Inserta2Struct Inserta2 = new Inserta2Struct();





	
	/**
	 * [tOracleOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_5", false);
		start_Hash.put("tOracleOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Elimina1");
					}
				
		int tos_count_tOracleOutput_5 = 0;
		






        int deleteKeyCount_tOracleOutput_5 = 4;
        if(deleteKeyCount_tOracleOutput_5 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_5 = 0;
    int nb_line_update_tOracleOutput_5 = 0;
    int nb_line_inserted_tOracleOutput_5 = 0;
    int nb_line_deleted_tOracleOutput_5 = 0;
    int nb_line_rejected_tOracleOutput_5 = 0;

    int tmp_batchUpdateCount_tOracleOutput_5 = 0;

    int deletedCount_tOracleOutput_5=0;
    int updatedCount_tOracleOutput_5=0;
    int insertedCount_tOracleOutput_5=0;
    int rowsToCommitCount_tOracleOutput_5=0;
    int rejectedCount_tOracleOutput_5=0;

    boolean whetherReject_tOracleOutput_5 = false;

    java.sql.Connection conn_tOracleOutput_5 = null;

    //optional table
    String dbschema_tOracleOutput_5 = null;
    String tableName_tOracleOutput_5 = null;
                    String driverClass_tOracleOutput_5 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_5);
                String url_tOracleOutput_5 = null;
                    url_tOracleOutput_5 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_5 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_5 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_5 = decryptedPassword_tOracleOutput_5;
                dbschema_tOracleOutput_5 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_5 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_5.put("user",dbUser_tOracleOutput_5);
                    atnParamsPrope_tOracleOutput_5.put("password",dbPwd_tOracleOutput_5);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_5.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_5 = java.sql.DriverManager.getConnection(url_tOracleOutput_5, atnParamsPrope_tOracleOutput_5);
        resourceMap.put("conn_tOracleOutput_5", conn_tOracleOutput_5);
            conn_tOracleOutput_5.setAutoCommit(false);
            int commitEvery_tOracleOutput_5 = 1000;
            int commitCounter_tOracleOutput_5 = 0;
        int batchSize_tOracleOutput_5 = 1000;
        int batchSizeCounter_tOracleOutput_5=0;
        int count_tOracleOutput_5=0;

        if(dbschema_tOracleOutput_5 == null || dbschema_tOracleOutput_5.trim().length() == 0) {
            tableName_tOracleOutput_5 = ("BACM_PARTICIPACIONES");
        } else {
            tableName_tOracleOutput_5 = dbschema_tOracleOutput_5 + "." + ("BACM_PARTICIPACIONES");
        }
                String delete_tOracleOutput_5 = "DELETE FROM " + tableName_tOracleOutput_5 + " WHERE IPS_ID = ? AND UORG_ID = ? AND TRADICADO_ID = ? AND TIPO_PAGO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_5 = conn_tOracleOutput_5.prepareStatement(delete_tOracleOutput_5);
                resourceMap.put("pstmt_tOracleOutput_5", pstmt_tOracleOutput_5);





 



/**
 * [tOracleOutput_5 begin ] stop
 */




	
	/**
	 * [tOracleOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_6", false);
		start_Hash.put("tOracleOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta2");
					}
				
		int tos_count_tOracleOutput_6 = 0;
		






    
    int nb_line_tOracleOutput_6 = 0;
    int nb_line_update_tOracleOutput_6 = 0;
    int nb_line_inserted_tOracleOutput_6 = 0;
    int nb_line_deleted_tOracleOutput_6 = 0;
    int nb_line_rejected_tOracleOutput_6 = 0;

    int tmp_batchUpdateCount_tOracleOutput_6 = 0;

    int deletedCount_tOracleOutput_6=0;
    int updatedCount_tOracleOutput_6=0;
    int insertedCount_tOracleOutput_6=0;
    int rowsToCommitCount_tOracleOutput_6=0;
    int rejectedCount_tOracleOutput_6=0;

    boolean whetherReject_tOracleOutput_6 = false;

    java.sql.Connection conn_tOracleOutput_6 = null;

    //optional table
    String dbschema_tOracleOutput_6 = null;
    String tableName_tOracleOutput_6 = null;
                    String driverClass_tOracleOutput_6 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_6);
                String url_tOracleOutput_6 = null;
                    url_tOracleOutput_6 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_6 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_6 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_6 = decryptedPassword_tOracleOutput_6;
                dbschema_tOracleOutput_6 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_6 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_6.put("user",dbUser_tOracleOutput_6);
                    atnParamsPrope_tOracleOutput_6.put("password",dbPwd_tOracleOutput_6);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_6.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_6 = java.sql.DriverManager.getConnection(url_tOracleOutput_6, atnParamsPrope_tOracleOutput_6);
        resourceMap.put("conn_tOracleOutput_6", conn_tOracleOutput_6);
            conn_tOracleOutput_6.setAutoCommit(false);
            int commitEvery_tOracleOutput_6 = 1000;
            int commitCounter_tOracleOutput_6 = 0;
        int batchSize_tOracleOutput_6 = 1000;
        int batchSizeCounter_tOracleOutput_6=0;
        int count_tOracleOutput_6=0;

        if(dbschema_tOracleOutput_6 == null || dbschema_tOracleOutput_6.trim().length() == 0) {
            tableName_tOracleOutput_6 = ("BACM_PARTICIPACIONES");
        } else {
            tableName_tOracleOutput_6 = dbschema_tOracleOutput_6 + "." + ("BACM_PARTICIPACIONES");
        }
                String insert_tOracleOutput_6 = "INSERT INTO " + tableName_tOracleOutput_6 + " (UORG_ID,IPS_ID,TRADICADO_ID,TIPO_PAGO,CT_FACTURAS,VALOR_FACTURADO,VT_PAGADO_IPS,VT_PAGADO_ESM,TFACTURADO_ESM,PFACTURADO_TOTAL,PV_PAGADO_PRESTADOR) VALUES (?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_6 = conn_tOracleOutput_6.prepareStatement(insert_tOracleOutput_6);
                        resourceMap.put("pstmt_tOracleOutput_6", pstmt_tOracleOutput_6);





 



/**
 * [tOracleOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
					globalMap.get( "tHash_Lookup_row15" ))
					;					
					
	

row15Struct row15HashKey = new row15Struct();
row15Struct row15Default = new row15Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
Elimina1Struct Elimina1_tmp = new Elimina1Struct();
Inserta2Struct Inserta2_tmp = new Inserta2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<MemoriaStruct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_ACM_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<MemoriaStruct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    MemoriaStruct next_tHashInput_4 = iterator_tHashInput_4.next();

	row17.IPS_ID = next_tHashInput_4.IPS_ID;
	row17.UORG_ID = next_tHashInput_4.UORG_ID;
	row17.VFACTURADO = next_tHashInput_4.VFACTURADO;
	row17.NCREDITO = next_tHashInput_4.NCREDITO;
	row17.NDEBITO = next_tHashInput_4.NDEBITO;
	row17.VGLOSADO = next_tHashInput_4.VGLOSADO;
	row17.VSOPORTADO = next_tHashInput_4.VSOPORTADO;
	row17.VACEPTADO = next_tHashInput_4.VACEPTADO;
	row17.VRATIFICADO = next_tHashInput_4.VRATIFICADO;
	row17.VPAGAR = next_tHashInput_4.VPAGAR;
	row17.CT_FACTURAS = next_tHashInput_4.CT_FACTURAS;
	row17.PV_PAGADO_PRESTADOR = next_tHashInput_4.PV_PAGADO_PRESTADOR;
	row17.TRADICADO_ID = next_tHashInput_4.TRADICADO_ID;
	row17.TIPO_PAGO = next_tHashInput_4.TIPO_PAGO;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
						row15Struct row15 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row15" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow15 = false;
       		  	    	
       		  	    	
 							row15Struct row15ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row15HashKey.UORG_ID = row17.UORG_ID ;
                        		    		
                        		    		    row15HashKey.TRADICADO_ID = row17.TRADICADO_ID ;
                        		    		

								
		                        	row15HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row15.lookup( row15HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row15.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
	
		  								forceLooprow15 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow15 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row15 != null && tHash_Lookup_row15.hasNext()) || forceLooprow15) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row15'
									
                    		  	 
							   
                    		  	 
	       		  	    	row15Struct fromLookup_row15 = null;
							row15 = row15Default;
										 
							
								
								if(!forceLooprow15) { // G 46
								
							
								 
							
								
								fromLookup_row15 = tHash_Lookup_row15.next();

							

							if(fromLookup_row15 != null) {
								row15 = fromLookup_row15;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow15 = false;
									 	
							
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

Elimina1 = null;
Inserta2 = null;

if(!rejectedInnerJoin_tMap_3 ) {

// # Output table : 'Elimina1'
Elimina1_tmp.IPS_ID = row17.IPS_ID ;
Elimina1_tmp.UORG_ID = row17.UORG_ID ;
Elimina1_tmp.TRADICADO_ID = row17.TRADICADO_ID ;
Elimina1_tmp.TIPO_PAGO = row17.TIPO_PAGO ;
Elimina1 = Elimina1_tmp;

// # Output table : 'Inserta2'
Inserta2_tmp.UORG_ID = row17.UORG_ID ;
Inserta2_tmp.IPS_ID = row17.IPS_ID ;
Inserta2_tmp.TRADICADO_ID = row17.TRADICADO_ID ;
Inserta2_tmp.TIPO_PAGO = row17.TIPO_PAGO ;
Inserta2_tmp.CT_FACTURAS = row17.CT_FACTURAS ;
Inserta2_tmp.VALOR_FACTURADO = row17.VFACTURADO ;
Inserta2_tmp.VT_PAGADO_IPS = row17.VPAGAR ;
Inserta2_tmp.VT_PAGADO_ESM = row15.VPAGAR ;
Inserta2_tmp.TFACTURADO_ESM = row15.VFACTURADO ;
Inserta2_tmp.PFACTURADO_TOTAL = row17.VFACTURADO != null && row15.VFACTURADO  != null?
(row15.VFACTURADO.compareTo(new BigDecimal(0)) == 1?((row17.VFACTURADO.divide(row15.VFACTURADO,java.math.MathContext.DECIMAL32)).multiply(new BigDecimal(100))):null): null ;
Inserta2_tmp.PV_PAGADO_PRESTADOR = row17.PV_PAGADO_PRESTADOR ;
Inserta2 = Inserta2_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "Elimina1"
if(Elimina1 != null) { 



	
	/**
	 * [tOracleOutput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Elimina1"
						
						);
					}
					



        whetherReject_tOracleOutput_5 = false;
                    pstmt_tOracleOutput_5.setBigDecimal(1, Elimina1.IPS_ID);

                    pstmt_tOracleOutput_5.setBigDecimal(2, Elimina1.UORG_ID);

                    pstmt_tOracleOutput_5.setBigDecimal(3, Elimina1.TRADICADO_ID);

                    pstmt_tOracleOutput_5.setBigDecimal(4, Elimina1.TIPO_PAGO);

                pstmt_tOracleOutput_5.addBatch();
                nb_line_tOracleOutput_5++;
                batchSizeCounter_tOracleOutput_5++;
            if (batchSize_tOracleOutput_5 > 0 &&  batchSize_tOracleOutput_5 <= batchSizeCounter_tOracleOutput_5) {
                try {
                    pstmt_tOracleOutput_5.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_5){
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
			        java.sql.SQLException ne_tOracleOutput_5 = e_tOracleOutput_5.getNextException(),sqle_tOracleOutput_5=null;
			    	String errormessage_tOracleOutput_5;
					if (ne_tOracleOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_5 = new java.sql.SQLException(e_tOracleOutput_5.getMessage() + "\ncaused by: " + ne_tOracleOutput_5.getMessage(), ne_tOracleOutput_5.getSQLState(), ne_tOracleOutput_5.getErrorCode(), ne_tOracleOutput_5);
						errormessage_tOracleOutput_5 = sqle_tOracleOutput_5.getMessage();
					}else{
						errormessage_tOracleOutput_5 = e_tOracleOutput_5.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_5);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_5 = pstmt_tOracleOutput_5.getUpdateCount();
                    deletedCount_tOracleOutput_5
                += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
                rowsToCommitCount_tOracleOutput_5 += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
                batchSizeCounter_tOracleOutput_5 = 0;
            }
                commitCounter_tOracleOutput_5++;
                if(commitEvery_tOracleOutput_5 <= commitCounter_tOracleOutput_5) {
                    if(batchSizeCounter_tOracleOutput_5 > 0) {
                        try {
                            pstmt_tOracleOutput_5.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_5){
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
					        java.sql.SQLException ne_tOracleOutput_5 = e_tOracleOutput_5.getNextException(),sqle_tOracleOutput_5=null;
					    	String errormessage_tOracleOutput_5;
							if (ne_tOracleOutput_5 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_5 = new java.sql.SQLException(e_tOracleOutput_5.getMessage() + "\ncaused by: " + ne_tOracleOutput_5.getMessage(), ne_tOracleOutput_5.getSQLState(), ne_tOracleOutput_5.getErrorCode(), ne_tOracleOutput_5);
								errormessage_tOracleOutput_5 = sqle_tOracleOutput_5.getMessage();
							}else{
								errormessage_tOracleOutput_5 = e_tOracleOutput_5.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_5);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_5 = pstmt_tOracleOutput_5.getUpdateCount();
                            deletedCount_tOracleOutput_5
                        += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
                        rowsToCommitCount_tOracleOutput_5 += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_5 != 0){
                    	
                    }
                    conn_tOracleOutput_5.commit();
                    if(rowsToCommitCount_tOracleOutput_5 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_5 = 0;
                    }
                    commitCounter_tOracleOutput_5=0;
                    	batchSizeCounter_tOracleOutput_5=0;
                }

 


	tos_count_tOracleOutput_5++;

/**
 * [tOracleOutput_5 main ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_end ] stop
 */

} // End of branch "Elimina1"




// Start of branch "Inserta2"
if(Inserta2 != null) { 



	
	/**
	 * [tOracleOutput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta2"
						
						);
					}
					



        whetherReject_tOracleOutput_6 = false;
                        pstmt_tOracleOutput_6.setBigDecimal(1, Inserta2.UORG_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(2, Inserta2.IPS_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(3, Inserta2.TRADICADO_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(4, Inserta2.TIPO_PAGO);

                        pstmt_tOracleOutput_6.setBigDecimal(5, Inserta2.CT_FACTURAS);

                        pstmt_tOracleOutput_6.setBigDecimal(6, Inserta2.VALOR_FACTURADO);

                        pstmt_tOracleOutput_6.setBigDecimal(7, Inserta2.VT_PAGADO_IPS);

                        pstmt_tOracleOutput_6.setBigDecimal(8, Inserta2.VT_PAGADO_ESM);

                        pstmt_tOracleOutput_6.setBigDecimal(9, Inserta2.TFACTURADO_ESM);

                        pstmt_tOracleOutput_6.setBigDecimal(10, Inserta2.PFACTURADO_TOTAL);

                        pstmt_tOracleOutput_6.setBigDecimal(11, Inserta2.PV_PAGADO_PRESTADOR);

                pstmt_tOracleOutput_6.addBatch();
                nb_line_tOracleOutput_6++;
                batchSizeCounter_tOracleOutput_6++;
            if (batchSize_tOracleOutput_6 > 0 &&  batchSize_tOracleOutput_6 <= batchSizeCounter_tOracleOutput_6) {
                try {
                    pstmt_tOracleOutput_6.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_6){
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
			        java.sql.SQLException ne_tOracleOutput_6 = e_tOracleOutput_6.getNextException(),sqle_tOracleOutput_6=null;
			    	String errormessage_tOracleOutput_6;
					if (ne_tOracleOutput_6 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_6 = new java.sql.SQLException(e_tOracleOutput_6.getMessage() + "\ncaused by: " + ne_tOracleOutput_6.getMessage(), ne_tOracleOutput_6.getSQLState(), ne_tOracleOutput_6.getErrorCode(), ne_tOracleOutput_6);
						errormessage_tOracleOutput_6 = sqle_tOracleOutput_6.getMessage();
					}else{
						errormessage_tOracleOutput_6 = e_tOracleOutput_6.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_6);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_6 = pstmt_tOracleOutput_6.getUpdateCount();
                    insertedCount_tOracleOutput_6
                += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                rowsToCommitCount_tOracleOutput_6 += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                batchSizeCounter_tOracleOutput_6 = 0;
            }
                commitCounter_tOracleOutput_6++;
                if(commitEvery_tOracleOutput_6 <= commitCounter_tOracleOutput_6) {
                    if(batchSizeCounter_tOracleOutput_6 > 0) {
                        try {
                            pstmt_tOracleOutput_6.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_6){
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
					        java.sql.SQLException ne_tOracleOutput_6 = e_tOracleOutput_6.getNextException(),sqle_tOracleOutput_6=null;
					    	String errormessage_tOracleOutput_6;
							if (ne_tOracleOutput_6 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_6 = new java.sql.SQLException(e_tOracleOutput_6.getMessage() + "\ncaused by: " + ne_tOracleOutput_6.getMessage(), ne_tOracleOutput_6.getSQLState(), ne_tOracleOutput_6.getErrorCode(), ne_tOracleOutput_6);
								errormessage_tOracleOutput_6 = sqle_tOracleOutput_6.getMessage();
							}else{
								errormessage_tOracleOutput_6 = e_tOracleOutput_6.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_6);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_6 = pstmt_tOracleOutput_6.getUpdateCount();
                            insertedCount_tOracleOutput_6
                        += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                        rowsToCommitCount_tOracleOutput_6 += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_6 != 0){
                    	
                    }
                    conn_tOracleOutput_6.commit();
                    if(rowsToCommitCount_tOracleOutput_6 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_6 = 0;
                    }
                    commitCounter_tOracleOutput_6=0;
                    	batchSizeCounter_tOracleOutput_6=0;
                }

 


	tos_count_tOracleOutput_6++;

/**
 * [tOracleOutput_6 main ] stop
 */
	
	/**
	 * [tOracleOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_end ] stop
 */

} // End of branch "Inserta2"



	
		} // close loop of lookup 'row15' // G_TM_M_043
	
	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    		
    		mf_tHashInput_4.clearCache("tHashFile_ACM_" + pid +"_tHashOutput_4");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ACM_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row15 != null) {
						tHash_Lookup_row15.endGet();
					}
					globalMap.remove( "tHash_Lookup_row15" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tOracleOutput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_5 > 0) {
            try {
            	if (pstmt_tOracleOutput_5 != null) {
					
					pstmt_tOracleOutput_5.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_5){
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
		        java.sql.SQLException ne_tOracleOutput_5 = e_tOracleOutput_5.getNextException(),sqle_tOracleOutput_5=null;
		    	String errormessage_tOracleOutput_5;
				if (ne_tOracleOutput_5 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_5 = new java.sql.SQLException(e_tOracleOutput_5.getMessage() + "\ncaused by: " + ne_tOracleOutput_5.getMessage(), ne_tOracleOutput_5.getSQLState(), ne_tOracleOutput_5.getErrorCode(), ne_tOracleOutput_5);
					errormessage_tOracleOutput_5 = sqle_tOracleOutput_5.getMessage();
				}else{
					errormessage_tOracleOutput_5 = e_tOracleOutput_5.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_5);
            	
        	}
        	if (pstmt_tOracleOutput_5 != null) {
            	tmp_batchUpdateCount_tOracleOutput_5 = pstmt_tOracleOutput_5.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_5
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
				rowsToCommitCount_tOracleOutput_5 += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
            }
        }
        if(pstmt_tOracleOutput_5 != null) {
			
				pstmt_tOracleOutput_5.close();
				resourceMap.remove("pstmt_tOracleOutput_5");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_5", true);
		if(commitCounter_tOracleOutput_5 > 0 && rowsToCommitCount_tOracleOutput_5 != 0) {
			
		}
		conn_tOracleOutput_5.commit();
		if(commitCounter_tOracleOutput_5 > 0 && rowsToCommitCount_tOracleOutput_5 != 0) {
			
			rowsToCommitCount_tOracleOutput_5 = 0;
		}
		commitCounter_tOracleOutput_5 = 0;
		
		
		conn_tOracleOutput_5 .close();
		
		resourceMap.put("finish_tOracleOutput_5", true);
   	

	
	nb_line_deleted_tOracleOutput_5=nb_line_deleted_tOracleOutput_5+ deletedCount_tOracleOutput_5;
	nb_line_update_tOracleOutput_5=nb_line_update_tOracleOutput_5 + updatedCount_tOracleOutput_5;
	nb_line_inserted_tOracleOutput_5=nb_line_inserted_tOracleOutput_5 + insertedCount_tOracleOutput_5;
	nb_line_rejected_tOracleOutput_5=nb_line_rejected_tOracleOutput_5 + rejectedCount_tOracleOutput_5;
	
        globalMap.put("tOracleOutput_5_NB_LINE",nb_line_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_UPDATED",nb_line_update_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_5);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Elimina1");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_5", true);
end_Hash.put("tOracleOutput_5", System.currentTimeMillis());




/**
 * [tOracleOutput_5 end ] stop
 */




	
	/**
	 * [tOracleOutput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_6 > 0) {
            try {
            	if (pstmt_tOracleOutput_6 != null) {
					
					pstmt_tOracleOutput_6.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_6){
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
		        java.sql.SQLException ne_tOracleOutput_6 = e_tOracleOutput_6.getNextException(),sqle_tOracleOutput_6=null;
		    	String errormessage_tOracleOutput_6;
				if (ne_tOracleOutput_6 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_6 = new java.sql.SQLException(e_tOracleOutput_6.getMessage() + "\ncaused by: " + ne_tOracleOutput_6.getMessage(), ne_tOracleOutput_6.getSQLState(), ne_tOracleOutput_6.getErrorCode(), ne_tOracleOutput_6);
					errormessage_tOracleOutput_6 = sqle_tOracleOutput_6.getMessage();
				}else{
					errormessage_tOracleOutput_6 = e_tOracleOutput_6.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_6);
            	
        	}
        	if (pstmt_tOracleOutput_6 != null) {
            	tmp_batchUpdateCount_tOracleOutput_6 = pstmt_tOracleOutput_6.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_6
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
				rowsToCommitCount_tOracleOutput_6 += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
            }
        }
        if(pstmt_tOracleOutput_6 != null) {
			
				pstmt_tOracleOutput_6.close();
				resourceMap.remove("pstmt_tOracleOutput_6");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_6", true);
		if(commitCounter_tOracleOutput_6 > 0 && rowsToCommitCount_tOracleOutput_6 != 0) {
			
		}
		conn_tOracleOutput_6.commit();
		if(commitCounter_tOracleOutput_6 > 0 && rowsToCommitCount_tOracleOutput_6 != 0) {
			
			rowsToCommitCount_tOracleOutput_6 = 0;
		}
		commitCounter_tOracleOutput_6 = 0;
		
		
		conn_tOracleOutput_6 .close();
		
		resourceMap.put("finish_tOracleOutput_6", true);
   	

	
	nb_line_deleted_tOracleOutput_6=nb_line_deleted_tOracleOutput_6+ deletedCount_tOracleOutput_6;
	nb_line_update_tOracleOutput_6=nb_line_update_tOracleOutput_6 + updatedCount_tOracleOutput_6;
	nb_line_inserted_tOracleOutput_6=nb_line_inserted_tOracleOutput_6 + insertedCount_tOracleOutput_6;
	nb_line_rejected_tOracleOutput_6=nb_line_rejected_tOracleOutput_6 + rejectedCount_tOracleOutput_6;
	
        globalMap.put("tOracleOutput_6_NB_LINE",nb_line_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_UPDATED",nb_line_update_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_6);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta2");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_6", true);
end_Hash.put("tOracleOutput_6", System.currentTimeMillis());




/**
 * [tOracleOutput_6 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tOracleInput_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row15"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tOracleOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_5 = null;
                if ((pstmtToClose_tOracleOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_5")) != null) {
                    pstmtToClose_tOracleOutput_5.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_5") == null){
            java.sql.Connection ctn_tOracleOutput_5 = null;
            if((ctn_tOracleOutput_5 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_5")) != null){
                try {
                    ctn_tOracleOutput_5.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_5) {
                    String errorMessage_tOracleOutput_5 = "failed to close the connection in tOracleOutput_5 :" + sqlEx_tOracleOutput_5.getMessage();
                    System.err.println(errorMessage_tOracleOutput_5);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_5 finally ] stop
 */




	
	/**
	 * [tOracleOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_6 = null;
                if ((pstmtToClose_tOracleOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_6")) != null) {
                    pstmtToClose_tOracleOutput_6.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_6") == null){
            java.sql.Connection ctn_tOracleOutput_6 = null;
            if((ctn_tOracleOutput_6 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_6")) != null){
                try {
                    ctn_tOracleOutput_6.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_6) {
                    String errorMessage_tOracleOutput_6 = "failed to close the connection in tOracleOutput_6 :" + sqlEx_tOracleOutput_6.getMessage();
                    System.err.println(errorMessage_tOracleOutput_6);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class Elimina2Struct implements routines.system.IPersistableRow<Elimina2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return true;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.PRESTADOR_ID == null) ? 0 : this.PRESTADOR_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Elimina2Struct other = (Elimina2Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.PRESTADOR_ID == null) {
							if (other.PRESTADOR_ID != null)
								return false;
						
						} else if (!this.PRESTADOR_ID.equals(other.PRESTADOR_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Elimina2Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.PRESTADOR_ID = this.PRESTADOR_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            
	}

	public void copyKeysDataTo(Elimina2Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.PRESTADOR_ID = this.PRESTADOR_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Elimina2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PRESTADOR_ID, other.PRESTADOR_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Inserta3Struct implements routines.system.IPersistableRow<Inserta3Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal TORIGEN_ID;

				public BigDecimal getTORIGEN_ID () {
					return this.TORIGEN_ID;
				}

				public Boolean TORIGEN_IDIsNullable(){
				    return true;
				}
				public Boolean TORIGEN_IDIsKey(){
				    return false;
				}
				public Integer TORIGEN_IDLength(){
				    return 38;
				}
				public Integer TORIGEN_IDPrecision(){
				    return 0;
				}
				public String TORIGEN_IDDefault(){
				
					return "";
				
				}
				public String TORIGEN_IDComment(){
				
				    return "";
				
				}
				public String TORIGEN_IDPattern(){
				
					return "";
				
				}
				public String TORIGEN_IDOriginalDbColumnName(){
				
					return "TORIGEN_ID";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return true;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return 0;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return null;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal TPAGO;

				public BigDecimal getTPAGO () {
					return this.TPAGO;
				}

				public Boolean TPAGOIsNullable(){
				    return true;
				}
				public Boolean TPAGOIsKey(){
				    return false;
				}
				public Integer TPAGOLength(){
				    return 0;
				}
				public Integer TPAGOPrecision(){
				    return 0;
				}
				public String TPAGODefault(){
				
					return "";
				
				}
				public String TPAGOComment(){
				
				    return "";
				
				}
				public String TPAGOPattern(){
				
					return "";
				
				}
				public String TPAGOOriginalDbColumnName(){
				
					return "TPAGO";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return 0;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.TPAGO = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.TPAGO = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TORIGEN_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TORIGEN_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",TORIGEN_ID="+String.valueOf(TORIGEN_ID));
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",TPAGO="+String.valueOf(TPAGO));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public java.util.Date FPERIODO;

				public java.util.Date getFPERIODO () {
					return this.FPERIODO;
				}

				public Boolean FPERIODOIsNullable(){
				    return true;
				}
				public Boolean FPERIODOIsKey(){
				    return false;
				}
				public Integer FPERIODOLength(){
				    return 0;
				}
				public Integer FPERIODOPrecision(){
				    return 0;
				}
				public String FPERIODODefault(){
				
					return null;
				
				}
				public String FPERIODOComment(){
				
				    return "";
				
				}
				public String FPERIODOPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FPERIODOOriginalDbColumnName(){
				
					return "FPERIODO";
				
				}

				
			    public BigDecimal TORIGEN_ID;

				public BigDecimal getTORIGEN_ID () {
					return this.TORIGEN_ID;
				}

				public Boolean TORIGEN_IDIsNullable(){
				    return true;
				}
				public Boolean TORIGEN_IDIsKey(){
				    return false;
				}
				public Integer TORIGEN_IDLength(){
				    return 38;
				}
				public Integer TORIGEN_IDPrecision(){
				    return 0;
				}
				public String TORIGEN_IDDefault(){
				
					return "";
				
				}
				public String TORIGEN_IDComment(){
				
				    return "";
				
				}
				public String TORIGEN_IDPattern(){
				
					return "";
				
				}
				public String TORIGEN_IDOriginalDbColumnName(){
				
					return "TORIGEN_ID";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return true;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return 0;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return null;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal TPAGO;

				public BigDecimal getTPAGO () {
					return this.TPAGO;
				}

				public Boolean TPAGOIsNullable(){
				    return true;
				}
				public Boolean TPAGOIsKey(){
				    return false;
				}
				public Integer TPAGOLength(){
				    return 0;
				}
				public Integer TPAGOPrecision(){
				    return 0;
				}
				public String TPAGODefault(){
				
					return "";
				
				}
				public String TPAGOComment(){
				
				    return "";
				
				}
				public String TPAGOPattern(){
				
					return "";
				
				}
				public String TPAGOOriginalDbColumnName(){
				
					return "TPAGO";
				
				}

				
			    public BigDecimal VFACTURADO;

				public BigDecimal getVFACTURADO () {
					return this.VFACTURADO;
				}

				public Boolean VFACTURADOIsNullable(){
				    return true;
				}
				public Boolean VFACTURADOIsKey(){
				    return false;
				}
				public Integer VFACTURADOLength(){
				    return 0;
				}
				public Integer VFACTURADOPrecision(){
				    return 0;
				}
				public String VFACTURADODefault(){
				
					return "";
				
				}
				public String VFACTURADOComment(){
				
				    return "";
				
				}
				public String VFACTURADOPattern(){
				
					return "";
				
				}
				public String VFACTURADOOriginalDbColumnName(){
				
					return "VFACTURADO";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.TPAGO = (BigDecimal) dis.readObject();
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.TPAGO = (BigDecimal) dis.readObject();
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TORIGEN_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VFACTURADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TORIGEN_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VFACTURADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",FPERIODO="+String.valueOf(FPERIODO));
		sb.append(",TORIGEN_ID="+String.valueOf(TORIGEN_ID));
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",TPAGO="+String.valueOf(TPAGO));
		sb.append(",VFACTURADO="+String.valueOf(VFACTURADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_7Struct implements routines.system.IPersistableRow<after_tOracleInput_7Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public java.util.Date FPERIODO;

				public java.util.Date getFPERIODO () {
					return this.FPERIODO;
				}

				public Boolean FPERIODOIsNullable(){
				    return true;
				}
				public Boolean FPERIODOIsKey(){
				    return false;
				}
				public Integer FPERIODOLength(){
				    return 0;
				}
				public Integer FPERIODOPrecision(){
				    return 0;
				}
				public String FPERIODODefault(){
				
					return null;
				
				}
				public String FPERIODOComment(){
				
				    return "";
				
				}
				public String FPERIODOPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FPERIODOOriginalDbColumnName(){
				
					return "FPERIODO";
				
				}

				
			    public BigDecimal TORIGEN_ID;

				public BigDecimal getTORIGEN_ID () {
					return this.TORIGEN_ID;
				}

				public Boolean TORIGEN_IDIsNullable(){
				    return true;
				}
				public Boolean TORIGEN_IDIsKey(){
				    return false;
				}
				public Integer TORIGEN_IDLength(){
				    return 38;
				}
				public Integer TORIGEN_IDPrecision(){
				    return 0;
				}
				public String TORIGEN_IDDefault(){
				
					return "";
				
				}
				public String TORIGEN_IDComment(){
				
				    return "";
				
				}
				public String TORIGEN_IDPattern(){
				
					return "";
				
				}
				public String TORIGEN_IDOriginalDbColumnName(){
				
					return "TORIGEN_ID";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return true;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return 0;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return null;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal TPAGO;

				public BigDecimal getTPAGO () {
					return this.TPAGO;
				}

				public Boolean TPAGOIsNullable(){
				    return true;
				}
				public Boolean TPAGOIsKey(){
				    return false;
				}
				public Integer TPAGOLength(){
				    return 0;
				}
				public Integer TPAGOPrecision(){
				    return 0;
				}
				public String TPAGODefault(){
				
					return "";
				
				}
				public String TPAGOComment(){
				
				    return "";
				
				}
				public String TPAGOPattern(){
				
					return "";
				
				}
				public String TPAGOOriginalDbColumnName(){
				
					return "TPAGO";
				
				}

				
			    public BigDecimal VFACTURADO;

				public BigDecimal getVFACTURADO () {
					return this.VFACTURADO;
				}

				public Boolean VFACTURADOIsNullable(){
				    return true;
				}
				public Boolean VFACTURADOIsKey(){
				    return false;
				}
				public Integer VFACTURADOLength(){
				    return 0;
				}
				public Integer VFACTURADOPrecision(){
				    return 0;
				}
				public String VFACTURADODefault(){
				
					return "";
				
				}
				public String VFACTURADOComment(){
				
				    return "";
				
				}
				public String VFACTURADOPattern(){
				
					return "";
				
				}
				public String VFACTURADOOriginalDbColumnName(){
				
					return "VFACTURADO";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.TPAGO = (BigDecimal) dis.readObject();
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.TPAGO = (BigDecimal) dis.readObject();
					
						this.VFACTURADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TORIGEN_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VFACTURADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TORIGEN_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VFACTURADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",FPERIODO="+String.valueOf(FPERIODO));
		sb.append(",TORIGEN_ID="+String.valueOf(TORIGEN_ID));
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",TPAGO="+String.valueOf(TPAGO));
		sb.append(",VFACTURADO="+String.valueOf(VFACTURADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_5Process(globalMap);

		row18Struct row18 = new row18Struct();
Elimina2Struct Elimina2 = new Elimina2Struct();
Inserta3Struct Inserta3 = new Inserta3Struct();





	
	/**
	 * [tOracleOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_7", false);
		start_Hash.put("tOracleOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Elimina2");
					}
				
		int tos_count_tOracleOutput_7 = 0;
		






        int deleteKeyCount_tOracleOutput_7 = 3;
        if(deleteKeyCount_tOracleOutput_7 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_7 = 0;
    int nb_line_update_tOracleOutput_7 = 0;
    int nb_line_inserted_tOracleOutput_7 = 0;
    int nb_line_deleted_tOracleOutput_7 = 0;
    int nb_line_rejected_tOracleOutput_7 = 0;

    int tmp_batchUpdateCount_tOracleOutput_7 = 0;

    int deletedCount_tOracleOutput_7=0;
    int updatedCount_tOracleOutput_7=0;
    int insertedCount_tOracleOutput_7=0;
    int rowsToCommitCount_tOracleOutput_7=0;
    int rejectedCount_tOracleOutput_7=0;

    boolean whetherReject_tOracleOutput_7 = false;

    java.sql.Connection conn_tOracleOutput_7 = null;

    //optional table
    String dbschema_tOracleOutput_7 = null;
    String tableName_tOracleOutput_7 = null;
                    String driverClass_tOracleOutput_7 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_7);
                String url_tOracleOutput_7 = null;
                    url_tOracleOutput_7 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_7 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_7 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_7 = decryptedPassword_tOracleOutput_7;
                dbschema_tOracleOutput_7 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_7 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_7.put("user",dbUser_tOracleOutput_7);
                    atnParamsPrope_tOracleOutput_7.put("password",dbPwd_tOracleOutput_7);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_7.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_7 = java.sql.DriverManager.getConnection(url_tOracleOutput_7, atnParamsPrope_tOracleOutput_7);
        resourceMap.put("conn_tOracleOutput_7", conn_tOracleOutput_7);
            conn_tOracleOutput_7.setAutoCommit(false);
            int commitEvery_tOracleOutput_7 = 1000;
            int commitCounter_tOracleOutput_7 = 0;
        int batchSize_tOracleOutput_7 = 1000;
        int batchSizeCounter_tOracleOutput_7=0;
        int count_tOracleOutput_7=0;

        if(dbschema_tOracleOutput_7 == null || dbschema_tOracleOutput_7.trim().length() == 0) {
            tableName_tOracleOutput_7 = ("BACM_GSERVICIOS");
        } else {
            tableName_tOracleOutput_7 = dbschema_tOracleOutput_7 + "." + ("BACM_GSERVICIOS");
        }
                String delete_tOracleOutput_7 = "DELETE FROM " + tableName_tOracleOutput_7 + " WHERE UORG_ID = ? AND PRESTADOR_ID = ? AND TIEMPOS_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_7 = conn_tOracleOutput_7.prepareStatement(delete_tOracleOutput_7);
                resourceMap.put("pstmt_tOracleOutput_7", pstmt_tOracleOutput_7);





 



/**
 * [tOracleOutput_7 begin ] stop
 */




	
	/**
	 * [tOracleOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_8", false);
		start_Hash.put("tOracleOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta3");
					}
				
		int tos_count_tOracleOutput_8 = 0;
		






    
    int nb_line_tOracleOutput_8 = 0;
    int nb_line_update_tOracleOutput_8 = 0;
    int nb_line_inserted_tOracleOutput_8 = 0;
    int nb_line_deleted_tOracleOutput_8 = 0;
    int nb_line_rejected_tOracleOutput_8 = 0;

    int tmp_batchUpdateCount_tOracleOutput_8 = 0;

    int deletedCount_tOracleOutput_8=0;
    int updatedCount_tOracleOutput_8=0;
    int insertedCount_tOracleOutput_8=0;
    int rowsToCommitCount_tOracleOutput_8=0;
    int rejectedCount_tOracleOutput_8=0;

    boolean whetherReject_tOracleOutput_8 = false;

    java.sql.Connection conn_tOracleOutput_8 = null;

    //optional table
    String dbschema_tOracleOutput_8 = null;
    String tableName_tOracleOutput_8 = null;
                    String driverClass_tOracleOutput_8 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_8);
                String url_tOracleOutput_8 = null;
                    url_tOracleOutput_8 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_8 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_8 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_8 = decryptedPassword_tOracleOutput_8;
                dbschema_tOracleOutput_8 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_8 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_8.put("user",dbUser_tOracleOutput_8);
                    atnParamsPrope_tOracleOutput_8.put("password",dbPwd_tOracleOutput_8);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_8.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_8 = java.sql.DriverManager.getConnection(url_tOracleOutput_8, atnParamsPrope_tOracleOutput_8);
        resourceMap.put("conn_tOracleOutput_8", conn_tOracleOutput_8);
            conn_tOracleOutput_8.setAutoCommit(false);
            int commitEvery_tOracleOutput_8 = 1000;
            int commitCounter_tOracleOutput_8 = 0;
        int batchSize_tOracleOutput_8 = 1000;
        int batchSizeCounter_tOracleOutput_8=0;
        int count_tOracleOutput_8=0;

        if(dbschema_tOracleOutput_8 == null || dbschema_tOracleOutput_8.trim().length() == 0) {
            tableName_tOracleOutput_8 = ("BACM_GSERVICIOS");
        } else {
            tableName_tOracleOutput_8 = dbschema_tOracleOutput_8 + "." + ("BACM_GSERVICIOS");
        }
                String insert_tOracleOutput_8 = "INSERT INTO " + tableName_tOracleOutput_8 + " (UORG_ID,PRESTADOR_ID,TORIGEN_ID,SERVICIOS_ID,ESPECIALIDADES_ID,TPAGO,VALOR,TIEMPOS_ID) VALUES (?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_8 = conn_tOracleOutput_8.prepareStatement(insert_tOracleOutput_8);
                        resourceMap.put("pstmt_tOracleOutput_8", pstmt_tOracleOutput_8);





 



/**
 * [tOracleOutput_8 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
					globalMap.get( "tHash_Lookup_row19" ))
					;					
					
	

row19Struct row19HashKey = new row19Struct();
row19Struct row19Default = new row19Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
Elimina2Struct Elimina2_tmp = new Elimina2Struct();
Inserta3Struct Inserta3_tmp = new Inserta3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_7", false);
		start_Hash.put("tOracleInput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_7";
	
	
		int tos_count_tOracleInput_7 = 0;
		
	


	
		    int nb_line_tOracleInput_7 = 0;
		    java.sql.Connection conn_tOracleInput_7 = null;
				conn_tOracleInput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_7 = false;
				boolean isConnectionWrapped_tOracleInput_7 = !(conn_tOracleInput_7 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_7.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_7 = null;
                if (isConnectionWrapped_tOracleInput_7) {
					unwrappedOraConn_tOracleInput_7 = conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_7 != null) {
                        isTimeZoneNull_tOracleInput_7 = (unwrappedOraConn_tOracleInput_7.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_7 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_7).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_7) {
					java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_7 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_7.next()) {
						sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_7 && unwrappedOraConn_tOracleInput_7 != null) {
                        unwrappedOraConn_tOracleInput_7.setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_7).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_7.setFetchSize(1000);


		    String dbquery_tOracleInput_7 = "SELECT    AR.UORG_ID\n        , AR.PRESTADOR_ID\n        , TRUNC( DFS.FSERVICIO, 'MONTH' ) FPERIODO\n        , INF.TORI"
+"GEN_ID\n        , DFS.SERVICIOS_ID         \n        , RC.ESPECIALIDADES_ID\n        , CASE \n            WHEN AR.CONTRA"
+"TOS_ID IS NULL AND AR.MEDCONTRATOS_ID IS NULL \n            THEN 2\n            ELSE 1\n          END AS TPAGO\n        "
+", SUM( DFS.VTOTAL ) AS VFACTURADO\nFROM ACM_ETAPASNORMATIVIDAD AE\nINNER JOIN ACM_HAUDITORIAS AH ON AH.ETAPASNORMATIVIDA"
+"D_ID = AE.ID\nINNER JOIN ACM_RECEPCION AR ON AR.ID = AH.RECEPCION_ID\nINNER JOIN ACM_ESTAUDITORIAS ESA ON ESA.ID = AH.ES"
+"TAUDITORIA_ID\nINNER JOIN ACM_DFACTURASERVICIO DFS ON DFS.RECEPCION_ID = AR.ID\nLEFT JOIN RCA_CUPSOLICITADOS RC ON RC.AU"
+"TORIZACION_ID = DFS.AUTORIZACION_ID\n                               AND RC.CUPS_ID = DFS.CUPS_ID\n                      "
+"         AND RC.ESTREGISTRO_ID = 1\nLEFT JOIN RCA_INFGENERAL INF ON INF.ID = RC.INFGENERAL_ID \n                        "
+"    AND INF.ESTREGISTRO_ID = 1\nINNER JOIN ( \n    SELECT    FPERIODO\n            , IPS_ID\n            , UORG_ID\n    "
+"FROM (\n      SELECT    TRUNC ( DFS.FSERVICIO , 'MONTH') AS FPERIODO\n              , RE.PRESTADOR_ID AS IPS_ID\n       "
+"       , RE.UORG_ID\n              , ROW_NUMBER() OVER ( PARTITION BY  TRUNC ( DFS.FSERVICIO , 'MONTH')\n               "
+"                                         , RE.PRESTADOR_ID\n                                                        , RE"
+".UORG_ID ORDER BY RE.ID ) R\n      FROM ACM_ETAPASNORMATIVIDAD EN\n      INNER JOIN ACM_HAUDITORIAS HA ON EN.ID = HA.ETA"
+"PASNORMATIVIDAD_ID\n	  INNER JOIN ACM_ESTAUDITORIAS ESA ON ESA.ID = HA.ESTAUDITORIA_ID\n      INNER JOIN ACM_DFACTURASER"
+"VICIO DFS ON DFS.RECEPCION_ID = HA.RECEPCION_ID\n      INNER JOIN ACM_RECEPCION RE ON RE.ID = HA.RECEPCION_ID\n      WHE"
+"RE EN.CODIGO = 1\n        AND DFS.ESTREGISTRO_ID = 1\n        AND HA.ESTREGISTRO_ID = 1\n        AND RE.ESTREGISTRO_ID ="
+" 1\n		AND ESA.NOMBRE = 'Finalizada'\n        AND ( HA.EJECUCION = 1 )\n        "+context.CONDICION+"\n    ) WHERE R = 1\n) COND  ON COND.IPS_ID = AR.PRESTADOR_ID \n       AND COND.UORG_ID = AR.UORG_ID \n       AND COND."
+"FPERIODO =  TRUNC ( DFS.FSERVICIO , 'MONTH')\nWHERE AE.CODIGO = 1\n  AND AH.ESTREGISTRO_ID = 1\n  AND AR.ESTREGISTRO_ID "
+"= 1\n  AND DFS.ESTREGISTRO_ID = 1\n  AND ( AH.EJECUCION = 1 )	\n  AND AH.FFETAPA IS NOT NULL \n  AND ESA.NOMBRE = 'Final"
+"izada'\nGROUP BY  AR.UORG_ID\n        , AR.PRESTADOR_ID\n        , TRUNC( DFS.FSERVICIO, 'MONTH' )\n        , INF.TORIGE"
+"N_ID\n        , DFS.SERVICIOS_ID         \n        , RC.ESPECIALIDADES_ID\n        , CASE \n            WHEN AR.CONTRATO"
+"S_ID IS NULL AND AR.MEDCONTRATOS_ID IS NULL \n            THEN 2\n            ELSE 1\n          END ";
		    

		    globalMap.put("tOracleInput_7_QUERY",dbquery_tOracleInput_7);

		    java.sql.ResultSet rs_tOracleInput_7 = null;

		    try {
		    	rs_tOracleInput_7 = stmt_tOracleInput_7.executeQuery(dbquery_tOracleInput_7);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7.getMetaData();
		    	int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7.getColumnCount();

		    String tmpContent_tOracleInput_7 = null;
		    
		    
		    while (rs_tOracleInput_7.next()) {
		        nb_line_tOracleInput_7++;
		        
							if(colQtyInRs_tOracleInput_7 < 1) {
								row18.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(1) != null) {
						row18.UORG_ID = rs_tOracleInput_7.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 2) {
								row18.PRESTADOR_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(2) != null) {
						row18.PRESTADOR_ID = rs_tOracleInput_7.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 3) {
								row18.FPERIODO = null;
							} else {
										
			row18.FPERIODO = routines.system.JDBCUtil.getDate(rs_tOracleInput_7, 3);
		                    }
							if(colQtyInRs_tOracleInput_7 < 4) {
								row18.TORIGEN_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(4) != null) {
						row18.TORIGEN_ID = rs_tOracleInput_7.getBigDecimal(4);
					} else {
				
						row18.TORIGEN_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 5) {
								row18.SERVICIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(5) != null) {
						row18.SERVICIOS_ID = rs_tOracleInput_7.getBigDecimal(5);
					} else {
				
						row18.SERVICIOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 6) {
								row18.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(6) != null) {
						row18.ESPECIALIDADES_ID = rs_tOracleInput_7.getBigDecimal(6);
					} else {
				
						row18.ESPECIALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 7) {
								row18.TPAGO = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(7) != null) {
						row18.TPAGO = rs_tOracleInput_7.getBigDecimal(7);
					} else {
				
						row18.TPAGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 8) {
								row18.VFACTURADO = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(8) != null) {
						row18.VFACTURADO = rs_tOracleInput_7.getBigDecimal(8);
					} else {
				
						row18.VFACTURADO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_7 begin ] stop
 */
	
	/**
	 * [tOracleInput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 


	tos_count_tOracleInput_7++;

/**
 * [tOracleInput_7 main ] stop
 */
	
	/**
	 * [tOracleInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row19Struct row19 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row19" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow19 = false;
       		  	    	
       		  	    	
 							row19Struct row19ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row19HashKey.FECHA = row18.FPERIODO  == null ? null : new java.util.Date((row18.FPERIODO ).getTime());
                        		    		

								
		                        	row19HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row19.lookup( row19HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row19.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row19 != null && tHash_Lookup_row19.getCount(row19HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row19' and it contains more one result from keys :  row19.FECHA = '" + row19HashKey.FECHA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row19Struct fromLookup_row19 = null;
							row19 = row19Default;
										 
							
								 
							
							
								if (tHash_Lookup_row19 !=null && tHash_Lookup_row19.hasNext()) { // G 099
								
							
								
								fromLookup_row19 = tHash_Lookup_row19.next();

							
							
								} // G 099
							
							

							if(fromLookup_row19 != null) {
								row19 = fromLookup_row19;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

Elimina2 = null;
Inserta3 = null;

if(!rejectedInnerJoin_tMap_4 ) {

// # Output table : 'Elimina2'
Elimina2_tmp.UORG_ID = row18.UORG_ID ;
Elimina2_tmp.PRESTADOR_ID = row18.PRESTADOR_ID ;
Elimina2_tmp.TIEMPOS_ID = row19.ID ;
Elimina2 = Elimina2_tmp;

// # Output table : 'Inserta3'
Inserta3_tmp.UORG_ID = row18.UORG_ID ;
Inserta3_tmp.PRESTADOR_ID = row18.PRESTADOR_ID ;
Inserta3_tmp.TORIGEN_ID = row18.TORIGEN_ID ;
Inserta3_tmp.SERVICIOS_ID = row18.SERVICIOS_ID ;
Inserta3_tmp.ESPECIALIDADES_ID = row18.ESPECIALIDADES_ID ;
Inserta3_tmp.TPAGO = row18.TPAGO ;
Inserta3_tmp.VALOR = row18.VFACTURADO ;
Inserta3_tmp.TIEMPOS_ID = row19.ID ;
Inserta3 = Inserta3_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "Elimina2"
if(Elimina2 != null) { 



	
	/**
	 * [tOracleOutput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Elimina2"
						
						);
					}
					



        whetherReject_tOracleOutput_7 = false;
                    pstmt_tOracleOutput_7.setBigDecimal(1, Elimina2.UORG_ID);

                    pstmt_tOracleOutput_7.setBigDecimal(2, Elimina2.PRESTADOR_ID);

                    pstmt_tOracleOutput_7.setBigDecimal(3, Elimina2.TIEMPOS_ID);

                pstmt_tOracleOutput_7.addBatch();
                nb_line_tOracleOutput_7++;
                batchSizeCounter_tOracleOutput_7++;
            if (batchSize_tOracleOutput_7 > 0 &&  batchSize_tOracleOutput_7 <= batchSizeCounter_tOracleOutput_7) {
                try {
                    pstmt_tOracleOutput_7.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_7){
globalMap.put("tOracleOutput_7_ERROR_MESSAGE",e_tOracleOutput_7.getMessage());
			        java.sql.SQLException ne_tOracleOutput_7 = e_tOracleOutput_7.getNextException(),sqle_tOracleOutput_7=null;
			    	String errormessage_tOracleOutput_7;
					if (ne_tOracleOutput_7 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_7 = new java.sql.SQLException(e_tOracleOutput_7.getMessage() + "\ncaused by: " + ne_tOracleOutput_7.getMessage(), ne_tOracleOutput_7.getSQLState(), ne_tOracleOutput_7.getErrorCode(), ne_tOracleOutput_7);
						errormessage_tOracleOutput_7 = sqle_tOracleOutput_7.getMessage();
					}else{
						errormessage_tOracleOutput_7 = e_tOracleOutput_7.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_7);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_7 = pstmt_tOracleOutput_7.getUpdateCount();
                    deletedCount_tOracleOutput_7
                += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
                rowsToCommitCount_tOracleOutput_7 += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
                batchSizeCounter_tOracleOutput_7 = 0;
            }
                commitCounter_tOracleOutput_7++;
                if(commitEvery_tOracleOutput_7 <= commitCounter_tOracleOutput_7) {
                    if(batchSizeCounter_tOracleOutput_7 > 0) {
                        try {
                            pstmt_tOracleOutput_7.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_7){
globalMap.put("tOracleOutput_7_ERROR_MESSAGE",e_tOracleOutput_7.getMessage());
					        java.sql.SQLException ne_tOracleOutput_7 = e_tOracleOutput_7.getNextException(),sqle_tOracleOutput_7=null;
					    	String errormessage_tOracleOutput_7;
							if (ne_tOracleOutput_7 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_7 = new java.sql.SQLException(e_tOracleOutput_7.getMessage() + "\ncaused by: " + ne_tOracleOutput_7.getMessage(), ne_tOracleOutput_7.getSQLState(), ne_tOracleOutput_7.getErrorCode(), ne_tOracleOutput_7);
								errormessage_tOracleOutput_7 = sqle_tOracleOutput_7.getMessage();
							}else{
								errormessage_tOracleOutput_7 = e_tOracleOutput_7.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_7);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_7 = pstmt_tOracleOutput_7.getUpdateCount();
                            deletedCount_tOracleOutput_7
                        += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
                        rowsToCommitCount_tOracleOutput_7 += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_7 != 0){
                    	
                    }
                    conn_tOracleOutput_7.commit();
                    if(rowsToCommitCount_tOracleOutput_7 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_7 = 0;
                    }
                    commitCounter_tOracleOutput_7=0;
                    	batchSizeCounter_tOracleOutput_7=0;
                }

 


	tos_count_tOracleOutput_7++;

/**
 * [tOracleOutput_7 main ] stop
 */
	
	/**
	 * [tOracleOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	

 



/**
 * [tOracleOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	

 



/**
 * [tOracleOutput_7 process_data_end ] stop
 */

} // End of branch "Elimina2"




// Start of branch "Inserta3"
if(Inserta3 != null) { 



	
	/**
	 * [tOracleOutput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta3"
						
						);
					}
					



        whetherReject_tOracleOutput_8 = false;
                        pstmt_tOracleOutput_8.setBigDecimal(1, Inserta3.UORG_ID);

                        pstmt_tOracleOutput_8.setBigDecimal(2, Inserta3.PRESTADOR_ID);

                        pstmt_tOracleOutput_8.setBigDecimal(3, Inserta3.TORIGEN_ID);

                        pstmt_tOracleOutput_8.setBigDecimal(4, Inserta3.SERVICIOS_ID);

                        pstmt_tOracleOutput_8.setBigDecimal(5, Inserta3.ESPECIALIDADES_ID);

                        pstmt_tOracleOutput_8.setBigDecimal(6, Inserta3.TPAGO);

                        pstmt_tOracleOutput_8.setBigDecimal(7, Inserta3.VALOR);

                        pstmt_tOracleOutput_8.setBigDecimal(8, Inserta3.TIEMPOS_ID);

                pstmt_tOracleOutput_8.addBatch();
                nb_line_tOracleOutput_8++;
                batchSizeCounter_tOracleOutput_8++;
            if (batchSize_tOracleOutput_8 > 0 &&  batchSize_tOracleOutput_8 <= batchSizeCounter_tOracleOutput_8) {
                try {
                    pstmt_tOracleOutput_8.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_8){
globalMap.put("tOracleOutput_8_ERROR_MESSAGE",e_tOracleOutput_8.getMessage());
			        java.sql.SQLException ne_tOracleOutput_8 = e_tOracleOutput_8.getNextException(),sqle_tOracleOutput_8=null;
			    	String errormessage_tOracleOutput_8;
					if (ne_tOracleOutput_8 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_8 = new java.sql.SQLException(e_tOracleOutput_8.getMessage() + "\ncaused by: " + ne_tOracleOutput_8.getMessage(), ne_tOracleOutput_8.getSQLState(), ne_tOracleOutput_8.getErrorCode(), ne_tOracleOutput_8);
						errormessage_tOracleOutput_8 = sqle_tOracleOutput_8.getMessage();
					}else{
						errormessage_tOracleOutput_8 = e_tOracleOutput_8.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_8);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_8 = pstmt_tOracleOutput_8.getUpdateCount();
                    insertedCount_tOracleOutput_8
                += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
                rowsToCommitCount_tOracleOutput_8 += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
                batchSizeCounter_tOracleOutput_8 = 0;
            }
                commitCounter_tOracleOutput_8++;
                if(commitEvery_tOracleOutput_8 <= commitCounter_tOracleOutput_8) {
                    if(batchSizeCounter_tOracleOutput_8 > 0) {
                        try {
                            pstmt_tOracleOutput_8.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_8){
globalMap.put("tOracleOutput_8_ERROR_MESSAGE",e_tOracleOutput_8.getMessage());
					        java.sql.SQLException ne_tOracleOutput_8 = e_tOracleOutput_8.getNextException(),sqle_tOracleOutput_8=null;
					    	String errormessage_tOracleOutput_8;
							if (ne_tOracleOutput_8 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_8 = new java.sql.SQLException(e_tOracleOutput_8.getMessage() + "\ncaused by: " + ne_tOracleOutput_8.getMessage(), ne_tOracleOutput_8.getSQLState(), ne_tOracleOutput_8.getErrorCode(), ne_tOracleOutput_8);
								errormessage_tOracleOutput_8 = sqle_tOracleOutput_8.getMessage();
							}else{
								errormessage_tOracleOutput_8 = e_tOracleOutput_8.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_8);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_8 = pstmt_tOracleOutput_8.getUpdateCount();
                            insertedCount_tOracleOutput_8
                        += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
                        rowsToCommitCount_tOracleOutput_8 += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_8 != 0){
                    	
                    }
                    conn_tOracleOutput_8.commit();
                    if(rowsToCommitCount_tOracleOutput_8 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_8 = 0;
                    }
                    commitCounter_tOracleOutput_8=0;
                    	batchSizeCounter_tOracleOutput_8=0;
                }

 


	tos_count_tOracleOutput_8++;

/**
 * [tOracleOutput_8 main ] stop
 */
	
	/**
	 * [tOracleOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	

 



/**
 * [tOracleOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	

 



/**
 * [tOracleOutput_8 process_data_end ] stop
 */

} // End of branch "Inserta3"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

}
}finally{
	if (rs_tOracleInput_7 != null) {
		rs_tOracleInput_7.close();
	}
	if (stmt_tOracleInput_7 != null) {
		stmt_tOracleInput_7.close();
	}
}

globalMap.put("tOracleInput_7_NB_LINE",nb_line_tOracleInput_7);
 

ok_Hash.put("tOracleInput_7", true);
end_Hash.put("tOracleInput_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tJava_5Process(globalMap);



/**
 * [tOracleInput_7 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row19 != null) {
						tHash_Lookup_row19.endGet();
					}
					globalMap.remove( "tHash_Lookup_row19" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tOracleOutput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_7 > 0) {
            try {
            	if (pstmt_tOracleOutput_7 != null) {
					
					pstmt_tOracleOutput_7.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_7){
globalMap.put("tOracleOutput_7_ERROR_MESSAGE",e_tOracleOutput_7.getMessage());
		        java.sql.SQLException ne_tOracleOutput_7 = e_tOracleOutput_7.getNextException(),sqle_tOracleOutput_7=null;
		    	String errormessage_tOracleOutput_7;
				if (ne_tOracleOutput_7 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_7 = new java.sql.SQLException(e_tOracleOutput_7.getMessage() + "\ncaused by: " + ne_tOracleOutput_7.getMessage(), ne_tOracleOutput_7.getSQLState(), ne_tOracleOutput_7.getErrorCode(), ne_tOracleOutput_7);
					errormessage_tOracleOutput_7 = sqle_tOracleOutput_7.getMessage();
				}else{
					errormessage_tOracleOutput_7 = e_tOracleOutput_7.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_7);
            	
        	}
        	if (pstmt_tOracleOutput_7 != null) {
            	tmp_batchUpdateCount_tOracleOutput_7 = pstmt_tOracleOutput_7.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_7
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
				rowsToCommitCount_tOracleOutput_7 += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
            }
        }
        if(pstmt_tOracleOutput_7 != null) {
			
				pstmt_tOracleOutput_7.close();
				resourceMap.remove("pstmt_tOracleOutput_7");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_7", true);
		if(commitCounter_tOracleOutput_7 > 0 && rowsToCommitCount_tOracleOutput_7 != 0) {
			
		}
		conn_tOracleOutput_7.commit();
		if(commitCounter_tOracleOutput_7 > 0 && rowsToCommitCount_tOracleOutput_7 != 0) {
			
			rowsToCommitCount_tOracleOutput_7 = 0;
		}
		commitCounter_tOracleOutput_7 = 0;
		
		
		conn_tOracleOutput_7 .close();
		
		resourceMap.put("finish_tOracleOutput_7", true);
   	

	
	nb_line_deleted_tOracleOutput_7=nb_line_deleted_tOracleOutput_7+ deletedCount_tOracleOutput_7;
	nb_line_update_tOracleOutput_7=nb_line_update_tOracleOutput_7 + updatedCount_tOracleOutput_7;
	nb_line_inserted_tOracleOutput_7=nb_line_inserted_tOracleOutput_7 + insertedCount_tOracleOutput_7;
	nb_line_rejected_tOracleOutput_7=nb_line_rejected_tOracleOutput_7 + rejectedCount_tOracleOutput_7;
	
        globalMap.put("tOracleOutput_7_NB_LINE",nb_line_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_UPDATED",nb_line_update_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_7);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Elimina2");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_7", true);
end_Hash.put("tOracleOutput_7", System.currentTimeMillis());




/**
 * [tOracleOutput_7 end ] stop
 */




	
	/**
	 * [tOracleOutput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_8 > 0) {
            try {
            	if (pstmt_tOracleOutput_8 != null) {
					
					pstmt_tOracleOutput_8.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_8){
globalMap.put("tOracleOutput_8_ERROR_MESSAGE",e_tOracleOutput_8.getMessage());
		        java.sql.SQLException ne_tOracleOutput_8 = e_tOracleOutput_8.getNextException(),sqle_tOracleOutput_8=null;
		    	String errormessage_tOracleOutput_8;
				if (ne_tOracleOutput_8 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_8 = new java.sql.SQLException(e_tOracleOutput_8.getMessage() + "\ncaused by: " + ne_tOracleOutput_8.getMessage(), ne_tOracleOutput_8.getSQLState(), ne_tOracleOutput_8.getErrorCode(), ne_tOracleOutput_8);
					errormessage_tOracleOutput_8 = sqle_tOracleOutput_8.getMessage();
				}else{
					errormessage_tOracleOutput_8 = e_tOracleOutput_8.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_8);
            	
        	}
        	if (pstmt_tOracleOutput_8 != null) {
            	tmp_batchUpdateCount_tOracleOutput_8 = pstmt_tOracleOutput_8.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_8
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
				rowsToCommitCount_tOracleOutput_8 += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
            }
        }
        if(pstmt_tOracleOutput_8 != null) {
			
				pstmt_tOracleOutput_8.close();
				resourceMap.remove("pstmt_tOracleOutput_8");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_8", true);
		if(commitCounter_tOracleOutput_8 > 0 && rowsToCommitCount_tOracleOutput_8 != 0) {
			
		}
		conn_tOracleOutput_8.commit();
		if(commitCounter_tOracleOutput_8 > 0 && rowsToCommitCount_tOracleOutput_8 != 0) {
			
			rowsToCommitCount_tOracleOutput_8 = 0;
		}
		commitCounter_tOracleOutput_8 = 0;
		
		
		conn_tOracleOutput_8 .close();
		
		resourceMap.put("finish_tOracleOutput_8", true);
   	

	
	nb_line_deleted_tOracleOutput_8=nb_line_deleted_tOracleOutput_8+ deletedCount_tOracleOutput_8;
	nb_line_update_tOracleOutput_8=nb_line_update_tOracleOutput_8 + updatedCount_tOracleOutput_8;
	nb_line_inserted_tOracleOutput_8=nb_line_inserted_tOracleOutput_8 + insertedCount_tOracleOutput_8;
	nb_line_rejected_tOracleOutput_8=nb_line_rejected_tOracleOutput_8 + rejectedCount_tOracleOutput_8;
	
        globalMap.put("tOracleOutput_8_NB_LINE",nb_line_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_UPDATED",nb_line_update_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_8);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta3");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_8", true);
end_Hash.put("tOracleOutput_8", System.currentTimeMillis());




/**
 * [tOracleOutput_8 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tOracleInput_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row19"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tOracleOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_7 = null;
                if ((pstmtToClose_tOracleOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_7")) != null) {
                    pstmtToClose_tOracleOutput_7.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_7") == null){
            java.sql.Connection ctn_tOracleOutput_7 = null;
            if((ctn_tOracleOutput_7 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_7")) != null){
                try {
                    ctn_tOracleOutput_7.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_7) {
                    String errorMessage_tOracleOutput_7 = "failed to close the connection in tOracleOutput_7 :" + sqlEx_tOracleOutput_7.getMessage();
                    System.err.println(errorMessage_tOracleOutput_7);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_7 finally ] stop
 */




	
	/**
	 * [tOracleOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_8 = null;
                if ((pstmtToClose_tOracleOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_8")) != null) {
                    pstmtToClose_tOracleOutput_8.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_8") == null){
            java.sql.Connection ctn_tOracleOutput_8 = null;
            if((ctn_tOracleOutput_8 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_8")) != null){
                try {
                    ctn_tOracleOutput_8.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_8) {
                    String errorMessage_tOracleOutput_8 = "failed to close the connection in tOracleOutput_8 :" + sqlEx_tOracleOutput_8.getMessage();
                    System.err.println(errorMessage_tOracleOutput_8);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class Elimina3Struct implements routines.system.IPersistableRow<Elimina3Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal DIAGNOSTICO_ID;

				public BigDecimal getDIAGNOSTICO_ID () {
					return this.DIAGNOSTICO_ID;
				}

				public Boolean DIAGNOSTICO_IDIsNullable(){
				    return false;
				}
				public Boolean DIAGNOSTICO_IDIsKey(){
				    return true;
				}
				public Integer DIAGNOSTICO_IDLength(){
				    return 0;
				}
				public Integer DIAGNOSTICO_IDPrecision(){
				    return null;
				}
				public String DIAGNOSTICO_IDDefault(){
				
					return "";
				
				}
				public String DIAGNOSTICO_IDComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICO_IDPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICO_IDOriginalDbColumnName(){
				
					return "DIAGNOSTICO_ID";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return false;
				}
				public Boolean IPS_IDIsKey(){
				    return true;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public BigDecimal TIPO_PAGO_ID;

				public BigDecimal getTIPO_PAGO_ID () {
					return this.TIPO_PAGO_ID;
				}

				public Boolean TIPO_PAGO_IDIsNullable(){
				    return false;
				}
				public Boolean TIPO_PAGO_IDIsKey(){
				    return true;
				}
				public Integer TIPO_PAGO_IDLength(){
				    return 0;
				}
				public Integer TIPO_PAGO_IDPrecision(){
				    return null;
				}
				public String TIPO_PAGO_IDDefault(){
				
					return "";
				
				}
				public String TIPO_PAGO_IDComment(){
				
				    return "";
				
				}
				public String TIPO_PAGO_IDPattern(){
				
					return "";
				
				}
				public String TIPO_PAGO_IDOriginalDbColumnName(){
				
					return "TIPO_PAGO_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.DIAGNOSTICO_ID == null) ? 0 : this.DIAGNOSTICO_ID.hashCode());
					
						result = prime * result + ((this.IPS_ID == null) ? 0 : this.IPS_ID.hashCode());
					
						result = prime * result + ((this.TIPO_PAGO_ID == null) ? 0 : this.TIPO_PAGO_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Elimina3Struct other = (Elimina3Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.DIAGNOSTICO_ID == null) {
							if (other.DIAGNOSTICO_ID != null)
								return false;
						
						} else if (!this.DIAGNOSTICO_ID.equals(other.DIAGNOSTICO_ID))
						
							return false;
					
						if (this.IPS_ID == null) {
							if (other.IPS_ID != null)
								return false;
						
						} else if (!this.IPS_ID.equals(other.IPS_ID))
						
							return false;
					
						if (this.TIPO_PAGO_ID == null) {
							if (other.TIPO_PAGO_ID != null)
								return false;
						
						} else if (!this.TIPO_PAGO_ID.equals(other.TIPO_PAGO_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Elimina3Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.DIAGNOSTICO_ID = this.DIAGNOSTICO_ID;
	            other.IPS_ID = this.IPS_ID;
	            other.TIPO_PAGO_ID = this.TIPO_PAGO_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            
	}

	public void copyKeysDataTo(Elimina3Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.DIAGNOSTICO_ID = this.DIAGNOSTICO_ID;
	            	other.IPS_ID = this.IPS_ID;
	            	other.TIPO_PAGO_ID = this.TIPO_PAGO_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICO_ID = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICO_ID = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAGNOSTICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO_PAGO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAGNOSTICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO_PAGO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",DIAGNOSTICO_ID="+String.valueOf(DIAGNOSTICO_ID));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",TIPO_PAGO_ID="+String.valueOf(TIPO_PAGO_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Elimina3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DIAGNOSTICO_ID, other.DIAGNOSTICO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.IPS_ID, other.IPS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIPO_PAGO_ID, other.TIPO_PAGO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Inserta4Struct implements routines.system.IPersistableRow<Inserta4Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal DIAGNOSTICO_ID;

				public BigDecimal getDIAGNOSTICO_ID () {
					return this.DIAGNOSTICO_ID;
				}

				public Boolean DIAGNOSTICO_IDIsNullable(){
				    return false;
				}
				public Boolean DIAGNOSTICO_IDIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICO_IDLength(){
				    return 0;
				}
				public Integer DIAGNOSTICO_IDPrecision(){
				    return null;
				}
				public String DIAGNOSTICO_IDDefault(){
				
					return "";
				
				}
				public String DIAGNOSTICO_IDComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICO_IDPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICO_IDOriginalDbColumnName(){
				
					return "DIAGNOSTICO_ID";
				
				}

				
			    public BigDecimal VALOR_FACTURADO;

				public BigDecimal getVALOR_FACTURADO () {
					return this.VALOR_FACTURADO;
				}

				public Boolean VALOR_FACTURADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_FACTURADOIsKey(){
				    return false;
				}
				public Integer VALOR_FACTURADOLength(){
				    return 0;
				}
				public Integer VALOR_FACTURADOPrecision(){
				    return 0;
				}
				public String VALOR_FACTURADODefault(){
				
					return "";
				
				}
				public String VALOR_FACTURADOComment(){
				
				    return "";
				
				}
				public String VALOR_FACTURADOPattern(){
				
					return "";
				
				}
				public String VALOR_FACTURADOOriginalDbColumnName(){
				
					return "VALOR_FACTURADO";
				
				}

				
			    public BigDecimal CUSUARIOS;

				public BigDecimal getCUSUARIOS () {
					return this.CUSUARIOS;
				}

				public Boolean CUSUARIOSIsNullable(){
				    return true;
				}
				public Boolean CUSUARIOSIsKey(){
				    return false;
				}
				public Integer CUSUARIOSLength(){
				    return 0;
				}
				public Integer CUSUARIOSPrecision(){
				    return 0;
				}
				public String CUSUARIOSDefault(){
				
					return "";
				
				}
				public String CUSUARIOSComment(){
				
				    return "";
				
				}
				public String CUSUARIOSPattern(){
				
					return "";
				
				}
				public String CUSUARIOSOriginalDbColumnName(){
				
					return "CUSUARIOS";
				
				}

				
			    public BigDecimal CFACTURAS;

				public BigDecimal getCFACTURAS () {
					return this.CFACTURAS;
				}

				public Boolean CFACTURASIsNullable(){
				    return true;
				}
				public Boolean CFACTURASIsKey(){
				    return false;
				}
				public Integer CFACTURASLength(){
				    return 0;
				}
				public Integer CFACTURASPrecision(){
				    return 0;
				}
				public String CFACTURASDefault(){
				
					return "";
				
				}
				public String CFACTURASComment(){
				
				    return "";
				
				}
				public String CFACTURASPattern(){
				
					return "";
				
				}
				public String CFACTURASOriginalDbColumnName(){
				
					return "CFACTURAS";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return false;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public BigDecimal VALOR_NETO;

				public BigDecimal getVALOR_NETO () {
					return this.VALOR_NETO;
				}

				public Boolean VALOR_NETOIsNullable(){
				    return true;
				}
				public Boolean VALOR_NETOIsKey(){
				    return false;
				}
				public Integer VALOR_NETOLength(){
				    return 0;
				}
				public Integer VALOR_NETOPrecision(){
				    return 0;
				}
				public String VALOR_NETODefault(){
				
					return "";
				
				}
				public String VALOR_NETOComment(){
				
				    return "";
				
				}
				public String VALOR_NETOPattern(){
				
					return "";
				
				}
				public String VALOR_NETOOriginalDbColumnName(){
				
					return "VALOR_NETO";
				
				}

				
			    public BigDecimal CDIAGNOSITCOS;

				public BigDecimal getCDIAGNOSITCOS () {
					return this.CDIAGNOSITCOS;
				}

				public Boolean CDIAGNOSITCOSIsNullable(){
				    return true;
				}
				public Boolean CDIAGNOSITCOSIsKey(){
				    return false;
				}
				public Integer CDIAGNOSITCOSLength(){
				    return 0;
				}
				public Integer CDIAGNOSITCOSPrecision(){
				    return 0;
				}
				public String CDIAGNOSITCOSDefault(){
				
					return "";
				
				}
				public String CDIAGNOSITCOSComment(){
				
				    return "";
				
				}
				public String CDIAGNOSITCOSPattern(){
				
					return "";
				
				}
				public String CDIAGNOSITCOSOriginalDbColumnName(){
				
					return "CDIAGNOSITCOS";
				
				}

				
			    public BigDecimal TIPO_PAGO_ID;

				public BigDecimal getTIPO_PAGO_ID () {
					return this.TIPO_PAGO_ID;
				}

				public Boolean TIPO_PAGO_IDIsNullable(){
				    return false;
				}
				public Boolean TIPO_PAGO_IDIsKey(){
				    return false;
				}
				public Integer TIPO_PAGO_IDLength(){
				    return 0;
				}
				public Integer TIPO_PAGO_IDPrecision(){
				    return null;
				}
				public String TIPO_PAGO_IDDefault(){
				
					return "";
				
				}
				public String TIPO_PAGO_IDComment(){
				
				    return "";
				
				}
				public String TIPO_PAGO_IDPattern(){
				
					return "";
				
				}
				public String TIPO_PAGO_IDOriginalDbColumnName(){
				
					return "TIPO_PAGO_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICO_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
						this.CUSUARIOS = (BigDecimal) dis.readObject();
					
						this.CFACTURAS = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_NETO = (BigDecimal) dis.readObject();
					
						this.CDIAGNOSITCOS = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICO_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
						this.CUSUARIOS = (BigDecimal) dis.readObject();
					
						this.CFACTURAS = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_NETO = (BigDecimal) dis.readObject();
					
						this.CDIAGNOSITCOS = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAGNOSTICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_FACTURADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUSUARIOS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CFACTURAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_NETO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CDIAGNOSITCOS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO_PAGO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAGNOSTICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_FACTURADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUSUARIOS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CFACTURAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_NETO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CDIAGNOSITCOS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO_PAGO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",DIAGNOSTICO_ID="+String.valueOf(DIAGNOSTICO_ID));
		sb.append(",VALOR_FACTURADO="+String.valueOf(VALOR_FACTURADO));
		sb.append(",CUSUARIOS="+String.valueOf(CUSUARIOS));
		sb.append(",CFACTURAS="+String.valueOf(CFACTURAS));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",VALOR_NETO="+String.valueOf(VALOR_NETO));
		sb.append(",CDIAGNOSITCOS="+String.valueOf(CDIAGNOSITCOS));
		sb.append(",TIPO_PAGO_ID="+String.valueOf(TIPO_PAGO_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public java.util.Date FPERIODO;

				public java.util.Date getFPERIODO () {
					return this.FPERIODO;
				}

				public Boolean FPERIODOIsNullable(){
				    return true;
				}
				public Boolean FPERIODOIsKey(){
				    return false;
				}
				public Integer FPERIODOLength(){
				    return 0;
				}
				public Integer FPERIODOPrecision(){
				    return 0;
				}
				public String FPERIODODefault(){
				
					return null;
				
				}
				public String FPERIODOComment(){
				
				    return "";
				
				}
				public String FPERIODOPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FPERIODOOriginalDbColumnName(){
				
					return "FPERIODO";
				
				}

				
			    public BigDecimal DIAGNOSTICO_ID;

				public BigDecimal getDIAGNOSTICO_ID () {
					return this.DIAGNOSTICO_ID;
				}

				public Boolean DIAGNOSTICO_IDIsNullable(){
				    return false;
				}
				public Boolean DIAGNOSTICO_IDIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICO_IDLength(){
				    return 0;
				}
				public Integer DIAGNOSTICO_IDPrecision(){
				    return null;
				}
				public String DIAGNOSTICO_IDDefault(){
				
					return "";
				
				}
				public String DIAGNOSTICO_IDComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICO_IDPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICO_IDOriginalDbColumnName(){
				
					return "DIAGNOSTICO_ID";
				
				}

				
			    public BigDecimal VALOR_FACTURADO;

				public BigDecimal getVALOR_FACTURADO () {
					return this.VALOR_FACTURADO;
				}

				public Boolean VALOR_FACTURADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_FACTURADOIsKey(){
				    return false;
				}
				public Integer VALOR_FACTURADOLength(){
				    return 0;
				}
				public Integer VALOR_FACTURADOPrecision(){
				    return 0;
				}
				public String VALOR_FACTURADODefault(){
				
					return "";
				
				}
				public String VALOR_FACTURADOComment(){
				
				    return "";
				
				}
				public String VALOR_FACTURADOPattern(){
				
					return "";
				
				}
				public String VALOR_FACTURADOOriginalDbColumnName(){
				
					return "VALOR_FACTURADO";
				
				}

				
			    public BigDecimal CUSUARIOS;

				public BigDecimal getCUSUARIOS () {
					return this.CUSUARIOS;
				}

				public Boolean CUSUARIOSIsNullable(){
				    return true;
				}
				public Boolean CUSUARIOSIsKey(){
				    return false;
				}
				public Integer CUSUARIOSLength(){
				    return 0;
				}
				public Integer CUSUARIOSPrecision(){
				    return 0;
				}
				public String CUSUARIOSDefault(){
				
					return "";
				
				}
				public String CUSUARIOSComment(){
				
				    return "";
				
				}
				public String CUSUARIOSPattern(){
				
					return "";
				
				}
				public String CUSUARIOSOriginalDbColumnName(){
				
					return "CUSUARIOS";
				
				}

				
			    public BigDecimal CFACTURAS;

				public BigDecimal getCFACTURAS () {
					return this.CFACTURAS;
				}

				public Boolean CFACTURASIsNullable(){
				    return true;
				}
				public Boolean CFACTURASIsKey(){
				    return false;
				}
				public Integer CFACTURASLength(){
				    return 0;
				}
				public Integer CFACTURASPrecision(){
				    return 0;
				}
				public String CFACTURASDefault(){
				
					return "";
				
				}
				public String CFACTURASComment(){
				
				    return "";
				
				}
				public String CFACTURASPattern(){
				
					return "";
				
				}
				public String CFACTURASOriginalDbColumnName(){
				
					return "CFACTURAS";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return false;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public BigDecimal VALOR_NETO;

				public BigDecimal getVALOR_NETO () {
					return this.VALOR_NETO;
				}

				public Boolean VALOR_NETOIsNullable(){
				    return true;
				}
				public Boolean VALOR_NETOIsKey(){
				    return false;
				}
				public Integer VALOR_NETOLength(){
				    return 0;
				}
				public Integer VALOR_NETOPrecision(){
				    return 0;
				}
				public String VALOR_NETODefault(){
				
					return "";
				
				}
				public String VALOR_NETOComment(){
				
				    return "";
				
				}
				public String VALOR_NETOPattern(){
				
					return "";
				
				}
				public String VALOR_NETOOriginalDbColumnName(){
				
					return "VALOR_NETO";
				
				}

				
			    public BigDecimal CDIAGNOSTICOS;

				public BigDecimal getCDIAGNOSTICOS () {
					return this.CDIAGNOSTICOS;
				}

				public Boolean CDIAGNOSTICOSIsNullable(){
				    return true;
				}
				public Boolean CDIAGNOSTICOSIsKey(){
				    return false;
				}
				public Integer CDIAGNOSTICOSLength(){
				    return 0;
				}
				public Integer CDIAGNOSTICOSPrecision(){
				    return 0;
				}
				public String CDIAGNOSTICOSDefault(){
				
					return "";
				
				}
				public String CDIAGNOSTICOSComment(){
				
				    return "";
				
				}
				public String CDIAGNOSTICOSPattern(){
				
					return "";
				
				}
				public String CDIAGNOSTICOSOriginalDbColumnName(){
				
					return "CDIAGNOSTICOS";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.DIAGNOSTICO_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
						this.CUSUARIOS = (BigDecimal) dis.readObject();
					
						this.CFACTURAS = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_NETO = (BigDecimal) dis.readObject();
					
						this.CDIAGNOSTICOS = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.DIAGNOSTICO_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
						this.CUSUARIOS = (BigDecimal) dis.readObject();
					
						this.CFACTURAS = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_NETO = (BigDecimal) dis.readObject();
					
						this.CDIAGNOSTICOS = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAGNOSTICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_FACTURADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUSUARIOS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CFACTURAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_NETO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CDIAGNOSTICOS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAGNOSTICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_FACTURADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUSUARIOS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CFACTURAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_NETO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CDIAGNOSTICOS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",FPERIODO="+String.valueOf(FPERIODO));
		sb.append(",DIAGNOSTICO_ID="+String.valueOf(DIAGNOSTICO_ID));
		sb.append(",VALOR_FACTURADO="+String.valueOf(VALOR_FACTURADO));
		sb.append(",CUSUARIOS="+String.valueOf(CUSUARIOS));
		sb.append(",CFACTURAS="+String.valueOf(CFACTURAS));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",VALOR_NETO="+String.valueOf(VALOR_NETO));
		sb.append(",CDIAGNOSTICOS="+String.valueOf(CDIAGNOSTICOS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_8Struct implements routines.system.IPersistableRow<after_tOracleInput_8Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public java.util.Date FPERIODO;

				public java.util.Date getFPERIODO () {
					return this.FPERIODO;
				}

				public Boolean FPERIODOIsNullable(){
				    return true;
				}
				public Boolean FPERIODOIsKey(){
				    return false;
				}
				public Integer FPERIODOLength(){
				    return 0;
				}
				public Integer FPERIODOPrecision(){
				    return 0;
				}
				public String FPERIODODefault(){
				
					return null;
				
				}
				public String FPERIODOComment(){
				
				    return "";
				
				}
				public String FPERIODOPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FPERIODOOriginalDbColumnName(){
				
					return "FPERIODO";
				
				}

				
			    public BigDecimal DIAGNOSTICO_ID;

				public BigDecimal getDIAGNOSTICO_ID () {
					return this.DIAGNOSTICO_ID;
				}

				public Boolean DIAGNOSTICO_IDIsNullable(){
				    return false;
				}
				public Boolean DIAGNOSTICO_IDIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICO_IDLength(){
				    return 0;
				}
				public Integer DIAGNOSTICO_IDPrecision(){
				    return null;
				}
				public String DIAGNOSTICO_IDDefault(){
				
					return "";
				
				}
				public String DIAGNOSTICO_IDComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICO_IDPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICO_IDOriginalDbColumnName(){
				
					return "DIAGNOSTICO_ID";
				
				}

				
			    public BigDecimal VALOR_FACTURADO;

				public BigDecimal getVALOR_FACTURADO () {
					return this.VALOR_FACTURADO;
				}

				public Boolean VALOR_FACTURADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_FACTURADOIsKey(){
				    return false;
				}
				public Integer VALOR_FACTURADOLength(){
				    return 0;
				}
				public Integer VALOR_FACTURADOPrecision(){
				    return 0;
				}
				public String VALOR_FACTURADODefault(){
				
					return "";
				
				}
				public String VALOR_FACTURADOComment(){
				
				    return "";
				
				}
				public String VALOR_FACTURADOPattern(){
				
					return "";
				
				}
				public String VALOR_FACTURADOOriginalDbColumnName(){
				
					return "VALOR_FACTURADO";
				
				}

				
			    public BigDecimal CUSUARIOS;

				public BigDecimal getCUSUARIOS () {
					return this.CUSUARIOS;
				}

				public Boolean CUSUARIOSIsNullable(){
				    return true;
				}
				public Boolean CUSUARIOSIsKey(){
				    return false;
				}
				public Integer CUSUARIOSLength(){
				    return 0;
				}
				public Integer CUSUARIOSPrecision(){
				    return 0;
				}
				public String CUSUARIOSDefault(){
				
					return "";
				
				}
				public String CUSUARIOSComment(){
				
				    return "";
				
				}
				public String CUSUARIOSPattern(){
				
					return "";
				
				}
				public String CUSUARIOSOriginalDbColumnName(){
				
					return "CUSUARIOS";
				
				}

				
			    public BigDecimal CFACTURAS;

				public BigDecimal getCFACTURAS () {
					return this.CFACTURAS;
				}

				public Boolean CFACTURASIsNullable(){
				    return true;
				}
				public Boolean CFACTURASIsKey(){
				    return false;
				}
				public Integer CFACTURASLength(){
				    return 0;
				}
				public Integer CFACTURASPrecision(){
				    return 0;
				}
				public String CFACTURASDefault(){
				
					return "";
				
				}
				public String CFACTURASComment(){
				
				    return "";
				
				}
				public String CFACTURASPattern(){
				
					return "";
				
				}
				public String CFACTURASOriginalDbColumnName(){
				
					return "CFACTURAS";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return false;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public BigDecimal VALOR_NETO;

				public BigDecimal getVALOR_NETO () {
					return this.VALOR_NETO;
				}

				public Boolean VALOR_NETOIsNullable(){
				    return true;
				}
				public Boolean VALOR_NETOIsKey(){
				    return false;
				}
				public Integer VALOR_NETOLength(){
				    return 0;
				}
				public Integer VALOR_NETOPrecision(){
				    return 0;
				}
				public String VALOR_NETODefault(){
				
					return "";
				
				}
				public String VALOR_NETOComment(){
				
				    return "";
				
				}
				public String VALOR_NETOPattern(){
				
					return "";
				
				}
				public String VALOR_NETOOriginalDbColumnName(){
				
					return "VALOR_NETO";
				
				}

				
			    public BigDecimal CDIAGNOSTICOS;

				public BigDecimal getCDIAGNOSTICOS () {
					return this.CDIAGNOSTICOS;
				}

				public Boolean CDIAGNOSTICOSIsNullable(){
				    return true;
				}
				public Boolean CDIAGNOSTICOSIsKey(){
				    return false;
				}
				public Integer CDIAGNOSTICOSLength(){
				    return 0;
				}
				public Integer CDIAGNOSTICOSPrecision(){
				    return 0;
				}
				public String CDIAGNOSTICOSDefault(){
				
					return "";
				
				}
				public String CDIAGNOSTICOSComment(){
				
				    return "";
				
				}
				public String CDIAGNOSTICOSPattern(){
				
					return "";
				
				}
				public String CDIAGNOSTICOSOriginalDbColumnName(){
				
					return "CDIAGNOSTICOS";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.DIAGNOSTICO_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
						this.CUSUARIOS = (BigDecimal) dis.readObject();
					
						this.CFACTURAS = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_NETO = (BigDecimal) dis.readObject();
					
						this.CDIAGNOSTICOS = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.DIAGNOSTICO_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
						this.CUSUARIOS = (BigDecimal) dis.readObject();
					
						this.CFACTURAS = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_NETO = (BigDecimal) dis.readObject();
					
						this.CDIAGNOSTICOS = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAGNOSTICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_FACTURADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUSUARIOS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CFACTURAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_NETO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CDIAGNOSTICOS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAGNOSTICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_FACTURADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUSUARIOS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CFACTURAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_NETO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CDIAGNOSTICOS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",FPERIODO="+String.valueOf(FPERIODO));
		sb.append(",DIAGNOSTICO_ID="+String.valueOf(DIAGNOSTICO_ID));
		sb.append(",VALOR_FACTURADO="+String.valueOf(VALOR_FACTURADO));
		sb.append(",CUSUARIOS="+String.valueOf(CUSUARIOS));
		sb.append(",CFACTURAS="+String.valueOf(CFACTURAS));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",VALOR_NETO="+String.valueOf(VALOR_NETO));
		sb.append(",CDIAGNOSTICOS="+String.valueOf(CDIAGNOSTICOS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_6Process(globalMap);
		tHashInput_7Process(globalMap);

		row20Struct row20 = new row20Struct();
Elimina3Struct Elimina3 = new Elimina3Struct();
Inserta4Struct Inserta4 = new Inserta4Struct();





	
	/**
	 * [tOracleOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_9", false);
		start_Hash.put("tOracleOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Elimina3");
					}
				
		int tos_count_tOracleOutput_9 = 0;
		






        int deleteKeyCount_tOracleOutput_9 = 5;
        if(deleteKeyCount_tOracleOutput_9 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_9 = 0;
    int nb_line_update_tOracleOutput_9 = 0;
    int nb_line_inserted_tOracleOutput_9 = 0;
    int nb_line_deleted_tOracleOutput_9 = 0;
    int nb_line_rejected_tOracleOutput_9 = 0;

    int tmp_batchUpdateCount_tOracleOutput_9 = 0;

    int deletedCount_tOracleOutput_9=0;
    int updatedCount_tOracleOutput_9=0;
    int insertedCount_tOracleOutput_9=0;
    int rowsToCommitCount_tOracleOutput_9=0;
    int rejectedCount_tOracleOutput_9=0;

    boolean whetherReject_tOracleOutput_9 = false;

    java.sql.Connection conn_tOracleOutput_9 = null;

    //optional table
    String dbschema_tOracleOutput_9 = null;
    String tableName_tOracleOutput_9 = null;
                    String driverClass_tOracleOutput_9 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_9);
                String url_tOracleOutput_9 = null;
                    url_tOracleOutput_9 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_9 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_9 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_9 = decryptedPassword_tOracleOutput_9;
                dbschema_tOracleOutput_9 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_9 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_9.put("user",dbUser_tOracleOutput_9);
                    atnParamsPrope_tOracleOutput_9.put("password",dbPwd_tOracleOutput_9);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_9.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_9 = java.sql.DriverManager.getConnection(url_tOracleOutput_9, atnParamsPrope_tOracleOutput_9);
        resourceMap.put("conn_tOracleOutput_9", conn_tOracleOutput_9);
            conn_tOracleOutput_9.setAutoCommit(false);
            int commitEvery_tOracleOutput_9 = 1000;
            int commitCounter_tOracleOutput_9 = 0;
        int batchSize_tOracleOutput_9 = 1000;
        int batchSizeCounter_tOracleOutput_9=0;
        int count_tOracleOutput_9=0;

        if(dbschema_tOracleOutput_9 == null || dbschema_tOracleOutput_9.trim().length() == 0) {
            tableName_tOracleOutput_9 = ("BACM_DIAGNOSTICOS");
        } else {
            tableName_tOracleOutput_9 = dbschema_tOracleOutput_9 + "." + ("BACM_DIAGNOSTICOS");
        }
                String delete_tOracleOutput_9 = "DELETE FROM " + tableName_tOracleOutput_9 + " WHERE UORG_ID = ? AND DIAGNOSTICO_ID = ? AND IPS_ID = ? AND TIPO_PAGO_ID = ? AND TIEMPOS_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_9 = conn_tOracleOutput_9.prepareStatement(delete_tOracleOutput_9);
                resourceMap.put("pstmt_tOracleOutput_9", pstmt_tOracleOutput_9);





 



/**
 * [tOracleOutput_9 begin ] stop
 */




	
	/**
	 * [tOracleOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_11", false);
		start_Hash.put("tOracleOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta4");
					}
				
		int tos_count_tOracleOutput_11 = 0;
		






    
    int nb_line_tOracleOutput_11 = 0;
    int nb_line_update_tOracleOutput_11 = 0;
    int nb_line_inserted_tOracleOutput_11 = 0;
    int nb_line_deleted_tOracleOutput_11 = 0;
    int nb_line_rejected_tOracleOutput_11 = 0;

    int tmp_batchUpdateCount_tOracleOutput_11 = 0;

    int deletedCount_tOracleOutput_11=0;
    int updatedCount_tOracleOutput_11=0;
    int insertedCount_tOracleOutput_11=0;
    int rowsToCommitCount_tOracleOutput_11=0;
    int rejectedCount_tOracleOutput_11=0;

    boolean whetherReject_tOracleOutput_11 = false;

    java.sql.Connection conn_tOracleOutput_11 = null;

    //optional table
    String dbschema_tOracleOutput_11 = null;
    String tableName_tOracleOutput_11 = null;
                    String driverClass_tOracleOutput_11 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_11);
                String url_tOracleOutput_11 = null;
                    url_tOracleOutput_11 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_11 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_11 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_11 = decryptedPassword_tOracleOutput_11;
                dbschema_tOracleOutput_11 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_11 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_11.put("user",dbUser_tOracleOutput_11);
                    atnParamsPrope_tOracleOutput_11.put("password",dbPwd_tOracleOutput_11);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_11.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_11 = java.sql.DriverManager.getConnection(url_tOracleOutput_11, atnParamsPrope_tOracleOutput_11);
        resourceMap.put("conn_tOracleOutput_11", conn_tOracleOutput_11);
            conn_tOracleOutput_11.setAutoCommit(false);
            int commitEvery_tOracleOutput_11 = 1000;
            int commitCounter_tOracleOutput_11 = 0;
        int batchSize_tOracleOutput_11 = 1000;
        int batchSizeCounter_tOracleOutput_11=0;
        int count_tOracleOutput_11=0;

        if(dbschema_tOracleOutput_11 == null || dbschema_tOracleOutput_11.trim().length() == 0) {
            tableName_tOracleOutput_11 = ("BACM_DIAGNOSTICOS");
        } else {
            tableName_tOracleOutput_11 = dbschema_tOracleOutput_11 + "." + ("BACM_DIAGNOSTICOS");
        }
                String insert_tOracleOutput_11 = "INSERT INTO " + tableName_tOracleOutput_11 + " (UORG_ID,DIAGNOSTICO_ID,VALOR_FACTURADO,CUSUARIOS,CFACTURAS,IPS_ID,VALOR_NETO,CDIAGNOSITCOS,TIPO_PAGO_ID,TIEMPOS_ID) VALUES (?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_11 = conn_tOracleOutput_11.prepareStatement(insert_tOracleOutput_11);
                        resourceMap.put("pstmt_tOracleOutput_11", pstmt_tOracleOutput_11);





 



/**
 * [tOracleOutput_11 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
					globalMap.get( "tHash_Lookup_row21" ))
					;					
					
	

row21Struct row21HashKey = new row21Struct();
row21Struct row21Default = new row21Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
					globalMap.get( "tHash_Lookup_row22" ))
					;					
					
	

row22Struct row22HashKey = new row22Struct();
row22Struct row22Default = new row22Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
Elimina3Struct Elimina3_tmp = new Elimina3Struct();
Inserta4Struct Inserta4_tmp = new Inserta4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_8", false);
		start_Hash.put("tOracleInput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_8";
	
	
		int tos_count_tOracleInput_8 = 0;
		
	


	
		    int nb_line_tOracleInput_8 = 0;
		    java.sql.Connection conn_tOracleInput_8 = null;
				conn_tOracleInput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_8 = false;
				boolean isConnectionWrapped_tOracleInput_8 = !(conn_tOracleInput_8 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_8.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_8 = null;
                if (isConnectionWrapped_tOracleInput_8) {
					unwrappedOraConn_tOracleInput_8 = conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_8 != null) {
                        isTimeZoneNull_tOracleInput_8 = (unwrappedOraConn_tOracleInput_8.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_8 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_8).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_8) {
					java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_8 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_8.next()) {
						sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_8 && unwrappedOraConn_tOracleInput_8 != null) {
                        unwrappedOraConn_tOracleInput_8.setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_8).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_8.setFetchSize(1000);


		    String dbquery_tOracleInput_8 = "SELECT    AR.UORG_ID                \n        , COND.CONTRATOS_ID\n        , COND.CLASE\n        , TRUNC( NVL(DFS.FSERV"
+"ICIO,DFF.FDISPENSACION), 'MONTH' ) FPERIODO  \n        , CIE.ID AS DIAGNOSTICO_ID            \n        , SUM( NVL(DFS.VT"
+"OTAL, DFF.VTOTAL) ) AS VALOR_FACTURADO\n        , COUNT (DISTINCT NVL(DFS.PERSONAS_ID,DFF.PERSONAS_ID) ) AS CUSUARIOS\n "
+"       , COUNT ( DISTINCT NVL(DFS.FACTURA_ID, DFF.FACTURA_ID) ) AS CFACTURAS\n        , AR.PRESTADOR_ID AS IPS_ID\n     "
+"   , SUM( NVL(DFS.VAVALPAGO,DFF.VAVALPAGO) ) AS VALOR_NETO\n        , COUNT ( CIE.ID ) AS CDIAGNOSTICOS    \nFROM ACM_ET"
+"APASNORMATIVIDAD AE\nINNER JOIN ACM_HAUDITORIAS AH ON AH.ETAPASNORMATIVIDAD_ID = AE.ID\nINNER JOIN ACM_RECEPCION AR ON A"
+"R.ID = AH.RECEPCION_ID\nINNER JOIN ACM_ESTAUDITORIAS ESA ON ESA.ID = AH.ESTAUDITORIA_ID\nLEFT JOIN ACM_DFACTURASERVICIO "
+"DFS ON DFS.RECEPCION_ID = AR.ID AND DFS.ESTREGISTRO_ID = 1\nLEFT JOIN ACM_DFACTURAFORMULACION DFF ON DFF.RECEPCION_ID = "
+"AH.RECEPCION_ID AND DFF.ESTREGISTRO_ID  = 1 \nINNER JOIN GEN_CIE10 CIE ON ( CIE.CODIGO = DFS.CODIGO_CIE10 OR DFF.CIE10_I"
+"D = CIE.ID )\nINNER JOIN ( \n    SELECT    FPERIODO\n            , IPS_ID\n            , UORG_ID\n            , CONTRATO"
+"S_ID\n            , CLASE\n            , DIAGNOSTICOS_ID            \n    FROM (\n      SELECT    COALESCE( RE.CONTRATOS"
+"_ID, RE.MEDCONTRATOS_ID, 0 ) AS CONTRATOS_ID\n              , CASE  \n                  WHEN RE.CONTRATOS_ID IS NOT NULL"
+"\n                  THEN 1\n                  WHEN RE.MEDCONTRATOS_ID IS NOT NULL \n                  THEN 2\n          "
+"        ELSE 3\n                END AS CLASE      \n              , NVL( TRUNC ( DFS.FSERVICIO , 'MONTH'), TRUNC( DFF.FD"
+"ISPENSACION,\n  'MONTH')) AS FPERIODO\n              , RE.PRESTADOR_ID AS IPS_ID\n              , RE.UORG_ID\n           "
+"   , NVL( DFS.CIE10_ID, CIE.ID ) AS DIAGNOSTICOS_ID              \n              , ROW_NUMBER() OVER ( PARTITION BY  COA"
+"LESCE( RE.CONTRATOS_ID, RE.MEDCONTRATOS_ID,  0 )\n                                                 , CASE  \n           "
+"                                           WHEN RE.CONTRATOS_ID IS NOT NULL\n                                           "
+"           THEN 1\n                                                      WHEN RE.MEDCONTRATOS_ID IS NOT NULL \n         "
+"                                             THEN 2\n                                                      ELSE 3\n     "
+"                                               END \n                                                 , NVL( TRUNC ( DFS"
+".FSERVICIO , 'MONTH'),\n 															 TRUNC( DFF.FDISPENSACION, 'MONTH'))\n                                           "
+"      , RE.PRESTADOR_ID\n                                                 , RE.UORG_ID \n                               "
+"                  , NVL( DFS.CIE10_ID, CIE.ID ) ORDER BY RE.ID ) R\n      FROM ACM_ETAPASNORMATIVIDAD EN\n      INNER JO"
+"IN ACM_HAUDITORIAS HA ON EN.ID = HA.ETAPASNORMATIVIDAD_ID\n	  INNER JOIN ACM_ESTAUDITORIAS ESA ON ESA.ID = HA.ESTAUDITOR"
+"IA_ID	\n      INNER JOIN ACM_RECEPCION RE ON RE.ID = HA.RECEPCION_ID\n      LEFT JOIN ACM_DFACTURASERVICIO DFS ON DFS.RE"
+"CEPCION_ID = HA.RECEPCION_ID  AND \n DFS.ESTREGISTRO_ID = 1\n      LEFT JOIN ACM_DFACTURAFORMULACION DFF ON DFF.RECEPCION"
+"_ID = HA.RECEPCION_ID AND \n DFF.ESTREGISTRO_ID = 1     \n      INNER JOIN GEN_CIE10 CIE ON ( CIE.CODIGO = DFS.CODIGO_CIE"
+"10 OR DFF.CIE10_ID = CIE.ID )\n      WHERE (      EN.RESPONSABLE = 'AUDITOR' \n              OR ( EN.RESPONSABLE = 'PRES"
+"TADOR' AND HA.TIPO = 'Conciliación' )\n            )       \n        AND HA.ESTREGISTRO_ID = 1\n        AND RE.ESTREGIST"
+"RO_ID = 1\n       AND ESA.NOMBRE = 'Finalizada'\n        AND ( HA.EJECUCION = 1 )\n        "+context.CONDICION+"\n    ) WHERE R = 1\n) COND ON ( COND.CONTRATOS_ID = COALESCE( AR.CONTRATOS_ID, AR.MEDCONTRATOS_ID, 0 ) )\n      AND CO"
+"ND.FPERIODO =  TRUNC( NVL(DFS.FSERVICIO,DFF.FDISPENSACION), 'MONTH' )\n      AND COND.CLASE = DECODE ( AR.CONTRATOS_ID, "
+"NULL, DECODE (AR.MEDCONTRATOS_ID, NULL, 3, 2),1 )\n      AND COND.UORG_ID = AR.UORG_ID\n      AND COND.IPS_ID = AR.PREST"
+"ADOR_ID\n      AND COND.DIAGNOSTICOS_ID = CIE.ID\nWHERE AE.CODIGO = 1\n  AND AH.ESTREGISTRO_ID = 1\n  AND AR.ESTREGISTRO"
+"_ID = 1  \n  AND ( AH.EJECUCION = 1 )\n  AND AH.FFETAPA IS NOT NULL \n  AND ESA.NOMBRE = 'Finalizada'\nGROUP BY AR.UORG_"
+"ID                \n        , COND.CONTRATOS_ID\n        , COND.CLASE\n        , TRUNC( NVL(DFS.FSERVICIO,DFF.FDISPENSAC"
+"ION), 'MONTH' ) \n        , CIE.ID             \n        , AR.PRESTADOR_ID \n        , AH.RECEPCION_ID";
		    

		    globalMap.put("tOracleInput_8_QUERY",dbquery_tOracleInput_8);

		    java.sql.ResultSet rs_tOracleInput_8 = null;

		    try {
		    	rs_tOracleInput_8 = stmt_tOracleInput_8.executeQuery(dbquery_tOracleInput_8);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8.getMetaData();
		    	int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8.getColumnCount();

		    String tmpContent_tOracleInput_8 = null;
		    
		    
		    while (rs_tOracleInput_8.next()) {
		        nb_line_tOracleInput_8++;
		        
							if(colQtyInRs_tOracleInput_8 < 1) {
								row20.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(1) != null) {
						row20.UORG_ID = rs_tOracleInput_8.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 2) {
								row20.CONTRATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(2) != null) {
						row20.CONTRATOS_ID = rs_tOracleInput_8.getBigDecimal(2);
					} else {
				
						row20.CONTRATOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 3) {
								row20.CLASE = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(3) != null) {
						row20.CLASE = rs_tOracleInput_8.getBigDecimal(3);
					} else {
				
						row20.CLASE = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 4) {
								row20.FPERIODO = null;
							} else {
										
			row20.FPERIODO = routines.system.JDBCUtil.getDate(rs_tOracleInput_8, 4);
		                    }
							if(colQtyInRs_tOracleInput_8 < 5) {
								row20.DIAGNOSTICO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(5) != null) {
						row20.DIAGNOSTICO_ID = rs_tOracleInput_8.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 6) {
								row20.VALOR_FACTURADO = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(6) != null) {
						row20.VALOR_FACTURADO = rs_tOracleInput_8.getBigDecimal(6);
					} else {
				
						row20.VALOR_FACTURADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 7) {
								row20.CUSUARIOS = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(7) != null) {
						row20.CUSUARIOS = rs_tOracleInput_8.getBigDecimal(7);
					} else {
				
						row20.CUSUARIOS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 8) {
								row20.CFACTURAS = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(8) != null) {
						row20.CFACTURAS = rs_tOracleInput_8.getBigDecimal(8);
					} else {
				
						row20.CFACTURAS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 9) {
								row20.IPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(9) != null) {
						row20.IPS_ID = rs_tOracleInput_8.getBigDecimal(9);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 10) {
								row20.VALOR_NETO = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(10) != null) {
						row20.VALOR_NETO = rs_tOracleInput_8.getBigDecimal(10);
					} else {
				
						row20.VALOR_NETO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 11) {
								row20.CDIAGNOSTICOS = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(11) != null) {
						row20.CDIAGNOSTICOS = rs_tOracleInput_8.getBigDecimal(11);
					} else {
				
						row20.CDIAGNOSTICOS = null;
					}
		                    }
					




 



/**
 * [tOracleInput_8 begin ] stop
 */
	
	/**
	 * [tOracleInput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 


	tos_count_tOracleInput_8++;

/**
 * [tOracleInput_8 main ] stop
 */
	
	/**
	 * [tOracleInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
						row21Struct row21 = null;
					
						row22Struct row22 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row21" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow21 = false;
       		  	    	
       		  	    	
 							row21Struct row21ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row21HashKey.CONTRATOS_ID = row20.CONTRATOS_ID ;
                        		    		
                        		    		    row21HashKey.CLASE = row20.CLASE ;
                        		    		

								
		                        	row21HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row21.lookup( row21HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row21.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_5 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row21 != null && tHash_Lookup_row21.getCount(row21HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row21' and it contains more one result from keys :  row21.CONTRATOS_ID = '" + row21HashKey.CONTRATOS_ID + "', row21.CLASE = '" + row21HashKey.CLASE + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row21Struct fromLookup_row21 = null;
							row21 = row21Default;
										 
							
								 
							
							
								if (tHash_Lookup_row21 !=null && tHash_Lookup_row21.hasNext()) { // G 099
								
							
								
								fromLookup_row21 = tHash_Lookup_row21.next();

							
							
								} // G 099
							
							

							if(fromLookup_row21 != null) {
								row21 = fromLookup_row21;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row22" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow22 = false;
       		  	    	
       		  	    	
 							row22Struct row22ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row22HashKey.FECHA = row20.FPERIODO  == null ? null : new java.util.Date((row20.FPERIODO ).getTime());
                        		    		

								
		                        	row22HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row22.lookup( row22HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row22.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_5 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row22 != null && tHash_Lookup_row22.getCount(row22HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row22' and it contains more one result from keys :  row22.FECHA = '" + row22HashKey.FECHA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row22Struct fromLookup_row22 = null;
							row22 = row22Default;
										 
							
								 
							
							
								if (tHash_Lookup_row22 !=null && tHash_Lookup_row22.hasNext()) { // G 099
								
							
								
								fromLookup_row22 = tHash_Lookup_row22.next();

							
							
								} // G 099
							
							

							if(fromLookup_row22 != null) {
								row22 = fromLookup_row22;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

Elimina3 = null;
Inserta4 = null;

if(!rejectedInnerJoin_tMap_5 ) {

// # Output table : 'Elimina3'
Elimina3_tmp.UORG_ID = row20.UORG_ID ;
Elimina3_tmp.DIAGNOSTICO_ID = row20.DIAGNOSTICO_ID ;
Elimina3_tmp.IPS_ID = row20.IPS_ID ;
Elimina3_tmp.TIPO_PAGO_ID = row21.ID ;
Elimina3_tmp.TIEMPOS_ID = row22.ID ;
Elimina3 = Elimina3_tmp;

// # Output table : 'Inserta4'
Inserta4_tmp.UORG_ID = row20.UORG_ID ;
Inserta4_tmp.DIAGNOSTICO_ID = row20.DIAGNOSTICO_ID ;
Inserta4_tmp.VALOR_FACTURADO = row20.VALOR_FACTURADO ;
Inserta4_tmp.CUSUARIOS = row20.CUSUARIOS ;
Inserta4_tmp.CFACTURAS = row20.CFACTURAS ;
Inserta4_tmp.IPS_ID = row20.IPS_ID ;
Inserta4_tmp.VALOR_NETO = row20.VALOR_NETO ;
Inserta4_tmp.CDIAGNOSITCOS = row20.CDIAGNOSTICOS ;
Inserta4_tmp.TIPO_PAGO_ID = row21.ID ;
Inserta4_tmp.TIEMPOS_ID = row22.ID ;
Inserta4 = Inserta4_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "Elimina3"
if(Elimina3 != null) { 



	
	/**
	 * [tOracleOutput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Elimina3"
						
						);
					}
					



        whetherReject_tOracleOutput_9 = false;
                    pstmt_tOracleOutput_9.setBigDecimal(1, Elimina3.UORG_ID);

                    pstmt_tOracleOutput_9.setBigDecimal(2, Elimina3.DIAGNOSTICO_ID);

                    pstmt_tOracleOutput_9.setBigDecimal(3, Elimina3.IPS_ID);

                    pstmt_tOracleOutput_9.setBigDecimal(4, Elimina3.TIPO_PAGO_ID);

                    pstmt_tOracleOutput_9.setBigDecimal(5, Elimina3.TIEMPOS_ID);

                pstmt_tOracleOutput_9.addBatch();
                nb_line_tOracleOutput_9++;
                batchSizeCounter_tOracleOutput_9++;
            if (batchSize_tOracleOutput_9 > 0 &&  batchSize_tOracleOutput_9 <= batchSizeCounter_tOracleOutput_9) {
                try {
                    pstmt_tOracleOutput_9.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_9){
globalMap.put("tOracleOutput_9_ERROR_MESSAGE",e_tOracleOutput_9.getMessage());
			        java.sql.SQLException ne_tOracleOutput_9 = e_tOracleOutput_9.getNextException(),sqle_tOracleOutput_9=null;
			    	String errormessage_tOracleOutput_9;
					if (ne_tOracleOutput_9 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_9 = new java.sql.SQLException(e_tOracleOutput_9.getMessage() + "\ncaused by: " + ne_tOracleOutput_9.getMessage(), ne_tOracleOutput_9.getSQLState(), ne_tOracleOutput_9.getErrorCode(), ne_tOracleOutput_9);
						errormessage_tOracleOutput_9 = sqle_tOracleOutput_9.getMessage();
					}else{
						errormessage_tOracleOutput_9 = e_tOracleOutput_9.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_9);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_9 = pstmt_tOracleOutput_9.getUpdateCount();
                    deletedCount_tOracleOutput_9
                += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                rowsToCommitCount_tOracleOutput_9 += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                batchSizeCounter_tOracleOutput_9 = 0;
            }
                commitCounter_tOracleOutput_9++;
                if(commitEvery_tOracleOutput_9 <= commitCounter_tOracleOutput_9) {
                    if(batchSizeCounter_tOracleOutput_9 > 0) {
                        try {
                            pstmt_tOracleOutput_9.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_9){
globalMap.put("tOracleOutput_9_ERROR_MESSAGE",e_tOracleOutput_9.getMessage());
					        java.sql.SQLException ne_tOracleOutput_9 = e_tOracleOutput_9.getNextException(),sqle_tOracleOutput_9=null;
					    	String errormessage_tOracleOutput_9;
							if (ne_tOracleOutput_9 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_9 = new java.sql.SQLException(e_tOracleOutput_9.getMessage() + "\ncaused by: " + ne_tOracleOutput_9.getMessage(), ne_tOracleOutput_9.getSQLState(), ne_tOracleOutput_9.getErrorCode(), ne_tOracleOutput_9);
								errormessage_tOracleOutput_9 = sqle_tOracleOutput_9.getMessage();
							}else{
								errormessage_tOracleOutput_9 = e_tOracleOutput_9.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_9);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_9 = pstmt_tOracleOutput_9.getUpdateCount();
                            deletedCount_tOracleOutput_9
                        += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                        rowsToCommitCount_tOracleOutput_9 += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_9 != 0){
                    	
                    }
                    conn_tOracleOutput_9.commit();
                    if(rowsToCommitCount_tOracleOutput_9 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_9 = 0;
                    }
                    commitCounter_tOracleOutput_9=0;
                    	batchSizeCounter_tOracleOutput_9=0;
                }

 


	tos_count_tOracleOutput_9++;

/**
 * [tOracleOutput_9 main ] stop
 */
	
	/**
	 * [tOracleOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	

 



/**
 * [tOracleOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	

 



/**
 * [tOracleOutput_9 process_data_end ] stop
 */

} // End of branch "Elimina3"




// Start of branch "Inserta4"
if(Inserta4 != null) { 



	
	/**
	 * [tOracleOutput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta4"
						
						);
					}
					



        whetherReject_tOracleOutput_11 = false;
                        pstmt_tOracleOutput_11.setBigDecimal(1, Inserta4.UORG_ID);

                        pstmt_tOracleOutput_11.setBigDecimal(2, Inserta4.DIAGNOSTICO_ID);

                        pstmt_tOracleOutput_11.setBigDecimal(3, Inserta4.VALOR_FACTURADO);

                        pstmt_tOracleOutput_11.setBigDecimal(4, Inserta4.CUSUARIOS);

                        pstmt_tOracleOutput_11.setBigDecimal(5, Inserta4.CFACTURAS);

                        pstmt_tOracleOutput_11.setBigDecimal(6, Inserta4.IPS_ID);

                        pstmt_tOracleOutput_11.setBigDecimal(7, Inserta4.VALOR_NETO);

                        pstmt_tOracleOutput_11.setBigDecimal(8, Inserta4.CDIAGNOSITCOS);

                        pstmt_tOracleOutput_11.setBigDecimal(9, Inserta4.TIPO_PAGO_ID);

                        pstmt_tOracleOutput_11.setBigDecimal(10, Inserta4.TIEMPOS_ID);

                pstmt_tOracleOutput_11.addBatch();
                nb_line_tOracleOutput_11++;
                batchSizeCounter_tOracleOutput_11++;
            if (batchSize_tOracleOutput_11 > 0 &&  batchSize_tOracleOutput_11 <= batchSizeCounter_tOracleOutput_11) {
                try {
                    pstmt_tOracleOutput_11.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_11){
globalMap.put("tOracleOutput_11_ERROR_MESSAGE",e_tOracleOutput_11.getMessage());
			        java.sql.SQLException ne_tOracleOutput_11 = e_tOracleOutput_11.getNextException(),sqle_tOracleOutput_11=null;
			    	String errormessage_tOracleOutput_11;
					if (ne_tOracleOutput_11 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_11 = new java.sql.SQLException(e_tOracleOutput_11.getMessage() + "\ncaused by: " + ne_tOracleOutput_11.getMessage(), ne_tOracleOutput_11.getSQLState(), ne_tOracleOutput_11.getErrorCode(), ne_tOracleOutput_11);
						errormessage_tOracleOutput_11 = sqle_tOracleOutput_11.getMessage();
					}else{
						errormessage_tOracleOutput_11 = e_tOracleOutput_11.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_11);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_11 = pstmt_tOracleOutput_11.getUpdateCount();
                    insertedCount_tOracleOutput_11
                += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                rowsToCommitCount_tOracleOutput_11 += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                batchSizeCounter_tOracleOutput_11 = 0;
            }
                commitCounter_tOracleOutput_11++;
                if(commitEvery_tOracleOutput_11 <= commitCounter_tOracleOutput_11) {
                    if(batchSizeCounter_tOracleOutput_11 > 0) {
                        try {
                            pstmt_tOracleOutput_11.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_11){
globalMap.put("tOracleOutput_11_ERROR_MESSAGE",e_tOracleOutput_11.getMessage());
					        java.sql.SQLException ne_tOracleOutput_11 = e_tOracleOutput_11.getNextException(),sqle_tOracleOutput_11=null;
					    	String errormessage_tOracleOutput_11;
							if (ne_tOracleOutput_11 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_11 = new java.sql.SQLException(e_tOracleOutput_11.getMessage() + "\ncaused by: " + ne_tOracleOutput_11.getMessage(), ne_tOracleOutput_11.getSQLState(), ne_tOracleOutput_11.getErrorCode(), ne_tOracleOutput_11);
								errormessage_tOracleOutput_11 = sqle_tOracleOutput_11.getMessage();
							}else{
								errormessage_tOracleOutput_11 = e_tOracleOutput_11.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_11);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_11 = pstmt_tOracleOutput_11.getUpdateCount();
                            insertedCount_tOracleOutput_11
                        += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                        rowsToCommitCount_tOracleOutput_11 += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_11 != 0){
                    	
                    }
                    conn_tOracleOutput_11.commit();
                    if(rowsToCommitCount_tOracleOutput_11 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_11 = 0;
                    }
                    commitCounter_tOracleOutput_11=0;
                    	batchSizeCounter_tOracleOutput_11=0;
                }

 


	tos_count_tOracleOutput_11++;

/**
 * [tOracleOutput_11 main ] stop
 */
	
	/**
	 * [tOracleOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	

 



/**
 * [tOracleOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	

 



/**
 * [tOracleOutput_11 process_data_end ] stop
 */

} // End of branch "Inserta4"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

}
}finally{
	if (rs_tOracleInput_8 != null) {
		rs_tOracleInput_8.close();
	}
	if (stmt_tOracleInput_8 != null) {
		stmt_tOracleInput_8.close();
	}
}

globalMap.put("tOracleInput_8_NB_LINE",nb_line_tOracleInput_8);
 

ok_Hash.put("tOracleInput_8", true);
end_Hash.put("tOracleInput_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tJava_6Process(globalMap);



/**
 * [tOracleInput_8 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row21 != null) {
						tHash_Lookup_row21.endGet();
					}
					globalMap.remove( "tHash_Lookup_row21" );

					
					
				
					if(tHash_Lookup_row22 != null) {
						tHash_Lookup_row22.endGet();
					}
					globalMap.remove( "tHash_Lookup_row22" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tOracleOutput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_9 > 0) {
            try {
            	if (pstmt_tOracleOutput_9 != null) {
					
					pstmt_tOracleOutput_9.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_9){
globalMap.put("tOracleOutput_9_ERROR_MESSAGE",e_tOracleOutput_9.getMessage());
		        java.sql.SQLException ne_tOracleOutput_9 = e_tOracleOutput_9.getNextException(),sqle_tOracleOutput_9=null;
		    	String errormessage_tOracleOutput_9;
				if (ne_tOracleOutput_9 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_9 = new java.sql.SQLException(e_tOracleOutput_9.getMessage() + "\ncaused by: " + ne_tOracleOutput_9.getMessage(), ne_tOracleOutput_9.getSQLState(), ne_tOracleOutput_9.getErrorCode(), ne_tOracleOutput_9);
					errormessage_tOracleOutput_9 = sqle_tOracleOutput_9.getMessage();
				}else{
					errormessage_tOracleOutput_9 = e_tOracleOutput_9.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_9);
            	
        	}
        	if (pstmt_tOracleOutput_9 != null) {
            	tmp_batchUpdateCount_tOracleOutput_9 = pstmt_tOracleOutput_9.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_9
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
				rowsToCommitCount_tOracleOutput_9 += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
            }
        }
        if(pstmt_tOracleOutput_9 != null) {
			
				pstmt_tOracleOutput_9.close();
				resourceMap.remove("pstmt_tOracleOutput_9");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_9", true);
		if(commitCounter_tOracleOutput_9 > 0 && rowsToCommitCount_tOracleOutput_9 != 0) {
			
		}
		conn_tOracleOutput_9.commit();
		if(commitCounter_tOracleOutput_9 > 0 && rowsToCommitCount_tOracleOutput_9 != 0) {
			
			rowsToCommitCount_tOracleOutput_9 = 0;
		}
		commitCounter_tOracleOutput_9 = 0;
		
		
		conn_tOracleOutput_9 .close();
		
		resourceMap.put("finish_tOracleOutput_9", true);
   	

	
	nb_line_deleted_tOracleOutput_9=nb_line_deleted_tOracleOutput_9+ deletedCount_tOracleOutput_9;
	nb_line_update_tOracleOutput_9=nb_line_update_tOracleOutput_9 + updatedCount_tOracleOutput_9;
	nb_line_inserted_tOracleOutput_9=nb_line_inserted_tOracleOutput_9 + insertedCount_tOracleOutput_9;
	nb_line_rejected_tOracleOutput_9=nb_line_rejected_tOracleOutput_9 + rejectedCount_tOracleOutput_9;
	
        globalMap.put("tOracleOutput_9_NB_LINE",nb_line_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_UPDATED",nb_line_update_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_9);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Elimina3");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_9", true);
end_Hash.put("tOracleOutput_9", System.currentTimeMillis());




/**
 * [tOracleOutput_9 end ] stop
 */




	
	/**
	 * [tOracleOutput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_11 > 0) {
            try {
            	if (pstmt_tOracleOutput_11 != null) {
					
					pstmt_tOracleOutput_11.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_11){
globalMap.put("tOracleOutput_11_ERROR_MESSAGE",e_tOracleOutput_11.getMessage());
		        java.sql.SQLException ne_tOracleOutput_11 = e_tOracleOutput_11.getNextException(),sqle_tOracleOutput_11=null;
		    	String errormessage_tOracleOutput_11;
				if (ne_tOracleOutput_11 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_11 = new java.sql.SQLException(e_tOracleOutput_11.getMessage() + "\ncaused by: " + ne_tOracleOutput_11.getMessage(), ne_tOracleOutput_11.getSQLState(), ne_tOracleOutput_11.getErrorCode(), ne_tOracleOutput_11);
					errormessage_tOracleOutput_11 = sqle_tOracleOutput_11.getMessage();
				}else{
					errormessage_tOracleOutput_11 = e_tOracleOutput_11.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_11);
            	
        	}
        	if (pstmt_tOracleOutput_11 != null) {
            	tmp_batchUpdateCount_tOracleOutput_11 = pstmt_tOracleOutput_11.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_11
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
				rowsToCommitCount_tOracleOutput_11 += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
            }
        }
        if(pstmt_tOracleOutput_11 != null) {
			
				pstmt_tOracleOutput_11.close();
				resourceMap.remove("pstmt_tOracleOutput_11");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_11", true);
		if(commitCounter_tOracleOutput_11 > 0 && rowsToCommitCount_tOracleOutput_11 != 0) {
			
		}
		conn_tOracleOutput_11.commit();
		if(commitCounter_tOracleOutput_11 > 0 && rowsToCommitCount_tOracleOutput_11 != 0) {
			
			rowsToCommitCount_tOracleOutput_11 = 0;
		}
		commitCounter_tOracleOutput_11 = 0;
		
		
		conn_tOracleOutput_11 .close();
		
		resourceMap.put("finish_tOracleOutput_11", true);
   	

	
	nb_line_deleted_tOracleOutput_11=nb_line_deleted_tOracleOutput_11+ deletedCount_tOracleOutput_11;
	nb_line_update_tOracleOutput_11=nb_line_update_tOracleOutput_11 + updatedCount_tOracleOutput_11;
	nb_line_inserted_tOracleOutput_11=nb_line_inserted_tOracleOutput_11 + insertedCount_tOracleOutput_11;
	nb_line_rejected_tOracleOutput_11=nb_line_rejected_tOracleOutput_11 + rejectedCount_tOracleOutput_11;
	
        globalMap.put("tOracleOutput_11_NB_LINE",nb_line_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_UPDATED",nb_line_update_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_11);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta4");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_11", true);
end_Hash.put("tOracleOutput_11", System.currentTimeMillis());




/**
 * [tOracleOutput_11 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tOracleInput_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row21"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row22"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tOracleOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_9") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_9 = null;
                if ((pstmtToClose_tOracleOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_9")) != null) {
                    pstmtToClose_tOracleOutput_9.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_9") == null){
            java.sql.Connection ctn_tOracleOutput_9 = null;
            if((ctn_tOracleOutput_9 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_9")) != null){
                try {
                    ctn_tOracleOutput_9.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_9) {
                    String errorMessage_tOracleOutput_9 = "failed to close the connection in tOracleOutput_9 :" + sqlEx_tOracleOutput_9.getMessage();
                    System.err.println(errorMessage_tOracleOutput_9);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_9 finally ] stop
 */




	
	/**
	 * [tOracleOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_11") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_11 = null;
                if ((pstmtToClose_tOracleOutput_11 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_11")) != null) {
                    pstmtToClose_tOracleOutput_11.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_11") == null){
            java.sql.Connection ctn_tOracleOutput_11 = null;
            if((ctn_tOracleOutput_11 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_11")) != null){
                try {
                    ctn_tOracleOutput_11.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_11) {
                    String errorMessage_tOracleOutput_11 = "failed to close the connection in tOracleOutput_11 :" + sqlEx_tOracleOutput_11.getMessage();
                    System.err.println(errorMessage_tOracleOutput_11);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_11 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class Elimina4Struct implements routines.system.IPersistableRow<Elimina4Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return false;
				}
				public Boolean IPS_IDIsKey(){
				    return true;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal SEXOS_ID;

				public BigDecimal getSEXOS_ID () {
					return this.SEXOS_ID;
				}

				public Boolean SEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean SEXOS_IDIsKey(){
				    return true;
				}
				public Integer SEXOS_IDLength(){
				    return 0;
				}
				public Integer SEXOS_IDPrecision(){
				    return null;
				}
				public String SEXOS_IDDefault(){
				
					return "";
				
				}
				public String SEXOS_IDComment(){
				
				    return "";
				
				}
				public String SEXOS_IDPattern(){
				
					return "";
				
				}
				public String SEXOS_IDOriginalDbColumnName(){
				
					return "SEXOS_ID";
				
				}

				
			    public BigDecimal RANGOEDAD_ID;

				public BigDecimal getRANGOEDAD_ID () {
					return this.RANGOEDAD_ID;
				}

				public Boolean RANGOEDAD_IDIsNullable(){
				    return false;
				}
				public Boolean RANGOEDAD_IDIsKey(){
				    return true;
				}
				public Integer RANGOEDAD_IDLength(){
				    return 0;
				}
				public Integer RANGOEDAD_IDPrecision(){
				    return null;
				}
				public String RANGOEDAD_IDDefault(){
				
					return "";
				
				}
				public String RANGOEDAD_IDComment(){
				
				    return "";
				
				}
				public String RANGOEDAD_IDPattern(){
				
					return "";
				
				}
				public String RANGOEDAD_IDOriginalDbColumnName(){
				
					return "RANGOEDAD_ID";
				
				}

				
			    public BigDecimal TPAGOS_ID;

				public BigDecimal getTPAGOS_ID () {
					return this.TPAGOS_ID;
				}

				public Boolean TPAGOS_IDIsNullable(){
				    return false;
				}
				public Boolean TPAGOS_IDIsKey(){
				    return true;
				}
				public Integer TPAGOS_IDLength(){
				    return 0;
				}
				public Integer TPAGOS_IDPrecision(){
				    return null;
				}
				public String TPAGOS_IDDefault(){
				
					return "";
				
				}
				public String TPAGOS_IDComment(){
				
				    return "";
				
				}
				public String TPAGOS_IDPattern(){
				
					return "";
				
				}
				public String TPAGOS_IDOriginalDbColumnName(){
				
					return "TPAGOS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.IPS_ID == null) ? 0 : this.IPS_ID.hashCode());
					
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.SEXOS_ID == null) ? 0 : this.SEXOS_ID.hashCode());
					
						result = prime * result + ((this.RANGOEDAD_ID == null) ? 0 : this.RANGOEDAD_ID.hashCode());
					
						result = prime * result + ((this.TPAGOS_ID == null) ? 0 : this.TPAGOS_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Elimina4Struct other = (Elimina4Struct) obj;
		
						if (this.IPS_ID == null) {
							if (other.IPS_ID != null)
								return false;
						
						} else if (!this.IPS_ID.equals(other.IPS_ID))
						
							return false;
					
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.SEXOS_ID == null) {
							if (other.SEXOS_ID != null)
								return false;
						
						} else if (!this.SEXOS_ID.equals(other.SEXOS_ID))
						
							return false;
					
						if (this.RANGOEDAD_ID == null) {
							if (other.RANGOEDAD_ID != null)
								return false;
						
						} else if (!this.RANGOEDAD_ID.equals(other.RANGOEDAD_ID))
						
							return false;
					
						if (this.TPAGOS_ID == null) {
							if (other.TPAGOS_ID != null)
								return false;
						
						} else if (!this.TPAGOS_ID.equals(other.TPAGOS_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Elimina4Struct other) {

		other.IPS_ID = this.IPS_ID;
	            other.UORG_ID = this.UORG_ID;
	            other.SEXOS_ID = this.SEXOS_ID;
	            other.RANGOEDAD_ID = this.RANGOEDAD_ID;
	            other.TPAGOS_ID = this.TPAGOS_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            
	}

	public void copyKeysDataTo(Elimina4Struct other) {

		other.IPS_ID = this.IPS_ID;
	            	other.UORG_ID = this.UORG_ID;
	            	other.SEXOS_ID = this.SEXOS_ID;
	            	other.RANGOEDAD_ID = this.RANGOEDAD_ID;
	            	other.TPAGOS_ID = this.TPAGOS_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.SEXOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOEDAD_ID = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.SEXOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOEDAD_ID = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SEXOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RANGOEDAD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SEXOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RANGOEDAD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",SEXOS_ID="+String.valueOf(SEXOS_ID));
		sb.append(",RANGOEDAD_ID="+String.valueOf(RANGOEDAD_ID));
		sb.append(",TPAGOS_ID="+String.valueOf(TPAGOS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Elimina4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.IPS_ID, other.IPS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SEXOS_ID, other.SEXOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.RANGOEDAD_ID, other.RANGOEDAD_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TPAGOS_ID, other.TPAGOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Inserta5Struct implements routines.system.IPersistableRow<Inserta5Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return false;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal SEXOS_ID;

				public BigDecimal getSEXOS_ID () {
					return this.SEXOS_ID;
				}

				public Boolean SEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean SEXOS_IDIsKey(){
				    return false;
				}
				public Integer SEXOS_IDLength(){
				    return 0;
				}
				public Integer SEXOS_IDPrecision(){
				    return null;
				}
				public String SEXOS_IDDefault(){
				
					return "";
				
				}
				public String SEXOS_IDComment(){
				
				    return "";
				
				}
				public String SEXOS_IDPattern(){
				
					return "";
				
				}
				public String SEXOS_IDOriginalDbColumnName(){
				
					return "SEXOS_ID";
				
				}

				
			    public BigDecimal RANGOEDAD_ID;

				public BigDecimal getRANGOEDAD_ID () {
					return this.RANGOEDAD_ID;
				}

				public Boolean RANGOEDAD_IDIsNullable(){
				    return false;
				}
				public Boolean RANGOEDAD_IDIsKey(){
				    return false;
				}
				public Integer RANGOEDAD_IDLength(){
				    return 0;
				}
				public Integer RANGOEDAD_IDPrecision(){
				    return null;
				}
				public String RANGOEDAD_IDDefault(){
				
					return "";
				
				}
				public String RANGOEDAD_IDComment(){
				
				    return "";
				
				}
				public String RANGOEDAD_IDPattern(){
				
					return "";
				
				}
				public String RANGOEDAD_IDOriginalDbColumnName(){
				
					return "RANGOEDAD_ID";
				
				}

				
			    public BigDecimal CANTIDAD_USUARIOS;

				public BigDecimal getCANTIDAD_USUARIOS () {
					return this.CANTIDAD_USUARIOS;
				}

				public Boolean CANTIDAD_USUARIOSIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_USUARIOSIsKey(){
				    return false;
				}
				public Integer CANTIDAD_USUARIOSLength(){
				    return 0;
				}
				public Integer CANTIDAD_USUARIOSPrecision(){
				    return 0;
				}
				public String CANTIDAD_USUARIOSDefault(){
				
					return "";
				
				}
				public String CANTIDAD_USUARIOSComment(){
				
				    return "";
				
				}
				public String CANTIDAD_USUARIOSPattern(){
				
					return "";
				
				}
				public String CANTIDAD_USUARIOSOriginalDbColumnName(){
				
					return "CANTIDAD_USUARIOS";
				
				}

				
			    public BigDecimal VALOR_FACTURADO;

				public BigDecimal getVALOR_FACTURADO () {
					return this.VALOR_FACTURADO;
				}

				public Boolean VALOR_FACTURADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_FACTURADOIsKey(){
				    return false;
				}
				public Integer VALOR_FACTURADOLength(){
				    return 0;
				}
				public Integer VALOR_FACTURADOPrecision(){
				    return 0;
				}
				public String VALOR_FACTURADODefault(){
				
					return "";
				
				}
				public String VALOR_FACTURADOComment(){
				
				    return "";
				
				}
				public String VALOR_FACTURADOPattern(){
				
					return "";
				
				}
				public String VALOR_FACTURADOOriginalDbColumnName(){
				
					return "VALOR_FACTURADO";
				
				}

				
			    public BigDecimal TPAGOS_ID;

				public BigDecimal getTPAGOS_ID () {
					return this.TPAGOS_ID;
				}

				public Boolean TPAGOS_IDIsNullable(){
				    return false;
				}
				public Boolean TPAGOS_IDIsKey(){
				    return false;
				}
				public Integer TPAGOS_IDLength(){
				    return 0;
				}
				public Integer TPAGOS_IDPrecision(){
				    return null;
				}
				public String TPAGOS_IDDefault(){
				
					return "";
				
				}
				public String TPAGOS_IDComment(){
				
				    return "";
				
				}
				public String TPAGOS_IDPattern(){
				
					return "";
				
				}
				public String TPAGOS_IDOriginalDbColumnName(){
				
					return "TPAGOS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.SEXOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOEDAD_ID = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_USUARIOS = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.SEXOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOEDAD_ID = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_USUARIOS = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SEXOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RANGOEDAD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_USUARIOS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_FACTURADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SEXOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RANGOEDAD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_USUARIOS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_FACTURADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",SEXOS_ID="+String.valueOf(SEXOS_ID));
		sb.append(",RANGOEDAD_ID="+String.valueOf(RANGOEDAD_ID));
		sb.append(",CANTIDAD_USUARIOS="+String.valueOf(CANTIDAD_USUARIOS));
		sb.append(",VALOR_FACTURADO="+String.valueOf(VALOR_FACTURADO));
		sb.append(",TPAGOS_ID="+String.valueOf(TPAGOS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public java.util.Date FPERIODO;

				public java.util.Date getFPERIODO () {
					return this.FPERIODO;
				}

				public Boolean FPERIODOIsNullable(){
				    return true;
				}
				public Boolean FPERIODOIsKey(){
				    return false;
				}
				public Integer FPERIODOLength(){
				    return 0;
				}
				public Integer FPERIODOPrecision(){
				    return 0;
				}
				public String FPERIODODefault(){
				
					return null;
				
				}
				public String FPERIODOComment(){
				
				    return "";
				
				}
				public String FPERIODOPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FPERIODOOriginalDbColumnName(){
				
					return "FPERIODO";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return false;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal SEXOS_ID;

				public BigDecimal getSEXOS_ID () {
					return this.SEXOS_ID;
				}

				public Boolean SEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean SEXOS_IDIsKey(){
				    return false;
				}
				public Integer SEXOS_IDLength(){
				    return 0;
				}
				public Integer SEXOS_IDPrecision(){
				    return null;
				}
				public String SEXOS_IDDefault(){
				
					return "";
				
				}
				public String SEXOS_IDComment(){
				
				    return "";
				
				}
				public String SEXOS_IDPattern(){
				
					return "";
				
				}
				public String SEXOS_IDOriginalDbColumnName(){
				
					return "SEXOS_ID";
				
				}

				
			    public BigDecimal RANGOEDAD_ID;

				public BigDecimal getRANGOEDAD_ID () {
					return this.RANGOEDAD_ID;
				}

				public Boolean RANGOEDAD_IDIsNullable(){
				    return false;
				}
				public Boolean RANGOEDAD_IDIsKey(){
				    return false;
				}
				public Integer RANGOEDAD_IDLength(){
				    return 0;
				}
				public Integer RANGOEDAD_IDPrecision(){
				    return null;
				}
				public String RANGOEDAD_IDDefault(){
				
					return "";
				
				}
				public String RANGOEDAD_IDComment(){
				
				    return "";
				
				}
				public String RANGOEDAD_IDPattern(){
				
					return "";
				
				}
				public String RANGOEDAD_IDOriginalDbColumnName(){
				
					return "RANGOEDAD_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public BigDecimal CANTIDAD_USUARIOS;

				public BigDecimal getCANTIDAD_USUARIOS () {
					return this.CANTIDAD_USUARIOS;
				}

				public Boolean CANTIDAD_USUARIOSIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_USUARIOSIsKey(){
				    return false;
				}
				public Integer CANTIDAD_USUARIOSLength(){
				    return 0;
				}
				public Integer CANTIDAD_USUARIOSPrecision(){
				    return 0;
				}
				public String CANTIDAD_USUARIOSDefault(){
				
					return "";
				
				}
				public String CANTIDAD_USUARIOSComment(){
				
				    return "";
				
				}
				public String CANTIDAD_USUARIOSPattern(){
				
					return "";
				
				}
				public String CANTIDAD_USUARIOSOriginalDbColumnName(){
				
					return "CANTIDAD_USUARIOS";
				
				}

				
			    public BigDecimal VALOR_FACTURADO;

				public BigDecimal getVALOR_FACTURADO () {
					return this.VALOR_FACTURADO;
				}

				public Boolean VALOR_FACTURADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_FACTURADOIsKey(){
				    return false;
				}
				public Integer VALOR_FACTURADOLength(){
				    return 0;
				}
				public Integer VALOR_FACTURADOPrecision(){
				    return 0;
				}
				public String VALOR_FACTURADODefault(){
				
					return "";
				
				}
				public String VALOR_FACTURADOComment(){
				
				    return "";
				
				}
				public String VALOR_FACTURADOPattern(){
				
					return "";
				
				}
				public String VALOR_FACTURADOOriginalDbColumnName(){
				
					return "VALOR_FACTURADO";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.SEXOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOEDAD_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_USUARIOS = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.SEXOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOEDAD_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_USUARIOS = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SEXOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RANGOEDAD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_USUARIOS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_FACTURADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SEXOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RANGOEDAD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_USUARIOS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_FACTURADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",FPERIODO="+String.valueOf(FPERIODO));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",SEXOS_ID="+String.valueOf(SEXOS_ID));
		sb.append(",RANGOEDAD_ID="+String.valueOf(RANGOEDAD_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",CANTIDAD_USUARIOS="+String.valueOf(CANTIDAD_USUARIOS));
		sb.append(",VALOR_FACTURADO="+String.valueOf(VALOR_FACTURADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_9Struct implements routines.system.IPersistableRow<after_tOracleInput_9Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public java.util.Date FPERIODO;

				public java.util.Date getFPERIODO () {
					return this.FPERIODO;
				}

				public Boolean FPERIODOIsNullable(){
				    return true;
				}
				public Boolean FPERIODOIsKey(){
				    return false;
				}
				public Integer FPERIODOLength(){
				    return 0;
				}
				public Integer FPERIODOPrecision(){
				    return 0;
				}
				public String FPERIODODefault(){
				
					return null;
				
				}
				public String FPERIODOComment(){
				
				    return "";
				
				}
				public String FPERIODOPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FPERIODOOriginalDbColumnName(){
				
					return "FPERIODO";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return false;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal SEXOS_ID;

				public BigDecimal getSEXOS_ID () {
					return this.SEXOS_ID;
				}

				public Boolean SEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean SEXOS_IDIsKey(){
				    return false;
				}
				public Integer SEXOS_IDLength(){
				    return 0;
				}
				public Integer SEXOS_IDPrecision(){
				    return null;
				}
				public String SEXOS_IDDefault(){
				
					return "";
				
				}
				public String SEXOS_IDComment(){
				
				    return "";
				
				}
				public String SEXOS_IDPattern(){
				
					return "";
				
				}
				public String SEXOS_IDOriginalDbColumnName(){
				
					return "SEXOS_ID";
				
				}

				
			    public BigDecimal RANGOEDAD_ID;

				public BigDecimal getRANGOEDAD_ID () {
					return this.RANGOEDAD_ID;
				}

				public Boolean RANGOEDAD_IDIsNullable(){
				    return false;
				}
				public Boolean RANGOEDAD_IDIsKey(){
				    return false;
				}
				public Integer RANGOEDAD_IDLength(){
				    return 0;
				}
				public Integer RANGOEDAD_IDPrecision(){
				    return null;
				}
				public String RANGOEDAD_IDDefault(){
				
					return "";
				
				}
				public String RANGOEDAD_IDComment(){
				
				    return "";
				
				}
				public String RANGOEDAD_IDPattern(){
				
					return "";
				
				}
				public String RANGOEDAD_IDOriginalDbColumnName(){
				
					return "RANGOEDAD_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public BigDecimal CANTIDAD_USUARIOS;

				public BigDecimal getCANTIDAD_USUARIOS () {
					return this.CANTIDAD_USUARIOS;
				}

				public Boolean CANTIDAD_USUARIOSIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_USUARIOSIsKey(){
				    return false;
				}
				public Integer CANTIDAD_USUARIOSLength(){
				    return 0;
				}
				public Integer CANTIDAD_USUARIOSPrecision(){
				    return 0;
				}
				public String CANTIDAD_USUARIOSDefault(){
				
					return "";
				
				}
				public String CANTIDAD_USUARIOSComment(){
				
				    return "";
				
				}
				public String CANTIDAD_USUARIOSPattern(){
				
					return "";
				
				}
				public String CANTIDAD_USUARIOSOriginalDbColumnName(){
				
					return "CANTIDAD_USUARIOS";
				
				}

				
			    public BigDecimal VALOR_FACTURADO;

				public BigDecimal getVALOR_FACTURADO () {
					return this.VALOR_FACTURADO;
				}

				public Boolean VALOR_FACTURADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_FACTURADOIsKey(){
				    return false;
				}
				public Integer VALOR_FACTURADOLength(){
				    return 0;
				}
				public Integer VALOR_FACTURADOPrecision(){
				    return 0;
				}
				public String VALOR_FACTURADODefault(){
				
					return "";
				
				}
				public String VALOR_FACTURADOComment(){
				
				    return "";
				
				}
				public String VALOR_FACTURADOPattern(){
				
					return "";
				
				}
				public String VALOR_FACTURADOOriginalDbColumnName(){
				
					return "VALOR_FACTURADO";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.SEXOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOEDAD_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_USUARIOS = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.SEXOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOEDAD_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_USUARIOS = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SEXOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RANGOEDAD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_USUARIOS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_FACTURADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SEXOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RANGOEDAD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_USUARIOS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_FACTURADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",FPERIODO="+String.valueOf(FPERIODO));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",SEXOS_ID="+String.valueOf(SEXOS_ID));
		sb.append(",RANGOEDAD_ID="+String.valueOf(RANGOEDAD_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",CANTIDAD_USUARIOS="+String.valueOf(CANTIDAD_USUARIOS));
		sb.append(",VALOR_FACTURADO="+String.valueOf(VALOR_FACTURADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_8Process(globalMap);
		tHashInput_9Process(globalMap);

		row23Struct row23 = new row23Struct();
Elimina4Struct Elimina4 = new Elimina4Struct();
Inserta5Struct Inserta5 = new Inserta5Struct();





	
	/**
	 * [tOracleOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_12", false);
		start_Hash.put("tOracleOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Elimina4");
					}
				
		int tos_count_tOracleOutput_12 = 0;
		






        int deleteKeyCount_tOracleOutput_12 = 6;
        if(deleteKeyCount_tOracleOutput_12 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_12 = 0;
    int nb_line_update_tOracleOutput_12 = 0;
    int nb_line_inserted_tOracleOutput_12 = 0;
    int nb_line_deleted_tOracleOutput_12 = 0;
    int nb_line_rejected_tOracleOutput_12 = 0;

    int tmp_batchUpdateCount_tOracleOutput_12 = 0;

    int deletedCount_tOracleOutput_12=0;
    int updatedCount_tOracleOutput_12=0;
    int insertedCount_tOracleOutput_12=0;
    int rowsToCommitCount_tOracleOutput_12=0;
    int rejectedCount_tOracleOutput_12=0;

    boolean whetherReject_tOracleOutput_12 = false;

    java.sql.Connection conn_tOracleOutput_12 = null;

    //optional table
    String dbschema_tOracleOutput_12 = null;
    String tableName_tOracleOutput_12 = null;
                    String driverClass_tOracleOutput_12 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_12);
                String url_tOracleOutput_12 = null;
                    url_tOracleOutput_12 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_12 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_12 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_12 = decryptedPassword_tOracleOutput_12;
                dbschema_tOracleOutput_12 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_12 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_12.put("user",dbUser_tOracleOutput_12);
                    atnParamsPrope_tOracleOutput_12.put("password",dbPwd_tOracleOutput_12);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_12.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_12 = java.sql.DriverManager.getConnection(url_tOracleOutput_12, atnParamsPrope_tOracleOutput_12);
        resourceMap.put("conn_tOracleOutput_12", conn_tOracleOutput_12);
            conn_tOracleOutput_12.setAutoCommit(false);
            int commitEvery_tOracleOutput_12 = 1000;
            int commitCounter_tOracleOutput_12 = 0;
        int batchSize_tOracleOutput_12 = 1000;
        int batchSizeCounter_tOracleOutput_12=0;
        int count_tOracleOutput_12=0;

        if(dbschema_tOracleOutput_12 == null || dbschema_tOracleOutput_12.trim().length() == 0) {
            tableName_tOracleOutput_12 = ("BACM_GASTOGE");
        } else {
            tableName_tOracleOutput_12 = dbschema_tOracleOutput_12 + "." + ("BACM_GASTOGE");
        }
                String delete_tOracleOutput_12 = "DELETE FROM " + tableName_tOracleOutput_12 + " WHERE IPS_ID = ? AND UORG_ID = ? AND SEXOS_ID = ? AND RANGOEDAD_ID = ? AND TPAGOS_ID = ? AND TIEMPOS_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_12 = conn_tOracleOutput_12.prepareStatement(delete_tOracleOutput_12);
                resourceMap.put("pstmt_tOracleOutput_12", pstmt_tOracleOutput_12);





 



/**
 * [tOracleOutput_12 begin ] stop
 */




	
	/**
	 * [tOracleOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_13", false);
		start_Hash.put("tOracleOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta5");
					}
				
		int tos_count_tOracleOutput_13 = 0;
		






    
    int nb_line_tOracleOutput_13 = 0;
    int nb_line_update_tOracleOutput_13 = 0;
    int nb_line_inserted_tOracleOutput_13 = 0;
    int nb_line_deleted_tOracleOutput_13 = 0;
    int nb_line_rejected_tOracleOutput_13 = 0;

    int tmp_batchUpdateCount_tOracleOutput_13 = 0;

    int deletedCount_tOracleOutput_13=0;
    int updatedCount_tOracleOutput_13=0;
    int insertedCount_tOracleOutput_13=0;
    int rowsToCommitCount_tOracleOutput_13=0;
    int rejectedCount_tOracleOutput_13=0;

    boolean whetherReject_tOracleOutput_13 = false;

    java.sql.Connection conn_tOracleOutput_13 = null;

    //optional table
    String dbschema_tOracleOutput_13 = null;
    String tableName_tOracleOutput_13 = null;
                    String driverClass_tOracleOutput_13 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_13);
                String url_tOracleOutput_13 = null;
                    url_tOracleOutput_13 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_13 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_13 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_13 = decryptedPassword_tOracleOutput_13;
                dbschema_tOracleOutput_13 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_13 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_13.put("user",dbUser_tOracleOutput_13);
                    atnParamsPrope_tOracleOutput_13.put("password",dbPwd_tOracleOutput_13);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_13.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_13 = java.sql.DriverManager.getConnection(url_tOracleOutput_13, atnParamsPrope_tOracleOutput_13);
        resourceMap.put("conn_tOracleOutput_13", conn_tOracleOutput_13);
            conn_tOracleOutput_13.setAutoCommit(false);
            int commitEvery_tOracleOutput_13 = 1000;
            int commitCounter_tOracleOutput_13 = 0;
        int batchSize_tOracleOutput_13 = 1000;
        int batchSizeCounter_tOracleOutput_13=0;
        int count_tOracleOutput_13=0;

        if(dbschema_tOracleOutput_13 == null || dbschema_tOracleOutput_13.trim().length() == 0) {
            tableName_tOracleOutput_13 = ("BACM_GASTOGE");
        } else {
            tableName_tOracleOutput_13 = dbschema_tOracleOutput_13 + "." + ("BACM_GASTOGE");
        }
                String insert_tOracleOutput_13 = "INSERT INTO " + tableName_tOracleOutput_13 + " (IPS_ID,UORG_ID,SEXOS_ID,RANGOEDAD_ID,CANTIDAD_USUARIOS,VALOR_FACTURADO,TPAGOS_ID,TIEMPOS_ID) VALUES (?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_13 = conn_tOracleOutput_13.prepareStatement(insert_tOracleOutput_13);
                        resourceMap.put("pstmt_tOracleOutput_13", pstmt_tOracleOutput_13);





 



/**
 * [tOracleOutput_13 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) 
					globalMap.get( "tHash_Lookup_row24" ))
					;					
					
	

row24Struct row24HashKey = new row24Struct();
row24Struct row24Default = new row24Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
					globalMap.get( "tHash_Lookup_row25" ))
					;					
					
	

row25Struct row25HashKey = new row25Struct();
row25Struct row25Default = new row25Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
Elimina4Struct Elimina4_tmp = new Elimina4Struct();
Inserta5Struct Inserta5_tmp = new Inserta5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tOracleInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_9", false);
		start_Hash.put("tOracleInput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_9";
	
	
		int tos_count_tOracleInput_9 = 0;
		
	


	
		    int nb_line_tOracleInput_9 = 0;
		    java.sql.Connection conn_tOracleInput_9 = null;
				conn_tOracleInput_9 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_9 = false;
				boolean isConnectionWrapped_tOracleInput_9 = !(conn_tOracleInput_9 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_9.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_9 = null;
                if (isConnectionWrapped_tOracleInput_9) {
					unwrappedOraConn_tOracleInput_9 = conn_tOracleInput_9.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_9 != null) {
                        isTimeZoneNull_tOracleInput_9 = (unwrappedOraConn_tOracleInput_9.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_9 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_9).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_9) {
					java.sql.Statement stmtGetTZ_tOracleInput_9 = conn_tOracleInput_9.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_9 = stmtGetTZ_tOracleInput_9.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_9 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_9.next()) {
						sessionTimezone_tOracleInput_9 = rsGetTZ_tOracleInput_9.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_9 && unwrappedOraConn_tOracleInput_9 != null) {
                        unwrappedOraConn_tOracleInput_9.setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_9).setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_9 = conn_tOracleInput_9.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_9.setFetchSize(1000);


		    String dbquery_tOracleInput_9 = "SELECT    COALESCE( RE.CONTRATOS_ID, RE.MEDCONTRATOS_ID, 0 ) AS CONTRATOS_ID\n        , TRUNC ( NVL( DFS.FSERVICIO, DFF"
+".FDISPENSACION) , 'MONTH') AS FPERIODO\n        , RE.PRESTADOR_ID AS IPS_ID\n        , RE.UORG_ID\n        , GP.SEXO_ID "
+"AS SEXOS_ID\n        , REDAD.ID AS RANGOEDAD_ID  \n        , COND.CLASE\n        , COUNT ( DISTINCT GP.ID ) AS CANTIDAD_"
+"USUARIOS  \n        , SUM( NVL(DFS.VTOTAL, DFF.VTOTAL) ) AS VALOR_FACTURADO        \nFROM ACM_ETAPASNORMATIVIDAD EN\nINN"
+"ER JOIN ACM_HAUDITORIAS HA ON EN.ID = HA.ETAPASNORMATIVIDAD_ID \nINNER JOIN ACM_ESTAUDITORIAS ESA ON ESA.ID = HA.ESTAUDI"
+"TORIA_ID\nINNER JOIN ACM_RECEPCION RE ON RE.ID = HA.RECEPCION_ID\nLEFT JOIN ACM_DFACTURASERVICIO DFS ON DFS.RECEPCION_ID"
+" = HA.RECEPCION_ID  \n                                   AND DFS.ESTREGISTRO_ID = 1\nLEFT JOIN ACM_DFACTURAFORMULACION D"
+"FF ON DFF.RECEPCION_ID = HA.RECEPCION_ID \n                                      AND  DFF.ESTREGISTRO_ID = 1 \nINNER JOI"
+"N GEN_PERSONAS GP ON ( GP.ID = DFS.PERSONAS_ID OR GP.ID = DFF.PERSONAS_ID ) \n                           AND  GP.ESTREGI"
+"STRO_ID = 1\ninner join GEN_RANGOEDAD REDAD on REDAD.CODIGO = 'REP03' \n                              and GP.FECHA_NACIM"
+"IENTO > ADD_MONTHS(NVL( DFS.FSERVICIO,  DFF.FDISPENSACION),-(REDAD.VALOR_MAYOR+1)*12)\n                              and"
+" GP.FECHA_NACIMIENTO <= ADD_MONTHS(NVL( DFS.FSERVICIO, DFF.FDISPENSACION),-(REDAD.VALOR_MENOR*12))\nINNER JOIN ( \n   SE"
+"LECT     FPERIODO\n            , IPS_ID\n            , UORG_ID\n            , PERSONAS_ID                      \n       "
+"     , CONTRATOS_ID\n            , CLASE\n    FROM (\n      SELECT    COALESCE( RE.CONTRATOS_ID, RE.MEDCONTRATOS_ID, 0 )"
+" AS CONTRATOS_ID\n              , TRUNC ( NVL( DFS.FSERVICIO, DFF.FDISPENSACION) , 'MONTH') AS FPERIODO\n              ,"
+" RE.PRESTADOR_ID AS IPS_ID\n              , RE.UORG_ID\n              , GP.ID AS PERSONAS_ID\n              , CASE  \n  "
+"                  WHEN RE.CONTRATOS_ID IS NOT NULL\n                    THEN 1\n                    WHEN RE.MEDCONTRATOS"
+"_ID IS NOT NULL \n                    THEN 2\n                    ELSE 3\n                END AS CLASE  \n              "
+", ROW_NUMBER() OVER ( PARTITION BY  TRUNC ( NVL( DFS.FSERVICIO, DFF.FDISPENSACION) ,'MONTH')\n                          "
+"                      , COALESCE( RE.CONTRATOS_ID, RE.MEDCONTRATOS_ID,  0 )\n                                           "
+"     , RE.PRESTADOR_ID\n                                                , GP.ID\n                                       "
+"         , RE.UORG_ID \n                                                , CASE  \n                                      "
+"                WHEN RE.CONTRATOS_ID IS NOT NULL\n                                                      THEN 1\n        "
+"                                              WHEN RE.MEDCONTRATOS_ID IS NOT NULL \n                                    "
+"                  THEN 2\n                                                      ELSE 3\n                                "
+"                  END \n                                    ORDER BY RE.ID ) R\n      FROM ACM_ETAPASNORMATIVIDAD EN\n  "
+"    INNER JOIN ACM_HAUDITORIAS HA ON EN.ID = HA.ETAPASNORMATIVIDAD_ID\n	  INNER JOIN ACM_ESTAUDITORIAS ESA ON ESA.ID = H"
+"A.ESTAUDITORIA_ID	      \n      INNER JOIN ACM_RECEPCION RE ON RE.ID = HA.RECEPCION_ID\n      LEFT JOIN ACM_DFACTURASERV"
+"ICIO DFS ON DFS.RECEPCION_ID = HA.RECEPCION_ID  \n                          AND \n DFS.ESTREGISTRO_ID = 1\n      LEFT JO"
+"IN ACM_DFACTURAFORMULACION DFF ON DFF.RECEPCION_ID = HA.RECEPCION_ID AND \n DFF.ESTREGISTRO_ID = 1 \n      INNER JOIN GE"
+"N_PERSONAS GP ON ( GP.ID = DFS.PERSONAS_ID OR GP.ID = DFF.PERSONAS_ID ) AND \n GP.ESTREGISTRO_ID = 1     \n      WHERE E"
+"N.CODIGO = 1        \n        AND HA.ESTREGISTRO_ID = 1\n        AND RE.ESTREGISTRO_ID = 1        \n		AND ESA.NOMBRE = '"
+"Finalizada'\n        AND ( HA.EJECUCION = 1 )\n        "+context.CONDICION+"\n    ) WHERE R = 1\n) COND ON COND.FPERIODO = TRUNC ( NVL( DFS.FSERVICIO, DFF.FDISPENSACION) , 'MONTH')\n      AND CON"
+"D.CONTRATOS_ID = COALESCE( RE.CONTRATOS_ID, RE.MEDCONTRATOS_ID, 0 )\n      AND COND.IPS_ID = RE.PRESTADOR_ID \n      AND"
+" COND.UORG_ID = RE.UORG_ID\n      AND COND.PERSONAS_ID = GP.ID\n      AND COND.CLASE = DECODE ( RE.CONTRATOS_ID, NULL, D"
+"ECODE (RE.MEDCONTRATOS_ID, NULL, 3, 2),1 )\nWHERE HA.ESTREGISTRO_ID = 1\n  AND RE.ESTREGISTRO_ID = 1\n  AND REDAD.ESTREG"
+"ISTRO_ID = 1\n  AND EN.CODIGO = 1\n AND ( HA.EJECUCION = 1  )\n AND HA.FFETAPA IS NOT NULL \n  AND ESA.NOMBRE = 'Finaliz"
+"ada'\nGROUP BY COALESCE( RE.CONTRATOS_ID, RE.MEDCONTRATOS_ID, 0 ) \n        , TRUNC ( NVL( DFS.FSERVICIO, DFF.FDISPENSAC"
+"ION) , 'MONTH') \n        , RE.PRESTADOR_ID \n        , RE.UORG_ID\n        , GP.SEXO_ID\n        , REDAD.ID \n        ,"
+" COND.CLASE";
		    

		    globalMap.put("tOracleInput_9_QUERY",dbquery_tOracleInput_9);

		    java.sql.ResultSet rs_tOracleInput_9 = null;

		    try {
		    	rs_tOracleInput_9 = stmt_tOracleInput_9.executeQuery(dbquery_tOracleInput_9);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_9 = rs_tOracleInput_9.getMetaData();
		    	int colQtyInRs_tOracleInput_9 = rsmd_tOracleInput_9.getColumnCount();

		    String tmpContent_tOracleInput_9 = null;
		    
		    
		    while (rs_tOracleInput_9.next()) {
		        nb_line_tOracleInput_9++;
		        
							if(colQtyInRs_tOracleInput_9 < 1) {
								row23.CONTRATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(1) != null) {
						row23.CONTRATOS_ID = rs_tOracleInput_9.getBigDecimal(1);
					} else {
				
						row23.CONTRATOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 2) {
								row23.FPERIODO = null;
							} else {
										
			row23.FPERIODO = routines.system.JDBCUtil.getDate(rs_tOracleInput_9, 2);
		                    }
							if(colQtyInRs_tOracleInput_9 < 3) {
								row23.IPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(3) != null) {
						row23.IPS_ID = rs_tOracleInput_9.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 4) {
								row23.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(4) != null) {
						row23.UORG_ID = rs_tOracleInput_9.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 5) {
								row23.SEXOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(5) != null) {
						row23.SEXOS_ID = rs_tOracleInput_9.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 6) {
								row23.RANGOEDAD_ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(6) != null) {
						row23.RANGOEDAD_ID = rs_tOracleInput_9.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 7) {
								row23.CLASE = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(7) != null) {
						row23.CLASE = rs_tOracleInput_9.getBigDecimal(7);
					} else {
				
						row23.CLASE = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 8) {
								row23.CANTIDAD_USUARIOS = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(8) != null) {
						row23.CANTIDAD_USUARIOS = rs_tOracleInput_9.getBigDecimal(8);
					} else {
				
						row23.CANTIDAD_USUARIOS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 9) {
								row23.VALOR_FACTURADO = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(9) != null) {
						row23.VALOR_FACTURADO = rs_tOracleInput_9.getBigDecimal(9);
					} else {
				
						row23.VALOR_FACTURADO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_9 begin ] stop
 */
	
	/**
	 * [tOracleInput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 


	tos_count_tOracleInput_9++;

/**
 * [tOracleInput_9 main ] stop
 */
	
	/**
	 * [tOracleInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
						row24Struct row24 = null;
					
						row25Struct row25 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row24" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow24 = false;
       		  	    	
       		  	    	
 							row24Struct row24ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row24HashKey.CONTRATOS_ID = row23.CONTRATOS_ID ;
                        		    		
                        		    		    row24HashKey.CLASE = row23.CLASE ;
                        		    		

								
		                        	row24HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row24.lookup( row24HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row24.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_6 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row24 != null && tHash_Lookup_row24.getCount(row24HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row24' and it contains more one result from keys :  row24.CONTRATOS_ID = '" + row24HashKey.CONTRATOS_ID + "', row24.CLASE = '" + row24HashKey.CLASE + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row24Struct fromLookup_row24 = null;
							row24 = row24Default;
										 
							
								 
							
							
								if (tHash_Lookup_row24 !=null && tHash_Lookup_row24.hasNext()) { // G 099
								
							
								
								fromLookup_row24 = tHash_Lookup_row24.next();

							
							
								} // G 099
							
							

							if(fromLookup_row24 != null) {
								row24 = fromLookup_row24;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row25" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow25 = false;
       		  	    	
       		  	    	
 							row25Struct row25ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row25HashKey.FECHA = row23.FPERIODO  == null ? null : new java.util.Date((row23.FPERIODO ).getTime());
                        		    		

								
		                        	row25HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row25.lookup( row25HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row25.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_6 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row25 != null && tHash_Lookup_row25.getCount(row25HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row25' and it contains more one result from keys :  row25.FECHA = '" + row25HashKey.FECHA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row25Struct fromLookup_row25 = null;
							row25 = row25Default;
										 
							
								 
							
							
								if (tHash_Lookup_row25 !=null && tHash_Lookup_row25.hasNext()) { // G 099
								
							
								
								fromLookup_row25 = tHash_Lookup_row25.next();

							
							
								} // G 099
							
							

							if(fromLookup_row25 != null) {
								row25 = fromLookup_row25;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

Elimina4 = null;
Inserta5 = null;

if(!rejectedInnerJoin_tMap_6 ) {

// # Output table : 'Elimina4'
Elimina4_tmp.IPS_ID = row23.IPS_ID ;
Elimina4_tmp.UORG_ID = row23.UORG_ID ;
Elimina4_tmp.SEXOS_ID = row23.SEXOS_ID ;
Elimina4_tmp.RANGOEDAD_ID = row23.RANGOEDAD_ID ;
Elimina4_tmp.TPAGOS_ID = row24.ID ;
Elimina4_tmp.TIEMPOS_ID = row25.ID ;
Elimina4 = Elimina4_tmp;

// # Output table : 'Inserta5'
Inserta5_tmp.IPS_ID = row23.IPS_ID ;
Inserta5_tmp.UORG_ID = row23.UORG_ID ;
Inserta5_tmp.SEXOS_ID = row23.SEXOS_ID ;
Inserta5_tmp.RANGOEDAD_ID = row23.RANGOEDAD_ID ;
Inserta5_tmp.CANTIDAD_USUARIOS = row23.CANTIDAD_USUARIOS ;
Inserta5_tmp.VALOR_FACTURADO = row23.VALOR_FACTURADO ;
Inserta5_tmp.TPAGOS_ID = row24.ID ;
Inserta5_tmp.TIEMPOS_ID = row25.ID ;
Inserta5 = Inserta5_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "Elimina4"
if(Elimina4 != null) { 



	
	/**
	 * [tOracleOutput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Elimina4"
						
						);
					}
					



        whetherReject_tOracleOutput_12 = false;
                    pstmt_tOracleOutput_12.setBigDecimal(1, Elimina4.IPS_ID);

                    pstmt_tOracleOutput_12.setBigDecimal(2, Elimina4.UORG_ID);

                    pstmt_tOracleOutput_12.setBigDecimal(3, Elimina4.SEXOS_ID);

                    pstmt_tOracleOutput_12.setBigDecimal(4, Elimina4.RANGOEDAD_ID);

                    pstmt_tOracleOutput_12.setBigDecimal(5, Elimina4.TPAGOS_ID);

                    pstmt_tOracleOutput_12.setBigDecimal(6, Elimina4.TIEMPOS_ID);

                pstmt_tOracleOutput_12.addBatch();
                nb_line_tOracleOutput_12++;
                batchSizeCounter_tOracleOutput_12++;
            if (batchSize_tOracleOutput_12 > 0 &&  batchSize_tOracleOutput_12 <= batchSizeCounter_tOracleOutput_12) {
                try {
                    pstmt_tOracleOutput_12.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_12){
globalMap.put("tOracleOutput_12_ERROR_MESSAGE",e_tOracleOutput_12.getMessage());
			        java.sql.SQLException ne_tOracleOutput_12 = e_tOracleOutput_12.getNextException(),sqle_tOracleOutput_12=null;
			    	String errormessage_tOracleOutput_12;
					if (ne_tOracleOutput_12 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_12 = new java.sql.SQLException(e_tOracleOutput_12.getMessage() + "\ncaused by: " + ne_tOracleOutput_12.getMessage(), ne_tOracleOutput_12.getSQLState(), ne_tOracleOutput_12.getErrorCode(), ne_tOracleOutput_12);
						errormessage_tOracleOutput_12 = sqle_tOracleOutput_12.getMessage();
					}else{
						errormessage_tOracleOutput_12 = e_tOracleOutput_12.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_12);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_12 = pstmt_tOracleOutput_12.getUpdateCount();
                    deletedCount_tOracleOutput_12
                += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                rowsToCommitCount_tOracleOutput_12 += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                batchSizeCounter_tOracleOutput_12 = 0;
            }
                commitCounter_tOracleOutput_12++;
                if(commitEvery_tOracleOutput_12 <= commitCounter_tOracleOutput_12) {
                    if(batchSizeCounter_tOracleOutput_12 > 0) {
                        try {
                            pstmt_tOracleOutput_12.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_12){
globalMap.put("tOracleOutput_12_ERROR_MESSAGE",e_tOracleOutput_12.getMessage());
					        java.sql.SQLException ne_tOracleOutput_12 = e_tOracleOutput_12.getNextException(),sqle_tOracleOutput_12=null;
					    	String errormessage_tOracleOutput_12;
							if (ne_tOracleOutput_12 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_12 = new java.sql.SQLException(e_tOracleOutput_12.getMessage() + "\ncaused by: " + ne_tOracleOutput_12.getMessage(), ne_tOracleOutput_12.getSQLState(), ne_tOracleOutput_12.getErrorCode(), ne_tOracleOutput_12);
								errormessage_tOracleOutput_12 = sqle_tOracleOutput_12.getMessage();
							}else{
								errormessage_tOracleOutput_12 = e_tOracleOutput_12.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_12);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_12 = pstmt_tOracleOutput_12.getUpdateCount();
                            deletedCount_tOracleOutput_12
                        += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                        rowsToCommitCount_tOracleOutput_12 += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_12 != 0){
                    	
                    }
                    conn_tOracleOutput_12.commit();
                    if(rowsToCommitCount_tOracleOutput_12 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_12 = 0;
                    }
                    commitCounter_tOracleOutput_12=0;
                    	batchSizeCounter_tOracleOutput_12=0;
                }

 


	tos_count_tOracleOutput_12++;

/**
 * [tOracleOutput_12 main ] stop
 */
	
	/**
	 * [tOracleOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	

 



/**
 * [tOracleOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	

 



/**
 * [tOracleOutput_12 process_data_end ] stop
 */

} // End of branch "Elimina4"




// Start of branch "Inserta5"
if(Inserta5 != null) { 



	
	/**
	 * [tOracleOutput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta5"
						
						);
					}
					



        whetherReject_tOracleOutput_13 = false;
                        pstmt_tOracleOutput_13.setBigDecimal(1, Inserta5.IPS_ID);

                        pstmt_tOracleOutput_13.setBigDecimal(2, Inserta5.UORG_ID);

                        pstmt_tOracleOutput_13.setBigDecimal(3, Inserta5.SEXOS_ID);

                        pstmt_tOracleOutput_13.setBigDecimal(4, Inserta5.RANGOEDAD_ID);

                        pstmt_tOracleOutput_13.setBigDecimal(5, Inserta5.CANTIDAD_USUARIOS);

                        pstmt_tOracleOutput_13.setBigDecimal(6, Inserta5.VALOR_FACTURADO);

                        pstmt_tOracleOutput_13.setBigDecimal(7, Inserta5.TPAGOS_ID);

                        pstmt_tOracleOutput_13.setBigDecimal(8, Inserta5.TIEMPOS_ID);

                pstmt_tOracleOutput_13.addBatch();
                nb_line_tOracleOutput_13++;
                batchSizeCounter_tOracleOutput_13++;
            if (batchSize_tOracleOutput_13 > 0 &&  batchSize_tOracleOutput_13 <= batchSizeCounter_tOracleOutput_13) {
                try {
                    pstmt_tOracleOutput_13.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_13){
globalMap.put("tOracleOutput_13_ERROR_MESSAGE",e_tOracleOutput_13.getMessage());
			        java.sql.SQLException ne_tOracleOutput_13 = e_tOracleOutput_13.getNextException(),sqle_tOracleOutput_13=null;
			    	String errormessage_tOracleOutput_13;
					if (ne_tOracleOutput_13 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_13 = new java.sql.SQLException(e_tOracleOutput_13.getMessage() + "\ncaused by: " + ne_tOracleOutput_13.getMessage(), ne_tOracleOutput_13.getSQLState(), ne_tOracleOutput_13.getErrorCode(), ne_tOracleOutput_13);
						errormessage_tOracleOutput_13 = sqle_tOracleOutput_13.getMessage();
					}else{
						errormessage_tOracleOutput_13 = e_tOracleOutput_13.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_13);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_13 = pstmt_tOracleOutput_13.getUpdateCount();
                    insertedCount_tOracleOutput_13
                += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                rowsToCommitCount_tOracleOutput_13 += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                batchSizeCounter_tOracleOutput_13 = 0;
            }
                commitCounter_tOracleOutput_13++;
                if(commitEvery_tOracleOutput_13 <= commitCounter_tOracleOutput_13) {
                    if(batchSizeCounter_tOracleOutput_13 > 0) {
                        try {
                            pstmt_tOracleOutput_13.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_13){
globalMap.put("tOracleOutput_13_ERROR_MESSAGE",e_tOracleOutput_13.getMessage());
					        java.sql.SQLException ne_tOracleOutput_13 = e_tOracleOutput_13.getNextException(),sqle_tOracleOutput_13=null;
					    	String errormessage_tOracleOutput_13;
							if (ne_tOracleOutput_13 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_13 = new java.sql.SQLException(e_tOracleOutput_13.getMessage() + "\ncaused by: " + ne_tOracleOutput_13.getMessage(), ne_tOracleOutput_13.getSQLState(), ne_tOracleOutput_13.getErrorCode(), ne_tOracleOutput_13);
								errormessage_tOracleOutput_13 = sqle_tOracleOutput_13.getMessage();
							}else{
								errormessage_tOracleOutput_13 = e_tOracleOutput_13.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_13);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_13 = pstmt_tOracleOutput_13.getUpdateCount();
                            insertedCount_tOracleOutput_13
                        += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                        rowsToCommitCount_tOracleOutput_13 += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_13 != 0){
                    	
                    }
                    conn_tOracleOutput_13.commit();
                    if(rowsToCommitCount_tOracleOutput_13 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_13 = 0;
                    }
                    commitCounter_tOracleOutput_13=0;
                    	batchSizeCounter_tOracleOutput_13=0;
                }

 


	tos_count_tOracleOutput_13++;

/**
 * [tOracleOutput_13 main ] stop
 */
	
	/**
	 * [tOracleOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	

 



/**
 * [tOracleOutput_13 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	

 



/**
 * [tOracleOutput_13 process_data_end ] stop
 */

} // End of branch "Inserta5"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

}
}finally{
	if (rs_tOracleInput_9 != null) {
		rs_tOracleInput_9.close();
	}
	if (stmt_tOracleInput_9 != null) {
		stmt_tOracleInput_9.close();
	}
}

globalMap.put("tOracleInput_9_NB_LINE",nb_line_tOracleInput_9);
 

ok_Hash.put("tOracleInput_9", true);
end_Hash.put("tOracleInput_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tJava_7Process(globalMap);



/**
 * [tOracleInput_9 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row24 != null) {
						tHash_Lookup_row24.endGet();
					}
					globalMap.remove( "tHash_Lookup_row24" );

					
					
				
					if(tHash_Lookup_row25 != null) {
						tHash_Lookup_row25.endGet();
					}
					globalMap.remove( "tHash_Lookup_row25" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tOracleOutput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_12 > 0) {
            try {
            	if (pstmt_tOracleOutput_12 != null) {
					
					pstmt_tOracleOutput_12.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_12){
globalMap.put("tOracleOutput_12_ERROR_MESSAGE",e_tOracleOutput_12.getMessage());
		        java.sql.SQLException ne_tOracleOutput_12 = e_tOracleOutput_12.getNextException(),sqle_tOracleOutput_12=null;
		    	String errormessage_tOracleOutput_12;
				if (ne_tOracleOutput_12 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_12 = new java.sql.SQLException(e_tOracleOutput_12.getMessage() + "\ncaused by: " + ne_tOracleOutput_12.getMessage(), ne_tOracleOutput_12.getSQLState(), ne_tOracleOutput_12.getErrorCode(), ne_tOracleOutput_12);
					errormessage_tOracleOutput_12 = sqle_tOracleOutput_12.getMessage();
				}else{
					errormessage_tOracleOutput_12 = e_tOracleOutput_12.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_12);
            	
        	}
        	if (pstmt_tOracleOutput_12 != null) {
            	tmp_batchUpdateCount_tOracleOutput_12 = pstmt_tOracleOutput_12.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_12
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
				rowsToCommitCount_tOracleOutput_12 += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
            }
        }
        if(pstmt_tOracleOutput_12 != null) {
			
				pstmt_tOracleOutput_12.close();
				resourceMap.remove("pstmt_tOracleOutput_12");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_12", true);
		if(commitCounter_tOracleOutput_12 > 0 && rowsToCommitCount_tOracleOutput_12 != 0) {
			
		}
		conn_tOracleOutput_12.commit();
		if(commitCounter_tOracleOutput_12 > 0 && rowsToCommitCount_tOracleOutput_12 != 0) {
			
			rowsToCommitCount_tOracleOutput_12 = 0;
		}
		commitCounter_tOracleOutput_12 = 0;
		
		
		conn_tOracleOutput_12 .close();
		
		resourceMap.put("finish_tOracleOutput_12", true);
   	

	
	nb_line_deleted_tOracleOutput_12=nb_line_deleted_tOracleOutput_12+ deletedCount_tOracleOutput_12;
	nb_line_update_tOracleOutput_12=nb_line_update_tOracleOutput_12 + updatedCount_tOracleOutput_12;
	nb_line_inserted_tOracleOutput_12=nb_line_inserted_tOracleOutput_12 + insertedCount_tOracleOutput_12;
	nb_line_rejected_tOracleOutput_12=nb_line_rejected_tOracleOutput_12 + rejectedCount_tOracleOutput_12;
	
        globalMap.put("tOracleOutput_12_NB_LINE",nb_line_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_UPDATED",nb_line_update_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_12);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Elimina4");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_12", true);
end_Hash.put("tOracleOutput_12", System.currentTimeMillis());




/**
 * [tOracleOutput_12 end ] stop
 */




	
	/**
	 * [tOracleOutput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_13 > 0) {
            try {
            	if (pstmt_tOracleOutput_13 != null) {
					
					pstmt_tOracleOutput_13.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_13){
globalMap.put("tOracleOutput_13_ERROR_MESSAGE",e_tOracleOutput_13.getMessage());
		        java.sql.SQLException ne_tOracleOutput_13 = e_tOracleOutput_13.getNextException(),sqle_tOracleOutput_13=null;
		    	String errormessage_tOracleOutput_13;
				if (ne_tOracleOutput_13 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_13 = new java.sql.SQLException(e_tOracleOutput_13.getMessage() + "\ncaused by: " + ne_tOracleOutput_13.getMessage(), ne_tOracleOutput_13.getSQLState(), ne_tOracleOutput_13.getErrorCode(), ne_tOracleOutput_13);
					errormessage_tOracleOutput_13 = sqle_tOracleOutput_13.getMessage();
				}else{
					errormessage_tOracleOutput_13 = e_tOracleOutput_13.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_13);
            	
        	}
        	if (pstmt_tOracleOutput_13 != null) {
            	tmp_batchUpdateCount_tOracleOutput_13 = pstmt_tOracleOutput_13.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_13
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
				rowsToCommitCount_tOracleOutput_13 += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
            }
        }
        if(pstmt_tOracleOutput_13 != null) {
			
				pstmt_tOracleOutput_13.close();
				resourceMap.remove("pstmt_tOracleOutput_13");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_13", true);
		if(commitCounter_tOracleOutput_13 > 0 && rowsToCommitCount_tOracleOutput_13 != 0) {
			
		}
		conn_tOracleOutput_13.commit();
		if(commitCounter_tOracleOutput_13 > 0 && rowsToCommitCount_tOracleOutput_13 != 0) {
			
			rowsToCommitCount_tOracleOutput_13 = 0;
		}
		commitCounter_tOracleOutput_13 = 0;
		
		
		conn_tOracleOutput_13 .close();
		
		resourceMap.put("finish_tOracleOutput_13", true);
   	

	
	nb_line_deleted_tOracleOutput_13=nb_line_deleted_tOracleOutput_13+ deletedCount_tOracleOutput_13;
	nb_line_update_tOracleOutput_13=nb_line_update_tOracleOutput_13 + updatedCount_tOracleOutput_13;
	nb_line_inserted_tOracleOutput_13=nb_line_inserted_tOracleOutput_13 + insertedCount_tOracleOutput_13;
	nb_line_rejected_tOracleOutput_13=nb_line_rejected_tOracleOutput_13 + rejectedCount_tOracleOutput_13;
	
        globalMap.put("tOracleOutput_13_NB_LINE",nb_line_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_UPDATED",nb_line_update_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_13);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta5");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_13", true);
end_Hash.put("tOracleOutput_13", System.currentTimeMillis());




/**
 * [tOracleOutput_13 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tOracleInput_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row24"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row25"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tOracleOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_12") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_12 = null;
                if ((pstmtToClose_tOracleOutput_12 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_12")) != null) {
                    pstmtToClose_tOracleOutput_12.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_12") == null){
            java.sql.Connection ctn_tOracleOutput_12 = null;
            if((ctn_tOracleOutput_12 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_12")) != null){
                try {
                    ctn_tOracleOutput_12.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_12) {
                    String errorMessage_tOracleOutput_12 = "failed to close the connection in tOracleOutput_12 :" + sqlEx_tOracleOutput_12.getMessage();
                    System.err.println(errorMessage_tOracleOutput_12);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_12 finally ] stop
 */




	
	/**
	 * [tOracleOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_13") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_13 = null;
                if ((pstmtToClose_tOracleOutput_13 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_13")) != null) {
                    pstmtToClose_tOracleOutput_13.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_13") == null){
            java.sql.Connection ctn_tOracleOutput_13 = null;
            if((ctn_tOracleOutput_13 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_13")) != null){
                try {
                    ctn_tOracleOutput_13.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_13) {
                    String errorMessage_tOracleOutput_13 = "failed to close the connection in tOracleOutput_13 :" + sqlEx_tOracleOutput_13.getMessage();
                    System.err.println(errorMessage_tOracleOutput_13);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_13 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class Elimina5Struct implements routines.system.IPersistableRow<Elimina5Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return true;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal TIPO_PAGO;

				public BigDecimal getTIPO_PAGO () {
					return this.TIPO_PAGO;
				}

				public Boolean TIPO_PAGOIsNullable(){
				    return true;
				}
				public Boolean TIPO_PAGOIsKey(){
				    return true;
				}
				public Integer TIPO_PAGOLength(){
				    return 0;
				}
				public Integer TIPO_PAGOPrecision(){
				    return null;
				}
				public String TIPO_PAGODefault(){
				
					return "";
				
				}
				public String TIPO_PAGOComment(){
				
				    return "";
				
				}
				public String TIPO_PAGOPattern(){
				
					return "";
				
				}
				public String TIPO_PAGOOriginalDbColumnName(){
				
					return "TIPO_PAGO";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return true;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal DIAGNOSTICO_ID;

				public BigDecimal getDIAGNOSTICO_ID () {
					return this.DIAGNOSTICO_ID;
				}

				public Boolean DIAGNOSTICO_IDIsNullable(){
				    return false;
				}
				public Boolean DIAGNOSTICO_IDIsKey(){
				    return true;
				}
				public Integer DIAGNOSTICO_IDLength(){
				    return 0;
				}
				public Integer DIAGNOSTICO_IDPrecision(){
				    return null;
				}
				public String DIAGNOSTICO_IDDefault(){
				
					return "";
				
				}
				public String DIAGNOSTICO_IDComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICO_IDPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICO_IDOriginalDbColumnName(){
				
					return "DIAGNOSTICO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.PRESTADOR_ID == null) ? 0 : this.PRESTADOR_ID.hashCode());
					
						result = prime * result + ((this.TIPO_PAGO == null) ? 0 : this.TIPO_PAGO.hashCode());
					
						result = prime * result + ((this.PERSONAS_ID == null) ? 0 : this.PERSONAS_ID.hashCode());
					
						result = prime * result + ((this.DIAGNOSTICO_ID == null) ? 0 : this.DIAGNOSTICO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Elimina5Struct other = (Elimina5Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.PRESTADOR_ID == null) {
							if (other.PRESTADOR_ID != null)
								return false;
						
						} else if (!this.PRESTADOR_ID.equals(other.PRESTADOR_ID))
						
							return false;
					
						if (this.TIPO_PAGO == null) {
							if (other.TIPO_PAGO != null)
								return false;
						
						} else if (!this.TIPO_PAGO.equals(other.TIPO_PAGO))
						
							return false;
					
						if (this.PERSONAS_ID == null) {
							if (other.PERSONAS_ID != null)
								return false;
						
						} else if (!this.PERSONAS_ID.equals(other.PERSONAS_ID))
						
							return false;
					
						if (this.DIAGNOSTICO_ID == null) {
							if (other.DIAGNOSTICO_ID != null)
								return false;
						
						} else if (!this.DIAGNOSTICO_ID.equals(other.DIAGNOSTICO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Elimina5Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.PRESTADOR_ID = this.PRESTADOR_ID;
	            other.TIPO_PAGO = this.TIPO_PAGO;
	            other.PERSONAS_ID = this.PERSONAS_ID;
	            other.DIAGNOSTICO_ID = this.DIAGNOSTICO_ID;
	            
	}

	public void copyKeysDataTo(Elimina5Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.PRESTADOR_ID = this.PRESTADOR_ID;
	            	other.TIPO_PAGO = this.TIPO_PAGO;
	            	other.PERSONAS_ID = this.PERSONAS_ID;
	            	other.DIAGNOSTICO_ID = this.DIAGNOSTICO_ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO_PAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAGNOSTICO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO_PAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAGNOSTICO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",TIPO_PAGO="+String.valueOf(TIPO_PAGO));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",DIAGNOSTICO_ID="+String.valueOf(DIAGNOSTICO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Elimina5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PRESTADOR_ID, other.PRESTADOR_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIPO_PAGO, other.TIPO_PAGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PERSONAS_ID, other.PERSONAS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DIAGNOSTICO_ID, other.DIAGNOSTICO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Inserta6Struct implements routines.system.IPersistableRow<Inserta6Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal TIPO_PAGO;

				public BigDecimal getTIPO_PAGO () {
					return this.TIPO_PAGO;
				}

				public Boolean TIPO_PAGOIsNullable(){
				    return true;
				}
				public Boolean TIPO_PAGOIsKey(){
				    return false;
				}
				public Integer TIPO_PAGOLength(){
				    return 0;
				}
				public Integer TIPO_PAGOPrecision(){
				    return null;
				}
				public String TIPO_PAGODefault(){
				
					return "";
				
				}
				public String TIPO_PAGOComment(){
				
				    return "";
				
				}
				public String TIPO_PAGOPattern(){
				
					return "";
				
				}
				public String TIPO_PAGOOriginalDbColumnName(){
				
					return "TIPO_PAGO";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal DIAGNOSTICO_ID;

				public BigDecimal getDIAGNOSTICO_ID () {
					return this.DIAGNOSTICO_ID;
				}

				public Boolean DIAGNOSTICO_IDIsNullable(){
				    return false;
				}
				public Boolean DIAGNOSTICO_IDIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICO_IDLength(){
				    return 0;
				}
				public Integer DIAGNOSTICO_IDPrecision(){
				    return null;
				}
				public String DIAGNOSTICO_IDDefault(){
				
					return "";
				
				}
				public String DIAGNOSTICO_IDComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICO_IDPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICO_IDOriginalDbColumnName(){
				
					return "DIAGNOSTICO_ID";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return true;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return 0;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return 0;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return 0;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal VALOR_FACTURADO;

				public BigDecimal getVALOR_FACTURADO () {
					return this.VALOR_FACTURADO;
				}

				public Boolean VALOR_FACTURADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_FACTURADOIsKey(){
				    return false;
				}
				public Integer VALOR_FACTURADOLength(){
				    return 0;
				}
				public Integer VALOR_FACTURADOPrecision(){
				    return 0;
				}
				public String VALOR_FACTURADODefault(){
				
					return "";
				
				}
				public String VALOR_FACTURADOComment(){
				
				    return "";
				
				}
				public String VALOR_FACTURADOPattern(){
				
					return "";
				
				}
				public String VALOR_FACTURADOOriginalDbColumnName(){
				
					return "VALOR_FACTURADO";
				
				}

				
			    public BigDecimal CANTIDAD_ATENCIONES;

				public BigDecimal getCANTIDAD_ATENCIONES () {
					return this.CANTIDAD_ATENCIONES;
				}

				public Boolean CANTIDAD_ATENCIONESIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_ATENCIONESIsKey(){
				    return false;
				}
				public Integer CANTIDAD_ATENCIONESLength(){
				    return 0;
				}
				public Integer CANTIDAD_ATENCIONESPrecision(){
				    return 0;
				}
				public String CANTIDAD_ATENCIONESDefault(){
				
					return "";
				
				}
				public String CANTIDAD_ATENCIONESComment(){
				
				    return "";
				
				}
				public String CANTIDAD_ATENCIONESPattern(){
				
					return "";
				
				}
				public String CANTIDAD_ATENCIONESOriginalDbColumnName(){
				
					return "CANTIDAD_ATENCIONES";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICO_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_ATENCIONES = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICO_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_ATENCIONES = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO_PAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAGNOSTICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_FACTURADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_ATENCIONES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO_PAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAGNOSTICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_FACTURADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_ATENCIONES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",TIPO_PAGO="+String.valueOf(TIPO_PAGO));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",DIAGNOSTICO_ID="+String.valueOf(DIAGNOSTICO_ID));
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",VALOR_FACTURADO="+String.valueOf(VALOR_FACTURADO));
		sb.append(",CANTIDAD_ATENCIONES="+String.valueOf(CANTIDAD_ATENCIONES));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public java.util.Date FPERIODO;

				public java.util.Date getFPERIODO () {
					return this.FPERIODO;
				}

				public Boolean FPERIODOIsNullable(){
				    return true;
				}
				public Boolean FPERIODOIsKey(){
				    return false;
				}
				public Integer FPERIODOLength(){
				    return 0;
				}
				public Integer FPERIODOPrecision(){
				    return 0;
				}
				public String FPERIODODefault(){
				
					return null;
				
				}
				public String FPERIODOComment(){
				
				    return "";
				
				}
				public String FPERIODOPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FPERIODOOriginalDbColumnName(){
				
					return "FPERIODO";
				
				}

				
			    public BigDecimal TIPO_PAGO;

				public BigDecimal getTIPO_PAGO () {
					return this.TIPO_PAGO;
				}

				public Boolean TIPO_PAGOIsNullable(){
				    return true;
				}
				public Boolean TIPO_PAGOIsKey(){
				    return false;
				}
				public Integer TIPO_PAGOLength(){
				    return 0;
				}
				public Integer TIPO_PAGOPrecision(){
				    return null;
				}
				public String TIPO_PAGODefault(){
				
					return "";
				
				}
				public String TIPO_PAGOComment(){
				
				    return "";
				
				}
				public String TIPO_PAGOPattern(){
				
					return "";
				
				}
				public String TIPO_PAGOOriginalDbColumnName(){
				
					return "TIPO_PAGO";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal DIAGNOSTICOS_ID;

				public BigDecimal getDIAGNOSTICOS_ID () {
					return this.DIAGNOSTICOS_ID;
				}

				public Boolean DIAGNOSTICOS_IDIsNullable(){
				    return false;
				}
				public Boolean DIAGNOSTICOS_IDIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICOS_IDLength(){
				    return 0;
				}
				public Integer DIAGNOSTICOS_IDPrecision(){
				    return null;
				}
				public String DIAGNOSTICOS_IDDefault(){
				
					return "";
				
				}
				public String DIAGNOSTICOS_IDComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICOS_IDPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICOS_IDOriginalDbColumnName(){
				
					return "DIAGNOSTICOS_ID";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return true;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return 0;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return 0;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return 0;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal VALOR_FACTURADO;

				public BigDecimal getVALOR_FACTURADO () {
					return this.VALOR_FACTURADO;
				}

				public Boolean VALOR_FACTURADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_FACTURADOIsKey(){
				    return false;
				}
				public Integer VALOR_FACTURADOLength(){
				    return 0;
				}
				public Integer VALOR_FACTURADOPrecision(){
				    return 0;
				}
				public String VALOR_FACTURADODefault(){
				
					return "";
				
				}
				public String VALOR_FACTURADOComment(){
				
				    return "";
				
				}
				public String VALOR_FACTURADOPattern(){
				
					return "";
				
				}
				public String VALOR_FACTURADOOriginalDbColumnName(){
				
					return "VALOR_FACTURADO";
				
				}

				
			    public BigDecimal CANTIDAD_ATENCIONES;

				public BigDecimal getCANTIDAD_ATENCIONES () {
					return this.CANTIDAD_ATENCIONES;
				}

				public Boolean CANTIDAD_ATENCIONESIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_ATENCIONESIsKey(){
				    return false;
				}
				public Integer CANTIDAD_ATENCIONESLength(){
				    return 0;
				}
				public Integer CANTIDAD_ATENCIONESPrecision(){
				    return 0;
				}
				public String CANTIDAD_ATENCIONESDefault(){
				
					return "";
				
				}
				public String CANTIDAD_ATENCIONESComment(){
				
				    return "";
				
				}
				public String CANTIDAD_ATENCIONESPattern(){
				
					return "";
				
				}
				public String CANTIDAD_ATENCIONESOriginalDbColumnName(){
				
					return "CANTIDAD_ATENCIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICOS_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_ATENCIONES = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICOS_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_ATENCIONES = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO_PAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAGNOSTICOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_FACTURADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_ATENCIONES);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO_PAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAGNOSTICOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_FACTURADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_ATENCIONES);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",FPERIODO="+String.valueOf(FPERIODO));
		sb.append(",TIPO_PAGO="+String.valueOf(TIPO_PAGO));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",DIAGNOSTICOS_ID="+String.valueOf(DIAGNOSTICOS_ID));
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",VALOR_FACTURADO="+String.valueOf(VALOR_FACTURADO));
		sb.append(",CANTIDAD_ATENCIONES="+String.valueOf(CANTIDAD_ATENCIONES));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_10Struct implements routines.system.IPersistableRow<after_tOracleInput_10Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public java.util.Date FPERIODO;

				public java.util.Date getFPERIODO () {
					return this.FPERIODO;
				}

				public Boolean FPERIODOIsNullable(){
				    return true;
				}
				public Boolean FPERIODOIsKey(){
				    return false;
				}
				public Integer FPERIODOLength(){
				    return 0;
				}
				public Integer FPERIODOPrecision(){
				    return 0;
				}
				public String FPERIODODefault(){
				
					return null;
				
				}
				public String FPERIODOComment(){
				
				    return "";
				
				}
				public String FPERIODOPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FPERIODOOriginalDbColumnName(){
				
					return "FPERIODO";
				
				}

				
			    public BigDecimal TIPO_PAGO;

				public BigDecimal getTIPO_PAGO () {
					return this.TIPO_PAGO;
				}

				public Boolean TIPO_PAGOIsNullable(){
				    return true;
				}
				public Boolean TIPO_PAGOIsKey(){
				    return false;
				}
				public Integer TIPO_PAGOLength(){
				    return 0;
				}
				public Integer TIPO_PAGOPrecision(){
				    return null;
				}
				public String TIPO_PAGODefault(){
				
					return "";
				
				}
				public String TIPO_PAGOComment(){
				
				    return "";
				
				}
				public String TIPO_PAGOPattern(){
				
					return "";
				
				}
				public String TIPO_PAGOOriginalDbColumnName(){
				
					return "TIPO_PAGO";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal DIAGNOSTICOS_ID;

				public BigDecimal getDIAGNOSTICOS_ID () {
					return this.DIAGNOSTICOS_ID;
				}

				public Boolean DIAGNOSTICOS_IDIsNullable(){
				    return false;
				}
				public Boolean DIAGNOSTICOS_IDIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICOS_IDLength(){
				    return 0;
				}
				public Integer DIAGNOSTICOS_IDPrecision(){
				    return null;
				}
				public String DIAGNOSTICOS_IDDefault(){
				
					return "";
				
				}
				public String DIAGNOSTICOS_IDComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICOS_IDPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICOS_IDOriginalDbColumnName(){
				
					return "DIAGNOSTICOS_ID";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return true;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return 0;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return 0;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return 0;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal VALOR_FACTURADO;

				public BigDecimal getVALOR_FACTURADO () {
					return this.VALOR_FACTURADO;
				}

				public Boolean VALOR_FACTURADOIsNullable(){
				    return true;
				}
				public Boolean VALOR_FACTURADOIsKey(){
				    return false;
				}
				public Integer VALOR_FACTURADOLength(){
				    return 0;
				}
				public Integer VALOR_FACTURADOPrecision(){
				    return 0;
				}
				public String VALOR_FACTURADODefault(){
				
					return "";
				
				}
				public String VALOR_FACTURADOComment(){
				
				    return "";
				
				}
				public String VALOR_FACTURADOPattern(){
				
					return "";
				
				}
				public String VALOR_FACTURADOOriginalDbColumnName(){
				
					return "VALOR_FACTURADO";
				
				}

				
			    public BigDecimal CANTIDAD_ATENCIONES;

				public BigDecimal getCANTIDAD_ATENCIONES () {
					return this.CANTIDAD_ATENCIONES;
				}

				public Boolean CANTIDAD_ATENCIONESIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_ATENCIONESIsKey(){
				    return false;
				}
				public Integer CANTIDAD_ATENCIONESLength(){
				    return 0;
				}
				public Integer CANTIDAD_ATENCIONESPrecision(){
				    return 0;
				}
				public String CANTIDAD_ATENCIONESDefault(){
				
					return "";
				
				}
				public String CANTIDAD_ATENCIONESComment(){
				
				    return "";
				
				}
				public String CANTIDAD_ATENCIONESPattern(){
				
					return "";
				
				}
				public String CANTIDAD_ATENCIONESOriginalDbColumnName(){
				
					return "CANTIDAD_ATENCIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICOS_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_ATENCIONES = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICOS_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_FACTURADO = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_ATENCIONES = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO_PAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAGNOSTICOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_FACTURADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_ATENCIONES);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO_PAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAGNOSTICOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_FACTURADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_ATENCIONES);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",FPERIODO="+String.valueOf(FPERIODO));
		sb.append(",TIPO_PAGO="+String.valueOf(TIPO_PAGO));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",DIAGNOSTICOS_ID="+String.valueOf(DIAGNOSTICOS_ID));
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",VALOR_FACTURADO="+String.valueOf(VALOR_FACTURADO));
		sb.append(",CANTIDAD_ATENCIONES="+String.valueOf(CANTIDAD_ATENCIONES));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_10Process(globalMap);

		row26Struct row26 = new row26Struct();
Elimina5Struct Elimina5 = new Elimina5Struct();
Inserta6Struct Inserta6 = new Inserta6Struct();





	
	/**
	 * [tOracleOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_14", false);
		start_Hash.put("tOracleOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Elimina5");
					}
				
		int tos_count_tOracleOutput_14 = 0;
		






        int deleteKeyCount_tOracleOutput_14 = 5;
        if(deleteKeyCount_tOracleOutput_14 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_14 = 0;
    int nb_line_update_tOracleOutput_14 = 0;
    int nb_line_inserted_tOracleOutput_14 = 0;
    int nb_line_deleted_tOracleOutput_14 = 0;
    int nb_line_rejected_tOracleOutput_14 = 0;

    int tmp_batchUpdateCount_tOracleOutput_14 = 0;

    int deletedCount_tOracleOutput_14=0;
    int updatedCount_tOracleOutput_14=0;
    int insertedCount_tOracleOutput_14=0;
    int rowsToCommitCount_tOracleOutput_14=0;
    int rejectedCount_tOracleOutput_14=0;

    boolean whetherReject_tOracleOutput_14 = false;

    java.sql.Connection conn_tOracleOutput_14 = null;

    //optional table
    String dbschema_tOracleOutput_14 = null;
    String tableName_tOracleOutput_14 = null;
                    String driverClass_tOracleOutput_14 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_14);
                String url_tOracleOutput_14 = null;
                    url_tOracleOutput_14 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_14 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_14 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_14 = decryptedPassword_tOracleOutput_14;
                dbschema_tOracleOutput_14 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_14 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_14.put("user",dbUser_tOracleOutput_14);
                    atnParamsPrope_tOracleOutput_14.put("password",dbPwd_tOracleOutput_14);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_14.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_14 = java.sql.DriverManager.getConnection(url_tOracleOutput_14, atnParamsPrope_tOracleOutput_14);
        resourceMap.put("conn_tOracleOutput_14", conn_tOracleOutput_14);
            conn_tOracleOutput_14.setAutoCommit(false);
            int commitEvery_tOracleOutput_14 = 1000;
            int commitCounter_tOracleOutput_14 = 0;
        int batchSize_tOracleOutput_14 = 1000;
        int batchSizeCounter_tOracleOutput_14=0;
        int count_tOracleOutput_14=0;

        if(dbschema_tOracleOutput_14 == null || dbschema_tOracleOutput_14.trim().length() == 0) {
            tableName_tOracleOutput_14 = ("BACM_ATENCIONES");
        } else {
            tableName_tOracleOutput_14 = dbschema_tOracleOutput_14 + "." + ("BACM_ATENCIONES");
        }
                String delete_tOracleOutput_14 = "DELETE FROM " + tableName_tOracleOutput_14 + " WHERE UORG_ID = ? AND PRESTADOR_ID = ? AND TIPO_PAGO = ? AND PERSONAS_ID = ? AND DIAGNOSTICO_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_14 = conn_tOracleOutput_14.prepareStatement(delete_tOracleOutput_14);
                resourceMap.put("pstmt_tOracleOutput_14", pstmt_tOracleOutput_14);





 



/**
 * [tOracleOutput_14 begin ] stop
 */




	
	/**
	 * [tOracleOutput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_15", false);
		start_Hash.put("tOracleOutput_15", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta6");
					}
				
		int tos_count_tOracleOutput_15 = 0;
		






    
    int nb_line_tOracleOutput_15 = 0;
    int nb_line_update_tOracleOutput_15 = 0;
    int nb_line_inserted_tOracleOutput_15 = 0;
    int nb_line_deleted_tOracleOutput_15 = 0;
    int nb_line_rejected_tOracleOutput_15 = 0;

    int tmp_batchUpdateCount_tOracleOutput_15 = 0;

    int deletedCount_tOracleOutput_15=0;
    int updatedCount_tOracleOutput_15=0;
    int insertedCount_tOracleOutput_15=0;
    int rowsToCommitCount_tOracleOutput_15=0;
    int rejectedCount_tOracleOutput_15=0;

    boolean whetherReject_tOracleOutput_15 = false;

    java.sql.Connection conn_tOracleOutput_15 = null;

    //optional table
    String dbschema_tOracleOutput_15 = null;
    String tableName_tOracleOutput_15 = null;
                    String driverClass_tOracleOutput_15 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_15);
                String url_tOracleOutput_15 = null;
                    url_tOracleOutput_15 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_15 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_15 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_15 = decryptedPassword_tOracleOutput_15;
                dbschema_tOracleOutput_15 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_15 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_15.put("user",dbUser_tOracleOutput_15);
                    atnParamsPrope_tOracleOutput_15.put("password",dbPwd_tOracleOutput_15);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_15.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_15 = java.sql.DriverManager.getConnection(url_tOracleOutput_15, atnParamsPrope_tOracleOutput_15);
        resourceMap.put("conn_tOracleOutput_15", conn_tOracleOutput_15);
            conn_tOracleOutput_15.setAutoCommit(false);
            int commitEvery_tOracleOutput_15 = 1000;
            int commitCounter_tOracleOutput_15 = 0;
        int batchSize_tOracleOutput_15 = 1000;
        int batchSizeCounter_tOracleOutput_15=0;
        int count_tOracleOutput_15=0;

        if(dbschema_tOracleOutput_15 == null || dbschema_tOracleOutput_15.trim().length() == 0) {
            tableName_tOracleOutput_15 = ("BACM_ATENCIONES");
        } else {
            tableName_tOracleOutput_15 = dbschema_tOracleOutput_15 + "." + ("BACM_ATENCIONES");
        }
                String insert_tOracleOutput_15 = "INSERT INTO " + tableName_tOracleOutput_15 + " (UORG_ID,PRESTADOR_ID,TIPO_PAGO,PERSONAS_ID,DIAGNOSTICO_ID,SERVICIOS_ID,ESPECIALIDADES_ID,VALOR_FACTURADO,CANTIDAD_ATENCIONES,TIEMPOS_ID) VALUES (?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_15 = conn_tOracleOutput_15.prepareStatement(insert_tOracleOutput_15);
                        resourceMap.put("pstmt_tOracleOutput_15", pstmt_tOracleOutput_15);





 



/**
 * [tOracleOutput_15 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) 
					globalMap.get( "tHash_Lookup_row27" ))
					;					
					
	

row27Struct row27HashKey = new row27Struct();
row27Struct row27Default = new row27Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
Elimina5Struct Elimina5_tmp = new Elimina5Struct();
Inserta6Struct Inserta6_tmp = new Inserta6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tOracleInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_10", false);
		start_Hash.put("tOracleInput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_10";
	
	
		int tos_count_tOracleInput_10 = 0;
		
	


	
		    int nb_line_tOracleInput_10 = 0;
		    java.sql.Connection conn_tOracleInput_10 = null;
				conn_tOracleInput_10 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_10 = false;
				boolean isConnectionWrapped_tOracleInput_10 = !(conn_tOracleInput_10 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_10.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_10 = null;
                if (isConnectionWrapped_tOracleInput_10) {
					unwrappedOraConn_tOracleInput_10 = conn_tOracleInput_10.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_10 != null) {
                        isTimeZoneNull_tOracleInput_10 = (unwrappedOraConn_tOracleInput_10.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_10 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_10).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_10) {
					java.sql.Statement stmtGetTZ_tOracleInput_10 = conn_tOracleInput_10.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_10 = stmtGetTZ_tOracleInput_10.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_10 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_10.next()) {
						sessionTimezone_tOracleInput_10 = rsGetTZ_tOracleInput_10.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_10 && unwrappedOraConn_tOracleInput_10 != null) {
                        unwrappedOraConn_tOracleInput_10.setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_10).setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_10 = conn_tOracleInput_10.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_10.setFetchSize(1000);


		    String dbquery_tOracleInput_10 = "SELECT    COND.UORG_ID \n        , COND.PRESTADOR_ID         \n        , COND.FPERIODO\n        , COND.TIPO_PAGO\n     "
+"   , COND.PERSONAS_ID\n        , COND.DIAGNOSTICOS_ID    \n        , NVL( DFS.SERVICIOS_ID, ASERT.SERVICIOS_ID ) AS SERV"
+"ICIOS_ID         \n        , NVL( RC.ESPECIALIDADES_ID, AESP.ESPECIALIDADES_ID ) AS ESPECIALIDADES_ID               \n  "
+"      , SUM( NVL(DFS.VTOTAL, DFF.VTOTAL) ) AS VALOR_FACTURADO        \n        , COUNT ( NVL(DFS.ID, DFF.ID) ) AS CANTID"
+"AD_ATENCIONES\nFROM ACM_ETAPASNORMATIVIDAD EN\nINNER JOIN ACM_HAUDITORIAS HA ON EN.ID = HA.ETAPASNORMATIVIDAD_ID \nINNER"
+" JOIN ACM_ESTAUDITORIAS ESA ON ESA.ID = HA.ESTAUDITORIA_ID\nINNER JOIN ACM_RECEPCION RE ON RE.ID = HA.RECEPCION_ID\nLEFT"
+" JOIN ACM_DFACTURASERVICIO DFS ON DFS.RECEPCION_ID = HA.RECEPCION_ID  \n                                  AND DFS.ESTREG"
+"ISTRO_ID = 1\nLEFT JOIN ACM_DFACTURAFORMULACION DFF ON DFF.RECEPCION_ID = HA.RECEPCION_ID \n                            "
+"         AND DFF.ESTREGISTRO_ID = 1 \nINNER JOIN GEN_PERSONAS GP ON ( GP.ID = DFS.PERSONAS_ID OR GP.ID = DFF.PERSONAS_ID"
+" )\nINNER JOIN GEN_CIE10 CIE ON ( CIE.CODIGO = DFS.CODIGO_CIE10 OR DFF.CIE10_ID = CIE.ID )                              "
+" \nINNER JOIN ( \n   SELECT     FPERIODO\n            , PRESTADOR_ID\n            , UORG_ID\n            , DIAGNOSTICOS_"
+"ID\n            , TIPO_PAGO\n            , PERSONAS_ID            \n    FROM (\n      SELECT    TRUNC ( NVL( DFS.FSERVIC"
+"IO, DFF.FDISPENSACION) , 'MONTH') AS FPERIODO\n              , RE.PRESTADOR_ID \n              , RE.UORG_ID             "
+"\n              , CIE.ID AS DIAGNOSTICOS_ID\n              , CASE \n                  WHEN RE.CONTRATOS_ID IS NULL AND R"
+"E.MEDCONTRATOS_ID IS NULL \n                  THEN 2\n                  ELSE 1\n                END AS TIPO_PAGO\n      "
+"        , GP.ID AS PERSONAS_ID\n              , ROW_NUMBER() OVER ( PARTITION BY    TRUNC ( NVL( DFS.FSERVICIO, DFF.FDIS"
+"PENSACION) , 'MONTH')\n                                                  , RE.PRESTADOR_ID \n                           "
+"                       , RE.UORG_ID             \n                                                  , CIE.ID\n          "
+"                                        , CASE \n                                                      WHEN RE.CONTRATOS"
+"_ID IS NULL \n                                                       AND RE.MEDCONTRATOS_ID IS NULL \n                  "
+"                                    THEN 2\n                                                      ELSE 1\n              "
+"                                      END \n                                                  , GP.ID \n                "
+"                    ORDER BY RE.ID ) R\n      FROM ACM_ETAPASNORMATIVIDAD EN\n      INNER JOIN ACM_HAUDITORIAS HA ON EN."
+"ID = HA.ETAPASNORMATIVIDAD_ID      \n	  INNER JOIN ACM_ESTAUDITORIAS ESA ON ESA.ID = HA.ESTAUDITORIA_ID	\n      INNER JO"
+"IN ACM_RECEPCION RE ON RE.ID = HA.RECEPCION_ID\n      LEFT JOIN ACM_DFACTURASERVICIO DFS ON DFS.RECEPCION_ID = HA.RECEPC"
+"ION_ID  AND DFS.ESTREGISTRO_ID = 1\n      LEFT JOIN ACM_DFACTURAFORMULACION DFF ON DFF.RECEPCION_ID = HA.RECEPCION_ID AN"
+"D DFF.ESTREGISTRO_ID = 1 \n      INNER JOIN GEN_PERSONAS GP ON ( GP.ID = DFS.PERSONAS_ID OR GP.ID = DFF.PERSONAS_ID ) \n"
+"      INNER JOIN GEN_CIE10 CIE ON ( CIE.CODIGO = DFS.CODIGO_CIE10 OR DFF.CIE10_ID = CIE.ID )      \n      WHERE EN.CODIG"
+"O = 1        \n        AND HA.ESTREGISTRO_ID = 1\n        AND RE.ESTREGISTRO_ID = 1  \n        AND GP.ESTREGISTRO_ID = 1"
+"\n		AND ESA.NOMBRE = 'Finalizada'\n        AND ( HA.EJECUCION = 1  )\n       "+context.CONDICION+"\n    ) WHERE R = 1\n) COND ON COND.FPERIODO = TRUNC ( NVL( DFS.FSERVICIO, DFF.FDISPENSACION) , 'MONTH')\n      AND CON"
+"D.TIPO_PAGO = DECODE( RE.CONTRATOS_ID, NULL, DECODE ( RE.MEDCONTRATOS_ID, NULL, 2, 1 ), 1)\n      AND COND.PRESTADOR_ID "
+"= RE.PRESTADOR_ID \n      AND COND.UORG_ID = RE.UORG_ID\n      AND COND.PERSONAS_ID = GP.ID\n      AND COND.DIAGNOSTICOS"
+"_ID = CIE.ID\nLEFT JOIN RCA_CUPSOLICITADOS RC ON RC.AUTORIZACION_ID = DFS.AUTORIZACION_ID\n                             "
+"  AND RC.CUPS_ID = DFS.CUPS_ID\n                               AND RC.ESTREGISTRO_ID = 1\nLEFT JOIN HCL_DFORMMEDINSUMOS "
+"DFOR ON DFOR.ID = DFF.DFORMMEDINSUMOS_ID\n                                  AND DFOR.ESTREGISTRO_ID = 1\nLEFT JOIN HCL_F"
+"ORMMEDINSUMOS FORMMEDIN ON FORMMEDIN.ID = DFOR.FORMMEDINSUMOS_ID \n                                      AND FORMMEDIN.E"
+"STREGISTRO_ID = 1\nLEFT JOIN HCL_FORMMEDICAS FORMU ON FORMU.ID = FORMMEDIN.FORMMEDICAS_ID  \n                           "
+"    AND FORMU.ESTREGISTRO_ID = 1\nLEFT JOIN HCL_PROCESOSASISTENCIALES HP ON HP.ID = FORMU.PROCESOSASISTENCIALES_ID\n    "
+"                                  AND HP.ESTREGISTRO_ID = 1\nLEFT JOIN ADM_ESPTRATANTES AESP ON AESP.ID = HP.ESPTRATANTE"
+"S_ID \n                               AND AESP.ESTREGISTRO_ID = 1\nLEFT JOIN ADM_SERVTRATANTES ASERT ON ASERT.ID = AESP."
+"SERVTRATANTES_ID\n                                 AND ASERT.ESTREGISTRO_ID = 1\nWHERE HA.ESTREGISTRO_ID = 1\n  AND RE.E"
+"STREGISTRO_ID = 1  \n  AND EN.CODIGO = 1\n  AND GP.ESTREGISTRO_ID = 1\n AND ( HA.EJECUCION = 1  )\n  AND HA.FFETAPA IS N"
+"OT NULL \n  AND ESA.NOMBRE = 'Finalizada'\nGROUP BY  COND.UORG_ID \n        , COND.PRESTADOR_ID         \n        , COND"
+".FPERIODO\n        , COND.TIPO_PAGO\n        , COND.PERSONAS_ID\n        , COND.DIAGNOSTICOS_ID    \n        , NVL( DFS."
+"SERVICIOS_ID, ASERT.SERVICIOS_ID )        \n        , NVL( RC.ESPECIALIDADES_ID, AESP.ESPECIALIDADES_ID ) ";
		    

		    globalMap.put("tOracleInput_10_QUERY",dbquery_tOracleInput_10);

		    java.sql.ResultSet rs_tOracleInput_10 = null;

		    try {
		    	rs_tOracleInput_10 = stmt_tOracleInput_10.executeQuery(dbquery_tOracleInput_10);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_10 = rs_tOracleInput_10.getMetaData();
		    	int colQtyInRs_tOracleInput_10 = rsmd_tOracleInput_10.getColumnCount();

		    String tmpContent_tOracleInput_10 = null;
		    
		    
		    while (rs_tOracleInput_10.next()) {
		        nb_line_tOracleInput_10++;
		        
							if(colQtyInRs_tOracleInput_10 < 1) {
								row26.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(1) != null) {
						row26.UORG_ID = rs_tOracleInput_10.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 2) {
								row26.PRESTADOR_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(2) != null) {
						row26.PRESTADOR_ID = rs_tOracleInput_10.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 3) {
								row26.FPERIODO = null;
							} else {
										
			row26.FPERIODO = routines.system.JDBCUtil.getDate(rs_tOracleInput_10, 3);
		                    }
							if(colQtyInRs_tOracleInput_10 < 4) {
								row26.TIPO_PAGO = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(4) != null) {
						row26.TIPO_PAGO = rs_tOracleInput_10.getBigDecimal(4);
					} else {
				
						row26.TIPO_PAGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 5) {
								row26.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(5) != null) {
						row26.PERSONAS_ID = rs_tOracleInput_10.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 6) {
								row26.DIAGNOSTICOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(6) != null) {
						row26.DIAGNOSTICOS_ID = rs_tOracleInput_10.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 7) {
								row26.SERVICIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(7) != null) {
						row26.SERVICIOS_ID = rs_tOracleInput_10.getBigDecimal(7);
					} else {
				
						row26.SERVICIOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 8) {
								row26.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(8) != null) {
						row26.ESPECIALIDADES_ID = rs_tOracleInput_10.getBigDecimal(8);
					} else {
				
						row26.ESPECIALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 9) {
								row26.VALOR_FACTURADO = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(9) != null) {
						row26.VALOR_FACTURADO = rs_tOracleInput_10.getBigDecimal(9);
					} else {
				
						row26.VALOR_FACTURADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 10) {
								row26.CANTIDAD_ATENCIONES = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(10) != null) {
						row26.CANTIDAD_ATENCIONES = rs_tOracleInput_10.getBigDecimal(10);
					} else {
				
						row26.CANTIDAD_ATENCIONES = null;
					}
		                    }
					




 



/**
 * [tOracleInput_10 begin ] stop
 */
	
	/**
	 * [tOracleInput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 


	tos_count_tOracleInput_10++;

/**
 * [tOracleInput_10 main ] stop
 */
	
	/**
	 * [tOracleInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row26"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
						row27Struct row27 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row27" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow27 = false;
       		  	    	
       		  	    	
 							row27Struct row27ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row27HashKey.FECHA = row26.FPERIODO  == null ? null : new java.util.Date((row26.FPERIODO ).getTime());
                        		    		

								
		                        	row27HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row27.lookup( row27HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row27.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_7 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row27 != null && tHash_Lookup_row27.getCount(row27HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row27' and it contains more one result from keys :  row27.FECHA = '" + row27HashKey.FECHA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row27Struct fromLookup_row27 = null;
							row27 = row27Default;
										 
							
								 
							
							
								if (tHash_Lookup_row27 !=null && tHash_Lookup_row27.hasNext()) { // G 099
								
							
								
								fromLookup_row27 = tHash_Lookup_row27.next();

							
							
								} // G 099
							
							

							if(fromLookup_row27 != null) {
								row27 = fromLookup_row27;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

Elimina5 = null;
Inserta6 = null;

if(!rejectedInnerJoin_tMap_7 ) {

// # Output table : 'Elimina5'
Elimina5_tmp.UORG_ID = row26.UORG_ID ;
Elimina5_tmp.PRESTADOR_ID = row26.PRESTADOR_ID ;
Elimina5_tmp.TIPO_PAGO = row26.TIPO_PAGO ;
Elimina5_tmp.PERSONAS_ID = row26.PERSONAS_ID ;
Elimina5_tmp.DIAGNOSTICO_ID = row26.DIAGNOSTICOS_ID ;
Elimina5 = Elimina5_tmp;

// # Output table : 'Inserta6'
Inserta6_tmp.UORG_ID = row26.UORG_ID ;
Inserta6_tmp.PRESTADOR_ID = row26.PRESTADOR_ID ;
Inserta6_tmp.TIPO_PAGO = row26.TIPO_PAGO ;
Inserta6_tmp.PERSONAS_ID = row26.PERSONAS_ID ;
Inserta6_tmp.DIAGNOSTICO_ID = row26.DIAGNOSTICOS_ID ;
Inserta6_tmp.SERVICIOS_ID = row26.SERVICIOS_ID ;
Inserta6_tmp.ESPECIALIDADES_ID = row26.ESPECIALIDADES_ID ;
Inserta6_tmp.VALOR_FACTURADO = row26.VALOR_FACTURADO ;
Inserta6_tmp.CANTIDAD_ATENCIONES = row26.CANTIDAD_ATENCIONES ;
Inserta6_tmp.TIEMPOS_ID = row27.ID ;
Inserta6 = Inserta6_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "Elimina5"
if(Elimina5 != null) { 



	
	/**
	 * [tOracleOutput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Elimina5"
						
						);
					}
					



        whetherReject_tOracleOutput_14 = false;
                    pstmt_tOracleOutput_14.setBigDecimal(1, Elimina5.UORG_ID);

                    pstmt_tOracleOutput_14.setBigDecimal(2, Elimina5.PRESTADOR_ID);

                    pstmt_tOracleOutput_14.setBigDecimal(3, Elimina5.TIPO_PAGO);

                    pstmt_tOracleOutput_14.setBigDecimal(4, Elimina5.PERSONAS_ID);

                    pstmt_tOracleOutput_14.setBigDecimal(5, Elimina5.DIAGNOSTICO_ID);

                pstmt_tOracleOutput_14.addBatch();
                nb_line_tOracleOutput_14++;
                batchSizeCounter_tOracleOutput_14++;
            if (batchSize_tOracleOutput_14 > 0 &&  batchSize_tOracleOutput_14 <= batchSizeCounter_tOracleOutput_14) {
                try {
                    pstmt_tOracleOutput_14.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_14){
globalMap.put("tOracleOutput_14_ERROR_MESSAGE",e_tOracleOutput_14.getMessage());
			        java.sql.SQLException ne_tOracleOutput_14 = e_tOracleOutput_14.getNextException(),sqle_tOracleOutput_14=null;
			    	String errormessage_tOracleOutput_14;
					if (ne_tOracleOutput_14 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_14 = new java.sql.SQLException(e_tOracleOutput_14.getMessage() + "\ncaused by: " + ne_tOracleOutput_14.getMessage(), ne_tOracleOutput_14.getSQLState(), ne_tOracleOutput_14.getErrorCode(), ne_tOracleOutput_14);
						errormessage_tOracleOutput_14 = sqle_tOracleOutput_14.getMessage();
					}else{
						errormessage_tOracleOutput_14 = e_tOracleOutput_14.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_14);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_14 = pstmt_tOracleOutput_14.getUpdateCount();
                    deletedCount_tOracleOutput_14
                += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                rowsToCommitCount_tOracleOutput_14 += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                batchSizeCounter_tOracleOutput_14 = 0;
            }
                commitCounter_tOracleOutput_14++;
                if(commitEvery_tOracleOutput_14 <= commitCounter_tOracleOutput_14) {
                    if(batchSizeCounter_tOracleOutput_14 > 0) {
                        try {
                            pstmt_tOracleOutput_14.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_14){
globalMap.put("tOracleOutput_14_ERROR_MESSAGE",e_tOracleOutput_14.getMessage());
					        java.sql.SQLException ne_tOracleOutput_14 = e_tOracleOutput_14.getNextException(),sqle_tOracleOutput_14=null;
					    	String errormessage_tOracleOutput_14;
							if (ne_tOracleOutput_14 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_14 = new java.sql.SQLException(e_tOracleOutput_14.getMessage() + "\ncaused by: " + ne_tOracleOutput_14.getMessage(), ne_tOracleOutput_14.getSQLState(), ne_tOracleOutput_14.getErrorCode(), ne_tOracleOutput_14);
								errormessage_tOracleOutput_14 = sqle_tOracleOutput_14.getMessage();
							}else{
								errormessage_tOracleOutput_14 = e_tOracleOutput_14.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_14);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_14 = pstmt_tOracleOutput_14.getUpdateCount();
                            deletedCount_tOracleOutput_14
                        += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                        rowsToCommitCount_tOracleOutput_14 += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_14 != 0){
                    	
                    }
                    conn_tOracleOutput_14.commit();
                    if(rowsToCommitCount_tOracleOutput_14 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_14 = 0;
                    }
                    commitCounter_tOracleOutput_14=0;
                    	batchSizeCounter_tOracleOutput_14=0;
                }

 


	tos_count_tOracleOutput_14++;

/**
 * [tOracleOutput_14 main ] stop
 */
	
	/**
	 * [tOracleOutput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	

 



/**
 * [tOracleOutput_14 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	

 



/**
 * [tOracleOutput_14 process_data_end ] stop
 */

} // End of branch "Elimina5"




// Start of branch "Inserta6"
if(Inserta6 != null) { 



	
	/**
	 * [tOracleOutput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta6"
						
						);
					}
					



        whetherReject_tOracleOutput_15 = false;
                        pstmt_tOracleOutput_15.setBigDecimal(1, Inserta6.UORG_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(2, Inserta6.PRESTADOR_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(3, Inserta6.TIPO_PAGO);

                        pstmt_tOracleOutput_15.setBigDecimal(4, Inserta6.PERSONAS_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(5, Inserta6.DIAGNOSTICO_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(6, Inserta6.SERVICIOS_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(7, Inserta6.ESPECIALIDADES_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(8, Inserta6.VALOR_FACTURADO);

                        pstmt_tOracleOutput_15.setBigDecimal(9, Inserta6.CANTIDAD_ATENCIONES);

                        pstmt_tOracleOutput_15.setBigDecimal(10, Inserta6.TIEMPOS_ID);

                pstmt_tOracleOutput_15.addBatch();
                nb_line_tOracleOutput_15++;
                batchSizeCounter_tOracleOutput_15++;
            if (batchSize_tOracleOutput_15 > 0 &&  batchSize_tOracleOutput_15 <= batchSizeCounter_tOracleOutput_15) {
                try {
                    pstmt_tOracleOutput_15.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_15){
globalMap.put("tOracleOutput_15_ERROR_MESSAGE",e_tOracleOutput_15.getMessage());
			        java.sql.SQLException ne_tOracleOutput_15 = e_tOracleOutput_15.getNextException(),sqle_tOracleOutput_15=null;
			    	String errormessage_tOracleOutput_15;
					if (ne_tOracleOutput_15 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_15 = new java.sql.SQLException(e_tOracleOutput_15.getMessage() + "\ncaused by: " + ne_tOracleOutput_15.getMessage(), ne_tOracleOutput_15.getSQLState(), ne_tOracleOutput_15.getErrorCode(), ne_tOracleOutput_15);
						errormessage_tOracleOutput_15 = sqle_tOracleOutput_15.getMessage();
					}else{
						errormessage_tOracleOutput_15 = e_tOracleOutput_15.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_15);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_15 = pstmt_tOracleOutput_15.getUpdateCount();
                    insertedCount_tOracleOutput_15
                += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                rowsToCommitCount_tOracleOutput_15 += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                batchSizeCounter_tOracleOutput_15 = 0;
            }
                commitCounter_tOracleOutput_15++;
                if(commitEvery_tOracleOutput_15 <= commitCounter_tOracleOutput_15) {
                    if(batchSizeCounter_tOracleOutput_15 > 0) {
                        try {
                            pstmt_tOracleOutput_15.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_15){
globalMap.put("tOracleOutput_15_ERROR_MESSAGE",e_tOracleOutput_15.getMessage());
					        java.sql.SQLException ne_tOracleOutput_15 = e_tOracleOutput_15.getNextException(),sqle_tOracleOutput_15=null;
					    	String errormessage_tOracleOutput_15;
							if (ne_tOracleOutput_15 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_15 = new java.sql.SQLException(e_tOracleOutput_15.getMessage() + "\ncaused by: " + ne_tOracleOutput_15.getMessage(), ne_tOracleOutput_15.getSQLState(), ne_tOracleOutput_15.getErrorCode(), ne_tOracleOutput_15);
								errormessage_tOracleOutput_15 = sqle_tOracleOutput_15.getMessage();
							}else{
								errormessage_tOracleOutput_15 = e_tOracleOutput_15.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_15);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_15 = pstmt_tOracleOutput_15.getUpdateCount();
                            insertedCount_tOracleOutput_15
                        += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                        rowsToCommitCount_tOracleOutput_15 += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_15 != 0){
                    	
                    }
                    conn_tOracleOutput_15.commit();
                    if(rowsToCommitCount_tOracleOutput_15 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_15 = 0;
                    }
                    commitCounter_tOracleOutput_15=0;
                    	batchSizeCounter_tOracleOutput_15=0;
                }

 


	tos_count_tOracleOutput_15++;

/**
 * [tOracleOutput_15 main ] stop
 */
	
	/**
	 * [tOracleOutput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	

 



/**
 * [tOracleOutput_15 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	

 



/**
 * [tOracleOutput_15 process_data_end ] stop
 */

} // End of branch "Inserta6"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

}
}finally{
	if (rs_tOracleInput_10 != null) {
		rs_tOracleInput_10.close();
	}
	if (stmt_tOracleInput_10 != null) {
		stmt_tOracleInput_10.close();
	}
}

globalMap.put("tOracleInput_10_NB_LINE",nb_line_tOracleInput_10);
 

ok_Hash.put("tOracleInput_10", true);
end_Hash.put("tOracleInput_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tJava_8Process(globalMap);



/**
 * [tOracleInput_10 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row27 != null) {
						tHash_Lookup_row27.endGet();
					}
					globalMap.remove( "tHash_Lookup_row27" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tOracleOutput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_14 > 0) {
            try {
            	if (pstmt_tOracleOutput_14 != null) {
					
					pstmt_tOracleOutput_14.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_14){
globalMap.put("tOracleOutput_14_ERROR_MESSAGE",e_tOracleOutput_14.getMessage());
		        java.sql.SQLException ne_tOracleOutput_14 = e_tOracleOutput_14.getNextException(),sqle_tOracleOutput_14=null;
		    	String errormessage_tOracleOutput_14;
				if (ne_tOracleOutput_14 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_14 = new java.sql.SQLException(e_tOracleOutput_14.getMessage() + "\ncaused by: " + ne_tOracleOutput_14.getMessage(), ne_tOracleOutput_14.getSQLState(), ne_tOracleOutput_14.getErrorCode(), ne_tOracleOutput_14);
					errormessage_tOracleOutput_14 = sqle_tOracleOutput_14.getMessage();
				}else{
					errormessage_tOracleOutput_14 = e_tOracleOutput_14.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_14);
            	
        	}
        	if (pstmt_tOracleOutput_14 != null) {
            	tmp_batchUpdateCount_tOracleOutput_14 = pstmt_tOracleOutput_14.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_14
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
				rowsToCommitCount_tOracleOutput_14 += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
            }
        }
        if(pstmt_tOracleOutput_14 != null) {
			
				pstmt_tOracleOutput_14.close();
				resourceMap.remove("pstmt_tOracleOutput_14");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_14", true);
		if(commitCounter_tOracleOutput_14 > 0 && rowsToCommitCount_tOracleOutput_14 != 0) {
			
		}
		conn_tOracleOutput_14.commit();
		if(commitCounter_tOracleOutput_14 > 0 && rowsToCommitCount_tOracleOutput_14 != 0) {
			
			rowsToCommitCount_tOracleOutput_14 = 0;
		}
		commitCounter_tOracleOutput_14 = 0;
		
		
		conn_tOracleOutput_14 .close();
		
		resourceMap.put("finish_tOracleOutput_14", true);
   	

	
	nb_line_deleted_tOracleOutput_14=nb_line_deleted_tOracleOutput_14+ deletedCount_tOracleOutput_14;
	nb_line_update_tOracleOutput_14=nb_line_update_tOracleOutput_14 + updatedCount_tOracleOutput_14;
	nb_line_inserted_tOracleOutput_14=nb_line_inserted_tOracleOutput_14 + insertedCount_tOracleOutput_14;
	nb_line_rejected_tOracleOutput_14=nb_line_rejected_tOracleOutput_14 + rejectedCount_tOracleOutput_14;
	
        globalMap.put("tOracleOutput_14_NB_LINE",nb_line_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_UPDATED",nb_line_update_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_14);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Elimina5");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_14", true);
end_Hash.put("tOracleOutput_14", System.currentTimeMillis());




/**
 * [tOracleOutput_14 end ] stop
 */




	
	/**
	 * [tOracleOutput_15 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_15 > 0) {
            try {
            	if (pstmt_tOracleOutput_15 != null) {
					
					pstmt_tOracleOutput_15.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_15){
globalMap.put("tOracleOutput_15_ERROR_MESSAGE",e_tOracleOutput_15.getMessage());
		        java.sql.SQLException ne_tOracleOutput_15 = e_tOracleOutput_15.getNextException(),sqle_tOracleOutput_15=null;
		    	String errormessage_tOracleOutput_15;
				if (ne_tOracleOutput_15 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_15 = new java.sql.SQLException(e_tOracleOutput_15.getMessage() + "\ncaused by: " + ne_tOracleOutput_15.getMessage(), ne_tOracleOutput_15.getSQLState(), ne_tOracleOutput_15.getErrorCode(), ne_tOracleOutput_15);
					errormessage_tOracleOutput_15 = sqle_tOracleOutput_15.getMessage();
				}else{
					errormessage_tOracleOutput_15 = e_tOracleOutput_15.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_15);
            	
        	}
        	if (pstmt_tOracleOutput_15 != null) {
            	tmp_batchUpdateCount_tOracleOutput_15 = pstmt_tOracleOutput_15.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_15
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
				rowsToCommitCount_tOracleOutput_15 += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
            }
        }
        if(pstmt_tOracleOutput_15 != null) {
			
				pstmt_tOracleOutput_15.close();
				resourceMap.remove("pstmt_tOracleOutput_15");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_15", true);
		if(commitCounter_tOracleOutput_15 > 0 && rowsToCommitCount_tOracleOutput_15 != 0) {
			
		}
		conn_tOracleOutput_15.commit();
		if(commitCounter_tOracleOutput_15 > 0 && rowsToCommitCount_tOracleOutput_15 != 0) {
			
			rowsToCommitCount_tOracleOutput_15 = 0;
		}
		commitCounter_tOracleOutput_15 = 0;
		
		
		conn_tOracleOutput_15 .close();
		
		resourceMap.put("finish_tOracleOutput_15", true);
   	

	
	nb_line_deleted_tOracleOutput_15=nb_line_deleted_tOracleOutput_15+ deletedCount_tOracleOutput_15;
	nb_line_update_tOracleOutput_15=nb_line_update_tOracleOutput_15 + updatedCount_tOracleOutput_15;
	nb_line_inserted_tOracleOutput_15=nb_line_inserted_tOracleOutput_15 + insertedCount_tOracleOutput_15;
	nb_line_rejected_tOracleOutput_15=nb_line_rejected_tOracleOutput_15 + rejectedCount_tOracleOutput_15;
	
        globalMap.put("tOracleOutput_15_NB_LINE",nb_line_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_UPDATED",nb_line_update_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_15);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta6");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_15", true);
end_Hash.put("tOracleOutput_15", System.currentTimeMillis());




/**
 * [tOracleOutput_15 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tOracleInput_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row27"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tOracleOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_14") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_14 = null;
                if ((pstmtToClose_tOracleOutput_14 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_14")) != null) {
                    pstmtToClose_tOracleOutput_14.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_14") == null){
            java.sql.Connection ctn_tOracleOutput_14 = null;
            if((ctn_tOracleOutput_14 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_14")) != null){
                try {
                    ctn_tOracleOutput_14.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_14) {
                    String errorMessage_tOracleOutput_14 = "failed to close the connection in tOracleOutput_14 :" + sqlEx_tOracleOutput_14.getMessage();
                    System.err.println(errorMessage_tOracleOutput_14);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_14 finally ] stop
 */




	
	/**
	 * [tOracleOutput_15 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_15") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_15 = null;
                if ((pstmtToClose_tOracleOutput_15 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_15")) != null) {
                    pstmtToClose_tOracleOutput_15.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_15") == null){
            java.sql.Connection ctn_tOracleOutput_15 = null;
            if((ctn_tOracleOutput_15 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_15")) != null){
                try {
                    ctn_tOracleOutput_15.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_15) {
                    String errorMessage_tOracleOutput_15 = "failed to close the connection in tOracleOutput_15 :" + sqlEx_tOracleOutput_15.getMessage();
                    System.err.println(errorMessage_tOracleOutput_15);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_15 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class Elimina6Struct implements routines.system.IPersistableRow<Elimina6Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return true;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal CONCEPTOGENERAL_ID;

				public BigDecimal getCONCEPTOGENERAL_ID () {
					return this.CONCEPTOGENERAL_ID;
				}

				public Boolean CONCEPTOGENERAL_IDIsNullable(){
				    return false;
				}
				public Boolean CONCEPTOGENERAL_IDIsKey(){
				    return true;
				}
				public Integer CONCEPTOGENERAL_IDLength(){
				    return 0;
				}
				public Integer CONCEPTOGENERAL_IDPrecision(){
				    return null;
				}
				public String CONCEPTOGENERAL_IDDefault(){
				
					return "";
				
				}
				public String CONCEPTOGENERAL_IDComment(){
				
				    return "";
				
				}
				public String CONCEPTOGENERAL_IDPattern(){
				
					return "";
				
				}
				public String CONCEPTOGENERAL_IDOriginalDbColumnName(){
				
					return "CONCEPTOGENERAL_ID";
				
				}

				
			    public BigDecimal CONCEPTOESPECIFICO_ID;

				public BigDecimal getCONCEPTOESPECIFICO_ID () {
					return this.CONCEPTOESPECIFICO_ID;
				}

				public Boolean CONCEPTOESPECIFICO_IDIsNullable(){
				    return false;
				}
				public Boolean CONCEPTOESPECIFICO_IDIsKey(){
				    return true;
				}
				public Integer CONCEPTOESPECIFICO_IDLength(){
				    return 0;
				}
				public Integer CONCEPTOESPECIFICO_IDPrecision(){
				    return null;
				}
				public String CONCEPTOESPECIFICO_IDDefault(){
				
					return "";
				
				}
				public String CONCEPTOESPECIFICO_IDComment(){
				
				    return "";
				
				}
				public String CONCEPTOESPECIFICO_IDPattern(){
				
					return "";
				
				}
				public String CONCEPTOESPECIFICO_IDOriginalDbColumnName(){
				
					return "CONCEPTOESPECIFICO_ID";
				
				}

				
			    public BigDecimal TPAGOS_ID;

				public BigDecimal getTPAGOS_ID () {
					return this.TPAGOS_ID;
				}

				public Boolean TPAGOS_IDIsNullable(){
				    return false;
				}
				public Boolean TPAGOS_IDIsKey(){
				    return true;
				}
				public Integer TPAGOS_IDLength(){
				    return 0;
				}
				public Integer TPAGOS_IDPrecision(){
				    return null;
				}
				public String TPAGOS_IDDefault(){
				
					return "";
				
				}
				public String TPAGOS_IDComment(){
				
				    return "";
				
				}
				public String TPAGOS_IDPattern(){
				
					return "";
				
				}
				public String TPAGOS_IDOriginalDbColumnName(){
				
					return "TPAGOS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.PRESTADOR_ID == null) ? 0 : this.PRESTADOR_ID.hashCode());
					
						result = prime * result + ((this.CONCEPTOGENERAL_ID == null) ? 0 : this.CONCEPTOGENERAL_ID.hashCode());
					
						result = prime * result + ((this.CONCEPTOESPECIFICO_ID == null) ? 0 : this.CONCEPTOESPECIFICO_ID.hashCode());
					
						result = prime * result + ((this.TPAGOS_ID == null) ? 0 : this.TPAGOS_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Elimina6Struct other = (Elimina6Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.PRESTADOR_ID == null) {
							if (other.PRESTADOR_ID != null)
								return false;
						
						} else if (!this.PRESTADOR_ID.equals(other.PRESTADOR_ID))
						
							return false;
					
						if (this.CONCEPTOGENERAL_ID == null) {
							if (other.CONCEPTOGENERAL_ID != null)
								return false;
						
						} else if (!this.CONCEPTOGENERAL_ID.equals(other.CONCEPTOGENERAL_ID))
						
							return false;
					
						if (this.CONCEPTOESPECIFICO_ID == null) {
							if (other.CONCEPTOESPECIFICO_ID != null)
								return false;
						
						} else if (!this.CONCEPTOESPECIFICO_ID.equals(other.CONCEPTOESPECIFICO_ID))
						
							return false;
					
						if (this.TPAGOS_ID == null) {
							if (other.TPAGOS_ID != null)
								return false;
						
						} else if (!this.TPAGOS_ID.equals(other.TPAGOS_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Elimina6Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.PRESTADOR_ID = this.PRESTADOR_ID;
	            other.CONCEPTOGENERAL_ID = this.CONCEPTOGENERAL_ID;
	            other.CONCEPTOESPECIFICO_ID = this.CONCEPTOESPECIFICO_ID;
	            other.TPAGOS_ID = this.TPAGOS_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            
	}

	public void copyKeysDataTo(Elimina6Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.PRESTADOR_ID = this.PRESTADOR_ID;
	            	other.CONCEPTOGENERAL_ID = this.CONCEPTOGENERAL_ID;
	            	other.CONCEPTOESPECIFICO_ID = this.CONCEPTOESPECIFICO_ID;
	            	other.TPAGOS_ID = this.TPAGOS_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CONCEPTOGENERAL_ID = (BigDecimal) dis.readObject();
					
						this.CONCEPTOESPECIFICO_ID = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CONCEPTOGENERAL_ID = (BigDecimal) dis.readObject();
					
						this.CONCEPTOESPECIFICO_ID = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONCEPTOGENERAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONCEPTOESPECIFICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONCEPTOGENERAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONCEPTOESPECIFICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",CONCEPTOGENERAL_ID="+String.valueOf(CONCEPTOGENERAL_ID));
		sb.append(",CONCEPTOESPECIFICO_ID="+String.valueOf(CONCEPTOESPECIFICO_ID));
		sb.append(",TPAGOS_ID="+String.valueOf(TPAGOS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Elimina6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PRESTADOR_ID, other.PRESTADOR_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CONCEPTOGENERAL_ID, other.CONCEPTOGENERAL_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CONCEPTOESPECIFICO_ID, other.CONCEPTOESPECIFICO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TPAGOS_ID, other.TPAGOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Inserta7Struct implements routines.system.IPersistableRow<Inserta7Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal CONCEPTOGENERAL_ID;

				public BigDecimal getCONCEPTOGENERAL_ID () {
					return this.CONCEPTOGENERAL_ID;
				}

				public Boolean CONCEPTOGENERAL_IDIsNullable(){
				    return false;
				}
				public Boolean CONCEPTOGENERAL_IDIsKey(){
				    return false;
				}
				public Integer CONCEPTOGENERAL_IDLength(){
				    return 0;
				}
				public Integer CONCEPTOGENERAL_IDPrecision(){
				    return null;
				}
				public String CONCEPTOGENERAL_IDDefault(){
				
					return "";
				
				}
				public String CONCEPTOGENERAL_IDComment(){
				
				    return "";
				
				}
				public String CONCEPTOGENERAL_IDPattern(){
				
					return "";
				
				}
				public String CONCEPTOGENERAL_IDOriginalDbColumnName(){
				
					return "CONCEPTOGENERAL_ID";
				
				}

				
			    public BigDecimal CONCEPTOESPECIFICO_ID;

				public BigDecimal getCONCEPTOESPECIFICO_ID () {
					return this.CONCEPTOESPECIFICO_ID;
				}

				public Boolean CONCEPTOESPECIFICO_IDIsNullable(){
				    return false;
				}
				public Boolean CONCEPTOESPECIFICO_IDIsKey(){
				    return false;
				}
				public Integer CONCEPTOESPECIFICO_IDLength(){
				    return 0;
				}
				public Integer CONCEPTOESPECIFICO_IDPrecision(){
				    return null;
				}
				public String CONCEPTOESPECIFICO_IDDefault(){
				
					return "";
				
				}
				public String CONCEPTOESPECIFICO_IDComment(){
				
				    return "";
				
				}
				public String CONCEPTOESPECIFICO_IDPattern(){
				
					return "";
				
				}
				public String CONCEPTOESPECIFICO_IDOriginalDbColumnName(){
				
					return "CONCEPTOESPECIFICO_ID";
				
				}

				
			    public BigDecimal CANTIDAD_GRL;

				public BigDecimal getCANTIDAD_GRL () {
					return this.CANTIDAD_GRL;
				}

				public Boolean CANTIDAD_GRLIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_GRLIsKey(){
				    return false;
				}
				public Integer CANTIDAD_GRLLength(){
				    return 0;
				}
				public Integer CANTIDAD_GRLPrecision(){
				    return 0;
				}
				public String CANTIDAD_GRLDefault(){
				
					return "";
				
				}
				public String CANTIDAD_GRLComment(){
				
				    return "";
				
				}
				public String CANTIDAD_GRLPattern(){
				
					return "";
				
				}
				public String CANTIDAD_GRLOriginalDbColumnName(){
				
					return "CANTIDAD_GRL";
				
				}

				
			    public BigDecimal CANTIDAD_ESP;

				public BigDecimal getCANTIDAD_ESP () {
					return this.CANTIDAD_ESP;
				}

				public Boolean CANTIDAD_ESPIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_ESPIsKey(){
				    return false;
				}
				public Integer CANTIDAD_ESPLength(){
				    return 0;
				}
				public Integer CANTIDAD_ESPPrecision(){
				    return 0;
				}
				public String CANTIDAD_ESPDefault(){
				
					return "";
				
				}
				public String CANTIDAD_ESPComment(){
				
				    return "";
				
				}
				public String CANTIDAD_ESPPattern(){
				
					return "";
				
				}
				public String CANTIDAD_ESPOriginalDbColumnName(){
				
					return "CANTIDAD_ESP";
				
				}

				
			    public BigDecimal TPAGOS_ID;

				public BigDecimal getTPAGOS_ID () {
					return this.TPAGOS_ID;
				}

				public Boolean TPAGOS_IDIsNullable(){
				    return false;
				}
				public Boolean TPAGOS_IDIsKey(){
				    return false;
				}
				public Integer TPAGOS_IDLength(){
				    return 0;
				}
				public Integer TPAGOS_IDPrecision(){
				    return null;
				}
				public String TPAGOS_IDDefault(){
				
					return "";
				
				}
				public String TPAGOS_IDComment(){
				
				    return "";
				
				}
				public String TPAGOS_IDPattern(){
				
					return "";
				
				}
				public String TPAGOS_IDOriginalDbColumnName(){
				
					return "TPAGOS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CONCEPTOGENERAL_ID = (BigDecimal) dis.readObject();
					
						this.CONCEPTOESPECIFICO_ID = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_GRL = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_ESP = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CONCEPTOGENERAL_ID = (BigDecimal) dis.readObject();
					
						this.CONCEPTOESPECIFICO_ID = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_GRL = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_ESP = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONCEPTOGENERAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONCEPTOESPECIFICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_GRL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_ESP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONCEPTOGENERAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONCEPTOESPECIFICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_GRL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_ESP);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",CONCEPTOGENERAL_ID="+String.valueOf(CONCEPTOGENERAL_ID));
		sb.append(",CONCEPTOESPECIFICO_ID="+String.valueOf(CONCEPTOESPECIFICO_ID));
		sb.append(",CANTIDAD_GRL="+String.valueOf(CANTIDAD_GRL));
		sb.append(",CANTIDAD_ESP="+String.valueOf(CANTIDAD_ESP));
		sb.append(",TPAGOS_ID="+String.valueOf(TPAGOS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public java.util.Date FPERIODO;

				public java.util.Date getFPERIODO () {
					return this.FPERIODO;
				}

				public Boolean FPERIODOIsNullable(){
				    return true;
				}
				public Boolean FPERIODOIsKey(){
				    return false;
				}
				public Integer FPERIODOLength(){
				    return 0;
				}
				public Integer FPERIODOPrecision(){
				    return 0;
				}
				public String FPERIODODefault(){
				
					return null;
				
				}
				public String FPERIODOComment(){
				
				    return "";
				
				}
				public String FPERIODOPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FPERIODOOriginalDbColumnName(){
				
					return "FPERIODO";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public BigDecimal CONCEPTOGENERAL_ID;

				public BigDecimal getCONCEPTOGENERAL_ID () {
					return this.CONCEPTOGENERAL_ID;
				}

				public Boolean CONCEPTOGENERAL_IDIsNullable(){
				    return false;
				}
				public Boolean CONCEPTOGENERAL_IDIsKey(){
				    return false;
				}
				public Integer CONCEPTOGENERAL_IDLength(){
				    return 0;
				}
				public Integer CONCEPTOGENERAL_IDPrecision(){
				    return null;
				}
				public String CONCEPTOGENERAL_IDDefault(){
				
					return "";
				
				}
				public String CONCEPTOGENERAL_IDComment(){
				
				    return "";
				
				}
				public String CONCEPTOGENERAL_IDPattern(){
				
					return "";
				
				}
				public String CONCEPTOGENERAL_IDOriginalDbColumnName(){
				
					return "CONCEPTOGENERAL_ID";
				
				}

				
			    public BigDecimal CONCEPTOESPECIFICO_ID;

				public BigDecimal getCONCEPTOESPECIFICO_ID () {
					return this.CONCEPTOESPECIFICO_ID;
				}

				public Boolean CONCEPTOESPECIFICO_IDIsNullable(){
				    return false;
				}
				public Boolean CONCEPTOESPECIFICO_IDIsKey(){
				    return false;
				}
				public Integer CONCEPTOESPECIFICO_IDLength(){
				    return 0;
				}
				public Integer CONCEPTOESPECIFICO_IDPrecision(){
				    return null;
				}
				public String CONCEPTOESPECIFICO_IDDefault(){
				
					return "";
				
				}
				public String CONCEPTOESPECIFICO_IDComment(){
				
				    return "";
				
				}
				public String CONCEPTOESPECIFICO_IDPattern(){
				
					return "";
				
				}
				public String CONCEPTOESPECIFICO_IDOriginalDbColumnName(){
				
					return "CONCEPTOESPECIFICO_ID";
				
				}

				
			    public BigDecimal CANTIDAD_GRL;

				public BigDecimal getCANTIDAD_GRL () {
					return this.CANTIDAD_GRL;
				}

				public Boolean CANTIDAD_GRLIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_GRLIsKey(){
				    return false;
				}
				public Integer CANTIDAD_GRLLength(){
				    return 0;
				}
				public Integer CANTIDAD_GRLPrecision(){
				    return 0;
				}
				public String CANTIDAD_GRLDefault(){
				
					return "";
				
				}
				public String CANTIDAD_GRLComment(){
				
				    return "";
				
				}
				public String CANTIDAD_GRLPattern(){
				
					return "";
				
				}
				public String CANTIDAD_GRLOriginalDbColumnName(){
				
					return "CANTIDAD_GRL";
				
				}

				
			    public BigDecimal CANTIDAD_ESP;

				public BigDecimal getCANTIDAD_ESP () {
					return this.CANTIDAD_ESP;
				}

				public Boolean CANTIDAD_ESPIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_ESPIsKey(){
				    return false;
				}
				public Integer CANTIDAD_ESPLength(){
				    return 0;
				}
				public Integer CANTIDAD_ESPPrecision(){
				    return 0;
				}
				public String CANTIDAD_ESPDefault(){
				
					return "";
				
				}
				public String CANTIDAD_ESPComment(){
				
				    return "";
				
				}
				public String CANTIDAD_ESPPattern(){
				
					return "";
				
				}
				public String CANTIDAD_ESPOriginalDbColumnName(){
				
					return "CANTIDAD_ESP";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FPERIODO = readDate(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.CONCEPTOGENERAL_ID = (BigDecimal) dis.readObject();
					
						this.CONCEPTOESPECIFICO_ID = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_GRL = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_ESP = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FPERIODO = readDate(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.CONCEPTOGENERAL_ID = (BigDecimal) dis.readObject();
					
						this.CONCEPTOESPECIFICO_ID = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_GRL = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_ESP = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONCEPTOGENERAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONCEPTOESPECIFICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_GRL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_ESP);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONCEPTOGENERAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONCEPTOESPECIFICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_GRL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_ESP);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FPERIODO="+String.valueOf(FPERIODO));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",CONCEPTOGENERAL_ID="+String.valueOf(CONCEPTOGENERAL_ID));
		sb.append(",CONCEPTOESPECIFICO_ID="+String.valueOf(CONCEPTOESPECIFICO_ID));
		sb.append(",CANTIDAD_GRL="+String.valueOf(CANTIDAD_GRL));
		sb.append(",CANTIDAD_ESP="+String.valueOf(CANTIDAD_ESP));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_11Struct implements routines.system.IPersistableRow<after_tOracleInput_11Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public java.util.Date FPERIODO;

				public java.util.Date getFPERIODO () {
					return this.FPERIODO;
				}

				public Boolean FPERIODOIsNullable(){
				    return true;
				}
				public Boolean FPERIODOIsKey(){
				    return false;
				}
				public Integer FPERIODOLength(){
				    return 0;
				}
				public Integer FPERIODOPrecision(){
				    return 0;
				}
				public String FPERIODODefault(){
				
					return null;
				
				}
				public String FPERIODOComment(){
				
				    return "";
				
				}
				public String FPERIODOPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FPERIODOOriginalDbColumnName(){
				
					return "FPERIODO";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public BigDecimal CONCEPTOGENERAL_ID;

				public BigDecimal getCONCEPTOGENERAL_ID () {
					return this.CONCEPTOGENERAL_ID;
				}

				public Boolean CONCEPTOGENERAL_IDIsNullable(){
				    return false;
				}
				public Boolean CONCEPTOGENERAL_IDIsKey(){
				    return false;
				}
				public Integer CONCEPTOGENERAL_IDLength(){
				    return 0;
				}
				public Integer CONCEPTOGENERAL_IDPrecision(){
				    return null;
				}
				public String CONCEPTOGENERAL_IDDefault(){
				
					return "";
				
				}
				public String CONCEPTOGENERAL_IDComment(){
				
				    return "";
				
				}
				public String CONCEPTOGENERAL_IDPattern(){
				
					return "";
				
				}
				public String CONCEPTOGENERAL_IDOriginalDbColumnName(){
				
					return "CONCEPTOGENERAL_ID";
				
				}

				
			    public BigDecimal CONCEPTOESPECIFICO_ID;

				public BigDecimal getCONCEPTOESPECIFICO_ID () {
					return this.CONCEPTOESPECIFICO_ID;
				}

				public Boolean CONCEPTOESPECIFICO_IDIsNullable(){
				    return false;
				}
				public Boolean CONCEPTOESPECIFICO_IDIsKey(){
				    return false;
				}
				public Integer CONCEPTOESPECIFICO_IDLength(){
				    return 0;
				}
				public Integer CONCEPTOESPECIFICO_IDPrecision(){
				    return null;
				}
				public String CONCEPTOESPECIFICO_IDDefault(){
				
					return "";
				
				}
				public String CONCEPTOESPECIFICO_IDComment(){
				
				    return "";
				
				}
				public String CONCEPTOESPECIFICO_IDPattern(){
				
					return "";
				
				}
				public String CONCEPTOESPECIFICO_IDOriginalDbColumnName(){
				
					return "CONCEPTOESPECIFICO_ID";
				
				}

				
			    public BigDecimal CANTIDAD_GRL;

				public BigDecimal getCANTIDAD_GRL () {
					return this.CANTIDAD_GRL;
				}

				public Boolean CANTIDAD_GRLIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_GRLIsKey(){
				    return false;
				}
				public Integer CANTIDAD_GRLLength(){
				    return 0;
				}
				public Integer CANTIDAD_GRLPrecision(){
				    return 0;
				}
				public String CANTIDAD_GRLDefault(){
				
					return "";
				
				}
				public String CANTIDAD_GRLComment(){
				
				    return "";
				
				}
				public String CANTIDAD_GRLPattern(){
				
					return "";
				
				}
				public String CANTIDAD_GRLOriginalDbColumnName(){
				
					return "CANTIDAD_GRL";
				
				}

				
			    public BigDecimal CANTIDAD_ESP;

				public BigDecimal getCANTIDAD_ESP () {
					return this.CANTIDAD_ESP;
				}

				public Boolean CANTIDAD_ESPIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_ESPIsKey(){
				    return false;
				}
				public Integer CANTIDAD_ESPLength(){
				    return 0;
				}
				public Integer CANTIDAD_ESPPrecision(){
				    return 0;
				}
				public String CANTIDAD_ESPDefault(){
				
					return "";
				
				}
				public String CANTIDAD_ESPComment(){
				
				    return "";
				
				}
				public String CANTIDAD_ESPPattern(){
				
					return "";
				
				}
				public String CANTIDAD_ESPOriginalDbColumnName(){
				
					return "CANTIDAD_ESP";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FPERIODO = readDate(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.CONCEPTOGENERAL_ID = (BigDecimal) dis.readObject();
					
						this.CONCEPTOESPECIFICO_ID = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_GRL = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_ESP = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FPERIODO = readDate(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.CONCEPTOGENERAL_ID = (BigDecimal) dis.readObject();
					
						this.CONCEPTOESPECIFICO_ID = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_GRL = (BigDecimal) dis.readObject();
					
						this.CANTIDAD_ESP = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONCEPTOGENERAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONCEPTOESPECIFICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_GRL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_ESP);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONCEPTOGENERAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONCEPTOESPECIFICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_GRL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_ESP);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FPERIODO="+String.valueOf(FPERIODO));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",CONCEPTOGENERAL_ID="+String.valueOf(CONCEPTOGENERAL_ID));
		sb.append(",CONCEPTOESPECIFICO_ID="+String.valueOf(CONCEPTOESPECIFICO_ID));
		sb.append(",CANTIDAD_GRL="+String.valueOf(CANTIDAD_GRL));
		sb.append(",CANTIDAD_ESP="+String.valueOf(CANTIDAD_ESP));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_11Process(globalMap);
		tHashInput_12Process(globalMap);

		row28Struct row28 = new row28Struct();
Elimina6Struct Elimina6 = new Elimina6Struct();
Inserta7Struct Inserta7 = new Inserta7Struct();





	
	/**
	 * [tOracleOutput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_16", false);
		start_Hash.put("tOracleOutput_16", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Elimina6");
					}
				
		int tos_count_tOracleOutput_16 = 0;
		






        int deleteKeyCount_tOracleOutput_16 = 6;
        if(deleteKeyCount_tOracleOutput_16 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_16 = 0;
    int nb_line_update_tOracleOutput_16 = 0;
    int nb_line_inserted_tOracleOutput_16 = 0;
    int nb_line_deleted_tOracleOutput_16 = 0;
    int nb_line_rejected_tOracleOutput_16 = 0;

    int tmp_batchUpdateCount_tOracleOutput_16 = 0;

    int deletedCount_tOracleOutput_16=0;
    int updatedCount_tOracleOutput_16=0;
    int insertedCount_tOracleOutput_16=0;
    int rowsToCommitCount_tOracleOutput_16=0;
    int rejectedCount_tOracleOutput_16=0;

    boolean whetherReject_tOracleOutput_16 = false;

    java.sql.Connection conn_tOracleOutput_16 = null;

    //optional table
    String dbschema_tOracleOutput_16 = null;
    String tableName_tOracleOutput_16 = null;
                    String driverClass_tOracleOutput_16 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_16);
                String url_tOracleOutput_16 = null;
                    url_tOracleOutput_16 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_16 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_16 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_16 = decryptedPassword_tOracleOutput_16;
                dbschema_tOracleOutput_16 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_16 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_16.put("user",dbUser_tOracleOutput_16);
                    atnParamsPrope_tOracleOutput_16.put("password",dbPwd_tOracleOutput_16);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_16.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_16 = java.sql.DriverManager.getConnection(url_tOracleOutput_16, atnParamsPrope_tOracleOutput_16);
        resourceMap.put("conn_tOracleOutput_16", conn_tOracleOutput_16);
            conn_tOracleOutput_16.setAutoCommit(false);
            int commitEvery_tOracleOutput_16 = 1000;
            int commitCounter_tOracleOutput_16 = 0;
        int batchSize_tOracleOutput_16 = 1000;
        int batchSizeCounter_tOracleOutput_16=0;
        int count_tOracleOutput_16=0;

        if(dbschema_tOracleOutput_16 == null || dbschema_tOracleOutput_16.trim().length() == 0) {
            tableName_tOracleOutput_16 = ("BACM_CAUSALESGLOSAS");
        } else {
            tableName_tOracleOutput_16 = dbschema_tOracleOutput_16 + "." + ("BACM_CAUSALESGLOSAS");
        }
                String delete_tOracleOutput_16 = "DELETE FROM " + tableName_tOracleOutput_16 + " WHERE UORG_ID = ? AND PRESTADOR_ID = ? AND CONCEPTOGENERAL_ID = ? AND CONCEPTOESPECIFICO_ID = ? AND TPAGOS_ID = ? AND TIEMPOS_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_16 = conn_tOracleOutput_16.prepareStatement(delete_tOracleOutput_16);
                resourceMap.put("pstmt_tOracleOutput_16", pstmt_tOracleOutput_16);





 



/**
 * [tOracleOutput_16 begin ] stop
 */




	
	/**
	 * [tOracleOutput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_17", false);
		start_Hash.put("tOracleOutput_17", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta7");
					}
				
		int tos_count_tOracleOutput_17 = 0;
		






    
    int nb_line_tOracleOutput_17 = 0;
    int nb_line_update_tOracleOutput_17 = 0;
    int nb_line_inserted_tOracleOutput_17 = 0;
    int nb_line_deleted_tOracleOutput_17 = 0;
    int nb_line_rejected_tOracleOutput_17 = 0;

    int tmp_batchUpdateCount_tOracleOutput_17 = 0;

    int deletedCount_tOracleOutput_17=0;
    int updatedCount_tOracleOutput_17=0;
    int insertedCount_tOracleOutput_17=0;
    int rowsToCommitCount_tOracleOutput_17=0;
    int rejectedCount_tOracleOutput_17=0;

    boolean whetherReject_tOracleOutput_17 = false;

    java.sql.Connection conn_tOracleOutput_17 = null;

    //optional table
    String dbschema_tOracleOutput_17 = null;
    String tableName_tOracleOutput_17 = null;
                    String driverClass_tOracleOutput_17 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_17);
                String url_tOracleOutput_17 = null;
                    url_tOracleOutput_17 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_17 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_17 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_17 = decryptedPassword_tOracleOutput_17;
                dbschema_tOracleOutput_17 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_17 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_17.put("user",dbUser_tOracleOutput_17);
                    atnParamsPrope_tOracleOutput_17.put("password",dbPwd_tOracleOutput_17);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_17.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_17 = java.sql.DriverManager.getConnection(url_tOracleOutput_17, atnParamsPrope_tOracleOutput_17);
        resourceMap.put("conn_tOracleOutput_17", conn_tOracleOutput_17);
            conn_tOracleOutput_17.setAutoCommit(false);
            int commitEvery_tOracleOutput_17 = 1000;
            int commitCounter_tOracleOutput_17 = 0;
        int batchSize_tOracleOutput_17 = 1000;
        int batchSizeCounter_tOracleOutput_17=0;
        int count_tOracleOutput_17=0;

        if(dbschema_tOracleOutput_17 == null || dbschema_tOracleOutput_17.trim().length() == 0) {
            tableName_tOracleOutput_17 = ("BACM_CAUSALESGLOSAS");
        } else {
            tableName_tOracleOutput_17 = dbschema_tOracleOutput_17 + "." + ("BACM_CAUSALESGLOSAS");
        }
                String insert_tOracleOutput_17 = "INSERT INTO " + tableName_tOracleOutput_17 + " (UORG_ID,PRESTADOR_ID,CONCEPTOGENERAL_ID,CONCEPTOESPECIFICO_ID,CANTIDAD_GRL,CANTIDAD_ESP,TPAGOS_ID,TIEMPOS_ID) VALUES (?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_17 = conn_tOracleOutput_17.prepareStatement(insert_tOracleOutput_17);
                        resourceMap.put("pstmt_tOracleOutput_17", pstmt_tOracleOutput_17);





 



/**
 * [tOracleOutput_17 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct> tHash_Lookup_row29 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct>) 
					globalMap.get( "tHash_Lookup_row29" ))
					;					
					
	

row29Struct row29HashKey = new row29Struct();
row29Struct row29Default = new row29Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) 
					globalMap.get( "tHash_Lookup_row30" ))
					;					
					
	

row30Struct row30HashKey = new row30Struct();
row30Struct row30Default = new row30Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
Elimina6Struct Elimina6_tmp = new Elimina6Struct();
Inserta7Struct Inserta7_tmp = new Inserta7Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tOracleInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_11", false);
		start_Hash.put("tOracleInput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_11";
	
	
		int tos_count_tOracleInput_11 = 0;
		
	


	
		    int nb_line_tOracleInput_11 = 0;
		    java.sql.Connection conn_tOracleInput_11 = null;
				conn_tOracleInput_11 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_11 = false;
				boolean isConnectionWrapped_tOracleInput_11 = !(conn_tOracleInput_11 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_11.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_11 = null;
                if (isConnectionWrapped_tOracleInput_11) {
					unwrappedOraConn_tOracleInput_11 = conn_tOracleInput_11.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_11 != null) {
                        isTimeZoneNull_tOracleInput_11 = (unwrappedOraConn_tOracleInput_11.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_11 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_11).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_11) {
					java.sql.Statement stmtGetTZ_tOracleInput_11 = conn_tOracleInput_11.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_11 = stmtGetTZ_tOracleInput_11.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_11 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_11.next()) {
						sessionTimezone_tOracleInput_11 = rsGetTZ_tOracleInput_11.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_11 && unwrappedOraConn_tOracleInput_11 != null) {
                        unwrappedOraConn_tOracleInput_11.setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_11).setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_11 = conn_tOracleInput_11.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_11.setFetchSize(1000);


		    String dbquery_tOracleInput_11 = "SELECT    FPERIODO\n        , UORG_ID\n        , PRESTADOR_ID\n        , CONTRATOS_ID\n        , CLASE\n        , CONCE"
+"PTOGENERAL_ID\n        , CONCEPTOESPECIFICO_ID         \n        , SUM ( CANTIDAD_ESP ) OVER ( PARTITION BY    FPERIODO"
+"\n                                                , UORG_ID\n                                                , PRESTADOR_"
+"ID\n                                                , CONTRATOS_ID\n                                                , CL"
+"ASE\n                                                , CONCEPTOGENERAL_ID\n                                    ) AS CANT"
+"IDAD_GRL\n        , CANTIDAD_ESP\nFROM (\n    SELECT    COND.FPERIODO\n            , COND.UORG_ID\n            , COND.PR"
+"ESTADOR_ID\n            , COND.CONTRATOS_ID\n            , COND.CLASE\n            , COND.CONCEPTOGENERAL_ID\n          "
+"  , COND.CONCEPTOESPECIFICO_ID\n            , COUNT ( COND.CONCEPTOESPECIFICO_ID ) AS CANTIDAD_ESP\n    FROM ACM_ETAPASN"
+"ORMATIVIDAD EN\n    INNER JOIN ACM_HAUDITORIAS HA ON EN.ID = HA.ETAPASNORMATIVIDAD_ID     \n    INNER JOIN ACM_ESTAUDITO"
+"RIAS ESA ON ESA.ID = HA.ESTAUDITORIA_ID\n    INNER JOIN ACM_RECEPCION RE ON RE.ID = HA.RECEPCION_ID\n    INNER JOIN ACM_"
+"FACTURA FA ON FA.RECEPCION_ID = RE.ID\n    INNER JOIN ACM_GLOSASCAUSADAS GC ON GC.FACTURA_ID = FA.ID \n    INNER JOIN AC"
+"M_CAUSALGLOSAS CG ON CG.ID = GC.CAUSALGLOSAS_ID\n    INNER JOIN ( \n        SELECT    FPERIODO\n                , PRESTA"
+"DOR_ID\n                , UORG_ID\n                , CONTRATOS_ID\n                , CLASE\n                , CONCEPTOGE"
+"NERAL_ID\n                , CONCEPTOESPECIFICO_ID\n        FROM (\n            SELECT    TRUNC ( FA.FECHA , 'MONTH') AS "
+"FPERIODO\n                    , RE.PRESTADOR_ID \n                    , RE.UORG_ID             \n                    , C"
+"OALESCE( RE.CONTRATOS_ID, RE.MEDCONTRATOS_ID, 0 ) AS CONTRATOS_ID\n                    , CASE  \n                       "
+" WHEN RE.CONTRATOS_ID IS NOT NULL\n                        THEN 1\n                        WHEN RE.MEDCONTRATOS_ID IS NO"
+"T NULL \n                        THEN 2\n                        ELSE 3\n                      END  AS CLASE \n         "
+"           , CG.CONCEPTOGENERAL_ID\n                    , CG.CONCEPTOESPECIFICO_ID\n                    , ROW_NUMBER() O"
+"VER ( PARTITION BY    TRUNC ( FA.FECHA , 'MONTH') \n                                                        , RE.PRESTAD"
+"OR_ID \n                                                        , RE.UORG_ID             \n                             "
+"                           , COALESCE( RE.CONTRATOS_ID, RE.MEDCONTRATOS_ID, 0 )\n                                       "
+"                 , CASE  \n                                                            WHEN RE.CONTRATOS_ID IS NOT NULL"
+"\n                                                            THEN 1\n                                                   "
+"         WHEN RE.MEDCONTRATOS_ID IS NOT NULL \n                                                            THEN 2\n     "
+"                                                       ELSE 3\n                                                         "
+" END\n                                                        , CG.CONCEPTOGENERAL_ID\n                                 "
+"                       , CG.CONCEPTOESPECIFICO_ID\n                                          ORDER BY RE.ID ) R\n       "
+"     FROM ACM_ETAPASNORMATIVIDAD EN\n            INNER JOIN ACM_HAUDITORIAS HA ON EN.ID = HA.ETAPASNORMATIVIDAD_ID\n			I"
+"NNER JOIN ACM_ESTAUDITORIAS ESA ON ESA.ID = HA.ESTAUDITORIA_ID      \n            INNER JOIN ACM_RECEPCION RE ON RE.ID ="
+" HA.RECEPCION_ID\n            INNER JOIN ACM_FACTURA FA ON FA.RECEPCION_ID = RE.ID\n            INNER JOIN ACM_GLOSASCAU"
+"SADAS GC ON GC.FACTURA_ID = FA.ID \n            INNER JOIN ACM_CAUSALGLOSAS CG ON CG.ID = GC.CAUSALGLOSAS_ID\n          "
+"  WHERE EN.CODIGO = 1        \n              AND HA.ESTREGISTRO_ID = 1\n              AND RE.ESTREGISTRO_ID = 1\n       "
+"       AND FA.ESTREGISTRO_ID = 1\n              AND GC.ESTREGISTRO_ID = 1\n              AND CG.ESTREGISTRO_ID = 1\n			 "
+"AND ESA.NOMBRE = 'Finalizada'\n              AND ( HA.EJECUCION = 1  )\n              "+context.CONDICION+"\n        ) WHERE R = 1  \n    ) COND ON COND.FPERIODO = TRUNC ( FA.FECHA , 'MONTH')\n           AND COND.PRESTADOR_ID "
+"= RE.PRESTADOR_ID\n           AND COND.UORG_ID = RE.UORG_ID\n           AND COND.CONTRATOS_ID = COALESCE( RE.CONTRATOS_I"
+"D, RE.MEDCONTRATOS_ID, 0 )\n           AND COND.CLASE = DECODE ( RE.CONTRATOS_ID, NULL, DECODE (RE.MEDCONTRATOS_ID, NULL"
+", 3, 2),1 )\n           AND COND.CONCEPTOGENERAL_ID = CG.CONCEPTOGENERAL_ID\n           AND COND.CONCEPTOESPECIFICO_ID ="
+" CG.CONCEPTOESPECIFICO_ID\n    WHERE HA.ESTREGISTRO_ID = 1\n      AND RE.ESTREGISTRO_ID = 1  \n      AND EN.CODIGO = 1\n"
+"      AND RE.ESTREGISTRO_ID = 1\n      AND FA.ESTREGISTRO_ID = 1\n      AND GC.ESTREGISTRO_ID = 1\n      AND CG.ESTREGIS"
+"TRO_ID = 1\n      AND ( HA.EJECUCION = 1  )\n      AND HA.FFETAPA IS NOT NULL \n      AND ESA.NOMBRE = 'Finalizada'\n   "
+" GROUP BY  COND.FPERIODO\n            , COND.UORG_ID\n            , COND.PRESTADOR_ID\n            , COND.CONTRATOS_ID\n"
+"            , COND.CLASE\n            , COND.CONCEPTOGENERAL_ID\n            , COND.CONCEPTOESPECIFICO_ID\n)";
		    

		    globalMap.put("tOracleInput_11_QUERY",dbquery_tOracleInput_11);

		    java.sql.ResultSet rs_tOracleInput_11 = null;

		    try {
		    	rs_tOracleInput_11 = stmt_tOracleInput_11.executeQuery(dbquery_tOracleInput_11);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_11 = rs_tOracleInput_11.getMetaData();
		    	int colQtyInRs_tOracleInput_11 = rsmd_tOracleInput_11.getColumnCount();

		    String tmpContent_tOracleInput_11 = null;
		    
		    
		    while (rs_tOracleInput_11.next()) {
		        nb_line_tOracleInput_11++;
		        
							if(colQtyInRs_tOracleInput_11 < 1) {
								row28.FPERIODO = null;
							} else {
										
			row28.FPERIODO = routines.system.JDBCUtil.getDate(rs_tOracleInput_11, 1);
		                    }
							if(colQtyInRs_tOracleInput_11 < 2) {
								row28.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(2) != null) {
						row28.UORG_ID = rs_tOracleInput_11.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 3) {
								row28.PRESTADOR_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(3) != null) {
						row28.PRESTADOR_ID = rs_tOracleInput_11.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 4) {
								row28.CONTRATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(4) != null) {
						row28.CONTRATOS_ID = rs_tOracleInput_11.getBigDecimal(4);
					} else {
				
						row28.CONTRATOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 5) {
								row28.CLASE = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(5) != null) {
						row28.CLASE = rs_tOracleInput_11.getBigDecimal(5);
					} else {
				
						row28.CLASE = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 6) {
								row28.CONCEPTOGENERAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(6) != null) {
						row28.CONCEPTOGENERAL_ID = rs_tOracleInput_11.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 7) {
								row28.CONCEPTOESPECIFICO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(7) != null) {
						row28.CONCEPTOESPECIFICO_ID = rs_tOracleInput_11.getBigDecimal(7);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 8) {
								row28.CANTIDAD_GRL = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(8) != null) {
						row28.CANTIDAD_GRL = rs_tOracleInput_11.getBigDecimal(8);
					} else {
				
						row28.CANTIDAD_GRL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 9) {
								row28.CANTIDAD_ESP = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(9) != null) {
						row28.CANTIDAD_ESP = rs_tOracleInput_11.getBigDecimal(9);
					} else {
				
						row28.CANTIDAD_ESP = null;
					}
		                    }
					




 



/**
 * [tOracleInput_11 begin ] stop
 */
	
	/**
	 * [tOracleInput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 


	tos_count_tOracleInput_11++;

/**
 * [tOracleInput_11 main ] stop
 */
	
	/**
	 * [tOracleInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
						row29Struct row29 = null;
					
						row30Struct row30 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_8 = false;
		boolean mainRowRejected_tMap_8 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row29" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow29 = false;
       		  	    	
       		  	    	
 							row29Struct row29ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		    row29HashKey.CONTRATOS_ID = row28.CONTRATOS_ID ;
                        		    		
                        		    		    row29HashKey.CLASE = row28.CLASE ;
                        		    		

								
		                        	row29HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row29.lookup( row29HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row29.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row29 != null && tHash_Lookup_row29.getCount(row29HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row29' and it contains more one result from keys :  row29.CONTRATOS_ID = '" + row29HashKey.CONTRATOS_ID + "', row29.CLASE = '" + row29HashKey.CLASE + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row29Struct fromLookup_row29 = null;
							row29 = row29Default;
										 
							
								 
							
							
								if (tHash_Lookup_row29 !=null && tHash_Lookup_row29.hasNext()) { // G 099
								
							
								
								fromLookup_row29 = tHash_Lookup_row29.next();

							
							
								} // G 099
							
							

							if(fromLookup_row29 != null) {
								row29 = fromLookup_row29;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row30" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow30 = false;
       		  	    	
       		  	    	
 							row30Struct row30ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		    row30HashKey.FECHA = row28.FPERIODO  == null ? null : new java.util.Date((row28.FPERIODO ).getTime());
                        		    		

								
		                        	row30HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row30.lookup( row30HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row30.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row30 != null && tHash_Lookup_row30.getCount(row30HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row30' and it contains more one result from keys :  row30.FECHA = '" + row30HashKey.FECHA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row30Struct fromLookup_row30 = null;
							row30 = row30Default;
										 
							
								 
							
							
								if (tHash_Lookup_row30 !=null && tHash_Lookup_row30.hasNext()) { // G 099
								
							
								
								fromLookup_row30 = tHash_Lookup_row30.next();

							
							
								} // G 099
							
							

							if(fromLookup_row30 != null) {
								row30 = fromLookup_row30;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

Elimina6 = null;
Inserta7 = null;

if(!rejectedInnerJoin_tMap_8 ) {

// # Output table : 'Elimina6'
Elimina6_tmp.UORG_ID = row28.UORG_ID ;
Elimina6_tmp.PRESTADOR_ID = row28.PRESTADOR_ID ;
Elimina6_tmp.CONCEPTOGENERAL_ID = row28.CONCEPTOGENERAL_ID ;
Elimina6_tmp.CONCEPTOESPECIFICO_ID = row28.CONCEPTOESPECIFICO_ID ;
Elimina6_tmp.TPAGOS_ID = row29.ID ;
Elimina6_tmp.TIEMPOS_ID = row30.ID ;
Elimina6 = Elimina6_tmp;

// # Output table : 'Inserta7'
Inserta7_tmp.UORG_ID = row28.UORG_ID ;
Inserta7_tmp.PRESTADOR_ID = row28.PRESTADOR_ID ;
Inserta7_tmp.CONCEPTOGENERAL_ID = row28.CONCEPTOGENERAL_ID ;
Inserta7_tmp.CONCEPTOESPECIFICO_ID = row28.CONCEPTOESPECIFICO_ID ;
Inserta7_tmp.CANTIDAD_GRL = row28.CANTIDAD_GRL ;
Inserta7_tmp.CANTIDAD_ESP = row28.CANTIDAD_ESP  ;
Inserta7_tmp.TPAGOS_ID = row29.ID ;
Inserta7_tmp.TIEMPOS_ID = row30.ID ;
Inserta7 = Inserta7_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "Elimina6"
if(Elimina6 != null) { 



	
	/**
	 * [tOracleOutput_16 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Elimina6"
						
						);
					}
					



        whetherReject_tOracleOutput_16 = false;
                    pstmt_tOracleOutput_16.setBigDecimal(1, Elimina6.UORG_ID);

                    pstmt_tOracleOutput_16.setBigDecimal(2, Elimina6.PRESTADOR_ID);

                    pstmt_tOracleOutput_16.setBigDecimal(3, Elimina6.CONCEPTOGENERAL_ID);

                    pstmt_tOracleOutput_16.setBigDecimal(4, Elimina6.CONCEPTOESPECIFICO_ID);

                    pstmt_tOracleOutput_16.setBigDecimal(5, Elimina6.TPAGOS_ID);

                    pstmt_tOracleOutput_16.setBigDecimal(6, Elimina6.TIEMPOS_ID);

                pstmt_tOracleOutput_16.addBatch();
                nb_line_tOracleOutput_16++;
                batchSizeCounter_tOracleOutput_16++;
            if (batchSize_tOracleOutput_16 > 0 &&  batchSize_tOracleOutput_16 <= batchSizeCounter_tOracleOutput_16) {
                try {
                    pstmt_tOracleOutput_16.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_16){
globalMap.put("tOracleOutput_16_ERROR_MESSAGE",e_tOracleOutput_16.getMessage());
			        java.sql.SQLException ne_tOracleOutput_16 = e_tOracleOutput_16.getNextException(),sqle_tOracleOutput_16=null;
			    	String errormessage_tOracleOutput_16;
					if (ne_tOracleOutput_16 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_16 = new java.sql.SQLException(e_tOracleOutput_16.getMessage() + "\ncaused by: " + ne_tOracleOutput_16.getMessage(), ne_tOracleOutput_16.getSQLState(), ne_tOracleOutput_16.getErrorCode(), ne_tOracleOutput_16);
						errormessage_tOracleOutput_16 = sqle_tOracleOutput_16.getMessage();
					}else{
						errormessage_tOracleOutput_16 = e_tOracleOutput_16.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_16);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_16 = pstmt_tOracleOutput_16.getUpdateCount();
                    deletedCount_tOracleOutput_16
                += (tmp_batchUpdateCount_tOracleOutput_16!=-1?tmp_batchUpdateCount_tOracleOutput_16:0);
                rowsToCommitCount_tOracleOutput_16 += (tmp_batchUpdateCount_tOracleOutput_16!=-1?tmp_batchUpdateCount_tOracleOutput_16:0);
                batchSizeCounter_tOracleOutput_16 = 0;
            }
                commitCounter_tOracleOutput_16++;
                if(commitEvery_tOracleOutput_16 <= commitCounter_tOracleOutput_16) {
                    if(batchSizeCounter_tOracleOutput_16 > 0) {
                        try {
                            pstmt_tOracleOutput_16.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_16){
globalMap.put("tOracleOutput_16_ERROR_MESSAGE",e_tOracleOutput_16.getMessage());
					        java.sql.SQLException ne_tOracleOutput_16 = e_tOracleOutput_16.getNextException(),sqle_tOracleOutput_16=null;
					    	String errormessage_tOracleOutput_16;
							if (ne_tOracleOutput_16 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_16 = new java.sql.SQLException(e_tOracleOutput_16.getMessage() + "\ncaused by: " + ne_tOracleOutput_16.getMessage(), ne_tOracleOutput_16.getSQLState(), ne_tOracleOutput_16.getErrorCode(), ne_tOracleOutput_16);
								errormessage_tOracleOutput_16 = sqle_tOracleOutput_16.getMessage();
							}else{
								errormessage_tOracleOutput_16 = e_tOracleOutput_16.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_16);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_16 = pstmt_tOracleOutput_16.getUpdateCount();
                            deletedCount_tOracleOutput_16
                        += (tmp_batchUpdateCount_tOracleOutput_16!=-1?tmp_batchUpdateCount_tOracleOutput_16:0);
                        rowsToCommitCount_tOracleOutput_16 += (tmp_batchUpdateCount_tOracleOutput_16!=-1?tmp_batchUpdateCount_tOracleOutput_16:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_16 != 0){
                    	
                    }
                    conn_tOracleOutput_16.commit();
                    if(rowsToCommitCount_tOracleOutput_16 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_16 = 0;
                    }
                    commitCounter_tOracleOutput_16=0;
                    	batchSizeCounter_tOracleOutput_16=0;
                }

 


	tos_count_tOracleOutput_16++;

/**
 * [tOracleOutput_16 main ] stop
 */
	
	/**
	 * [tOracleOutput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	

 



/**
 * [tOracleOutput_16 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	

 



/**
 * [tOracleOutput_16 process_data_end ] stop
 */

} // End of branch "Elimina6"




// Start of branch "Inserta7"
if(Inserta7 != null) { 



	
	/**
	 * [tOracleOutput_17 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta7"
						
						);
					}
					



        whetherReject_tOracleOutput_17 = false;
                        pstmt_tOracleOutput_17.setBigDecimal(1, Inserta7.UORG_ID);

                        pstmt_tOracleOutput_17.setBigDecimal(2, Inserta7.PRESTADOR_ID);

                        pstmt_tOracleOutput_17.setBigDecimal(3, Inserta7.CONCEPTOGENERAL_ID);

                        pstmt_tOracleOutput_17.setBigDecimal(4, Inserta7.CONCEPTOESPECIFICO_ID);

                        pstmt_tOracleOutput_17.setBigDecimal(5, Inserta7.CANTIDAD_GRL);

                        pstmt_tOracleOutput_17.setBigDecimal(6, Inserta7.CANTIDAD_ESP);

                        pstmt_tOracleOutput_17.setBigDecimal(7, Inserta7.TPAGOS_ID);

                        pstmt_tOracleOutput_17.setBigDecimal(8, Inserta7.TIEMPOS_ID);

                pstmt_tOracleOutput_17.addBatch();
                nb_line_tOracleOutput_17++;
                batchSizeCounter_tOracleOutput_17++;
            if (batchSize_tOracleOutput_17 > 0 &&  batchSize_tOracleOutput_17 <= batchSizeCounter_tOracleOutput_17) {
                try {
                    pstmt_tOracleOutput_17.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_17){
globalMap.put("tOracleOutput_17_ERROR_MESSAGE",e_tOracleOutput_17.getMessage());
			        java.sql.SQLException ne_tOracleOutput_17 = e_tOracleOutput_17.getNextException(),sqle_tOracleOutput_17=null;
			    	String errormessage_tOracleOutput_17;
					if (ne_tOracleOutput_17 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_17 = new java.sql.SQLException(e_tOracleOutput_17.getMessage() + "\ncaused by: " + ne_tOracleOutput_17.getMessage(), ne_tOracleOutput_17.getSQLState(), ne_tOracleOutput_17.getErrorCode(), ne_tOracleOutput_17);
						errormessage_tOracleOutput_17 = sqle_tOracleOutput_17.getMessage();
					}else{
						errormessage_tOracleOutput_17 = e_tOracleOutput_17.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_17);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_17 = pstmt_tOracleOutput_17.getUpdateCount();
                    insertedCount_tOracleOutput_17
                += (tmp_batchUpdateCount_tOracleOutput_17!=-1?tmp_batchUpdateCount_tOracleOutput_17:0);
                rowsToCommitCount_tOracleOutput_17 += (tmp_batchUpdateCount_tOracleOutput_17!=-1?tmp_batchUpdateCount_tOracleOutput_17:0);
                batchSizeCounter_tOracleOutput_17 = 0;
            }
                commitCounter_tOracleOutput_17++;
                if(commitEvery_tOracleOutput_17 <= commitCounter_tOracleOutput_17) {
                    if(batchSizeCounter_tOracleOutput_17 > 0) {
                        try {
                            pstmt_tOracleOutput_17.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_17){
globalMap.put("tOracleOutput_17_ERROR_MESSAGE",e_tOracleOutput_17.getMessage());
					        java.sql.SQLException ne_tOracleOutput_17 = e_tOracleOutput_17.getNextException(),sqle_tOracleOutput_17=null;
					    	String errormessage_tOracleOutput_17;
							if (ne_tOracleOutput_17 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_17 = new java.sql.SQLException(e_tOracleOutput_17.getMessage() + "\ncaused by: " + ne_tOracleOutput_17.getMessage(), ne_tOracleOutput_17.getSQLState(), ne_tOracleOutput_17.getErrorCode(), ne_tOracleOutput_17);
								errormessage_tOracleOutput_17 = sqle_tOracleOutput_17.getMessage();
							}else{
								errormessage_tOracleOutput_17 = e_tOracleOutput_17.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_17);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_17 = pstmt_tOracleOutput_17.getUpdateCount();
                            insertedCount_tOracleOutput_17
                        += (tmp_batchUpdateCount_tOracleOutput_17!=-1?tmp_batchUpdateCount_tOracleOutput_17:0);
                        rowsToCommitCount_tOracleOutput_17 += (tmp_batchUpdateCount_tOracleOutput_17!=-1?tmp_batchUpdateCount_tOracleOutput_17:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_17 != 0){
                    	
                    }
                    conn_tOracleOutput_17.commit();
                    if(rowsToCommitCount_tOracleOutput_17 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_17 = 0;
                    }
                    commitCounter_tOracleOutput_17=0;
                    	batchSizeCounter_tOracleOutput_17=0;
                }

 


	tos_count_tOracleOutput_17++;

/**
 * [tOracleOutput_17 main ] stop
 */
	
	/**
	 * [tOracleOutput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	

 



/**
 * [tOracleOutput_17 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	

 



/**
 * [tOracleOutput_17 process_data_end ] stop
 */

} // End of branch "Inserta7"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

}
}finally{
	if (rs_tOracleInput_11 != null) {
		rs_tOracleInput_11.close();
	}
	if (stmt_tOracleInput_11 != null) {
		stmt_tOracleInput_11.close();
	}
}

globalMap.put("tOracleInput_11_NB_LINE",nb_line_tOracleInput_11);
 

ok_Hash.put("tOracleInput_11", true);
end_Hash.put("tOracleInput_11", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk16", 0, "ok");
				}
				tJava_9Process(globalMap);



/**
 * [tOracleInput_11 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row29 != null) {
						tHash_Lookup_row29.endGet();
					}
					globalMap.remove( "tHash_Lookup_row29" );

					
					
				
					if(tHash_Lookup_row30 != null) {
						tHash_Lookup_row30.endGet();
					}
					globalMap.remove( "tHash_Lookup_row30" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tOracleOutput_16 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_16 > 0) {
            try {
            	if (pstmt_tOracleOutput_16 != null) {
					
					pstmt_tOracleOutput_16.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_16){
globalMap.put("tOracleOutput_16_ERROR_MESSAGE",e_tOracleOutput_16.getMessage());
		        java.sql.SQLException ne_tOracleOutput_16 = e_tOracleOutput_16.getNextException(),sqle_tOracleOutput_16=null;
		    	String errormessage_tOracleOutput_16;
				if (ne_tOracleOutput_16 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_16 = new java.sql.SQLException(e_tOracleOutput_16.getMessage() + "\ncaused by: " + ne_tOracleOutput_16.getMessage(), ne_tOracleOutput_16.getSQLState(), ne_tOracleOutput_16.getErrorCode(), ne_tOracleOutput_16);
					errormessage_tOracleOutput_16 = sqle_tOracleOutput_16.getMessage();
				}else{
					errormessage_tOracleOutput_16 = e_tOracleOutput_16.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_16);
            	
        	}
        	if (pstmt_tOracleOutput_16 != null) {
            	tmp_batchUpdateCount_tOracleOutput_16 = pstmt_tOracleOutput_16.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_16
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_16!=-1?tmp_batchUpdateCount_tOracleOutput_16:0);
				rowsToCommitCount_tOracleOutput_16 += (tmp_batchUpdateCount_tOracleOutput_16!=-1?tmp_batchUpdateCount_tOracleOutput_16:0);
            }
        }
        if(pstmt_tOracleOutput_16 != null) {
			
				pstmt_tOracleOutput_16.close();
				resourceMap.remove("pstmt_tOracleOutput_16");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_16", true);
		if(commitCounter_tOracleOutput_16 > 0 && rowsToCommitCount_tOracleOutput_16 != 0) {
			
		}
		conn_tOracleOutput_16.commit();
		if(commitCounter_tOracleOutput_16 > 0 && rowsToCommitCount_tOracleOutput_16 != 0) {
			
			rowsToCommitCount_tOracleOutput_16 = 0;
		}
		commitCounter_tOracleOutput_16 = 0;
		
		
		conn_tOracleOutput_16 .close();
		
		resourceMap.put("finish_tOracleOutput_16", true);
   	

	
	nb_line_deleted_tOracleOutput_16=nb_line_deleted_tOracleOutput_16+ deletedCount_tOracleOutput_16;
	nb_line_update_tOracleOutput_16=nb_line_update_tOracleOutput_16 + updatedCount_tOracleOutput_16;
	nb_line_inserted_tOracleOutput_16=nb_line_inserted_tOracleOutput_16 + insertedCount_tOracleOutput_16;
	nb_line_rejected_tOracleOutput_16=nb_line_rejected_tOracleOutput_16 + rejectedCount_tOracleOutput_16;
	
        globalMap.put("tOracleOutput_16_NB_LINE",nb_line_tOracleOutput_16);
        globalMap.put("tOracleOutput_16_NB_LINE_UPDATED",nb_line_update_tOracleOutput_16);
        globalMap.put("tOracleOutput_16_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_16);
        globalMap.put("tOracleOutput_16_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_16);
        globalMap.put("tOracleOutput_16_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_16);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Elimina6");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_16", true);
end_Hash.put("tOracleOutput_16", System.currentTimeMillis());




/**
 * [tOracleOutput_16 end ] stop
 */




	
	/**
	 * [tOracleOutput_17 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_17 > 0) {
            try {
            	if (pstmt_tOracleOutput_17 != null) {
					
					pstmt_tOracleOutput_17.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_17){
globalMap.put("tOracleOutput_17_ERROR_MESSAGE",e_tOracleOutput_17.getMessage());
		        java.sql.SQLException ne_tOracleOutput_17 = e_tOracleOutput_17.getNextException(),sqle_tOracleOutput_17=null;
		    	String errormessage_tOracleOutput_17;
				if (ne_tOracleOutput_17 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_17 = new java.sql.SQLException(e_tOracleOutput_17.getMessage() + "\ncaused by: " + ne_tOracleOutput_17.getMessage(), ne_tOracleOutput_17.getSQLState(), ne_tOracleOutput_17.getErrorCode(), ne_tOracleOutput_17);
					errormessage_tOracleOutput_17 = sqle_tOracleOutput_17.getMessage();
				}else{
					errormessage_tOracleOutput_17 = e_tOracleOutput_17.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_17);
            	
        	}
        	if (pstmt_tOracleOutput_17 != null) {
            	tmp_batchUpdateCount_tOracleOutput_17 = pstmt_tOracleOutput_17.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_17
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_17!=-1?tmp_batchUpdateCount_tOracleOutput_17:0);
				rowsToCommitCount_tOracleOutput_17 += (tmp_batchUpdateCount_tOracleOutput_17!=-1?tmp_batchUpdateCount_tOracleOutput_17:0);
            }
        }
        if(pstmt_tOracleOutput_17 != null) {
			
				pstmt_tOracleOutput_17.close();
				resourceMap.remove("pstmt_tOracleOutput_17");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_17", true);
		if(commitCounter_tOracleOutput_17 > 0 && rowsToCommitCount_tOracleOutput_17 != 0) {
			
		}
		conn_tOracleOutput_17.commit();
		if(commitCounter_tOracleOutput_17 > 0 && rowsToCommitCount_tOracleOutput_17 != 0) {
			
			rowsToCommitCount_tOracleOutput_17 = 0;
		}
		commitCounter_tOracleOutput_17 = 0;
		
		
		conn_tOracleOutput_17 .close();
		
		resourceMap.put("finish_tOracleOutput_17", true);
   	

	
	nb_line_deleted_tOracleOutput_17=nb_line_deleted_tOracleOutput_17+ deletedCount_tOracleOutput_17;
	nb_line_update_tOracleOutput_17=nb_line_update_tOracleOutput_17 + updatedCount_tOracleOutput_17;
	nb_line_inserted_tOracleOutput_17=nb_line_inserted_tOracleOutput_17 + insertedCount_tOracleOutput_17;
	nb_line_rejected_tOracleOutput_17=nb_line_rejected_tOracleOutput_17 + rejectedCount_tOracleOutput_17;
	
        globalMap.put("tOracleOutput_17_NB_LINE",nb_line_tOracleOutput_17);
        globalMap.put("tOracleOutput_17_NB_LINE_UPDATED",nb_line_update_tOracleOutput_17);
        globalMap.put("tOracleOutput_17_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_17);
        globalMap.put("tOracleOutput_17_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_17);
        globalMap.put("tOracleOutput_17_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_17);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta7");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_17", true);
end_Hash.put("tOracleOutput_17", System.currentTimeMillis());




/**
 * [tOracleOutput_17 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tOracleInput_13Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_row29"); 
				     			
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_row30"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tOracleOutput_16 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_16") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_16 = null;
                if ((pstmtToClose_tOracleOutput_16 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_16")) != null) {
                    pstmtToClose_tOracleOutput_16.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_16") == null){
            java.sql.Connection ctn_tOracleOutput_16 = null;
            if((ctn_tOracleOutput_16 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_16")) != null){
                try {
                    ctn_tOracleOutput_16.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_16) {
                    String errorMessage_tOracleOutput_16 = "failed to close the connection in tOracleOutput_16 :" + sqlEx_tOracleOutput_16.getMessage();
                    System.err.println(errorMessage_tOracleOutput_16);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_16 finally ] stop
 */




	
	/**
	 * [tOracleOutput_17 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_17") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_17 = null;
                if ((pstmtToClose_tOracleOutput_17 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_17")) != null) {
                    pstmtToClose_tOracleOutput_17.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_17") == null){
            java.sql.Connection ctn_tOracleOutput_17 = null;
            if((ctn_tOracleOutput_17 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_17")) != null){
                try {
                    ctn_tOracleOutput_17.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_17) {
                    String errorMessage_tOracleOutput_17 = "failed to close the connection in tOracleOutput_17 :" + sqlEx_tOracleOutput_17.getMessage();
                    System.err.println(errorMessage_tOracleOutput_17);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_17 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class Actualiza1Struct implements routines.system.IPersistableRow<Actualiza1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 50;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 500;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CIRCULAR;

				public String getCIRCULAR () {
					return this.CIRCULAR;
				}

				public Boolean CIRCULARIsNullable(){
				    return true;
				}
				public Boolean CIRCULARIsKey(){
				    return false;
				}
				public Integer CIRCULARLength(){
				    return 50;
				}
				public Integer CIRCULARPrecision(){
				    return 0;
				}
				public String CIRCULARDefault(){
				
					return null;
				
				}
				public String CIRCULARComment(){
				
				    return "";
				
				}
				public String CIRCULARPattern(){
				
					return "";
				
				}
				public String CIRCULAROriginalDbColumnName(){
				
					return "CIRCULAR";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return 0;
				}
				public Integer METAPrecision(){
				    return null;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				
			    public String UNIDAD;

				public String getUNIDAD () {
					return this.UNIDAD;
				}

				public Boolean UNIDADIsNullable(){
				    return true;
				}
				public Boolean UNIDADIsKey(){
				    return false;
				}
				public Integer UNIDADLength(){
				    return 50;
				}
				public Integer UNIDADPrecision(){
				    return 0;
				}
				public String UNIDADDefault(){
				
					return null;
				
				}
				public String UNIDADComment(){
				
				    return "";
				
				}
				public String UNIDADPattern(){
				
					return "";
				
				}
				public String UNIDADOriginalDbColumnName(){
				
					return "UNIDAD";
				
				}

				
			    public String NUMERADOR_DESCRIPCION;

				public String getNUMERADOR_DESCRIPCION () {
					return this.NUMERADOR_DESCRIPCION;
				}

				public Boolean NUMERADOR_DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean NUMERADOR_DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer NUMERADOR_DESCRIPCIONLength(){
				    return 2000;
				}
				public Integer NUMERADOR_DESCRIPCIONPrecision(){
				    return 0;
				}
				public String NUMERADOR_DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String NUMERADOR_DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String NUMERADOR_DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String NUMERADOR_DESCRIPCIONOriginalDbColumnName(){
				
					return "NUMERADOR_DESCRIPCION";
				
				}

				
			    public String DENOMINADOR_DESCRIPCION;

				public String getDENOMINADOR_DESCRIPCION () {
					return this.DENOMINADOR_DESCRIPCION;
				}

				public Boolean DENOMINADOR_DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR_DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DENOMINADOR_DESCRIPCIONLength(){
				    return 2000;
				}
				public Integer DENOMINADOR_DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DENOMINADOR_DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DENOMINADOR_DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DENOMINADOR_DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DENOMINADOR_DESCRIPCIONOriginalDbColumnName(){
				
					return "DENOMINADOR_DESCRIPCION";
				
				}

				
			    public String INDICADOR_DESCRIPCION;

				public String getINDICADOR_DESCRIPCION () {
					return this.INDICADOR_DESCRIPCION;
				}

				public Boolean INDICADOR_DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean INDICADOR_DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer INDICADOR_DESCRIPCIONLength(){
				    return 4000;
				}
				public Integer INDICADOR_DESCRIPCIONPrecision(){
				    return 0;
				}
				public String INDICADOR_DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String INDICADOR_DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String INDICADOR_DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String INDICADOR_DESCRIPCIONOriginalDbColumnName(){
				
					return "INDICADOR_DESCRIPCION";
				
				}

				
			    public BigDecimal CATEGORIA;

				public BigDecimal getCATEGORIA () {
					return this.CATEGORIA;
				}

				public Boolean CATEGORIAIsNullable(){
				    return true;
				}
				public Boolean CATEGORIAIsKey(){
				    return false;
				}
				public Integer CATEGORIALength(){
				    return 0;
				}
				public Integer CATEGORIAPrecision(){
				    return null;
				}
				public String CATEGORIADefault(){
				
					return "";
				
				}
				public String CATEGORIAComment(){
				
				    return "";
				
				}
				public String CATEGORIAPattern(){
				
					return "";
				
				}
				public String CATEGORIAOriginalDbColumnName(){
				
					return "CATEGORIA";
				
				}

				
			    public String NUMERADOR_NOMBRE;

				public String getNUMERADOR_NOMBRE () {
					return this.NUMERADOR_NOMBRE;
				}

				public Boolean NUMERADOR_NOMBREIsNullable(){
				    return true;
				}
				public Boolean NUMERADOR_NOMBREIsKey(){
				    return false;
				}
				public Integer NUMERADOR_NOMBRELength(){
				    return 1000;
				}
				public Integer NUMERADOR_NOMBREPrecision(){
				    return 0;
				}
				public String NUMERADOR_NOMBREDefault(){
				
					return null;
				
				}
				public String NUMERADOR_NOMBREComment(){
				
				    return "";
				
				}
				public String NUMERADOR_NOMBREPattern(){
				
					return "";
				
				}
				public String NUMERADOR_NOMBREOriginalDbColumnName(){
				
					return "NUMERADOR_NOMBRE";
				
				}

				
			    public String DENOMINADOR_NOMBRE;

				public String getDENOMINADOR_NOMBRE () {
					return this.DENOMINADOR_NOMBRE;
				}

				public Boolean DENOMINADOR_NOMBREIsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR_NOMBREIsKey(){
				    return false;
				}
				public Integer DENOMINADOR_NOMBRELength(){
				    return 1000;
				}
				public Integer DENOMINADOR_NOMBREPrecision(){
				    return 0;
				}
				public String DENOMINADOR_NOMBREDefault(){
				
					return null;
				
				}
				public String DENOMINADOR_NOMBREComment(){
				
				    return "";
				
				}
				public String DENOMINADOR_NOMBREPattern(){
				
					return "";
				
				}
				public String DENOMINADOR_NOMBREOriginalDbColumnName(){
				
					return "DENOMINADOR_NOMBRE";
				
				}

				
			    public BigDecimal TENDENCIA;

				public BigDecimal getTENDENCIA () {
					return this.TENDENCIA;
				}

				public Boolean TENDENCIAIsNullable(){
				    return true;
				}
				public Boolean TENDENCIAIsKey(){
				    return false;
				}
				public Integer TENDENCIALength(){
				    return 0;
				}
				public Integer TENDENCIAPrecision(){
				    return null;
				}
				public String TENDENCIADefault(){
				
					return "";
				
				}
				public String TENDENCIAComment(){
				
				    return "";
				
				}
				public String TENDENCIAPattern(){
				
					return "";
				
				}
				public String TENDENCIAOriginalDbColumnName(){
				
					return "TENDENCIA";
				
				}

				
			    public String MODULO;

				public String getMODULO () {
					return this.MODULO;
				}

				public Boolean MODULOIsNullable(){
				    return true;
				}
				public Boolean MODULOIsKey(){
				    return false;
				}
				public Integer MODULOLength(){
				    return 10;
				}
				public Integer MODULOPrecision(){
				    return 0;
				}
				public String MODULODefault(){
				
					return null;
				
				}
				public String MODULOComment(){
				
				    return "";
				
				}
				public String MODULOPattern(){
				
					return "";
				
				}
				public String MODULOOriginalDbColumnName(){
				
					return "MODULO";
				
				}

				
			    public BigDecimal TGESTION;

				public BigDecimal getTGESTION () {
					return this.TGESTION;
				}

				public Boolean TGESTIONIsNullable(){
				    return true;
				}
				public Boolean TGESTIONIsKey(){
				    return false;
				}
				public Integer TGESTIONLength(){
				    return 0;
				}
				public Integer TGESTIONPrecision(){
				    return null;
				}
				public String TGESTIONDefault(){
				
					return "";
				
				}
				public String TGESTIONComment(){
				
				    return "";
				
				}
				public String TGESTIONPattern(){
				
					return "";
				
				}
				public String TGESTIONOriginalDbColumnName(){
				
					return "TGESTION";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Actualiza1Struct other = (Actualiza1Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Actualiza1Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            other.NOMBRE = this.NOMBRE;
	            other.CIRCULAR = this.CIRCULAR;
	            other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            other.META = this.META;
	            other.UNIDAD = this.UNIDAD;
	            other.NUMERADOR_DESCRIPCION = this.NUMERADOR_DESCRIPCION;
	            other.DENOMINADOR_DESCRIPCION = this.DENOMINADOR_DESCRIPCION;
	            other.INDICADOR_DESCRIPCION = this.INDICADOR_DESCRIPCION;
	            other.CATEGORIA = this.CATEGORIA;
	            other.NUMERADOR_NOMBRE = this.NUMERADOR_NOMBRE;
	            other.DENOMINADOR_NOMBRE = this.DENOMINADOR_NOMBRE;
	            other.TENDENCIA = this.TENDENCIA;
	            other.MODULO = this.MODULO;
	            other.TGESTION = this.TGESTION;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            
	}

	public void copyKeysDataTo(Actualiza1Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
					this.UNIDAD = readString(dis);
					
					this.NUMERADOR_DESCRIPCION = readString(dis);
					
					this.DENOMINADOR_DESCRIPCION = readString(dis);
					
					this.INDICADOR_DESCRIPCION = readString(dis);
					
						this.CATEGORIA = (BigDecimal) dis.readObject();
					
					this.NUMERADOR_NOMBRE = readString(dis);
					
					this.DENOMINADOR_NOMBRE = readString(dis);
					
						this.TENDENCIA = (BigDecimal) dis.readObject();
					
					this.MODULO = readString(dis);
					
						this.TGESTION = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
					this.UNIDAD = readString(dis);
					
					this.NUMERADOR_DESCRIPCION = readString(dis);
					
					this.DENOMINADOR_DESCRIPCION = readString(dis);
					
					this.INDICADOR_DESCRIPCION = readString(dis);
					
						this.CATEGORIA = (BigDecimal) dis.readObject();
					
					this.NUMERADOR_NOMBRE = readString(dis);
					
					this.DENOMINADOR_NOMBRE = readString(dis);
					
						this.TENDENCIA = (BigDecimal) dis.readObject();
					
					this.MODULO = readString(dis);
					
						this.TGESTION = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
					// String
				
						writeString(this.UNIDAD,dos);
					
					// String
				
						writeString(this.NUMERADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.DENOMINADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.INDICADOR_DESCRIPCION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CATEGORIA);
					
					// String
				
						writeString(this.NUMERADOR_NOMBRE,dos);
					
					// String
				
						writeString(this.DENOMINADOR_NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TENDENCIA);
					
					// String
				
						writeString(this.MODULO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TGESTION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
					// String
				
						writeString(this.UNIDAD,dos);
					
					// String
				
						writeString(this.NUMERADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.DENOMINADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.INDICADOR_DESCRIPCION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CATEGORIA);
					
					// String
				
						writeString(this.NUMERADOR_NOMBRE,dos);
					
					// String
				
						writeString(this.DENOMINADOR_NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TENDENCIA);
					
					// String
				
						writeString(this.MODULO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TGESTION);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CIRCULAR="+CIRCULAR);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",META="+String.valueOf(META));
		sb.append(",UNIDAD="+UNIDAD);
		sb.append(",NUMERADOR_DESCRIPCION="+NUMERADOR_DESCRIPCION);
		sb.append(",DENOMINADOR_DESCRIPCION="+DENOMINADOR_DESCRIPCION);
		sb.append(",INDICADOR_DESCRIPCION="+INDICADOR_DESCRIPCION);
		sb.append(",CATEGORIA="+String.valueOf(CATEGORIA));
		sb.append(",NUMERADOR_NOMBRE="+NUMERADOR_NOMBRE);
		sb.append(",DENOMINADOR_NOMBRE="+DENOMINADOR_NOMBRE);
		sb.append(",TENDENCIA="+String.valueOf(TENDENCIA));
		sb.append(",MODULO="+MODULO);
		sb.append(",TGESTION="+String.valueOf(TGESTION));
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Actualiza1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Inserta10Struct implements routines.system.IPersistableRow<Inserta10Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 50;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 500;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CIRCULAR;

				public String getCIRCULAR () {
					return this.CIRCULAR;
				}

				public Boolean CIRCULARIsNullable(){
				    return true;
				}
				public Boolean CIRCULARIsKey(){
				    return false;
				}
				public Integer CIRCULARLength(){
				    return 50;
				}
				public Integer CIRCULARPrecision(){
				    return 0;
				}
				public String CIRCULARDefault(){
				
					return null;
				
				}
				public String CIRCULARComment(){
				
				    return "";
				
				}
				public String CIRCULARPattern(){
				
					return "";
				
				}
				public String CIRCULAROriginalDbColumnName(){
				
					return "CIRCULAR";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return 0;
				}
				public Integer METAPrecision(){
				    return null;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				
			    public String UNIDAD;

				public String getUNIDAD () {
					return this.UNIDAD;
				}

				public Boolean UNIDADIsNullable(){
				    return true;
				}
				public Boolean UNIDADIsKey(){
				    return false;
				}
				public Integer UNIDADLength(){
				    return 50;
				}
				public Integer UNIDADPrecision(){
				    return 0;
				}
				public String UNIDADDefault(){
				
					return null;
				
				}
				public String UNIDADComment(){
				
				    return "";
				
				}
				public String UNIDADPattern(){
				
					return "";
				
				}
				public String UNIDADOriginalDbColumnName(){
				
					return "UNIDAD";
				
				}

				
			    public String NUMERADOR_DESCRIPCION;

				public String getNUMERADOR_DESCRIPCION () {
					return this.NUMERADOR_DESCRIPCION;
				}

				public Boolean NUMERADOR_DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean NUMERADOR_DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer NUMERADOR_DESCRIPCIONLength(){
				    return 2000;
				}
				public Integer NUMERADOR_DESCRIPCIONPrecision(){
				    return 0;
				}
				public String NUMERADOR_DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String NUMERADOR_DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String NUMERADOR_DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String NUMERADOR_DESCRIPCIONOriginalDbColumnName(){
				
					return "NUMERADOR_DESCRIPCION";
				
				}

				
			    public String DENOMINADOR_DESCRIPCION;

				public String getDENOMINADOR_DESCRIPCION () {
					return this.DENOMINADOR_DESCRIPCION;
				}

				public Boolean DENOMINADOR_DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR_DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DENOMINADOR_DESCRIPCIONLength(){
				    return 2000;
				}
				public Integer DENOMINADOR_DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DENOMINADOR_DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DENOMINADOR_DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DENOMINADOR_DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DENOMINADOR_DESCRIPCIONOriginalDbColumnName(){
				
					return "DENOMINADOR_DESCRIPCION";
				
				}

				
			    public String INDICADOR_DESCRIPCION;

				public String getINDICADOR_DESCRIPCION () {
					return this.INDICADOR_DESCRIPCION;
				}

				public Boolean INDICADOR_DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean INDICADOR_DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer INDICADOR_DESCRIPCIONLength(){
				    return 4000;
				}
				public Integer INDICADOR_DESCRIPCIONPrecision(){
				    return 0;
				}
				public String INDICADOR_DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String INDICADOR_DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String INDICADOR_DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String INDICADOR_DESCRIPCIONOriginalDbColumnName(){
				
					return "INDICADOR_DESCRIPCION";
				
				}

				
			    public BigDecimal CATEGORIA;

				public BigDecimal getCATEGORIA () {
					return this.CATEGORIA;
				}

				public Boolean CATEGORIAIsNullable(){
				    return true;
				}
				public Boolean CATEGORIAIsKey(){
				    return false;
				}
				public Integer CATEGORIALength(){
				    return 0;
				}
				public Integer CATEGORIAPrecision(){
				    return null;
				}
				public String CATEGORIADefault(){
				
					return "";
				
				}
				public String CATEGORIAComment(){
				
				    return "";
				
				}
				public String CATEGORIAPattern(){
				
					return "";
				
				}
				public String CATEGORIAOriginalDbColumnName(){
				
					return "CATEGORIA";
				
				}

				
			    public String NUMERADOR_NOMBRE;

				public String getNUMERADOR_NOMBRE () {
					return this.NUMERADOR_NOMBRE;
				}

				public Boolean NUMERADOR_NOMBREIsNullable(){
				    return true;
				}
				public Boolean NUMERADOR_NOMBREIsKey(){
				    return false;
				}
				public Integer NUMERADOR_NOMBRELength(){
				    return 1000;
				}
				public Integer NUMERADOR_NOMBREPrecision(){
				    return 0;
				}
				public String NUMERADOR_NOMBREDefault(){
				
					return null;
				
				}
				public String NUMERADOR_NOMBREComment(){
				
				    return "";
				
				}
				public String NUMERADOR_NOMBREPattern(){
				
					return "";
				
				}
				public String NUMERADOR_NOMBREOriginalDbColumnName(){
				
					return "NUMERADOR_NOMBRE";
				
				}

				
			    public String DENOMINADOR_NOMBRE;

				public String getDENOMINADOR_NOMBRE () {
					return this.DENOMINADOR_NOMBRE;
				}

				public Boolean DENOMINADOR_NOMBREIsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR_NOMBREIsKey(){
				    return false;
				}
				public Integer DENOMINADOR_NOMBRELength(){
				    return 1000;
				}
				public Integer DENOMINADOR_NOMBREPrecision(){
				    return 0;
				}
				public String DENOMINADOR_NOMBREDefault(){
				
					return null;
				
				}
				public String DENOMINADOR_NOMBREComment(){
				
				    return "";
				
				}
				public String DENOMINADOR_NOMBREPattern(){
				
					return "";
				
				}
				public String DENOMINADOR_NOMBREOriginalDbColumnName(){
				
					return "DENOMINADOR_NOMBRE";
				
				}

				
			    public BigDecimal TENDENCIA;

				public BigDecimal getTENDENCIA () {
					return this.TENDENCIA;
				}

				public Boolean TENDENCIAIsNullable(){
				    return true;
				}
				public Boolean TENDENCIAIsKey(){
				    return false;
				}
				public Integer TENDENCIALength(){
				    return 0;
				}
				public Integer TENDENCIAPrecision(){
				    return null;
				}
				public String TENDENCIADefault(){
				
					return "";
				
				}
				public String TENDENCIAComment(){
				
				    return "";
				
				}
				public String TENDENCIAPattern(){
				
					return "";
				
				}
				public String TENDENCIAOriginalDbColumnName(){
				
					return "TENDENCIA";
				
				}

				
			    public String MODULO;

				public String getMODULO () {
					return this.MODULO;
				}

				public Boolean MODULOIsNullable(){
				    return true;
				}
				public Boolean MODULOIsKey(){
				    return false;
				}
				public Integer MODULOLength(){
				    return 10;
				}
				public Integer MODULOPrecision(){
				    return 0;
				}
				public String MODULODefault(){
				
					return null;
				
				}
				public String MODULOComment(){
				
				    return "";
				
				}
				public String MODULOPattern(){
				
					return "";
				
				}
				public String MODULOOriginalDbColumnName(){
				
					return "MODULO";
				
				}

				
			    public BigDecimal TGESTION;

				public BigDecimal getTGESTION () {
					return this.TGESTION;
				}

				public Boolean TGESTIONIsNullable(){
				    return true;
				}
				public Boolean TGESTIONIsKey(){
				    return false;
				}
				public Integer TGESTIONLength(){
				    return 0;
				}
				public Integer TGESTIONPrecision(){
				    return null;
				}
				public String TGESTIONDefault(){
				
					return "";
				
				}
				public String TGESTIONComment(){
				
				    return "";
				
				}
				public String TGESTIONPattern(){
				
					return "";
				
				}
				public String TGESTIONOriginalDbColumnName(){
				
					return "TGESTION";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
					this.UNIDAD = readString(dis);
					
					this.NUMERADOR_DESCRIPCION = readString(dis);
					
					this.DENOMINADOR_DESCRIPCION = readString(dis);
					
					this.INDICADOR_DESCRIPCION = readString(dis);
					
						this.CATEGORIA = (BigDecimal) dis.readObject();
					
					this.NUMERADOR_NOMBRE = readString(dis);
					
					this.DENOMINADOR_NOMBRE = readString(dis);
					
						this.TENDENCIA = (BigDecimal) dis.readObject();
					
					this.MODULO = readString(dis);
					
						this.TGESTION = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
					this.UNIDAD = readString(dis);
					
					this.NUMERADOR_DESCRIPCION = readString(dis);
					
					this.DENOMINADOR_DESCRIPCION = readString(dis);
					
					this.INDICADOR_DESCRIPCION = readString(dis);
					
						this.CATEGORIA = (BigDecimal) dis.readObject();
					
					this.NUMERADOR_NOMBRE = readString(dis);
					
					this.DENOMINADOR_NOMBRE = readString(dis);
					
						this.TENDENCIA = (BigDecimal) dis.readObject();
					
					this.MODULO = readString(dis);
					
						this.TGESTION = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
					// String
				
						writeString(this.UNIDAD,dos);
					
					// String
				
						writeString(this.NUMERADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.DENOMINADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.INDICADOR_DESCRIPCION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CATEGORIA);
					
					// String
				
						writeString(this.NUMERADOR_NOMBRE,dos);
					
					// String
				
						writeString(this.DENOMINADOR_NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TENDENCIA);
					
					// String
				
						writeString(this.MODULO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TGESTION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
					// String
				
						writeString(this.UNIDAD,dos);
					
					// String
				
						writeString(this.NUMERADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.DENOMINADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.INDICADOR_DESCRIPCION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CATEGORIA);
					
					// String
				
						writeString(this.NUMERADOR_NOMBRE,dos);
					
					// String
				
						writeString(this.DENOMINADOR_NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TENDENCIA);
					
					// String
				
						writeString(this.MODULO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TGESTION);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CIRCULAR="+CIRCULAR);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",META="+String.valueOf(META));
		sb.append(",UNIDAD="+UNIDAD);
		sb.append(",NUMERADOR_DESCRIPCION="+NUMERADOR_DESCRIPCION);
		sb.append(",DENOMINADOR_DESCRIPCION="+DENOMINADOR_DESCRIPCION);
		sb.append(",INDICADOR_DESCRIPCION="+INDICADOR_DESCRIPCION);
		sb.append(",CATEGORIA="+String.valueOf(CATEGORIA));
		sb.append(",NUMERADOR_NOMBRE="+NUMERADOR_NOMBRE);
		sb.append(",DENOMINADOR_NOMBRE="+DENOMINADOR_NOMBRE);
		sb.append(",TENDENCIA="+String.valueOf(TENDENCIA));
		sb.append(",MODULO="+MODULO);
		sb.append(",TGESTION="+String.valueOf(TGESTION));
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 50;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 500;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CIRCULAR;

				public String getCIRCULAR () {
					return this.CIRCULAR;
				}

				public Boolean CIRCULARIsNullable(){
				    return true;
				}
				public Boolean CIRCULARIsKey(){
				    return false;
				}
				public Integer CIRCULARLength(){
				    return 50;
				}
				public Integer CIRCULARPrecision(){
				    return 0;
				}
				public String CIRCULARDefault(){
				
					return null;
				
				}
				public String CIRCULARComment(){
				
				    return "";
				
				}
				public String CIRCULARPattern(){
				
					return "";
				
				}
				public String CIRCULAROriginalDbColumnName(){
				
					return "CIRCULAR";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return 0;
				}
				public Integer METAPrecision(){
				    return null;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				
			    public String UNIDAD;

				public String getUNIDAD () {
					return this.UNIDAD;
				}

				public Boolean UNIDADIsNullable(){
				    return true;
				}
				public Boolean UNIDADIsKey(){
				    return false;
				}
				public Integer UNIDADLength(){
				    return 50;
				}
				public Integer UNIDADPrecision(){
				    return 0;
				}
				public String UNIDADDefault(){
				
					return null;
				
				}
				public String UNIDADComment(){
				
				    return "";
				
				}
				public String UNIDADPattern(){
				
					return "";
				
				}
				public String UNIDADOriginalDbColumnName(){
				
					return "UNIDAD";
				
				}

				
			    public String NUMERADOR_DESCRIPCION;

				public String getNUMERADOR_DESCRIPCION () {
					return this.NUMERADOR_DESCRIPCION;
				}

				public Boolean NUMERADOR_DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean NUMERADOR_DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer NUMERADOR_DESCRIPCIONLength(){
				    return 2000;
				}
				public Integer NUMERADOR_DESCRIPCIONPrecision(){
				    return 0;
				}
				public String NUMERADOR_DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String NUMERADOR_DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String NUMERADOR_DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String NUMERADOR_DESCRIPCIONOriginalDbColumnName(){
				
					return "NUMERADOR_DESCRIPCION";
				
				}

				
			    public String DENOMINADOR_DESCRIPCION;

				public String getDENOMINADOR_DESCRIPCION () {
					return this.DENOMINADOR_DESCRIPCION;
				}

				public Boolean DENOMINADOR_DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR_DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DENOMINADOR_DESCRIPCIONLength(){
				    return 2000;
				}
				public Integer DENOMINADOR_DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DENOMINADOR_DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DENOMINADOR_DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DENOMINADOR_DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DENOMINADOR_DESCRIPCIONOriginalDbColumnName(){
				
					return "DENOMINADOR_DESCRIPCION";
				
				}

				
			    public String INDICADOR_DESCRIPCION;

				public String getINDICADOR_DESCRIPCION () {
					return this.INDICADOR_DESCRIPCION;
				}

				public Boolean INDICADOR_DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean INDICADOR_DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer INDICADOR_DESCRIPCIONLength(){
				    return 4000;
				}
				public Integer INDICADOR_DESCRIPCIONPrecision(){
				    return 0;
				}
				public String INDICADOR_DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String INDICADOR_DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String INDICADOR_DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String INDICADOR_DESCRIPCIONOriginalDbColumnName(){
				
					return "INDICADOR_DESCRIPCION";
				
				}

				
			    public BigDecimal CATEGORIA;

				public BigDecimal getCATEGORIA () {
					return this.CATEGORIA;
				}

				public Boolean CATEGORIAIsNullable(){
				    return true;
				}
				public Boolean CATEGORIAIsKey(){
				    return false;
				}
				public Integer CATEGORIALength(){
				    return 0;
				}
				public Integer CATEGORIAPrecision(){
				    return null;
				}
				public String CATEGORIADefault(){
				
					return "";
				
				}
				public String CATEGORIAComment(){
				
				    return "";
				
				}
				public String CATEGORIAPattern(){
				
					return "";
				
				}
				public String CATEGORIAOriginalDbColumnName(){
				
					return "CATEGORIA";
				
				}

				
			    public String NUMERADOR_NOMBRE;

				public String getNUMERADOR_NOMBRE () {
					return this.NUMERADOR_NOMBRE;
				}

				public Boolean NUMERADOR_NOMBREIsNullable(){
				    return true;
				}
				public Boolean NUMERADOR_NOMBREIsKey(){
				    return false;
				}
				public Integer NUMERADOR_NOMBRELength(){
				    return 1000;
				}
				public Integer NUMERADOR_NOMBREPrecision(){
				    return 0;
				}
				public String NUMERADOR_NOMBREDefault(){
				
					return null;
				
				}
				public String NUMERADOR_NOMBREComment(){
				
				    return "";
				
				}
				public String NUMERADOR_NOMBREPattern(){
				
					return "";
				
				}
				public String NUMERADOR_NOMBREOriginalDbColumnName(){
				
					return "NUMERADOR_NOMBRE";
				
				}

				
			    public String DENOMINADOR_NOMBRE;

				public String getDENOMINADOR_NOMBRE () {
					return this.DENOMINADOR_NOMBRE;
				}

				public Boolean DENOMINADOR_NOMBREIsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR_NOMBREIsKey(){
				    return false;
				}
				public Integer DENOMINADOR_NOMBRELength(){
				    return 1000;
				}
				public Integer DENOMINADOR_NOMBREPrecision(){
				    return 0;
				}
				public String DENOMINADOR_NOMBREDefault(){
				
					return null;
				
				}
				public String DENOMINADOR_NOMBREComment(){
				
				    return "";
				
				}
				public String DENOMINADOR_NOMBREPattern(){
				
					return "";
				
				}
				public String DENOMINADOR_NOMBREOriginalDbColumnName(){
				
					return "DENOMINADOR_NOMBRE";
				
				}

				
			    public BigDecimal TENDENCIA;

				public BigDecimal getTENDENCIA () {
					return this.TENDENCIA;
				}

				public Boolean TENDENCIAIsNullable(){
				    return true;
				}
				public Boolean TENDENCIAIsKey(){
				    return false;
				}
				public Integer TENDENCIALength(){
				    return 0;
				}
				public Integer TENDENCIAPrecision(){
				    return null;
				}
				public String TENDENCIADefault(){
				
					return "";
				
				}
				public String TENDENCIAComment(){
				
				    return "";
				
				}
				public String TENDENCIAPattern(){
				
					return "";
				
				}
				public String TENDENCIAOriginalDbColumnName(){
				
					return "TENDENCIA";
				
				}

				
			    public String MODULO;

				public String getMODULO () {
					return this.MODULO;
				}

				public Boolean MODULOIsNullable(){
				    return true;
				}
				public Boolean MODULOIsKey(){
				    return false;
				}
				public Integer MODULOLength(){
				    return 10;
				}
				public Integer MODULOPrecision(){
				    return 0;
				}
				public String MODULODefault(){
				
					return null;
				
				}
				public String MODULOComment(){
				
				    return "";
				
				}
				public String MODULOPattern(){
				
					return "";
				
				}
				public String MODULOOriginalDbColumnName(){
				
					return "MODULO";
				
				}

				
			    public BigDecimal TGESTION;

				public BigDecimal getTGESTION () {
					return this.TGESTION;
				}

				public Boolean TGESTIONIsNullable(){
				    return true;
				}
				public Boolean TGESTIONIsKey(){
				    return false;
				}
				public Integer TGESTIONLength(){
				    return 0;
				}
				public Integer TGESTIONPrecision(){
				    return null;
				}
				public String TGESTIONDefault(){
				
					return "";
				
				}
				public String TGESTIONComment(){
				
				    return "";
				
				}
				public String TGESTIONPattern(){
				
					return "";
				
				}
				public String TGESTIONOriginalDbColumnName(){
				
					return "TGESTION";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
					this.UNIDAD = readString(dis);
					
					this.NUMERADOR_DESCRIPCION = readString(dis);
					
					this.DENOMINADOR_DESCRIPCION = readString(dis);
					
					this.INDICADOR_DESCRIPCION = readString(dis);
					
						this.CATEGORIA = (BigDecimal) dis.readObject();
					
					this.NUMERADOR_NOMBRE = readString(dis);
					
					this.DENOMINADOR_NOMBRE = readString(dis);
					
						this.TENDENCIA = (BigDecimal) dis.readObject();
					
					this.MODULO = readString(dis);
					
						this.TGESTION = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
					this.UNIDAD = readString(dis);
					
					this.NUMERADOR_DESCRIPCION = readString(dis);
					
					this.DENOMINADOR_DESCRIPCION = readString(dis);
					
					this.INDICADOR_DESCRIPCION = readString(dis);
					
						this.CATEGORIA = (BigDecimal) dis.readObject();
					
					this.NUMERADOR_NOMBRE = readString(dis);
					
					this.DENOMINADOR_NOMBRE = readString(dis);
					
						this.TENDENCIA = (BigDecimal) dis.readObject();
					
					this.MODULO = readString(dis);
					
						this.TGESTION = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
					// String
				
						writeString(this.UNIDAD,dos);
					
					// String
				
						writeString(this.NUMERADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.DENOMINADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.INDICADOR_DESCRIPCION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CATEGORIA);
					
					// String
				
						writeString(this.NUMERADOR_NOMBRE,dos);
					
					// String
				
						writeString(this.DENOMINADOR_NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TENDENCIA);
					
					// String
				
						writeString(this.MODULO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TGESTION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
					// String
				
						writeString(this.UNIDAD,dos);
					
					// String
				
						writeString(this.NUMERADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.DENOMINADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.INDICADOR_DESCRIPCION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CATEGORIA);
					
					// String
				
						writeString(this.NUMERADOR_NOMBRE,dos);
					
					// String
				
						writeString(this.DENOMINADOR_NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TENDENCIA);
					
					// String
				
						writeString(this.MODULO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TGESTION);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CIRCULAR="+CIRCULAR);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",META="+String.valueOf(META));
		sb.append(",UNIDAD="+UNIDAD);
		sb.append(",NUMERADOR_DESCRIPCION="+NUMERADOR_DESCRIPCION);
		sb.append(",DENOMINADOR_DESCRIPCION="+DENOMINADOR_DESCRIPCION);
		sb.append(",INDICADOR_DESCRIPCION="+INDICADOR_DESCRIPCION);
		sb.append(",CATEGORIA="+String.valueOf(CATEGORIA));
		sb.append(",NUMERADOR_NOMBRE="+NUMERADOR_NOMBRE);
		sb.append(",DENOMINADOR_NOMBRE="+DENOMINADOR_NOMBRE);
		sb.append(",TENDENCIA="+String.valueOf(TENDENCIA));
		sb.append(",MODULO="+MODULO);
		sb.append(",TGESTION="+String.valueOf(TGESTION));
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_13Struct implements routines.system.IPersistableRow<after_tOracleInput_13Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 50;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 500;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CIRCULAR;

				public String getCIRCULAR () {
					return this.CIRCULAR;
				}

				public Boolean CIRCULARIsNullable(){
				    return true;
				}
				public Boolean CIRCULARIsKey(){
				    return false;
				}
				public Integer CIRCULARLength(){
				    return 50;
				}
				public Integer CIRCULARPrecision(){
				    return 0;
				}
				public String CIRCULARDefault(){
				
					return null;
				
				}
				public String CIRCULARComment(){
				
				    return "";
				
				}
				public String CIRCULARPattern(){
				
					return "";
				
				}
				public String CIRCULAROriginalDbColumnName(){
				
					return "CIRCULAR";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return 0;
				}
				public Integer METAPrecision(){
				    return null;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				
			    public String UNIDAD;

				public String getUNIDAD () {
					return this.UNIDAD;
				}

				public Boolean UNIDADIsNullable(){
				    return true;
				}
				public Boolean UNIDADIsKey(){
				    return false;
				}
				public Integer UNIDADLength(){
				    return 50;
				}
				public Integer UNIDADPrecision(){
				    return 0;
				}
				public String UNIDADDefault(){
				
					return null;
				
				}
				public String UNIDADComment(){
				
				    return "";
				
				}
				public String UNIDADPattern(){
				
					return "";
				
				}
				public String UNIDADOriginalDbColumnName(){
				
					return "UNIDAD";
				
				}

				
			    public String NUMERADOR_DESCRIPCION;

				public String getNUMERADOR_DESCRIPCION () {
					return this.NUMERADOR_DESCRIPCION;
				}

				public Boolean NUMERADOR_DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean NUMERADOR_DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer NUMERADOR_DESCRIPCIONLength(){
				    return 2000;
				}
				public Integer NUMERADOR_DESCRIPCIONPrecision(){
				    return 0;
				}
				public String NUMERADOR_DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String NUMERADOR_DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String NUMERADOR_DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String NUMERADOR_DESCRIPCIONOriginalDbColumnName(){
				
					return "NUMERADOR_DESCRIPCION";
				
				}

				
			    public String DENOMINADOR_DESCRIPCION;

				public String getDENOMINADOR_DESCRIPCION () {
					return this.DENOMINADOR_DESCRIPCION;
				}

				public Boolean DENOMINADOR_DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR_DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DENOMINADOR_DESCRIPCIONLength(){
				    return 2000;
				}
				public Integer DENOMINADOR_DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DENOMINADOR_DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DENOMINADOR_DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DENOMINADOR_DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DENOMINADOR_DESCRIPCIONOriginalDbColumnName(){
				
					return "DENOMINADOR_DESCRIPCION";
				
				}

				
			    public String INDICADOR_DESCRIPCION;

				public String getINDICADOR_DESCRIPCION () {
					return this.INDICADOR_DESCRIPCION;
				}

				public Boolean INDICADOR_DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean INDICADOR_DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer INDICADOR_DESCRIPCIONLength(){
				    return 4000;
				}
				public Integer INDICADOR_DESCRIPCIONPrecision(){
				    return 0;
				}
				public String INDICADOR_DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String INDICADOR_DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String INDICADOR_DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String INDICADOR_DESCRIPCIONOriginalDbColumnName(){
				
					return "INDICADOR_DESCRIPCION";
				
				}

				
			    public BigDecimal CATEGORIA;

				public BigDecimal getCATEGORIA () {
					return this.CATEGORIA;
				}

				public Boolean CATEGORIAIsNullable(){
				    return true;
				}
				public Boolean CATEGORIAIsKey(){
				    return false;
				}
				public Integer CATEGORIALength(){
				    return 0;
				}
				public Integer CATEGORIAPrecision(){
				    return null;
				}
				public String CATEGORIADefault(){
				
					return "";
				
				}
				public String CATEGORIAComment(){
				
				    return "";
				
				}
				public String CATEGORIAPattern(){
				
					return "";
				
				}
				public String CATEGORIAOriginalDbColumnName(){
				
					return "CATEGORIA";
				
				}

				
			    public String NUMERADOR_NOMBRE;

				public String getNUMERADOR_NOMBRE () {
					return this.NUMERADOR_NOMBRE;
				}

				public Boolean NUMERADOR_NOMBREIsNullable(){
				    return true;
				}
				public Boolean NUMERADOR_NOMBREIsKey(){
				    return false;
				}
				public Integer NUMERADOR_NOMBRELength(){
				    return 1000;
				}
				public Integer NUMERADOR_NOMBREPrecision(){
				    return 0;
				}
				public String NUMERADOR_NOMBREDefault(){
				
					return null;
				
				}
				public String NUMERADOR_NOMBREComment(){
				
				    return "";
				
				}
				public String NUMERADOR_NOMBREPattern(){
				
					return "";
				
				}
				public String NUMERADOR_NOMBREOriginalDbColumnName(){
				
					return "NUMERADOR_NOMBRE";
				
				}

				
			    public String DENOMINADOR_NOMBRE;

				public String getDENOMINADOR_NOMBRE () {
					return this.DENOMINADOR_NOMBRE;
				}

				public Boolean DENOMINADOR_NOMBREIsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR_NOMBREIsKey(){
				    return false;
				}
				public Integer DENOMINADOR_NOMBRELength(){
				    return 1000;
				}
				public Integer DENOMINADOR_NOMBREPrecision(){
				    return 0;
				}
				public String DENOMINADOR_NOMBREDefault(){
				
					return null;
				
				}
				public String DENOMINADOR_NOMBREComment(){
				
				    return "";
				
				}
				public String DENOMINADOR_NOMBREPattern(){
				
					return "";
				
				}
				public String DENOMINADOR_NOMBREOriginalDbColumnName(){
				
					return "DENOMINADOR_NOMBRE";
				
				}

				
			    public BigDecimal TENDENCIA;

				public BigDecimal getTENDENCIA () {
					return this.TENDENCIA;
				}

				public Boolean TENDENCIAIsNullable(){
				    return true;
				}
				public Boolean TENDENCIAIsKey(){
				    return false;
				}
				public Integer TENDENCIALength(){
				    return 0;
				}
				public Integer TENDENCIAPrecision(){
				    return null;
				}
				public String TENDENCIADefault(){
				
					return "";
				
				}
				public String TENDENCIAComment(){
				
				    return "";
				
				}
				public String TENDENCIAPattern(){
				
					return "";
				
				}
				public String TENDENCIAOriginalDbColumnName(){
				
					return "TENDENCIA";
				
				}

				
			    public String MODULO;

				public String getMODULO () {
					return this.MODULO;
				}

				public Boolean MODULOIsNullable(){
				    return true;
				}
				public Boolean MODULOIsKey(){
				    return false;
				}
				public Integer MODULOLength(){
				    return 10;
				}
				public Integer MODULOPrecision(){
				    return 0;
				}
				public String MODULODefault(){
				
					return null;
				
				}
				public String MODULOComment(){
				
				    return "";
				
				}
				public String MODULOPattern(){
				
					return "";
				
				}
				public String MODULOOriginalDbColumnName(){
				
					return "MODULO";
				
				}

				
			    public BigDecimal TGESTION;

				public BigDecimal getTGESTION () {
					return this.TGESTION;
				}

				public Boolean TGESTIONIsNullable(){
				    return true;
				}
				public Boolean TGESTIONIsKey(){
				    return false;
				}
				public Integer TGESTIONLength(){
				    return 0;
				}
				public Integer TGESTIONPrecision(){
				    return null;
				}
				public String TGESTIONDefault(){
				
					return "";
				
				}
				public String TGESTIONComment(){
				
				    return "";
				
				}
				public String TGESTIONPattern(){
				
					return "";
				
				}
				public String TGESTIONOriginalDbColumnName(){
				
					return "TGESTION";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
					this.UNIDAD = readString(dis);
					
					this.NUMERADOR_DESCRIPCION = readString(dis);
					
					this.DENOMINADOR_DESCRIPCION = readString(dis);
					
					this.INDICADOR_DESCRIPCION = readString(dis);
					
						this.CATEGORIA = (BigDecimal) dis.readObject();
					
					this.NUMERADOR_NOMBRE = readString(dis);
					
					this.DENOMINADOR_NOMBRE = readString(dis);
					
						this.TENDENCIA = (BigDecimal) dis.readObject();
					
					this.MODULO = readString(dis);
					
						this.TGESTION = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
					this.UNIDAD = readString(dis);
					
					this.NUMERADOR_DESCRIPCION = readString(dis);
					
					this.DENOMINADOR_DESCRIPCION = readString(dis);
					
					this.INDICADOR_DESCRIPCION = readString(dis);
					
						this.CATEGORIA = (BigDecimal) dis.readObject();
					
					this.NUMERADOR_NOMBRE = readString(dis);
					
					this.DENOMINADOR_NOMBRE = readString(dis);
					
						this.TENDENCIA = (BigDecimal) dis.readObject();
					
					this.MODULO = readString(dis);
					
						this.TGESTION = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
					// String
				
						writeString(this.UNIDAD,dos);
					
					// String
				
						writeString(this.NUMERADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.DENOMINADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.INDICADOR_DESCRIPCION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CATEGORIA);
					
					// String
				
						writeString(this.NUMERADOR_NOMBRE,dos);
					
					// String
				
						writeString(this.DENOMINADOR_NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TENDENCIA);
					
					// String
				
						writeString(this.MODULO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TGESTION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
					// String
				
						writeString(this.UNIDAD,dos);
					
					// String
				
						writeString(this.NUMERADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.DENOMINADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.INDICADOR_DESCRIPCION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CATEGORIA);
					
					// String
				
						writeString(this.NUMERADOR_NOMBRE,dos);
					
					// String
				
						writeString(this.DENOMINADOR_NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TENDENCIA);
					
					// String
				
						writeString(this.MODULO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TGESTION);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CIRCULAR="+CIRCULAR);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",META="+String.valueOf(META));
		sb.append(",UNIDAD="+UNIDAD);
		sb.append(",NUMERADOR_DESCRIPCION="+NUMERADOR_DESCRIPCION);
		sb.append(",DENOMINADOR_DESCRIPCION="+DENOMINADOR_DESCRIPCION);
		sb.append(",INDICADOR_DESCRIPCION="+INDICADOR_DESCRIPCION);
		sb.append(",CATEGORIA="+String.valueOf(CATEGORIA));
		sb.append(",NUMERADOR_NOMBRE="+NUMERADOR_NOMBRE);
		sb.append(",DENOMINADOR_NOMBRE="+DENOMINADOR_NOMBRE);
		sb.append(",TENDENCIA="+String.valueOf(TENDENCIA));
		sb.append(",MODULO="+MODULO);
		sb.append(",TGESTION="+String.valueOf(TGESTION));
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_14Process(globalMap);
		tOracleInput_15Process(globalMap);

		row33Struct row33 = new row33Struct();
Actualiza1Struct Actualiza1 = new Actualiza1Struct();
Inserta10Struct Inserta10 = new Inserta10Struct();





	
	/**
	 * [tOracleOutput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_21", false);
		start_Hash.put("tOracleOutput_21", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Actualiza1");
					}
				
		int tos_count_tOracleOutput_21 = 0;
		






        int updateKeyCount_tOracleOutput_21 = 1;
        if(updateKeyCount_tOracleOutput_21 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_21 == 17 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_21 = 0;
    int nb_line_update_tOracleOutput_21 = 0;
    int nb_line_inserted_tOracleOutput_21 = 0;
    int nb_line_deleted_tOracleOutput_21 = 0;
    int nb_line_rejected_tOracleOutput_21 = 0;

    int tmp_batchUpdateCount_tOracleOutput_21 = 0;

    int deletedCount_tOracleOutput_21=0;
    int updatedCount_tOracleOutput_21=0;
    int insertedCount_tOracleOutput_21=0;
    int rowsToCommitCount_tOracleOutput_21=0;
    int rejectedCount_tOracleOutput_21=0;

    boolean whetherReject_tOracleOutput_21 = false;

    java.sql.Connection conn_tOracleOutput_21 = null;

    //optional table
    String dbschema_tOracleOutput_21 = null;
    String tableName_tOracleOutput_21 = null;
                    String driverClass_tOracleOutput_21 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_21);
                String url_tOracleOutput_21 = null;
                    url_tOracleOutput_21 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_21 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_21 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_21 = decryptedPassword_tOracleOutput_21;
                dbschema_tOracleOutput_21 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_21 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_21.put("user",dbUser_tOracleOutput_21);
                    atnParamsPrope_tOracleOutput_21.put("password",dbPwd_tOracleOutput_21);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_21.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_21 = java.sql.DriverManager.getConnection(url_tOracleOutput_21, atnParamsPrope_tOracleOutput_21);
        resourceMap.put("conn_tOracleOutput_21", conn_tOracleOutput_21);
            conn_tOracleOutput_21.setAutoCommit(false);
            int commitEvery_tOracleOutput_21 = 1000;
            int commitCounter_tOracleOutput_21 = 0;
        int batchSize_tOracleOutput_21 = 1000;
        int batchSizeCounter_tOracleOutput_21=0;
        int count_tOracleOutput_21=0;

        if(dbschema_tOracleOutput_21 == null || dbschema_tOracleOutput_21.trim().length() == 0) {
            tableName_tOracleOutput_21 = ("BGEN_TINDICADORES");
        } else {
            tableName_tOracleOutput_21 = dbschema_tOracleOutput_21 + "." + ("BGEN_TINDICADORES");
        }
                String update_tOracleOutput_21 = "UPDATE " + tableName_tOracleOutput_21 + " SET CODIGO = ?,NOMBRE = ?,CIRCULAR = ?,ESPECIALIDADES_ID = ?,META = ?,UNIDAD = ?,NUMERADOR_DESCRIPCION = ?,DENOMINADOR_DESCRIPCION = ?,INDICADOR_DESCRIPCION = ?,CATEGORIA = ?,NUMERADOR_NOMBRE = ?,DENOMINADOR_NOMBRE = ?,TENDENCIA = ?,MODULO = ?,TGESTION = ?,ESTREGISTRO_ID = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_21 = conn_tOracleOutput_21.prepareStatement(update_tOracleOutput_21);
                resourceMap.put("pstmt_tOracleOutput_21", pstmt_tOracleOutput_21);





 



/**
 * [tOracleOutput_21 begin ] stop
 */




	
	/**
	 * [tOracleOutput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_22", false);
		start_Hash.put("tOracleOutput_22", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_22";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta10");
					}
				
		int tos_count_tOracleOutput_22 = 0;
		






    
    int nb_line_tOracleOutput_22 = 0;
    int nb_line_update_tOracleOutput_22 = 0;
    int nb_line_inserted_tOracleOutput_22 = 0;
    int nb_line_deleted_tOracleOutput_22 = 0;
    int nb_line_rejected_tOracleOutput_22 = 0;

    int tmp_batchUpdateCount_tOracleOutput_22 = 0;

    int deletedCount_tOracleOutput_22=0;
    int updatedCount_tOracleOutput_22=0;
    int insertedCount_tOracleOutput_22=0;
    int rowsToCommitCount_tOracleOutput_22=0;
    int rejectedCount_tOracleOutput_22=0;

    boolean whetherReject_tOracleOutput_22 = false;

    java.sql.Connection conn_tOracleOutput_22 = null;

    //optional table
    String dbschema_tOracleOutput_22 = null;
    String tableName_tOracleOutput_22 = null;
                    String driverClass_tOracleOutput_22 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_22);
                String url_tOracleOutput_22 = null;
                    url_tOracleOutput_22 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_22 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_22 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_22 = decryptedPassword_tOracleOutput_22;
                dbschema_tOracleOutput_22 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_22 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_22.put("user",dbUser_tOracleOutput_22);
                    atnParamsPrope_tOracleOutput_22.put("password",dbPwd_tOracleOutput_22);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_22.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_22 = java.sql.DriverManager.getConnection(url_tOracleOutput_22, atnParamsPrope_tOracleOutput_22);
        resourceMap.put("conn_tOracleOutput_22", conn_tOracleOutput_22);
            conn_tOracleOutput_22.setAutoCommit(false);
            int commitEvery_tOracleOutput_22 = 1000;
            int commitCounter_tOracleOutput_22 = 0;
        int batchSize_tOracleOutput_22 = 1000;
        int batchSizeCounter_tOracleOutput_22=0;
        int count_tOracleOutput_22=0;

        if(dbschema_tOracleOutput_22 == null || dbschema_tOracleOutput_22.trim().length() == 0) {
            tableName_tOracleOutput_22 = ("BGEN_TINDICADORES");
        } else {
            tableName_tOracleOutput_22 = dbschema_tOracleOutput_22 + "." + ("BGEN_TINDICADORES");
        }
                String insert_tOracleOutput_22 = "INSERT INTO " + tableName_tOracleOutput_22 + " (ID,CODIGO,NOMBRE,CIRCULAR,ESPECIALIDADES_ID,META,UNIDAD,NUMERADOR_DESCRIPCION,DENOMINADOR_DESCRIPCION,INDICADOR_DESCRIPCION,CATEGORIA,NUMERADOR_NOMBRE,DENOMINADOR_NOMBRE,TENDENCIA,MODULO,TGESTION,ESTREGISTRO_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_22 = conn_tOracleOutput_22.prepareStatement(insert_tOracleOutput_22);
                        resourceMap.put("pstmt_tOracleOutput_22", pstmt_tOracleOutput_22);





 



/**
 * [tOracleOutput_22 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) 
					globalMap.get( "tHash_Lookup_row34" ))
					;					
					
	

row34Struct row34HashKey = new row34Struct();
row34Struct row34Default = new row34Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct> tHash_Lookup_row35 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct>) 
					globalMap.get( "tHash_Lookup_row35" ))
					;					
					
	

row35Struct row35HashKey = new row35Struct();
row35Struct row35Default = new row35Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
Actualiza1Struct Actualiza1_tmp = new Actualiza1Struct();
Inserta10Struct Inserta10_tmp = new Inserta10Struct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tOracleInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_13", false);
		start_Hash.put("tOracleInput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_13";
	
	
		int tos_count_tOracleInput_13 = 0;
		
	


	
		    int nb_line_tOracleInput_13 = 0;
		    java.sql.Connection conn_tOracleInput_13 = null;
				conn_tOracleInput_13 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_13 = false;
				boolean isConnectionWrapped_tOracleInput_13 = !(conn_tOracleInput_13 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_13.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_13 = null;
                if (isConnectionWrapped_tOracleInput_13) {
					unwrappedOraConn_tOracleInput_13 = conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_13 != null) {
                        isTimeZoneNull_tOracleInput_13 = (unwrappedOraConn_tOracleInput_13.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_13 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_13).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_13) {
					java.sql.Statement stmtGetTZ_tOracleInput_13 = conn_tOracleInput_13.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_13 = stmtGetTZ_tOracleInput_13.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_13 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_13.next()) {
						sessionTimezone_tOracleInput_13 = rsGetTZ_tOracleInput_13.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_13 && unwrappedOraConn_tOracleInput_13 != null) {
                        unwrappedOraConn_tOracleInput_13.setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_13).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_13 = conn_tOracleInput_13.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_13.setFetchSize(1000);


		    String dbquery_tOracleInput_13 = "SELECT    TIN.ID \n        , TIN.CODIGO \n        , TIN.NOMBRE\n        , TIN.CIRCULAR\n        , TIN.ESPECIALIDADES_ID"
+"\n        , TIN.META\n        , TIN.UNIDAD\n        , TIN.NUMERADOR_DESCRIPCION\n        , TIN.DENOMINADOR_DESCRIPCION\n"
+"        , TIN.INDICADOR_DESCRIPCION\n        , TIN.CATEGORIA\n        , TIN.NUMERADOR_NOMBRE\n        , TIN.DENOMINADOR_"
+"NOMBRE\n        , TIN.TENDENCIA\n        , TIN.MODULO\n        , TIN.TGESTION\n        , TIN.ESTREGISTRO_ID \nFROM GEN_T"
+"INDICADORES TIN\nWHERE TIN.MODULO = 'ACM'";
		    

		    globalMap.put("tOracleInput_13_QUERY",dbquery_tOracleInput_13);

		    java.sql.ResultSet rs_tOracleInput_13 = null;

		    try {
		    	rs_tOracleInput_13 = stmt_tOracleInput_13.executeQuery(dbquery_tOracleInput_13);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_13 = rs_tOracleInput_13.getMetaData();
		    	int colQtyInRs_tOracleInput_13 = rsmd_tOracleInput_13.getColumnCount();

		    String tmpContent_tOracleInput_13 = null;
		    
		    
		    while (rs_tOracleInput_13.next()) {
		        nb_line_tOracleInput_13++;
		        
							if(colQtyInRs_tOracleInput_13 < 1) {
								row33.ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(1) != null) {
						row33.ID = rs_tOracleInput_13.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 2) {
								row33.CODIGO = null;
							} else {
	                         		
        	row33.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 3) {
								row33.NOMBRE = null;
							} else {
	                         		
        	row33.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 4) {
								row33.CIRCULAR = null;
							} else {
	                         		
        	row33.CIRCULAR = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 5) {
								row33.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(5) != null) {
						row33.ESPECIALIDADES_ID = rs_tOracleInput_13.getBigDecimal(5);
					} else {
				
						row33.ESPECIALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 6) {
								row33.META = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(6) != null) {
						row33.META = rs_tOracleInput_13.getBigDecimal(6);
					} else {
				
						row33.META = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 7) {
								row33.UNIDAD = null;
							} else {
	                         		
        	row33.UNIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 8) {
								row33.NUMERADOR_DESCRIPCION = null;
							} else {
	                         		
        	row33.NUMERADOR_DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 9) {
								row33.DENOMINADOR_DESCRIPCION = null;
							} else {
	                         		
        	row33.DENOMINADOR_DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 10) {
								row33.INDICADOR_DESCRIPCION = null;
							} else {
	                         		
        	row33.INDICADOR_DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 11) {
								row33.CATEGORIA = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(11) != null) {
						row33.CATEGORIA = rs_tOracleInput_13.getBigDecimal(11);
					} else {
				
						row33.CATEGORIA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 12) {
								row33.NUMERADOR_NOMBRE = null;
							} else {
	                         		
        	row33.NUMERADOR_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 13) {
								row33.DENOMINADOR_NOMBRE = null;
							} else {
	                         		
        	row33.DENOMINADOR_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 14) {
								row33.TENDENCIA = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(14) != null) {
						row33.TENDENCIA = rs_tOracleInput_13.getBigDecimal(14);
					} else {
				
						row33.TENDENCIA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 15) {
								row33.MODULO = null;
							} else {
	                         		
        	row33.MODULO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 16) {
								row33.TGESTION = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(16) != null) {
						row33.TGESTION = rs_tOracleInput_13.getBigDecimal(16);
					} else {
				
						row33.TGESTION = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 17) {
								row33.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(17) != null) {
						row33.ESTREGISTRO_ID = rs_tOracleInput_13.getBigDecimal(17);
					} else {
				
						row33.ESTREGISTRO_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_13 begin ] stop
 */
	
	/**
	 * [tOracleInput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 


	tos_count_tOracleInput_13++;

/**
 * [tOracleInput_13 main ] stop
 */
	
	/**
	 * [tOracleInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row33"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
						row34Struct row34 = null;
					
						row35Struct row35 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_10 = false;
		boolean mainRowRejected_tMap_10 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row34" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow34 = false;
       		  	    	
       		  	    	
 							row34Struct row34ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_10 = false;
								
                        		    		    row34HashKey.ID = row33.ID ;
                        		    		
                        		    		    row34HashKey.CODIGO = row33.CODIGO ;
                        		    		
                        		    		    row34HashKey.NOMBRE = row33.NOMBRE ;
                        		    		
                        		    		    row34HashKey.CIRCULAR = row33.CIRCULAR ;
                        		    		
                        		    		    row34HashKey.ESPECIALIDADES_ID = row33.ESPECIALIDADES_ID ;
                        		    		
                        		    		    row34HashKey.META = row33.META ;
                        		    		
                        		    		    row34HashKey.UNIDAD = row33.UNIDAD;
                        		    		
                        		    		    row34HashKey.NUMERADOR_DESCRIPCION = row33.NUMERADOR_DESCRIPCION;
                        		    		
                        		    		    row34HashKey.DENOMINADOR_DESCRIPCION = row33.DENOMINADOR_DESCRIPCION;
                        		    		
                        		    		    row34HashKey.INDICADOR_DESCRIPCION = row33.INDICADOR_DESCRIPCION;
                        		    		
                        		    		    row34HashKey.CATEGORIA = row33.CATEGORIA;
                        		    		
                        		    		    row34HashKey.NUMERADOR_NOMBRE = row33.NUMERADOR_NOMBRE;
                        		    		
                        		    		    row34HashKey.DENOMINADOR_NOMBRE = row33.DENOMINADOR_NOMBRE;
                        		    		
                        		    		    row34HashKey.TENDENCIA = row33.TENDENCIA;
                        		    		
                        		    		    row34HashKey.MODULO = row33.MODULO;
                        		    		
                        		    		    row34HashKey.TGESTION = row33.TGESTION;
                        		    		
                        		    		    row34HashKey.ESTREGISTRO_ID = row33.ESTREGISTRO_ID;
                        		    		

								
		                        	row34HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row34.lookup( row34HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row34 != null && tHash_Lookup_row34.getCount(row34HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row34' and it contains more one result from keys :  row34.ID = '" + row34HashKey.ID + "', row34.CODIGO = '" + row34HashKey.CODIGO + "', row34.NOMBRE = '" + row34HashKey.NOMBRE + "', row34.CIRCULAR = '" + row34HashKey.CIRCULAR + "', row34.ESPECIALIDADES_ID = '" + row34HashKey.ESPECIALIDADES_ID + "', row34.META = '" + row34HashKey.META + "', row34.UNIDAD = '" + row34HashKey.UNIDAD + "', row34.NUMERADOR_DESCRIPCION = '" + row34HashKey.NUMERADOR_DESCRIPCION + "', row34.DENOMINADOR_DESCRIPCION = '" + row34HashKey.DENOMINADOR_DESCRIPCION + "', row34.INDICADOR_DESCRIPCION = '" + row34HashKey.INDICADOR_DESCRIPCION + "', row34.CATEGORIA = '" + row34HashKey.CATEGORIA + "', row34.NUMERADOR_NOMBRE = '" + row34HashKey.NUMERADOR_NOMBRE + "', row34.DENOMINADOR_NOMBRE = '" + row34HashKey.DENOMINADOR_NOMBRE + "', row34.TENDENCIA = '" + row34HashKey.TENDENCIA + "', row34.MODULO = '" + row34HashKey.MODULO + "', row34.TGESTION = '" + row34HashKey.TGESTION + "', row34.ESTREGISTRO_ID = '" + row34HashKey.ESTREGISTRO_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row34Struct fromLookup_row34 = null;
							row34 = row34Default;
										 
							
								 
							
							
								if (tHash_Lookup_row34 !=null && tHash_Lookup_row34.hasNext()) { // G 099
								
							
								
								fromLookup_row34 = tHash_Lookup_row34.next();

							
							
								} // G 099
							
							

							if(fromLookup_row34 != null) {
								row34 = fromLookup_row34;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row35" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow35 = false;
       		  	    	
       		  	    	
 							row35Struct row35ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_10 = false;
								
                        		    		    row35HashKey.ID = row33.ID;
                        		    		

								
		                        	row35HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row35.lookup( row35HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row35 != null && tHash_Lookup_row35.getCount(row35HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row35' and it contains more one result from keys :  row35.ID = '" + row35HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row35Struct fromLookup_row35 = null;
							row35 = row35Default;
										 
							
								 
							
							
								if (tHash_Lookup_row35 !=null && tHash_Lookup_row35.hasNext()) { // G 099
								
							
								
								fromLookup_row35 = tHash_Lookup_row35.next();

							
							
								} // G 099
							
							

							if(fromLookup_row35 != null) {
								row35 = fromLookup_row35;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

Actualiza1 = null;
Inserta10 = null;


// # Output table : 'Actualiza1'
// # Filter conditions 
if( 

row35.ID !=null &&  row34.ID == null

 ) {
Actualiza1_tmp.ID = row33.ID ;
Actualiza1_tmp.CODIGO = row33.CODIGO ;
Actualiza1_tmp.NOMBRE = row33.NOMBRE ;
Actualiza1_tmp.CIRCULAR = row33.CIRCULAR ;
Actualiza1_tmp.ESPECIALIDADES_ID = row33.ESPECIALIDADES_ID ;
Actualiza1_tmp.META = row33.META ;
Actualiza1_tmp.UNIDAD = row33.UNIDAD ;
Actualiza1_tmp.NUMERADOR_DESCRIPCION = row33.NUMERADOR_DESCRIPCION ;
Actualiza1_tmp.DENOMINADOR_DESCRIPCION = row33.DENOMINADOR_DESCRIPCION ;
Actualiza1_tmp.INDICADOR_DESCRIPCION = row33.INDICADOR_DESCRIPCION ;
Actualiza1_tmp.CATEGORIA = row33.CATEGORIA ;
Actualiza1_tmp.NUMERADOR_NOMBRE = row33.NUMERADOR_NOMBRE ;
Actualiza1_tmp.DENOMINADOR_NOMBRE = row33.DENOMINADOR_NOMBRE ;
Actualiza1_tmp.TENDENCIA = row33.TENDENCIA ;
Actualiza1_tmp.MODULO = row33.MODULO ;
Actualiza1_tmp.TGESTION = row33.TGESTION ;
Actualiza1_tmp.ESTREGISTRO_ID = row33.ESTREGISTRO_ID ;
Actualiza1 = Actualiza1_tmp;
} // closing filter/reject

// # Output table : 'Inserta10'
// # Filter conditions 
if( 

row35.ID == null

 ) {
Inserta10_tmp.ID = row33.ID ;
Inserta10_tmp.CODIGO = row33.CODIGO ;
Inserta10_tmp.NOMBRE = row33.NOMBRE ;
Inserta10_tmp.CIRCULAR = row33.CIRCULAR ;
Inserta10_tmp.ESPECIALIDADES_ID = row33.ESPECIALIDADES_ID ;
Inserta10_tmp.META = row33.META ;
Inserta10_tmp.UNIDAD = row33.UNIDAD ;
Inserta10_tmp.NUMERADOR_DESCRIPCION = row33.NUMERADOR_DESCRIPCION ;
Inserta10_tmp.DENOMINADOR_DESCRIPCION = row33.DENOMINADOR_DESCRIPCION ;
Inserta10_tmp.INDICADOR_DESCRIPCION = row33.INDICADOR_DESCRIPCION ;
Inserta10_tmp.CATEGORIA = row33.CATEGORIA ;
Inserta10_tmp.NUMERADOR_NOMBRE = row33.NUMERADOR_NOMBRE ;
Inserta10_tmp.DENOMINADOR_NOMBRE = row33.DENOMINADOR_NOMBRE ;
Inserta10_tmp.TENDENCIA = row33.TENDENCIA ;
Inserta10_tmp.MODULO = row33.MODULO ;
Inserta10_tmp.TGESTION = row33.TGESTION ;
Inserta10_tmp.ESTREGISTRO_ID = row33.ESTREGISTRO_ID ;
Inserta10 = Inserta10_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "Actualiza1"
if(Actualiza1 != null) { 



	
	/**
	 * [tOracleOutput_21 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Actualiza1"
						
						);
					}
					



        whetherReject_tOracleOutput_21 = false;
                    if(Actualiza1.CODIGO == null) {
pstmt_tOracleOutput_21.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(1, Actualiza1.CODIGO);
}

                    if(Actualiza1.NOMBRE == null) {
pstmt_tOracleOutput_21.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(2, Actualiza1.NOMBRE);
}

                    if(Actualiza1.CIRCULAR == null) {
pstmt_tOracleOutput_21.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(3, Actualiza1.CIRCULAR);
}

                    pstmt_tOracleOutput_21.setBigDecimal(4, Actualiza1.ESPECIALIDADES_ID);

                    pstmt_tOracleOutput_21.setBigDecimal(5, Actualiza1.META);

                    if(Actualiza1.UNIDAD == null) {
pstmt_tOracleOutput_21.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(6, Actualiza1.UNIDAD);
}

                    if(Actualiza1.NUMERADOR_DESCRIPCION == null) {
pstmt_tOracleOutput_21.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(7, Actualiza1.NUMERADOR_DESCRIPCION);
}

                    if(Actualiza1.DENOMINADOR_DESCRIPCION == null) {
pstmt_tOracleOutput_21.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(8, Actualiza1.DENOMINADOR_DESCRIPCION);
}

                    if(Actualiza1.INDICADOR_DESCRIPCION == null) {
pstmt_tOracleOutput_21.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(9, Actualiza1.INDICADOR_DESCRIPCION);
}

                    pstmt_tOracleOutput_21.setBigDecimal(10, Actualiza1.CATEGORIA);

                    if(Actualiza1.NUMERADOR_NOMBRE == null) {
pstmt_tOracleOutput_21.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(11, Actualiza1.NUMERADOR_NOMBRE);
}

                    if(Actualiza1.DENOMINADOR_NOMBRE == null) {
pstmt_tOracleOutput_21.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(12, Actualiza1.DENOMINADOR_NOMBRE);
}

                    pstmt_tOracleOutput_21.setBigDecimal(13, Actualiza1.TENDENCIA);

                    if(Actualiza1.MODULO == null) {
pstmt_tOracleOutput_21.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(14, Actualiza1.MODULO);
}

                    pstmt_tOracleOutput_21.setBigDecimal(15, Actualiza1.TGESTION);

                    pstmt_tOracleOutput_21.setBigDecimal(16, Actualiza1.ESTREGISTRO_ID);


                    pstmt_tOracleOutput_21.setBigDecimal(17 + count_tOracleOutput_21, Actualiza1.ID);

                pstmt_tOracleOutput_21.addBatch();
                nb_line_tOracleOutput_21++;
                batchSizeCounter_tOracleOutput_21++;
            if (batchSize_tOracleOutput_21 > 0 &&  batchSize_tOracleOutput_21 <= batchSizeCounter_tOracleOutput_21) {
                try {
                    pstmt_tOracleOutput_21.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_21){
globalMap.put("tOracleOutput_21_ERROR_MESSAGE",e_tOracleOutput_21.getMessage());
			        java.sql.SQLException ne_tOracleOutput_21 = e_tOracleOutput_21.getNextException(),sqle_tOracleOutput_21=null;
			    	String errormessage_tOracleOutput_21;
					if (ne_tOracleOutput_21 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_21 = new java.sql.SQLException(e_tOracleOutput_21.getMessage() + "\ncaused by: " + ne_tOracleOutput_21.getMessage(), ne_tOracleOutput_21.getSQLState(), ne_tOracleOutput_21.getErrorCode(), ne_tOracleOutput_21);
						errormessage_tOracleOutput_21 = sqle_tOracleOutput_21.getMessage();
					}else{
						errormessage_tOracleOutput_21 = e_tOracleOutput_21.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_21);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_21 = pstmt_tOracleOutput_21.getUpdateCount();
                    updatedCount_tOracleOutput_21
                += (tmp_batchUpdateCount_tOracleOutput_21!=-1?tmp_batchUpdateCount_tOracleOutput_21:0);
                rowsToCommitCount_tOracleOutput_21 += (tmp_batchUpdateCount_tOracleOutput_21!=-1?tmp_batchUpdateCount_tOracleOutput_21:0);
                batchSizeCounter_tOracleOutput_21 = 0;
            }
                commitCounter_tOracleOutput_21++;
                if(commitEvery_tOracleOutput_21 <= commitCounter_tOracleOutput_21) {
                    if(batchSizeCounter_tOracleOutput_21 > 0) {
                        try {
                            pstmt_tOracleOutput_21.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_21){
globalMap.put("tOracleOutput_21_ERROR_MESSAGE",e_tOracleOutput_21.getMessage());
					        java.sql.SQLException ne_tOracleOutput_21 = e_tOracleOutput_21.getNextException(),sqle_tOracleOutput_21=null;
					    	String errormessage_tOracleOutput_21;
							if (ne_tOracleOutput_21 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_21 = new java.sql.SQLException(e_tOracleOutput_21.getMessage() + "\ncaused by: " + ne_tOracleOutput_21.getMessage(), ne_tOracleOutput_21.getSQLState(), ne_tOracleOutput_21.getErrorCode(), ne_tOracleOutput_21);
								errormessage_tOracleOutput_21 = sqle_tOracleOutput_21.getMessage();
							}else{
								errormessage_tOracleOutput_21 = e_tOracleOutput_21.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_21);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_21 = pstmt_tOracleOutput_21.getUpdateCount();
                            updatedCount_tOracleOutput_21
                        += (tmp_batchUpdateCount_tOracleOutput_21!=-1?tmp_batchUpdateCount_tOracleOutput_21:0);
                        rowsToCommitCount_tOracleOutput_21 += (tmp_batchUpdateCount_tOracleOutput_21!=-1?tmp_batchUpdateCount_tOracleOutput_21:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_21 != 0){
                    	
                    }
                    conn_tOracleOutput_21.commit();
                    if(rowsToCommitCount_tOracleOutput_21 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_21 = 0;
                    }
                    commitCounter_tOracleOutput_21=0;
                    	batchSizeCounter_tOracleOutput_21=0;
                }

 


	tos_count_tOracleOutput_21++;

/**
 * [tOracleOutput_21 main ] stop
 */
	
	/**
	 * [tOracleOutput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	

 



/**
 * [tOracleOutput_21 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	

 



/**
 * [tOracleOutput_21 process_data_end ] stop
 */

} // End of branch "Actualiza1"




// Start of branch "Inserta10"
if(Inserta10 != null) { 



	
	/**
	 * [tOracleOutput_22 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta10"
						
						);
					}
					



        whetherReject_tOracleOutput_22 = false;
                        pstmt_tOracleOutput_22.setBigDecimal(1, Inserta10.ID);

                        if(Inserta10.CODIGO == null) {
pstmt_tOracleOutput_22.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_22.setString(2, Inserta10.CODIGO);
}

                        if(Inserta10.NOMBRE == null) {
pstmt_tOracleOutput_22.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_22.setString(3, Inserta10.NOMBRE);
}

                        if(Inserta10.CIRCULAR == null) {
pstmt_tOracleOutput_22.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_22.setString(4, Inserta10.CIRCULAR);
}

                        pstmt_tOracleOutput_22.setBigDecimal(5, Inserta10.ESPECIALIDADES_ID);

                        pstmt_tOracleOutput_22.setBigDecimal(6, Inserta10.META);

                        if(Inserta10.UNIDAD == null) {
pstmt_tOracleOutput_22.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_22.setString(7, Inserta10.UNIDAD);
}

                        if(Inserta10.NUMERADOR_DESCRIPCION == null) {
pstmt_tOracleOutput_22.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_22.setString(8, Inserta10.NUMERADOR_DESCRIPCION);
}

                        if(Inserta10.DENOMINADOR_DESCRIPCION == null) {
pstmt_tOracleOutput_22.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_22.setString(9, Inserta10.DENOMINADOR_DESCRIPCION);
}

                        if(Inserta10.INDICADOR_DESCRIPCION == null) {
pstmt_tOracleOutput_22.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_22.setString(10, Inserta10.INDICADOR_DESCRIPCION);
}

                        pstmt_tOracleOutput_22.setBigDecimal(11, Inserta10.CATEGORIA);

                        if(Inserta10.NUMERADOR_NOMBRE == null) {
pstmt_tOracleOutput_22.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_22.setString(12, Inserta10.NUMERADOR_NOMBRE);
}

                        if(Inserta10.DENOMINADOR_NOMBRE == null) {
pstmt_tOracleOutput_22.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_22.setString(13, Inserta10.DENOMINADOR_NOMBRE);
}

                        pstmt_tOracleOutput_22.setBigDecimal(14, Inserta10.TENDENCIA);

                        if(Inserta10.MODULO == null) {
pstmt_tOracleOutput_22.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_22.setString(15, Inserta10.MODULO);
}

                        pstmt_tOracleOutput_22.setBigDecimal(16, Inserta10.TGESTION);

                        pstmt_tOracleOutput_22.setBigDecimal(17, Inserta10.ESTREGISTRO_ID);

                pstmt_tOracleOutput_22.addBatch();
                nb_line_tOracleOutput_22++;
                batchSizeCounter_tOracleOutput_22++;
            if (batchSize_tOracleOutput_22 > 0 &&  batchSize_tOracleOutput_22 <= batchSizeCounter_tOracleOutput_22) {
                try {
                    pstmt_tOracleOutput_22.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_22){
globalMap.put("tOracleOutput_22_ERROR_MESSAGE",e_tOracleOutput_22.getMessage());
			        java.sql.SQLException ne_tOracleOutput_22 = e_tOracleOutput_22.getNextException(),sqle_tOracleOutput_22=null;
			    	String errormessage_tOracleOutput_22;
					if (ne_tOracleOutput_22 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_22 = new java.sql.SQLException(e_tOracleOutput_22.getMessage() + "\ncaused by: " + ne_tOracleOutput_22.getMessage(), ne_tOracleOutput_22.getSQLState(), ne_tOracleOutput_22.getErrorCode(), ne_tOracleOutput_22);
						errormessage_tOracleOutput_22 = sqle_tOracleOutput_22.getMessage();
					}else{
						errormessage_tOracleOutput_22 = e_tOracleOutput_22.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_22);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_22 = pstmt_tOracleOutput_22.getUpdateCount();
                    insertedCount_tOracleOutput_22
                += (tmp_batchUpdateCount_tOracleOutput_22!=-1?tmp_batchUpdateCount_tOracleOutput_22:0);
                rowsToCommitCount_tOracleOutput_22 += (tmp_batchUpdateCount_tOracleOutput_22!=-1?tmp_batchUpdateCount_tOracleOutput_22:0);
                batchSizeCounter_tOracleOutput_22 = 0;
            }
                commitCounter_tOracleOutput_22++;
                if(commitEvery_tOracleOutput_22 <= commitCounter_tOracleOutput_22) {
                    if(batchSizeCounter_tOracleOutput_22 > 0) {
                        try {
                            pstmt_tOracleOutput_22.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_22){
globalMap.put("tOracleOutput_22_ERROR_MESSAGE",e_tOracleOutput_22.getMessage());
					        java.sql.SQLException ne_tOracleOutput_22 = e_tOracleOutput_22.getNextException(),sqle_tOracleOutput_22=null;
					    	String errormessage_tOracleOutput_22;
							if (ne_tOracleOutput_22 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_22 = new java.sql.SQLException(e_tOracleOutput_22.getMessage() + "\ncaused by: " + ne_tOracleOutput_22.getMessage(), ne_tOracleOutput_22.getSQLState(), ne_tOracleOutput_22.getErrorCode(), ne_tOracleOutput_22);
								errormessage_tOracleOutput_22 = sqle_tOracleOutput_22.getMessage();
							}else{
								errormessage_tOracleOutput_22 = e_tOracleOutput_22.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_22);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_22 = pstmt_tOracleOutput_22.getUpdateCount();
                            insertedCount_tOracleOutput_22
                        += (tmp_batchUpdateCount_tOracleOutput_22!=-1?tmp_batchUpdateCount_tOracleOutput_22:0);
                        rowsToCommitCount_tOracleOutput_22 += (tmp_batchUpdateCount_tOracleOutput_22!=-1?tmp_batchUpdateCount_tOracleOutput_22:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_22 != 0){
                    	
                    }
                    conn_tOracleOutput_22.commit();
                    if(rowsToCommitCount_tOracleOutput_22 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_22 = 0;
                    }
                    commitCounter_tOracleOutput_22=0;
                    	batchSizeCounter_tOracleOutput_22=0;
                }

 


	tos_count_tOracleOutput_22++;

/**
 * [tOracleOutput_22 main ] stop
 */
	
	/**
	 * [tOracleOutput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	

 



/**
 * [tOracleOutput_22 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	

 



/**
 * [tOracleOutput_22 process_data_end ] stop
 */

} // End of branch "Inserta10"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

}
}finally{
	if (rs_tOracleInput_13 != null) {
		rs_tOracleInput_13.close();
	}
	if (stmt_tOracleInput_13 != null) {
		stmt_tOracleInput_13.close();
	}
}

globalMap.put("tOracleInput_13_NB_LINE",nb_line_tOracleInput_13);
 

ok_Hash.put("tOracleInput_13", true);
end_Hash.put("tOracleInput_13", System.currentTimeMillis());




/**
 * [tOracleInput_13 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row34 != null) {
						tHash_Lookup_row34.endGet();
					}
					globalMap.remove( "tHash_Lookup_row34" );

					
					
				
					if(tHash_Lookup_row35 != null) {
						tHash_Lookup_row35.endGet();
					}
					globalMap.remove( "tHash_Lookup_row35" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tOracleOutput_21 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_21 > 0) {
            try {
            	if (pstmt_tOracleOutput_21 != null) {
					
					pstmt_tOracleOutput_21.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_21){
globalMap.put("tOracleOutput_21_ERROR_MESSAGE",e_tOracleOutput_21.getMessage());
		        java.sql.SQLException ne_tOracleOutput_21 = e_tOracleOutput_21.getNextException(),sqle_tOracleOutput_21=null;
		    	String errormessage_tOracleOutput_21;
				if (ne_tOracleOutput_21 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_21 = new java.sql.SQLException(e_tOracleOutput_21.getMessage() + "\ncaused by: " + ne_tOracleOutput_21.getMessage(), ne_tOracleOutput_21.getSQLState(), ne_tOracleOutput_21.getErrorCode(), ne_tOracleOutput_21);
					errormessage_tOracleOutput_21 = sqle_tOracleOutput_21.getMessage();
				}else{
					errormessage_tOracleOutput_21 = e_tOracleOutput_21.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_21);
            	
        	}
        	if (pstmt_tOracleOutput_21 != null) {
            	tmp_batchUpdateCount_tOracleOutput_21 = pstmt_tOracleOutput_21.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_21
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_21!=-1?tmp_batchUpdateCount_tOracleOutput_21:0);
				rowsToCommitCount_tOracleOutput_21 += (tmp_batchUpdateCount_tOracleOutput_21!=-1?tmp_batchUpdateCount_tOracleOutput_21:0);
            }
        }
        if(pstmt_tOracleOutput_21 != null) {
			
				pstmt_tOracleOutput_21.close();
				resourceMap.remove("pstmt_tOracleOutput_21");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_21", true);
		if(commitCounter_tOracleOutput_21 > 0 && rowsToCommitCount_tOracleOutput_21 != 0) {
			
		}
		conn_tOracleOutput_21.commit();
		if(commitCounter_tOracleOutput_21 > 0 && rowsToCommitCount_tOracleOutput_21 != 0) {
			
			rowsToCommitCount_tOracleOutput_21 = 0;
		}
		commitCounter_tOracleOutput_21 = 0;
		
		
		conn_tOracleOutput_21 .close();
		
		resourceMap.put("finish_tOracleOutput_21", true);
   	

	
	nb_line_deleted_tOracleOutput_21=nb_line_deleted_tOracleOutput_21+ deletedCount_tOracleOutput_21;
	nb_line_update_tOracleOutput_21=nb_line_update_tOracleOutput_21 + updatedCount_tOracleOutput_21;
	nb_line_inserted_tOracleOutput_21=nb_line_inserted_tOracleOutput_21 + insertedCount_tOracleOutput_21;
	nb_line_rejected_tOracleOutput_21=nb_line_rejected_tOracleOutput_21 + rejectedCount_tOracleOutput_21;
	
        globalMap.put("tOracleOutput_21_NB_LINE",nb_line_tOracleOutput_21);
        globalMap.put("tOracleOutput_21_NB_LINE_UPDATED",nb_line_update_tOracleOutput_21);
        globalMap.put("tOracleOutput_21_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_21);
        globalMap.put("tOracleOutput_21_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_21);
        globalMap.put("tOracleOutput_21_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_21);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Actualiza1");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_21", true);
end_Hash.put("tOracleOutput_21", System.currentTimeMillis());




/**
 * [tOracleOutput_21 end ] stop
 */




	
	/**
	 * [tOracleOutput_22 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_22 > 0) {
            try {
            	if (pstmt_tOracleOutput_22 != null) {
					
					pstmt_tOracleOutput_22.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_22){
globalMap.put("tOracleOutput_22_ERROR_MESSAGE",e_tOracleOutput_22.getMessage());
		        java.sql.SQLException ne_tOracleOutput_22 = e_tOracleOutput_22.getNextException(),sqle_tOracleOutput_22=null;
		    	String errormessage_tOracleOutput_22;
				if (ne_tOracleOutput_22 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_22 = new java.sql.SQLException(e_tOracleOutput_22.getMessage() + "\ncaused by: " + ne_tOracleOutput_22.getMessage(), ne_tOracleOutput_22.getSQLState(), ne_tOracleOutput_22.getErrorCode(), ne_tOracleOutput_22);
					errormessage_tOracleOutput_22 = sqle_tOracleOutput_22.getMessage();
				}else{
					errormessage_tOracleOutput_22 = e_tOracleOutput_22.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_22);
            	
        	}
        	if (pstmt_tOracleOutput_22 != null) {
            	tmp_batchUpdateCount_tOracleOutput_22 = pstmt_tOracleOutput_22.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_22
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_22!=-1?tmp_batchUpdateCount_tOracleOutput_22:0);
				rowsToCommitCount_tOracleOutput_22 += (tmp_batchUpdateCount_tOracleOutput_22!=-1?tmp_batchUpdateCount_tOracleOutput_22:0);
            }
        }
        if(pstmt_tOracleOutput_22 != null) {
			
				pstmt_tOracleOutput_22.close();
				resourceMap.remove("pstmt_tOracleOutput_22");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_22", true);
		if(commitCounter_tOracleOutput_22 > 0 && rowsToCommitCount_tOracleOutput_22 != 0) {
			
		}
		conn_tOracleOutput_22.commit();
		if(commitCounter_tOracleOutput_22 > 0 && rowsToCommitCount_tOracleOutput_22 != 0) {
			
			rowsToCommitCount_tOracleOutput_22 = 0;
		}
		commitCounter_tOracleOutput_22 = 0;
		
		
		conn_tOracleOutput_22 .close();
		
		resourceMap.put("finish_tOracleOutput_22", true);
   	

	
	nb_line_deleted_tOracleOutput_22=nb_line_deleted_tOracleOutput_22+ deletedCount_tOracleOutput_22;
	nb_line_update_tOracleOutput_22=nb_line_update_tOracleOutput_22 + updatedCount_tOracleOutput_22;
	nb_line_inserted_tOracleOutput_22=nb_line_inserted_tOracleOutput_22 + insertedCount_tOracleOutput_22;
	nb_line_rejected_tOracleOutput_22=nb_line_rejected_tOracleOutput_22 + rejectedCount_tOracleOutput_22;
	
        globalMap.put("tOracleOutput_22_NB_LINE",nb_line_tOracleOutput_22);
        globalMap.put("tOracleOutput_22_NB_LINE_UPDATED",nb_line_update_tOracleOutput_22);
        globalMap.put("tOracleOutput_22_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_22);
        globalMap.put("tOracleOutput_22_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_22);
        globalMap.put("tOracleOutput_22_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_22);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta10");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_22", true);
end_Hash.put("tOracleOutput_22", System.currentTimeMillis());




/**
 * [tOracleOutput_22 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_13:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tOracleInput_12Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_10"
					     			globalMap.remove("tHash_Lookup_row34"); 
				     			
					     			//free memory for "tMap_10"
					     			globalMap.remove("tHash_Lookup_row35"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tOracleOutput_21 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_21") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_21 = null;
                if ((pstmtToClose_tOracleOutput_21 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_21")) != null) {
                    pstmtToClose_tOracleOutput_21.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_21") == null){
            java.sql.Connection ctn_tOracleOutput_21 = null;
            if((ctn_tOracleOutput_21 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_21")) != null){
                try {
                    ctn_tOracleOutput_21.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_21) {
                    String errorMessage_tOracleOutput_21 = "failed to close the connection in tOracleOutput_21 :" + sqlEx_tOracleOutput_21.getMessage();
                    System.err.println(errorMessage_tOracleOutput_21);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_21 finally ] stop
 */




	
	/**
	 * [tOracleOutput_22 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_22") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_22 = null;
                if ((pstmtToClose_tOracleOutput_22 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_22")) != null) {
                    pstmtToClose_tOracleOutput_22.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_22") == null){
            java.sql.Connection ctn_tOracleOutput_22 = null;
            if((ctn_tOracleOutput_22 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_22")) != null){
                try {
                    ctn_tOracleOutput_22.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_22) {
                    String errorMessage_tOracleOutput_22 = "failed to close the connection in tOracleOutput_22 :" + sqlEx_tOracleOutput_22.getMessage();
                    System.err.println(errorMessage_tOracleOutput_22);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_22 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class Elimina7Struct implements routines.system.IPersistableRow<Elimina7Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return true;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return true;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.PRESTADOR_ID == null) ? 0 : this.PRESTADOR_ID.hashCode());
					
						result = prime * result + ((this.TINDICADORES_ID == null) ? 0 : this.TINDICADORES_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Elimina7Struct other = (Elimina7Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.PRESTADOR_ID == null) {
							if (other.PRESTADOR_ID != null)
								return false;
						
						} else if (!this.PRESTADOR_ID.equals(other.PRESTADOR_ID))
						
							return false;
					
						if (this.TINDICADORES_ID == null) {
							if (other.TINDICADORES_ID != null)
								return false;
						
						} else if (!this.TINDICADORES_ID.equals(other.TINDICADORES_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Elimina7Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.PRESTADOR_ID = this.PRESTADOR_ID;
	            other.TINDICADORES_ID = this.TINDICADORES_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            
	}

	public void copyKeysDataTo(Elimina7Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.PRESTADOR_ID = this.PRESTADOR_ID;
	            	other.TINDICADORES_ID = this.TINDICADORES_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Elimina7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PRESTADOR_ID, other.PRESTADOR_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TINDICADORES_ID, other.TINDICADORES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Inserta8Struct implements routines.system.IPersistableRow<Inserta8Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal TIPO_PAGO;

				public BigDecimal getTIPO_PAGO () {
					return this.TIPO_PAGO;
				}

				public Boolean TIPO_PAGOIsNullable(){
				    return true;
				}
				public Boolean TIPO_PAGOIsKey(){
				    return false;
				}
				public Integer TIPO_PAGOLength(){
				    return 0;
				}
				public Integer TIPO_PAGOPrecision(){
				    return 0;
				}
				public String TIPO_PAGODefault(){
				
					return "";
				
				}
				public String TIPO_PAGOComment(){
				
				    return "";
				
				}
				public String TIPO_PAGOPattern(){
				
					return "";
				
				}
				public String TIPO_PAGOOriginalDbColumnName(){
				
					return "TIPO_PAGO";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return false;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal NUMERADOR;

				public BigDecimal getNUMERADOR () {
					return this.NUMERADOR;
				}

				public Boolean NUMERADORIsNullable(){
				    return true;
				}
				public Boolean NUMERADORIsKey(){
				    return false;
				}
				public Integer NUMERADORLength(){
				    return 0;
				}
				public Integer NUMERADORPrecision(){
				    return 0;
				}
				public String NUMERADORDefault(){
				
					return "";
				
				}
				public String NUMERADORComment(){
				
				    return "";
				
				}
				public String NUMERADORPattern(){
				
					return "";
				
				}
				public String NUMERADOROriginalDbColumnName(){
				
					return "NUMERADOR";
				
				}

				
			    public BigDecimal DENOMINADOR;

				public BigDecimal getDENOMINADOR () {
					return this.DENOMINADOR;
				}

				public Boolean DENOMINADORIsNullable(){
				    return true;
				}
				public Boolean DENOMINADORIsKey(){
				    return false;
				}
				public Integer DENOMINADORLength(){
				    return 0;
				}
				public Integer DENOMINADORPrecision(){
				    return 0;
				}
				public String DENOMINADORDefault(){
				
					return "";
				
				}
				public String DENOMINADORComment(){
				
				    return "";
				
				}
				public String DENOMINADORPattern(){
				
					return "";
				
				}
				public String DENOMINADOROriginalDbColumnName(){
				
					return "DENOMINADOR";
				
				}

				
			    public BigDecimal INDICADOR;

				public BigDecimal getINDICADOR () {
					return this.INDICADOR;
				}

				public Boolean INDICADORIsNullable(){
				    return true;
				}
				public Boolean INDICADORIsKey(){
				    return false;
				}
				public Integer INDICADORLength(){
				    return 0;
				}
				public Integer INDICADORPrecision(){
				    return 0;
				}
				public String INDICADORDefault(){
				
					return "";
				
				}
				public String INDICADORComment(){
				
				    return "";
				
				}
				public String INDICADORPattern(){
				
					return "";
				
				}
				public String INDICADOROriginalDbColumnName(){
				
					return "INDICADOR";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO_PAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO_PAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",TIPO_PAGO="+String.valueOf(TIPO_PAGO));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",NUMERADOR="+String.valueOf(NUMERADOR));
		sb.append(",DENOMINADOR="+String.valueOf(DENOMINADOR));
		sb.append(",INDICADOR="+String.valueOf(INDICADOR));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public java.util.Date FPERIODO;

				public java.util.Date getFPERIODO () {
					return this.FPERIODO;
				}

				public Boolean FPERIODOIsNullable(){
				    return true;
				}
				public Boolean FPERIODOIsKey(){
				    return false;
				}
				public Integer FPERIODOLength(){
				    return 0;
				}
				public Integer FPERIODOPrecision(){
				    return 0;
				}
				public String FPERIODODefault(){
				
					return null;
				
				}
				public String FPERIODOComment(){
				
				    return "";
				
				}
				public String FPERIODOPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FPERIODOOriginalDbColumnName(){
				
					return "FPERIODO";
				
				}

				
			    public BigDecimal TIPO_PAGO;

				public BigDecimal getTIPO_PAGO () {
					return this.TIPO_PAGO;
				}

				public Boolean TIPO_PAGOIsNullable(){
				    return true;
				}
				public Boolean TIPO_PAGOIsKey(){
				    return false;
				}
				public Integer TIPO_PAGOLength(){
				    return 0;
				}
				public Integer TIPO_PAGOPrecision(){
				    return 0;
				}
				public String TIPO_PAGODefault(){
				
					return "";
				
				}
				public String TIPO_PAGOComment(){
				
				    return "";
				
				}
				public String TIPO_PAGOPattern(){
				
					return "";
				
				}
				public String TIPO_PAGOOriginalDbColumnName(){
				
					return "TIPO_PAGO";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return false;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal NUMERADOR;

				public BigDecimal getNUMERADOR () {
					return this.NUMERADOR;
				}

				public Boolean NUMERADORIsNullable(){
				    return true;
				}
				public Boolean NUMERADORIsKey(){
				    return false;
				}
				public Integer NUMERADORLength(){
				    return 0;
				}
				public Integer NUMERADORPrecision(){
				    return 0;
				}
				public String NUMERADORDefault(){
				
					return "";
				
				}
				public String NUMERADORComment(){
				
				    return "";
				
				}
				public String NUMERADORPattern(){
				
					return "";
				
				}
				public String NUMERADOROriginalDbColumnName(){
				
					return "NUMERADOR";
				
				}

				
			    public BigDecimal DENOMINADOR;

				public BigDecimal getDENOMINADOR () {
					return this.DENOMINADOR;
				}

				public Boolean DENOMINADORIsNullable(){
				    return true;
				}
				public Boolean DENOMINADORIsKey(){
				    return false;
				}
				public Integer DENOMINADORLength(){
				    return 0;
				}
				public Integer DENOMINADORPrecision(){
				    return 0;
				}
				public String DENOMINADORDefault(){
				
					return "";
				
				}
				public String DENOMINADORComment(){
				
				    return "";
				
				}
				public String DENOMINADORPattern(){
				
					return "";
				
				}
				public String DENOMINADOROriginalDbColumnName(){
				
					return "DENOMINADOR";
				
				}

				
			    public BigDecimal INDICADOR;

				public BigDecimal getINDICADOR () {
					return this.INDICADOR;
				}

				public Boolean INDICADORIsNullable(){
				    return true;
				}
				public Boolean INDICADORIsKey(){
				    return false;
				}
				public Integer INDICADORLength(){
				    return 0;
				}
				public Integer INDICADORPrecision(){
				    return 0;
				}
				public String INDICADORDefault(){
				
					return "";
				
				}
				public String INDICADORComment(){
				
				    return "";
				
				}
				public String INDICADORPattern(){
				
					return "";
				
				}
				public String INDICADOROriginalDbColumnName(){
				
					return "INDICADOR";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO_PAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO_PAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",FPERIODO="+String.valueOf(FPERIODO));
		sb.append(",TIPO_PAGO="+String.valueOf(TIPO_PAGO));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",NUMERADOR="+String.valueOf(NUMERADOR));
		sb.append(",DENOMINADOR="+String.valueOf(DENOMINADOR));
		sb.append(",INDICADOR="+String.valueOf(INDICADOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_12Struct implements routines.system.IPersistableRow<after_tOracleInput_12Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public java.util.Date FPERIODO;

				public java.util.Date getFPERIODO () {
					return this.FPERIODO;
				}

				public Boolean FPERIODOIsNullable(){
				    return true;
				}
				public Boolean FPERIODOIsKey(){
				    return false;
				}
				public Integer FPERIODOLength(){
				    return 0;
				}
				public Integer FPERIODOPrecision(){
				    return 0;
				}
				public String FPERIODODefault(){
				
					return null;
				
				}
				public String FPERIODOComment(){
				
				    return "";
				
				}
				public String FPERIODOPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FPERIODOOriginalDbColumnName(){
				
					return "FPERIODO";
				
				}

				
			    public BigDecimal TIPO_PAGO;

				public BigDecimal getTIPO_PAGO () {
					return this.TIPO_PAGO;
				}

				public Boolean TIPO_PAGOIsNullable(){
				    return true;
				}
				public Boolean TIPO_PAGOIsKey(){
				    return false;
				}
				public Integer TIPO_PAGOLength(){
				    return 0;
				}
				public Integer TIPO_PAGOPrecision(){
				    return 0;
				}
				public String TIPO_PAGODefault(){
				
					return "";
				
				}
				public String TIPO_PAGOComment(){
				
				    return "";
				
				}
				public String TIPO_PAGOPattern(){
				
					return "";
				
				}
				public String TIPO_PAGOOriginalDbColumnName(){
				
					return "TIPO_PAGO";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return false;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal NUMERADOR;

				public BigDecimal getNUMERADOR () {
					return this.NUMERADOR;
				}

				public Boolean NUMERADORIsNullable(){
				    return true;
				}
				public Boolean NUMERADORIsKey(){
				    return false;
				}
				public Integer NUMERADORLength(){
				    return 0;
				}
				public Integer NUMERADORPrecision(){
				    return 0;
				}
				public String NUMERADORDefault(){
				
					return "";
				
				}
				public String NUMERADORComment(){
				
				    return "";
				
				}
				public String NUMERADORPattern(){
				
					return "";
				
				}
				public String NUMERADOROriginalDbColumnName(){
				
					return "NUMERADOR";
				
				}

				
			    public BigDecimal DENOMINADOR;

				public BigDecimal getDENOMINADOR () {
					return this.DENOMINADOR;
				}

				public Boolean DENOMINADORIsNullable(){
				    return true;
				}
				public Boolean DENOMINADORIsKey(){
				    return false;
				}
				public Integer DENOMINADORLength(){
				    return 0;
				}
				public Integer DENOMINADORPrecision(){
				    return 0;
				}
				public String DENOMINADORDefault(){
				
					return "";
				
				}
				public String DENOMINADORComment(){
				
				    return "";
				
				}
				public String DENOMINADORPattern(){
				
					return "";
				
				}
				public String DENOMINADOROriginalDbColumnName(){
				
					return "DENOMINADOR";
				
				}

				
			    public BigDecimal INDICADOR;

				public BigDecimal getINDICADOR () {
					return this.INDICADOR;
				}

				public Boolean INDICADORIsNullable(){
				    return true;
				}
				public Boolean INDICADORIsKey(){
				    return false;
				}
				public Integer INDICADORLength(){
				    return 0;
				}
				public Integer INDICADORPrecision(){
				    return 0;
				}
				public String INDICADORDefault(){
				
					return "";
				
				}
				public String INDICADORComment(){
				
				    return "";
				
				}
				public String INDICADORPattern(){
				
					return "";
				
				}
				public String INDICADOROriginalDbColumnName(){
				
					return "INDICADOR";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.TIPO_PAGO = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO_PAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO_PAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",FPERIODO="+String.valueOf(FPERIODO));
		sb.append(",TIPO_PAGO="+String.valueOf(TIPO_PAGO));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",NUMERADOR="+String.valueOf(NUMERADOR));
		sb.append(",DENOMINADOR="+String.valueOf(DENOMINADOR));
		sb.append(",INDICADOR="+String.valueOf(INDICADOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_13Process(globalMap);

		row31Struct row31 = new row31Struct();
Elimina7Struct Elimina7 = new Elimina7Struct();
Inserta8Struct Inserta8 = new Inserta8Struct();





	
	/**
	 * [tOracleOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_10", false);
		start_Hash.put("tOracleOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Elimina7");
					}
				
		int tos_count_tOracleOutput_10 = 0;
		






        int deleteKeyCount_tOracleOutput_10 = 4;
        if(deleteKeyCount_tOracleOutput_10 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_10 = 0;
    int nb_line_update_tOracleOutput_10 = 0;
    int nb_line_inserted_tOracleOutput_10 = 0;
    int nb_line_deleted_tOracleOutput_10 = 0;
    int nb_line_rejected_tOracleOutput_10 = 0;

    int tmp_batchUpdateCount_tOracleOutput_10 = 0;

    int deletedCount_tOracleOutput_10=0;
    int updatedCount_tOracleOutput_10=0;
    int insertedCount_tOracleOutput_10=0;
    int rowsToCommitCount_tOracleOutput_10=0;
    int rejectedCount_tOracleOutput_10=0;

    boolean whetherReject_tOracleOutput_10 = false;

    java.sql.Connection conn_tOracleOutput_10 = null;

    //optional table
    String dbschema_tOracleOutput_10 = null;
    String tableName_tOracleOutput_10 = null;
                    String driverClass_tOracleOutput_10 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_10);
                String url_tOracleOutput_10 = null;
                    url_tOracleOutput_10 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_10 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_10 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_10 = decryptedPassword_tOracleOutput_10;
                dbschema_tOracleOutput_10 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_10 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_10.put("user",dbUser_tOracleOutput_10);
                    atnParamsPrope_tOracleOutput_10.put("password",dbPwd_tOracleOutput_10);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_10.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_10 = java.sql.DriverManager.getConnection(url_tOracleOutput_10, atnParamsPrope_tOracleOutput_10);
        resourceMap.put("conn_tOracleOutput_10", conn_tOracleOutput_10);
            conn_tOracleOutput_10.setAutoCommit(false);
            int commitEvery_tOracleOutput_10 = 1000;
            int commitCounter_tOracleOutput_10 = 0;
        int batchSize_tOracleOutput_10 = 1000;
        int batchSizeCounter_tOracleOutput_10=0;
        int count_tOracleOutput_10=0;

        if(dbschema_tOracleOutput_10 == null || dbschema_tOracleOutput_10.trim().length() == 0) {
            tableName_tOracleOutput_10 = ("BACM_INDICADORES");
        } else {
            tableName_tOracleOutput_10 = dbschema_tOracleOutput_10 + "." + ("BACM_INDICADORES");
        }
                String delete_tOracleOutput_10 = "DELETE FROM " + tableName_tOracleOutput_10 + " WHERE UORG_ID = ? AND PRESTADOR_ID = ? AND TINDICADORES_ID = ? AND TIEMPOS_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_10 = conn_tOracleOutput_10.prepareStatement(delete_tOracleOutput_10);
                resourceMap.put("pstmt_tOracleOutput_10", pstmt_tOracleOutput_10);





 



/**
 * [tOracleOutput_10 begin ] stop
 */




	
	/**
	 * [tOracleOutput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_18", false);
		start_Hash.put("tOracleOutput_18", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta8");
					}
				
		int tos_count_tOracleOutput_18 = 0;
		






    
    int nb_line_tOracleOutput_18 = 0;
    int nb_line_update_tOracleOutput_18 = 0;
    int nb_line_inserted_tOracleOutput_18 = 0;
    int nb_line_deleted_tOracleOutput_18 = 0;
    int nb_line_rejected_tOracleOutput_18 = 0;

    int tmp_batchUpdateCount_tOracleOutput_18 = 0;

    int deletedCount_tOracleOutput_18=0;
    int updatedCount_tOracleOutput_18=0;
    int insertedCount_tOracleOutput_18=0;
    int rowsToCommitCount_tOracleOutput_18=0;
    int rejectedCount_tOracleOutput_18=0;

    boolean whetherReject_tOracleOutput_18 = false;

    java.sql.Connection conn_tOracleOutput_18 = null;

    //optional table
    String dbschema_tOracleOutput_18 = null;
    String tableName_tOracleOutput_18 = null;
                    String driverClass_tOracleOutput_18 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_18);
                String url_tOracleOutput_18 = null;
                    url_tOracleOutput_18 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_18 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_18 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_18 = decryptedPassword_tOracleOutput_18;
                dbschema_tOracleOutput_18 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_18 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_18.put("user",dbUser_tOracleOutput_18);
                    atnParamsPrope_tOracleOutput_18.put("password",dbPwd_tOracleOutput_18);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_18.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_18 = java.sql.DriverManager.getConnection(url_tOracleOutput_18, atnParamsPrope_tOracleOutput_18);
        resourceMap.put("conn_tOracleOutput_18", conn_tOracleOutput_18);
            conn_tOracleOutput_18.setAutoCommit(false);
            int commitEvery_tOracleOutput_18 = 1000;
            int commitCounter_tOracleOutput_18 = 0;
        int batchSize_tOracleOutput_18 = 1000;
        int batchSizeCounter_tOracleOutput_18=0;
        int count_tOracleOutput_18=0;

        if(dbschema_tOracleOutput_18 == null || dbschema_tOracleOutput_18.trim().length() == 0) {
            tableName_tOracleOutput_18 = ("BACM_INDICADORES");
        } else {
            tableName_tOracleOutput_18 = dbschema_tOracleOutput_18 + "." + ("BACM_INDICADORES");
        }
                String insert_tOracleOutput_18 = "INSERT INTO " + tableName_tOracleOutput_18 + " (UORG_ID,PRESTADOR_ID,TIPO_PAGO,TINDICADORES_ID,NUMERADOR,DENOMINADOR,INDICADOR,TIEMPOS_ID) VALUES (?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_18 = conn_tOracleOutput_18.prepareStatement(insert_tOracleOutput_18);
                        resourceMap.put("pstmt_tOracleOutput_18", pstmt_tOracleOutput_18);





 



/**
 * [tOracleOutput_18 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) 
					globalMap.get( "tHash_Lookup_row32" ))
					;					
					
	

row32Struct row32HashKey = new row32Struct();
row32Struct row32Default = new row32Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
Elimina7Struct Elimina7_tmp = new Elimina7Struct();
Inserta8Struct Inserta8_tmp = new Inserta8Struct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tOracleInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_12", false);
		start_Hash.put("tOracleInput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_12";
	
	
		int tos_count_tOracleInput_12 = 0;
		
	


	
		    int nb_line_tOracleInput_12 = 0;
		    java.sql.Connection conn_tOracleInput_12 = null;
				conn_tOracleInput_12 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_12 = false;
				boolean isConnectionWrapped_tOracleInput_12 = !(conn_tOracleInput_12 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_12.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_12 = null;
                if (isConnectionWrapped_tOracleInput_12) {
					unwrappedOraConn_tOracleInput_12 = conn_tOracleInput_12.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_12 != null) {
                        isTimeZoneNull_tOracleInput_12 = (unwrappedOraConn_tOracleInput_12.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_12 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_12).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_12) {
					java.sql.Statement stmtGetTZ_tOracleInput_12 = conn_tOracleInput_12.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_12 = stmtGetTZ_tOracleInput_12.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_12 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_12.next()) {
						sessionTimezone_tOracleInput_12 = rsGetTZ_tOracleInput_12.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_12 && unwrappedOraConn_tOracleInput_12 != null) {
                        unwrappedOraConn_tOracleInput_12.setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_12).setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_12 = conn_tOracleInput_12.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_12.setFetchSize(1000);


		    String dbquery_tOracleInput_12 = "SELECT    UORG_ID \n        , PRESTADOR_ID         \n        , FPERIODO\n        , TIPO_PAGO\n        , (SELECT ID FROM"
+" GEN_TINDICADORES WHERE CODIGO = 'ACM06') AS TINDICADORES_ID\n        , VALOR_FACTURADO  AS NUMERADOR\n        , SUM ( V"
+"ALOR_FACTURADO ) OVER ( PARTITION BY UORG_ID, FPERIODO ) AS DENOMINADOR\n        , CASE \n            WHEN  SUM ( VALOR_"
+"FACTURADO ) OVER ( PARTITION BY UORG_ID , FPERIODO ) >0\n            THEN  (VALOR_FACTURADO *100) /SUM ( VALOR_FACTURADO"
+" ) OVER ( PARTITION BY UORG_ID ,FPERIODO )\n            ELSE  NULL \n          END AS INDICADOR\nFROM (\n    SELECT    C"
+"OND.UORG_ID \n            , COND.PRESTADOR_ID         \n            , COND.FPERIODO                \n            , SUM( "
+"NVL(DFS.VTOTAL, DFF.VTOTAL) ) AS VALOR_FACTURADO\n            , DECODE ( RE.TPAGO, 'Resolución del gasto', 2,1) AS TIPO_"
+"PAGO\n    FROM ACM_ETAPASNORMATIVIDAD EN\n    INNER JOIN ACM_HAUDITORIAS HA ON EN.ID = HA.ETAPASNORMATIVIDAD_ID \n    IN"
+"NER JOIN ACM_ESTAUDITORIAS ESA ON ESA.ID = HA.ESTAUDITORIA_ID\n    INNER JOIN ACM_RECEPCION RE ON RE.ID = HA.RECEPCION_I"
+"D\n    LEFT JOIN ACM_DFACTURASERVICIO DFS ON DFS.RECEPCION_ID = HA.RECEPCION_ID  \n                                     "
+" AND DFS.ESTREGISTRO_ID = 1\n    LEFT JOIN ACM_DFACTURAFORMULACION DFF ON DFF.RECEPCION_ID = HA.RECEPCION_ID \n         "
+"                                AND DFF.ESTREGISTRO_ID = 1                             \n    INNER JOIN ( \n       SELEC"
+"T     FPERIODO\n                , PRESTADOR_ID\n                , UORG_ID            \n        FROM (\n          SELECT "
+"   TRUNC ( NVL( DFS.FSERVICIO, DFF.FDISPENSACION) , 'MONTH') AS FPERIODO\n                  , RE.PRESTADOR_ID \n        "
+"          , RE.UORG_ID                           \n                  , ROW_NUMBER() OVER ( PARTITION BY    TRUNC ( NVL( "
+"DFS.FSERVICIO, DFF.FDISPENSACION) , 'MONTH')\n                                                      , RE.PRESTADOR_ID \n"
+"                                                      , RE.UORG_ID                                                      "
+"         \n                                        ORDER BY RE.ID ) R\n          FROM ACM_ETAPASNORMATIVIDAD EN\n       "
+"   INNER JOIN ACM_HAUDITORIAS HA ON EN.ID = HA.ETAPASNORMATIVIDAD_ID\n          INNER JOIN ACM_ESTAUDITORIAS ESA ON ESA."
+"ID = HA.ESTAUDITORIA_ID	      \n          INNER JOIN ACM_RECEPCION RE ON RE.ID = HA.RECEPCION_ID\n          LEFT JOIN AC"
+"M_DFACTURASERVICIO DFS ON DFS.RECEPCION_ID = HA.RECEPCION_ID  AND DFS.ESTREGISTRO_ID = 1\n          LEFT JOIN ACM_DFACTU"
+"RAFORMULACION DFF ON DFF.RECEPCION_ID = HA.RECEPCION_ID AND DFF.ESTREGISTRO_ID = 1         \n          WHERE EN.CODIGO ="
+" 1        \n            AND HA.ESTREGISTRO_ID = 1\n            AND RE.ESTREGISTRO_ID = 1  \n			AND ESA.NOMBRE = 'Finaliz"
+"ada'\n            AND ( DFS.ID IS NOT NULL OR DFF.ID IS NOT NULL )\n            AND ( HA.EJECUCION = 1  )\n             "
+" "+context.CONDICION+"\n        ) WHERE R = 1\n    ) COND ON COND.FPERIODO = TRUNC ( NVL( DFS.FSERVICIO, DFF.FDISPENSACION) , 'MONTH')     \n"
+"          AND COND.PRESTADOR_ID = RE.PRESTADOR_ID \n          AND COND.UORG_ID = RE.UORG_ID        \n    WHERE HA.ESTREG"
+"ISTRO_ID = 1\n      AND RE.ESTREGISTRO_ID = 1  \n      AND EN.CODIGO = 1\n      AND ( DFS.ID IS NOT NULL OR DFF.ID IS NO"
+"T NULL )\n      AND ( HA.EJECUCION = 1  )\n      AND HA.FFETAPA IS NOT NULL \n      AND ESA.NOMBRE = 'Finalizada'\n    G"
+"ROUP BY  COND.UORG_ID \n            , COND.PRESTADOR_ID         \n            , COND.FPERIODO  \n            , DECODE ( "
+"RE.TPAGO, 'Resolución del gasto', 2,1)\n)";
		    

		    globalMap.put("tOracleInput_12_QUERY",dbquery_tOracleInput_12);

		    java.sql.ResultSet rs_tOracleInput_12 = null;

		    try {
		    	rs_tOracleInput_12 = stmt_tOracleInput_12.executeQuery(dbquery_tOracleInput_12);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_12 = rs_tOracleInput_12.getMetaData();
		    	int colQtyInRs_tOracleInput_12 = rsmd_tOracleInput_12.getColumnCount();

		    String tmpContent_tOracleInput_12 = null;
		    
		    
		    while (rs_tOracleInput_12.next()) {
		        nb_line_tOracleInput_12++;
		        
							if(colQtyInRs_tOracleInput_12 < 1) {
								row31.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(1) != null) {
						row31.UORG_ID = rs_tOracleInput_12.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 2) {
								row31.PRESTADOR_ID = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(2) != null) {
						row31.PRESTADOR_ID = rs_tOracleInput_12.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 3) {
								row31.FPERIODO = null;
							} else {
										
			row31.FPERIODO = routines.system.JDBCUtil.getDate(rs_tOracleInput_12, 3);
		                    }
							if(colQtyInRs_tOracleInput_12 < 4) {
								row31.TIPO_PAGO = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(4) != null) {
						row31.TIPO_PAGO = rs_tOracleInput_12.getBigDecimal(4);
					} else {
				
						row31.TIPO_PAGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 5) {
								row31.TINDICADORES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(5) != null) {
						row31.TINDICADORES_ID = rs_tOracleInput_12.getBigDecimal(5);
					} else {
				
						row31.TINDICADORES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 6) {
								row31.NUMERADOR = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(6) != null) {
						row31.NUMERADOR = rs_tOracleInput_12.getBigDecimal(6);
					} else {
				
						row31.NUMERADOR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 7) {
								row31.DENOMINADOR = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(7) != null) {
						row31.DENOMINADOR = rs_tOracleInput_12.getBigDecimal(7);
					} else {
				
						row31.DENOMINADOR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 8) {
								row31.INDICADOR = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(8) != null) {
						row31.INDICADOR = rs_tOracleInput_12.getBigDecimal(8);
					} else {
				
						row31.INDICADOR = null;
					}
		                    }
					




 



/**
 * [tOracleInput_12 begin ] stop
 */
	
	/**
	 * [tOracleInput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 


	tos_count_tOracleInput_12++;

/**
 * [tOracleInput_12 main ] stop
 */
	
	/**
	 * [tOracleInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
						row32Struct row32 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_9 = false;
		boolean mainRowRejected_tMap_9 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row32" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow32 = false;
       		  	    	
       		  	    	
 							row32Struct row32ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_9) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_9 = false;
								
                        		    		    row32HashKey.FECHA = row31.FPERIODO  == null ? null : new java.util.Date((row31.FPERIODO ).getTime());
                        		    		

								
		                        	row32HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row32.lookup( row32HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row32.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_9 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row32 != null && tHash_Lookup_row32.getCount(row32HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row32' and it contains more one result from keys :  row32.FECHA = '" + row32HashKey.FECHA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row32Struct fromLookup_row32 = null;
							row32 = row32Default;
										 
							
								 
							
							
								if (tHash_Lookup_row32 !=null && tHash_Lookup_row32.hasNext()) { // G 099
								
							
								
								fromLookup_row32 = tHash_Lookup_row32.next();

							
							
								} // G 099
							
							

							if(fromLookup_row32 != null) {
								row32 = fromLookup_row32;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

Elimina7 = null;
Inserta8 = null;

if(!rejectedInnerJoin_tMap_9 ) {

// # Output table : 'Elimina7'
Elimina7_tmp.UORG_ID = row31.UORG_ID ;
Elimina7_tmp.PRESTADOR_ID = row31.PRESTADOR_ID ;
Elimina7_tmp.TINDICADORES_ID = row31.TINDICADORES_ID;
Elimina7_tmp.TIEMPOS_ID = row32.ID ;
Elimina7 = Elimina7_tmp;

// # Output table : 'Inserta8'
Inserta8_tmp.UORG_ID = row31.UORG_ID ;
Inserta8_tmp.PRESTADOR_ID = row31.PRESTADOR_ID ;
Inserta8_tmp.TIPO_PAGO = row31.TIPO_PAGO ;
Inserta8_tmp.TINDICADORES_ID = row31.TINDICADORES_ID ;
Inserta8_tmp.NUMERADOR = row31.NUMERADOR ;
Inserta8_tmp.DENOMINADOR = row31.DENOMINADOR ;
Inserta8_tmp.INDICADOR = row31.INDICADOR ;
Inserta8_tmp.TIEMPOS_ID = row32.ID ;
Inserta8 = Inserta8_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "Elimina7"
if(Elimina7 != null) { 



	
	/**
	 * [tOracleOutput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Elimina7"
						
						);
					}
					



        whetherReject_tOracleOutput_10 = false;
                    pstmt_tOracleOutput_10.setBigDecimal(1, Elimina7.UORG_ID);

                    pstmt_tOracleOutput_10.setBigDecimal(2, Elimina7.PRESTADOR_ID);

                    pstmt_tOracleOutput_10.setBigDecimal(3, Elimina7.TINDICADORES_ID);

                    pstmt_tOracleOutput_10.setBigDecimal(4, Elimina7.TIEMPOS_ID);

                pstmt_tOracleOutput_10.addBatch();
                nb_line_tOracleOutput_10++;
                batchSizeCounter_tOracleOutput_10++;
            if (batchSize_tOracleOutput_10 > 0 &&  batchSize_tOracleOutput_10 <= batchSizeCounter_tOracleOutput_10) {
                try {
                    pstmt_tOracleOutput_10.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_10){
globalMap.put("tOracleOutput_10_ERROR_MESSAGE",e_tOracleOutput_10.getMessage());
			        java.sql.SQLException ne_tOracleOutput_10 = e_tOracleOutput_10.getNextException(),sqle_tOracleOutput_10=null;
			    	String errormessage_tOracleOutput_10;
					if (ne_tOracleOutput_10 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_10 = new java.sql.SQLException(e_tOracleOutput_10.getMessage() + "\ncaused by: " + ne_tOracleOutput_10.getMessage(), ne_tOracleOutput_10.getSQLState(), ne_tOracleOutput_10.getErrorCode(), ne_tOracleOutput_10);
						errormessage_tOracleOutput_10 = sqle_tOracleOutput_10.getMessage();
					}else{
						errormessage_tOracleOutput_10 = e_tOracleOutput_10.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_10);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_10 = pstmt_tOracleOutput_10.getUpdateCount();
                    deletedCount_tOracleOutput_10
                += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                rowsToCommitCount_tOracleOutput_10 += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                batchSizeCounter_tOracleOutput_10 = 0;
            }
                commitCounter_tOracleOutput_10++;
                if(commitEvery_tOracleOutput_10 <= commitCounter_tOracleOutput_10) {
                    if(batchSizeCounter_tOracleOutput_10 > 0) {
                        try {
                            pstmt_tOracleOutput_10.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_10){
globalMap.put("tOracleOutput_10_ERROR_MESSAGE",e_tOracleOutput_10.getMessage());
					        java.sql.SQLException ne_tOracleOutput_10 = e_tOracleOutput_10.getNextException(),sqle_tOracleOutput_10=null;
					    	String errormessage_tOracleOutput_10;
							if (ne_tOracleOutput_10 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_10 = new java.sql.SQLException(e_tOracleOutput_10.getMessage() + "\ncaused by: " + ne_tOracleOutput_10.getMessage(), ne_tOracleOutput_10.getSQLState(), ne_tOracleOutput_10.getErrorCode(), ne_tOracleOutput_10);
								errormessage_tOracleOutput_10 = sqle_tOracleOutput_10.getMessage();
							}else{
								errormessage_tOracleOutput_10 = e_tOracleOutput_10.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_10);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_10 = pstmt_tOracleOutput_10.getUpdateCount();
                            deletedCount_tOracleOutput_10
                        += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                        rowsToCommitCount_tOracleOutput_10 += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_10 != 0){
                    	
                    }
                    conn_tOracleOutput_10.commit();
                    if(rowsToCommitCount_tOracleOutput_10 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_10 = 0;
                    }
                    commitCounter_tOracleOutput_10=0;
                    	batchSizeCounter_tOracleOutput_10=0;
                }

 


	tos_count_tOracleOutput_10++;

/**
 * [tOracleOutput_10 main ] stop
 */
	
	/**
	 * [tOracleOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	

 



/**
 * [tOracleOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	

 



/**
 * [tOracleOutput_10 process_data_end ] stop
 */

} // End of branch "Elimina7"




// Start of branch "Inserta8"
if(Inserta8 != null) { 



	
	/**
	 * [tOracleOutput_18 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta8"
						
						);
					}
					



        whetherReject_tOracleOutput_18 = false;
                        pstmt_tOracleOutput_18.setBigDecimal(1, Inserta8.UORG_ID);

                        pstmt_tOracleOutput_18.setBigDecimal(2, Inserta8.PRESTADOR_ID);

                        pstmt_tOracleOutput_18.setBigDecimal(3, Inserta8.TIPO_PAGO);

                        pstmt_tOracleOutput_18.setBigDecimal(4, Inserta8.TINDICADORES_ID);

                        pstmt_tOracleOutput_18.setBigDecimal(5, Inserta8.NUMERADOR);

                        pstmt_tOracleOutput_18.setBigDecimal(6, Inserta8.DENOMINADOR);

                        pstmt_tOracleOutput_18.setBigDecimal(7, Inserta8.INDICADOR);

                        pstmt_tOracleOutput_18.setBigDecimal(8, Inserta8.TIEMPOS_ID);

                pstmt_tOracleOutput_18.addBatch();
                nb_line_tOracleOutput_18++;
                batchSizeCounter_tOracleOutput_18++;
            if (batchSize_tOracleOutput_18 > 0 &&  batchSize_tOracleOutput_18 <= batchSizeCounter_tOracleOutput_18) {
                try {
                    pstmt_tOracleOutput_18.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_18){
globalMap.put("tOracleOutput_18_ERROR_MESSAGE",e_tOracleOutput_18.getMessage());
			        java.sql.SQLException ne_tOracleOutput_18 = e_tOracleOutput_18.getNextException(),sqle_tOracleOutput_18=null;
			    	String errormessage_tOracleOutput_18;
					if (ne_tOracleOutput_18 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_18 = new java.sql.SQLException(e_tOracleOutput_18.getMessage() + "\ncaused by: " + ne_tOracleOutput_18.getMessage(), ne_tOracleOutput_18.getSQLState(), ne_tOracleOutput_18.getErrorCode(), ne_tOracleOutput_18);
						errormessage_tOracleOutput_18 = sqle_tOracleOutput_18.getMessage();
					}else{
						errormessage_tOracleOutput_18 = e_tOracleOutput_18.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_18);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_18 = pstmt_tOracleOutput_18.getUpdateCount();
                    insertedCount_tOracleOutput_18
                += (tmp_batchUpdateCount_tOracleOutput_18!=-1?tmp_batchUpdateCount_tOracleOutput_18:0);
                rowsToCommitCount_tOracleOutput_18 += (tmp_batchUpdateCount_tOracleOutput_18!=-1?tmp_batchUpdateCount_tOracleOutput_18:0);
                batchSizeCounter_tOracleOutput_18 = 0;
            }
                commitCounter_tOracleOutput_18++;
                if(commitEvery_tOracleOutput_18 <= commitCounter_tOracleOutput_18) {
                    if(batchSizeCounter_tOracleOutput_18 > 0) {
                        try {
                            pstmt_tOracleOutput_18.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_18){
globalMap.put("tOracleOutput_18_ERROR_MESSAGE",e_tOracleOutput_18.getMessage());
					        java.sql.SQLException ne_tOracleOutput_18 = e_tOracleOutput_18.getNextException(),sqle_tOracleOutput_18=null;
					    	String errormessage_tOracleOutput_18;
							if (ne_tOracleOutput_18 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_18 = new java.sql.SQLException(e_tOracleOutput_18.getMessage() + "\ncaused by: " + ne_tOracleOutput_18.getMessage(), ne_tOracleOutput_18.getSQLState(), ne_tOracleOutput_18.getErrorCode(), ne_tOracleOutput_18);
								errormessage_tOracleOutput_18 = sqle_tOracleOutput_18.getMessage();
							}else{
								errormessage_tOracleOutput_18 = e_tOracleOutput_18.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_18);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_18 = pstmt_tOracleOutput_18.getUpdateCount();
                            insertedCount_tOracleOutput_18
                        += (tmp_batchUpdateCount_tOracleOutput_18!=-1?tmp_batchUpdateCount_tOracleOutput_18:0);
                        rowsToCommitCount_tOracleOutput_18 += (tmp_batchUpdateCount_tOracleOutput_18!=-1?tmp_batchUpdateCount_tOracleOutput_18:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_18 != 0){
                    	
                    }
                    conn_tOracleOutput_18.commit();
                    if(rowsToCommitCount_tOracleOutput_18 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_18 = 0;
                    }
                    commitCounter_tOracleOutput_18=0;
                    	batchSizeCounter_tOracleOutput_18=0;
                }

 


	tos_count_tOracleOutput_18++;

/**
 * [tOracleOutput_18 main ] stop
 */
	
	/**
	 * [tOracleOutput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	

 



/**
 * [tOracleOutput_18 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	

 



/**
 * [tOracleOutput_18 process_data_end ] stop
 */

} // End of branch "Inserta8"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

}
}finally{
	if (rs_tOracleInput_12 != null) {
		rs_tOracleInput_12.close();
	}
	if (stmt_tOracleInput_12 != null) {
		stmt_tOracleInput_12.close();
	}
}

globalMap.put("tOracleInput_12_NB_LINE",nb_line_tOracleInput_12);
 

ok_Hash.put("tOracleInput_12", true);
end_Hash.put("tOracleInput_12", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk17", 0, "ok");
				}
				tJava_10Process(globalMap);



/**
 * [tOracleInput_12 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row32 != null) {
						tHash_Lookup_row32.endGet();
					}
					globalMap.remove( "tHash_Lookup_row32" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tOracleOutput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_10 > 0) {
            try {
            	if (pstmt_tOracleOutput_10 != null) {
					
					pstmt_tOracleOutput_10.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_10){
globalMap.put("tOracleOutput_10_ERROR_MESSAGE",e_tOracleOutput_10.getMessage());
		        java.sql.SQLException ne_tOracleOutput_10 = e_tOracleOutput_10.getNextException(),sqle_tOracleOutput_10=null;
		    	String errormessage_tOracleOutput_10;
				if (ne_tOracleOutput_10 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_10 = new java.sql.SQLException(e_tOracleOutput_10.getMessage() + "\ncaused by: " + ne_tOracleOutput_10.getMessage(), ne_tOracleOutput_10.getSQLState(), ne_tOracleOutput_10.getErrorCode(), ne_tOracleOutput_10);
					errormessage_tOracleOutput_10 = sqle_tOracleOutput_10.getMessage();
				}else{
					errormessage_tOracleOutput_10 = e_tOracleOutput_10.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_10);
            	
        	}
        	if (pstmt_tOracleOutput_10 != null) {
            	tmp_batchUpdateCount_tOracleOutput_10 = pstmt_tOracleOutput_10.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_10
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
				rowsToCommitCount_tOracleOutput_10 += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
            }
        }
        if(pstmt_tOracleOutput_10 != null) {
			
				pstmt_tOracleOutput_10.close();
				resourceMap.remove("pstmt_tOracleOutput_10");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_10", true);
		if(commitCounter_tOracleOutput_10 > 0 && rowsToCommitCount_tOracleOutput_10 != 0) {
			
		}
		conn_tOracleOutput_10.commit();
		if(commitCounter_tOracleOutput_10 > 0 && rowsToCommitCount_tOracleOutput_10 != 0) {
			
			rowsToCommitCount_tOracleOutput_10 = 0;
		}
		commitCounter_tOracleOutput_10 = 0;
		
		
		conn_tOracleOutput_10 .close();
		
		resourceMap.put("finish_tOracleOutput_10", true);
   	

	
	nb_line_deleted_tOracleOutput_10=nb_line_deleted_tOracleOutput_10+ deletedCount_tOracleOutput_10;
	nb_line_update_tOracleOutput_10=nb_line_update_tOracleOutput_10 + updatedCount_tOracleOutput_10;
	nb_line_inserted_tOracleOutput_10=nb_line_inserted_tOracleOutput_10 + insertedCount_tOracleOutput_10;
	nb_line_rejected_tOracleOutput_10=nb_line_rejected_tOracleOutput_10 + rejectedCount_tOracleOutput_10;
	
        globalMap.put("tOracleOutput_10_NB_LINE",nb_line_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_UPDATED",nb_line_update_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_10);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Elimina7");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_10", true);
end_Hash.put("tOracleOutput_10", System.currentTimeMillis());




/**
 * [tOracleOutput_10 end ] stop
 */




	
	/**
	 * [tOracleOutput_18 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_18 > 0) {
            try {
            	if (pstmt_tOracleOutput_18 != null) {
					
					pstmt_tOracleOutput_18.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_18){
globalMap.put("tOracleOutput_18_ERROR_MESSAGE",e_tOracleOutput_18.getMessage());
		        java.sql.SQLException ne_tOracleOutput_18 = e_tOracleOutput_18.getNextException(),sqle_tOracleOutput_18=null;
		    	String errormessage_tOracleOutput_18;
				if (ne_tOracleOutput_18 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_18 = new java.sql.SQLException(e_tOracleOutput_18.getMessage() + "\ncaused by: " + ne_tOracleOutput_18.getMessage(), ne_tOracleOutput_18.getSQLState(), ne_tOracleOutput_18.getErrorCode(), ne_tOracleOutput_18);
					errormessage_tOracleOutput_18 = sqle_tOracleOutput_18.getMessage();
				}else{
					errormessage_tOracleOutput_18 = e_tOracleOutput_18.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_18);
            	
        	}
        	if (pstmt_tOracleOutput_18 != null) {
            	tmp_batchUpdateCount_tOracleOutput_18 = pstmt_tOracleOutput_18.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_18
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_18!=-1?tmp_batchUpdateCount_tOracleOutput_18:0);
				rowsToCommitCount_tOracleOutput_18 += (tmp_batchUpdateCount_tOracleOutput_18!=-1?tmp_batchUpdateCount_tOracleOutput_18:0);
            }
        }
        if(pstmt_tOracleOutput_18 != null) {
			
				pstmt_tOracleOutput_18.close();
				resourceMap.remove("pstmt_tOracleOutput_18");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_18", true);
		if(commitCounter_tOracleOutput_18 > 0 && rowsToCommitCount_tOracleOutput_18 != 0) {
			
		}
		conn_tOracleOutput_18.commit();
		if(commitCounter_tOracleOutput_18 > 0 && rowsToCommitCount_tOracleOutput_18 != 0) {
			
			rowsToCommitCount_tOracleOutput_18 = 0;
		}
		commitCounter_tOracleOutput_18 = 0;
		
		
		conn_tOracleOutput_18 .close();
		
		resourceMap.put("finish_tOracleOutput_18", true);
   	

	
	nb_line_deleted_tOracleOutput_18=nb_line_deleted_tOracleOutput_18+ deletedCount_tOracleOutput_18;
	nb_line_update_tOracleOutput_18=nb_line_update_tOracleOutput_18 + updatedCount_tOracleOutput_18;
	nb_line_inserted_tOracleOutput_18=nb_line_inserted_tOracleOutput_18 + insertedCount_tOracleOutput_18;
	nb_line_rejected_tOracleOutput_18=nb_line_rejected_tOracleOutput_18 + rejectedCount_tOracleOutput_18;
	
        globalMap.put("tOracleOutput_18_NB_LINE",nb_line_tOracleOutput_18);
        globalMap.put("tOracleOutput_18_NB_LINE_UPDATED",nb_line_update_tOracleOutput_18);
        globalMap.put("tOracleOutput_18_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_18);
        globalMap.put("tOracleOutput_18_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_18);
        globalMap.put("tOracleOutput_18_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_18);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta8");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_18", true);
end_Hash.put("tOracleOutput_18", System.currentTimeMillis());




/**
 * [tOracleOutput_18 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_12:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tOracleInput_19Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_9"
					     			globalMap.remove("tHash_Lookup_row32"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tOracleOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_10") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_10 = null;
                if ((pstmtToClose_tOracleOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_10")) != null) {
                    pstmtToClose_tOracleOutput_10.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_10") == null){
            java.sql.Connection ctn_tOracleOutput_10 = null;
            if((ctn_tOracleOutput_10 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_10")) != null){
                try {
                    ctn_tOracleOutput_10.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_10) {
                    String errorMessage_tOracleOutput_10 = "failed to close the connection in tOracleOutput_10 :" + sqlEx_tOracleOutput_10.getMessage();
                    System.err.println(errorMessage_tOracleOutput_10);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_10 finally ] stop
 */




	
	/**
	 * [tOracleOutput_18 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_18") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_18 = null;
                if ((pstmtToClose_tOracleOutput_18 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_18")) != null) {
                    pstmtToClose_tOracleOutput_18.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_18") == null){
            java.sql.Connection ctn_tOracleOutput_18 = null;
            if((ctn_tOracleOutput_18 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_18")) != null){
                try {
                    ctn_tOracleOutput_18.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_18) {
                    String errorMessage_tOracleOutput_18 = "failed to close the connection in tOracleOutput_18 :" + sqlEx_tOracleOutput_18.getMessage();
                    System.err.println(errorMessage_tOracleOutput_18);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_18 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfElimina7Struct implements routines.system.IPersistableRow<copyOfElimina7Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return true;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return true;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.PRESTADOR_ID == null) ? 0 : this.PRESTADOR_ID.hashCode());
					
						result = prime * result + ((this.TINDICADORES_ID == null) ? 0 : this.TINDICADORES_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfElimina7Struct other = (copyOfElimina7Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.PRESTADOR_ID == null) {
							if (other.PRESTADOR_ID != null)
								return false;
						
						} else if (!this.PRESTADOR_ID.equals(other.PRESTADOR_ID))
						
							return false;
					
						if (this.TINDICADORES_ID == null) {
							if (other.TINDICADORES_ID != null)
								return false;
						
						} else if (!this.TINDICADORES_ID.equals(other.TINDICADORES_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfElimina7Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.PRESTADOR_ID = this.PRESTADOR_ID;
	            other.TINDICADORES_ID = this.TINDICADORES_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            
	}

	public void copyKeysDataTo(copyOfElimina7Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.PRESTADOR_ID = this.PRESTADOR_ID;
	            	other.TINDICADORES_ID = this.TINDICADORES_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfElimina7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PRESTADOR_ID, other.PRESTADOR_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TINDICADORES_ID, other.TINDICADORES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfInserta8Struct implements routines.system.IPersistableRow<copyOfInserta8Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return true;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return 0;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return 0;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return false;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal NUMERADOR;

				public BigDecimal getNUMERADOR () {
					return this.NUMERADOR;
				}

				public Boolean NUMERADORIsNullable(){
				    return true;
				}
				public Boolean NUMERADORIsKey(){
				    return false;
				}
				public Integer NUMERADORLength(){
				    return 0;
				}
				public Integer NUMERADORPrecision(){
				    return 0;
				}
				public String NUMERADORDefault(){
				
					return "";
				
				}
				public String NUMERADORComment(){
				
				    return "";
				
				}
				public String NUMERADORPattern(){
				
					return "";
				
				}
				public String NUMERADOROriginalDbColumnName(){
				
					return "NUMERADOR";
				
				}

				
			    public BigDecimal DENOMINADOR;

				public BigDecimal getDENOMINADOR () {
					return this.DENOMINADOR;
				}

				public Boolean DENOMINADORIsNullable(){
				    return true;
				}
				public Boolean DENOMINADORIsKey(){
				    return false;
				}
				public Integer DENOMINADORLength(){
				    return 0;
				}
				public Integer DENOMINADORPrecision(){
				    return 0;
				}
				public String DENOMINADORDefault(){
				
					return "";
				
				}
				public String DENOMINADORComment(){
				
				    return "";
				
				}
				public String DENOMINADORPattern(){
				
					return "";
				
				}
				public String DENOMINADOROriginalDbColumnName(){
				
					return "DENOMINADOR";
				
				}

				
			    public BigDecimal INDICADOR;

				public BigDecimal getINDICADOR () {
					return this.INDICADOR;
				}

				public Boolean INDICADORIsNullable(){
				    return true;
				}
				public Boolean INDICADORIsKey(){
				    return false;
				}
				public Integer INDICADORLength(){
				    return 0;
				}
				public Integer INDICADORPrecision(){
				    return 0;
				}
				public String INDICADORDefault(){
				
					return "";
				
				}
				public String INDICADORComment(){
				
				    return "";
				
				}
				public String INDICADORPattern(){
				
					return "";
				
				}
				public String INDICADOROriginalDbColumnName(){
				
					return "INDICADOR";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",NUMERADOR="+String.valueOf(NUMERADOR));
		sb.append(",DENOMINADOR="+String.valueOf(DENOMINADOR));
		sb.append(",INDICADOR="+String.valueOf(INDICADOR));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfInserta8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row45Struct implements routines.system.IPersistableRow<row45Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public java.util.Date FPERIODO;

				public java.util.Date getFPERIODO () {
					return this.FPERIODO;
				}

				public Boolean FPERIODOIsNullable(){
				    return true;
				}
				public Boolean FPERIODOIsKey(){
				    return false;
				}
				public Integer FPERIODOLength(){
				    return 0;
				}
				public Integer FPERIODOPrecision(){
				    return 0;
				}
				public String FPERIODODefault(){
				
					return null;
				
				}
				public String FPERIODOComment(){
				
				    return "";
				
				}
				public String FPERIODOPattern(){
				
					return "";
				
				}
				public String FPERIODOOriginalDbColumnName(){
				
					return "FPERIODO";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return true;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return 0;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return 0;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return false;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal NUMERADOR;

				public BigDecimal getNUMERADOR () {
					return this.NUMERADOR;
				}

				public Boolean NUMERADORIsNullable(){
				    return true;
				}
				public Boolean NUMERADORIsKey(){
				    return false;
				}
				public Integer NUMERADORLength(){
				    return 0;
				}
				public Integer NUMERADORPrecision(){
				    return 0;
				}
				public String NUMERADORDefault(){
				
					return "";
				
				}
				public String NUMERADORComment(){
				
				    return "";
				
				}
				public String NUMERADORPattern(){
				
					return "";
				
				}
				public String NUMERADOROriginalDbColumnName(){
				
					return "NUMERADOR";
				
				}

				
			    public BigDecimal DENOMINADOR;

				public BigDecimal getDENOMINADOR () {
					return this.DENOMINADOR;
				}

				public Boolean DENOMINADORIsNullable(){
				    return true;
				}
				public Boolean DENOMINADORIsKey(){
				    return false;
				}
				public Integer DENOMINADORLength(){
				    return 0;
				}
				public Integer DENOMINADORPrecision(){
				    return 0;
				}
				public String DENOMINADORDefault(){
				
					return "";
				
				}
				public String DENOMINADORComment(){
				
				    return "";
				
				}
				public String DENOMINADORPattern(){
				
					return "";
				
				}
				public String DENOMINADOROriginalDbColumnName(){
				
					return "DENOMINADOR";
				
				}

				
			    public BigDecimal INDICADOR;

				public BigDecimal getINDICADOR () {
					return this.INDICADOR;
				}

				public Boolean INDICADORIsNullable(){
				    return true;
				}
				public Boolean INDICADORIsKey(){
				    return false;
				}
				public Integer INDICADORLength(){
				    return 0;
				}
				public Integer INDICADORPrecision(){
				    return 0;
				}
				public String INDICADORDefault(){
				
					return "";
				
				}
				public String INDICADORComment(){
				
				    return "";
				
				}
				public String INDICADORPattern(){
				
					return "";
				
				}
				public String INDICADOROriginalDbColumnName(){
				
					return "INDICADOR";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",FPERIODO="+String.valueOf(FPERIODO));
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",NUMERADOR="+String.valueOf(NUMERADOR));
		sb.append(",DENOMINADOR="+String.valueOf(DENOMINADOR));
		sb.append(",INDICADOR="+String.valueOf(INDICADOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_19Struct implements routines.system.IPersistableRow<after_tOracleInput_19Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public java.util.Date FPERIODO;

				public java.util.Date getFPERIODO () {
					return this.FPERIODO;
				}

				public Boolean FPERIODOIsNullable(){
				    return true;
				}
				public Boolean FPERIODOIsKey(){
				    return false;
				}
				public Integer FPERIODOLength(){
				    return 0;
				}
				public Integer FPERIODOPrecision(){
				    return 0;
				}
				public String FPERIODODefault(){
				
					return null;
				
				}
				public String FPERIODOComment(){
				
				    return "";
				
				}
				public String FPERIODOPattern(){
				
					return "";
				
				}
				public String FPERIODOOriginalDbColumnName(){
				
					return "FPERIODO";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return true;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return 0;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return 0;
				}
				public String SERVICIOS_IDDefault(){
				
					return "";
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return false;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal NUMERADOR;

				public BigDecimal getNUMERADOR () {
					return this.NUMERADOR;
				}

				public Boolean NUMERADORIsNullable(){
				    return true;
				}
				public Boolean NUMERADORIsKey(){
				    return false;
				}
				public Integer NUMERADORLength(){
				    return 0;
				}
				public Integer NUMERADORPrecision(){
				    return 0;
				}
				public String NUMERADORDefault(){
				
					return "";
				
				}
				public String NUMERADORComment(){
				
				    return "";
				
				}
				public String NUMERADORPattern(){
				
					return "";
				
				}
				public String NUMERADOROriginalDbColumnName(){
				
					return "NUMERADOR";
				
				}

				
			    public BigDecimal DENOMINADOR;

				public BigDecimal getDENOMINADOR () {
					return this.DENOMINADOR;
				}

				public Boolean DENOMINADORIsNullable(){
				    return true;
				}
				public Boolean DENOMINADORIsKey(){
				    return false;
				}
				public Integer DENOMINADORLength(){
				    return 0;
				}
				public Integer DENOMINADORPrecision(){
				    return 0;
				}
				public String DENOMINADORDefault(){
				
					return "";
				
				}
				public String DENOMINADORComment(){
				
				    return "";
				
				}
				public String DENOMINADORPattern(){
				
					return "";
				
				}
				public String DENOMINADOROriginalDbColumnName(){
				
					return "DENOMINADOR";
				
				}

				
			    public BigDecimal INDICADOR;

				public BigDecimal getINDICADOR () {
					return this.INDICADOR;
				}

				public Boolean INDICADORIsNullable(){
				    return true;
				}
				public Boolean INDICADORIsKey(){
				    return false;
				}
				public Integer INDICADORLength(){
				    return 0;
				}
				public Integer INDICADORPrecision(){
				    return 0;
				}
				public String INDICADORDefault(){
				
					return "";
				
				}
				public String INDICADORComment(){
				
				    return "";
				
				}
				public String INDICADORPattern(){
				
					return "";
				
				}
				public String INDICADOROriginalDbColumnName(){
				
					return "INDICADOR";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",FPERIODO="+String.valueOf(FPERIODO));
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",NUMERADOR="+String.valueOf(NUMERADOR));
		sb.append(",DENOMINADOR="+String.valueOf(DENOMINADOR));
		sb.append(",INDICADOR="+String.valueOf(INDICADOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_17Process(globalMap);

		row45Struct row45 = new row45Struct();
copyOfElimina7Struct copyOfElimina7 = new copyOfElimina7Struct();
copyOfInserta8Struct copyOfInserta8 = new copyOfInserta8Struct();





	
	/**
	 * [tOracleOutput_39 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_39", false);
		start_Hash.put("tOracleOutput_39", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_39";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfElimina7");
					}
				
		int tos_count_tOracleOutput_39 = 0;
		






        int deleteKeyCount_tOracleOutput_39 = 4;
        if(deleteKeyCount_tOracleOutput_39 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_39 = 0;
    int nb_line_update_tOracleOutput_39 = 0;
    int nb_line_inserted_tOracleOutput_39 = 0;
    int nb_line_deleted_tOracleOutput_39 = 0;
    int nb_line_rejected_tOracleOutput_39 = 0;

    int tmp_batchUpdateCount_tOracleOutput_39 = 0;

    int deletedCount_tOracleOutput_39=0;
    int updatedCount_tOracleOutput_39=0;
    int insertedCount_tOracleOutput_39=0;
    int rowsToCommitCount_tOracleOutput_39=0;
    int rejectedCount_tOracleOutput_39=0;

    boolean whetherReject_tOracleOutput_39 = false;

    java.sql.Connection conn_tOracleOutput_39 = null;

    //optional table
    String dbschema_tOracleOutput_39 = null;
    String tableName_tOracleOutput_39 = null;
                    String driverClass_tOracleOutput_39 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_39);
                String url_tOracleOutput_39 = null;
                    url_tOracleOutput_39 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_39 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_39 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_39 = decryptedPassword_tOracleOutput_39;
                dbschema_tOracleOutput_39 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_39 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_39.put("user",dbUser_tOracleOutput_39);
                    atnParamsPrope_tOracleOutput_39.put("password",dbPwd_tOracleOutput_39);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_39.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_39 = java.sql.DriverManager.getConnection(url_tOracleOutput_39, atnParamsPrope_tOracleOutput_39);
        resourceMap.put("conn_tOracleOutput_39", conn_tOracleOutput_39);
            conn_tOracleOutput_39.setAutoCommit(false);
            int commitEvery_tOracleOutput_39 = 1000;
            int commitCounter_tOracleOutput_39 = 0;
        int batchSize_tOracleOutput_39 = 1000;
        int batchSizeCounter_tOracleOutput_39=0;
        int count_tOracleOutput_39=0;

        if(dbschema_tOracleOutput_39 == null || dbschema_tOracleOutput_39.trim().length() == 0) {
            tableName_tOracleOutput_39 = ("BACM_INDICADORES");
        } else {
            tableName_tOracleOutput_39 = dbschema_tOracleOutput_39 + "." + ("BACM_INDICADORES");
        }
                String delete_tOracleOutput_39 = "DELETE FROM " + tableName_tOracleOutput_39 + " WHERE UORG_ID = ? AND PRESTADOR_ID = ? AND TINDICADORES_ID = ? AND TIEMPOS_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_39 = conn_tOracleOutput_39.prepareStatement(delete_tOracleOutput_39);
                resourceMap.put("pstmt_tOracleOutput_39", pstmt_tOracleOutput_39);





 



/**
 * [tOracleOutput_39 begin ] stop
 */




	
	/**
	 * [tOracleOutput_41 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_41", false);
		start_Hash.put("tOracleOutput_41", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_41";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfInserta8");
					}
				
		int tos_count_tOracleOutput_41 = 0;
		






    
    int nb_line_tOracleOutput_41 = 0;
    int nb_line_update_tOracleOutput_41 = 0;
    int nb_line_inserted_tOracleOutput_41 = 0;
    int nb_line_deleted_tOracleOutput_41 = 0;
    int nb_line_rejected_tOracleOutput_41 = 0;

    int tmp_batchUpdateCount_tOracleOutput_41 = 0;

    int deletedCount_tOracleOutput_41=0;
    int updatedCount_tOracleOutput_41=0;
    int insertedCount_tOracleOutput_41=0;
    int rowsToCommitCount_tOracleOutput_41=0;
    int rejectedCount_tOracleOutput_41=0;

    boolean whetherReject_tOracleOutput_41 = false;

    java.sql.Connection conn_tOracleOutput_41 = null;

    //optional table
    String dbschema_tOracleOutput_41 = null;
    String tableName_tOracleOutput_41 = null;
                    String driverClass_tOracleOutput_41 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_41);
                String url_tOracleOutput_41 = null;
                    url_tOracleOutput_41 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_41 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_41 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_41 = decryptedPassword_tOracleOutput_41;
                dbschema_tOracleOutput_41 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_41 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_41.put("user",dbUser_tOracleOutput_41);
                    atnParamsPrope_tOracleOutput_41.put("password",dbPwd_tOracleOutput_41);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_41.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_41 = java.sql.DriverManager.getConnection(url_tOracleOutput_41, atnParamsPrope_tOracleOutput_41);
        resourceMap.put("conn_tOracleOutput_41", conn_tOracleOutput_41);
            conn_tOracleOutput_41.setAutoCommit(false);
            int commitEvery_tOracleOutput_41 = 1000;
            int commitCounter_tOracleOutput_41 = 0;
        int batchSize_tOracleOutput_41 = 1000;
        int batchSizeCounter_tOracleOutput_41=0;
        int count_tOracleOutput_41=0;

        if(dbschema_tOracleOutput_41 == null || dbschema_tOracleOutput_41.trim().length() == 0) {
            tableName_tOracleOutput_41 = ("BACM_INDICADORES");
        } else {
            tableName_tOracleOutput_41 = dbschema_tOracleOutput_41 + "." + ("BACM_INDICADORES");
        }
                String insert_tOracleOutput_41 = "INSERT INTO " + tableName_tOracleOutput_41 + " (UORG_ID,PRESTADOR_ID,SERVICIOS_ID,TINDICADORES_ID,NUMERADOR,DENOMINADOR,INDICADOR,TIEMPOS_ID) VALUES (?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_41 = conn_tOracleOutput_41.prepareStatement(insert_tOracleOutput_41);
                        resourceMap.put("pstmt_tOracleOutput_41", pstmt_tOracleOutput_41);





 



/**
 * [tOracleOutput_41 begin ] stop
 */



	
	/**
	 * [tMap_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_15", false);
		start_Hash.put("tMap_15", System.currentTimeMillis());
		
	
	currentComponent="tMap_15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row45");
					}
				
		int tos_count_tMap_15 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct> tHash_Lookup_row46 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct>) 
					globalMap.get( "tHash_Lookup_row46" ))
					;					
					
	

row46Struct row46HashKey = new row46Struct();
row46Struct row46Default = new row46Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_15__Struct  {
}
Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfElimina7Struct copyOfElimina7_tmp = new copyOfElimina7Struct();
copyOfInserta8Struct copyOfInserta8_tmp = new copyOfInserta8Struct();
// ###############################

        
        



        









 



/**
 * [tMap_15 begin ] stop
 */



	
	/**
	 * [tOracleInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_19", false);
		start_Hash.put("tOracleInput_19", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_19";
	
	
		int tos_count_tOracleInput_19 = 0;
		
	


	
		    int nb_line_tOracleInput_19 = 0;
		    java.sql.Connection conn_tOracleInput_19 = null;
				conn_tOracleInput_19 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_19 = false;
				boolean isConnectionWrapped_tOracleInput_19 = !(conn_tOracleInput_19 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_19.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_19 = null;
                if (isConnectionWrapped_tOracleInput_19) {
					unwrappedOraConn_tOracleInput_19 = conn_tOracleInput_19.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_19 != null) {
                        isTimeZoneNull_tOracleInput_19 = (unwrappedOraConn_tOracleInput_19.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_19 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_19).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_19) {
					java.sql.Statement stmtGetTZ_tOracleInput_19 = conn_tOracleInput_19.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_19 = stmtGetTZ_tOracleInput_19.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_19 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_19.next()) {
						sessionTimezone_tOracleInput_19 = rsGetTZ_tOracleInput_19.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_19 && unwrappedOraConn_tOracleInput_19 != null) {
                        unwrappedOraConn_tOracleInput_19.setSessionTimeZone(sessionTimezone_tOracleInput_19);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_19).setSessionTimeZone(sessionTimezone_tOracleInput_19);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_19 = conn_tOracleInput_19.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_19.setFetchSize(1000);


		    String dbquery_tOracleInput_19 = "SELECT    UORG_ID \n        , PRESTADOR_ID         \n        , FPERIODO      \n        , SERVICIOS_ID\n        , (SELEC"
+"T ID FROM GEN_TINDICADORES WHERE CODIGO = 'ACM07') AS TINDICADORES_ID\n        , VALOR_FACTURADO  AS NUMERADOR\n        "
+", SUM ( VALOR_FACTURADO ) OVER ( PARTITION BY    UORG_ID , PRESTADOR_ID , FPERIODO ) AS DENOMINADOR\n        , CASE \n  "
+"          WHEN  SUM ( VALOR_FACTURADO ) OVER ( PARTITION BY    UORG_ID , PRESTADOR_ID , FPERIODO ) > 0\n            THEN"
+"  VALOR_FACTURADO*100/SUM ( VALOR_FACTURADO ) OVER ( PARTITION BY    UORG_ID , PRESTADOR_ID , FPERIODO ) \n            E"
+"LSE  NULL \n          END AS INDICADOR\nFROM (\n    SELECT    COND.UORG_ID \n            , COND.PRESTADOR_ID         \n "
+"           , COND.FPERIODO      \n            , COALESCE( DFS.SERVICIOS_ID, ASERT.SERVICIOS_ID,88 ) AS SERVICIOS_ID\n   "
+"         , SUM( NVL(DFS.VTOTAL, DFF.VTOTAL) ) AS VALOR_FACTURADO            \n    FROM ACM_ETAPASNORMATIVIDAD EN\n    IN"
+"NER JOIN ACM_HAUDITORIAS HA ON EN.ID = HA.ETAPASNORMATIVIDAD_ID \n    INNER JOIN ACM_ESTAUDITORIAS ESA ON ESA.ID = HA.ES"
+"TAUDITORIA_ID\n    INNER JOIN ACM_RECEPCION RE ON RE.ID = HA.RECEPCION_ID\n    LEFT JOIN ACM_DFACTURASERVICIO DFS ON DFS"
+".RECEPCION_ID = HA.RECEPCION_ID  \n                                      AND DFS.ESTREGISTRO_ID = 1\n    LEFT JOIN ACM_D"
+"FACTURAFORMULACION DFF ON DFF.RECEPCION_ID = HA.RECEPCION_ID \n                                         AND DFF.ESTREGIS"
+"TRO_ID = 1                             \n    INNER JOIN ( \n       SELECT     FPERIODO\n                , PRESTADOR_ID\n"
+"                , UORG_ID            \n        FROM (\n          SELECT    TRUNC ( NVL( DFS.FSERVICIO, DFF.FDISPENSACION"
+") , 'MONTH') AS FPERIODO\n                  , RE.PRESTADOR_ID \n                  , RE.UORG_ID                          "
+" \n                  , ROW_NUMBER() OVER ( PARTITION BY    TRUNC ( NVL( DFS.FSERVICIO, DFF.FDISPENSACION) , 'MONTH')\n  "
+"                                                    , RE.PRESTADOR_ID \n                                                "
+"      , RE.UORG_ID                                                               \n                                     "
+"   ORDER BY RE.ID ) R\n          FROM ACM_ETAPASNORMATIVIDAD EN\n          INNER JOIN ACM_HAUDITORIAS HA ON EN.ID = HA.E"
+"TAPASNORMATIVIDAD_ID\n		  INNER JOIN ACM_ESTAUDITORIAS ESA ON ESA.ID = HA.ESTAUDITORIA_ID	      \n          INNER JOIN A"
+"CM_RECEPCION RE ON RE.ID = HA.RECEPCION_ID\n          LEFT JOIN ACM_DFACTURASERVICIO DFS ON DFS.RECEPCION_ID = HA.RECEPC"
+"ION_ID  AND DFS.ESTREGISTRO_ID = 1\n          LEFT JOIN ACM_DFACTURAFORMULACION DFF ON DFF.RECEPCION_ID = HA.RECEPCION_I"
+"D AND DFF.ESTREGISTRO_ID = 1         \n          WHERE EN.CODIGO = 1        \n            AND HA.ESTREGISTRO_ID = 1\n   "
+"         AND RE.ESTREGISTRO_ID = 1  \n			AND ESA.NOMBRE = 'Finalizada'\n            AND ( DFS.ID IS NOT NULL OR DFF.ID I"
+"S NOT NULL )\n            AND ( HA.EJECUCION = 1  )\n               "+context.CONDICION+"     \n        ) WHERE R = 1\n    ) COND ON COND.FPERIODO = TRUNC ( NVL( DFS.FSERVICIO, DFF.FDISPENSACION) , 'MONTH')  "
+"   \n          AND COND.PRESTADOR_ID = RE.PRESTADOR_ID \n          AND COND.UORG_ID = RE.UORG_ID     \n    LEFT JOIN HCL"
+"_DFORMMEDINSUMOS DFOR ON DFOR.ID = DFF.DFORMMEDINSUMOS_ID\n                                      AND DFOR.ESTREGISTRO_ID"
+" = 1\n    LEFT JOIN HCL_FORMMEDINSUMOS FORMMEDIN ON FORMMEDIN.ID = DFOR.FORMMEDINSUMOS_ID \n                            "
+"              AND FORMMEDIN.ESTREGISTRO_ID = 1\n    LEFT JOIN HCL_FORMMEDICAS FORMU ON FORMU.ID = FORMMEDIN.FORMMEDICAS_"
+"ID  \n                                   AND FORMU.ESTREGISTRO_ID = 1\n    LEFT JOIN HCL_PROCESOSASISTENCIALES HP ON HP."
+"ID = FORMU.PROCESOSASISTENCIALES_ID\n                                          AND HP.ESTREGISTRO_ID = 1\n    LEFT JOIN "
+"ADM_ESPTRATANTES AESP ON AESP.ID = HP.ESPTRATANTES_ID \n                                   AND AESP.ESTREGISTRO_ID = 1\n"
+"    LEFT JOIN ADM_SERVTRATANTES ASERT ON ASERT.ID = AESP.SERVTRATANTES_ID\n                                     AND ASER"
+"T.ESTREGISTRO_ID = 1\n    WHERE HA.ESTREGISTRO_ID = 1\n      AND RE.ESTREGISTRO_ID = 1  \n      AND EN.CODIGO = 1\n     "
+" AND ( DFS.ID IS NOT NULL OR DFF.ID IS NOT NULL )\n      AND ( HA.EJECUCION = 1  )\n     AND HA.FFETAPA IS NOT NULL \n  "
+"    AND ESA.NOMBRE = 'Finalizada'\n    GROUP BY  COND.UORG_ID \n            , COND.PRESTADOR_ID         \n            , "
+"COND.FPERIODO        \n            , COALESCE( DFS.SERVICIOS_ID, ASERT.SERVICIOS_ID,88 )        \n)  ";
		    

		    globalMap.put("tOracleInput_19_QUERY",dbquery_tOracleInput_19);

		    java.sql.ResultSet rs_tOracleInput_19 = null;

		    try {
		    	rs_tOracleInput_19 = stmt_tOracleInput_19.executeQuery(dbquery_tOracleInput_19);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_19 = rs_tOracleInput_19.getMetaData();
		    	int colQtyInRs_tOracleInput_19 = rsmd_tOracleInput_19.getColumnCount();

		    String tmpContent_tOracleInput_19 = null;
		    
		    
		    while (rs_tOracleInput_19.next()) {
		        nb_line_tOracleInput_19++;
		        
							if(colQtyInRs_tOracleInput_19 < 1) {
								row45.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(1) != null) {
						row45.UORG_ID = rs_tOracleInput_19.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 2) {
								row45.PRESTADOR_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(2) != null) {
						row45.PRESTADOR_ID = rs_tOracleInput_19.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 3) {
								row45.FPERIODO = null;
							} else {
										
			row45.FPERIODO = routines.system.JDBCUtil.getDate(rs_tOracleInput_19, 3);
		                    }
							if(colQtyInRs_tOracleInput_19 < 4) {
								row45.SERVICIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(4) != null) {
						row45.SERVICIOS_ID = rs_tOracleInput_19.getBigDecimal(4);
					} else {
				
						row45.SERVICIOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 5) {
								row45.TINDICADORES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(5) != null) {
						row45.TINDICADORES_ID = rs_tOracleInput_19.getBigDecimal(5);
					} else {
				
						row45.TINDICADORES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 6) {
								row45.NUMERADOR = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(6) != null) {
						row45.NUMERADOR = rs_tOracleInput_19.getBigDecimal(6);
					} else {
				
						row45.NUMERADOR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 7) {
								row45.DENOMINADOR = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(7) != null) {
						row45.DENOMINADOR = rs_tOracleInput_19.getBigDecimal(7);
					} else {
				
						row45.DENOMINADOR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 8) {
								row45.INDICADOR = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(8) != null) {
						row45.INDICADOR = rs_tOracleInput_19.getBigDecimal(8);
					} else {
				
						row45.INDICADOR = null;
					}
		                    }
					




 



/**
 * [tOracleInput_19 begin ] stop
 */
	
	/**
	 * [tOracleInput_19 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 


	tos_count_tOracleInput_19++;

/**
 * [tOracleInput_19 main ] stop
 */
	
	/**
	 * [tOracleInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tMap_15 main ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row45"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;
		
						row46Struct row46 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_15 = false;
		boolean mainRowRejected_tMap_15 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row46" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow46 = false;
       		  	    	
       		  	    	
 							row46Struct row46ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_15) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_15 = false;
								
                        		    		    row46HashKey.FECHA = row45.FPERIODO  == null ? null : new java.util.Date((row45.FPERIODO ).getTime());
                        		    		

								
		                        	row46HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row46.lookup( row46HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row46.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_15 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row46 != null && tHash_Lookup_row46.getCount(row46HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row46' and it contains more one result from keys :  row46.FECHA = '" + row46HashKey.FECHA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row46Struct fromLookup_row46 = null;
							row46 = row46Default;
										 
							
								 
							
							
								if (tHash_Lookup_row46 !=null && tHash_Lookup_row46.hasNext()) { // G 099
								
							
								
								fromLookup_row46 = tHash_Lookup_row46.next();

							
							
								} // G 099
							
							

							if(fromLookup_row46 != null) {
								row46 = fromLookup_row46;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
        // ###############################
        // # Output tables

copyOfElimina7 = null;
copyOfInserta8 = null;

if(!rejectedInnerJoin_tMap_15 ) {

// # Output table : 'copyOfElimina7'
copyOfElimina7_tmp.UORG_ID = row45.UORG_ID ;
copyOfElimina7_tmp.PRESTADOR_ID = row45.PRESTADOR_ID ;
copyOfElimina7_tmp.TINDICADORES_ID = row45.TINDICADORES_ID;
copyOfElimina7_tmp.TIEMPOS_ID = row46.ID ;
copyOfElimina7 = copyOfElimina7_tmp;

// # Output table : 'copyOfInserta8'
copyOfInserta8_tmp.UORG_ID = row45.UORG_ID ;
copyOfInserta8_tmp.PRESTADOR_ID = row45.PRESTADOR_ID ;
copyOfInserta8_tmp.SERVICIOS_ID = row45.SERVICIOS_ID ;
copyOfInserta8_tmp.TINDICADORES_ID = row45.TINDICADORES_ID;
copyOfInserta8_tmp.NUMERADOR = row45.NUMERADOR ;
copyOfInserta8_tmp.DENOMINADOR =   row45.DENOMINADOR;
copyOfInserta8_tmp.INDICADOR = row45.INDICADOR;
copyOfInserta8_tmp.TIEMPOS_ID = row46.ID ;
copyOfInserta8 = copyOfInserta8_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_15 = false;










 


	tos_count_tMap_15++;

/**
 * [tMap_15 main ] stop
 */
	
	/**
	 * [tMap_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	

 



/**
 * [tMap_15 process_data_begin ] stop
 */
// Start of branch "copyOfElimina7"
if(copyOfElimina7 != null) { 



	
	/**
	 * [tOracleOutput_39 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_39";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfElimina7"
						
						);
					}
					



        whetherReject_tOracleOutput_39 = false;
                    pstmt_tOracleOutput_39.setBigDecimal(1, copyOfElimina7.UORG_ID);

                    pstmt_tOracleOutput_39.setBigDecimal(2, copyOfElimina7.PRESTADOR_ID);

                    pstmt_tOracleOutput_39.setBigDecimal(3, copyOfElimina7.TINDICADORES_ID);

                    pstmt_tOracleOutput_39.setBigDecimal(4, copyOfElimina7.TIEMPOS_ID);

                pstmt_tOracleOutput_39.addBatch();
                nb_line_tOracleOutput_39++;
                batchSizeCounter_tOracleOutput_39++;
            if (batchSize_tOracleOutput_39 > 0 &&  batchSize_tOracleOutput_39 <= batchSizeCounter_tOracleOutput_39) {
                try {
                    pstmt_tOracleOutput_39.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_39){
globalMap.put("tOracleOutput_39_ERROR_MESSAGE",e_tOracleOutput_39.getMessage());
			        java.sql.SQLException ne_tOracleOutput_39 = e_tOracleOutput_39.getNextException(),sqle_tOracleOutput_39=null;
			    	String errormessage_tOracleOutput_39;
					if (ne_tOracleOutput_39 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_39 = new java.sql.SQLException(e_tOracleOutput_39.getMessage() + "\ncaused by: " + ne_tOracleOutput_39.getMessage(), ne_tOracleOutput_39.getSQLState(), ne_tOracleOutput_39.getErrorCode(), ne_tOracleOutput_39);
						errormessage_tOracleOutput_39 = sqle_tOracleOutput_39.getMessage();
					}else{
						errormessage_tOracleOutput_39 = e_tOracleOutput_39.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_39);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_39 = pstmt_tOracleOutput_39.getUpdateCount();
                    deletedCount_tOracleOutput_39
                += (tmp_batchUpdateCount_tOracleOutput_39!=-1?tmp_batchUpdateCount_tOracleOutput_39:0);
                rowsToCommitCount_tOracleOutput_39 += (tmp_batchUpdateCount_tOracleOutput_39!=-1?tmp_batchUpdateCount_tOracleOutput_39:0);
                batchSizeCounter_tOracleOutput_39 = 0;
            }
                commitCounter_tOracleOutput_39++;
                if(commitEvery_tOracleOutput_39 <= commitCounter_tOracleOutput_39) {
                    if(batchSizeCounter_tOracleOutput_39 > 0) {
                        try {
                            pstmt_tOracleOutput_39.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_39){
globalMap.put("tOracleOutput_39_ERROR_MESSAGE",e_tOracleOutput_39.getMessage());
					        java.sql.SQLException ne_tOracleOutput_39 = e_tOracleOutput_39.getNextException(),sqle_tOracleOutput_39=null;
					    	String errormessage_tOracleOutput_39;
							if (ne_tOracleOutput_39 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_39 = new java.sql.SQLException(e_tOracleOutput_39.getMessage() + "\ncaused by: " + ne_tOracleOutput_39.getMessage(), ne_tOracleOutput_39.getSQLState(), ne_tOracleOutput_39.getErrorCode(), ne_tOracleOutput_39);
								errormessage_tOracleOutput_39 = sqle_tOracleOutput_39.getMessage();
							}else{
								errormessage_tOracleOutput_39 = e_tOracleOutput_39.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_39);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_39 = pstmt_tOracleOutput_39.getUpdateCount();
                            deletedCount_tOracleOutput_39
                        += (tmp_batchUpdateCount_tOracleOutput_39!=-1?tmp_batchUpdateCount_tOracleOutput_39:0);
                        rowsToCommitCount_tOracleOutput_39 += (tmp_batchUpdateCount_tOracleOutput_39!=-1?tmp_batchUpdateCount_tOracleOutput_39:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_39 != 0){
                    	
                    }
                    conn_tOracleOutput_39.commit();
                    if(rowsToCommitCount_tOracleOutput_39 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_39 = 0;
                    }
                    commitCounter_tOracleOutput_39=0;
                    	batchSizeCounter_tOracleOutput_39=0;
                }

 


	tos_count_tOracleOutput_39++;

/**
 * [tOracleOutput_39 main ] stop
 */
	
	/**
	 * [tOracleOutput_39 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_39";
	
	

 



/**
 * [tOracleOutput_39 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_39 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_39";
	
	

 



/**
 * [tOracleOutput_39 process_data_end ] stop
 */

} // End of branch "copyOfElimina7"




// Start of branch "copyOfInserta8"
if(copyOfInserta8 != null) { 



	
	/**
	 * [tOracleOutput_41 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_41";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfInserta8"
						
						);
					}
					



        whetherReject_tOracleOutput_41 = false;
                        pstmt_tOracleOutput_41.setBigDecimal(1, copyOfInserta8.UORG_ID);

                        pstmt_tOracleOutput_41.setBigDecimal(2, copyOfInserta8.PRESTADOR_ID);

                        pstmt_tOracleOutput_41.setBigDecimal(3, copyOfInserta8.SERVICIOS_ID);

                        pstmt_tOracleOutput_41.setBigDecimal(4, copyOfInserta8.TINDICADORES_ID);

                        pstmt_tOracleOutput_41.setBigDecimal(5, copyOfInserta8.NUMERADOR);

                        pstmt_tOracleOutput_41.setBigDecimal(6, copyOfInserta8.DENOMINADOR);

                        pstmt_tOracleOutput_41.setBigDecimal(7, copyOfInserta8.INDICADOR);

                        pstmt_tOracleOutput_41.setBigDecimal(8, copyOfInserta8.TIEMPOS_ID);

                pstmt_tOracleOutput_41.addBatch();
                nb_line_tOracleOutput_41++;
                batchSizeCounter_tOracleOutput_41++;
            if (batchSize_tOracleOutput_41 > 0 &&  batchSize_tOracleOutput_41 <= batchSizeCounter_tOracleOutput_41) {
                try {
                    pstmt_tOracleOutput_41.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_41){
globalMap.put("tOracleOutput_41_ERROR_MESSAGE",e_tOracleOutput_41.getMessage());
			        java.sql.SQLException ne_tOracleOutput_41 = e_tOracleOutput_41.getNextException(),sqle_tOracleOutput_41=null;
			    	String errormessage_tOracleOutput_41;
					if (ne_tOracleOutput_41 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_41 = new java.sql.SQLException(e_tOracleOutput_41.getMessage() + "\ncaused by: " + ne_tOracleOutput_41.getMessage(), ne_tOracleOutput_41.getSQLState(), ne_tOracleOutput_41.getErrorCode(), ne_tOracleOutput_41);
						errormessage_tOracleOutput_41 = sqle_tOracleOutput_41.getMessage();
					}else{
						errormessage_tOracleOutput_41 = e_tOracleOutput_41.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_41);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_41 = pstmt_tOracleOutput_41.getUpdateCount();
                    insertedCount_tOracleOutput_41
                += (tmp_batchUpdateCount_tOracleOutput_41!=-1?tmp_batchUpdateCount_tOracleOutput_41:0);
                rowsToCommitCount_tOracleOutput_41 += (tmp_batchUpdateCount_tOracleOutput_41!=-1?tmp_batchUpdateCount_tOracleOutput_41:0);
                batchSizeCounter_tOracleOutput_41 = 0;
            }
                commitCounter_tOracleOutput_41++;
                if(commitEvery_tOracleOutput_41 <= commitCounter_tOracleOutput_41) {
                    if(batchSizeCounter_tOracleOutput_41 > 0) {
                        try {
                            pstmt_tOracleOutput_41.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_41){
globalMap.put("tOracleOutput_41_ERROR_MESSAGE",e_tOracleOutput_41.getMessage());
					        java.sql.SQLException ne_tOracleOutput_41 = e_tOracleOutput_41.getNextException(),sqle_tOracleOutput_41=null;
					    	String errormessage_tOracleOutput_41;
							if (ne_tOracleOutput_41 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_41 = new java.sql.SQLException(e_tOracleOutput_41.getMessage() + "\ncaused by: " + ne_tOracleOutput_41.getMessage(), ne_tOracleOutput_41.getSQLState(), ne_tOracleOutput_41.getErrorCode(), ne_tOracleOutput_41);
								errormessage_tOracleOutput_41 = sqle_tOracleOutput_41.getMessage();
							}else{
								errormessage_tOracleOutput_41 = e_tOracleOutput_41.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_41);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_41 = pstmt_tOracleOutput_41.getUpdateCount();
                            insertedCount_tOracleOutput_41
                        += (tmp_batchUpdateCount_tOracleOutput_41!=-1?tmp_batchUpdateCount_tOracleOutput_41:0);
                        rowsToCommitCount_tOracleOutput_41 += (tmp_batchUpdateCount_tOracleOutput_41!=-1?tmp_batchUpdateCount_tOracleOutput_41:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_41 != 0){
                    	
                    }
                    conn_tOracleOutput_41.commit();
                    if(rowsToCommitCount_tOracleOutput_41 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_41 = 0;
                    }
                    commitCounter_tOracleOutput_41=0;
                    	batchSizeCounter_tOracleOutput_41=0;
                }

 


	tos_count_tOracleOutput_41++;

/**
 * [tOracleOutput_41 main ] stop
 */
	
	/**
	 * [tOracleOutput_41 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_41";
	
	

 



/**
 * [tOracleOutput_41 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_41 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_41";
	
	

 



/**
 * [tOracleOutput_41 process_data_end ] stop
 */

} // End of branch "copyOfInserta8"




	
	/**
	 * [tMap_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	

 



/**
 * [tMap_15 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_19 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

}
}finally{
	if (rs_tOracleInput_19 != null) {
		rs_tOracleInput_19.close();
	}
	if (stmt_tOracleInput_19 != null) {
		stmt_tOracleInput_19.close();
	}
}

globalMap.put("tOracleInput_19_NB_LINE",nb_line_tOracleInput_19);
 

ok_Hash.put("tOracleInput_19", true);
end_Hash.put("tOracleInput_19", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk20", 0, "ok");
				}
				tJava_12Process(globalMap);



/**
 * [tOracleInput_19 end ] stop
 */

	
	/**
	 * [tMap_15 end ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row46 != null) {
						tHash_Lookup_row46.endGet();
					}
					globalMap.remove( "tHash_Lookup_row46" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row45");
			  	}
			  	
 

ok_Hash.put("tMap_15", true);
end_Hash.put("tMap_15", System.currentTimeMillis());




/**
 * [tMap_15 end ] stop
 */

	
	/**
	 * [tOracleOutput_39 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_39";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_39 > 0) {
            try {
            	if (pstmt_tOracleOutput_39 != null) {
					
					pstmt_tOracleOutput_39.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_39){
globalMap.put("tOracleOutput_39_ERROR_MESSAGE",e_tOracleOutput_39.getMessage());
		        java.sql.SQLException ne_tOracleOutput_39 = e_tOracleOutput_39.getNextException(),sqle_tOracleOutput_39=null;
		    	String errormessage_tOracleOutput_39;
				if (ne_tOracleOutput_39 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_39 = new java.sql.SQLException(e_tOracleOutput_39.getMessage() + "\ncaused by: " + ne_tOracleOutput_39.getMessage(), ne_tOracleOutput_39.getSQLState(), ne_tOracleOutput_39.getErrorCode(), ne_tOracleOutput_39);
					errormessage_tOracleOutput_39 = sqle_tOracleOutput_39.getMessage();
				}else{
					errormessage_tOracleOutput_39 = e_tOracleOutput_39.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_39);
            	
        	}
        	if (pstmt_tOracleOutput_39 != null) {
            	tmp_batchUpdateCount_tOracleOutput_39 = pstmt_tOracleOutput_39.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_39
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_39!=-1?tmp_batchUpdateCount_tOracleOutput_39:0);
				rowsToCommitCount_tOracleOutput_39 += (tmp_batchUpdateCount_tOracleOutput_39!=-1?tmp_batchUpdateCount_tOracleOutput_39:0);
            }
        }
        if(pstmt_tOracleOutput_39 != null) {
			
				pstmt_tOracleOutput_39.close();
				resourceMap.remove("pstmt_tOracleOutput_39");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_39", true);
		if(commitCounter_tOracleOutput_39 > 0 && rowsToCommitCount_tOracleOutput_39 != 0) {
			
		}
		conn_tOracleOutput_39.commit();
		if(commitCounter_tOracleOutput_39 > 0 && rowsToCommitCount_tOracleOutput_39 != 0) {
			
			rowsToCommitCount_tOracleOutput_39 = 0;
		}
		commitCounter_tOracleOutput_39 = 0;
		
		
		conn_tOracleOutput_39 .close();
		
		resourceMap.put("finish_tOracleOutput_39", true);
   	

	
	nb_line_deleted_tOracleOutput_39=nb_line_deleted_tOracleOutput_39+ deletedCount_tOracleOutput_39;
	nb_line_update_tOracleOutput_39=nb_line_update_tOracleOutput_39 + updatedCount_tOracleOutput_39;
	nb_line_inserted_tOracleOutput_39=nb_line_inserted_tOracleOutput_39 + insertedCount_tOracleOutput_39;
	nb_line_rejected_tOracleOutput_39=nb_line_rejected_tOracleOutput_39 + rejectedCount_tOracleOutput_39;
	
        globalMap.put("tOracleOutput_39_NB_LINE",nb_line_tOracleOutput_39);
        globalMap.put("tOracleOutput_39_NB_LINE_UPDATED",nb_line_update_tOracleOutput_39);
        globalMap.put("tOracleOutput_39_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_39);
        globalMap.put("tOracleOutput_39_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_39);
        globalMap.put("tOracleOutput_39_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_39);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfElimina7");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_39", true);
end_Hash.put("tOracleOutput_39", System.currentTimeMillis());




/**
 * [tOracleOutput_39 end ] stop
 */




	
	/**
	 * [tOracleOutput_41 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_41";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_41 > 0) {
            try {
            	if (pstmt_tOracleOutput_41 != null) {
					
					pstmt_tOracleOutput_41.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_41){
globalMap.put("tOracleOutput_41_ERROR_MESSAGE",e_tOracleOutput_41.getMessage());
		        java.sql.SQLException ne_tOracleOutput_41 = e_tOracleOutput_41.getNextException(),sqle_tOracleOutput_41=null;
		    	String errormessage_tOracleOutput_41;
				if (ne_tOracleOutput_41 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_41 = new java.sql.SQLException(e_tOracleOutput_41.getMessage() + "\ncaused by: " + ne_tOracleOutput_41.getMessage(), ne_tOracleOutput_41.getSQLState(), ne_tOracleOutput_41.getErrorCode(), ne_tOracleOutput_41);
					errormessage_tOracleOutput_41 = sqle_tOracleOutput_41.getMessage();
				}else{
					errormessage_tOracleOutput_41 = e_tOracleOutput_41.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_41);
            	
        	}
        	if (pstmt_tOracleOutput_41 != null) {
            	tmp_batchUpdateCount_tOracleOutput_41 = pstmt_tOracleOutput_41.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_41
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_41!=-1?tmp_batchUpdateCount_tOracleOutput_41:0);
				rowsToCommitCount_tOracleOutput_41 += (tmp_batchUpdateCount_tOracleOutput_41!=-1?tmp_batchUpdateCount_tOracleOutput_41:0);
            }
        }
        if(pstmt_tOracleOutput_41 != null) {
			
				pstmt_tOracleOutput_41.close();
				resourceMap.remove("pstmt_tOracleOutput_41");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_41", true);
		if(commitCounter_tOracleOutput_41 > 0 && rowsToCommitCount_tOracleOutput_41 != 0) {
			
		}
		conn_tOracleOutput_41.commit();
		if(commitCounter_tOracleOutput_41 > 0 && rowsToCommitCount_tOracleOutput_41 != 0) {
			
			rowsToCommitCount_tOracleOutput_41 = 0;
		}
		commitCounter_tOracleOutput_41 = 0;
		
		
		conn_tOracleOutput_41 .close();
		
		resourceMap.put("finish_tOracleOutput_41", true);
   	

	
	nb_line_deleted_tOracleOutput_41=nb_line_deleted_tOracleOutput_41+ deletedCount_tOracleOutput_41;
	nb_line_update_tOracleOutput_41=nb_line_update_tOracleOutput_41 + updatedCount_tOracleOutput_41;
	nb_line_inserted_tOracleOutput_41=nb_line_inserted_tOracleOutput_41 + insertedCount_tOracleOutput_41;
	nb_line_rejected_tOracleOutput_41=nb_line_rejected_tOracleOutput_41 + rejectedCount_tOracleOutput_41;
	
        globalMap.put("tOracleOutput_41_NB_LINE",nb_line_tOracleOutput_41);
        globalMap.put("tOracleOutput_41_NB_LINE_UPDATED",nb_line_update_tOracleOutput_41);
        globalMap.put("tOracleOutput_41_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_41);
        globalMap.put("tOracleOutput_41_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_41);
        globalMap.put("tOracleOutput_41_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_41);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfInserta8");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_41", true);
end_Hash.put("tOracleOutput_41", System.currentTimeMillis());




/**
 * [tOracleOutput_41 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_19:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tOracleInput_16Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_15"
					     			globalMap.remove("tHash_Lookup_row46"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_19 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 finally ] stop
 */

	
	/**
	 * [tMap_15 finally ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	

 



/**
 * [tMap_15 finally ] stop
 */

	
	/**
	 * [tOracleOutput_39 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_39";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_39") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_39 = null;
                if ((pstmtToClose_tOracleOutput_39 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_39")) != null) {
                    pstmtToClose_tOracleOutput_39.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_39") == null){
            java.sql.Connection ctn_tOracleOutput_39 = null;
            if((ctn_tOracleOutput_39 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_39")) != null){
                try {
                    ctn_tOracleOutput_39.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_39) {
                    String errorMessage_tOracleOutput_39 = "failed to close the connection in tOracleOutput_39 :" + sqlEx_tOracleOutput_39.getMessage();
                    System.err.println(errorMessage_tOracleOutput_39);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_39 finally ] stop
 */




	
	/**
	 * [tOracleOutput_41 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_41";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_41") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_41 = null;
                if ((pstmtToClose_tOracleOutput_41 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_41")) != null) {
                    pstmtToClose_tOracleOutput_41.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_41") == null){
            java.sql.Connection ctn_tOracleOutput_41 = null;
            if((ctn_tOracleOutput_41 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_41")) != null){
                try {
                    ctn_tOracleOutput_41.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_41) {
                    String errorMessage_tOracleOutput_41 = "failed to close the connection in tOracleOutput_41 :" + sqlEx_tOracleOutput_41.getMessage();
                    System.err.println(errorMessage_tOracleOutput_41);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_41 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 1);
	}
	


public void tJava_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_12", false);
		start_Hash.put("tJava_12", System.currentTimeMillis());
		
	
	currentComponent="tJava_12";
	
	
		int tos_count_tJava_12 = 0;
		


System.out.println("consulta tabla: BACM_INDICADORES");
System.out.println(" ");
System.out.println(((String)globalMap.get("tOracleInput_19_QUERY")));
System.out.println("=======================================================");
System.out.println(" ");
 



/**
 * [tJava_12 begin ] stop
 */
	
	/**
	 * [tJava_12 main ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 


	tos_count_tJava_12++;

/**
 * [tJava_12 main ] stop
 */
	
	/**
	 * [tJava_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 



/**
 * [tJava_12 process_data_begin ] stop
 */
	
	/**
	 * [tJava_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 



/**
 * [tJava_12 process_data_end ] stop
 */
	
	/**
	 * [tJava_12 end ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 

ok_Hash.put("tJava_12", true);
end_Hash.put("tJava_12", System.currentTimeMillis());




/**
 * [tJava_12 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_12 finally ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 



/**
 * [tJava_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}
	


public static class Actualiza2Struct implements routines.system.IPersistableRow<Actualiza2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return true;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return null;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String TDOCUMENTO_SIGLA;

				public String getTDOCUMENTO_SIGLA () {
					return this.TDOCUMENTO_SIGLA;
				}

				public Boolean TDOCUMENTO_SIGLAIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_SIGLAIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_SIGLALength(){
				    return 5;
				}
				public Integer TDOCUMENTO_SIGLAPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_SIGLADefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_SIGLAComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_SIGLAPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_SIGLAOriginalDbColumnName(){
				
					return "TDOCUMENTO_SIGLA";
				
				}

				
			    public String TDOCUMENTO_NOMBRE;

				public String getTDOCUMENTO_NOMBRE () {
					return this.TDOCUMENTO_NOMBRE;
				}

				public Boolean TDOCUMENTO_NOMBREIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_NOMBREIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_NOMBRELength(){
				    return 50;
				}
				public Integer TDOCUMENTO_NOMBREPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_NOMBREDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_NOMBREComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_NOMBREPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_NOMBREOriginalDbColumnName(){
				
					return "TDOCUMENTO_NOMBRE";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String ESTADO_USUARIO;

				public String getESTADO_USUARIO () {
					return this.ESTADO_USUARIO;
				}

				public Boolean ESTADO_USUARIOIsNullable(){
				    return false;
				}
				public Boolean ESTADO_USUARIOIsKey(){
				    return false;
				}
				public Integer ESTADO_USUARIOLength(){
				    return 10;
				}
				public Integer ESTADO_USUARIOPrecision(){
				    return 0;
				}
				public String ESTADO_USUARIODefault(){
				
					return null;
				
				}
				public String ESTADO_USUARIOComment(){
				
				    return "";
				
				}
				public String ESTADO_USUARIOPattern(){
				
					return "";
				
				}
				public String ESTADO_USUARIOOriginalDbColumnName(){
				
					return "ESTADO_USUARIO";
				
				}

				
			    public String USUARIO;

				public String getUSUARIO () {
					return this.USUARIO;
				}

				public Boolean USUARIOIsNullable(){
				    return false;
				}
				public Boolean USUARIOIsKey(){
				    return true;
				}
				public Integer USUARIOLength(){
				    return 500;
				}
				public Integer USUARIOPrecision(){
				    return 0;
				}
				public String USUARIODefault(){
				
					return null;
				
				}
				public String USUARIOComment(){
				
				    return "";
				
				}
				public String USUARIOPattern(){
				
					return "";
				
				}
				public String USUARIOOriginalDbColumnName(){
				
					return "USUARIO";
				
				}

				
			    public String TUSUARIO;

				public String getTUSUARIO () {
					return this.TUSUARIO;
				}

				public Boolean TUSUARIOIsNullable(){
				    return true;
				}
				public Boolean TUSUARIOIsKey(){
				    return false;
				}
				public Integer TUSUARIOLength(){
				    return 200;
				}
				public Integer TUSUARIOPrecision(){
				    return 0;
				}
				public String TUSUARIODefault(){
				
					return null;
				
				}
				public String TUSUARIOComment(){
				
				    return "";
				
				}
				public String TUSUARIOPattern(){
				
					return "";
				
				}
				public String TUSUARIOOriginalDbColumnName(){
				
					return "TUSUARIO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PERSONA_ID == null) ? 0 : this.PERSONA_ID.hashCode());
					
						result = prime * result + ((this.USUARIO == null) ? 0 : this.USUARIO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Actualiza2Struct other = (Actualiza2Struct) obj;
		
						if (this.PERSONA_ID == null) {
							if (other.PERSONA_ID != null)
								return false;
						
						} else if (!this.PERSONA_ID.equals(other.PERSONA_ID))
						
							return false;
					
						if (this.USUARIO == null) {
							if (other.USUARIO != null)
								return false;
						
						} else if (!this.USUARIO.equals(other.USUARIO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Actualiza2Struct other) {

		other.PERSONA_ID = this.PERSONA_ID;
	            other.PRIMER_NOMBRE = this.PRIMER_NOMBRE;
	            other.SEGUNDO_NOMBRE = this.SEGUNDO_NOMBRE;
	            other.PRIMER_APELLIDO = this.PRIMER_APELLIDO;
	            other.SEGUNDO_APELLIDO = this.SEGUNDO_APELLIDO;
	            other.TDOCUMENTO_SIGLA = this.TDOCUMENTO_SIGLA;
	            other.TDOCUMENTO_NOMBRE = this.TDOCUMENTO_NOMBRE;
	            other.DOCUMENTO = this.DOCUMENTO;
	            other.ESTADO_USUARIO = this.ESTADO_USUARIO;
	            other.USUARIO = this.USUARIO;
	            other.TUSUARIO = this.TUSUARIO;
	            
	}

	public void copyKeysDataTo(Actualiza2Struct other) {

		other.PERSONA_ID = this.PERSONA_ID;
	            	other.USUARIO = this.USUARIO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TDOCUMENTO_SIGLA = readString(dis);
					
					this.TDOCUMENTO_NOMBRE = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.ESTADO_USUARIO = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.TUSUARIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TDOCUMENTO_SIGLA = readString(dis);
					
					this.TDOCUMENTO_NOMBRE = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.ESTADO_USUARIO = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.TUSUARIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_SIGLA,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_NOMBRE,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.ESTADO_USUARIO,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.TUSUARIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_SIGLA,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_NOMBRE,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.ESTADO_USUARIO,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.TUSUARIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TDOCUMENTO_SIGLA="+TDOCUMENTO_SIGLA);
		sb.append(",TDOCUMENTO_NOMBRE="+TDOCUMENTO_NOMBRE);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",ESTADO_USUARIO="+ESTADO_USUARIO);
		sb.append(",USUARIO="+USUARIO);
		sb.append(",TUSUARIO="+TUSUARIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Actualiza2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PERSONA_ID, other.PERSONA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.USUARIO, other.USUARIO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Inserta11Struct implements routines.system.IPersistableRow<Inserta11Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return null;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String TDOCUMENTO_SIGLA;

				public String getTDOCUMENTO_SIGLA () {
					return this.TDOCUMENTO_SIGLA;
				}

				public Boolean TDOCUMENTO_SIGLAIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_SIGLAIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_SIGLALength(){
				    return 5;
				}
				public Integer TDOCUMENTO_SIGLAPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_SIGLADefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_SIGLAComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_SIGLAPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_SIGLAOriginalDbColumnName(){
				
					return "TDOCUMENTO_SIGLA";
				
				}

				
			    public String TDOCUMENTO_NOMBRE;

				public String getTDOCUMENTO_NOMBRE () {
					return this.TDOCUMENTO_NOMBRE;
				}

				public Boolean TDOCUMENTO_NOMBREIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_NOMBREIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_NOMBRELength(){
				    return 50;
				}
				public Integer TDOCUMENTO_NOMBREPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_NOMBREDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_NOMBREComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_NOMBREPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_NOMBREOriginalDbColumnName(){
				
					return "TDOCUMENTO_NOMBRE";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String ESTADO_USUARIO;

				public String getESTADO_USUARIO () {
					return this.ESTADO_USUARIO;
				}

				public Boolean ESTADO_USUARIOIsNullable(){
				    return false;
				}
				public Boolean ESTADO_USUARIOIsKey(){
				    return false;
				}
				public Integer ESTADO_USUARIOLength(){
				    return 10;
				}
				public Integer ESTADO_USUARIOPrecision(){
				    return 0;
				}
				public String ESTADO_USUARIODefault(){
				
					return null;
				
				}
				public String ESTADO_USUARIOComment(){
				
				    return "";
				
				}
				public String ESTADO_USUARIOPattern(){
				
					return "";
				
				}
				public String ESTADO_USUARIOOriginalDbColumnName(){
				
					return "ESTADO_USUARIO";
				
				}

				
			    public String USUARIO;

				public String getUSUARIO () {
					return this.USUARIO;
				}

				public Boolean USUARIOIsNullable(){
				    return false;
				}
				public Boolean USUARIOIsKey(){
				    return false;
				}
				public Integer USUARIOLength(){
				    return 500;
				}
				public Integer USUARIOPrecision(){
				    return 0;
				}
				public String USUARIODefault(){
				
					return null;
				
				}
				public String USUARIOComment(){
				
				    return "";
				
				}
				public String USUARIOPattern(){
				
					return "";
				
				}
				public String USUARIOOriginalDbColumnName(){
				
					return "USUARIO";
				
				}

				
			    public String TUSUARIO;

				public String getTUSUARIO () {
					return this.TUSUARIO;
				}

				public Boolean TUSUARIOIsNullable(){
				    return true;
				}
				public Boolean TUSUARIOIsKey(){
				    return false;
				}
				public Integer TUSUARIOLength(){
				    return 200;
				}
				public Integer TUSUARIOPrecision(){
				    return 0;
				}
				public String TUSUARIODefault(){
				
					return null;
				
				}
				public String TUSUARIOComment(){
				
				    return "";
				
				}
				public String TUSUARIOPattern(){
				
					return "";
				
				}
				public String TUSUARIOOriginalDbColumnName(){
				
					return "TUSUARIO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TDOCUMENTO_SIGLA = readString(dis);
					
					this.TDOCUMENTO_NOMBRE = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.ESTADO_USUARIO = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.TUSUARIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TDOCUMENTO_SIGLA = readString(dis);
					
					this.TDOCUMENTO_NOMBRE = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.ESTADO_USUARIO = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.TUSUARIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_SIGLA,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_NOMBRE,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.ESTADO_USUARIO,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.TUSUARIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_SIGLA,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_NOMBRE,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.ESTADO_USUARIO,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.TUSUARIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TDOCUMENTO_SIGLA="+TDOCUMENTO_SIGLA);
		sb.append(",TDOCUMENTO_NOMBRE="+TDOCUMENTO_NOMBRE);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",ESTADO_USUARIO="+ESTADO_USUARIO);
		sb.append(",USUARIO="+USUARIO);
		sb.append(",TUSUARIO="+TUSUARIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String TDOCUMENTO_SIGLA;

				public String getTDOCUMENTO_SIGLA () {
					return this.TDOCUMENTO_SIGLA;
				}

				public Boolean TDOCUMENTO_SIGLAIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_SIGLAIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_SIGLALength(){
				    return 5;
				}
				public Integer TDOCUMENTO_SIGLAPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_SIGLADefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_SIGLAComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_SIGLAPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_SIGLAOriginalDbColumnName(){
				
					return "TDOCUMENTO_SIGLA";
				
				}

				
			    public String TDOCUMENTO_NOMBRE;

				public String getTDOCUMENTO_NOMBRE () {
					return this.TDOCUMENTO_NOMBRE;
				}

				public Boolean TDOCUMENTO_NOMBREIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_NOMBREIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_NOMBRELength(){
				    return 50;
				}
				public Integer TDOCUMENTO_NOMBREPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_NOMBREDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_NOMBREComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_NOMBREPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_NOMBREOriginalDbColumnName(){
				
					return "TDOCUMENTO_NOMBRE";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String ESTADO_USUARIO;

				public String getESTADO_USUARIO () {
					return this.ESTADO_USUARIO;
				}

				public Boolean ESTADO_USUARIOIsNullable(){
				    return false;
				}
				public Boolean ESTADO_USUARIOIsKey(){
				    return false;
				}
				public Integer ESTADO_USUARIOLength(){
				    return 10;
				}
				public Integer ESTADO_USUARIOPrecision(){
				    return 0;
				}
				public String ESTADO_USUARIODefault(){
				
					return null;
				
				}
				public String ESTADO_USUARIOComment(){
				
				    return "";
				
				}
				public String ESTADO_USUARIOPattern(){
				
					return "";
				
				}
				public String ESTADO_USUARIOOriginalDbColumnName(){
				
					return "ESTADO_USUARIO";
				
				}

				
			    public String USUARIO;

				public String getUSUARIO () {
					return this.USUARIO;
				}

				public Boolean USUARIOIsNullable(){
				    return false;
				}
				public Boolean USUARIOIsKey(){
				    return false;
				}
				public Integer USUARIOLength(){
				    return 500;
				}
				public Integer USUARIOPrecision(){
				    return 0;
				}
				public String USUARIODefault(){
				
					return null;
				
				}
				public String USUARIOComment(){
				
				    return "";
				
				}
				public String USUARIOPattern(){
				
					return "";
				
				}
				public String USUARIOOriginalDbColumnName(){
				
					return "USUARIO";
				
				}

				
			    public String TUSUARIO;

				public String getTUSUARIO () {
					return this.TUSUARIO;
				}

				public Boolean TUSUARIOIsNullable(){
				    return true;
				}
				public Boolean TUSUARIOIsKey(){
				    return false;
				}
				public Integer TUSUARIOLength(){
				    return 200;
				}
				public Integer TUSUARIOPrecision(){
				    return 0;
				}
				public String TUSUARIODefault(){
				
					return null;
				
				}
				public String TUSUARIOComment(){
				
				    return "";
				
				}
				public String TUSUARIOPattern(){
				
					return "";
				
				}
				public String TUSUARIOOriginalDbColumnName(){
				
					return "TUSUARIO";
				
				}

				
			    public BigDecimal R;

				public BigDecimal getR () {
					return this.R;
				}

				public Boolean RIsNullable(){
				    return true;
				}
				public Boolean RIsKey(){
				    return false;
				}
				public Integer RLength(){
				    return 0;
				}
				public Integer RPrecision(){
				    return null;
				}
				public String RDefault(){
				
					return "";
				
				}
				public String RComment(){
				
				    return "";
				
				}
				public String RPattern(){
				
					return "";
				
				}
				public String ROriginalDbColumnName(){
				
					return "R";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TDOCUMENTO_SIGLA = readString(dis);
					
					this.TDOCUMENTO_NOMBRE = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.ESTADO_USUARIO = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.TUSUARIO = readString(dis);
					
						this.R = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TDOCUMENTO_SIGLA = readString(dis);
					
					this.TDOCUMENTO_NOMBRE = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.ESTADO_USUARIO = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.TUSUARIO = readString(dis);
					
						this.R = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_SIGLA,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_NOMBRE,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.ESTADO_USUARIO,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.TUSUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.R);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_SIGLA,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_NOMBRE,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.ESTADO_USUARIO,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.TUSUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.R);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TDOCUMENTO_SIGLA="+TDOCUMENTO_SIGLA);
		sb.append(",TDOCUMENTO_NOMBRE="+TDOCUMENTO_NOMBRE);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",ESTADO_USUARIO="+ESTADO_USUARIO);
		sb.append(",USUARIO="+USUARIO);
		sb.append(",TUSUARIO="+TUSUARIO);
		sb.append(",R="+String.valueOf(R));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_16Struct implements routines.system.IPersistableRow<after_tOracleInput_16Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String TDOCUMENTO_SIGLA;

				public String getTDOCUMENTO_SIGLA () {
					return this.TDOCUMENTO_SIGLA;
				}

				public Boolean TDOCUMENTO_SIGLAIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_SIGLAIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_SIGLALength(){
				    return 5;
				}
				public Integer TDOCUMENTO_SIGLAPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_SIGLADefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_SIGLAComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_SIGLAPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_SIGLAOriginalDbColumnName(){
				
					return "TDOCUMENTO_SIGLA";
				
				}

				
			    public String TDOCUMENTO_NOMBRE;

				public String getTDOCUMENTO_NOMBRE () {
					return this.TDOCUMENTO_NOMBRE;
				}

				public Boolean TDOCUMENTO_NOMBREIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_NOMBREIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_NOMBRELength(){
				    return 50;
				}
				public Integer TDOCUMENTO_NOMBREPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_NOMBREDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_NOMBREComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_NOMBREPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_NOMBREOriginalDbColumnName(){
				
					return "TDOCUMENTO_NOMBRE";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String ESTADO_USUARIO;

				public String getESTADO_USUARIO () {
					return this.ESTADO_USUARIO;
				}

				public Boolean ESTADO_USUARIOIsNullable(){
				    return false;
				}
				public Boolean ESTADO_USUARIOIsKey(){
				    return false;
				}
				public Integer ESTADO_USUARIOLength(){
				    return 10;
				}
				public Integer ESTADO_USUARIOPrecision(){
				    return 0;
				}
				public String ESTADO_USUARIODefault(){
				
					return null;
				
				}
				public String ESTADO_USUARIOComment(){
				
				    return "";
				
				}
				public String ESTADO_USUARIOPattern(){
				
					return "";
				
				}
				public String ESTADO_USUARIOOriginalDbColumnName(){
				
					return "ESTADO_USUARIO";
				
				}

				
			    public String USUARIO;

				public String getUSUARIO () {
					return this.USUARIO;
				}

				public Boolean USUARIOIsNullable(){
				    return false;
				}
				public Boolean USUARIOIsKey(){
				    return false;
				}
				public Integer USUARIOLength(){
				    return 500;
				}
				public Integer USUARIOPrecision(){
				    return 0;
				}
				public String USUARIODefault(){
				
					return null;
				
				}
				public String USUARIOComment(){
				
				    return "";
				
				}
				public String USUARIOPattern(){
				
					return "";
				
				}
				public String USUARIOOriginalDbColumnName(){
				
					return "USUARIO";
				
				}

				
			    public String TUSUARIO;

				public String getTUSUARIO () {
					return this.TUSUARIO;
				}

				public Boolean TUSUARIOIsNullable(){
				    return true;
				}
				public Boolean TUSUARIOIsKey(){
				    return false;
				}
				public Integer TUSUARIOLength(){
				    return 200;
				}
				public Integer TUSUARIOPrecision(){
				    return 0;
				}
				public String TUSUARIODefault(){
				
					return null;
				
				}
				public String TUSUARIOComment(){
				
				    return "";
				
				}
				public String TUSUARIOPattern(){
				
					return "";
				
				}
				public String TUSUARIOOriginalDbColumnName(){
				
					return "TUSUARIO";
				
				}

				
			    public BigDecimal R;

				public BigDecimal getR () {
					return this.R;
				}

				public Boolean RIsNullable(){
				    return true;
				}
				public Boolean RIsKey(){
				    return false;
				}
				public Integer RLength(){
				    return 0;
				}
				public Integer RPrecision(){
				    return null;
				}
				public String RDefault(){
				
					return "";
				
				}
				public String RComment(){
				
				    return "";
				
				}
				public String RPattern(){
				
					return "";
				
				}
				public String ROriginalDbColumnName(){
				
					return "R";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TDOCUMENTO_SIGLA = readString(dis);
					
					this.TDOCUMENTO_NOMBRE = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.ESTADO_USUARIO = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.TUSUARIO = readString(dis);
					
						this.R = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TDOCUMENTO_SIGLA = readString(dis);
					
					this.TDOCUMENTO_NOMBRE = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.ESTADO_USUARIO = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.TUSUARIO = readString(dis);
					
						this.R = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_SIGLA,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_NOMBRE,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.ESTADO_USUARIO,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.TUSUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.R);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_SIGLA,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_NOMBRE,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.ESTADO_USUARIO,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.TUSUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.R);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TDOCUMENTO_SIGLA="+TDOCUMENTO_SIGLA);
		sb.append(",TDOCUMENTO_NOMBRE="+TDOCUMENTO_NOMBRE);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",ESTADO_USUARIO="+ESTADO_USUARIO);
		sb.append(",USUARIO="+USUARIO);
		sb.append(",TUSUARIO="+TUSUARIO);
		sb.append(",R="+String.valueOf(R));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_17Process(globalMap);
		tOracleInput_18Process(globalMap);

		row36Struct row36 = new row36Struct();
Actualiza2Struct Actualiza2 = new Actualiza2Struct();
Inserta11Struct Inserta11 = new Inserta11Struct();





	
	/**
	 * [tOracleOutput_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_24", false);
		start_Hash.put("tOracleOutput_24", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_24";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Actualiza2");
					}
				
		int tos_count_tOracleOutput_24 = 0;
		






        int updateKeyCount_tOracleOutput_24 = 2;
        if(updateKeyCount_tOracleOutput_24 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_24 == 11 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_24 = 0;
    int nb_line_update_tOracleOutput_24 = 0;
    int nb_line_inserted_tOracleOutput_24 = 0;
    int nb_line_deleted_tOracleOutput_24 = 0;
    int nb_line_rejected_tOracleOutput_24 = 0;

    int tmp_batchUpdateCount_tOracleOutput_24 = 0;

    int deletedCount_tOracleOutput_24=0;
    int updatedCount_tOracleOutput_24=0;
    int insertedCount_tOracleOutput_24=0;
    int rowsToCommitCount_tOracleOutput_24=0;
    int rejectedCount_tOracleOutput_24=0;

    boolean whetherReject_tOracleOutput_24 = false;

    java.sql.Connection conn_tOracleOutput_24 = null;

    //optional table
    String dbschema_tOracleOutput_24 = null;
    String tableName_tOracleOutput_24 = null;
                    String driverClass_tOracleOutput_24 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_24);
                String url_tOracleOutput_24 = null;
                    url_tOracleOutput_24 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_24 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_24 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_24 = decryptedPassword_tOracleOutput_24;
                dbschema_tOracleOutput_24 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_24 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_24.put("user",dbUser_tOracleOutput_24);
                    atnParamsPrope_tOracleOutput_24.put("password",dbPwd_tOracleOutput_24);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_24.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_24 = java.sql.DriverManager.getConnection(url_tOracleOutput_24, atnParamsPrope_tOracleOutput_24);
        resourceMap.put("conn_tOracleOutput_24", conn_tOracleOutput_24);
            conn_tOracleOutput_24.setAutoCommit(false);
            int commitEvery_tOracleOutput_24 = 1000;
            int commitCounter_tOracleOutput_24 = 0;
        int batchSize_tOracleOutput_24 = 1000;
        int batchSizeCounter_tOracleOutput_24=0;
        int count_tOracleOutput_24=0;

        if(dbschema_tOracleOutput_24 == null || dbschema_tOracleOutput_24.trim().length() == 0) {
            tableName_tOracleOutput_24 = ("BACM_AUDITORES");
        } else {
            tableName_tOracleOutput_24 = dbschema_tOracleOutput_24 + "." + ("BACM_AUDITORES");
        }
                String update_tOracleOutput_24 = "UPDATE " + tableName_tOracleOutput_24 + " SET PRIMER_NOMBRE = ?,SEGUNDO_NOMBRE = ?,PRIMER_APELLIDO = ?,SEGUNDO_APELLIDO = ?,TDOCUMENTO_SIGLA = ?,TDOCUMENTO_NOMBRE = ?,DOCUMENTO = ?,ESTADO_USUARIO = ?,TUSUARIO = ? WHERE PERSONA_ID = ? AND USUARIO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_24 = conn_tOracleOutput_24.prepareStatement(update_tOracleOutput_24);
                resourceMap.put("pstmt_tOracleOutput_24", pstmt_tOracleOutput_24);





 



/**
 * [tOracleOutput_24 begin ] stop
 */




	
	/**
	 * [tOracleOutput_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_23", false);
		start_Hash.put("tOracleOutput_23", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_23";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta11");
					}
				
		int tos_count_tOracleOutput_23 = 0;
		






    
    int nb_line_tOracleOutput_23 = 0;
    int nb_line_update_tOracleOutput_23 = 0;
    int nb_line_inserted_tOracleOutput_23 = 0;
    int nb_line_deleted_tOracleOutput_23 = 0;
    int nb_line_rejected_tOracleOutput_23 = 0;

    int tmp_batchUpdateCount_tOracleOutput_23 = 0;

    int deletedCount_tOracleOutput_23=0;
    int updatedCount_tOracleOutput_23=0;
    int insertedCount_tOracleOutput_23=0;
    int rowsToCommitCount_tOracleOutput_23=0;
    int rejectedCount_tOracleOutput_23=0;

    boolean whetherReject_tOracleOutput_23 = false;

    java.sql.Connection conn_tOracleOutput_23 = null;

    //optional table
    String dbschema_tOracleOutput_23 = null;
    String tableName_tOracleOutput_23 = null;
                    String driverClass_tOracleOutput_23 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_23);
                String url_tOracleOutput_23 = null;
                    url_tOracleOutput_23 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_23 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_23 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_23 = decryptedPassword_tOracleOutput_23;
                dbschema_tOracleOutput_23 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_23 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_23.put("user",dbUser_tOracleOutput_23);
                    atnParamsPrope_tOracleOutput_23.put("password",dbPwd_tOracleOutput_23);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_23.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_23 = java.sql.DriverManager.getConnection(url_tOracleOutput_23, atnParamsPrope_tOracleOutput_23);
        resourceMap.put("conn_tOracleOutput_23", conn_tOracleOutput_23);
            conn_tOracleOutput_23.setAutoCommit(false);
            int commitEvery_tOracleOutput_23 = 1000;
            int commitCounter_tOracleOutput_23 = 0;
        int batchSize_tOracleOutput_23 = 1000;
        int batchSizeCounter_tOracleOutput_23=0;
        int count_tOracleOutput_23=0;

        if(dbschema_tOracleOutput_23 == null || dbschema_tOracleOutput_23.trim().length() == 0) {
            tableName_tOracleOutput_23 = ("BACM_AUDITORES");
        } else {
            tableName_tOracleOutput_23 = dbschema_tOracleOutput_23 + "." + ("BACM_AUDITORES");
        }
                String insert_tOracleOutput_23 = "INSERT INTO " + tableName_tOracleOutput_23 + " (PERSONA_ID,PRIMER_NOMBRE,SEGUNDO_NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,TDOCUMENTO_SIGLA,TDOCUMENTO_NOMBRE,DOCUMENTO,ESTADO_USUARIO,USUARIO,TUSUARIO) VALUES (?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_23 = conn_tOracleOutput_23.prepareStatement(insert_tOracleOutput_23);
                        resourceMap.put("pstmt_tOracleOutput_23", pstmt_tOracleOutput_23);





 



/**
 * [tOracleOutput_23 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct> tHash_Lookup_row37 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct>) 
					globalMap.get( "tHash_Lookup_row37" ))
					;					
					
	

row37Struct row37HashKey = new row37Struct();
row37Struct row37Default = new row37Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) 
					globalMap.get( "tHash_Lookup_row38" ))
					;					
					
	

row38Struct row38HashKey = new row38Struct();
row38Struct row38Default = new row38Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
Actualiza2Struct Actualiza2_tmp = new Actualiza2Struct();
Inserta11Struct Inserta11_tmp = new Inserta11Struct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tOracleInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_16", false);
		start_Hash.put("tOracleInput_16", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_16";
	
	
		int tos_count_tOracleInput_16 = 0;
		
	


	
		    int nb_line_tOracleInput_16 = 0;
		    java.sql.Connection conn_tOracleInput_16 = null;
				conn_tOracleInput_16 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_16 = false;
				boolean isConnectionWrapped_tOracleInput_16 = !(conn_tOracleInput_16 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_16.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_16 = null;
                if (isConnectionWrapped_tOracleInput_16) {
					unwrappedOraConn_tOracleInput_16 = conn_tOracleInput_16.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_16 != null) {
                        isTimeZoneNull_tOracleInput_16 = (unwrappedOraConn_tOracleInput_16.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_16 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_16).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_16) {
					java.sql.Statement stmtGetTZ_tOracleInput_16 = conn_tOracleInput_16.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_16 = stmtGetTZ_tOracleInput_16.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_16 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_16.next()) {
						sessionTimezone_tOracleInput_16 = rsGetTZ_tOracleInput_16.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_16 && unwrappedOraConn_tOracleInput_16 != null) {
                        unwrappedOraConn_tOracleInput_16.setSessionTimeZone(sessionTimezone_tOracleInput_16);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_16).setSessionTimeZone(sessionTimezone_tOracleInput_16);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_16 = conn_tOracleInput_16.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_16.setFetchSize(1000);


		    String dbquery_tOracleInput_16 = "SELECT * FROM (\nSELECT    US.PERSONAS_ID\n       ,  PER.PRIMER_NOMBRE \n       ,  PER.SEGUNDO_NOMBRE\n       ,  PER.PR"
+"IMER_APELLIDO\n       ,  PER.SEGUNDO_APELLIDO\n       ,  TD.SIGLA AS TDOCUMENTO_SIGLA\n       ,  TD.NOMBRE AS TDOCUMENTO"
+"_NOMBRE\n       ,  PER.DOCUMENTO\n       ,  US.ESTADO AS ESTADO_USUARIO\n       ,  US.USUARIO\n       ,  TU.NOMBRE AS TU"
+"SUARIO       \n       ,  ROW_NUMBER() OVER (PARTITION BY PER.ID ORDER BY US.ID DESC) R \nFROM ACM_AUDITORES_FACTURAS AF "
+"\nINNER JOIN GEN_USUARIOS US ON US.ID = AF.AUDITORES_ID\nINNER JOIN GEN_PERSONAS PER ON PER.ID = US.PERSONAS_ID \nINNER "
+"JOIN GEN_TDOCUMENTOS TD ON TD.ID = PER.TDOCUMENTOS_ID\nLEFT JOIN GEN_TUSUARIOS TU ON TU.ID = US.TUSUARIOS_ID\nWHERE AF.E"
+"STREGISTRO_ID = 1\n  AND US.ESTREGISTRO_ID = 1\n  AND PER.ESTREGISTRO_ID = 1\n  "+context.CONDICION_AUDITORES+"\n) WHERE R = 1";
		    

		    globalMap.put("tOracleInput_16_QUERY",dbquery_tOracleInput_16);

		    java.sql.ResultSet rs_tOracleInput_16 = null;

		    try {
		    	rs_tOracleInput_16 = stmt_tOracleInput_16.executeQuery(dbquery_tOracleInput_16);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_16 = rs_tOracleInput_16.getMetaData();
		    	int colQtyInRs_tOracleInput_16 = rsmd_tOracleInput_16.getColumnCount();

		    String tmpContent_tOracleInput_16 = null;
		    
		    
		    while (rs_tOracleInput_16.next()) {
		        nb_line_tOracleInput_16++;
		        
							if(colQtyInRs_tOracleInput_16 < 1) {
								row36.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(1) != null) {
						row36.PERSONAS_ID = rs_tOracleInput_16.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_16 < 2) {
								row36.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row36.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 3) {
								row36.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row36.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 4) {
								row36.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row36.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 5) {
								row36.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row36.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 6) {
								row36.TDOCUMENTO_SIGLA = null;
							} else {
	                         		
        	row36.TDOCUMENTO_SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 7) {
								row36.TDOCUMENTO_NOMBRE = null;
							} else {
	                         		
        	row36.TDOCUMENTO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 8) {
								row36.DOCUMENTO = null;
							} else {
	                         		
        	row36.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 9) {
								row36.ESTADO_USUARIO = null;
							} else {
	                         		
        	row36.ESTADO_USUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 10) {
								row36.USUARIO = null;
							} else {
	                         		
        	row36.USUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 11) {
								row36.TUSUARIO = null;
							} else {
	                         		
        	row36.TUSUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 12) {
								row36.R = null;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(12) != null) {
						row36.R = rs_tOracleInput_16.getBigDecimal(12);
					} else {
				
						row36.R = null;
					}
		                    }
					




 



/**
 * [tOracleInput_16 begin ] stop
 */
	
	/**
	 * [tOracleInput_16 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 


	tos_count_tOracleInput_16++;

/**
 * [tOracleInput_16 main ] stop
 */
	
	/**
	 * [tOracleInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row36"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
						row37Struct row37 = null;
					
						row38Struct row38 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_11 = false;
		boolean mainRowRejected_tMap_11 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row37" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow37 = false;
       		  	    	
       		  	    	
 							row37Struct row37ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_11 = false;
								
                        		    		    row37HashKey.PERSONA_ID = row36.PERSONAS_ID ;
                        		    		
                        		    		    row37HashKey.PRIMER_NOMBRE = row36.PRIMER_NOMBRE ;
                        		    		
                        		    		    row37HashKey.SEGUNDO_NOMBRE = row36.SEGUNDO_NOMBRE ;
                        		    		
                        		    		    row37HashKey.PRIMER_APELLIDO = row36.PRIMER_APELLIDO ;
                        		    		
                        		    		    row37HashKey.SEGUNDO_APELLIDO = row36.SEGUNDO_APELLIDO ;
                        		    		
                        		    		    row37HashKey.TDOCUMENTO_SIGLA = row36.TDOCUMENTO_SIGLA ;
                        		    		
                        		    		    row37HashKey.TDOCUMENTO_NOMBRE = row36.TDOCUMENTO_NOMBRE ;
                        		    		
                        		    		    row37HashKey.DOCUMENTO = row36.DOCUMENTO ;
                        		    		
                        		    		    row37HashKey.ESTADO_USUARIO = row36.ESTADO_USUARIO ;
                        		    		
                        		    		    row37HashKey.USUARIO = row36.USUARIO ;
                        		    		
                        		    		    row37HashKey.TUSUARIO = row36.TUSUARIO ;
                        		    		

								
		                        	row37HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row37.lookup( row37HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row37 != null && tHash_Lookup_row37.getCount(row37HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row37' and it contains more one result from keys :  row37.PERSONA_ID = '" + row37HashKey.PERSONA_ID + "', row37.PRIMER_NOMBRE = '" + row37HashKey.PRIMER_NOMBRE + "', row37.SEGUNDO_NOMBRE = '" + row37HashKey.SEGUNDO_NOMBRE + "', row37.PRIMER_APELLIDO = '" + row37HashKey.PRIMER_APELLIDO + "', row37.SEGUNDO_APELLIDO = '" + row37HashKey.SEGUNDO_APELLIDO + "', row37.TDOCUMENTO_SIGLA = '" + row37HashKey.TDOCUMENTO_SIGLA + "', row37.TDOCUMENTO_NOMBRE = '" + row37HashKey.TDOCUMENTO_NOMBRE + "', row37.DOCUMENTO = '" + row37HashKey.DOCUMENTO + "', row37.ESTADO_USUARIO = '" + row37HashKey.ESTADO_USUARIO + "', row37.USUARIO = '" + row37HashKey.USUARIO + "', row37.TUSUARIO = '" + row37HashKey.TUSUARIO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row37Struct fromLookup_row37 = null;
							row37 = row37Default;
										 
							
								 
							
							
								if (tHash_Lookup_row37 !=null && tHash_Lookup_row37.hasNext()) { // G 099
								
							
								
								fromLookup_row37 = tHash_Lookup_row37.next();

							
							
								} // G 099
							
							

							if(fromLookup_row37 != null) {
								row37 = fromLookup_row37;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row38" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow38 = false;
       		  	    	
       		  	    	
 							row38Struct row38ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_11 = false;
								
                        		    		    row38HashKey.PERSONA_ID = row36.PERSONAS_ID ;
                        		    		
                        		    		    row38HashKey.USUARIO = row36.USUARIO ;
                        		    		

								
		                        	row38HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row38.lookup( row38HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row38 != null && tHash_Lookup_row38.getCount(row38HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row38' and it contains more one result from keys :  row38.PERSONA_ID = '" + row38HashKey.PERSONA_ID + "', row38.USUARIO = '" + row38HashKey.USUARIO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row38Struct fromLookup_row38 = null;
							row38 = row38Default;
										 
							
								 
							
							
								if (tHash_Lookup_row38 !=null && tHash_Lookup_row38.hasNext()) { // G 099
								
							
								
								fromLookup_row38 = tHash_Lookup_row38.next();

							
							
								} // G 099
							
							

							if(fromLookup_row38 != null) {
								row38 = fromLookup_row38;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

Actualiza2 = null;
Inserta11 = null;


// # Output table : 'Actualiza2'
// # Filter conditions 
if( 

row38.PERSONA_ID != null &&  row37.PERSONA_ID == null

 ) {
Actualiza2_tmp.PERSONA_ID = row36.PERSONAS_ID ;
Actualiza2_tmp.PRIMER_NOMBRE = row36.PRIMER_NOMBRE ;
Actualiza2_tmp.SEGUNDO_NOMBRE = row36.SEGUNDO_NOMBRE ;
Actualiza2_tmp.PRIMER_APELLIDO = row36.PRIMER_APELLIDO ;
Actualiza2_tmp.SEGUNDO_APELLIDO = row36.SEGUNDO_APELLIDO ;
Actualiza2_tmp.TDOCUMENTO_SIGLA = row36.TDOCUMENTO_SIGLA ;
Actualiza2_tmp.TDOCUMENTO_NOMBRE = row36.TDOCUMENTO_NOMBRE ;
Actualiza2_tmp.DOCUMENTO = row36.DOCUMENTO ;
Actualiza2_tmp.ESTADO_USUARIO = row36.ESTADO_USUARIO ;
Actualiza2_tmp.USUARIO = row36.USUARIO ;
Actualiza2_tmp.TUSUARIO = row36.TUSUARIO ;
Actualiza2 = Actualiza2_tmp;
} // closing filter/reject

// # Output table : 'Inserta11'
// # Filter conditions 
if( 

row38.PERSONA_ID == null

 ) {
Inserta11_tmp.PERSONA_ID = row36.PERSONAS_ID ;
Inserta11_tmp.PRIMER_NOMBRE = row36.PRIMER_NOMBRE ;
Inserta11_tmp.SEGUNDO_NOMBRE = row36.SEGUNDO_NOMBRE ;
Inserta11_tmp.PRIMER_APELLIDO = row36.PRIMER_APELLIDO ;
Inserta11_tmp.SEGUNDO_APELLIDO = row36.SEGUNDO_APELLIDO ;
Inserta11_tmp.TDOCUMENTO_SIGLA = row36.TDOCUMENTO_SIGLA ;
Inserta11_tmp.TDOCUMENTO_NOMBRE = row36.TDOCUMENTO_NOMBRE ;
Inserta11_tmp.DOCUMENTO = row36.DOCUMENTO ;
Inserta11_tmp.ESTADO_USUARIO = row36.ESTADO_USUARIO ;
Inserta11_tmp.USUARIO = row36.USUARIO ;
Inserta11_tmp.TUSUARIO = row36.TUSUARIO ;
Inserta11 = Inserta11_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "Actualiza2"
if(Actualiza2 != null) { 



	
	/**
	 * [tOracleOutput_24 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_24";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Actualiza2"
						
						);
					}
					



        whetherReject_tOracleOutput_24 = false;
                    if(Actualiza2.PRIMER_NOMBRE == null) {
pstmt_tOracleOutput_24.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_24.setString(1, Actualiza2.PRIMER_NOMBRE);
}

                    if(Actualiza2.SEGUNDO_NOMBRE == null) {
pstmt_tOracleOutput_24.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_24.setString(2, Actualiza2.SEGUNDO_NOMBRE);
}

                    if(Actualiza2.PRIMER_APELLIDO == null) {
pstmt_tOracleOutput_24.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_24.setString(3, Actualiza2.PRIMER_APELLIDO);
}

                    if(Actualiza2.SEGUNDO_APELLIDO == null) {
pstmt_tOracleOutput_24.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_24.setString(4, Actualiza2.SEGUNDO_APELLIDO);
}

                    if(Actualiza2.TDOCUMENTO_SIGLA == null) {
pstmt_tOracleOutput_24.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_24.setString(5, Actualiza2.TDOCUMENTO_SIGLA);
}

                    if(Actualiza2.TDOCUMENTO_NOMBRE == null) {
pstmt_tOracleOutput_24.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_24.setString(6, Actualiza2.TDOCUMENTO_NOMBRE);
}

                    if(Actualiza2.DOCUMENTO == null) {
pstmt_tOracleOutput_24.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_24.setString(7, Actualiza2.DOCUMENTO);
}

                    if(Actualiza2.ESTADO_USUARIO == null) {
pstmt_tOracleOutput_24.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_24.setString(8, Actualiza2.ESTADO_USUARIO);
}

                    if(Actualiza2.TUSUARIO == null) {
pstmt_tOracleOutput_24.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_24.setString(9, Actualiza2.TUSUARIO);
}


                    pstmt_tOracleOutput_24.setBigDecimal(10 + count_tOracleOutput_24, Actualiza2.PERSONA_ID);


                    if(Actualiza2.USUARIO == null) {
pstmt_tOracleOutput_24.setNull(11 + count_tOracleOutput_24, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_24.setString(11 + count_tOracleOutput_24, Actualiza2.USUARIO);
}

                pstmt_tOracleOutput_24.addBatch();
                nb_line_tOracleOutput_24++;
                batchSizeCounter_tOracleOutput_24++;
            if (batchSize_tOracleOutput_24 > 0 &&  batchSize_tOracleOutput_24 <= batchSizeCounter_tOracleOutput_24) {
                try {
                    pstmt_tOracleOutput_24.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_24){
globalMap.put("tOracleOutput_24_ERROR_MESSAGE",e_tOracleOutput_24.getMessage());
			        java.sql.SQLException ne_tOracleOutput_24 = e_tOracleOutput_24.getNextException(),sqle_tOracleOutput_24=null;
			    	String errormessage_tOracleOutput_24;
					if (ne_tOracleOutput_24 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_24 = new java.sql.SQLException(e_tOracleOutput_24.getMessage() + "\ncaused by: " + ne_tOracleOutput_24.getMessage(), ne_tOracleOutput_24.getSQLState(), ne_tOracleOutput_24.getErrorCode(), ne_tOracleOutput_24);
						errormessage_tOracleOutput_24 = sqle_tOracleOutput_24.getMessage();
					}else{
						errormessage_tOracleOutput_24 = e_tOracleOutput_24.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_24);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_24 = pstmt_tOracleOutput_24.getUpdateCount();
                    updatedCount_tOracleOutput_24
                += (tmp_batchUpdateCount_tOracleOutput_24!=-1?tmp_batchUpdateCount_tOracleOutput_24:0);
                rowsToCommitCount_tOracleOutput_24 += (tmp_batchUpdateCount_tOracleOutput_24!=-1?tmp_batchUpdateCount_tOracleOutput_24:0);
                batchSizeCounter_tOracleOutput_24 = 0;
            }
                commitCounter_tOracleOutput_24++;
                if(commitEvery_tOracleOutput_24 <= commitCounter_tOracleOutput_24) {
                    if(batchSizeCounter_tOracleOutput_24 > 0) {
                        try {
                            pstmt_tOracleOutput_24.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_24){
globalMap.put("tOracleOutput_24_ERROR_MESSAGE",e_tOracleOutput_24.getMessage());
					        java.sql.SQLException ne_tOracleOutput_24 = e_tOracleOutput_24.getNextException(),sqle_tOracleOutput_24=null;
					    	String errormessage_tOracleOutput_24;
							if (ne_tOracleOutput_24 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_24 = new java.sql.SQLException(e_tOracleOutput_24.getMessage() + "\ncaused by: " + ne_tOracleOutput_24.getMessage(), ne_tOracleOutput_24.getSQLState(), ne_tOracleOutput_24.getErrorCode(), ne_tOracleOutput_24);
								errormessage_tOracleOutput_24 = sqle_tOracleOutput_24.getMessage();
							}else{
								errormessage_tOracleOutput_24 = e_tOracleOutput_24.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_24);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_24 = pstmt_tOracleOutput_24.getUpdateCount();
                            updatedCount_tOracleOutput_24
                        += (tmp_batchUpdateCount_tOracleOutput_24!=-1?tmp_batchUpdateCount_tOracleOutput_24:0);
                        rowsToCommitCount_tOracleOutput_24 += (tmp_batchUpdateCount_tOracleOutput_24!=-1?tmp_batchUpdateCount_tOracleOutput_24:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_24 != 0){
                    	
                    }
                    conn_tOracleOutput_24.commit();
                    if(rowsToCommitCount_tOracleOutput_24 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_24 = 0;
                    }
                    commitCounter_tOracleOutput_24=0;
                    	batchSizeCounter_tOracleOutput_24=0;
                }

 


	tos_count_tOracleOutput_24++;

/**
 * [tOracleOutput_24 main ] stop
 */
	
	/**
	 * [tOracleOutput_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_24";
	
	

 



/**
 * [tOracleOutput_24 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_24";
	
	

 



/**
 * [tOracleOutput_24 process_data_end ] stop
 */

} // End of branch "Actualiza2"




// Start of branch "Inserta11"
if(Inserta11 != null) { 



	
	/**
	 * [tOracleOutput_23 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_23";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta11"
						
						);
					}
					



        whetherReject_tOracleOutput_23 = false;
                        pstmt_tOracleOutput_23.setBigDecimal(1, Inserta11.PERSONA_ID);

                        if(Inserta11.PRIMER_NOMBRE == null) {
pstmt_tOracleOutput_23.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(2, Inserta11.PRIMER_NOMBRE);
}

                        if(Inserta11.SEGUNDO_NOMBRE == null) {
pstmt_tOracleOutput_23.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(3, Inserta11.SEGUNDO_NOMBRE);
}

                        if(Inserta11.PRIMER_APELLIDO == null) {
pstmt_tOracleOutput_23.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(4, Inserta11.PRIMER_APELLIDO);
}

                        if(Inserta11.SEGUNDO_APELLIDO == null) {
pstmt_tOracleOutput_23.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(5, Inserta11.SEGUNDO_APELLIDO);
}

                        if(Inserta11.TDOCUMENTO_SIGLA == null) {
pstmt_tOracleOutput_23.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(6, Inserta11.TDOCUMENTO_SIGLA);
}

                        if(Inserta11.TDOCUMENTO_NOMBRE == null) {
pstmt_tOracleOutput_23.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(7, Inserta11.TDOCUMENTO_NOMBRE);
}

                        if(Inserta11.DOCUMENTO == null) {
pstmt_tOracleOutput_23.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(8, Inserta11.DOCUMENTO);
}

                        if(Inserta11.ESTADO_USUARIO == null) {
pstmt_tOracleOutput_23.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(9, Inserta11.ESTADO_USUARIO);
}

                        if(Inserta11.USUARIO == null) {
pstmt_tOracleOutput_23.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(10, Inserta11.USUARIO);
}

                        if(Inserta11.TUSUARIO == null) {
pstmt_tOracleOutput_23.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(11, Inserta11.TUSUARIO);
}

                pstmt_tOracleOutput_23.addBatch();
                nb_line_tOracleOutput_23++;
                batchSizeCounter_tOracleOutput_23++;
            if (batchSize_tOracleOutput_23 > 0 &&  batchSize_tOracleOutput_23 <= batchSizeCounter_tOracleOutput_23) {
                try {
                    pstmt_tOracleOutput_23.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_23){
globalMap.put("tOracleOutput_23_ERROR_MESSAGE",e_tOracleOutput_23.getMessage());
			        java.sql.SQLException ne_tOracleOutput_23 = e_tOracleOutput_23.getNextException(),sqle_tOracleOutput_23=null;
			    	String errormessage_tOracleOutput_23;
					if (ne_tOracleOutput_23 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_23 = new java.sql.SQLException(e_tOracleOutput_23.getMessage() + "\ncaused by: " + ne_tOracleOutput_23.getMessage(), ne_tOracleOutput_23.getSQLState(), ne_tOracleOutput_23.getErrorCode(), ne_tOracleOutput_23);
						errormessage_tOracleOutput_23 = sqle_tOracleOutput_23.getMessage();
					}else{
						errormessage_tOracleOutput_23 = e_tOracleOutput_23.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_23);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_23 = pstmt_tOracleOutput_23.getUpdateCount();
                    insertedCount_tOracleOutput_23
                += (tmp_batchUpdateCount_tOracleOutput_23!=-1?tmp_batchUpdateCount_tOracleOutput_23:0);
                rowsToCommitCount_tOracleOutput_23 += (tmp_batchUpdateCount_tOracleOutput_23!=-1?tmp_batchUpdateCount_tOracleOutput_23:0);
                batchSizeCounter_tOracleOutput_23 = 0;
            }
                commitCounter_tOracleOutput_23++;
                if(commitEvery_tOracleOutput_23 <= commitCounter_tOracleOutput_23) {
                    if(batchSizeCounter_tOracleOutput_23 > 0) {
                        try {
                            pstmt_tOracleOutput_23.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_23){
globalMap.put("tOracleOutput_23_ERROR_MESSAGE",e_tOracleOutput_23.getMessage());
					        java.sql.SQLException ne_tOracleOutput_23 = e_tOracleOutput_23.getNextException(),sqle_tOracleOutput_23=null;
					    	String errormessage_tOracleOutput_23;
							if (ne_tOracleOutput_23 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_23 = new java.sql.SQLException(e_tOracleOutput_23.getMessage() + "\ncaused by: " + ne_tOracleOutput_23.getMessage(), ne_tOracleOutput_23.getSQLState(), ne_tOracleOutput_23.getErrorCode(), ne_tOracleOutput_23);
								errormessage_tOracleOutput_23 = sqle_tOracleOutput_23.getMessage();
							}else{
								errormessage_tOracleOutput_23 = e_tOracleOutput_23.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_23);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_23 = pstmt_tOracleOutput_23.getUpdateCount();
                            insertedCount_tOracleOutput_23
                        += (tmp_batchUpdateCount_tOracleOutput_23!=-1?tmp_batchUpdateCount_tOracleOutput_23:0);
                        rowsToCommitCount_tOracleOutput_23 += (tmp_batchUpdateCount_tOracleOutput_23!=-1?tmp_batchUpdateCount_tOracleOutput_23:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_23 != 0){
                    	
                    }
                    conn_tOracleOutput_23.commit();
                    if(rowsToCommitCount_tOracleOutput_23 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_23 = 0;
                    }
                    commitCounter_tOracleOutput_23=0;
                    	batchSizeCounter_tOracleOutput_23=0;
                }

 


	tos_count_tOracleOutput_23++;

/**
 * [tOracleOutput_23 main ] stop
 */
	
	/**
	 * [tOracleOutput_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_23";
	
	

 



/**
 * [tOracleOutput_23 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_23";
	
	

 



/**
 * [tOracleOutput_23 process_data_end ] stop
 */

} // End of branch "Inserta11"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_16 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

}
}finally{
	if (rs_tOracleInput_16 != null) {
		rs_tOracleInput_16.close();
	}
	if (stmt_tOracleInput_16 != null) {
		stmt_tOracleInput_16.close();
	}
}

globalMap.put("tOracleInput_16_NB_LINE",nb_line_tOracleInput_16);
 

ok_Hash.put("tOracleInput_16", true);
end_Hash.put("tOracleInput_16", System.currentTimeMillis());




/**
 * [tOracleInput_16 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row37 != null) {
						tHash_Lookup_row37.endGet();
					}
					globalMap.remove( "tHash_Lookup_row37" );

					
					
				
					if(tHash_Lookup_row38 != null) {
						tHash_Lookup_row38.endGet();
					}
					globalMap.remove( "tHash_Lookup_row38" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tOracleOutput_24 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_24";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_24 > 0) {
            try {
            	if (pstmt_tOracleOutput_24 != null) {
					
					pstmt_tOracleOutput_24.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_24){
globalMap.put("tOracleOutput_24_ERROR_MESSAGE",e_tOracleOutput_24.getMessage());
		        java.sql.SQLException ne_tOracleOutput_24 = e_tOracleOutput_24.getNextException(),sqle_tOracleOutput_24=null;
		    	String errormessage_tOracleOutput_24;
				if (ne_tOracleOutput_24 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_24 = new java.sql.SQLException(e_tOracleOutput_24.getMessage() + "\ncaused by: " + ne_tOracleOutput_24.getMessage(), ne_tOracleOutput_24.getSQLState(), ne_tOracleOutput_24.getErrorCode(), ne_tOracleOutput_24);
					errormessage_tOracleOutput_24 = sqle_tOracleOutput_24.getMessage();
				}else{
					errormessage_tOracleOutput_24 = e_tOracleOutput_24.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_24);
            	
        	}
        	if (pstmt_tOracleOutput_24 != null) {
            	tmp_batchUpdateCount_tOracleOutput_24 = pstmt_tOracleOutput_24.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_24
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_24!=-1?tmp_batchUpdateCount_tOracleOutput_24:0);
				rowsToCommitCount_tOracleOutput_24 += (tmp_batchUpdateCount_tOracleOutput_24!=-1?tmp_batchUpdateCount_tOracleOutput_24:0);
            }
        }
        if(pstmt_tOracleOutput_24 != null) {
			
				pstmt_tOracleOutput_24.close();
				resourceMap.remove("pstmt_tOracleOutput_24");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_24", true);
		if(commitCounter_tOracleOutput_24 > 0 && rowsToCommitCount_tOracleOutput_24 != 0) {
			
		}
		conn_tOracleOutput_24.commit();
		if(commitCounter_tOracleOutput_24 > 0 && rowsToCommitCount_tOracleOutput_24 != 0) {
			
			rowsToCommitCount_tOracleOutput_24 = 0;
		}
		commitCounter_tOracleOutput_24 = 0;
		
		
		conn_tOracleOutput_24 .close();
		
		resourceMap.put("finish_tOracleOutput_24", true);
   	

	
	nb_line_deleted_tOracleOutput_24=nb_line_deleted_tOracleOutput_24+ deletedCount_tOracleOutput_24;
	nb_line_update_tOracleOutput_24=nb_line_update_tOracleOutput_24 + updatedCount_tOracleOutput_24;
	nb_line_inserted_tOracleOutput_24=nb_line_inserted_tOracleOutput_24 + insertedCount_tOracleOutput_24;
	nb_line_rejected_tOracleOutput_24=nb_line_rejected_tOracleOutput_24 + rejectedCount_tOracleOutput_24;
	
        globalMap.put("tOracleOutput_24_NB_LINE",nb_line_tOracleOutput_24);
        globalMap.put("tOracleOutput_24_NB_LINE_UPDATED",nb_line_update_tOracleOutput_24);
        globalMap.put("tOracleOutput_24_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_24);
        globalMap.put("tOracleOutput_24_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_24);
        globalMap.put("tOracleOutput_24_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_24);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Actualiza2");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_24", true);
end_Hash.put("tOracleOutput_24", System.currentTimeMillis());




/**
 * [tOracleOutput_24 end ] stop
 */




	
	/**
	 * [tOracleOutput_23 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_23";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_23 > 0) {
            try {
            	if (pstmt_tOracleOutput_23 != null) {
					
					pstmt_tOracleOutput_23.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_23){
globalMap.put("tOracleOutput_23_ERROR_MESSAGE",e_tOracleOutput_23.getMessage());
		        java.sql.SQLException ne_tOracleOutput_23 = e_tOracleOutput_23.getNextException(),sqle_tOracleOutput_23=null;
		    	String errormessage_tOracleOutput_23;
				if (ne_tOracleOutput_23 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_23 = new java.sql.SQLException(e_tOracleOutput_23.getMessage() + "\ncaused by: " + ne_tOracleOutput_23.getMessage(), ne_tOracleOutput_23.getSQLState(), ne_tOracleOutput_23.getErrorCode(), ne_tOracleOutput_23);
					errormessage_tOracleOutput_23 = sqle_tOracleOutput_23.getMessage();
				}else{
					errormessage_tOracleOutput_23 = e_tOracleOutput_23.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_23);
            	
        	}
        	if (pstmt_tOracleOutput_23 != null) {
            	tmp_batchUpdateCount_tOracleOutput_23 = pstmt_tOracleOutput_23.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_23
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_23!=-1?tmp_batchUpdateCount_tOracleOutput_23:0);
				rowsToCommitCount_tOracleOutput_23 += (tmp_batchUpdateCount_tOracleOutput_23!=-1?tmp_batchUpdateCount_tOracleOutput_23:0);
            }
        }
        if(pstmt_tOracleOutput_23 != null) {
			
				pstmt_tOracleOutput_23.close();
				resourceMap.remove("pstmt_tOracleOutput_23");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_23", true);
		if(commitCounter_tOracleOutput_23 > 0 && rowsToCommitCount_tOracleOutput_23 != 0) {
			
		}
		conn_tOracleOutput_23.commit();
		if(commitCounter_tOracleOutput_23 > 0 && rowsToCommitCount_tOracleOutput_23 != 0) {
			
			rowsToCommitCount_tOracleOutput_23 = 0;
		}
		commitCounter_tOracleOutput_23 = 0;
		
		
		conn_tOracleOutput_23 .close();
		
		resourceMap.put("finish_tOracleOutput_23", true);
   	

	
	nb_line_deleted_tOracleOutput_23=nb_line_deleted_tOracleOutput_23+ deletedCount_tOracleOutput_23;
	nb_line_update_tOracleOutput_23=nb_line_update_tOracleOutput_23 + updatedCount_tOracleOutput_23;
	nb_line_inserted_tOracleOutput_23=nb_line_inserted_tOracleOutput_23 + insertedCount_tOracleOutput_23;
	nb_line_rejected_tOracleOutput_23=nb_line_rejected_tOracleOutput_23 + rejectedCount_tOracleOutput_23;
	
        globalMap.put("tOracleOutput_23_NB_LINE",nb_line_tOracleOutput_23);
        globalMap.put("tOracleOutput_23_NB_LINE_UPDATED",nb_line_update_tOracleOutput_23);
        globalMap.put("tOracleOutput_23_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_23);
        globalMap.put("tOracleOutput_23_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_23);
        globalMap.put("tOracleOutput_23_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_23);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta11");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_23", true);
end_Hash.put("tOracleOutput_23", System.currentTimeMillis());




/**
 * [tOracleOutput_23 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_16:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tOracleInput_20Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_11"
					     			globalMap.remove("tHash_Lookup_row37"); 
				     			
					     			//free memory for "tMap_11"
					     			globalMap.remove("tHash_Lookup_row38"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_16 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tOracleOutput_24 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_24";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_24") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_24 = null;
                if ((pstmtToClose_tOracleOutput_24 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_24")) != null) {
                    pstmtToClose_tOracleOutput_24.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_24") == null){
            java.sql.Connection ctn_tOracleOutput_24 = null;
            if((ctn_tOracleOutput_24 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_24")) != null){
                try {
                    ctn_tOracleOutput_24.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_24) {
                    String errorMessage_tOracleOutput_24 = "failed to close the connection in tOracleOutput_24 :" + sqlEx_tOracleOutput_24.getMessage();
                    System.err.println(errorMessage_tOracleOutput_24);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_24 finally ] stop
 */




	
	/**
	 * [tOracleOutput_23 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_23";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_23") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_23 = null;
                if ((pstmtToClose_tOracleOutput_23 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_23")) != null) {
                    pstmtToClose_tOracleOutput_23.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_23") == null){
            java.sql.Connection ctn_tOracleOutput_23 = null;
            if((ctn_tOracleOutput_23 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_23")) != null){
                try {
                    ctn_tOracleOutput_23.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_23) {
                    String errorMessage_tOracleOutput_23 = "failed to close the connection in tOracleOutput_23 :" + sqlEx_tOracleOutput_23.getMessage();
                    System.err.println(errorMessage_tOracleOutput_23);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_23 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class Elimina9Struct implements routines.system.IPersistableRow<Elimina9Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NRADICADO;

				public String getNRADICADO () {
					return this.NRADICADO;
				}

				public Boolean NRADICADOIsNullable(){
				    return true;
				}
				public Boolean NRADICADOIsKey(){
				    return true;
				}
				public Integer NRADICADOLength(){
				    return 100;
				}
				public Integer NRADICADOPrecision(){
				    return 0;
				}
				public String NRADICADODefault(){
				
					return null;
				
				}
				public String NRADICADOComment(){
				
				    return "";
				
				}
				public String NRADICADOPattern(){
				
					return "";
				
				}
				public String NRADICADOOriginalDbColumnName(){
				
					return "NRADICADO";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal AUDITORES_ID;

				public BigDecimal getAUDITORES_ID () {
					return this.AUDITORES_ID;
				}

				public Boolean AUDITORES_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORES_IDIsKey(){
				    return true;
				}
				public Integer AUDITORES_IDLength(){
				    return null;
				}
				public Integer AUDITORES_IDPrecision(){
				    return null;
				}
				public String AUDITORES_IDDefault(){
				
					return "";
				
				}
				public String AUDITORES_IDComment(){
				
				    return "";
				
				}
				public String AUDITORES_IDPattern(){
				
					return "";
				
				}
				public String AUDITORES_IDOriginalDbColumnName(){
				
					return "AUDITORES_ID";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return true;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.NRADICADO == null) ? 0 : this.NRADICADO.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
						result = prime * result + ((this.AUDITORES_ID == null) ? 0 : this.AUDITORES_ID.hashCode());
					
						result = prime * result + ((this.TINDICADORES_ID == null) ? 0 : this.TINDICADORES_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Elimina9Struct other = (Elimina9Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.NRADICADO == null) {
							if (other.NRADICADO != null)
								return false;
						
						} else if (!this.NRADICADO.equals(other.NRADICADO))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					
						if (this.AUDITORES_ID == null) {
							if (other.AUDITORES_ID != null)
								return false;
						
						} else if (!this.AUDITORES_ID.equals(other.AUDITORES_ID))
						
							return false;
					
						if (this.TINDICADORES_ID == null) {
							if (other.TINDICADORES_ID != null)
								return false;
						
						} else if (!this.TINDICADORES_ID.equals(other.TINDICADORES_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Elimina9Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.NRADICADO = this.NRADICADO;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            other.AUDITORES_ID = this.AUDITORES_ID;
	            other.TINDICADORES_ID = this.TINDICADORES_ID;
	            
	}

	public void copyKeysDataTo(Elimina9Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.NRADICADO = this.NRADICADO;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	other.AUDITORES_ID = this.AUDITORES_ID;
	            	other.TINDICADORES_ID = this.TINDICADORES_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.AUDITORES_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.AUDITORES_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NRADICADO="+NRADICADO);
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",AUDITORES_ID="+String.valueOf(AUDITORES_ID));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Elimina9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NRADICADO, other.NRADICADO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.AUDITORES_ID, other.AUDITORES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TINDICADORES_ID, other.TINDICADORES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Inserta12Struct implements routines.system.IPersistableRow<Inserta12Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NRADICADO;

				public String getNRADICADO () {
					return this.NRADICADO;
				}

				public Boolean NRADICADOIsNullable(){
				    return true;
				}
				public Boolean NRADICADOIsKey(){
				    return false;
				}
				public Integer NRADICADOLength(){
				    return 100;
				}
				public Integer NRADICADOPrecision(){
				    return 0;
				}
				public String NRADICADODefault(){
				
					return null;
				
				}
				public String NRADICADOComment(){
				
				    return "";
				
				}
				public String NRADICADOPattern(){
				
					return "";
				
				}
				public String NRADICADOOriginalDbColumnName(){
				
					return "NRADICADO";
				
				}

				
			    public BigDecimal DENOMINADOR;

				public BigDecimal getDENOMINADOR () {
					return this.DENOMINADOR;
				}

				public Boolean DENOMINADORIsNullable(){
				    return true;
				}
				public Boolean DENOMINADORIsKey(){
				    return false;
				}
				public Integer DENOMINADORLength(){
				    return 0;
				}
				public Integer DENOMINADORPrecision(){
				    return 0;
				}
				public String DENOMINADORDefault(){
				
					return "";
				
				}
				public String DENOMINADORComment(){
				
				    return "";
				
				}
				public String DENOMINADORPattern(){
				
					return "";
				
				}
				public String DENOMINADOROriginalDbColumnName(){
				
					return "DENOMINADOR";
				
				}

				
			    public BigDecimal NUMERADOR;

				public BigDecimal getNUMERADOR () {
					return this.NUMERADOR;
				}

				public Boolean NUMERADORIsNullable(){
				    return true;
				}
				public Boolean NUMERADORIsKey(){
				    return false;
				}
				public Integer NUMERADORLength(){
				    return 0;
				}
				public Integer NUMERADORPrecision(){
				    return 0;
				}
				public String NUMERADORDefault(){
				
					return "";
				
				}
				public String NUMERADORComment(){
				
				    return "";
				
				}
				public String NUMERADORPattern(){
				
					return "";
				
				}
				public String NUMERADOROriginalDbColumnName(){
				
					return "NUMERADOR";
				
				}

				
			    public BigDecimal INDICADOR;

				public BigDecimal getINDICADOR () {
					return this.INDICADOR;
				}

				public Boolean INDICADORIsNullable(){
				    return true;
				}
				public Boolean INDICADORIsKey(){
				    return false;
				}
				public Integer INDICADORLength(){
				    return 0;
				}
				public Integer INDICADORPrecision(){
				    return 0;
				}
				public String INDICADORDefault(){
				
					return "";
				
				}
				public String INDICADORComment(){
				
				    return "";
				
				}
				public String INDICADORPattern(){
				
					return "";
				
				}
				public String INDICADOROriginalDbColumnName(){
				
					return "INDICADOR";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return false;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal AUDITORES_ID;

				public BigDecimal getAUDITORES_ID () {
					return this.AUDITORES_ID;
				}

				public Boolean AUDITORES_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORES_IDIsKey(){
				    return false;
				}
				public Integer AUDITORES_IDLength(){
				    return null;
				}
				public Integer AUDITORES_IDPrecision(){
				    return null;
				}
				public String AUDITORES_IDDefault(){
				
					return "";
				
				}
				public String AUDITORES_IDComment(){
				
				    return "";
				
				}
				public String AUDITORES_IDPattern(){
				
					return "";
				
				}
				public String AUDITORES_IDOriginalDbColumnName(){
				
					return "AUDITORES_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.AUDITORES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.AUDITORES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NRADICADO="+NRADICADO);
		sb.append(",DENOMINADOR="+String.valueOf(DENOMINADOR));
		sb.append(",NUMERADOR="+String.valueOf(NUMERADOR));
		sb.append(",INDICADOR="+String.valueOf(INDICADOR));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",AUDITORES_ID="+String.valueOf(AUDITORES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Elimina10Struct implements routines.system.IPersistableRow<Elimina10Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NRADICADO;

				public String getNRADICADO () {
					return this.NRADICADO;
				}

				public Boolean NRADICADOIsNullable(){
				    return true;
				}
				public Boolean NRADICADOIsKey(){
				    return true;
				}
				public Integer NRADICADOLength(){
				    return 100;
				}
				public Integer NRADICADOPrecision(){
				    return 0;
				}
				public String NRADICADODefault(){
				
					return null;
				
				}
				public String NRADICADOComment(){
				
				    return "";
				
				}
				public String NRADICADOPattern(){
				
					return "";
				
				}
				public String NRADICADOOriginalDbColumnName(){
				
					return "NRADICADO";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal AUDITORES_ID;

				public BigDecimal getAUDITORES_ID () {
					return this.AUDITORES_ID;
				}

				public Boolean AUDITORES_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORES_IDIsKey(){
				    return true;
				}
				public Integer AUDITORES_IDLength(){
				    return null;
				}
				public Integer AUDITORES_IDPrecision(){
				    return null;
				}
				public String AUDITORES_IDDefault(){
				
					return "";
				
				}
				public String AUDITORES_IDComment(){
				
				    return "";
				
				}
				public String AUDITORES_IDPattern(){
				
					return "";
				
				}
				public String AUDITORES_IDOriginalDbColumnName(){
				
					return "AUDITORES_ID";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return true;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.NRADICADO == null) ? 0 : this.NRADICADO.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
						result = prime * result + ((this.AUDITORES_ID == null) ? 0 : this.AUDITORES_ID.hashCode());
					
						result = prime * result + ((this.TINDICADORES_ID == null) ? 0 : this.TINDICADORES_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Elimina10Struct other = (Elimina10Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.NRADICADO == null) {
							if (other.NRADICADO != null)
								return false;
						
						} else if (!this.NRADICADO.equals(other.NRADICADO))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					
						if (this.AUDITORES_ID == null) {
							if (other.AUDITORES_ID != null)
								return false;
						
						} else if (!this.AUDITORES_ID.equals(other.AUDITORES_ID))
						
							return false;
					
						if (this.TINDICADORES_ID == null) {
							if (other.TINDICADORES_ID != null)
								return false;
						
						} else if (!this.TINDICADORES_ID.equals(other.TINDICADORES_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Elimina10Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.NRADICADO = this.NRADICADO;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            other.AUDITORES_ID = this.AUDITORES_ID;
	            other.TINDICADORES_ID = this.TINDICADORES_ID;
	            
	}

	public void copyKeysDataTo(Elimina10Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.NRADICADO = this.NRADICADO;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	other.AUDITORES_ID = this.AUDITORES_ID;
	            	other.TINDICADORES_ID = this.TINDICADORES_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.AUDITORES_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.AUDITORES_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NRADICADO="+NRADICADO);
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",AUDITORES_ID="+String.valueOf(AUDITORES_ID));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Elimina10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NRADICADO, other.NRADICADO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.AUDITORES_ID, other.AUDITORES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TINDICADORES_ID, other.TINDICADORES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Inserta13Struct implements routines.system.IPersistableRow<Inserta13Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NRADICADO;

				public String getNRADICADO () {
					return this.NRADICADO;
				}

				public Boolean NRADICADOIsNullable(){
				    return true;
				}
				public Boolean NRADICADOIsKey(){
				    return false;
				}
				public Integer NRADICADOLength(){
				    return 100;
				}
				public Integer NRADICADOPrecision(){
				    return 0;
				}
				public String NRADICADODefault(){
				
					return null;
				
				}
				public String NRADICADOComment(){
				
				    return "";
				
				}
				public String NRADICADOPattern(){
				
					return "";
				
				}
				public String NRADICADOOriginalDbColumnName(){
				
					return "NRADICADO";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return false;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal DENOMINADOR;

				public BigDecimal getDENOMINADOR () {
					return this.DENOMINADOR;
				}

				public Boolean DENOMINADORIsNullable(){
				    return true;
				}
				public Boolean DENOMINADORIsKey(){
				    return false;
				}
				public Integer DENOMINADORLength(){
				    return 0;
				}
				public Integer DENOMINADORPrecision(){
				    return 0;
				}
				public String DENOMINADORDefault(){
				
					return "";
				
				}
				public String DENOMINADORComment(){
				
				    return "";
				
				}
				public String DENOMINADORPattern(){
				
					return "";
				
				}
				public String DENOMINADOROriginalDbColumnName(){
				
					return "DENOMINADOR";
				
				}

				
			    public BigDecimal NUMERADOR;

				public BigDecimal getNUMERADOR () {
					return this.NUMERADOR;
				}

				public Boolean NUMERADORIsNullable(){
				    return true;
				}
				public Boolean NUMERADORIsKey(){
				    return false;
				}
				public Integer NUMERADORLength(){
				    return 0;
				}
				public Integer NUMERADORPrecision(){
				    return 0;
				}
				public String NUMERADORDefault(){
				
					return "";
				
				}
				public String NUMERADORComment(){
				
				    return "";
				
				}
				public String NUMERADORPattern(){
				
					return "";
				
				}
				public String NUMERADOROriginalDbColumnName(){
				
					return "NUMERADOR";
				
				}

				
			    public BigDecimal INDICADOR;

				public BigDecimal getINDICADOR () {
					return this.INDICADOR;
				}

				public Boolean INDICADORIsNullable(){
				    return true;
				}
				public Boolean INDICADORIsKey(){
				    return false;
				}
				public Integer INDICADORLength(){
				    return 0;
				}
				public Integer INDICADORPrecision(){
				    return 0;
				}
				public String INDICADORDefault(){
				
					return "";
				
				}
				public String INDICADORComment(){
				
				    return "";
				
				}
				public String INDICADORPattern(){
				
					return "";
				
				}
				public String INDICADOROriginalDbColumnName(){
				
					return "INDICADOR";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal AUDITORES_ID;

				public BigDecimal getAUDITORES_ID () {
					return this.AUDITORES_ID;
				}

				public Boolean AUDITORES_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORES_IDIsKey(){
				    return false;
				}
				public Integer AUDITORES_IDLength(){
				    return null;
				}
				public Integer AUDITORES_IDPrecision(){
				    return null;
				}
				public String AUDITORES_IDDefault(){
				
					return "";
				
				}
				public String AUDITORES_IDComment(){
				
				    return "";
				
				}
				public String AUDITORES_IDPattern(){
				
					return "";
				
				}
				public String AUDITORES_IDOriginalDbColumnName(){
				
					return "AUDITORES_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.AUDITORES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.AUDITORES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NRADICADO="+NRADICADO);
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",DENOMINADOR="+String.valueOf(DENOMINADOR));
		sb.append(",NUMERADOR="+String.valueOf(NUMERADOR));
		sb.append(",INDICADOR="+String.valueOf(INDICADOR));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",AUDITORES_ID="+String.valueOf(AUDITORES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String RADICADO;

				public String getRADICADO () {
					return this.RADICADO;
				}

				public Boolean RADICADOIsNullable(){
				    return true;
				}
				public Boolean RADICADOIsKey(){
				    return false;
				}
				public Integer RADICADOLength(){
				    return 100;
				}
				public Integer RADICADOPrecision(){
				    return 0;
				}
				public String RADICADODefault(){
				
					return null;
				
				}
				public String RADICADOComment(){
				
				    return "";
				
				}
				public String RADICADOPattern(){
				
					return "";
				
				}
				public String RADICADOOriginalDbColumnName(){
				
					return "RADICADO";
				
				}

				
			    public java.util.Date FPERIODO;

				public java.util.Date getFPERIODO () {
					return this.FPERIODO;
				}

				public Boolean FPERIODOIsNullable(){
				    return true;
				}
				public Boolean FPERIODOIsKey(){
				    return false;
				}
				public Integer FPERIODOLength(){
				    return 0;
				}
				public Integer FPERIODOPrecision(){
				    return 0;
				}
				public String FPERIODODefault(){
				
					return null;
				
				}
				public String FPERIODOComment(){
				
				    return "";
				
				}
				public String FPERIODOPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FPERIODOOriginalDbColumnName(){
				
					return "FPERIODO";
				
				}

				
			    public BigDecimal DENOMINADOR1;

				public BigDecimal getDENOMINADOR1 () {
					return this.DENOMINADOR1;
				}

				public Boolean DENOMINADOR1IsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR1IsKey(){
				    return false;
				}
				public Integer DENOMINADOR1Length(){
				    return 0;
				}
				public Integer DENOMINADOR1Precision(){
				    return 0;
				}
				public String DENOMINADOR1Default(){
				
					return "";
				
				}
				public String DENOMINADOR1Comment(){
				
				    return "";
				
				}
				public String DENOMINADOR1Pattern(){
				
					return "";
				
				}
				public String DENOMINADOR1OriginalDbColumnName(){
				
					return "DENOMINADOR1";
				
				}

				
			    public BigDecimal NUMERADOR1;

				public BigDecimal getNUMERADOR1 () {
					return this.NUMERADOR1;
				}

				public Boolean NUMERADOR1IsNullable(){
				    return true;
				}
				public Boolean NUMERADOR1IsKey(){
				    return false;
				}
				public Integer NUMERADOR1Length(){
				    return 0;
				}
				public Integer NUMERADOR1Precision(){
				    return 0;
				}
				public String NUMERADOR1Default(){
				
					return "";
				
				}
				public String NUMERADOR1Comment(){
				
				    return "";
				
				}
				public String NUMERADOR1Pattern(){
				
					return "";
				
				}
				public String NUMERADOR1OriginalDbColumnName(){
				
					return "NUMERADOR1";
				
				}

				
			    public BigDecimal INDICADOR1;

				public BigDecimal getINDICADOR1 () {
					return this.INDICADOR1;
				}

				public Boolean INDICADOR1IsNullable(){
				    return true;
				}
				public Boolean INDICADOR1IsKey(){
				    return false;
				}
				public Integer INDICADOR1Length(){
				    return 0;
				}
				public Integer INDICADOR1Precision(){
				    return 0;
				}
				public String INDICADOR1Default(){
				
					return "";
				
				}
				public String INDICADOR1Comment(){
				
				    return "";
				
				}
				public String INDICADOR1Pattern(){
				
					return "";
				
				}
				public String INDICADOR1OriginalDbColumnName(){
				
					return "INDICADOR1";
				
				}

				
			    public BigDecimal TINDICADORES_ID1;

				public BigDecimal getTINDICADORES_ID1 () {
					return this.TINDICADORES_ID1;
				}

				public Boolean TINDICADORES_ID1IsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_ID1IsKey(){
				    return false;
				}
				public Integer TINDICADORES_ID1Length(){
				    return 0;
				}
				public Integer TINDICADORES_ID1Precision(){
				    return 0;
				}
				public String TINDICADORES_ID1Default(){
				
					return "";
				
				}
				public String TINDICADORES_ID1Comment(){
				
				    return "";
				
				}
				public String TINDICADORES_ID1Pattern(){
				
					return "";
				
				}
				public String TINDICADORES_ID1OriginalDbColumnName(){
				
					return "TINDICADORES_ID1";
				
				}

				
			    public BigDecimal DENOMINADOR2;

				public BigDecimal getDENOMINADOR2 () {
					return this.DENOMINADOR2;
				}

				public Boolean DENOMINADOR2IsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR2IsKey(){
				    return false;
				}
				public Integer DENOMINADOR2Length(){
				    return 0;
				}
				public Integer DENOMINADOR2Precision(){
				    return 0;
				}
				public String DENOMINADOR2Default(){
				
					return "";
				
				}
				public String DENOMINADOR2Comment(){
				
				    return "";
				
				}
				public String DENOMINADOR2Pattern(){
				
					return "";
				
				}
				public String DENOMINADOR2OriginalDbColumnName(){
				
					return "DENOMINADOR2";
				
				}

				
			    public BigDecimal NUMERADOR2;

				public BigDecimal getNUMERADOR2 () {
					return this.NUMERADOR2;
				}

				public Boolean NUMERADOR2IsNullable(){
				    return true;
				}
				public Boolean NUMERADOR2IsKey(){
				    return false;
				}
				public Integer NUMERADOR2Length(){
				    return 0;
				}
				public Integer NUMERADOR2Precision(){
				    return 0;
				}
				public String NUMERADOR2Default(){
				
					return "";
				
				}
				public String NUMERADOR2Comment(){
				
				    return "";
				
				}
				public String NUMERADOR2Pattern(){
				
					return "";
				
				}
				public String NUMERADOR2OriginalDbColumnName(){
				
					return "NUMERADOR2";
				
				}

				
			    public BigDecimal INDICADOR11;

				public BigDecimal getINDICADOR11 () {
					return this.INDICADOR11;
				}

				public Boolean INDICADOR11IsNullable(){
				    return true;
				}
				public Boolean INDICADOR11IsKey(){
				    return false;
				}
				public Integer INDICADOR11Length(){
				    return 0;
				}
				public Integer INDICADOR11Precision(){
				    return 0;
				}
				public String INDICADOR11Default(){
				
					return "";
				
				}
				public String INDICADOR11Comment(){
				
				    return "";
				
				}
				public String INDICADOR11Pattern(){
				
					return "";
				
				}
				public String INDICADOR11OriginalDbColumnName(){
				
					return "INDICADOR1";
				
				}

				
			    public BigDecimal TINDICADORES_ID2;

				public BigDecimal getTINDICADORES_ID2 () {
					return this.TINDICADORES_ID2;
				}

				public Boolean TINDICADORES_ID2IsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_ID2IsKey(){
				    return false;
				}
				public Integer TINDICADORES_ID2Length(){
				    return 0;
				}
				public Integer TINDICADORES_ID2Precision(){
				    return 0;
				}
				public String TINDICADORES_ID2Default(){
				
					return "";
				
				}
				public String TINDICADORES_ID2Comment(){
				
				    return "";
				
				}
				public String TINDICADORES_ID2Pattern(){
				
					return "";
				
				}
				public String TINDICADORES_ID2OriginalDbColumnName(){
				
					return "TINDICADORES_ID2";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.RADICADO = readString(dis);
					
					this.FPERIODO = readDate(dis);
					
						this.DENOMINADOR1 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR1 = (BigDecimal) dis.readObject();
					
						this.INDICADOR1 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID1 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR2 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR2 = (BigDecimal) dis.readObject();
					
						this.INDICADOR11 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID2 = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.RADICADO = readString(dis);
					
					this.FPERIODO = readDate(dis);
					
						this.DENOMINADOR1 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR1 = (BigDecimal) dis.readObject();
					
						this.INDICADOR1 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID1 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR2 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR2 = (BigDecimal) dis.readObject();
					
						this.INDICADOR11 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID2 = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.RADICADO,dos);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR11);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID2);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.RADICADO,dos);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR11);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID2);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",RADICADO="+RADICADO);
		sb.append(",FPERIODO="+String.valueOf(FPERIODO));
		sb.append(",DENOMINADOR1="+String.valueOf(DENOMINADOR1));
		sb.append(",NUMERADOR1="+String.valueOf(NUMERADOR1));
		sb.append(",INDICADOR1="+String.valueOf(INDICADOR1));
		sb.append(",TINDICADORES_ID1="+String.valueOf(TINDICADORES_ID1));
		sb.append(",DENOMINADOR2="+String.valueOf(DENOMINADOR2));
		sb.append(",NUMERADOR2="+String.valueOf(NUMERADOR2));
		sb.append(",INDICADOR11="+String.valueOf(INDICADOR11));
		sb.append(",TINDICADORES_ID2="+String.valueOf(TINDICADORES_ID2));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_20Struct implements routines.system.IPersistableRow<after_tOracleInput_20Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String RADICADO;

				public String getRADICADO () {
					return this.RADICADO;
				}

				public Boolean RADICADOIsNullable(){
				    return true;
				}
				public Boolean RADICADOIsKey(){
				    return false;
				}
				public Integer RADICADOLength(){
				    return 100;
				}
				public Integer RADICADOPrecision(){
				    return 0;
				}
				public String RADICADODefault(){
				
					return null;
				
				}
				public String RADICADOComment(){
				
				    return "";
				
				}
				public String RADICADOPattern(){
				
					return "";
				
				}
				public String RADICADOOriginalDbColumnName(){
				
					return "RADICADO";
				
				}

				
			    public java.util.Date FPERIODO;

				public java.util.Date getFPERIODO () {
					return this.FPERIODO;
				}

				public Boolean FPERIODOIsNullable(){
				    return true;
				}
				public Boolean FPERIODOIsKey(){
				    return false;
				}
				public Integer FPERIODOLength(){
				    return 0;
				}
				public Integer FPERIODOPrecision(){
				    return 0;
				}
				public String FPERIODODefault(){
				
					return null;
				
				}
				public String FPERIODOComment(){
				
				    return "";
				
				}
				public String FPERIODOPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FPERIODOOriginalDbColumnName(){
				
					return "FPERIODO";
				
				}

				
			    public BigDecimal DENOMINADOR1;

				public BigDecimal getDENOMINADOR1 () {
					return this.DENOMINADOR1;
				}

				public Boolean DENOMINADOR1IsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR1IsKey(){
				    return false;
				}
				public Integer DENOMINADOR1Length(){
				    return 0;
				}
				public Integer DENOMINADOR1Precision(){
				    return 0;
				}
				public String DENOMINADOR1Default(){
				
					return "";
				
				}
				public String DENOMINADOR1Comment(){
				
				    return "";
				
				}
				public String DENOMINADOR1Pattern(){
				
					return "";
				
				}
				public String DENOMINADOR1OriginalDbColumnName(){
				
					return "DENOMINADOR1";
				
				}

				
			    public BigDecimal NUMERADOR1;

				public BigDecimal getNUMERADOR1 () {
					return this.NUMERADOR1;
				}

				public Boolean NUMERADOR1IsNullable(){
				    return true;
				}
				public Boolean NUMERADOR1IsKey(){
				    return false;
				}
				public Integer NUMERADOR1Length(){
				    return 0;
				}
				public Integer NUMERADOR1Precision(){
				    return 0;
				}
				public String NUMERADOR1Default(){
				
					return "";
				
				}
				public String NUMERADOR1Comment(){
				
				    return "";
				
				}
				public String NUMERADOR1Pattern(){
				
					return "";
				
				}
				public String NUMERADOR1OriginalDbColumnName(){
				
					return "NUMERADOR1";
				
				}

				
			    public BigDecimal INDICADOR1;

				public BigDecimal getINDICADOR1 () {
					return this.INDICADOR1;
				}

				public Boolean INDICADOR1IsNullable(){
				    return true;
				}
				public Boolean INDICADOR1IsKey(){
				    return false;
				}
				public Integer INDICADOR1Length(){
				    return 0;
				}
				public Integer INDICADOR1Precision(){
				    return 0;
				}
				public String INDICADOR1Default(){
				
					return "";
				
				}
				public String INDICADOR1Comment(){
				
				    return "";
				
				}
				public String INDICADOR1Pattern(){
				
					return "";
				
				}
				public String INDICADOR1OriginalDbColumnName(){
				
					return "INDICADOR1";
				
				}

				
			    public BigDecimal TINDICADORES_ID1;

				public BigDecimal getTINDICADORES_ID1 () {
					return this.TINDICADORES_ID1;
				}

				public Boolean TINDICADORES_ID1IsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_ID1IsKey(){
				    return false;
				}
				public Integer TINDICADORES_ID1Length(){
				    return 0;
				}
				public Integer TINDICADORES_ID1Precision(){
				    return 0;
				}
				public String TINDICADORES_ID1Default(){
				
					return "";
				
				}
				public String TINDICADORES_ID1Comment(){
				
				    return "";
				
				}
				public String TINDICADORES_ID1Pattern(){
				
					return "";
				
				}
				public String TINDICADORES_ID1OriginalDbColumnName(){
				
					return "TINDICADORES_ID1";
				
				}

				
			    public BigDecimal DENOMINADOR2;

				public BigDecimal getDENOMINADOR2 () {
					return this.DENOMINADOR2;
				}

				public Boolean DENOMINADOR2IsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR2IsKey(){
				    return false;
				}
				public Integer DENOMINADOR2Length(){
				    return 0;
				}
				public Integer DENOMINADOR2Precision(){
				    return 0;
				}
				public String DENOMINADOR2Default(){
				
					return "";
				
				}
				public String DENOMINADOR2Comment(){
				
				    return "";
				
				}
				public String DENOMINADOR2Pattern(){
				
					return "";
				
				}
				public String DENOMINADOR2OriginalDbColumnName(){
				
					return "DENOMINADOR2";
				
				}

				
			    public BigDecimal NUMERADOR2;

				public BigDecimal getNUMERADOR2 () {
					return this.NUMERADOR2;
				}

				public Boolean NUMERADOR2IsNullable(){
				    return true;
				}
				public Boolean NUMERADOR2IsKey(){
				    return false;
				}
				public Integer NUMERADOR2Length(){
				    return 0;
				}
				public Integer NUMERADOR2Precision(){
				    return 0;
				}
				public String NUMERADOR2Default(){
				
					return "";
				
				}
				public String NUMERADOR2Comment(){
				
				    return "";
				
				}
				public String NUMERADOR2Pattern(){
				
					return "";
				
				}
				public String NUMERADOR2OriginalDbColumnName(){
				
					return "NUMERADOR2";
				
				}

				
			    public BigDecimal INDICADOR11;

				public BigDecimal getINDICADOR11 () {
					return this.INDICADOR11;
				}

				public Boolean INDICADOR11IsNullable(){
				    return true;
				}
				public Boolean INDICADOR11IsKey(){
				    return false;
				}
				public Integer INDICADOR11Length(){
				    return 0;
				}
				public Integer INDICADOR11Precision(){
				    return 0;
				}
				public String INDICADOR11Default(){
				
					return "";
				
				}
				public String INDICADOR11Comment(){
				
				    return "";
				
				}
				public String INDICADOR11Pattern(){
				
					return "";
				
				}
				public String INDICADOR11OriginalDbColumnName(){
				
					return "INDICADOR1";
				
				}

				
			    public BigDecimal TINDICADORES_ID2;

				public BigDecimal getTINDICADORES_ID2 () {
					return this.TINDICADORES_ID2;
				}

				public Boolean TINDICADORES_ID2IsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_ID2IsKey(){
				    return false;
				}
				public Integer TINDICADORES_ID2Length(){
				    return 0;
				}
				public Integer TINDICADORES_ID2Precision(){
				    return 0;
				}
				public String TINDICADORES_ID2Default(){
				
					return "";
				
				}
				public String TINDICADORES_ID2Comment(){
				
				    return "";
				
				}
				public String TINDICADORES_ID2Pattern(){
				
					return "";
				
				}
				public String TINDICADORES_ID2OriginalDbColumnName(){
				
					return "TINDICADORES_ID2";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.RADICADO = readString(dis);
					
					this.FPERIODO = readDate(dis);
					
						this.DENOMINADOR1 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR1 = (BigDecimal) dis.readObject();
					
						this.INDICADOR1 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID1 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR2 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR2 = (BigDecimal) dis.readObject();
					
						this.INDICADOR11 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID2 = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.RADICADO = readString(dis);
					
					this.FPERIODO = readDate(dis);
					
						this.DENOMINADOR1 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR1 = (BigDecimal) dis.readObject();
					
						this.INDICADOR1 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID1 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR2 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR2 = (BigDecimal) dis.readObject();
					
						this.INDICADOR11 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID2 = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.RADICADO,dos);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR11);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID2);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.RADICADO,dos);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR11);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID2);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",RADICADO="+RADICADO);
		sb.append(",FPERIODO="+String.valueOf(FPERIODO));
		sb.append(",DENOMINADOR1="+String.valueOf(DENOMINADOR1));
		sb.append(",NUMERADOR1="+String.valueOf(NUMERADOR1));
		sb.append(",INDICADOR1="+String.valueOf(INDICADOR1));
		sb.append(",TINDICADORES_ID1="+String.valueOf(TINDICADORES_ID1));
		sb.append(",DENOMINADOR2="+String.valueOf(DENOMINADOR2));
		sb.append(",NUMERADOR2="+String.valueOf(NUMERADOR2));
		sb.append(",INDICADOR11="+String.valueOf(INDICADOR11));
		sb.append(",TINDICADORES_ID2="+String.valueOf(TINDICADORES_ID2));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_14Process(globalMap);
		tOracleInput_21Process(globalMap);

		row39Struct row39 = new row39Struct();
Elimina9Struct Elimina9 = new Elimina9Struct();
Inserta12Struct Inserta12 = new Inserta12Struct();
Elimina10Struct Elimina10 = new Elimina10Struct();
Inserta13Struct Inserta13 = new Inserta13Struct();





	
	/**
	 * [tOracleOutput_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_25", false);
		start_Hash.put("tOracleOutput_25", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_25";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Elimina9");
					}
				
		int tos_count_tOracleOutput_25 = 0;
		






        int deleteKeyCount_tOracleOutput_25 = 5;
        if(deleteKeyCount_tOracleOutput_25 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_25 = 0;
    int nb_line_update_tOracleOutput_25 = 0;
    int nb_line_inserted_tOracleOutput_25 = 0;
    int nb_line_deleted_tOracleOutput_25 = 0;
    int nb_line_rejected_tOracleOutput_25 = 0;

    int tmp_batchUpdateCount_tOracleOutput_25 = 0;

    int deletedCount_tOracleOutput_25=0;
    int updatedCount_tOracleOutput_25=0;
    int insertedCount_tOracleOutput_25=0;
    int rowsToCommitCount_tOracleOutput_25=0;
    int rejectedCount_tOracleOutput_25=0;

    boolean whetherReject_tOracleOutput_25 = false;

    java.sql.Connection conn_tOracleOutput_25 = null;

    //optional table
    String dbschema_tOracleOutput_25 = null;
    String tableName_tOracleOutput_25 = null;
                    String driverClass_tOracleOutput_25 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_25);
                String url_tOracleOutput_25 = null;
                    url_tOracleOutput_25 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_25 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_25 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_25 = decryptedPassword_tOracleOutput_25;
                dbschema_tOracleOutput_25 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_25 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_25.put("user",dbUser_tOracleOutput_25);
                    atnParamsPrope_tOracleOutput_25.put("password",dbPwd_tOracleOutput_25);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_25.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_25 = java.sql.DriverManager.getConnection(url_tOracleOutput_25, atnParamsPrope_tOracleOutput_25);
        resourceMap.put("conn_tOracleOutput_25", conn_tOracleOutput_25);
            conn_tOracleOutput_25.setAutoCommit(false);
            int commitEvery_tOracleOutput_25 = 1000;
            int commitCounter_tOracleOutput_25 = 0;
        int batchSize_tOracleOutput_25 = 1000;
        int batchSizeCounter_tOracleOutput_25=0;
        int count_tOracleOutput_25=0;

        if(dbschema_tOracleOutput_25 == null || dbschema_tOracleOutput_25.trim().length() == 0) {
            tableName_tOracleOutput_25 = ("BACM_INDICADORES");
        } else {
            tableName_tOracleOutput_25 = dbschema_tOracleOutput_25 + "." + ("BACM_INDICADORES");
        }
                String delete_tOracleOutput_25 = "DELETE FROM " + tableName_tOracleOutput_25 + " WHERE UORG_ID = ? AND NRADICADO = ? AND TIEMPOS_ID = ? AND AUDITORES_ID = ? AND TINDICADORES_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_25 = conn_tOracleOutput_25.prepareStatement(delete_tOracleOutput_25);
                resourceMap.put("pstmt_tOracleOutput_25", pstmt_tOracleOutput_25);





 



/**
 * [tOracleOutput_25 begin ] stop
 */




	
	/**
	 * [tOracleOutput_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_26", false);
		start_Hash.put("tOracleOutput_26", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_26";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta12");
					}
				
		int tos_count_tOracleOutput_26 = 0;
		






    
    int nb_line_tOracleOutput_26 = 0;
    int nb_line_update_tOracleOutput_26 = 0;
    int nb_line_inserted_tOracleOutput_26 = 0;
    int nb_line_deleted_tOracleOutput_26 = 0;
    int nb_line_rejected_tOracleOutput_26 = 0;

    int tmp_batchUpdateCount_tOracleOutput_26 = 0;

    int deletedCount_tOracleOutput_26=0;
    int updatedCount_tOracleOutput_26=0;
    int insertedCount_tOracleOutput_26=0;
    int rowsToCommitCount_tOracleOutput_26=0;
    int rejectedCount_tOracleOutput_26=0;

    boolean whetherReject_tOracleOutput_26 = false;

    java.sql.Connection conn_tOracleOutput_26 = null;

    //optional table
    String dbschema_tOracleOutput_26 = null;
    String tableName_tOracleOutput_26 = null;
                    String driverClass_tOracleOutput_26 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_26);
                String url_tOracleOutput_26 = null;
                    url_tOracleOutput_26 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_26 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_26 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_26 = decryptedPassword_tOracleOutput_26;
                dbschema_tOracleOutput_26 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_26 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_26.put("user",dbUser_tOracleOutput_26);
                    atnParamsPrope_tOracleOutput_26.put("password",dbPwd_tOracleOutput_26);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_26.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_26 = java.sql.DriverManager.getConnection(url_tOracleOutput_26, atnParamsPrope_tOracleOutput_26);
        resourceMap.put("conn_tOracleOutput_26", conn_tOracleOutput_26);
            conn_tOracleOutput_26.setAutoCommit(false);
            int commitEvery_tOracleOutput_26 = 1000;
            int commitCounter_tOracleOutput_26 = 0;
        int batchSize_tOracleOutput_26 = 1000;
        int batchSizeCounter_tOracleOutput_26=0;
        int count_tOracleOutput_26=0;

        if(dbschema_tOracleOutput_26 == null || dbschema_tOracleOutput_26.trim().length() == 0) {
            tableName_tOracleOutput_26 = ("BACM_INDICADORES");
        } else {
            tableName_tOracleOutput_26 = dbschema_tOracleOutput_26 + "." + ("BACM_INDICADORES");
        }
                String insert_tOracleOutput_26 = "INSERT INTO " + tableName_tOracleOutput_26 + " (UORG_ID,NRADICADO,DENOMINADOR,NUMERADOR,INDICADOR,TINDICADORES_ID,TIEMPOS_ID,AUDITORES_ID) VALUES (?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_26 = conn_tOracleOutput_26.prepareStatement(insert_tOracleOutput_26);
                        resourceMap.put("pstmt_tOracleOutput_26", pstmt_tOracleOutput_26);





 



/**
 * [tOracleOutput_26 begin ] stop
 */




	
	/**
	 * [tOracleOutput_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_27", false);
		start_Hash.put("tOracleOutput_27", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_27";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Elimina10");
					}
				
		int tos_count_tOracleOutput_27 = 0;
		






        int deleteKeyCount_tOracleOutput_27 = 5;
        if(deleteKeyCount_tOracleOutput_27 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_27 = 0;
    int nb_line_update_tOracleOutput_27 = 0;
    int nb_line_inserted_tOracleOutput_27 = 0;
    int nb_line_deleted_tOracleOutput_27 = 0;
    int nb_line_rejected_tOracleOutput_27 = 0;

    int tmp_batchUpdateCount_tOracleOutput_27 = 0;

    int deletedCount_tOracleOutput_27=0;
    int updatedCount_tOracleOutput_27=0;
    int insertedCount_tOracleOutput_27=0;
    int rowsToCommitCount_tOracleOutput_27=0;
    int rejectedCount_tOracleOutput_27=0;

    boolean whetherReject_tOracleOutput_27 = false;

    java.sql.Connection conn_tOracleOutput_27 = null;

    //optional table
    String dbschema_tOracleOutput_27 = null;
    String tableName_tOracleOutput_27 = null;
                    String driverClass_tOracleOutput_27 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_27);
                String url_tOracleOutput_27 = null;
                    url_tOracleOutput_27 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_27 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_27 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_27 = decryptedPassword_tOracleOutput_27;
                dbschema_tOracleOutput_27 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_27 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_27.put("user",dbUser_tOracleOutput_27);
                    atnParamsPrope_tOracleOutput_27.put("password",dbPwd_tOracleOutput_27);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_27.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_27 = java.sql.DriverManager.getConnection(url_tOracleOutput_27, atnParamsPrope_tOracleOutput_27);
        resourceMap.put("conn_tOracleOutput_27", conn_tOracleOutput_27);
            conn_tOracleOutput_27.setAutoCommit(false);
            int commitEvery_tOracleOutput_27 = 1000;
            int commitCounter_tOracleOutput_27 = 0;
        int batchSize_tOracleOutput_27 = 1000;
        int batchSizeCounter_tOracleOutput_27=0;
        int count_tOracleOutput_27=0;

        if(dbschema_tOracleOutput_27 == null || dbschema_tOracleOutput_27.trim().length() == 0) {
            tableName_tOracleOutput_27 = ("BACM_INDICADORES");
        } else {
            tableName_tOracleOutput_27 = dbschema_tOracleOutput_27 + "." + ("BACM_INDICADORES");
        }
                String delete_tOracleOutput_27 = "DELETE FROM " + tableName_tOracleOutput_27 + " WHERE UORG_ID = ? AND NRADICADO = ? AND TIEMPOS_ID = ? AND AUDITORES_ID = ? AND TINDICADORES_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_27 = conn_tOracleOutput_27.prepareStatement(delete_tOracleOutput_27);
                resourceMap.put("pstmt_tOracleOutput_27", pstmt_tOracleOutput_27);





 



/**
 * [tOracleOutput_27 begin ] stop
 */




	
	/**
	 * [tOracleOutput_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_28", false);
		start_Hash.put("tOracleOutput_28", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_28";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta13");
					}
				
		int tos_count_tOracleOutput_28 = 0;
		






    
    int nb_line_tOracleOutput_28 = 0;
    int nb_line_update_tOracleOutput_28 = 0;
    int nb_line_inserted_tOracleOutput_28 = 0;
    int nb_line_deleted_tOracleOutput_28 = 0;
    int nb_line_rejected_tOracleOutput_28 = 0;

    int tmp_batchUpdateCount_tOracleOutput_28 = 0;

    int deletedCount_tOracleOutput_28=0;
    int updatedCount_tOracleOutput_28=0;
    int insertedCount_tOracleOutput_28=0;
    int rowsToCommitCount_tOracleOutput_28=0;
    int rejectedCount_tOracleOutput_28=0;

    boolean whetherReject_tOracleOutput_28 = false;

    java.sql.Connection conn_tOracleOutput_28 = null;

    //optional table
    String dbschema_tOracleOutput_28 = null;
    String tableName_tOracleOutput_28 = null;
                    String driverClass_tOracleOutput_28 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_28);
                String url_tOracleOutput_28 = null;
                    url_tOracleOutput_28 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_28 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_28 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_28 = decryptedPassword_tOracleOutput_28;
                dbschema_tOracleOutput_28 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_28 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_28.put("user",dbUser_tOracleOutput_28);
                    atnParamsPrope_tOracleOutput_28.put("password",dbPwd_tOracleOutput_28);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_28.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_28 = java.sql.DriverManager.getConnection(url_tOracleOutput_28, atnParamsPrope_tOracleOutput_28);
        resourceMap.put("conn_tOracleOutput_28", conn_tOracleOutput_28);
            conn_tOracleOutput_28.setAutoCommit(false);
            int commitEvery_tOracleOutput_28 = 1000;
            int commitCounter_tOracleOutput_28 = 0;
        int batchSize_tOracleOutput_28 = 1000;
        int batchSizeCounter_tOracleOutput_28=0;
        int count_tOracleOutput_28=0;

        if(dbschema_tOracleOutput_28 == null || dbschema_tOracleOutput_28.trim().length() == 0) {
            tableName_tOracleOutput_28 = ("BACM_INDICADORES");
        } else {
            tableName_tOracleOutput_28 = dbschema_tOracleOutput_28 + "." + ("BACM_INDICADORES");
        }
                String insert_tOracleOutput_28 = "INSERT INTO " + tableName_tOracleOutput_28 + " (UORG_ID,NRADICADO,TINDICADORES_ID,DENOMINADOR,NUMERADOR,INDICADOR,TIEMPOS_ID,AUDITORES_ID) VALUES (?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_28 = conn_tOracleOutput_28.prepareStatement(insert_tOracleOutput_28);
                        resourceMap.put("pstmt_tOracleOutput_28", pstmt_tOracleOutput_28);





 



/**
 * [tOracleOutput_28 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row39");
					}
				
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) 
					globalMap.get( "tHash_Lookup_row40" ))
					;					
					
	

row40Struct row40HashKey = new row40Struct();
row40Struct row40Default = new row40Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row41Struct> tHash_Lookup_row41 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row41Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row41Struct>) 
					globalMap.get( "tHash_Lookup_row41" ))
					;					
					
	

row41Struct row41HashKey = new row41Struct();
row41Struct row41Default = new row41Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
Elimina9Struct Elimina9_tmp = new Elimina9Struct();
Inserta12Struct Inserta12_tmp = new Inserta12Struct();
Elimina10Struct Elimina10_tmp = new Elimina10Struct();
Inserta13Struct Inserta13_tmp = new Inserta13Struct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tOracleInput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_20", false);
		start_Hash.put("tOracleInput_20", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_20";
	
	
		int tos_count_tOracleInput_20 = 0;
		
	


	
		    int nb_line_tOracleInput_20 = 0;
		    java.sql.Connection conn_tOracleInput_20 = null;
				conn_tOracleInput_20 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_20 = false;
				boolean isConnectionWrapped_tOracleInput_20 = !(conn_tOracleInput_20 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_20.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_20 = null;
                if (isConnectionWrapped_tOracleInput_20) {
					unwrappedOraConn_tOracleInput_20 = conn_tOracleInput_20.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_20 != null) {
                        isTimeZoneNull_tOracleInput_20 = (unwrappedOraConn_tOracleInput_20.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_20 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_20).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_20) {
					java.sql.Statement stmtGetTZ_tOracleInput_20 = conn_tOracleInput_20.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_20 = stmtGetTZ_tOracleInput_20.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_20 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_20.next()) {
						sessionTimezone_tOracleInput_20 = rsGetTZ_tOracleInput_20.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_20 && unwrappedOraConn_tOracleInput_20 != null) {
                        unwrappedOraConn_tOracleInput_20.setSessionTimeZone(sessionTimezone_tOracleInput_20);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_20).setSessionTimeZone(sessionTimezone_tOracleInput_20);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_20 = conn_tOracleInput_20.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_20.setFetchSize(1000);


		    String dbquery_tOracleInput_20 = "SELECT    UORG_ID \n        , PERSONAS_ID\n        , RADICADO\n        , FPERIODO\n        , FAC_ASI_ETA1 AS DENOMINADO"
+"R1\n        , FAC_REV_ETA1 AS NUMERADOR1\n        , CASE \n            WHEN FAC_ASI_ETA1 > 0 \n            THEN (FAC_REV"
+"_ETA1*100)/FAC_ASI_ETA1\n            ELSE NULL\n          END AS INDICADOR1\n        , ( SELECT ID FROM GEN_TINDICADORES"
+" WHERE CODIGO = 'ACM08' ) AS TINDICADORES_ID1\n        , FAC_ASI_ETA3 AS DENOMINADOR2\n        , FAC_REV_ETA3 AS NUMERAD"
+"OR2\n        , CASE \n            WHEN FAC_ASI_ETA3 > 0 \n            THEN (FAC_REV_ETA3*100)/FAC_ASI_ETA3\n            "
+"ELSE NULL\n          END AS INDICADOR1\n        , ( SELECT ID FROM GEN_TINDICADORES WHERE CODIGO = 'ACM09' ) AS TINDICAD"
+"ORES_ID2\nFROM (\n    SELECT  REC.UORG_ID\n          , US.PERSONAS_ID\n          , REC.RADICADO\n          , TRUNC( REC."
+"FRADICADO, 'MONTH' ) AS FPERIODO\n          , COUNT( DECODE ( EN.CODIGO, 1 , HFA.FACTURA_ID, NULL ) ) AS FAC_ASI_ETA1\n "
+"         , COUNT( \n            CASE \n              WHEN EN.CODIGO = 1 \n               AND HFA.FECHA < = REC.FCIERRETA"
+"PAUNO \n               AND HFA.ESTADO = 'Revisada'\n              THEN HFA.FACTURA_ID \n              ELSE NULL \n      "
+"      END \n            ) AS FAC_REV_ETA1\n          , COUNT( DECODE ( EN.CODIGO, 3 , HFA.FACTURA_ID, NULL ) ) AS FAC_AS"
+"I_ETA3\n          , COUNT(\n            CASE \n              WHEN EN.CODIGO = 3 \n               AND HFA.FECHA < = REC.F"
+"CIERRETAPADOS \n               AND HFA.ESTADO = 'Revisada'\n              THEN HFA.FACTURA_ID \n              ELSE NULL "
+"\n            END \n            ) AS FAC_REV_ETA3 \n    FROM ACM_AUDITORES_FACTURAS AF \n    INNER JOIN GEN_USUARIOS US "
+"ON US.ID = AF.AUDITORES_ID\n    INNER JOIN ACM_RECEPCION REC ON REC.ID = AF.RECEPCION_ID\n    INNER JOIN ACM_HFACTURAS H"
+"FA ON HFA.FACTURA_ID = AF.FACTURA_ID\n    INNER JOIN ACM_ETAPASNORMATIVIDAD EN ON EN.ID = HFA.ETAPASNORMATIVIDAD_ID     "
+"\n    WHERE AF.ESTREGISTRO_ID = 1\n      "+context.CONDICION2+"\n      AND HFA.ESTREGISTRO_ID = 1\n      AND REC.ESTREGISTRO_ID = 1\n      AND EN.ESTREGISTRO_ID = 1\n      AND EN.COD"
+"IGO IN ( 1, 3 )\n      AND HFA.ESTADO IN ( 'Activa', 'Revisada')      \n    GROUP BY REC.UORG_ID\n          , US.PERSONA"
+"S_ID\n          , REC.RADICADO\n          , TRUNC( REC.FRADICADO, 'MONTH' )\n)";
		    

		    globalMap.put("tOracleInput_20_QUERY",dbquery_tOracleInput_20);

		    java.sql.ResultSet rs_tOracleInput_20 = null;

		    try {
		    	rs_tOracleInput_20 = stmt_tOracleInput_20.executeQuery(dbquery_tOracleInput_20);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_20 = rs_tOracleInput_20.getMetaData();
		    	int colQtyInRs_tOracleInput_20 = rsmd_tOracleInput_20.getColumnCount();

		    String tmpContent_tOracleInput_20 = null;
		    
		    
		    while (rs_tOracleInput_20.next()) {
		        nb_line_tOracleInput_20++;
		        
							if(colQtyInRs_tOracleInput_20 < 1) {
								row39.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(1) != null) {
						row39.UORG_ID = rs_tOracleInput_20.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 2) {
								row39.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(2) != null) {
						row39.PERSONAS_ID = rs_tOracleInput_20.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 3) {
								row39.RADICADO = null;
							} else {
	                         		
        	row39.RADICADO = routines.system.JDBCUtil.getString(rs_tOracleInput_20, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_20 < 4) {
								row39.FPERIODO = null;
							} else {
										
			row39.FPERIODO = routines.system.JDBCUtil.getDate(rs_tOracleInput_20, 4);
		                    }
							if(colQtyInRs_tOracleInput_20 < 5) {
								row39.DENOMINADOR1 = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(5) != null) {
						row39.DENOMINADOR1 = rs_tOracleInput_20.getBigDecimal(5);
					} else {
				
						row39.DENOMINADOR1 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 6) {
								row39.NUMERADOR1 = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(6) != null) {
						row39.NUMERADOR1 = rs_tOracleInput_20.getBigDecimal(6);
					} else {
				
						row39.NUMERADOR1 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 7) {
								row39.INDICADOR1 = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(7) != null) {
						row39.INDICADOR1 = rs_tOracleInput_20.getBigDecimal(7);
					} else {
				
						row39.INDICADOR1 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 8) {
								row39.TINDICADORES_ID1 = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(8) != null) {
						row39.TINDICADORES_ID1 = rs_tOracleInput_20.getBigDecimal(8);
					} else {
				
						row39.TINDICADORES_ID1 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 9) {
								row39.DENOMINADOR2 = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(9) != null) {
						row39.DENOMINADOR2 = rs_tOracleInput_20.getBigDecimal(9);
					} else {
				
						row39.DENOMINADOR2 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 10) {
								row39.NUMERADOR2 = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(10) != null) {
						row39.NUMERADOR2 = rs_tOracleInput_20.getBigDecimal(10);
					} else {
				
						row39.NUMERADOR2 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 11) {
								row39.INDICADOR11 = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(11) != null) {
						row39.INDICADOR11 = rs_tOracleInput_20.getBigDecimal(11);
					} else {
				
						row39.INDICADOR11 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 12) {
								row39.TINDICADORES_ID2 = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(12) != null) {
						row39.TINDICADORES_ID2 = rs_tOracleInput_20.getBigDecimal(12);
					} else {
				
						row39.TINDICADORES_ID2 = null;
					}
		                    }
					




 



/**
 * [tOracleInput_20 begin ] stop
 */
	
	/**
	 * [tOracleInput_20 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 


	tos_count_tOracleInput_20++;

/**
 * [tOracleInput_20 main ] stop
 */
	
	/**
	 * [tOracleInput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 



/**
 * [tOracleInput_20 process_data_begin ] stop
 */

	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row39"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
						row40Struct row40 = null;
					
						row41Struct row41 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_12 = false;
		boolean mainRowRejected_tMap_12 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row40" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow40 = false;
       		  	    	
       		  	    	
 							row40Struct row40ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_12) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_12 = false;
								
                        		    		    row40HashKey.FECHA = row39.FPERIODO  == null ? null : new java.util.Date((row39.FPERIODO ).getTime());
                        		    		

								
		                        	row40HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row40.lookup( row40HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row40.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_12 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row40 != null && tHash_Lookup_row40.getCount(row40HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row40' and it contains more one result from keys :  row40.FECHA = '" + row40HashKey.FECHA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row40Struct fromLookup_row40 = null;
							row40 = row40Default;
										 
							
								 
							
							
								if (tHash_Lookup_row40 !=null && tHash_Lookup_row40.hasNext()) { // G 099
								
							
								
								fromLookup_row40 = tHash_Lookup_row40.next();

							
							
								} // G 099
							
							

							if(fromLookup_row40 != null) {
								row40 = fromLookup_row40;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row41" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow41 = false;
       		  	    	
       		  	    	
 							row41Struct row41ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_12) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_12 = false;
								
                        		    		    row41HashKey.PERSONA_ID = row39.PERSONAS_ID ;
                        		    		

								
		                        	row41HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row41.lookup( row41HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row41.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_12 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row41 != null && tHash_Lookup_row41.getCount(row41HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row41' and it contains more one result from keys :  row41.PERSONA_ID = '" + row41HashKey.PERSONA_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row41Struct fromLookup_row41 = null;
							row41 = row41Default;
										 
							
								 
							
							
								if (tHash_Lookup_row41 !=null && tHash_Lookup_row41.hasNext()) { // G 099
								
							
								
								fromLookup_row41 = tHash_Lookup_row41.next();

							
							
								} // G 099
							
							

							if(fromLookup_row41 != null) {
								row41 = fromLookup_row41;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

Elimina9 = null;
Inserta12 = null;
Elimina10 = null;
Inserta13 = null;

if(!rejectedInnerJoin_tMap_12 ) {

// # Output table : 'Elimina9'
Elimina9_tmp.UORG_ID = row39.UORG_ID ;
Elimina9_tmp.NRADICADO = row39.RADICADO ;
Elimina9_tmp.TIEMPOS_ID = row40.ID ;
Elimina9_tmp.AUDITORES_ID = row41.ID ;
Elimina9_tmp.TINDICADORES_ID = row39.TINDICADORES_ID1 ;
Elimina9 = Elimina9_tmp;

// # Output table : 'Inserta12'
Inserta12_tmp.UORG_ID = row39.UORG_ID ;
Inserta12_tmp.NRADICADO = row39.RADICADO ;
Inserta12_tmp.DENOMINADOR = row39.DENOMINADOR1 ;
Inserta12_tmp.NUMERADOR = row39.NUMERADOR1 ;
Inserta12_tmp.INDICADOR = row39.INDICADOR1 ;
Inserta12_tmp.TINDICADORES_ID = row39.TINDICADORES_ID1 ;
Inserta12_tmp.TIEMPOS_ID = row40.ID ;
Inserta12_tmp.AUDITORES_ID = row41.ID ;
Inserta12 = Inserta12_tmp;

// # Output table : 'Elimina10'
Elimina10_tmp.UORG_ID = row39.UORG_ID ;
Elimina10_tmp.NRADICADO = row39.RADICADO ;
Elimina10_tmp.TIEMPOS_ID = row40.ID ;
Elimina10_tmp.AUDITORES_ID = row41.ID ;
Elimina10_tmp.TINDICADORES_ID = row39.TINDICADORES_ID2 ;
Elimina10 = Elimina10_tmp;

// # Output table : 'Inserta13'
Inserta13_tmp.UORG_ID = row39.UORG_ID ;
Inserta13_tmp.NRADICADO = row39.RADICADO ;
Inserta13_tmp.TINDICADORES_ID = row39.TINDICADORES_ID2 ;
Inserta13_tmp.DENOMINADOR = row39.DENOMINADOR2 ;
Inserta13_tmp.NUMERADOR = row39.NUMERADOR2 ;
Inserta13_tmp.INDICADOR = row39.INDICADOR11 ;
Inserta13_tmp.TIEMPOS_ID = row40.ID ;
Inserta13_tmp.AUDITORES_ID = row41.ID ;
Inserta13 = Inserta13_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "Elimina9"
if(Elimina9 != null) { 



	
	/**
	 * [tOracleOutput_25 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_25";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Elimina9"
						
						);
					}
					



        whetherReject_tOracleOutput_25 = false;
                    pstmt_tOracleOutput_25.setBigDecimal(1, Elimina9.UORG_ID);

                    if(Elimina9.NRADICADO == null) {
pstmt_tOracleOutput_25.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_25.setString(2, Elimina9.NRADICADO);
}

                    pstmt_tOracleOutput_25.setBigDecimal(3, Elimina9.TIEMPOS_ID);

                    pstmt_tOracleOutput_25.setBigDecimal(4, Elimina9.AUDITORES_ID);

                    pstmt_tOracleOutput_25.setBigDecimal(5, Elimina9.TINDICADORES_ID);

                pstmt_tOracleOutput_25.addBatch();
                nb_line_tOracleOutput_25++;
                batchSizeCounter_tOracleOutput_25++;
            if (batchSize_tOracleOutput_25 > 0 &&  batchSize_tOracleOutput_25 <= batchSizeCounter_tOracleOutput_25) {
                try {
                    pstmt_tOracleOutput_25.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_25){
globalMap.put("tOracleOutput_25_ERROR_MESSAGE",e_tOracleOutput_25.getMessage());
			        java.sql.SQLException ne_tOracleOutput_25 = e_tOracleOutput_25.getNextException(),sqle_tOracleOutput_25=null;
			    	String errormessage_tOracleOutput_25;
					if (ne_tOracleOutput_25 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_25 = new java.sql.SQLException(e_tOracleOutput_25.getMessage() + "\ncaused by: " + ne_tOracleOutput_25.getMessage(), ne_tOracleOutput_25.getSQLState(), ne_tOracleOutput_25.getErrorCode(), ne_tOracleOutput_25);
						errormessage_tOracleOutput_25 = sqle_tOracleOutput_25.getMessage();
					}else{
						errormessage_tOracleOutput_25 = e_tOracleOutput_25.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_25);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_25 = pstmt_tOracleOutput_25.getUpdateCount();
                    deletedCount_tOracleOutput_25
                += (tmp_batchUpdateCount_tOracleOutput_25!=-1?tmp_batchUpdateCount_tOracleOutput_25:0);
                rowsToCommitCount_tOracleOutput_25 += (tmp_batchUpdateCount_tOracleOutput_25!=-1?tmp_batchUpdateCount_tOracleOutput_25:0);
                batchSizeCounter_tOracleOutput_25 = 0;
            }
                commitCounter_tOracleOutput_25++;
                if(commitEvery_tOracleOutput_25 <= commitCounter_tOracleOutput_25) {
                    if(batchSizeCounter_tOracleOutput_25 > 0) {
                        try {
                            pstmt_tOracleOutput_25.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_25){
globalMap.put("tOracleOutput_25_ERROR_MESSAGE",e_tOracleOutput_25.getMessage());
					        java.sql.SQLException ne_tOracleOutput_25 = e_tOracleOutput_25.getNextException(),sqle_tOracleOutput_25=null;
					    	String errormessage_tOracleOutput_25;
							if (ne_tOracleOutput_25 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_25 = new java.sql.SQLException(e_tOracleOutput_25.getMessage() + "\ncaused by: " + ne_tOracleOutput_25.getMessage(), ne_tOracleOutput_25.getSQLState(), ne_tOracleOutput_25.getErrorCode(), ne_tOracleOutput_25);
								errormessage_tOracleOutput_25 = sqle_tOracleOutput_25.getMessage();
							}else{
								errormessage_tOracleOutput_25 = e_tOracleOutput_25.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_25);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_25 = pstmt_tOracleOutput_25.getUpdateCount();
                            deletedCount_tOracleOutput_25
                        += (tmp_batchUpdateCount_tOracleOutput_25!=-1?tmp_batchUpdateCount_tOracleOutput_25:0);
                        rowsToCommitCount_tOracleOutput_25 += (tmp_batchUpdateCount_tOracleOutput_25!=-1?tmp_batchUpdateCount_tOracleOutput_25:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_25 != 0){
                    	
                    }
                    conn_tOracleOutput_25.commit();
                    if(rowsToCommitCount_tOracleOutput_25 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_25 = 0;
                    }
                    commitCounter_tOracleOutput_25=0;
                    	batchSizeCounter_tOracleOutput_25=0;
                }

 


	tos_count_tOracleOutput_25++;

/**
 * [tOracleOutput_25 main ] stop
 */
	
	/**
	 * [tOracleOutput_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_25";
	
	

 



/**
 * [tOracleOutput_25 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_25";
	
	

 



/**
 * [tOracleOutput_25 process_data_end ] stop
 */

} // End of branch "Elimina9"




// Start of branch "Inserta12"
if(Inserta12 != null) { 



	
	/**
	 * [tOracleOutput_26 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_26";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta12"
						
						);
					}
					



        whetherReject_tOracleOutput_26 = false;
                        pstmt_tOracleOutput_26.setBigDecimal(1, Inserta12.UORG_ID);

                        if(Inserta12.NRADICADO == null) {
pstmt_tOracleOutput_26.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_26.setString(2, Inserta12.NRADICADO);
}

                        pstmt_tOracleOutput_26.setBigDecimal(3, Inserta12.DENOMINADOR);

                        pstmt_tOracleOutput_26.setBigDecimal(4, Inserta12.NUMERADOR);

                        pstmt_tOracleOutput_26.setBigDecimal(5, Inserta12.INDICADOR);

                        pstmt_tOracleOutput_26.setBigDecimal(6, Inserta12.TINDICADORES_ID);

                        pstmt_tOracleOutput_26.setBigDecimal(7, Inserta12.TIEMPOS_ID);

                        pstmt_tOracleOutput_26.setBigDecimal(8, Inserta12.AUDITORES_ID);

                pstmt_tOracleOutput_26.addBatch();
                nb_line_tOracleOutput_26++;
                batchSizeCounter_tOracleOutput_26++;
            if (batchSize_tOracleOutput_26 > 0 &&  batchSize_tOracleOutput_26 <= batchSizeCounter_tOracleOutput_26) {
                try {
                    pstmt_tOracleOutput_26.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_26){
globalMap.put("tOracleOutput_26_ERROR_MESSAGE",e_tOracleOutput_26.getMessage());
			        java.sql.SQLException ne_tOracleOutput_26 = e_tOracleOutput_26.getNextException(),sqle_tOracleOutput_26=null;
			    	String errormessage_tOracleOutput_26;
					if (ne_tOracleOutput_26 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_26 = new java.sql.SQLException(e_tOracleOutput_26.getMessage() + "\ncaused by: " + ne_tOracleOutput_26.getMessage(), ne_tOracleOutput_26.getSQLState(), ne_tOracleOutput_26.getErrorCode(), ne_tOracleOutput_26);
						errormessage_tOracleOutput_26 = sqle_tOracleOutput_26.getMessage();
					}else{
						errormessage_tOracleOutput_26 = e_tOracleOutput_26.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_26);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_26 = pstmt_tOracleOutput_26.getUpdateCount();
                    insertedCount_tOracleOutput_26
                += (tmp_batchUpdateCount_tOracleOutput_26!=-1?tmp_batchUpdateCount_tOracleOutput_26:0);
                rowsToCommitCount_tOracleOutput_26 += (tmp_batchUpdateCount_tOracleOutput_26!=-1?tmp_batchUpdateCount_tOracleOutput_26:0);
                batchSizeCounter_tOracleOutput_26 = 0;
            }
                commitCounter_tOracleOutput_26++;
                if(commitEvery_tOracleOutput_26 <= commitCounter_tOracleOutput_26) {
                    if(batchSizeCounter_tOracleOutput_26 > 0) {
                        try {
                            pstmt_tOracleOutput_26.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_26){
globalMap.put("tOracleOutput_26_ERROR_MESSAGE",e_tOracleOutput_26.getMessage());
					        java.sql.SQLException ne_tOracleOutput_26 = e_tOracleOutput_26.getNextException(),sqle_tOracleOutput_26=null;
					    	String errormessage_tOracleOutput_26;
							if (ne_tOracleOutput_26 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_26 = new java.sql.SQLException(e_tOracleOutput_26.getMessage() + "\ncaused by: " + ne_tOracleOutput_26.getMessage(), ne_tOracleOutput_26.getSQLState(), ne_tOracleOutput_26.getErrorCode(), ne_tOracleOutput_26);
								errormessage_tOracleOutput_26 = sqle_tOracleOutput_26.getMessage();
							}else{
								errormessage_tOracleOutput_26 = e_tOracleOutput_26.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_26);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_26 = pstmt_tOracleOutput_26.getUpdateCount();
                            insertedCount_tOracleOutput_26
                        += (tmp_batchUpdateCount_tOracleOutput_26!=-1?tmp_batchUpdateCount_tOracleOutput_26:0);
                        rowsToCommitCount_tOracleOutput_26 += (tmp_batchUpdateCount_tOracleOutput_26!=-1?tmp_batchUpdateCount_tOracleOutput_26:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_26 != 0){
                    	
                    }
                    conn_tOracleOutput_26.commit();
                    if(rowsToCommitCount_tOracleOutput_26 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_26 = 0;
                    }
                    commitCounter_tOracleOutput_26=0;
                    	batchSizeCounter_tOracleOutput_26=0;
                }

 


	tos_count_tOracleOutput_26++;

/**
 * [tOracleOutput_26 main ] stop
 */
	
	/**
	 * [tOracleOutput_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_26";
	
	

 



/**
 * [tOracleOutput_26 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_26";
	
	

 



/**
 * [tOracleOutput_26 process_data_end ] stop
 */

} // End of branch "Inserta12"




// Start of branch "Elimina10"
if(Elimina10 != null) { 



	
	/**
	 * [tOracleOutput_27 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_27";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Elimina10"
						
						);
					}
					



        whetherReject_tOracleOutput_27 = false;
                    pstmt_tOracleOutput_27.setBigDecimal(1, Elimina10.UORG_ID);

                    if(Elimina10.NRADICADO == null) {
pstmt_tOracleOutput_27.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_27.setString(2, Elimina10.NRADICADO);
}

                    pstmt_tOracleOutput_27.setBigDecimal(3, Elimina10.TIEMPOS_ID);

                    pstmt_tOracleOutput_27.setBigDecimal(4, Elimina10.AUDITORES_ID);

                    pstmt_tOracleOutput_27.setBigDecimal(5, Elimina10.TINDICADORES_ID);

                pstmt_tOracleOutput_27.addBatch();
                nb_line_tOracleOutput_27++;
                batchSizeCounter_tOracleOutput_27++;
            if (batchSize_tOracleOutput_27 > 0 &&  batchSize_tOracleOutput_27 <= batchSizeCounter_tOracleOutput_27) {
                try {
                    pstmt_tOracleOutput_27.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_27){
globalMap.put("tOracleOutput_27_ERROR_MESSAGE",e_tOracleOutput_27.getMessage());
			        java.sql.SQLException ne_tOracleOutput_27 = e_tOracleOutput_27.getNextException(),sqle_tOracleOutput_27=null;
			    	String errormessage_tOracleOutput_27;
					if (ne_tOracleOutput_27 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_27 = new java.sql.SQLException(e_tOracleOutput_27.getMessage() + "\ncaused by: " + ne_tOracleOutput_27.getMessage(), ne_tOracleOutput_27.getSQLState(), ne_tOracleOutput_27.getErrorCode(), ne_tOracleOutput_27);
						errormessage_tOracleOutput_27 = sqle_tOracleOutput_27.getMessage();
					}else{
						errormessage_tOracleOutput_27 = e_tOracleOutput_27.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_27);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_27 = pstmt_tOracleOutput_27.getUpdateCount();
                    deletedCount_tOracleOutput_27
                += (tmp_batchUpdateCount_tOracleOutput_27!=-1?tmp_batchUpdateCount_tOracleOutput_27:0);
                rowsToCommitCount_tOracleOutput_27 += (tmp_batchUpdateCount_tOracleOutput_27!=-1?tmp_batchUpdateCount_tOracleOutput_27:0);
                batchSizeCounter_tOracleOutput_27 = 0;
            }
                commitCounter_tOracleOutput_27++;
                if(commitEvery_tOracleOutput_27 <= commitCounter_tOracleOutput_27) {
                    if(batchSizeCounter_tOracleOutput_27 > 0) {
                        try {
                            pstmt_tOracleOutput_27.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_27){
globalMap.put("tOracleOutput_27_ERROR_MESSAGE",e_tOracleOutput_27.getMessage());
					        java.sql.SQLException ne_tOracleOutput_27 = e_tOracleOutput_27.getNextException(),sqle_tOracleOutput_27=null;
					    	String errormessage_tOracleOutput_27;
							if (ne_tOracleOutput_27 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_27 = new java.sql.SQLException(e_tOracleOutput_27.getMessage() + "\ncaused by: " + ne_tOracleOutput_27.getMessage(), ne_tOracleOutput_27.getSQLState(), ne_tOracleOutput_27.getErrorCode(), ne_tOracleOutput_27);
								errormessage_tOracleOutput_27 = sqle_tOracleOutput_27.getMessage();
							}else{
								errormessage_tOracleOutput_27 = e_tOracleOutput_27.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_27);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_27 = pstmt_tOracleOutput_27.getUpdateCount();
                            deletedCount_tOracleOutput_27
                        += (tmp_batchUpdateCount_tOracleOutput_27!=-1?tmp_batchUpdateCount_tOracleOutput_27:0);
                        rowsToCommitCount_tOracleOutput_27 += (tmp_batchUpdateCount_tOracleOutput_27!=-1?tmp_batchUpdateCount_tOracleOutput_27:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_27 != 0){
                    	
                    }
                    conn_tOracleOutput_27.commit();
                    if(rowsToCommitCount_tOracleOutput_27 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_27 = 0;
                    }
                    commitCounter_tOracleOutput_27=0;
                    	batchSizeCounter_tOracleOutput_27=0;
                }

 


	tos_count_tOracleOutput_27++;

/**
 * [tOracleOutput_27 main ] stop
 */
	
	/**
	 * [tOracleOutput_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_27";
	
	

 



/**
 * [tOracleOutput_27 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_27";
	
	

 



/**
 * [tOracleOutput_27 process_data_end ] stop
 */

} // End of branch "Elimina10"




// Start of branch "Inserta13"
if(Inserta13 != null) { 



	
	/**
	 * [tOracleOutput_28 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_28";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta13"
						
						);
					}
					



        whetherReject_tOracleOutput_28 = false;
                        pstmt_tOracleOutput_28.setBigDecimal(1, Inserta13.UORG_ID);

                        if(Inserta13.NRADICADO == null) {
pstmt_tOracleOutput_28.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_28.setString(2, Inserta13.NRADICADO);
}

                        pstmt_tOracleOutput_28.setBigDecimal(3, Inserta13.TINDICADORES_ID);

                        pstmt_tOracleOutput_28.setBigDecimal(4, Inserta13.DENOMINADOR);

                        pstmt_tOracleOutput_28.setBigDecimal(5, Inserta13.NUMERADOR);

                        pstmt_tOracleOutput_28.setBigDecimal(6, Inserta13.INDICADOR);

                        pstmt_tOracleOutput_28.setBigDecimal(7, Inserta13.TIEMPOS_ID);

                        pstmt_tOracleOutput_28.setBigDecimal(8, Inserta13.AUDITORES_ID);

                pstmt_tOracleOutput_28.addBatch();
                nb_line_tOracleOutput_28++;
                batchSizeCounter_tOracleOutput_28++;
            if (batchSize_tOracleOutput_28 > 0 &&  batchSize_tOracleOutput_28 <= batchSizeCounter_tOracleOutput_28) {
                try {
                    pstmt_tOracleOutput_28.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_28){
globalMap.put("tOracleOutput_28_ERROR_MESSAGE",e_tOracleOutput_28.getMessage());
			        java.sql.SQLException ne_tOracleOutput_28 = e_tOracleOutput_28.getNextException(),sqle_tOracleOutput_28=null;
			    	String errormessage_tOracleOutput_28;
					if (ne_tOracleOutput_28 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_28 = new java.sql.SQLException(e_tOracleOutput_28.getMessage() + "\ncaused by: " + ne_tOracleOutput_28.getMessage(), ne_tOracleOutput_28.getSQLState(), ne_tOracleOutput_28.getErrorCode(), ne_tOracleOutput_28);
						errormessage_tOracleOutput_28 = sqle_tOracleOutput_28.getMessage();
					}else{
						errormessage_tOracleOutput_28 = e_tOracleOutput_28.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_28);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_28 = pstmt_tOracleOutput_28.getUpdateCount();
                    insertedCount_tOracleOutput_28
                += (tmp_batchUpdateCount_tOracleOutput_28!=-1?tmp_batchUpdateCount_tOracleOutput_28:0);
                rowsToCommitCount_tOracleOutput_28 += (tmp_batchUpdateCount_tOracleOutput_28!=-1?tmp_batchUpdateCount_tOracleOutput_28:0);
                batchSizeCounter_tOracleOutput_28 = 0;
            }
                commitCounter_tOracleOutput_28++;
                if(commitEvery_tOracleOutput_28 <= commitCounter_tOracleOutput_28) {
                    if(batchSizeCounter_tOracleOutput_28 > 0) {
                        try {
                            pstmt_tOracleOutput_28.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_28){
globalMap.put("tOracleOutput_28_ERROR_MESSAGE",e_tOracleOutput_28.getMessage());
					        java.sql.SQLException ne_tOracleOutput_28 = e_tOracleOutput_28.getNextException(),sqle_tOracleOutput_28=null;
					    	String errormessage_tOracleOutput_28;
							if (ne_tOracleOutput_28 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_28 = new java.sql.SQLException(e_tOracleOutput_28.getMessage() + "\ncaused by: " + ne_tOracleOutput_28.getMessage(), ne_tOracleOutput_28.getSQLState(), ne_tOracleOutput_28.getErrorCode(), ne_tOracleOutput_28);
								errormessage_tOracleOutput_28 = sqle_tOracleOutput_28.getMessage();
							}else{
								errormessage_tOracleOutput_28 = e_tOracleOutput_28.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_28);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_28 = pstmt_tOracleOutput_28.getUpdateCount();
                            insertedCount_tOracleOutput_28
                        += (tmp_batchUpdateCount_tOracleOutput_28!=-1?tmp_batchUpdateCount_tOracleOutput_28:0);
                        rowsToCommitCount_tOracleOutput_28 += (tmp_batchUpdateCount_tOracleOutput_28!=-1?tmp_batchUpdateCount_tOracleOutput_28:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_28 != 0){
                    	
                    }
                    conn_tOracleOutput_28.commit();
                    if(rowsToCommitCount_tOracleOutput_28 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_28 = 0;
                    }
                    commitCounter_tOracleOutput_28=0;
                    	batchSizeCounter_tOracleOutput_28=0;
                }

 


	tos_count_tOracleOutput_28++;

/**
 * [tOracleOutput_28 main ] stop
 */
	
	/**
	 * [tOracleOutput_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_28";
	
	

 



/**
 * [tOracleOutput_28 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_28";
	
	

 



/**
 * [tOracleOutput_28 process_data_end ] stop
 */

} // End of branch "Inserta13"




	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	

 



/**
 * [tMap_12 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 



/**
 * [tOracleInput_20 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_20 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

}
}finally{
	if (rs_tOracleInput_20 != null) {
		rs_tOracleInput_20.close();
	}
	if (stmt_tOracleInput_20 != null) {
		stmt_tOracleInput_20.close();
	}
}

globalMap.put("tOracleInput_20_NB_LINE",nb_line_tOracleInput_20);
 

ok_Hash.put("tOracleInput_20", true);
end_Hash.put("tOracleInput_20", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk18", 0, "ok");
				}
				tJava_11Process(globalMap);



/**
 * [tOracleInput_20 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row40 != null) {
						tHash_Lookup_row40.endGet();
					}
					globalMap.remove( "tHash_Lookup_row40" );

					
					
				
					if(tHash_Lookup_row41 != null) {
						tHash_Lookup_row41.endGet();
					}
					globalMap.remove( "tHash_Lookup_row41" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row39");
			  	}
			  	
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tOracleOutput_25 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_25";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_25 > 0) {
            try {
            	if (pstmt_tOracleOutput_25 != null) {
					
					pstmt_tOracleOutput_25.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_25){
globalMap.put("tOracleOutput_25_ERROR_MESSAGE",e_tOracleOutput_25.getMessage());
		        java.sql.SQLException ne_tOracleOutput_25 = e_tOracleOutput_25.getNextException(),sqle_tOracleOutput_25=null;
		    	String errormessage_tOracleOutput_25;
				if (ne_tOracleOutput_25 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_25 = new java.sql.SQLException(e_tOracleOutput_25.getMessage() + "\ncaused by: " + ne_tOracleOutput_25.getMessage(), ne_tOracleOutput_25.getSQLState(), ne_tOracleOutput_25.getErrorCode(), ne_tOracleOutput_25);
					errormessage_tOracleOutput_25 = sqle_tOracleOutput_25.getMessage();
				}else{
					errormessage_tOracleOutput_25 = e_tOracleOutput_25.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_25);
            	
        	}
        	if (pstmt_tOracleOutput_25 != null) {
            	tmp_batchUpdateCount_tOracleOutput_25 = pstmt_tOracleOutput_25.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_25
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_25!=-1?tmp_batchUpdateCount_tOracleOutput_25:0);
				rowsToCommitCount_tOracleOutput_25 += (tmp_batchUpdateCount_tOracleOutput_25!=-1?tmp_batchUpdateCount_tOracleOutput_25:0);
            }
        }
        if(pstmt_tOracleOutput_25 != null) {
			
				pstmt_tOracleOutput_25.close();
				resourceMap.remove("pstmt_tOracleOutput_25");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_25", true);
		if(commitCounter_tOracleOutput_25 > 0 && rowsToCommitCount_tOracleOutput_25 != 0) {
			
		}
		conn_tOracleOutput_25.commit();
		if(commitCounter_tOracleOutput_25 > 0 && rowsToCommitCount_tOracleOutput_25 != 0) {
			
			rowsToCommitCount_tOracleOutput_25 = 0;
		}
		commitCounter_tOracleOutput_25 = 0;
		
		
		conn_tOracleOutput_25 .close();
		
		resourceMap.put("finish_tOracleOutput_25", true);
   	

	
	nb_line_deleted_tOracleOutput_25=nb_line_deleted_tOracleOutput_25+ deletedCount_tOracleOutput_25;
	nb_line_update_tOracleOutput_25=nb_line_update_tOracleOutput_25 + updatedCount_tOracleOutput_25;
	nb_line_inserted_tOracleOutput_25=nb_line_inserted_tOracleOutput_25 + insertedCount_tOracleOutput_25;
	nb_line_rejected_tOracleOutput_25=nb_line_rejected_tOracleOutput_25 + rejectedCount_tOracleOutput_25;
	
        globalMap.put("tOracleOutput_25_NB_LINE",nb_line_tOracleOutput_25);
        globalMap.put("tOracleOutput_25_NB_LINE_UPDATED",nb_line_update_tOracleOutput_25);
        globalMap.put("tOracleOutput_25_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_25);
        globalMap.put("tOracleOutput_25_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_25);
        globalMap.put("tOracleOutput_25_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_25);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Elimina9");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_25", true);
end_Hash.put("tOracleOutput_25", System.currentTimeMillis());




/**
 * [tOracleOutput_25 end ] stop
 */




	
	/**
	 * [tOracleOutput_26 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_26";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_26 > 0) {
            try {
            	if (pstmt_tOracleOutput_26 != null) {
					
					pstmt_tOracleOutput_26.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_26){
globalMap.put("tOracleOutput_26_ERROR_MESSAGE",e_tOracleOutput_26.getMessage());
		        java.sql.SQLException ne_tOracleOutput_26 = e_tOracleOutput_26.getNextException(),sqle_tOracleOutput_26=null;
		    	String errormessage_tOracleOutput_26;
				if (ne_tOracleOutput_26 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_26 = new java.sql.SQLException(e_tOracleOutput_26.getMessage() + "\ncaused by: " + ne_tOracleOutput_26.getMessage(), ne_tOracleOutput_26.getSQLState(), ne_tOracleOutput_26.getErrorCode(), ne_tOracleOutput_26);
					errormessage_tOracleOutput_26 = sqle_tOracleOutput_26.getMessage();
				}else{
					errormessage_tOracleOutput_26 = e_tOracleOutput_26.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_26);
            	
        	}
        	if (pstmt_tOracleOutput_26 != null) {
            	tmp_batchUpdateCount_tOracleOutput_26 = pstmt_tOracleOutput_26.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_26
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_26!=-1?tmp_batchUpdateCount_tOracleOutput_26:0);
				rowsToCommitCount_tOracleOutput_26 += (tmp_batchUpdateCount_tOracleOutput_26!=-1?tmp_batchUpdateCount_tOracleOutput_26:0);
            }
        }
        if(pstmt_tOracleOutput_26 != null) {
			
				pstmt_tOracleOutput_26.close();
				resourceMap.remove("pstmt_tOracleOutput_26");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_26", true);
		if(commitCounter_tOracleOutput_26 > 0 && rowsToCommitCount_tOracleOutput_26 != 0) {
			
		}
		conn_tOracleOutput_26.commit();
		if(commitCounter_tOracleOutput_26 > 0 && rowsToCommitCount_tOracleOutput_26 != 0) {
			
			rowsToCommitCount_tOracleOutput_26 = 0;
		}
		commitCounter_tOracleOutput_26 = 0;
		
		
		conn_tOracleOutput_26 .close();
		
		resourceMap.put("finish_tOracleOutput_26", true);
   	

	
	nb_line_deleted_tOracleOutput_26=nb_line_deleted_tOracleOutput_26+ deletedCount_tOracleOutput_26;
	nb_line_update_tOracleOutput_26=nb_line_update_tOracleOutput_26 + updatedCount_tOracleOutput_26;
	nb_line_inserted_tOracleOutput_26=nb_line_inserted_tOracleOutput_26 + insertedCount_tOracleOutput_26;
	nb_line_rejected_tOracleOutput_26=nb_line_rejected_tOracleOutput_26 + rejectedCount_tOracleOutput_26;
	
        globalMap.put("tOracleOutput_26_NB_LINE",nb_line_tOracleOutput_26);
        globalMap.put("tOracleOutput_26_NB_LINE_UPDATED",nb_line_update_tOracleOutput_26);
        globalMap.put("tOracleOutput_26_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_26);
        globalMap.put("tOracleOutput_26_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_26);
        globalMap.put("tOracleOutput_26_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_26);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta12");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_26", true);
end_Hash.put("tOracleOutput_26", System.currentTimeMillis());




/**
 * [tOracleOutput_26 end ] stop
 */




	
	/**
	 * [tOracleOutput_27 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_27";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_27 > 0) {
            try {
            	if (pstmt_tOracleOutput_27 != null) {
					
					pstmt_tOracleOutput_27.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_27){
globalMap.put("tOracleOutput_27_ERROR_MESSAGE",e_tOracleOutput_27.getMessage());
		        java.sql.SQLException ne_tOracleOutput_27 = e_tOracleOutput_27.getNextException(),sqle_tOracleOutput_27=null;
		    	String errormessage_tOracleOutput_27;
				if (ne_tOracleOutput_27 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_27 = new java.sql.SQLException(e_tOracleOutput_27.getMessage() + "\ncaused by: " + ne_tOracleOutput_27.getMessage(), ne_tOracleOutput_27.getSQLState(), ne_tOracleOutput_27.getErrorCode(), ne_tOracleOutput_27);
					errormessage_tOracleOutput_27 = sqle_tOracleOutput_27.getMessage();
				}else{
					errormessage_tOracleOutput_27 = e_tOracleOutput_27.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_27);
            	
        	}
        	if (pstmt_tOracleOutput_27 != null) {
            	tmp_batchUpdateCount_tOracleOutput_27 = pstmt_tOracleOutput_27.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_27
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_27!=-1?tmp_batchUpdateCount_tOracleOutput_27:0);
				rowsToCommitCount_tOracleOutput_27 += (tmp_batchUpdateCount_tOracleOutput_27!=-1?tmp_batchUpdateCount_tOracleOutput_27:0);
            }
        }
        if(pstmt_tOracleOutput_27 != null) {
			
				pstmt_tOracleOutput_27.close();
				resourceMap.remove("pstmt_tOracleOutput_27");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_27", true);
		if(commitCounter_tOracleOutput_27 > 0 && rowsToCommitCount_tOracleOutput_27 != 0) {
			
		}
		conn_tOracleOutput_27.commit();
		if(commitCounter_tOracleOutput_27 > 0 && rowsToCommitCount_tOracleOutput_27 != 0) {
			
			rowsToCommitCount_tOracleOutput_27 = 0;
		}
		commitCounter_tOracleOutput_27 = 0;
		
		
		conn_tOracleOutput_27 .close();
		
		resourceMap.put("finish_tOracleOutput_27", true);
   	

	
	nb_line_deleted_tOracleOutput_27=nb_line_deleted_tOracleOutput_27+ deletedCount_tOracleOutput_27;
	nb_line_update_tOracleOutput_27=nb_line_update_tOracleOutput_27 + updatedCount_tOracleOutput_27;
	nb_line_inserted_tOracleOutput_27=nb_line_inserted_tOracleOutput_27 + insertedCount_tOracleOutput_27;
	nb_line_rejected_tOracleOutput_27=nb_line_rejected_tOracleOutput_27 + rejectedCount_tOracleOutput_27;
	
        globalMap.put("tOracleOutput_27_NB_LINE",nb_line_tOracleOutput_27);
        globalMap.put("tOracleOutput_27_NB_LINE_UPDATED",nb_line_update_tOracleOutput_27);
        globalMap.put("tOracleOutput_27_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_27);
        globalMap.put("tOracleOutput_27_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_27);
        globalMap.put("tOracleOutput_27_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_27);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Elimina10");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_27", true);
end_Hash.put("tOracleOutput_27", System.currentTimeMillis());




/**
 * [tOracleOutput_27 end ] stop
 */




	
	/**
	 * [tOracleOutput_28 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_28";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_28 > 0) {
            try {
            	if (pstmt_tOracleOutput_28 != null) {
					
					pstmt_tOracleOutput_28.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_28){
globalMap.put("tOracleOutput_28_ERROR_MESSAGE",e_tOracleOutput_28.getMessage());
		        java.sql.SQLException ne_tOracleOutput_28 = e_tOracleOutput_28.getNextException(),sqle_tOracleOutput_28=null;
		    	String errormessage_tOracleOutput_28;
				if (ne_tOracleOutput_28 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_28 = new java.sql.SQLException(e_tOracleOutput_28.getMessage() + "\ncaused by: " + ne_tOracleOutput_28.getMessage(), ne_tOracleOutput_28.getSQLState(), ne_tOracleOutput_28.getErrorCode(), ne_tOracleOutput_28);
					errormessage_tOracleOutput_28 = sqle_tOracleOutput_28.getMessage();
				}else{
					errormessage_tOracleOutput_28 = e_tOracleOutput_28.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_28);
            	
        	}
        	if (pstmt_tOracleOutput_28 != null) {
            	tmp_batchUpdateCount_tOracleOutput_28 = pstmt_tOracleOutput_28.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_28
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_28!=-1?tmp_batchUpdateCount_tOracleOutput_28:0);
				rowsToCommitCount_tOracleOutput_28 += (tmp_batchUpdateCount_tOracleOutput_28!=-1?tmp_batchUpdateCount_tOracleOutput_28:0);
            }
        }
        if(pstmt_tOracleOutput_28 != null) {
			
				pstmt_tOracleOutput_28.close();
				resourceMap.remove("pstmt_tOracleOutput_28");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_28", true);
		if(commitCounter_tOracleOutput_28 > 0 && rowsToCommitCount_tOracleOutput_28 != 0) {
			
		}
		conn_tOracleOutput_28.commit();
		if(commitCounter_tOracleOutput_28 > 0 && rowsToCommitCount_tOracleOutput_28 != 0) {
			
			rowsToCommitCount_tOracleOutput_28 = 0;
		}
		commitCounter_tOracleOutput_28 = 0;
		
		
		conn_tOracleOutput_28 .close();
		
		resourceMap.put("finish_tOracleOutput_28", true);
   	

	
	nb_line_deleted_tOracleOutput_28=nb_line_deleted_tOracleOutput_28+ deletedCount_tOracleOutput_28;
	nb_line_update_tOracleOutput_28=nb_line_update_tOracleOutput_28 + updatedCount_tOracleOutput_28;
	nb_line_inserted_tOracleOutput_28=nb_line_inserted_tOracleOutput_28 + insertedCount_tOracleOutput_28;
	nb_line_rejected_tOracleOutput_28=nb_line_rejected_tOracleOutput_28 + rejectedCount_tOracleOutput_28;
	
        globalMap.put("tOracleOutput_28_NB_LINE",nb_line_tOracleOutput_28);
        globalMap.put("tOracleOutput_28_NB_LINE_UPDATED",nb_line_update_tOracleOutput_28);
        globalMap.put("tOracleOutput_28_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_28);
        globalMap.put("tOracleOutput_28_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_28);
        globalMap.put("tOracleOutput_28_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_28);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta13");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_28", true);
end_Hash.put("tOracleOutput_28", System.currentTimeMillis());




/**
 * [tOracleOutput_28 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_20:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tOracleInput_22Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_12"
					     			globalMap.remove("tHash_Lookup_row40"); 
				     			
					     			//free memory for "tMap_12"
					     			globalMap.remove("tHash_Lookup_row41"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_20 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 



/**
 * [tOracleInput_20 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tOracleOutput_25 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_25";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_25") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_25 = null;
                if ((pstmtToClose_tOracleOutput_25 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_25")) != null) {
                    pstmtToClose_tOracleOutput_25.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_25") == null){
            java.sql.Connection ctn_tOracleOutput_25 = null;
            if((ctn_tOracleOutput_25 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_25")) != null){
                try {
                    ctn_tOracleOutput_25.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_25) {
                    String errorMessage_tOracleOutput_25 = "failed to close the connection in tOracleOutput_25 :" + sqlEx_tOracleOutput_25.getMessage();
                    System.err.println(errorMessage_tOracleOutput_25);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_25 finally ] stop
 */




	
	/**
	 * [tOracleOutput_26 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_26";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_26") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_26 = null;
                if ((pstmtToClose_tOracleOutput_26 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_26")) != null) {
                    pstmtToClose_tOracleOutput_26.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_26") == null){
            java.sql.Connection ctn_tOracleOutput_26 = null;
            if((ctn_tOracleOutput_26 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_26")) != null){
                try {
                    ctn_tOracleOutput_26.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_26) {
                    String errorMessage_tOracleOutput_26 = "failed to close the connection in tOracleOutput_26 :" + sqlEx_tOracleOutput_26.getMessage();
                    System.err.println(errorMessage_tOracleOutput_26);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_26 finally ] stop
 */




	
	/**
	 * [tOracleOutput_27 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_27";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_27") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_27 = null;
                if ((pstmtToClose_tOracleOutput_27 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_27")) != null) {
                    pstmtToClose_tOracleOutput_27.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_27") == null){
            java.sql.Connection ctn_tOracleOutput_27 = null;
            if((ctn_tOracleOutput_27 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_27")) != null){
                try {
                    ctn_tOracleOutput_27.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_27) {
                    String errorMessage_tOracleOutput_27 = "failed to close the connection in tOracleOutput_27 :" + sqlEx_tOracleOutput_27.getMessage();
                    System.err.println(errorMessage_tOracleOutput_27);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_27 finally ] stop
 */




	
	/**
	 * [tOracleOutput_28 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_28";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_28") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_28 = null;
                if ((pstmtToClose_tOracleOutput_28 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_28")) != null) {
                    pstmtToClose_tOracleOutput_28.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_28") == null){
            java.sql.Connection ctn_tOracleOutput_28 = null;
            if((ctn_tOracleOutput_28 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_28")) != null){
                try {
                    ctn_tOracleOutput_28.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_28) {
                    String errorMessage_tOracleOutput_28 = "failed to close the connection in tOracleOutput_28 :" + sqlEx_tOracleOutput_28.getMessage();
                    System.err.println(errorMessage_tOracleOutput_28);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_28 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_20_SUBPROCESS_STATE", 1);
	}
	


public static class Elimina11Struct implements routines.system.IPersistableRow<Elimina11Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NRADICADO;

				public String getNRADICADO () {
					return this.NRADICADO;
				}

				public Boolean NRADICADOIsNullable(){
				    return true;
				}
				public Boolean NRADICADOIsKey(){
				    return true;
				}
				public Integer NRADICADOLength(){
				    return 100;
				}
				public Integer NRADICADOPrecision(){
				    return 0;
				}
				public String NRADICADODefault(){
				
					return null;
				
				}
				public String NRADICADOComment(){
				
				    return "";
				
				}
				public String NRADICADOPattern(){
				
					return "";
				
				}
				public String NRADICADOOriginalDbColumnName(){
				
					return "NRADICADO";
				
				}

				
			    public BigDecimal TPAGOS_ID;

				public BigDecimal getTPAGOS_ID () {
					return this.TPAGOS_ID;
				}

				public Boolean TPAGOS_IDIsNullable(){
				    return false;
				}
				public Boolean TPAGOS_IDIsKey(){
				    return true;
				}
				public Integer TPAGOS_IDLength(){
				    return 0;
				}
				public Integer TPAGOS_IDPrecision(){
				    return null;
				}
				public String TPAGOS_IDDefault(){
				
					return "";
				
				}
				public String TPAGOS_IDComment(){
				
				    return "";
				
				}
				public String TPAGOS_IDPattern(){
				
					return "";
				
				}
				public String TPAGOS_IDOriginalDbColumnName(){
				
					return "TPAGOS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return true;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return true;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.NRADICADO == null) ? 0 : this.NRADICADO.hashCode());
					
						result = prime * result + ((this.TPAGOS_ID == null) ? 0 : this.TPAGOS_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
						result = prime * result + ((this.TINDICADORES_ID == null) ? 0 : this.TINDICADORES_ID.hashCode());
					
						result = prime * result + ((this.PRESTADOR_ID == null) ? 0 : this.PRESTADOR_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Elimina11Struct other = (Elimina11Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.NRADICADO == null) {
							if (other.NRADICADO != null)
								return false;
						
						} else if (!this.NRADICADO.equals(other.NRADICADO))
						
							return false;
					
						if (this.TPAGOS_ID == null) {
							if (other.TPAGOS_ID != null)
								return false;
						
						} else if (!this.TPAGOS_ID.equals(other.TPAGOS_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					
						if (this.TINDICADORES_ID == null) {
							if (other.TINDICADORES_ID != null)
								return false;
						
						} else if (!this.TINDICADORES_ID.equals(other.TINDICADORES_ID))
						
							return false;
					
						if (this.PRESTADOR_ID == null) {
							if (other.PRESTADOR_ID != null)
								return false;
						
						} else if (!this.PRESTADOR_ID.equals(other.PRESTADOR_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Elimina11Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.NRADICADO = this.NRADICADO;
	            other.TPAGOS_ID = this.TPAGOS_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            other.TINDICADORES_ID = this.TINDICADORES_ID;
	            other.PRESTADOR_ID = this.PRESTADOR_ID;
	            
	}

	public void copyKeysDataTo(Elimina11Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.NRADICADO = this.NRADICADO;
	            	other.TPAGOS_ID = this.TPAGOS_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	other.TINDICADORES_ID = this.TINDICADORES_ID;
	            	other.PRESTADOR_ID = this.PRESTADOR_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NRADICADO="+NRADICADO);
		sb.append(",TPAGOS_ID="+String.valueOf(TPAGOS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Elimina11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NRADICADO, other.NRADICADO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TPAGOS_ID, other.TPAGOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TINDICADORES_ID, other.TINDICADORES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PRESTADOR_ID, other.PRESTADOR_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Inserta14Struct implements routines.system.IPersistableRow<Inserta14Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NRADICADO;

				public String getNRADICADO () {
					return this.NRADICADO;
				}

				public Boolean NRADICADOIsNullable(){
				    return true;
				}
				public Boolean NRADICADOIsKey(){
				    return false;
				}
				public Integer NRADICADOLength(){
				    return 100;
				}
				public Integer NRADICADOPrecision(){
				    return 0;
				}
				public String NRADICADODefault(){
				
					return null;
				
				}
				public String NRADICADOComment(){
				
				    return "";
				
				}
				public String NRADICADOPattern(){
				
					return "";
				
				}
				public String NRADICADOOriginalDbColumnName(){
				
					return "NRADICADO";
				
				}

				
			    public BigDecimal ETAPA;

				public BigDecimal getETAPA () {
					return this.ETAPA;
				}

				public Boolean ETAPAIsNullable(){
				    return false;
				}
				public Boolean ETAPAIsKey(){
				    return false;
				}
				public Integer ETAPALength(){
				    return 0;
				}
				public Integer ETAPAPrecision(){
				    return null;
				}
				public String ETAPADefault(){
				
					return "";
				
				}
				public String ETAPAComment(){
				
				    return "";
				
				}
				public String ETAPAPattern(){
				
					return "";
				
				}
				public String ETAPAOriginalDbColumnName(){
				
					return "ETAPA";
				
				}

				
			    public BigDecimal TPAGOS_ID;

				public BigDecimal getTPAGOS_ID () {
					return this.TPAGOS_ID;
				}

				public Boolean TPAGOS_IDIsNullable(){
				    return false;
				}
				public Boolean TPAGOS_IDIsKey(){
				    return false;
				}
				public Integer TPAGOS_IDLength(){
				    return 0;
				}
				public Integer TPAGOS_IDPrecision(){
				    return null;
				}
				public String TPAGOS_IDDefault(){
				
					return "";
				
				}
				public String TPAGOS_IDComment(){
				
				    return "";
				
				}
				public String TPAGOS_IDPattern(){
				
					return "";
				
				}
				public String TPAGOS_IDOriginalDbColumnName(){
				
					return "TPAGOS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return false;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal NUMERADOR;

				public BigDecimal getNUMERADOR () {
					return this.NUMERADOR;
				}

				public Boolean NUMERADORIsNullable(){
				    return true;
				}
				public Boolean NUMERADORIsKey(){
				    return false;
				}
				public Integer NUMERADORLength(){
				    return 0;
				}
				public Integer NUMERADORPrecision(){
				    return 0;
				}
				public String NUMERADORDefault(){
				
					return "";
				
				}
				public String NUMERADORComment(){
				
				    return "";
				
				}
				public String NUMERADORPattern(){
				
					return "";
				
				}
				public String NUMERADOROriginalDbColumnName(){
				
					return "NUMERADOR";
				
				}

				
			    public BigDecimal DENOMINADOR;

				public BigDecimal getDENOMINADOR () {
					return this.DENOMINADOR;
				}

				public Boolean DENOMINADORIsNullable(){
				    return true;
				}
				public Boolean DENOMINADORIsKey(){
				    return false;
				}
				public Integer DENOMINADORLength(){
				    return 0;
				}
				public Integer DENOMINADORPrecision(){
				    return 0;
				}
				public String DENOMINADORDefault(){
				
					return "";
				
				}
				public String DENOMINADORComment(){
				
				    return "";
				
				}
				public String DENOMINADORPattern(){
				
					return "";
				
				}
				public String DENOMINADOROriginalDbColumnName(){
				
					return "DENOMINADOR";
				
				}

				
			    public BigDecimal INDICADOR;

				public BigDecimal getINDICADOR () {
					return this.INDICADOR;
				}

				public Boolean INDICADORIsNullable(){
				    return true;
				}
				public Boolean INDICADORIsKey(){
				    return false;
				}
				public Integer INDICADORLength(){
				    return 0;
				}
				public Integer INDICADORPrecision(){
				    return 0;
				}
				public String INDICADORDefault(){
				
					return "";
				
				}
				public String INDICADORComment(){
				
				    return "";
				
				}
				public String INDICADORPattern(){
				
					return "";
				
				}
				public String INDICADOROriginalDbColumnName(){
				
					return "INDICADOR";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.ETAPA = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.ETAPA = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NRADICADO="+NRADICADO);
		sb.append(",ETAPA="+String.valueOf(ETAPA));
		sb.append(",TPAGOS_ID="+String.valueOf(TPAGOS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",NUMERADOR="+String.valueOf(NUMERADOR));
		sb.append(",DENOMINADOR="+String.valueOf(DENOMINADOR));
		sb.append(",INDICADOR="+String.valueOf(INDICADOR));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Elimina12Struct implements routines.system.IPersistableRow<Elimina12Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NRADICADO;

				public String getNRADICADO () {
					return this.NRADICADO;
				}

				public Boolean NRADICADOIsNullable(){
				    return true;
				}
				public Boolean NRADICADOIsKey(){
				    return true;
				}
				public Integer NRADICADOLength(){
				    return 100;
				}
				public Integer NRADICADOPrecision(){
				    return 0;
				}
				public String NRADICADODefault(){
				
					return null;
				
				}
				public String NRADICADOComment(){
				
				    return "";
				
				}
				public String NRADICADOPattern(){
				
					return "";
				
				}
				public String NRADICADOOriginalDbColumnName(){
				
					return "NRADICADO";
				
				}

				
			    public BigDecimal TPAGOS_ID;

				public BigDecimal getTPAGOS_ID () {
					return this.TPAGOS_ID;
				}

				public Boolean TPAGOS_IDIsNullable(){
				    return false;
				}
				public Boolean TPAGOS_IDIsKey(){
				    return true;
				}
				public Integer TPAGOS_IDLength(){
				    return 0;
				}
				public Integer TPAGOS_IDPrecision(){
				    return null;
				}
				public String TPAGOS_IDDefault(){
				
					return "";
				
				}
				public String TPAGOS_IDComment(){
				
				    return "";
				
				}
				public String TPAGOS_IDPattern(){
				
					return "";
				
				}
				public String TPAGOS_IDOriginalDbColumnName(){
				
					return "TPAGOS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return true;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return true;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.NRADICADO == null) ? 0 : this.NRADICADO.hashCode());
					
						result = prime * result + ((this.TPAGOS_ID == null) ? 0 : this.TPAGOS_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
						result = prime * result + ((this.TINDICADORES_ID == null) ? 0 : this.TINDICADORES_ID.hashCode());
					
						result = prime * result + ((this.PRESTADOR_ID == null) ? 0 : this.PRESTADOR_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Elimina12Struct other = (Elimina12Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.NRADICADO == null) {
							if (other.NRADICADO != null)
								return false;
						
						} else if (!this.NRADICADO.equals(other.NRADICADO))
						
							return false;
					
						if (this.TPAGOS_ID == null) {
							if (other.TPAGOS_ID != null)
								return false;
						
						} else if (!this.TPAGOS_ID.equals(other.TPAGOS_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					
						if (this.TINDICADORES_ID == null) {
							if (other.TINDICADORES_ID != null)
								return false;
						
						} else if (!this.TINDICADORES_ID.equals(other.TINDICADORES_ID))
						
							return false;
					
						if (this.PRESTADOR_ID == null) {
							if (other.PRESTADOR_ID != null)
								return false;
						
						} else if (!this.PRESTADOR_ID.equals(other.PRESTADOR_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Elimina12Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.NRADICADO = this.NRADICADO;
	            other.TPAGOS_ID = this.TPAGOS_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            other.TINDICADORES_ID = this.TINDICADORES_ID;
	            other.PRESTADOR_ID = this.PRESTADOR_ID;
	            
	}

	public void copyKeysDataTo(Elimina12Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.NRADICADO = this.NRADICADO;
	            	other.TPAGOS_ID = this.TPAGOS_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	other.TINDICADORES_ID = this.TINDICADORES_ID;
	            	other.PRESTADOR_ID = this.PRESTADOR_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NRADICADO="+NRADICADO);
		sb.append(",TPAGOS_ID="+String.valueOf(TPAGOS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Elimina12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NRADICADO, other.NRADICADO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TPAGOS_ID, other.TPAGOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TINDICADORES_ID, other.TINDICADORES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PRESTADOR_ID, other.PRESTADOR_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Inserta15Struct implements routines.system.IPersistableRow<Inserta15Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NRADICADO;

				public String getNRADICADO () {
					return this.NRADICADO;
				}

				public Boolean NRADICADOIsNullable(){
				    return true;
				}
				public Boolean NRADICADOIsKey(){
				    return false;
				}
				public Integer NRADICADOLength(){
				    return 100;
				}
				public Integer NRADICADOPrecision(){
				    return 0;
				}
				public String NRADICADODefault(){
				
					return null;
				
				}
				public String NRADICADOComment(){
				
				    return "";
				
				}
				public String NRADICADOPattern(){
				
					return "";
				
				}
				public String NRADICADOOriginalDbColumnName(){
				
					return "NRADICADO";
				
				}

				
			    public BigDecimal ETAPA;

				public BigDecimal getETAPA () {
					return this.ETAPA;
				}

				public Boolean ETAPAIsNullable(){
				    return false;
				}
				public Boolean ETAPAIsKey(){
				    return false;
				}
				public Integer ETAPALength(){
				    return 0;
				}
				public Integer ETAPAPrecision(){
				    return null;
				}
				public String ETAPADefault(){
				
					return "";
				
				}
				public String ETAPAComment(){
				
				    return "";
				
				}
				public String ETAPAPattern(){
				
					return "";
				
				}
				public String ETAPAOriginalDbColumnName(){
				
					return "ETAPA";
				
				}

				
			    public BigDecimal TPAGOS_ID;

				public BigDecimal getTPAGOS_ID () {
					return this.TPAGOS_ID;
				}

				public Boolean TPAGOS_IDIsNullable(){
				    return false;
				}
				public Boolean TPAGOS_IDIsKey(){
				    return false;
				}
				public Integer TPAGOS_IDLength(){
				    return 0;
				}
				public Integer TPAGOS_IDPrecision(){
				    return null;
				}
				public String TPAGOS_IDDefault(){
				
					return "";
				
				}
				public String TPAGOS_IDComment(){
				
				    return "";
				
				}
				public String TPAGOS_IDPattern(){
				
					return "";
				
				}
				public String TPAGOS_IDOriginalDbColumnName(){
				
					return "TPAGOS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return false;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal NUMERADOR;

				public BigDecimal getNUMERADOR () {
					return this.NUMERADOR;
				}

				public Boolean NUMERADORIsNullable(){
				    return true;
				}
				public Boolean NUMERADORIsKey(){
				    return false;
				}
				public Integer NUMERADORLength(){
				    return 0;
				}
				public Integer NUMERADORPrecision(){
				    return 0;
				}
				public String NUMERADORDefault(){
				
					return "";
				
				}
				public String NUMERADORComment(){
				
				    return "";
				
				}
				public String NUMERADORPattern(){
				
					return "";
				
				}
				public String NUMERADOROriginalDbColumnName(){
				
					return "NUMERADOR";
				
				}

				
			    public BigDecimal DENOMINADOR;

				public BigDecimal getDENOMINADOR () {
					return this.DENOMINADOR;
				}

				public Boolean DENOMINADORIsNullable(){
				    return true;
				}
				public Boolean DENOMINADORIsKey(){
				    return false;
				}
				public Integer DENOMINADORLength(){
				    return 0;
				}
				public Integer DENOMINADORPrecision(){
				    return 0;
				}
				public String DENOMINADORDefault(){
				
					return "";
				
				}
				public String DENOMINADORComment(){
				
				    return "";
				
				}
				public String DENOMINADORPattern(){
				
					return "";
				
				}
				public String DENOMINADOROriginalDbColumnName(){
				
					return "DENOMINADOR";
				
				}

				
			    public BigDecimal INDICADOR;

				public BigDecimal getINDICADOR () {
					return this.INDICADOR;
				}

				public Boolean INDICADORIsNullable(){
				    return true;
				}
				public Boolean INDICADORIsKey(){
				    return false;
				}
				public Integer INDICADORLength(){
				    return 0;
				}
				public Integer INDICADORPrecision(){
				    return 0;
				}
				public String INDICADORDefault(){
				
					return "";
				
				}
				public String INDICADORComment(){
				
				    return "";
				
				}
				public String INDICADORPattern(){
				
					return "";
				
				}
				public String INDICADOROriginalDbColumnName(){
				
					return "INDICADOR";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.ETAPA = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.ETAPA = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NRADICADO="+NRADICADO);
		sb.append(",ETAPA="+String.valueOf(ETAPA));
		sb.append(",TPAGOS_ID="+String.valueOf(TPAGOS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",NUMERADOR="+String.valueOf(NUMERADOR));
		sb.append(",DENOMINADOR="+String.valueOf(DENOMINADOR));
		sb.append(",INDICADOR="+String.valueOf(INDICADOR));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Elimina13Struct implements routines.system.IPersistableRow<Elimina13Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NRADICADO;

				public String getNRADICADO () {
					return this.NRADICADO;
				}

				public Boolean NRADICADOIsNullable(){
				    return true;
				}
				public Boolean NRADICADOIsKey(){
				    return true;
				}
				public Integer NRADICADOLength(){
				    return 100;
				}
				public Integer NRADICADOPrecision(){
				    return 0;
				}
				public String NRADICADODefault(){
				
					return null;
				
				}
				public String NRADICADOComment(){
				
				    return "";
				
				}
				public String NRADICADOPattern(){
				
					return "";
				
				}
				public String NRADICADOOriginalDbColumnName(){
				
					return "NRADICADO";
				
				}

				
			    public BigDecimal TPAGOS_ID;

				public BigDecimal getTPAGOS_ID () {
					return this.TPAGOS_ID;
				}

				public Boolean TPAGOS_IDIsNullable(){
				    return false;
				}
				public Boolean TPAGOS_IDIsKey(){
				    return true;
				}
				public Integer TPAGOS_IDLength(){
				    return 0;
				}
				public Integer TPAGOS_IDPrecision(){
				    return null;
				}
				public String TPAGOS_IDDefault(){
				
					return "";
				
				}
				public String TPAGOS_IDComment(){
				
				    return "";
				
				}
				public String TPAGOS_IDPattern(){
				
					return "";
				
				}
				public String TPAGOS_IDOriginalDbColumnName(){
				
					return "TPAGOS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return true;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return true;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.NRADICADO == null) ? 0 : this.NRADICADO.hashCode());
					
						result = prime * result + ((this.TPAGOS_ID == null) ? 0 : this.TPAGOS_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
						result = prime * result + ((this.TINDICADORES_ID == null) ? 0 : this.TINDICADORES_ID.hashCode());
					
						result = prime * result + ((this.PRESTADOR_ID == null) ? 0 : this.PRESTADOR_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Elimina13Struct other = (Elimina13Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.NRADICADO == null) {
							if (other.NRADICADO != null)
								return false;
						
						} else if (!this.NRADICADO.equals(other.NRADICADO))
						
							return false;
					
						if (this.TPAGOS_ID == null) {
							if (other.TPAGOS_ID != null)
								return false;
						
						} else if (!this.TPAGOS_ID.equals(other.TPAGOS_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					
						if (this.TINDICADORES_ID == null) {
							if (other.TINDICADORES_ID != null)
								return false;
						
						} else if (!this.TINDICADORES_ID.equals(other.TINDICADORES_ID))
						
							return false;
					
						if (this.PRESTADOR_ID == null) {
							if (other.PRESTADOR_ID != null)
								return false;
						
						} else if (!this.PRESTADOR_ID.equals(other.PRESTADOR_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Elimina13Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.NRADICADO = this.NRADICADO;
	            other.TPAGOS_ID = this.TPAGOS_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            other.TINDICADORES_ID = this.TINDICADORES_ID;
	            other.PRESTADOR_ID = this.PRESTADOR_ID;
	            
	}

	public void copyKeysDataTo(Elimina13Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.NRADICADO = this.NRADICADO;
	            	other.TPAGOS_ID = this.TPAGOS_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	other.TINDICADORES_ID = this.TINDICADORES_ID;
	            	other.PRESTADOR_ID = this.PRESTADOR_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NRADICADO="+NRADICADO);
		sb.append(",TPAGOS_ID="+String.valueOf(TPAGOS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Elimina13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NRADICADO, other.NRADICADO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TPAGOS_ID, other.TPAGOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TINDICADORES_ID, other.TINDICADORES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PRESTADOR_ID, other.PRESTADOR_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Inserta16Struct implements routines.system.IPersistableRow<Inserta16Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NRADICADO;

				public String getNRADICADO () {
					return this.NRADICADO;
				}

				public Boolean NRADICADOIsNullable(){
				    return true;
				}
				public Boolean NRADICADOIsKey(){
				    return false;
				}
				public Integer NRADICADOLength(){
				    return 100;
				}
				public Integer NRADICADOPrecision(){
				    return 0;
				}
				public String NRADICADODefault(){
				
					return null;
				
				}
				public String NRADICADOComment(){
				
				    return "";
				
				}
				public String NRADICADOPattern(){
				
					return "";
				
				}
				public String NRADICADOOriginalDbColumnName(){
				
					return "NRADICADO";
				
				}

				
			    public BigDecimal ETAPA;

				public BigDecimal getETAPA () {
					return this.ETAPA;
				}

				public Boolean ETAPAIsNullable(){
				    return false;
				}
				public Boolean ETAPAIsKey(){
				    return false;
				}
				public Integer ETAPALength(){
				    return 0;
				}
				public Integer ETAPAPrecision(){
				    return null;
				}
				public String ETAPADefault(){
				
					return "";
				
				}
				public String ETAPAComment(){
				
				    return "";
				
				}
				public String ETAPAPattern(){
				
					return "";
				
				}
				public String ETAPAOriginalDbColumnName(){
				
					return "ETAPA";
				
				}

				
			    public BigDecimal TPAGOS_ID;

				public BigDecimal getTPAGOS_ID () {
					return this.TPAGOS_ID;
				}

				public Boolean TPAGOS_IDIsNullable(){
				    return false;
				}
				public Boolean TPAGOS_IDIsKey(){
				    return false;
				}
				public Integer TPAGOS_IDLength(){
				    return 0;
				}
				public Integer TPAGOS_IDPrecision(){
				    return null;
				}
				public String TPAGOS_IDDefault(){
				
					return "";
				
				}
				public String TPAGOS_IDComment(){
				
				    return "";
				
				}
				public String TPAGOS_IDPattern(){
				
					return "";
				
				}
				public String TPAGOS_IDOriginalDbColumnName(){
				
					return "TPAGOS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return false;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal NUMERADOR;

				public BigDecimal getNUMERADOR () {
					return this.NUMERADOR;
				}

				public Boolean NUMERADORIsNullable(){
				    return true;
				}
				public Boolean NUMERADORIsKey(){
				    return false;
				}
				public Integer NUMERADORLength(){
				    return 0;
				}
				public Integer NUMERADORPrecision(){
				    return 0;
				}
				public String NUMERADORDefault(){
				
					return "";
				
				}
				public String NUMERADORComment(){
				
				    return "";
				
				}
				public String NUMERADORPattern(){
				
					return "";
				
				}
				public String NUMERADOROriginalDbColumnName(){
				
					return "NUMERADOR";
				
				}

				
			    public BigDecimal DENOMINADOR;

				public BigDecimal getDENOMINADOR () {
					return this.DENOMINADOR;
				}

				public Boolean DENOMINADORIsNullable(){
				    return true;
				}
				public Boolean DENOMINADORIsKey(){
				    return false;
				}
				public Integer DENOMINADORLength(){
				    return 0;
				}
				public Integer DENOMINADORPrecision(){
				    return 0;
				}
				public String DENOMINADORDefault(){
				
					return "";
				
				}
				public String DENOMINADORComment(){
				
				    return "";
				
				}
				public String DENOMINADORPattern(){
				
					return "";
				
				}
				public String DENOMINADOROriginalDbColumnName(){
				
					return "DENOMINADOR";
				
				}

				
			    public BigDecimal INDICADOR;

				public BigDecimal getINDICADOR () {
					return this.INDICADOR;
				}

				public Boolean INDICADORIsNullable(){
				    return true;
				}
				public Boolean INDICADORIsKey(){
				    return false;
				}
				public Integer INDICADORLength(){
				    return 0;
				}
				public Integer INDICADORPrecision(){
				    return 0;
				}
				public String INDICADORDefault(){
				
					return "";
				
				}
				public String INDICADORComment(){
				
				    return "";
				
				}
				public String INDICADORPattern(){
				
					return "";
				
				}
				public String INDICADOROriginalDbColumnName(){
				
					return "INDICADOR";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.ETAPA = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.ETAPA = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NRADICADO="+NRADICADO);
		sb.append(",ETAPA="+String.valueOf(ETAPA));
		sb.append(",TPAGOS_ID="+String.valueOf(TPAGOS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",NUMERADOR="+String.valueOf(NUMERADOR));
		sb.append(",DENOMINADOR="+String.valueOf(DENOMINADOR));
		sb.append(",INDICADOR="+String.valueOf(INDICADOR));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Elimina14Struct implements routines.system.IPersistableRow<Elimina14Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NRADICADO;

				public String getNRADICADO () {
					return this.NRADICADO;
				}

				public Boolean NRADICADOIsNullable(){
				    return true;
				}
				public Boolean NRADICADOIsKey(){
				    return true;
				}
				public Integer NRADICADOLength(){
				    return 100;
				}
				public Integer NRADICADOPrecision(){
				    return 0;
				}
				public String NRADICADODefault(){
				
					return null;
				
				}
				public String NRADICADOComment(){
				
				    return "";
				
				}
				public String NRADICADOPattern(){
				
					return "";
				
				}
				public String NRADICADOOriginalDbColumnName(){
				
					return "NRADICADO";
				
				}

				
			    public BigDecimal TPAGOS_ID;

				public BigDecimal getTPAGOS_ID () {
					return this.TPAGOS_ID;
				}

				public Boolean TPAGOS_IDIsNullable(){
				    return false;
				}
				public Boolean TPAGOS_IDIsKey(){
				    return true;
				}
				public Integer TPAGOS_IDLength(){
				    return 0;
				}
				public Integer TPAGOS_IDPrecision(){
				    return null;
				}
				public String TPAGOS_IDDefault(){
				
					return "";
				
				}
				public String TPAGOS_IDComment(){
				
				    return "";
				
				}
				public String TPAGOS_IDPattern(){
				
					return "";
				
				}
				public String TPAGOS_IDOriginalDbColumnName(){
				
					return "TPAGOS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return true;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return true;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.NRADICADO == null) ? 0 : this.NRADICADO.hashCode());
					
						result = prime * result + ((this.TPAGOS_ID == null) ? 0 : this.TPAGOS_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
						result = prime * result + ((this.TINDICADORES_ID == null) ? 0 : this.TINDICADORES_ID.hashCode());
					
						result = prime * result + ((this.PRESTADOR_ID == null) ? 0 : this.PRESTADOR_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Elimina14Struct other = (Elimina14Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.NRADICADO == null) {
							if (other.NRADICADO != null)
								return false;
						
						} else if (!this.NRADICADO.equals(other.NRADICADO))
						
							return false;
					
						if (this.TPAGOS_ID == null) {
							if (other.TPAGOS_ID != null)
								return false;
						
						} else if (!this.TPAGOS_ID.equals(other.TPAGOS_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					
						if (this.TINDICADORES_ID == null) {
							if (other.TINDICADORES_ID != null)
								return false;
						
						} else if (!this.TINDICADORES_ID.equals(other.TINDICADORES_ID))
						
							return false;
					
						if (this.PRESTADOR_ID == null) {
							if (other.PRESTADOR_ID != null)
								return false;
						
						} else if (!this.PRESTADOR_ID.equals(other.PRESTADOR_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Elimina14Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.NRADICADO = this.NRADICADO;
	            other.TPAGOS_ID = this.TPAGOS_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            other.TINDICADORES_ID = this.TINDICADORES_ID;
	            other.PRESTADOR_ID = this.PRESTADOR_ID;
	            
	}

	public void copyKeysDataTo(Elimina14Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.NRADICADO = this.NRADICADO;
	            	other.TPAGOS_ID = this.TPAGOS_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	other.TINDICADORES_ID = this.TINDICADORES_ID;
	            	other.PRESTADOR_ID = this.PRESTADOR_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NRADICADO="+NRADICADO);
		sb.append(",TPAGOS_ID="+String.valueOf(TPAGOS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Elimina14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NRADICADO, other.NRADICADO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TPAGOS_ID, other.TPAGOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TINDICADORES_ID, other.TINDICADORES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PRESTADOR_ID, other.PRESTADOR_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Inserta17Struct implements routines.system.IPersistableRow<Inserta17Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NRADICADO;

				public String getNRADICADO () {
					return this.NRADICADO;
				}

				public Boolean NRADICADOIsNullable(){
				    return true;
				}
				public Boolean NRADICADOIsKey(){
				    return false;
				}
				public Integer NRADICADOLength(){
				    return 100;
				}
				public Integer NRADICADOPrecision(){
				    return 0;
				}
				public String NRADICADODefault(){
				
					return null;
				
				}
				public String NRADICADOComment(){
				
				    return "";
				
				}
				public String NRADICADOPattern(){
				
					return "";
				
				}
				public String NRADICADOOriginalDbColumnName(){
				
					return "NRADICADO";
				
				}

				
			    public BigDecimal ETAPA;

				public BigDecimal getETAPA () {
					return this.ETAPA;
				}

				public Boolean ETAPAIsNullable(){
				    return false;
				}
				public Boolean ETAPAIsKey(){
				    return false;
				}
				public Integer ETAPALength(){
				    return 0;
				}
				public Integer ETAPAPrecision(){
				    return null;
				}
				public String ETAPADefault(){
				
					return "";
				
				}
				public String ETAPAComment(){
				
				    return "";
				
				}
				public String ETAPAPattern(){
				
					return "";
				
				}
				public String ETAPAOriginalDbColumnName(){
				
					return "ETAPA";
				
				}

				
			    public BigDecimal TPAGOS_ID;

				public BigDecimal getTPAGOS_ID () {
					return this.TPAGOS_ID;
				}

				public Boolean TPAGOS_IDIsNullable(){
				    return false;
				}
				public Boolean TPAGOS_IDIsKey(){
				    return false;
				}
				public Integer TPAGOS_IDLength(){
				    return 0;
				}
				public Integer TPAGOS_IDPrecision(){
				    return null;
				}
				public String TPAGOS_IDDefault(){
				
					return "";
				
				}
				public String TPAGOS_IDComment(){
				
				    return "";
				
				}
				public String TPAGOS_IDPattern(){
				
					return "";
				
				}
				public String TPAGOS_IDOriginalDbColumnName(){
				
					return "TPAGOS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return false;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal NUMERADOR;

				public BigDecimal getNUMERADOR () {
					return this.NUMERADOR;
				}

				public Boolean NUMERADORIsNullable(){
				    return true;
				}
				public Boolean NUMERADORIsKey(){
				    return false;
				}
				public Integer NUMERADORLength(){
				    return 0;
				}
				public Integer NUMERADORPrecision(){
				    return 0;
				}
				public String NUMERADORDefault(){
				
					return "";
				
				}
				public String NUMERADORComment(){
				
				    return "";
				
				}
				public String NUMERADORPattern(){
				
					return "";
				
				}
				public String NUMERADOROriginalDbColumnName(){
				
					return "NUMERADOR";
				
				}

				
			    public BigDecimal DENOMINADOR;

				public BigDecimal getDENOMINADOR () {
					return this.DENOMINADOR;
				}

				public Boolean DENOMINADORIsNullable(){
				    return true;
				}
				public Boolean DENOMINADORIsKey(){
				    return false;
				}
				public Integer DENOMINADORLength(){
				    return 0;
				}
				public Integer DENOMINADORPrecision(){
				    return 0;
				}
				public String DENOMINADORDefault(){
				
					return "";
				
				}
				public String DENOMINADORComment(){
				
				    return "";
				
				}
				public String DENOMINADORPattern(){
				
					return "";
				
				}
				public String DENOMINADOROriginalDbColumnName(){
				
					return "DENOMINADOR";
				
				}

				
			    public BigDecimal INDICADOR;

				public BigDecimal getINDICADOR () {
					return this.INDICADOR;
				}

				public Boolean INDICADORIsNullable(){
				    return true;
				}
				public Boolean INDICADORIsKey(){
				    return false;
				}
				public Integer INDICADORLength(){
				    return 0;
				}
				public Integer INDICADORPrecision(){
				    return 0;
				}
				public String INDICADORDefault(){
				
					return "";
				
				}
				public String INDICADORComment(){
				
				    return "";
				
				}
				public String INDICADORPattern(){
				
					return "";
				
				}
				public String INDICADOROriginalDbColumnName(){
				
					return "INDICADOR";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.ETAPA = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.ETAPA = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NRADICADO="+NRADICADO);
		sb.append(",ETAPA="+String.valueOf(ETAPA));
		sb.append(",TPAGOS_ID="+String.valueOf(TPAGOS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",NUMERADOR="+String.valueOf(NUMERADOR));
		sb.append(",DENOMINADOR="+String.valueOf(DENOMINADOR));
		sb.append(",INDICADOR="+String.valueOf(INDICADOR));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Elimina15Struct implements routines.system.IPersistableRow<Elimina15Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NRADICADO;

				public String getNRADICADO () {
					return this.NRADICADO;
				}

				public Boolean NRADICADOIsNullable(){
				    return true;
				}
				public Boolean NRADICADOIsKey(){
				    return true;
				}
				public Integer NRADICADOLength(){
				    return 100;
				}
				public Integer NRADICADOPrecision(){
				    return 0;
				}
				public String NRADICADODefault(){
				
					return null;
				
				}
				public String NRADICADOComment(){
				
				    return "";
				
				}
				public String NRADICADOPattern(){
				
					return "";
				
				}
				public String NRADICADOOriginalDbColumnName(){
				
					return "NRADICADO";
				
				}

				
			    public BigDecimal TPAGOS_ID;

				public BigDecimal getTPAGOS_ID () {
					return this.TPAGOS_ID;
				}

				public Boolean TPAGOS_IDIsNullable(){
				    return false;
				}
				public Boolean TPAGOS_IDIsKey(){
				    return true;
				}
				public Integer TPAGOS_IDLength(){
				    return 0;
				}
				public Integer TPAGOS_IDPrecision(){
				    return null;
				}
				public String TPAGOS_IDDefault(){
				
					return "";
				
				}
				public String TPAGOS_IDComment(){
				
				    return "";
				
				}
				public String TPAGOS_IDPattern(){
				
					return "";
				
				}
				public String TPAGOS_IDOriginalDbColumnName(){
				
					return "TPAGOS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return true;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return true;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.NRADICADO == null) ? 0 : this.NRADICADO.hashCode());
					
						result = prime * result + ((this.TPAGOS_ID == null) ? 0 : this.TPAGOS_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
						result = prime * result + ((this.TINDICADORES_ID == null) ? 0 : this.TINDICADORES_ID.hashCode());
					
						result = prime * result + ((this.PRESTADOR_ID == null) ? 0 : this.PRESTADOR_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Elimina15Struct other = (Elimina15Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.NRADICADO == null) {
							if (other.NRADICADO != null)
								return false;
						
						} else if (!this.NRADICADO.equals(other.NRADICADO))
						
							return false;
					
						if (this.TPAGOS_ID == null) {
							if (other.TPAGOS_ID != null)
								return false;
						
						} else if (!this.TPAGOS_ID.equals(other.TPAGOS_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					
						if (this.TINDICADORES_ID == null) {
							if (other.TINDICADORES_ID != null)
								return false;
						
						} else if (!this.TINDICADORES_ID.equals(other.TINDICADORES_ID))
						
							return false;
					
						if (this.PRESTADOR_ID == null) {
							if (other.PRESTADOR_ID != null)
								return false;
						
						} else if (!this.PRESTADOR_ID.equals(other.PRESTADOR_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Elimina15Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.NRADICADO = this.NRADICADO;
	            other.TPAGOS_ID = this.TPAGOS_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            other.TINDICADORES_ID = this.TINDICADORES_ID;
	            other.PRESTADOR_ID = this.PRESTADOR_ID;
	            
	}

	public void copyKeysDataTo(Elimina15Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.NRADICADO = this.NRADICADO;
	            	other.TPAGOS_ID = this.TPAGOS_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	other.TINDICADORES_ID = this.TINDICADORES_ID;
	            	other.PRESTADOR_ID = this.PRESTADOR_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NRADICADO="+NRADICADO);
		sb.append(",TPAGOS_ID="+String.valueOf(TPAGOS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Elimina15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NRADICADO, other.NRADICADO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TPAGOS_ID, other.TPAGOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TINDICADORES_ID, other.TINDICADORES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PRESTADOR_ID, other.PRESTADOR_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Inserta18Struct implements routines.system.IPersistableRow<Inserta18Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NRADICADO;

				public String getNRADICADO () {
					return this.NRADICADO;
				}

				public Boolean NRADICADOIsNullable(){
				    return true;
				}
				public Boolean NRADICADOIsKey(){
				    return false;
				}
				public Integer NRADICADOLength(){
				    return 100;
				}
				public Integer NRADICADOPrecision(){
				    return 0;
				}
				public String NRADICADODefault(){
				
					return null;
				
				}
				public String NRADICADOComment(){
				
				    return "";
				
				}
				public String NRADICADOPattern(){
				
					return "";
				
				}
				public String NRADICADOOriginalDbColumnName(){
				
					return "NRADICADO";
				
				}

				
			    public BigDecimal ETAPA;

				public BigDecimal getETAPA () {
					return this.ETAPA;
				}

				public Boolean ETAPAIsNullable(){
				    return false;
				}
				public Boolean ETAPAIsKey(){
				    return false;
				}
				public Integer ETAPALength(){
				    return 0;
				}
				public Integer ETAPAPrecision(){
				    return null;
				}
				public String ETAPADefault(){
				
					return "";
				
				}
				public String ETAPAComment(){
				
				    return "";
				
				}
				public String ETAPAPattern(){
				
					return "";
				
				}
				public String ETAPAOriginalDbColumnName(){
				
					return "ETAPA";
				
				}

				
			    public BigDecimal TPAGOS_ID;

				public BigDecimal getTPAGOS_ID () {
					return this.TPAGOS_ID;
				}

				public Boolean TPAGOS_IDIsNullable(){
				    return false;
				}
				public Boolean TPAGOS_IDIsKey(){
				    return false;
				}
				public Integer TPAGOS_IDLength(){
				    return 0;
				}
				public Integer TPAGOS_IDPrecision(){
				    return null;
				}
				public String TPAGOS_IDDefault(){
				
					return "";
				
				}
				public String TPAGOS_IDComment(){
				
				    return "";
				
				}
				public String TPAGOS_IDPattern(){
				
					return "";
				
				}
				public String TPAGOS_IDOriginalDbColumnName(){
				
					return "TPAGOS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return false;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal NUMERADOR;

				public BigDecimal getNUMERADOR () {
					return this.NUMERADOR;
				}

				public Boolean NUMERADORIsNullable(){
				    return true;
				}
				public Boolean NUMERADORIsKey(){
				    return false;
				}
				public Integer NUMERADORLength(){
				    return 0;
				}
				public Integer NUMERADORPrecision(){
				    return 0;
				}
				public String NUMERADORDefault(){
				
					return "";
				
				}
				public String NUMERADORComment(){
				
				    return "";
				
				}
				public String NUMERADORPattern(){
				
					return "";
				
				}
				public String NUMERADOROriginalDbColumnName(){
				
					return "NUMERADOR";
				
				}

				
			    public BigDecimal DENOMINADOR;

				public BigDecimal getDENOMINADOR () {
					return this.DENOMINADOR;
				}

				public Boolean DENOMINADORIsNullable(){
				    return true;
				}
				public Boolean DENOMINADORIsKey(){
				    return false;
				}
				public Integer DENOMINADORLength(){
				    return 0;
				}
				public Integer DENOMINADORPrecision(){
				    return 0;
				}
				public String DENOMINADORDefault(){
				
					return "";
				
				}
				public String DENOMINADORComment(){
				
				    return "";
				
				}
				public String DENOMINADORPattern(){
				
					return "";
				
				}
				public String DENOMINADOROriginalDbColumnName(){
				
					return "DENOMINADOR";
				
				}

				
			    public BigDecimal INDICADOR;

				public BigDecimal getINDICADOR () {
					return this.INDICADOR;
				}

				public Boolean INDICADORIsNullable(){
				    return true;
				}
				public Boolean INDICADORIsKey(){
				    return false;
				}
				public Integer INDICADORLength(){
				    return 0;
				}
				public Integer INDICADORPrecision(){
				    return 0;
				}
				public String INDICADORDefault(){
				
					return "";
				
				}
				public String INDICADORComment(){
				
				    return "";
				
				}
				public String INDICADORPattern(){
				
					return "";
				
				}
				public String INDICADOROriginalDbColumnName(){
				
					return "INDICADOR";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.ETAPA = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.ETAPA = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NRADICADO="+NRADICADO);
		sb.append(",ETAPA="+String.valueOf(ETAPA));
		sb.append(",TPAGOS_ID="+String.valueOf(TPAGOS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",NUMERADOR="+String.valueOf(NUMERADOR));
		sb.append(",DENOMINADOR="+String.valueOf(DENOMINADOR));
		sb.append(",INDICADOR="+String.valueOf(INDICADOR));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NRADICADO;

				public String getNRADICADO () {
					return this.NRADICADO;
				}

				public Boolean NRADICADOIsNullable(){
				    return true;
				}
				public Boolean NRADICADOIsKey(){
				    return false;
				}
				public Integer NRADICADOLength(){
				    return 100;
				}
				public Integer NRADICADOPrecision(){
				    return 0;
				}
				public String NRADICADODefault(){
				
					return null;
				
				}
				public String NRADICADOComment(){
				
				    return "";
				
				}
				public String NRADICADOPattern(){
				
					return "";
				
				}
				public String NRADICADOOriginalDbColumnName(){
				
					return "NRADICADO";
				
				}

				
			    public BigDecimal ETAPA;

				public BigDecimal getETAPA () {
					return this.ETAPA;
				}

				public Boolean ETAPAIsNullable(){
				    return false;
				}
				public Boolean ETAPAIsKey(){
				    return false;
				}
				public Integer ETAPALength(){
				    return 0;
				}
				public Integer ETAPAPrecision(){
				    return null;
				}
				public String ETAPADefault(){
				
					return "";
				
				}
				public String ETAPAComment(){
				
				    return "";
				
				}
				public String ETAPAPattern(){
				
					return "";
				
				}
				public String ETAPAOriginalDbColumnName(){
				
					return "ETAPA";
				
				}

				
			    public BigDecimal TPAGOS_ID;

				public BigDecimal getTPAGOS_ID () {
					return this.TPAGOS_ID;
				}

				public Boolean TPAGOS_IDIsNullable(){
				    return false;
				}
				public Boolean TPAGOS_IDIsKey(){
				    return false;
				}
				public Integer TPAGOS_IDLength(){
				    return 0;
				}
				public Integer TPAGOS_IDPrecision(){
				    return null;
				}
				public String TPAGOS_IDDefault(){
				
					return "";
				
				}
				public String TPAGOS_IDComment(){
				
				    return "";
				
				}
				public String TPAGOS_IDPattern(){
				
					return "";
				
				}
				public String TPAGOS_IDOriginalDbColumnName(){
				
					return "TPAGOS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return false;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal NUMERADOR;

				public BigDecimal getNUMERADOR () {
					return this.NUMERADOR;
				}

				public Boolean NUMERADORIsNullable(){
				    return true;
				}
				public Boolean NUMERADORIsKey(){
				    return false;
				}
				public Integer NUMERADORLength(){
				    return 0;
				}
				public Integer NUMERADORPrecision(){
				    return 0;
				}
				public String NUMERADORDefault(){
				
					return "";
				
				}
				public String NUMERADORComment(){
				
				    return "";
				
				}
				public String NUMERADORPattern(){
				
					return "";
				
				}
				public String NUMERADOROriginalDbColumnName(){
				
					return "NUMERADOR";
				
				}

				
			    public BigDecimal DENOMINADOR;

				public BigDecimal getDENOMINADOR () {
					return this.DENOMINADOR;
				}

				public Boolean DENOMINADORIsNullable(){
				    return true;
				}
				public Boolean DENOMINADORIsKey(){
				    return false;
				}
				public Integer DENOMINADORLength(){
				    return 0;
				}
				public Integer DENOMINADORPrecision(){
				    return 0;
				}
				public String DENOMINADORDefault(){
				
					return "";
				
				}
				public String DENOMINADORComment(){
				
				    return "";
				
				}
				public String DENOMINADORPattern(){
				
					return "";
				
				}
				public String DENOMINADOROriginalDbColumnName(){
				
					return "DENOMINADOR";
				
				}

				
			    public BigDecimal INDICADOR;

				public BigDecimal getINDICADOR () {
					return this.INDICADOR;
				}

				public Boolean INDICADORIsNullable(){
				    return true;
				}
				public Boolean INDICADORIsKey(){
				    return false;
				}
				public Integer INDICADORLength(){
				    return 0;
				}
				public Integer INDICADORPrecision(){
				    return 0;
				}
				public String INDICADORDefault(){
				
					return "";
				
				}
				public String INDICADORComment(){
				
				    return "";
				
				}
				public String INDICADORPattern(){
				
					return "";
				
				}
				public String INDICADOROriginalDbColumnName(){
				
					return "INDICADOR";
				
				}

				
			    public BigDecimal TINDICADORES_ID1;

				public BigDecimal getTINDICADORES_ID1 () {
					return this.TINDICADORES_ID1;
				}

				public Boolean TINDICADORES_ID1IsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_ID1IsKey(){
				    return false;
				}
				public Integer TINDICADORES_ID1Length(){
				    return 0;
				}
				public Integer TINDICADORES_ID1Precision(){
				    return 0;
				}
				public String TINDICADORES_ID1Default(){
				
					return "";
				
				}
				public String TINDICADORES_ID1Comment(){
				
				    return "";
				
				}
				public String TINDICADORES_ID1Pattern(){
				
					return "";
				
				}
				public String TINDICADORES_ID1OriginalDbColumnName(){
				
					return "TINDICADORES_ID1";
				
				}

				
			    public BigDecimal NUMERADOR1;

				public BigDecimal getNUMERADOR1 () {
					return this.NUMERADOR1;
				}

				public Boolean NUMERADOR1IsNullable(){
				    return true;
				}
				public Boolean NUMERADOR1IsKey(){
				    return false;
				}
				public Integer NUMERADOR1Length(){
				    return 0;
				}
				public Integer NUMERADOR1Precision(){
				    return 0;
				}
				public String NUMERADOR1Default(){
				
					return "";
				
				}
				public String NUMERADOR1Comment(){
				
				    return "";
				
				}
				public String NUMERADOR1Pattern(){
				
					return "";
				
				}
				public String NUMERADOR1OriginalDbColumnName(){
				
					return "NUMERADOR1";
				
				}

				
			    public BigDecimal DENOMINADOR1;

				public BigDecimal getDENOMINADOR1 () {
					return this.DENOMINADOR1;
				}

				public Boolean DENOMINADOR1IsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR1IsKey(){
				    return false;
				}
				public Integer DENOMINADOR1Length(){
				    return 0;
				}
				public Integer DENOMINADOR1Precision(){
				    return 0;
				}
				public String DENOMINADOR1Default(){
				
					return "";
				
				}
				public String DENOMINADOR1Comment(){
				
				    return "";
				
				}
				public String DENOMINADOR1Pattern(){
				
					return "";
				
				}
				public String DENOMINADOR1OriginalDbColumnName(){
				
					return "DENOMINADOR1";
				
				}

				
			    public BigDecimal INDICADOR1;

				public BigDecimal getINDICADOR1 () {
					return this.INDICADOR1;
				}

				public Boolean INDICADOR1IsNullable(){
				    return true;
				}
				public Boolean INDICADOR1IsKey(){
				    return false;
				}
				public Integer INDICADOR1Length(){
				    return 0;
				}
				public Integer INDICADOR1Precision(){
				    return 0;
				}
				public String INDICADOR1Default(){
				
					return "";
				
				}
				public String INDICADOR1Comment(){
				
				    return "";
				
				}
				public String INDICADOR1Pattern(){
				
					return "";
				
				}
				public String INDICADOR1OriginalDbColumnName(){
				
					return "INDICADOR1";
				
				}

				
			    public BigDecimal TINDICADORES_ID2;

				public BigDecimal getTINDICADORES_ID2 () {
					return this.TINDICADORES_ID2;
				}

				public Boolean TINDICADORES_ID2IsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_ID2IsKey(){
				    return false;
				}
				public Integer TINDICADORES_ID2Length(){
				    return 0;
				}
				public Integer TINDICADORES_ID2Precision(){
				    return 0;
				}
				public String TINDICADORES_ID2Default(){
				
					return "";
				
				}
				public String TINDICADORES_ID2Comment(){
				
				    return "";
				
				}
				public String TINDICADORES_ID2Pattern(){
				
					return "";
				
				}
				public String TINDICADORES_ID2OriginalDbColumnName(){
				
					return "TINDICADORES_ID2";
				
				}

				
			    public BigDecimal NUMERADOR2;

				public BigDecimal getNUMERADOR2 () {
					return this.NUMERADOR2;
				}

				public Boolean NUMERADOR2IsNullable(){
				    return true;
				}
				public Boolean NUMERADOR2IsKey(){
				    return false;
				}
				public Integer NUMERADOR2Length(){
				    return 0;
				}
				public Integer NUMERADOR2Precision(){
				    return 0;
				}
				public String NUMERADOR2Default(){
				
					return "";
				
				}
				public String NUMERADOR2Comment(){
				
				    return "";
				
				}
				public String NUMERADOR2Pattern(){
				
					return "";
				
				}
				public String NUMERADOR2OriginalDbColumnName(){
				
					return "NUMERADOR2";
				
				}

				
			    public BigDecimal DENOMINADOR2;

				public BigDecimal getDENOMINADOR2 () {
					return this.DENOMINADOR2;
				}

				public Boolean DENOMINADOR2IsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR2IsKey(){
				    return false;
				}
				public Integer DENOMINADOR2Length(){
				    return 0;
				}
				public Integer DENOMINADOR2Precision(){
				    return 0;
				}
				public String DENOMINADOR2Default(){
				
					return "";
				
				}
				public String DENOMINADOR2Comment(){
				
				    return "";
				
				}
				public String DENOMINADOR2Pattern(){
				
					return "";
				
				}
				public String DENOMINADOR2OriginalDbColumnName(){
				
					return "DENOMINADOR2";
				
				}

				
			    public BigDecimal INDICADOR2;

				public BigDecimal getINDICADOR2 () {
					return this.INDICADOR2;
				}

				public Boolean INDICADOR2IsNullable(){
				    return true;
				}
				public Boolean INDICADOR2IsKey(){
				    return false;
				}
				public Integer INDICADOR2Length(){
				    return 0;
				}
				public Integer INDICADOR2Precision(){
				    return 0;
				}
				public String INDICADOR2Default(){
				
					return "";
				
				}
				public String INDICADOR2Comment(){
				
				    return "";
				
				}
				public String INDICADOR2Pattern(){
				
					return "";
				
				}
				public String INDICADOR2OriginalDbColumnName(){
				
					return "INDICADOR2";
				
				}

				
			    public BigDecimal TINDICADORES_ID3;

				public BigDecimal getTINDICADORES_ID3 () {
					return this.TINDICADORES_ID3;
				}

				public Boolean TINDICADORES_ID3IsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_ID3IsKey(){
				    return false;
				}
				public Integer TINDICADORES_ID3Length(){
				    return 0;
				}
				public Integer TINDICADORES_ID3Precision(){
				    return 0;
				}
				public String TINDICADORES_ID3Default(){
				
					return "";
				
				}
				public String TINDICADORES_ID3Comment(){
				
				    return "";
				
				}
				public String TINDICADORES_ID3Pattern(){
				
					return "";
				
				}
				public String TINDICADORES_ID3OriginalDbColumnName(){
				
					return "TINDICADORES_ID3";
				
				}

				
			    public BigDecimal NUMERADOR3;

				public BigDecimal getNUMERADOR3 () {
					return this.NUMERADOR3;
				}

				public Boolean NUMERADOR3IsNullable(){
				    return true;
				}
				public Boolean NUMERADOR3IsKey(){
				    return false;
				}
				public Integer NUMERADOR3Length(){
				    return 0;
				}
				public Integer NUMERADOR3Precision(){
				    return 0;
				}
				public String NUMERADOR3Default(){
				
					return "";
				
				}
				public String NUMERADOR3Comment(){
				
				    return "";
				
				}
				public String NUMERADOR3Pattern(){
				
					return "";
				
				}
				public String NUMERADOR3OriginalDbColumnName(){
				
					return "NUMERADOR3";
				
				}

				
			    public BigDecimal DENOMINADOR3;

				public BigDecimal getDENOMINADOR3 () {
					return this.DENOMINADOR3;
				}

				public Boolean DENOMINADOR3IsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR3IsKey(){
				    return false;
				}
				public Integer DENOMINADOR3Length(){
				    return 0;
				}
				public Integer DENOMINADOR3Precision(){
				    return 0;
				}
				public String DENOMINADOR3Default(){
				
					return "";
				
				}
				public String DENOMINADOR3Comment(){
				
				    return "";
				
				}
				public String DENOMINADOR3Pattern(){
				
					return "";
				
				}
				public String DENOMINADOR3OriginalDbColumnName(){
				
					return "DENOMINADOR3";
				
				}

				
			    public BigDecimal INDICADOR3;

				public BigDecimal getINDICADOR3 () {
					return this.INDICADOR3;
				}

				public Boolean INDICADOR3IsNullable(){
				    return true;
				}
				public Boolean INDICADOR3IsKey(){
				    return false;
				}
				public Integer INDICADOR3Length(){
				    return 0;
				}
				public Integer INDICADOR3Precision(){
				    return 0;
				}
				public String INDICADOR3Default(){
				
					return "";
				
				}
				public String INDICADOR3Comment(){
				
				    return "";
				
				}
				public String INDICADOR3Pattern(){
				
					return "";
				
				}
				public String INDICADOR3OriginalDbColumnName(){
				
					return "INDICADOR3";
				
				}

				
			    public BigDecimal TINDICADORES_ID4;

				public BigDecimal getTINDICADORES_ID4 () {
					return this.TINDICADORES_ID4;
				}

				public Boolean TINDICADORES_ID4IsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_ID4IsKey(){
				    return false;
				}
				public Integer TINDICADORES_ID4Length(){
				    return 0;
				}
				public Integer TINDICADORES_ID4Precision(){
				    return 0;
				}
				public String TINDICADORES_ID4Default(){
				
					return "";
				
				}
				public String TINDICADORES_ID4Comment(){
				
				    return "";
				
				}
				public String TINDICADORES_ID4Pattern(){
				
					return "";
				
				}
				public String TINDICADORES_ID4OriginalDbColumnName(){
				
					return "TINDICADORES_ID4";
				
				}

				
			    public BigDecimal NUMERADOR4;

				public BigDecimal getNUMERADOR4 () {
					return this.NUMERADOR4;
				}

				public Boolean NUMERADOR4IsNullable(){
				    return true;
				}
				public Boolean NUMERADOR4IsKey(){
				    return false;
				}
				public Integer NUMERADOR4Length(){
				    return 0;
				}
				public Integer NUMERADOR4Precision(){
				    return 0;
				}
				public String NUMERADOR4Default(){
				
					return "";
				
				}
				public String NUMERADOR4Comment(){
				
				    return "";
				
				}
				public String NUMERADOR4Pattern(){
				
					return "";
				
				}
				public String NUMERADOR4OriginalDbColumnName(){
				
					return "NUMERADOR4";
				
				}

				
			    public BigDecimal DENOMINADOR4;

				public BigDecimal getDENOMINADOR4 () {
					return this.DENOMINADOR4;
				}

				public Boolean DENOMINADOR4IsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR4IsKey(){
				    return false;
				}
				public Integer DENOMINADOR4Length(){
				    return 0;
				}
				public Integer DENOMINADOR4Precision(){
				    return 0;
				}
				public String DENOMINADOR4Default(){
				
					return "";
				
				}
				public String DENOMINADOR4Comment(){
				
				    return "";
				
				}
				public String DENOMINADOR4Pattern(){
				
					return "";
				
				}
				public String DENOMINADOR4OriginalDbColumnName(){
				
					return "DENOMINADOR4";
				
				}

				
			    public BigDecimal INDICADOR4;

				public BigDecimal getINDICADOR4 () {
					return this.INDICADOR4;
				}

				public Boolean INDICADOR4IsNullable(){
				    return true;
				}
				public Boolean INDICADOR4IsKey(){
				    return false;
				}
				public Integer INDICADOR4Length(){
				    return 0;
				}
				public Integer INDICADOR4Precision(){
				    return 0;
				}
				public String INDICADOR4Default(){
				
					return "";
				
				}
				public String INDICADOR4Comment(){
				
				    return "";
				
				}
				public String INDICADOR4Pattern(){
				
					return "";
				
				}
				public String INDICADOR4OriginalDbColumnName(){
				
					return "INDICADOR4";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.ETAPA = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID1 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR1 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR1 = (BigDecimal) dis.readObject();
					
						this.INDICADOR1 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID2 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR2 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR2 = (BigDecimal) dis.readObject();
					
						this.INDICADOR2 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID3 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR3 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR3 = (BigDecimal) dis.readObject();
					
						this.INDICADOR3 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID4 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR4 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR4 = (BigDecimal) dis.readObject();
					
						this.INDICADOR4 = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.ETAPA = (BigDecimal) dis.readObject();
					
						this.TPAGOS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID1 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR1 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR1 = (BigDecimal) dis.readObject();
					
						this.INDICADOR1 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID2 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR2 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR2 = (BigDecimal) dis.readObject();
					
						this.INDICADOR2 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID3 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR3 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR3 = (BigDecimal) dis.readObject();
					
						this.INDICADOR3 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID4 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR4 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR4 = (BigDecimal) dis.readObject();
					
						this.INDICADOR4 = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID4);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR4);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR4);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR4);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPAGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID3);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR3);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR3);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR3);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID4);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR4);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR4);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR4);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NRADICADO="+NRADICADO);
		sb.append(",ETAPA="+String.valueOf(ETAPA));
		sb.append(",TPAGOS_ID="+String.valueOf(TPAGOS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",NUMERADOR="+String.valueOf(NUMERADOR));
		sb.append(",DENOMINADOR="+String.valueOf(DENOMINADOR));
		sb.append(",INDICADOR="+String.valueOf(INDICADOR));
		sb.append(",TINDICADORES_ID1="+String.valueOf(TINDICADORES_ID1));
		sb.append(",NUMERADOR1="+String.valueOf(NUMERADOR1));
		sb.append(",DENOMINADOR1="+String.valueOf(DENOMINADOR1));
		sb.append(",INDICADOR1="+String.valueOf(INDICADOR1));
		sb.append(",TINDICADORES_ID2="+String.valueOf(TINDICADORES_ID2));
		sb.append(",NUMERADOR2="+String.valueOf(NUMERADOR2));
		sb.append(",DENOMINADOR2="+String.valueOf(DENOMINADOR2));
		sb.append(",INDICADOR2="+String.valueOf(INDICADOR2));
		sb.append(",TINDICADORES_ID3="+String.valueOf(TINDICADORES_ID3));
		sb.append(",NUMERADOR3="+String.valueOf(NUMERADOR3));
		sb.append(",DENOMINADOR3="+String.valueOf(DENOMINADOR3));
		sb.append(",INDICADOR3="+String.valueOf(INDICADOR3));
		sb.append(",TINDICADORES_ID4="+String.valueOf(TINDICADORES_ID4));
		sb.append(",NUMERADOR4="+String.valueOf(NUMERADOR4));
		sb.append(",DENOMINADOR4="+String.valueOf(DENOMINADOR4));
		sb.append(",INDICADOR4="+String.valueOf(INDICADOR4));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row42Struct implements routines.system.IPersistableRow<row42Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public java.util.Date FPERIODO;

				public java.util.Date getFPERIODO () {
					return this.FPERIODO;
				}

				public Boolean FPERIODOIsNullable(){
				    return true;
				}
				public Boolean FPERIODOIsKey(){
				    return false;
				}
				public Integer FPERIODOLength(){
				    return 0;
				}
				public Integer FPERIODOPrecision(){
				    return 0;
				}
				public String FPERIODODefault(){
				
					return null;
				
				}
				public String FPERIODOComment(){
				
				    return "";
				
				}
				public String FPERIODOPattern(){
				
					return "";
				
				}
				public String FPERIODOOriginalDbColumnName(){
				
					return "FPERIODO";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return 0;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return 0;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public String NRADICADO;

				public String getNRADICADO () {
					return this.NRADICADO;
				}

				public Boolean NRADICADOIsNullable(){
				    return true;
				}
				public Boolean NRADICADOIsKey(){
				    return false;
				}
				public Integer NRADICADOLength(){
				    return 100;
				}
				public Integer NRADICADOPrecision(){
				    return 0;
				}
				public String NRADICADODefault(){
				
					return null;
				
				}
				public String NRADICADOComment(){
				
				    return "";
				
				}
				public String NRADICADOPattern(){
				
					return "";
				
				}
				public String NRADICADOOriginalDbColumnName(){
				
					return "NRADICADO";
				
				}

				
			    public BigDecimal ETAPA;

				public BigDecimal getETAPA () {
					return this.ETAPA;
				}

				public Boolean ETAPAIsNullable(){
				    return false;
				}
				public Boolean ETAPAIsKey(){
				    return false;
				}
				public Integer ETAPALength(){
				    return 0;
				}
				public Integer ETAPAPrecision(){
				    return null;
				}
				public String ETAPADefault(){
				
					return "";
				
				}
				public String ETAPAComment(){
				
				    return "";
				
				}
				public String ETAPAPattern(){
				
					return "";
				
				}
				public String ETAPAOriginalDbColumnName(){
				
					return "ETAPA";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return false;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal NUMERADOR;

				public BigDecimal getNUMERADOR () {
					return this.NUMERADOR;
				}

				public Boolean NUMERADORIsNullable(){
				    return true;
				}
				public Boolean NUMERADORIsKey(){
				    return false;
				}
				public Integer NUMERADORLength(){
				    return 0;
				}
				public Integer NUMERADORPrecision(){
				    return 0;
				}
				public String NUMERADORDefault(){
				
					return "";
				
				}
				public String NUMERADORComment(){
				
				    return "";
				
				}
				public String NUMERADORPattern(){
				
					return "";
				
				}
				public String NUMERADOROriginalDbColumnName(){
				
					return "NUMERADOR";
				
				}

				
			    public BigDecimal DENOMINADOR;

				public BigDecimal getDENOMINADOR () {
					return this.DENOMINADOR;
				}

				public Boolean DENOMINADORIsNullable(){
				    return true;
				}
				public Boolean DENOMINADORIsKey(){
				    return false;
				}
				public Integer DENOMINADORLength(){
				    return 0;
				}
				public Integer DENOMINADORPrecision(){
				    return 0;
				}
				public String DENOMINADORDefault(){
				
					return "";
				
				}
				public String DENOMINADORComment(){
				
				    return "";
				
				}
				public String DENOMINADORPattern(){
				
					return "";
				
				}
				public String DENOMINADOROriginalDbColumnName(){
				
					return "DENOMINADOR";
				
				}

				
			    public BigDecimal INDICADOR;

				public BigDecimal getINDICADOR () {
					return this.INDICADOR;
				}

				public Boolean INDICADORIsNullable(){
				    return true;
				}
				public Boolean INDICADORIsKey(){
				    return false;
				}
				public Integer INDICADORLength(){
				    return 0;
				}
				public Integer INDICADORPrecision(){
				    return 0;
				}
				public String INDICADORDefault(){
				
					return "";
				
				}
				public String INDICADORComment(){
				
				    return "";
				
				}
				public String INDICADORPattern(){
				
					return "";
				
				}
				public String INDICADOROriginalDbColumnName(){
				
					return "INDICADOR";
				
				}

				
			    public BigDecimal TINDICADORES_ID1;

				public BigDecimal getTINDICADORES_ID1 () {
					return this.TINDICADORES_ID1;
				}

				public Boolean TINDICADORES_ID1IsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_ID1IsKey(){
				    return false;
				}
				public Integer TINDICADORES_ID1Length(){
				    return 0;
				}
				public Integer TINDICADORES_ID1Precision(){
				    return 0;
				}
				public String TINDICADORES_ID1Default(){
				
					return "";
				
				}
				public String TINDICADORES_ID1Comment(){
				
				    return "";
				
				}
				public String TINDICADORES_ID1Pattern(){
				
					return "";
				
				}
				public String TINDICADORES_ID1OriginalDbColumnName(){
				
					return "TINDICADORES_ID1";
				
				}

				
			    public BigDecimal NUMERADOR1;

				public BigDecimal getNUMERADOR1 () {
					return this.NUMERADOR1;
				}

				public Boolean NUMERADOR1IsNullable(){
				    return true;
				}
				public Boolean NUMERADOR1IsKey(){
				    return false;
				}
				public Integer NUMERADOR1Length(){
				    return 0;
				}
				public Integer NUMERADOR1Precision(){
				    return 0;
				}
				public String NUMERADOR1Default(){
				
					return "";
				
				}
				public String NUMERADOR1Comment(){
				
				    return "";
				
				}
				public String NUMERADOR1Pattern(){
				
					return "";
				
				}
				public String NUMERADOR1OriginalDbColumnName(){
				
					return "NUMERADOR1";
				
				}

				
			    public BigDecimal DENOMINADOR1;

				public BigDecimal getDENOMINADOR1 () {
					return this.DENOMINADOR1;
				}

				public Boolean DENOMINADOR1IsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR1IsKey(){
				    return false;
				}
				public Integer DENOMINADOR1Length(){
				    return 0;
				}
				public Integer DENOMINADOR1Precision(){
				    return 0;
				}
				public String DENOMINADOR1Default(){
				
					return "";
				
				}
				public String DENOMINADOR1Comment(){
				
				    return "";
				
				}
				public String DENOMINADOR1Pattern(){
				
					return "";
				
				}
				public String DENOMINADOR1OriginalDbColumnName(){
				
					return "DENOMINADOR1";
				
				}

				
			    public BigDecimal INDICADOR1;

				public BigDecimal getINDICADOR1 () {
					return this.INDICADOR1;
				}

				public Boolean INDICADOR1IsNullable(){
				    return true;
				}
				public Boolean INDICADOR1IsKey(){
				    return false;
				}
				public Integer INDICADOR1Length(){
				    return 0;
				}
				public Integer INDICADOR1Precision(){
				    return 0;
				}
				public String INDICADOR1Default(){
				
					return "";
				
				}
				public String INDICADOR1Comment(){
				
				    return "";
				
				}
				public String INDICADOR1Pattern(){
				
					return "";
				
				}
				public String INDICADOR1OriginalDbColumnName(){
				
					return "INDICADOR1";
				
				}

				
			    public BigDecimal TINDICADORES_ID2;

				public BigDecimal getTINDICADORES_ID2 () {
					return this.TINDICADORES_ID2;
				}

				public Boolean TINDICADORES_ID2IsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_ID2IsKey(){
				    return false;
				}
				public Integer TINDICADORES_ID2Length(){
				    return 0;
				}
				public Integer TINDICADORES_ID2Precision(){
				    return 0;
				}
				public String TINDICADORES_ID2Default(){
				
					return "";
				
				}
				public String TINDICADORES_ID2Comment(){
				
				    return "";
				
				}
				public String TINDICADORES_ID2Pattern(){
				
					return "";
				
				}
				public String TINDICADORES_ID2OriginalDbColumnName(){
				
					return "TINDICADORES_ID2";
				
				}

				
			    public BigDecimal NUMERADOR2;

				public BigDecimal getNUMERADOR2 () {
					return this.NUMERADOR2;
				}

				public Boolean NUMERADOR2IsNullable(){
				    return true;
				}
				public Boolean NUMERADOR2IsKey(){
				    return false;
				}
				public Integer NUMERADOR2Length(){
				    return 0;
				}
				public Integer NUMERADOR2Precision(){
				    return 0;
				}
				public String NUMERADOR2Default(){
				
					return "";
				
				}
				public String NUMERADOR2Comment(){
				
				    return "";
				
				}
				public String NUMERADOR2Pattern(){
				
					return "";
				
				}
				public String NUMERADOR2OriginalDbColumnName(){
				
					return "NUMERADOR2";
				
				}

				
			    public BigDecimal DENOMINADOR2;

				public BigDecimal getDENOMINADOR2 () {
					return this.DENOMINADOR2;
				}

				public Boolean DENOMINADOR2IsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR2IsKey(){
				    return false;
				}
				public Integer DENOMINADOR2Length(){
				    return 0;
				}
				public Integer DENOMINADOR2Precision(){
				    return 0;
				}
				public String DENOMINADOR2Default(){
				
					return "";
				
				}
				public String DENOMINADOR2Comment(){
				
				    return "";
				
				}
				public String DENOMINADOR2Pattern(){
				
					return "";
				
				}
				public String DENOMINADOR2OriginalDbColumnName(){
				
					return "DENOMINADOR2";
				
				}

				
			    public BigDecimal INDICADOR2;

				public BigDecimal getINDICADOR2 () {
					return this.INDICADOR2;
				}

				public Boolean INDICADOR2IsNullable(){
				    return true;
				}
				public Boolean INDICADOR2IsKey(){
				    return false;
				}
				public Integer INDICADOR2Length(){
				    return 0;
				}
				public Integer INDICADOR2Precision(){
				    return 0;
				}
				public String INDICADOR2Default(){
				
					return "";
				
				}
				public String INDICADOR2Comment(){
				
				    return "";
				
				}
				public String INDICADOR2Pattern(){
				
					return "";
				
				}
				public String INDICADOR2OriginalDbColumnName(){
				
					return "INDICADOR2";
				
				}

				
			    public BigDecimal TINDICADORES_ID3;

				public BigDecimal getTINDICADORES_ID3 () {
					return this.TINDICADORES_ID3;
				}

				public Boolean TINDICADORES_ID3IsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_ID3IsKey(){
				    return false;
				}
				public Integer TINDICADORES_ID3Length(){
				    return 0;
				}
				public Integer TINDICADORES_ID3Precision(){
				    return 0;
				}
				public String TINDICADORES_ID3Default(){
				
					return "";
				
				}
				public String TINDICADORES_ID3Comment(){
				
				    return "";
				
				}
				public String TINDICADORES_ID3Pattern(){
				
					return "";
				
				}
				public String TINDICADORES_ID3OriginalDbColumnName(){
				
					return "TINDICADORES_ID3";
				
				}

				
			    public BigDecimal NUMERADOR3;

				public BigDecimal getNUMERADOR3 () {
					return this.NUMERADOR3;
				}

				public Boolean NUMERADOR3IsNullable(){
				    return true;
				}
				public Boolean NUMERADOR3IsKey(){
				    return false;
				}
				public Integer NUMERADOR3Length(){
				    return 0;
				}
				public Integer NUMERADOR3Precision(){
				    return 0;
				}
				public String NUMERADOR3Default(){
				
					return "";
				
				}
				public String NUMERADOR3Comment(){
				
				    return "";
				
				}
				public String NUMERADOR3Pattern(){
				
					return "";
				
				}
				public String NUMERADOR3OriginalDbColumnName(){
				
					return "NUMERADOR3";
				
				}

				
			    public BigDecimal DENOMINADOR3;

				public BigDecimal getDENOMINADOR3 () {
					return this.DENOMINADOR3;
				}

				public Boolean DENOMINADOR3IsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR3IsKey(){
				    return false;
				}
				public Integer DENOMINADOR3Length(){
				    return 0;
				}
				public Integer DENOMINADOR3Precision(){
				    return 0;
				}
				public String DENOMINADOR3Default(){
				
					return "";
				
				}
				public String DENOMINADOR3Comment(){
				
				    return "";
				
				}
				public String DENOMINADOR3Pattern(){
				
					return "";
				
				}
				public String DENOMINADOR3OriginalDbColumnName(){
				
					return "DENOMINADOR3";
				
				}

				
			    public BigDecimal INDICADOR3;

				public BigDecimal getINDICADOR3 () {
					return this.INDICADOR3;
				}

				public Boolean INDICADOR3IsNullable(){
				    return true;
				}
				public Boolean INDICADOR3IsKey(){
				    return false;
				}
				public Integer INDICADOR3Length(){
				    return 0;
				}
				public Integer INDICADOR3Precision(){
				    return 0;
				}
				public String INDICADOR3Default(){
				
					return "";
				
				}
				public String INDICADOR3Comment(){
				
				    return "";
				
				}
				public String INDICADOR3Pattern(){
				
					return "";
				
				}
				public String INDICADOR3OriginalDbColumnName(){
				
					return "INDICADOR3";
				
				}

				
			    public BigDecimal TINDICADORES_ID4;

				public BigDecimal getTINDICADORES_ID4 () {
					return this.TINDICADORES_ID4;
				}

				public Boolean TINDICADORES_ID4IsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_ID4IsKey(){
				    return false;
				}
				public Integer TINDICADORES_ID4Length(){
				    return 0;
				}
				public Integer TINDICADORES_ID4Precision(){
				    return 0;
				}
				public String TINDICADORES_ID4Default(){
				
					return "";
				
				}
				public String TINDICADORES_ID4Comment(){
				
				    return "";
				
				}
				public String TINDICADORES_ID4Pattern(){
				
					return "";
				
				}
				public String TINDICADORES_ID4OriginalDbColumnName(){
				
					return "TINDICADORES_ID4";
				
				}

				
			    public BigDecimal NUMERADOR4;

				public BigDecimal getNUMERADOR4 () {
					return this.NUMERADOR4;
				}

				public Boolean NUMERADOR4IsNullable(){
				    return true;
				}
				public Boolean NUMERADOR4IsKey(){
				    return false;
				}
				public Integer NUMERADOR4Length(){
				    return 0;
				}
				public Integer NUMERADOR4Precision(){
				    return null;
				}
				public String NUMERADOR4Default(){
				
					return "";
				
				}
				public String NUMERADOR4Comment(){
				
				    return "";
				
				}
				public String NUMERADOR4Pattern(){
				
					return "";
				
				}
				public String NUMERADOR4OriginalDbColumnName(){
				
					return "NUMERADOR4";
				
				}

				
			    public BigDecimal DENOMINADOR4;

				public BigDecimal getDENOMINADOR4 () {
					return this.DENOMINADOR4;
				}

				public Boolean DENOMINADOR4IsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR4IsKey(){
				    return false;
				}
				public Integer DENOMINADOR4Length(){
				    return 0;
				}
				public Integer DENOMINADOR4Precision(){
				    return 0;
				}
				public String DENOMINADOR4Default(){
				
					return "";
				
				}
				public String DENOMINADOR4Comment(){
				
				    return "";
				
				}
				public String DENOMINADOR4Pattern(){
				
					return "";
				
				}
				public String DENOMINADOR4OriginalDbColumnName(){
				
					return "DENOMINADOR4";
				
				}

				
			    public BigDecimal INDICADOR4;

				public BigDecimal getINDICADOR4 () {
					return this.INDICADOR4;
				}

				public Boolean INDICADOR4IsNullable(){
				    return true;
				}
				public Boolean INDICADOR4IsKey(){
				    return false;
				}
				public Integer INDICADOR4Length(){
				    return 0;
				}
				public Integer INDICADOR4Precision(){
				    return 0;
				}
				public String INDICADOR4Default(){
				
					return "";
				
				}
				public String INDICADOR4Comment(){
				
				    return "";
				
				}
				public String INDICADOR4Pattern(){
				
					return "";
				
				}
				public String INDICADOR4OriginalDbColumnName(){
				
					return "INDICADOR4";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.ETAPA = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID1 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR1 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR1 = (BigDecimal) dis.readObject();
					
						this.INDICADOR1 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID2 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR2 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR2 = (BigDecimal) dis.readObject();
					
						this.INDICADOR2 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID3 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR3 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR3 = (BigDecimal) dis.readObject();
					
						this.INDICADOR3 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID4 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR4 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR4 = (BigDecimal) dis.readObject();
					
						this.INDICADOR4 = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.ETAPA = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID1 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR1 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR1 = (BigDecimal) dis.readObject();
					
						this.INDICADOR1 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID2 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR2 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR2 = (BigDecimal) dis.readObject();
					
						this.INDICADOR2 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID3 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR3 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR3 = (BigDecimal) dis.readObject();
					
						this.INDICADOR3 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID4 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR4 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR4 = (BigDecimal) dis.readObject();
					
						this.INDICADOR4 = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID4);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR4);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR4);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR4);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID3);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR3);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR3);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR3);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID4);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR4);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR4);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR4);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",FPERIODO="+String.valueOf(FPERIODO));
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",NRADICADO="+NRADICADO);
		sb.append(",ETAPA="+String.valueOf(ETAPA));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",NUMERADOR="+String.valueOf(NUMERADOR));
		sb.append(",DENOMINADOR="+String.valueOf(DENOMINADOR));
		sb.append(",INDICADOR="+String.valueOf(INDICADOR));
		sb.append(",TINDICADORES_ID1="+String.valueOf(TINDICADORES_ID1));
		sb.append(",NUMERADOR1="+String.valueOf(NUMERADOR1));
		sb.append(",DENOMINADOR1="+String.valueOf(DENOMINADOR1));
		sb.append(",INDICADOR1="+String.valueOf(INDICADOR1));
		sb.append(",TINDICADORES_ID2="+String.valueOf(TINDICADORES_ID2));
		sb.append(",NUMERADOR2="+String.valueOf(NUMERADOR2));
		sb.append(",DENOMINADOR2="+String.valueOf(DENOMINADOR2));
		sb.append(",INDICADOR2="+String.valueOf(INDICADOR2));
		sb.append(",TINDICADORES_ID3="+String.valueOf(TINDICADORES_ID3));
		sb.append(",NUMERADOR3="+String.valueOf(NUMERADOR3));
		sb.append(",DENOMINADOR3="+String.valueOf(DENOMINADOR3));
		sb.append(",INDICADOR3="+String.valueOf(INDICADOR3));
		sb.append(",TINDICADORES_ID4="+String.valueOf(TINDICADORES_ID4));
		sb.append(",NUMERADOR4="+String.valueOf(NUMERADOR4));
		sb.append(",DENOMINADOR4="+String.valueOf(DENOMINADOR4));
		sb.append(",INDICADOR4="+String.valueOf(INDICADOR4));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_22Struct implements routines.system.IPersistableRow<after_tOracleInput_22Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public java.util.Date FPERIODO;

				public java.util.Date getFPERIODO () {
					return this.FPERIODO;
				}

				public Boolean FPERIODOIsNullable(){
				    return true;
				}
				public Boolean FPERIODOIsKey(){
				    return false;
				}
				public Integer FPERIODOLength(){
				    return 0;
				}
				public Integer FPERIODOPrecision(){
				    return 0;
				}
				public String FPERIODODefault(){
				
					return null;
				
				}
				public String FPERIODOComment(){
				
				    return "";
				
				}
				public String FPERIODOPattern(){
				
					return "";
				
				}
				public String FPERIODOOriginalDbColumnName(){
				
					return "FPERIODO";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return 0;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return 0;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public String NRADICADO;

				public String getNRADICADO () {
					return this.NRADICADO;
				}

				public Boolean NRADICADOIsNullable(){
				    return true;
				}
				public Boolean NRADICADOIsKey(){
				    return false;
				}
				public Integer NRADICADOLength(){
				    return 100;
				}
				public Integer NRADICADOPrecision(){
				    return 0;
				}
				public String NRADICADODefault(){
				
					return null;
				
				}
				public String NRADICADOComment(){
				
				    return "";
				
				}
				public String NRADICADOPattern(){
				
					return "";
				
				}
				public String NRADICADOOriginalDbColumnName(){
				
					return "NRADICADO";
				
				}

				
			    public BigDecimal ETAPA;

				public BigDecimal getETAPA () {
					return this.ETAPA;
				}

				public Boolean ETAPAIsNullable(){
				    return false;
				}
				public Boolean ETAPAIsKey(){
				    return false;
				}
				public Integer ETAPALength(){
				    return 0;
				}
				public Integer ETAPAPrecision(){
				    return null;
				}
				public String ETAPADefault(){
				
					return "";
				
				}
				public String ETAPAComment(){
				
				    return "";
				
				}
				public String ETAPAPattern(){
				
					return "";
				
				}
				public String ETAPAOriginalDbColumnName(){
				
					return "ETAPA";
				
				}

				
			    public BigDecimal TINDICADORES_ID;

				public BigDecimal getTINDICADORES_ID () {
					return this.TINDICADORES_ID;
				}

				public Boolean TINDICADORES_IDIsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_IDIsKey(){
				    return false;
				}
				public Integer TINDICADORES_IDLength(){
				    return 0;
				}
				public Integer TINDICADORES_IDPrecision(){
				    return 0;
				}
				public String TINDICADORES_IDDefault(){
				
					return "";
				
				}
				public String TINDICADORES_IDComment(){
				
				    return "";
				
				}
				public String TINDICADORES_IDPattern(){
				
					return "";
				
				}
				public String TINDICADORES_IDOriginalDbColumnName(){
				
					return "TINDICADORES_ID";
				
				}

				
			    public BigDecimal NUMERADOR;

				public BigDecimal getNUMERADOR () {
					return this.NUMERADOR;
				}

				public Boolean NUMERADORIsNullable(){
				    return true;
				}
				public Boolean NUMERADORIsKey(){
				    return false;
				}
				public Integer NUMERADORLength(){
				    return 0;
				}
				public Integer NUMERADORPrecision(){
				    return 0;
				}
				public String NUMERADORDefault(){
				
					return "";
				
				}
				public String NUMERADORComment(){
				
				    return "";
				
				}
				public String NUMERADORPattern(){
				
					return "";
				
				}
				public String NUMERADOROriginalDbColumnName(){
				
					return "NUMERADOR";
				
				}

				
			    public BigDecimal DENOMINADOR;

				public BigDecimal getDENOMINADOR () {
					return this.DENOMINADOR;
				}

				public Boolean DENOMINADORIsNullable(){
				    return true;
				}
				public Boolean DENOMINADORIsKey(){
				    return false;
				}
				public Integer DENOMINADORLength(){
				    return 0;
				}
				public Integer DENOMINADORPrecision(){
				    return 0;
				}
				public String DENOMINADORDefault(){
				
					return "";
				
				}
				public String DENOMINADORComment(){
				
				    return "";
				
				}
				public String DENOMINADORPattern(){
				
					return "";
				
				}
				public String DENOMINADOROriginalDbColumnName(){
				
					return "DENOMINADOR";
				
				}

				
			    public BigDecimal INDICADOR;

				public BigDecimal getINDICADOR () {
					return this.INDICADOR;
				}

				public Boolean INDICADORIsNullable(){
				    return true;
				}
				public Boolean INDICADORIsKey(){
				    return false;
				}
				public Integer INDICADORLength(){
				    return 0;
				}
				public Integer INDICADORPrecision(){
				    return 0;
				}
				public String INDICADORDefault(){
				
					return "";
				
				}
				public String INDICADORComment(){
				
				    return "";
				
				}
				public String INDICADORPattern(){
				
					return "";
				
				}
				public String INDICADOROriginalDbColumnName(){
				
					return "INDICADOR";
				
				}

				
			    public BigDecimal TINDICADORES_ID1;

				public BigDecimal getTINDICADORES_ID1 () {
					return this.TINDICADORES_ID1;
				}

				public Boolean TINDICADORES_ID1IsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_ID1IsKey(){
				    return false;
				}
				public Integer TINDICADORES_ID1Length(){
				    return 0;
				}
				public Integer TINDICADORES_ID1Precision(){
				    return 0;
				}
				public String TINDICADORES_ID1Default(){
				
					return "";
				
				}
				public String TINDICADORES_ID1Comment(){
				
				    return "";
				
				}
				public String TINDICADORES_ID1Pattern(){
				
					return "";
				
				}
				public String TINDICADORES_ID1OriginalDbColumnName(){
				
					return "TINDICADORES_ID1";
				
				}

				
			    public BigDecimal NUMERADOR1;

				public BigDecimal getNUMERADOR1 () {
					return this.NUMERADOR1;
				}

				public Boolean NUMERADOR1IsNullable(){
				    return true;
				}
				public Boolean NUMERADOR1IsKey(){
				    return false;
				}
				public Integer NUMERADOR1Length(){
				    return 0;
				}
				public Integer NUMERADOR1Precision(){
				    return 0;
				}
				public String NUMERADOR1Default(){
				
					return "";
				
				}
				public String NUMERADOR1Comment(){
				
				    return "";
				
				}
				public String NUMERADOR1Pattern(){
				
					return "";
				
				}
				public String NUMERADOR1OriginalDbColumnName(){
				
					return "NUMERADOR1";
				
				}

				
			    public BigDecimal DENOMINADOR1;

				public BigDecimal getDENOMINADOR1 () {
					return this.DENOMINADOR1;
				}

				public Boolean DENOMINADOR1IsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR1IsKey(){
				    return false;
				}
				public Integer DENOMINADOR1Length(){
				    return 0;
				}
				public Integer DENOMINADOR1Precision(){
				    return 0;
				}
				public String DENOMINADOR1Default(){
				
					return "";
				
				}
				public String DENOMINADOR1Comment(){
				
				    return "";
				
				}
				public String DENOMINADOR1Pattern(){
				
					return "";
				
				}
				public String DENOMINADOR1OriginalDbColumnName(){
				
					return "DENOMINADOR1";
				
				}

				
			    public BigDecimal INDICADOR1;

				public BigDecimal getINDICADOR1 () {
					return this.INDICADOR1;
				}

				public Boolean INDICADOR1IsNullable(){
				    return true;
				}
				public Boolean INDICADOR1IsKey(){
				    return false;
				}
				public Integer INDICADOR1Length(){
				    return 0;
				}
				public Integer INDICADOR1Precision(){
				    return 0;
				}
				public String INDICADOR1Default(){
				
					return "";
				
				}
				public String INDICADOR1Comment(){
				
				    return "";
				
				}
				public String INDICADOR1Pattern(){
				
					return "";
				
				}
				public String INDICADOR1OriginalDbColumnName(){
				
					return "INDICADOR1";
				
				}

				
			    public BigDecimal TINDICADORES_ID2;

				public BigDecimal getTINDICADORES_ID2 () {
					return this.TINDICADORES_ID2;
				}

				public Boolean TINDICADORES_ID2IsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_ID2IsKey(){
				    return false;
				}
				public Integer TINDICADORES_ID2Length(){
				    return 0;
				}
				public Integer TINDICADORES_ID2Precision(){
				    return 0;
				}
				public String TINDICADORES_ID2Default(){
				
					return "";
				
				}
				public String TINDICADORES_ID2Comment(){
				
				    return "";
				
				}
				public String TINDICADORES_ID2Pattern(){
				
					return "";
				
				}
				public String TINDICADORES_ID2OriginalDbColumnName(){
				
					return "TINDICADORES_ID2";
				
				}

				
			    public BigDecimal NUMERADOR2;

				public BigDecimal getNUMERADOR2 () {
					return this.NUMERADOR2;
				}

				public Boolean NUMERADOR2IsNullable(){
				    return true;
				}
				public Boolean NUMERADOR2IsKey(){
				    return false;
				}
				public Integer NUMERADOR2Length(){
				    return 0;
				}
				public Integer NUMERADOR2Precision(){
				    return 0;
				}
				public String NUMERADOR2Default(){
				
					return "";
				
				}
				public String NUMERADOR2Comment(){
				
				    return "";
				
				}
				public String NUMERADOR2Pattern(){
				
					return "";
				
				}
				public String NUMERADOR2OriginalDbColumnName(){
				
					return "NUMERADOR2";
				
				}

				
			    public BigDecimal DENOMINADOR2;

				public BigDecimal getDENOMINADOR2 () {
					return this.DENOMINADOR2;
				}

				public Boolean DENOMINADOR2IsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR2IsKey(){
				    return false;
				}
				public Integer DENOMINADOR2Length(){
				    return 0;
				}
				public Integer DENOMINADOR2Precision(){
				    return 0;
				}
				public String DENOMINADOR2Default(){
				
					return "";
				
				}
				public String DENOMINADOR2Comment(){
				
				    return "";
				
				}
				public String DENOMINADOR2Pattern(){
				
					return "";
				
				}
				public String DENOMINADOR2OriginalDbColumnName(){
				
					return "DENOMINADOR2";
				
				}

				
			    public BigDecimal INDICADOR2;

				public BigDecimal getINDICADOR2 () {
					return this.INDICADOR2;
				}

				public Boolean INDICADOR2IsNullable(){
				    return true;
				}
				public Boolean INDICADOR2IsKey(){
				    return false;
				}
				public Integer INDICADOR2Length(){
				    return 0;
				}
				public Integer INDICADOR2Precision(){
				    return 0;
				}
				public String INDICADOR2Default(){
				
					return "";
				
				}
				public String INDICADOR2Comment(){
				
				    return "";
				
				}
				public String INDICADOR2Pattern(){
				
					return "";
				
				}
				public String INDICADOR2OriginalDbColumnName(){
				
					return "INDICADOR2";
				
				}

				
			    public BigDecimal TINDICADORES_ID3;

				public BigDecimal getTINDICADORES_ID3 () {
					return this.TINDICADORES_ID3;
				}

				public Boolean TINDICADORES_ID3IsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_ID3IsKey(){
				    return false;
				}
				public Integer TINDICADORES_ID3Length(){
				    return 0;
				}
				public Integer TINDICADORES_ID3Precision(){
				    return 0;
				}
				public String TINDICADORES_ID3Default(){
				
					return "";
				
				}
				public String TINDICADORES_ID3Comment(){
				
				    return "";
				
				}
				public String TINDICADORES_ID3Pattern(){
				
					return "";
				
				}
				public String TINDICADORES_ID3OriginalDbColumnName(){
				
					return "TINDICADORES_ID3";
				
				}

				
			    public BigDecimal NUMERADOR3;

				public BigDecimal getNUMERADOR3 () {
					return this.NUMERADOR3;
				}

				public Boolean NUMERADOR3IsNullable(){
				    return true;
				}
				public Boolean NUMERADOR3IsKey(){
				    return false;
				}
				public Integer NUMERADOR3Length(){
				    return 0;
				}
				public Integer NUMERADOR3Precision(){
				    return 0;
				}
				public String NUMERADOR3Default(){
				
					return "";
				
				}
				public String NUMERADOR3Comment(){
				
				    return "";
				
				}
				public String NUMERADOR3Pattern(){
				
					return "";
				
				}
				public String NUMERADOR3OriginalDbColumnName(){
				
					return "NUMERADOR3";
				
				}

				
			    public BigDecimal DENOMINADOR3;

				public BigDecimal getDENOMINADOR3 () {
					return this.DENOMINADOR3;
				}

				public Boolean DENOMINADOR3IsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR3IsKey(){
				    return false;
				}
				public Integer DENOMINADOR3Length(){
				    return 0;
				}
				public Integer DENOMINADOR3Precision(){
				    return 0;
				}
				public String DENOMINADOR3Default(){
				
					return "";
				
				}
				public String DENOMINADOR3Comment(){
				
				    return "";
				
				}
				public String DENOMINADOR3Pattern(){
				
					return "";
				
				}
				public String DENOMINADOR3OriginalDbColumnName(){
				
					return "DENOMINADOR3";
				
				}

				
			    public BigDecimal INDICADOR3;

				public BigDecimal getINDICADOR3 () {
					return this.INDICADOR3;
				}

				public Boolean INDICADOR3IsNullable(){
				    return true;
				}
				public Boolean INDICADOR3IsKey(){
				    return false;
				}
				public Integer INDICADOR3Length(){
				    return 0;
				}
				public Integer INDICADOR3Precision(){
				    return 0;
				}
				public String INDICADOR3Default(){
				
					return "";
				
				}
				public String INDICADOR3Comment(){
				
				    return "";
				
				}
				public String INDICADOR3Pattern(){
				
					return "";
				
				}
				public String INDICADOR3OriginalDbColumnName(){
				
					return "INDICADOR3";
				
				}

				
			    public BigDecimal TINDICADORES_ID4;

				public BigDecimal getTINDICADORES_ID4 () {
					return this.TINDICADORES_ID4;
				}

				public Boolean TINDICADORES_ID4IsNullable(){
				    return true;
				}
				public Boolean TINDICADORES_ID4IsKey(){
				    return false;
				}
				public Integer TINDICADORES_ID4Length(){
				    return 0;
				}
				public Integer TINDICADORES_ID4Precision(){
				    return 0;
				}
				public String TINDICADORES_ID4Default(){
				
					return "";
				
				}
				public String TINDICADORES_ID4Comment(){
				
				    return "";
				
				}
				public String TINDICADORES_ID4Pattern(){
				
					return "";
				
				}
				public String TINDICADORES_ID4OriginalDbColumnName(){
				
					return "TINDICADORES_ID4";
				
				}

				
			    public BigDecimal NUMERADOR4;

				public BigDecimal getNUMERADOR4 () {
					return this.NUMERADOR4;
				}

				public Boolean NUMERADOR4IsNullable(){
				    return true;
				}
				public Boolean NUMERADOR4IsKey(){
				    return false;
				}
				public Integer NUMERADOR4Length(){
				    return 0;
				}
				public Integer NUMERADOR4Precision(){
				    return null;
				}
				public String NUMERADOR4Default(){
				
					return "";
				
				}
				public String NUMERADOR4Comment(){
				
				    return "";
				
				}
				public String NUMERADOR4Pattern(){
				
					return "";
				
				}
				public String NUMERADOR4OriginalDbColumnName(){
				
					return "NUMERADOR4";
				
				}

				
			    public BigDecimal DENOMINADOR4;

				public BigDecimal getDENOMINADOR4 () {
					return this.DENOMINADOR4;
				}

				public Boolean DENOMINADOR4IsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR4IsKey(){
				    return false;
				}
				public Integer DENOMINADOR4Length(){
				    return 0;
				}
				public Integer DENOMINADOR4Precision(){
				    return 0;
				}
				public String DENOMINADOR4Default(){
				
					return "";
				
				}
				public String DENOMINADOR4Comment(){
				
				    return "";
				
				}
				public String DENOMINADOR4Pattern(){
				
					return "";
				
				}
				public String DENOMINADOR4OriginalDbColumnName(){
				
					return "DENOMINADOR4";
				
				}

				
			    public BigDecimal INDICADOR4;

				public BigDecimal getINDICADOR4 () {
					return this.INDICADOR4;
				}

				public Boolean INDICADOR4IsNullable(){
				    return true;
				}
				public Boolean INDICADOR4IsKey(){
				    return false;
				}
				public Integer INDICADOR4Length(){
				    return 0;
				}
				public Integer INDICADOR4Precision(){
				    return 0;
				}
				public String INDICADOR4Default(){
				
					return "";
				
				}
				public String INDICADOR4Comment(){
				
				    return "";
				
				}
				public String INDICADOR4Pattern(){
				
					return "";
				
				}
				public String INDICADOR4OriginalDbColumnName(){
				
					return "INDICADOR4";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.ETAPA = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID1 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR1 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR1 = (BigDecimal) dis.readObject();
					
						this.INDICADOR1 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID2 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR2 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR2 = (BigDecimal) dis.readObject();
					
						this.INDICADOR2 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID3 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR3 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR3 = (BigDecimal) dis.readObject();
					
						this.INDICADOR3 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID4 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR4 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR4 = (BigDecimal) dis.readObject();
					
						this.INDICADOR4 = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.FPERIODO = readDate(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
					this.NRADICADO = readString(dis);
					
						this.ETAPA = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID = (BigDecimal) dis.readObject();
					
						this.NUMERADOR = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID1 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR1 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR1 = (BigDecimal) dis.readObject();
					
						this.INDICADOR1 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID2 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR2 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR2 = (BigDecimal) dis.readObject();
					
						this.INDICADOR2 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID3 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR3 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR3 = (BigDecimal) dis.readObject();
					
						this.INDICADOR3 = (BigDecimal) dis.readObject();
					
						this.TINDICADORES_ID4 = (BigDecimal) dis.readObject();
					
						this.NUMERADOR4 = (BigDecimal) dis.readObject();
					
						this.DENOMINADOR4 = (BigDecimal) dis.readObject();
					
						this.INDICADOR4 = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR3);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TINDICADORES_ID4);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NUMERADOR4);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DENOMINADOR4);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR4);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// java.util.Date
				
						writeDate(this.FPERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
					// String
				
						writeString(this.NRADICADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR1);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR2);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID3);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR3);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR3);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR3);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TINDICADORES_ID4);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NUMERADOR4);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DENOMINADOR4);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR4);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",FPERIODO="+String.valueOf(FPERIODO));
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",NRADICADO="+NRADICADO);
		sb.append(",ETAPA="+String.valueOf(ETAPA));
		sb.append(",TINDICADORES_ID="+String.valueOf(TINDICADORES_ID));
		sb.append(",NUMERADOR="+String.valueOf(NUMERADOR));
		sb.append(",DENOMINADOR="+String.valueOf(DENOMINADOR));
		sb.append(",INDICADOR="+String.valueOf(INDICADOR));
		sb.append(",TINDICADORES_ID1="+String.valueOf(TINDICADORES_ID1));
		sb.append(",NUMERADOR1="+String.valueOf(NUMERADOR1));
		sb.append(",DENOMINADOR1="+String.valueOf(DENOMINADOR1));
		sb.append(",INDICADOR1="+String.valueOf(INDICADOR1));
		sb.append(",TINDICADORES_ID2="+String.valueOf(TINDICADORES_ID2));
		sb.append(",NUMERADOR2="+String.valueOf(NUMERADOR2));
		sb.append(",DENOMINADOR2="+String.valueOf(DENOMINADOR2));
		sb.append(",INDICADOR2="+String.valueOf(INDICADOR2));
		sb.append(",TINDICADORES_ID3="+String.valueOf(TINDICADORES_ID3));
		sb.append(",NUMERADOR3="+String.valueOf(NUMERADOR3));
		sb.append(",DENOMINADOR3="+String.valueOf(DENOMINADOR3));
		sb.append(",INDICADOR3="+String.valueOf(INDICADOR3));
		sb.append(",TINDICADORES_ID4="+String.valueOf(TINDICADORES_ID4));
		sb.append(",NUMERADOR4="+String.valueOf(NUMERADOR4));
		sb.append(",DENOMINADOR4="+String.valueOf(DENOMINADOR4));
		sb.append(",INDICADOR4="+String.valueOf(INDICADOR4));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_15Process(globalMap);
		tHashInput_16Process(globalMap);

		row42Struct row42 = new row42Struct();
out1Struct out1 = new out1Struct();
Elimina11Struct Elimina11 = new Elimina11Struct();
Inserta14Struct Inserta14 = new Inserta14Struct();
Elimina12Struct Elimina12 = new Elimina12Struct();
Inserta15Struct Inserta15 = new Inserta15Struct();
Elimina13Struct Elimina13 = new Elimina13Struct();
Inserta16Struct Inserta16 = new Inserta16Struct();
Elimina14Struct Elimina14 = new Elimina14Struct();
Inserta17Struct Inserta17 = new Inserta17Struct();
Elimina15Struct Elimina15 = new Elimina15Struct();
Inserta18Struct Inserta18 = new Inserta18Struct();






	
	/**
	 * [tOracleOutput_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_29", false);
		start_Hash.put("tOracleOutput_29", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_29";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Elimina11");
					}
				
		int tos_count_tOracleOutput_29 = 0;
		






        int deleteKeyCount_tOracleOutput_29 = 6;
        if(deleteKeyCount_tOracleOutput_29 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_29 = 0;
    int nb_line_update_tOracleOutput_29 = 0;
    int nb_line_inserted_tOracleOutput_29 = 0;
    int nb_line_deleted_tOracleOutput_29 = 0;
    int nb_line_rejected_tOracleOutput_29 = 0;

    int tmp_batchUpdateCount_tOracleOutput_29 = 0;

    int deletedCount_tOracleOutput_29=0;
    int updatedCount_tOracleOutput_29=0;
    int insertedCount_tOracleOutput_29=0;
    int rowsToCommitCount_tOracleOutput_29=0;
    int rejectedCount_tOracleOutput_29=0;

    boolean whetherReject_tOracleOutput_29 = false;

    java.sql.Connection conn_tOracleOutput_29 = null;

    //optional table
    String dbschema_tOracleOutput_29 = null;
    String tableName_tOracleOutput_29 = null;
                    String driverClass_tOracleOutput_29 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_29);
                String url_tOracleOutput_29 = null;
                    url_tOracleOutput_29 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_29 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_29 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_29 = decryptedPassword_tOracleOutput_29;
                dbschema_tOracleOutput_29 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_29 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_29.put("user",dbUser_tOracleOutput_29);
                    atnParamsPrope_tOracleOutput_29.put("password",dbPwd_tOracleOutput_29);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_29.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_29 = java.sql.DriverManager.getConnection(url_tOracleOutput_29, atnParamsPrope_tOracleOutput_29);
        resourceMap.put("conn_tOracleOutput_29", conn_tOracleOutput_29);
            conn_tOracleOutput_29.setAutoCommit(false);
            int commitEvery_tOracleOutput_29 = 1000;
            int commitCounter_tOracleOutput_29 = 0;
        int batchSize_tOracleOutput_29 = 1000;
        int batchSizeCounter_tOracleOutput_29=0;
        int count_tOracleOutput_29=0;

        if(dbschema_tOracleOutput_29 == null || dbschema_tOracleOutput_29.trim().length() == 0) {
            tableName_tOracleOutput_29 = ("BACM_INDICADORES");
        } else {
            tableName_tOracleOutput_29 = dbschema_tOracleOutput_29 + "." + ("BACM_INDICADORES");
        }
                String delete_tOracleOutput_29 = "DELETE FROM " + tableName_tOracleOutput_29 + " WHERE UORG_ID = ? AND NRADICADO = ? AND TPAGOS_ID = ? AND TIEMPOS_ID = ? AND TINDICADORES_ID = ? AND PRESTADOR_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_29 = conn_tOracleOutput_29.prepareStatement(delete_tOracleOutput_29);
                resourceMap.put("pstmt_tOracleOutput_29", pstmt_tOracleOutput_29);





 



/**
 * [tOracleOutput_29 begin ] stop
 */




	
	/**
	 * [tOracleOutput_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_30", false);
		start_Hash.put("tOracleOutput_30", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_30";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta14");
					}
				
		int tos_count_tOracleOutput_30 = 0;
		






    
    int nb_line_tOracleOutput_30 = 0;
    int nb_line_update_tOracleOutput_30 = 0;
    int nb_line_inserted_tOracleOutput_30 = 0;
    int nb_line_deleted_tOracleOutput_30 = 0;
    int nb_line_rejected_tOracleOutput_30 = 0;

    int tmp_batchUpdateCount_tOracleOutput_30 = 0;

    int deletedCount_tOracleOutput_30=0;
    int updatedCount_tOracleOutput_30=0;
    int insertedCount_tOracleOutput_30=0;
    int rowsToCommitCount_tOracleOutput_30=0;
    int rejectedCount_tOracleOutput_30=0;

    boolean whetherReject_tOracleOutput_30 = false;

    java.sql.Connection conn_tOracleOutput_30 = null;

    //optional table
    String dbschema_tOracleOutput_30 = null;
    String tableName_tOracleOutput_30 = null;
                    String driverClass_tOracleOutput_30 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_30);
                String url_tOracleOutput_30 = null;
                    url_tOracleOutput_30 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_30 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_30 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_30 = decryptedPassword_tOracleOutput_30;
                dbschema_tOracleOutput_30 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_30 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_30.put("user",dbUser_tOracleOutput_30);
                    atnParamsPrope_tOracleOutput_30.put("password",dbPwd_tOracleOutput_30);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_30.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_30 = java.sql.DriverManager.getConnection(url_tOracleOutput_30, atnParamsPrope_tOracleOutput_30);
        resourceMap.put("conn_tOracleOutput_30", conn_tOracleOutput_30);
            conn_tOracleOutput_30.setAutoCommit(false);
            int commitEvery_tOracleOutput_30 = 1000;
            int commitCounter_tOracleOutput_30 = 0;
        int batchSize_tOracleOutput_30 = 1000;
        int batchSizeCounter_tOracleOutput_30=0;
        int count_tOracleOutput_30=0;

        if(dbschema_tOracleOutput_30 == null || dbschema_tOracleOutput_30.trim().length() == 0) {
            tableName_tOracleOutput_30 = ("BACM_INDICADORES");
        } else {
            tableName_tOracleOutput_30 = dbschema_tOracleOutput_30 + "." + ("BACM_INDICADORES");
        }
                String insert_tOracleOutput_30 = "INSERT INTO " + tableName_tOracleOutput_30 + " (UORG_ID,NRADICADO,ETAPA,TPAGOS_ID,TIEMPOS_ID,TINDICADORES_ID,NUMERADOR,DENOMINADOR,INDICADOR,PRESTADOR_ID) VALUES (?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_30 = conn_tOracleOutput_30.prepareStatement(insert_tOracleOutput_30);
                        resourceMap.put("pstmt_tOracleOutput_30", pstmt_tOracleOutput_30);





 



/**
 * [tOracleOutput_30 begin ] stop
 */




	
	/**
	 * [tOracleOutput_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_31", false);
		start_Hash.put("tOracleOutput_31", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_31";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Elimina12");
					}
				
		int tos_count_tOracleOutput_31 = 0;
		






        int deleteKeyCount_tOracleOutput_31 = 6;
        if(deleteKeyCount_tOracleOutput_31 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_31 = 0;
    int nb_line_update_tOracleOutput_31 = 0;
    int nb_line_inserted_tOracleOutput_31 = 0;
    int nb_line_deleted_tOracleOutput_31 = 0;
    int nb_line_rejected_tOracleOutput_31 = 0;

    int tmp_batchUpdateCount_tOracleOutput_31 = 0;

    int deletedCount_tOracleOutput_31=0;
    int updatedCount_tOracleOutput_31=0;
    int insertedCount_tOracleOutput_31=0;
    int rowsToCommitCount_tOracleOutput_31=0;
    int rejectedCount_tOracleOutput_31=0;

    boolean whetherReject_tOracleOutput_31 = false;

    java.sql.Connection conn_tOracleOutput_31 = null;

    //optional table
    String dbschema_tOracleOutput_31 = null;
    String tableName_tOracleOutput_31 = null;
                    String driverClass_tOracleOutput_31 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_31);
                String url_tOracleOutput_31 = null;
                    url_tOracleOutput_31 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_31 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_31 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_31 = decryptedPassword_tOracleOutput_31;
                dbschema_tOracleOutput_31 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_31 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_31.put("user",dbUser_tOracleOutput_31);
                    atnParamsPrope_tOracleOutput_31.put("password",dbPwd_tOracleOutput_31);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_31.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_31 = java.sql.DriverManager.getConnection(url_tOracleOutput_31, atnParamsPrope_tOracleOutput_31);
        resourceMap.put("conn_tOracleOutput_31", conn_tOracleOutput_31);
            conn_tOracleOutput_31.setAutoCommit(false);
            int commitEvery_tOracleOutput_31 = 1000;
            int commitCounter_tOracleOutput_31 = 0;
        int batchSize_tOracleOutput_31 = 1000;
        int batchSizeCounter_tOracleOutput_31=0;
        int count_tOracleOutput_31=0;

        if(dbschema_tOracleOutput_31 == null || dbschema_tOracleOutput_31.trim().length() == 0) {
            tableName_tOracleOutput_31 = ("BACM_INDICADORES");
        } else {
            tableName_tOracleOutput_31 = dbschema_tOracleOutput_31 + "." + ("BACM_INDICADORES");
        }
                String delete_tOracleOutput_31 = "DELETE FROM " + tableName_tOracleOutput_31 + " WHERE UORG_ID = ? AND NRADICADO = ? AND TPAGOS_ID = ? AND TIEMPOS_ID = ? AND TINDICADORES_ID = ? AND PRESTADOR_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_31 = conn_tOracleOutput_31.prepareStatement(delete_tOracleOutput_31);
                resourceMap.put("pstmt_tOracleOutput_31", pstmt_tOracleOutput_31);





 



/**
 * [tOracleOutput_31 begin ] stop
 */




	
	/**
	 * [tOracleOutput_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_32", false);
		start_Hash.put("tOracleOutput_32", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_32";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta15");
					}
				
		int tos_count_tOracleOutput_32 = 0;
		






    
    int nb_line_tOracleOutput_32 = 0;
    int nb_line_update_tOracleOutput_32 = 0;
    int nb_line_inserted_tOracleOutput_32 = 0;
    int nb_line_deleted_tOracleOutput_32 = 0;
    int nb_line_rejected_tOracleOutput_32 = 0;

    int tmp_batchUpdateCount_tOracleOutput_32 = 0;

    int deletedCount_tOracleOutput_32=0;
    int updatedCount_tOracleOutput_32=0;
    int insertedCount_tOracleOutput_32=0;
    int rowsToCommitCount_tOracleOutput_32=0;
    int rejectedCount_tOracleOutput_32=0;

    boolean whetherReject_tOracleOutput_32 = false;

    java.sql.Connection conn_tOracleOutput_32 = null;

    //optional table
    String dbschema_tOracleOutput_32 = null;
    String tableName_tOracleOutput_32 = null;
                    String driverClass_tOracleOutput_32 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_32);
                String url_tOracleOutput_32 = null;
                    url_tOracleOutput_32 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_32 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_32 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_32 = decryptedPassword_tOracleOutput_32;
                dbschema_tOracleOutput_32 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_32 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_32.put("user",dbUser_tOracleOutput_32);
                    atnParamsPrope_tOracleOutput_32.put("password",dbPwd_tOracleOutput_32);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_32.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_32 = java.sql.DriverManager.getConnection(url_tOracleOutput_32, atnParamsPrope_tOracleOutput_32);
        resourceMap.put("conn_tOracleOutput_32", conn_tOracleOutput_32);
            conn_tOracleOutput_32.setAutoCommit(false);
            int commitEvery_tOracleOutput_32 = 1000;
            int commitCounter_tOracleOutput_32 = 0;
        int batchSize_tOracleOutput_32 = 1000;
        int batchSizeCounter_tOracleOutput_32=0;
        int count_tOracleOutput_32=0;

        if(dbschema_tOracleOutput_32 == null || dbschema_tOracleOutput_32.trim().length() == 0) {
            tableName_tOracleOutput_32 = ("BACM_INDICADORES");
        } else {
            tableName_tOracleOutput_32 = dbschema_tOracleOutput_32 + "." + ("BACM_INDICADORES");
        }
                String insert_tOracleOutput_32 = "INSERT INTO " + tableName_tOracleOutput_32 + " (UORG_ID,NRADICADO,ETAPA,TPAGOS_ID,TIEMPOS_ID,TINDICADORES_ID,NUMERADOR,DENOMINADOR,INDICADOR,PRESTADOR_ID) VALUES (?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_32 = conn_tOracleOutput_32.prepareStatement(insert_tOracleOutput_32);
                        resourceMap.put("pstmt_tOracleOutput_32", pstmt_tOracleOutput_32);





 



/**
 * [tOracleOutput_32 begin ] stop
 */




	
	/**
	 * [tOracleOutput_33 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_33", false);
		start_Hash.put("tOracleOutput_33", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_33";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Elimina13");
					}
				
		int tos_count_tOracleOutput_33 = 0;
		






        int deleteKeyCount_tOracleOutput_33 = 6;
        if(deleteKeyCount_tOracleOutput_33 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_33 = 0;
    int nb_line_update_tOracleOutput_33 = 0;
    int nb_line_inserted_tOracleOutput_33 = 0;
    int nb_line_deleted_tOracleOutput_33 = 0;
    int nb_line_rejected_tOracleOutput_33 = 0;

    int tmp_batchUpdateCount_tOracleOutput_33 = 0;

    int deletedCount_tOracleOutput_33=0;
    int updatedCount_tOracleOutput_33=0;
    int insertedCount_tOracleOutput_33=0;
    int rowsToCommitCount_tOracleOutput_33=0;
    int rejectedCount_tOracleOutput_33=0;

    boolean whetherReject_tOracleOutput_33 = false;

    java.sql.Connection conn_tOracleOutput_33 = null;

    //optional table
    String dbschema_tOracleOutput_33 = null;
    String tableName_tOracleOutput_33 = null;
                    String driverClass_tOracleOutput_33 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_33);
                String url_tOracleOutput_33 = null;
                    url_tOracleOutput_33 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_33 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_33 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_33 = decryptedPassword_tOracleOutput_33;
                dbschema_tOracleOutput_33 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_33 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_33.put("user",dbUser_tOracleOutput_33);
                    atnParamsPrope_tOracleOutput_33.put("password",dbPwd_tOracleOutput_33);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_33.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_33 = java.sql.DriverManager.getConnection(url_tOracleOutput_33, atnParamsPrope_tOracleOutput_33);
        resourceMap.put("conn_tOracleOutput_33", conn_tOracleOutput_33);
            conn_tOracleOutput_33.setAutoCommit(false);
            int commitEvery_tOracleOutput_33 = 1000;
            int commitCounter_tOracleOutput_33 = 0;
        int batchSize_tOracleOutput_33 = 1000;
        int batchSizeCounter_tOracleOutput_33=0;
        int count_tOracleOutput_33=0;

        if(dbschema_tOracleOutput_33 == null || dbschema_tOracleOutput_33.trim().length() == 0) {
            tableName_tOracleOutput_33 = ("BACM_INDICADORES");
        } else {
            tableName_tOracleOutput_33 = dbschema_tOracleOutput_33 + "." + ("BACM_INDICADORES");
        }
                String delete_tOracleOutput_33 = "DELETE FROM " + tableName_tOracleOutput_33 + " WHERE UORG_ID = ? AND NRADICADO = ? AND TPAGOS_ID = ? AND TIEMPOS_ID = ? AND TINDICADORES_ID = ? AND PRESTADOR_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_33 = conn_tOracleOutput_33.prepareStatement(delete_tOracleOutput_33);
                resourceMap.put("pstmt_tOracleOutput_33", pstmt_tOracleOutput_33);





 



/**
 * [tOracleOutput_33 begin ] stop
 */




	
	/**
	 * [tOracleOutput_34 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_34", false);
		start_Hash.put("tOracleOutput_34", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_34";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta16");
					}
				
		int tos_count_tOracleOutput_34 = 0;
		






    
    int nb_line_tOracleOutput_34 = 0;
    int nb_line_update_tOracleOutput_34 = 0;
    int nb_line_inserted_tOracleOutput_34 = 0;
    int nb_line_deleted_tOracleOutput_34 = 0;
    int nb_line_rejected_tOracleOutput_34 = 0;

    int tmp_batchUpdateCount_tOracleOutput_34 = 0;

    int deletedCount_tOracleOutput_34=0;
    int updatedCount_tOracleOutput_34=0;
    int insertedCount_tOracleOutput_34=0;
    int rowsToCommitCount_tOracleOutput_34=0;
    int rejectedCount_tOracleOutput_34=0;

    boolean whetherReject_tOracleOutput_34 = false;

    java.sql.Connection conn_tOracleOutput_34 = null;

    //optional table
    String dbschema_tOracleOutput_34 = null;
    String tableName_tOracleOutput_34 = null;
                    String driverClass_tOracleOutput_34 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_34);
                String url_tOracleOutput_34 = null;
                    url_tOracleOutput_34 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_34 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_34 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_34 = decryptedPassword_tOracleOutput_34;
                dbschema_tOracleOutput_34 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_34 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_34.put("user",dbUser_tOracleOutput_34);
                    atnParamsPrope_tOracleOutput_34.put("password",dbPwd_tOracleOutput_34);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_34.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_34 = java.sql.DriverManager.getConnection(url_tOracleOutput_34, atnParamsPrope_tOracleOutput_34);
        resourceMap.put("conn_tOracleOutput_34", conn_tOracleOutput_34);
            conn_tOracleOutput_34.setAutoCommit(false);
            int commitEvery_tOracleOutput_34 = 1000;
            int commitCounter_tOracleOutput_34 = 0;
        int batchSize_tOracleOutput_34 = 1000;
        int batchSizeCounter_tOracleOutput_34=0;
        int count_tOracleOutput_34=0;

        if(dbschema_tOracleOutput_34 == null || dbschema_tOracleOutput_34.trim().length() == 0) {
            tableName_tOracleOutput_34 = ("BACM_INDICADORES");
        } else {
            tableName_tOracleOutput_34 = dbschema_tOracleOutput_34 + "." + ("BACM_INDICADORES");
        }
                String insert_tOracleOutput_34 = "INSERT INTO " + tableName_tOracleOutput_34 + " (UORG_ID,NRADICADO,ETAPA,TPAGOS_ID,TIEMPOS_ID,TINDICADORES_ID,NUMERADOR,DENOMINADOR,INDICADOR,PRESTADOR_ID) VALUES (?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_34 = conn_tOracleOutput_34.prepareStatement(insert_tOracleOutput_34);
                        resourceMap.put("pstmt_tOracleOutput_34", pstmt_tOracleOutput_34);





 



/**
 * [tOracleOutput_34 begin ] stop
 */




	
	/**
	 * [tOracleOutput_35 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_35", false);
		start_Hash.put("tOracleOutput_35", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_35";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Elimina14");
					}
				
		int tos_count_tOracleOutput_35 = 0;
		






        int deleteKeyCount_tOracleOutput_35 = 6;
        if(deleteKeyCount_tOracleOutput_35 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_35 = 0;
    int nb_line_update_tOracleOutput_35 = 0;
    int nb_line_inserted_tOracleOutput_35 = 0;
    int nb_line_deleted_tOracleOutput_35 = 0;
    int nb_line_rejected_tOracleOutput_35 = 0;

    int tmp_batchUpdateCount_tOracleOutput_35 = 0;

    int deletedCount_tOracleOutput_35=0;
    int updatedCount_tOracleOutput_35=0;
    int insertedCount_tOracleOutput_35=0;
    int rowsToCommitCount_tOracleOutput_35=0;
    int rejectedCount_tOracleOutput_35=0;

    boolean whetherReject_tOracleOutput_35 = false;

    java.sql.Connection conn_tOracleOutput_35 = null;

    //optional table
    String dbschema_tOracleOutput_35 = null;
    String tableName_tOracleOutput_35 = null;
                    String driverClass_tOracleOutput_35 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_35);
                String url_tOracleOutput_35 = null;
                    url_tOracleOutput_35 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_35 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_35 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_35 = decryptedPassword_tOracleOutput_35;
                dbschema_tOracleOutput_35 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_35 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_35.put("user",dbUser_tOracleOutput_35);
                    atnParamsPrope_tOracleOutput_35.put("password",dbPwd_tOracleOutput_35);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_35.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_35 = java.sql.DriverManager.getConnection(url_tOracleOutput_35, atnParamsPrope_tOracleOutput_35);
        resourceMap.put("conn_tOracleOutput_35", conn_tOracleOutput_35);
            conn_tOracleOutput_35.setAutoCommit(false);
            int commitEvery_tOracleOutput_35 = 1000;
            int commitCounter_tOracleOutput_35 = 0;
        int batchSize_tOracleOutput_35 = 1000;
        int batchSizeCounter_tOracleOutput_35=0;
        int count_tOracleOutput_35=0;

        if(dbschema_tOracleOutput_35 == null || dbschema_tOracleOutput_35.trim().length() == 0) {
            tableName_tOracleOutput_35 = ("BACM_INDICADORES");
        } else {
            tableName_tOracleOutput_35 = dbschema_tOracleOutput_35 + "." + ("BACM_INDICADORES");
        }
                String delete_tOracleOutput_35 = "DELETE FROM " + tableName_tOracleOutput_35 + " WHERE UORG_ID = ? AND NRADICADO = ? AND TPAGOS_ID = ? AND TIEMPOS_ID = ? AND TINDICADORES_ID = ? AND PRESTADOR_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_35 = conn_tOracleOutput_35.prepareStatement(delete_tOracleOutput_35);
                resourceMap.put("pstmt_tOracleOutput_35", pstmt_tOracleOutput_35);





 



/**
 * [tOracleOutput_35 begin ] stop
 */




	
	/**
	 * [tOracleOutput_36 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_36", false);
		start_Hash.put("tOracleOutput_36", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_36";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta17");
					}
				
		int tos_count_tOracleOutput_36 = 0;
		






    
    int nb_line_tOracleOutput_36 = 0;
    int nb_line_update_tOracleOutput_36 = 0;
    int nb_line_inserted_tOracleOutput_36 = 0;
    int nb_line_deleted_tOracleOutput_36 = 0;
    int nb_line_rejected_tOracleOutput_36 = 0;

    int tmp_batchUpdateCount_tOracleOutput_36 = 0;

    int deletedCount_tOracleOutput_36=0;
    int updatedCount_tOracleOutput_36=0;
    int insertedCount_tOracleOutput_36=0;
    int rowsToCommitCount_tOracleOutput_36=0;
    int rejectedCount_tOracleOutput_36=0;

    boolean whetherReject_tOracleOutput_36 = false;

    java.sql.Connection conn_tOracleOutput_36 = null;

    //optional table
    String dbschema_tOracleOutput_36 = null;
    String tableName_tOracleOutput_36 = null;
                    String driverClass_tOracleOutput_36 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_36);
                String url_tOracleOutput_36 = null;
                    url_tOracleOutput_36 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_36 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_36 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_36 = decryptedPassword_tOracleOutput_36;
                dbschema_tOracleOutput_36 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_36 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_36.put("user",dbUser_tOracleOutput_36);
                    atnParamsPrope_tOracleOutput_36.put("password",dbPwd_tOracleOutput_36);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_36.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_36 = java.sql.DriverManager.getConnection(url_tOracleOutput_36, atnParamsPrope_tOracleOutput_36);
        resourceMap.put("conn_tOracleOutput_36", conn_tOracleOutput_36);
            conn_tOracleOutput_36.setAutoCommit(false);
            int commitEvery_tOracleOutput_36 = 1000;
            int commitCounter_tOracleOutput_36 = 0;
        int batchSize_tOracleOutput_36 = 1000;
        int batchSizeCounter_tOracleOutput_36=0;
        int count_tOracleOutput_36=0;

        if(dbschema_tOracleOutput_36 == null || dbschema_tOracleOutput_36.trim().length() == 0) {
            tableName_tOracleOutput_36 = ("BACM_INDICADORES");
        } else {
            tableName_tOracleOutput_36 = dbschema_tOracleOutput_36 + "." + ("BACM_INDICADORES");
        }
                String insert_tOracleOutput_36 = "INSERT INTO " + tableName_tOracleOutput_36 + " (UORG_ID,NRADICADO,ETAPA,TPAGOS_ID,TIEMPOS_ID,TINDICADORES_ID,NUMERADOR,DENOMINADOR,INDICADOR,PRESTADOR_ID) VALUES (?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_36 = conn_tOracleOutput_36.prepareStatement(insert_tOracleOutput_36);
                        resourceMap.put("pstmt_tOracleOutput_36", pstmt_tOracleOutput_36);





 



/**
 * [tOracleOutput_36 begin ] stop
 */




	
	/**
	 * [tOracleOutput_37 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_37", false);
		start_Hash.put("tOracleOutput_37", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_37";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Elimina15");
					}
				
		int tos_count_tOracleOutput_37 = 0;
		






        int deleteKeyCount_tOracleOutput_37 = 6;
        if(deleteKeyCount_tOracleOutput_37 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_37 = 0;
    int nb_line_update_tOracleOutput_37 = 0;
    int nb_line_inserted_tOracleOutput_37 = 0;
    int nb_line_deleted_tOracleOutput_37 = 0;
    int nb_line_rejected_tOracleOutput_37 = 0;

    int tmp_batchUpdateCount_tOracleOutput_37 = 0;

    int deletedCount_tOracleOutput_37=0;
    int updatedCount_tOracleOutput_37=0;
    int insertedCount_tOracleOutput_37=0;
    int rowsToCommitCount_tOracleOutput_37=0;
    int rejectedCount_tOracleOutput_37=0;

    boolean whetherReject_tOracleOutput_37 = false;

    java.sql.Connection conn_tOracleOutput_37 = null;

    //optional table
    String dbschema_tOracleOutput_37 = null;
    String tableName_tOracleOutput_37 = null;
                    String driverClass_tOracleOutput_37 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_37);
                String url_tOracleOutput_37 = null;
                    url_tOracleOutput_37 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_37 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_37 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_37 = decryptedPassword_tOracleOutput_37;
                dbschema_tOracleOutput_37 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_37 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_37.put("user",dbUser_tOracleOutput_37);
                    atnParamsPrope_tOracleOutput_37.put("password",dbPwd_tOracleOutput_37);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_37.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_37 = java.sql.DriverManager.getConnection(url_tOracleOutput_37, atnParamsPrope_tOracleOutput_37);
        resourceMap.put("conn_tOracleOutput_37", conn_tOracleOutput_37);
            conn_tOracleOutput_37.setAutoCommit(false);
            int commitEvery_tOracleOutput_37 = 1000;
            int commitCounter_tOracleOutput_37 = 0;
        int batchSize_tOracleOutput_37 = 1000;
        int batchSizeCounter_tOracleOutput_37=0;
        int count_tOracleOutput_37=0;

        if(dbschema_tOracleOutput_37 == null || dbschema_tOracleOutput_37.trim().length() == 0) {
            tableName_tOracleOutput_37 = ("BACM_INDICADORES");
        } else {
            tableName_tOracleOutput_37 = dbschema_tOracleOutput_37 + "." + ("BACM_INDICADORES");
        }
                String delete_tOracleOutput_37 = "DELETE FROM " + tableName_tOracleOutput_37 + " WHERE UORG_ID = ? AND NRADICADO = ? AND TPAGOS_ID = ? AND TIEMPOS_ID = ? AND TINDICADORES_ID = ? AND PRESTADOR_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_37 = conn_tOracleOutput_37.prepareStatement(delete_tOracleOutput_37);
                resourceMap.put("pstmt_tOracleOutput_37", pstmt_tOracleOutput_37);





 



/**
 * [tOracleOutput_37 begin ] stop
 */




	
	/**
	 * [tOracleOutput_38 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_38", false);
		start_Hash.put("tOracleOutput_38", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_38";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta18");
					}
				
		int tos_count_tOracleOutput_38 = 0;
		






    
    int nb_line_tOracleOutput_38 = 0;
    int nb_line_update_tOracleOutput_38 = 0;
    int nb_line_inserted_tOracleOutput_38 = 0;
    int nb_line_deleted_tOracleOutput_38 = 0;
    int nb_line_rejected_tOracleOutput_38 = 0;

    int tmp_batchUpdateCount_tOracleOutput_38 = 0;

    int deletedCount_tOracleOutput_38=0;
    int updatedCount_tOracleOutput_38=0;
    int insertedCount_tOracleOutput_38=0;
    int rowsToCommitCount_tOracleOutput_38=0;
    int rejectedCount_tOracleOutput_38=0;

    boolean whetherReject_tOracleOutput_38 = false;

    java.sql.Connection conn_tOracleOutput_38 = null;

    //optional table
    String dbschema_tOracleOutput_38 = null;
    String tableName_tOracleOutput_38 = null;
                    String driverClass_tOracleOutput_38 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_38);
                String url_tOracleOutput_38 = null;
                    url_tOracleOutput_38 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_38 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_38 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_38 = decryptedPassword_tOracleOutput_38;
                dbschema_tOracleOutput_38 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_38 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_38.put("user",dbUser_tOracleOutput_38);
                    atnParamsPrope_tOracleOutput_38.put("password",dbPwd_tOracleOutput_38);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_38.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_38 = java.sql.DriverManager.getConnection(url_tOracleOutput_38, atnParamsPrope_tOracleOutput_38);
        resourceMap.put("conn_tOracleOutput_38", conn_tOracleOutput_38);
            conn_tOracleOutput_38.setAutoCommit(false);
            int commitEvery_tOracleOutput_38 = 1000;
            int commitCounter_tOracleOutput_38 = 0;
        int batchSize_tOracleOutput_38 = 1000;
        int batchSizeCounter_tOracleOutput_38=0;
        int count_tOracleOutput_38=0;

        if(dbschema_tOracleOutput_38 == null || dbschema_tOracleOutput_38.trim().length() == 0) {
            tableName_tOracleOutput_38 = ("BACM_INDICADORES");
        } else {
            tableName_tOracleOutput_38 = dbschema_tOracleOutput_38 + "." + ("BACM_INDICADORES");
        }
                String insert_tOracleOutput_38 = "INSERT INTO " + tableName_tOracleOutput_38 + " (UORG_ID,NRADICADO,ETAPA,TPAGOS_ID,TIEMPOS_ID,TINDICADORES_ID,NUMERADOR,DENOMINADOR,INDICADOR,PRESTADOR_ID) VALUES (?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_38 = conn_tOracleOutput_38.prepareStatement(insert_tOracleOutput_38);
                        resourceMap.put("pstmt_tOracleOutput_38", pstmt_tOracleOutput_38);





 



/**
 * [tOracleOutput_38 begin ] stop
 */



	
	/**
	 * [tMap_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_14", false);
		start_Hash.put("tMap_14", System.currentTimeMillis());
		
	
	currentComponent="tMap_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tMap_14 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_14__Struct  {
}
Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
Elimina11Struct Elimina11_tmp = new Elimina11Struct();
Inserta14Struct Inserta14_tmp = new Inserta14Struct();
Elimina12Struct Elimina12_tmp = new Elimina12Struct();
Inserta15Struct Inserta15_tmp = new Inserta15Struct();
Elimina13Struct Elimina13_tmp = new Elimina13Struct();
Inserta16Struct Inserta16_tmp = new Inserta16Struct();
Elimina14Struct Elimina14_tmp = new Elimina14Struct();
Inserta17Struct Inserta17_tmp = new Inserta17Struct();
Elimina15Struct Elimina15_tmp = new Elimina15Struct();
Inserta18Struct Inserta18_tmp = new Inserta18Struct();
// ###############################

        
        



        









 



/**
 * [tMap_14 begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tMap_13 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row43Struct> tHash_Lookup_row43 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row43Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row43Struct>) 
					globalMap.get( "tHash_Lookup_row43" ))
					;					
					
	

row43Struct row43HashKey = new row43Struct();
row43Struct row43Default = new row43Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct> tHash_Lookup_row44 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct>) 
					globalMap.get( "tHash_Lookup_row44" ))
					;					
					
	

row44Struct row44HashKey = new row44Struct();
row44Struct row44Default = new row44Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */



	
	/**
	 * [tOracleInput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_22", false);
		start_Hash.put("tOracleInput_22", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_22";
	
	
		int tos_count_tOracleInput_22 = 0;
		
	


	
		    int nb_line_tOracleInput_22 = 0;
		    java.sql.Connection conn_tOracleInput_22 = null;
				conn_tOracleInput_22 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_22 = false;
				boolean isConnectionWrapped_tOracleInput_22 = !(conn_tOracleInput_22 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_22.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_22 = null;
                if (isConnectionWrapped_tOracleInput_22) {
					unwrappedOraConn_tOracleInput_22 = conn_tOracleInput_22.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_22 != null) {
                        isTimeZoneNull_tOracleInput_22 = (unwrappedOraConn_tOracleInput_22.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_22 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_22).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_22) {
					java.sql.Statement stmtGetTZ_tOracleInput_22 = conn_tOracleInput_22.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_22 = stmtGetTZ_tOracleInput_22.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_22 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_22.next()) {
						sessionTimezone_tOracleInput_22 = rsGetTZ_tOracleInput_22.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_22 && unwrappedOraConn_tOracleInput_22 != null) {
                        unwrappedOraConn_tOracleInput_22.setSessionTimeZone(sessionTimezone_tOracleInput_22);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_22).setSessionTimeZone(sessionTimezone_tOracleInput_22);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_22 = conn_tOracleInput_22.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_22.setFetchSize(1000);


		    String dbquery_tOracleInput_22 = "SELECT    UORG_ID \n		, PRESTADOR_ID\n        , FPERIODO\n        , CONTRATOS_ID\n        , CLASE \n        , NRADICADO"
+"\n        , ETAPA \n        , ( SELECT ID FROM GEN_TINDICADORES WHERE CODIGO = 'ACM01' ) AS TINDICADORES_ID\n        , F"
+"ACTURAS_OBJETADAS AS NUMERADOR\n        , FACTURAS_RADICADAS AS DENOMINADOR\n        , CASE \n            WHEN FACTURAS_"
+"RADICADAS > 0 \n            THEN (FACTURAS_OBJETADAS*100)/FACTURAS_RADICADAS\n            ELSE NULL \n          END AS I"
+"NDICADOR\n        , ( SELECT ID FROM GEN_TINDICADORES WHERE CODIGO = 'ACM02' ) AS TINDICADORES_ID1\n        , VALOR_OBJE"
+"TADO AS NUMERADOR1 \n        , VALOR_RADICADO AS DENOMINADOR1\n        , CASE \n            WHEN VALOR_RADICADO > 0 \n  "
+"          THEN (VALOR_OBJETADO*100)/VALOR_RADICADO\n            ELSE NULL \n          END AS INDICADOR1\n        , ( SEL"
+"ECT ID FROM GEN_TINDICADORES WHERE CODIGO = 'ACM03' ) AS TINDICADORES_ID2\n        , VALOR_GDEFINITIVA AS NUMERADOR2\n  "
+"      , VALOR_OBJETADO AS DENOMINADOR2\n        , CASE \n            WHEN VALOR_OBJETADO > 0 \n            THEN (VALOR_G"
+"DEFINITIVA*100)/VALOR_OBJETADO\n            ELSE NULL \n          END AS INDICADOR2\n        , ( SELECT ID FROM GEN_TIND"
+"ICADORES WHERE CODIGO = 'ACM04' ) AS TINDICADORES_ID3\n        , VALOR_GDEFINITIVA AS NUMERADOR3\n        , VALOR_RADICA"
+"DO AS DENOMINADOR3\n        , CASE \n            WHEN VALOR_RADICADO > 0 \n            THEN (VALOR_GDEFINITIVA*100)/VALO"
+"R_RADICADO\n            ELSE NULL \n          END AS INDICADOR3\n        , ( SELECT ID FROM GEN_TINDICADORES WHERE CODIG"
+"O = 'ACM05' ) AS TINDICADORES_ID4\n        , FACTURAS_AUDITADAS AS NUMERADOR4\n        , FACTURAS_RADICADAS AS DENOMINAD"
+"OR4\n        , CASE \n            WHEN FACTURAS_RADICADAS > 0 \n            THEN ( FACTURAS_AUDITADAS*100 )/FACTURAS_RAD"
+"ICADAS\n            ELSE NULL \n          END AS INDICADOR4\nFROM ( \n    SELECT    RE.UORG_ID\n			, RE.PRESTADOR_ID\n  "
+"          , TRUNC ( RE.FRADICADO, 'MONTH' ) AS FPERIODO\n            , COALESCE( RE.CONTRATOS_ID, RE.MEDCONTRATOS_ID, 0 "
+") AS CONTRATOS_ID\n            , CASE  \n                  WHEN RE.CONTRATOS_ID IS NOT NULL\n                  THEN 1\n "
+"                 WHEN RE.MEDCONTRATOS_ID IS NOT NULL \n                  THEN 2\n                  ELSE 3\n             "
+" END AS CLASE\n            , RE.RADICADO AS NRADICADO\n            , EN.CODIGO AS ETAPA        \n            , COUNT (\n"
+"                CASE \n                  WHEN FA.VGLOSADO > 0  \n                  THEN FA.ID\n                  ELSE NU"
+"LL\n                END \n              ) AS FACTURAS_OBJETADAS\n            , COUNT ( FA.ID ) AS FACTURAS_RADICADAS\n  "
+"          , NVL( SUM( FA.VGLOSADO ), 0) AS VALOR_OBJETADO\n            , NVL( SUM( FA.VALOR ), 0) AS VALOR_RADICADO\n   "
+"         , NVL( SUM( FA.VACEPTADO ), 0) AS VALOR_GDEFINITIVA\n            , NVL( AUD.AUDITADAS, 0)  AS FACTURAS_AUDITADA"
+"S\n             \n    FROM ACM_HAUDITORIAS HA\n    INNER JOIN ( \n        SELECT ID FROM ( \n            SELECT    HA.ID"
+"\n                    , HA.RECEPCION_ID\n                    , ROW_NUMBER() OVER (PARTITION BY HA.RECEPCION_ID ORDER BY "
+"HA.FIETAPA DESC) R\n            FROM ACM_HAUDITORIAS HA\n            WHERE HA.ESTREGISTRO_ID = 1\n              " +context.CONDICION_INDICADORES+ "\n        ) WHERE R = 1\n    ) COND ON COND.ID = HA.ID\n    INNER JOIN ACM_ETAPASNORMATIVIDAD EN ON EN.ID = HA.ETAPASNO"
+"RMATIVIDAD_ID\n    INNER JOIN ACM_RECEPCION RE ON RE.ID = HA.RECEPCION_ID\n    INNER JOIN ACM_FACTURA FA ON FA.RECEPCION"
+"_ID = RE.ID\n    LEFT JOIN ( \n        SELECT    HA.RECEPCION_ID\n                , COUNT ( FA.ID ) AS AUDITADAS\n      "
+"  FROM ACM_ETAPASNORMATIVIDAD EN\n        INNER JOIN ACM_HAUDITORIAS HA ON EN.ID = HA.ETAPASNORMATIVIDAD_ID\n        INN"
+"ER JOIN ACM_ESTAUDITORIAS ESA ON ESA.ID = HA.ESTAUDITORIA_ID\n        INNER JOIN ACM_FACTURA FA ON FA.RECEPCION_ID = HA."
+"RECEPCION_ID\n        WHERE EN.CODIGO = 1        \n          AND HA.ESTREGISTRO_ID = 1  \n          AND FA.ESTREGISTRO_I"
+"D = 1\n          AND ESA.NOMBRE = 'Finalizada'         \n        GROUP BY HA.RECEPCION_ID\n    ) AUD ON AUD.RECEPCION_ID"
+" = RE.ID \n    WHERE HA.ESTREGISTRO_ID = 1\n      AND EN.ESTREGISTRO_ID = 1\n      AND RE.ESTREGISTRO_ID = 1\n      AND "
+"FA.ESTREGISTRO_ID = 1\n    GROUP BY  RE.UORG_ID\n            , TRUNC ( RE.FRADICADO, 'MONTH' ) \n            , COALESCE("
+" RE.CONTRATOS_ID, RE.MEDCONTRATOS_ID, 0 ) \n            , CASE  \n                  WHEN RE.CONTRATOS_ID IS NOT NULL\n  "
+"                THEN 1\n                  WHEN RE.MEDCONTRATOS_ID IS NOT NULL \n                  THEN 2\n              "
+"    ELSE 3\n              END \n            , RE.RADICADO\n            , EN.CODIGO\n			, AUD.AUDITADAS\n			, RE.PRESTADO"
+"R_ID\n)";
		    

		    globalMap.put("tOracleInput_22_QUERY",dbquery_tOracleInput_22);

		    java.sql.ResultSet rs_tOracleInput_22 = null;

		    try {
		    	rs_tOracleInput_22 = stmt_tOracleInput_22.executeQuery(dbquery_tOracleInput_22);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_22 = rs_tOracleInput_22.getMetaData();
		    	int colQtyInRs_tOracleInput_22 = rsmd_tOracleInput_22.getColumnCount();

		    String tmpContent_tOracleInput_22 = null;
		    
		    
		    while (rs_tOracleInput_22.next()) {
		        nb_line_tOracleInput_22++;
		        
							if(colQtyInRs_tOracleInput_22 < 1) {
								row42.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(1) != null) {
						row42.UORG_ID = rs_tOracleInput_22.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 2) {
								row42.PRESTADOR_ID = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(2) != null) {
						row42.PRESTADOR_ID = rs_tOracleInput_22.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 3) {
								row42.FPERIODO = null;
							} else {
										
			row42.FPERIODO = routines.system.JDBCUtil.getDate(rs_tOracleInput_22, 3);
		                    }
							if(colQtyInRs_tOracleInput_22 < 4) {
								row42.CONTRATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(4) != null) {
						row42.CONTRATOS_ID = rs_tOracleInput_22.getBigDecimal(4);
					} else {
				
						row42.CONTRATOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 5) {
								row42.CLASE = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(5) != null) {
						row42.CLASE = rs_tOracleInput_22.getBigDecimal(5);
					} else {
				
						row42.CLASE = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 6) {
								row42.NRADICADO = null;
							} else {
	                         		
        	row42.NRADICADO = routines.system.JDBCUtil.getString(rs_tOracleInput_22, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_22 < 7) {
								row42.ETAPA = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(7) != null) {
						row42.ETAPA = rs_tOracleInput_22.getBigDecimal(7);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 8) {
								row42.TINDICADORES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(8) != null) {
						row42.TINDICADORES_ID = rs_tOracleInput_22.getBigDecimal(8);
					} else {
				
						row42.TINDICADORES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 9) {
								row42.NUMERADOR = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(9) != null) {
						row42.NUMERADOR = rs_tOracleInput_22.getBigDecimal(9);
					} else {
				
						row42.NUMERADOR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 10) {
								row42.DENOMINADOR = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(10) != null) {
						row42.DENOMINADOR = rs_tOracleInput_22.getBigDecimal(10);
					} else {
				
						row42.DENOMINADOR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 11) {
								row42.INDICADOR = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(11) != null) {
						row42.INDICADOR = rs_tOracleInput_22.getBigDecimal(11);
					} else {
				
						row42.INDICADOR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 12) {
								row42.TINDICADORES_ID1 = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(12) != null) {
						row42.TINDICADORES_ID1 = rs_tOracleInput_22.getBigDecimal(12);
					} else {
				
						row42.TINDICADORES_ID1 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 13) {
								row42.NUMERADOR1 = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(13) != null) {
						row42.NUMERADOR1 = rs_tOracleInput_22.getBigDecimal(13);
					} else {
				
						row42.NUMERADOR1 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 14) {
								row42.DENOMINADOR1 = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(14) != null) {
						row42.DENOMINADOR1 = rs_tOracleInput_22.getBigDecimal(14);
					} else {
				
						row42.DENOMINADOR1 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 15) {
								row42.INDICADOR1 = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(15) != null) {
						row42.INDICADOR1 = rs_tOracleInput_22.getBigDecimal(15);
					} else {
				
						row42.INDICADOR1 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 16) {
								row42.TINDICADORES_ID2 = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(16) != null) {
						row42.TINDICADORES_ID2 = rs_tOracleInput_22.getBigDecimal(16);
					} else {
				
						row42.TINDICADORES_ID2 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 17) {
								row42.NUMERADOR2 = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(17) != null) {
						row42.NUMERADOR2 = rs_tOracleInput_22.getBigDecimal(17);
					} else {
				
						row42.NUMERADOR2 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 18) {
								row42.DENOMINADOR2 = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(18) != null) {
						row42.DENOMINADOR2 = rs_tOracleInput_22.getBigDecimal(18);
					} else {
				
						row42.DENOMINADOR2 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 19) {
								row42.INDICADOR2 = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(19) != null) {
						row42.INDICADOR2 = rs_tOracleInput_22.getBigDecimal(19);
					} else {
				
						row42.INDICADOR2 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 20) {
								row42.TINDICADORES_ID3 = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(20) != null) {
						row42.TINDICADORES_ID3 = rs_tOracleInput_22.getBigDecimal(20);
					} else {
				
						row42.TINDICADORES_ID3 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 21) {
								row42.NUMERADOR3 = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(21) != null) {
						row42.NUMERADOR3 = rs_tOracleInput_22.getBigDecimal(21);
					} else {
				
						row42.NUMERADOR3 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 22) {
								row42.DENOMINADOR3 = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(22) != null) {
						row42.DENOMINADOR3 = rs_tOracleInput_22.getBigDecimal(22);
					} else {
				
						row42.DENOMINADOR3 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 23) {
								row42.INDICADOR3 = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(23) != null) {
						row42.INDICADOR3 = rs_tOracleInput_22.getBigDecimal(23);
					} else {
				
						row42.INDICADOR3 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 24) {
								row42.TINDICADORES_ID4 = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(24) != null) {
						row42.TINDICADORES_ID4 = rs_tOracleInput_22.getBigDecimal(24);
					} else {
				
						row42.TINDICADORES_ID4 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 25) {
								row42.NUMERADOR4 = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(25) != null) {
						row42.NUMERADOR4 = rs_tOracleInput_22.getBigDecimal(25);
					} else {
				
						row42.NUMERADOR4 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 26) {
								row42.DENOMINADOR4 = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(26) != null) {
						row42.DENOMINADOR4 = rs_tOracleInput_22.getBigDecimal(26);
					} else {
				
						row42.DENOMINADOR4 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_22 < 27) {
								row42.INDICADOR4 = null;
							} else {
		                          
					if(rs_tOracleInput_22.getObject(27) != null) {
						row42.INDICADOR4 = rs_tOracleInput_22.getBigDecimal(27);
					} else {
				
						row42.INDICADOR4 = null;
					}
		                    }
					




 



/**
 * [tOracleInput_22 begin ] stop
 */
	
	/**
	 * [tOracleInput_22 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_22";
	
	

 


	tos_count_tOracleInput_22++;

/**
 * [tOracleInput_22 main ] stop
 */
	
	/**
	 * [tOracleInput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_22";
	
	

 



/**
 * [tOracleInput_22 process_data_begin ] stop
 */

	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row42"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		
						row43Struct row43 = null;
					
						row44Struct row44 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_13 = false;
		boolean mainRowRejected_tMap_13 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row43" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow43 = false;
       		  	    	
       		  	    	
 							row43Struct row43ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_13) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_13 = false;
								
                        		    		    row43HashKey.CONTRATOS_ID = row42.CONTRATOS_ID ;
                        		    		
                        		    		    row43HashKey.CLASE = row42.CLASE ;
                        		    		

								
		                        	row43HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row43.lookup( row43HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row43.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_13 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row43 != null && tHash_Lookup_row43.getCount(row43HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row43' and it contains more one result from keys :  row43.CONTRATOS_ID = '" + row43HashKey.CONTRATOS_ID + "', row43.CLASE = '" + row43HashKey.CLASE + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row43Struct fromLookup_row43 = null;
							row43 = row43Default;
										 
							
								 
							
							
								if (tHash_Lookup_row43 !=null && tHash_Lookup_row43.hasNext()) { // G 099
								
							
								
								fromLookup_row43 = tHash_Lookup_row43.next();

							
							
								} // G 099
							
							

							if(fromLookup_row43 != null) {
								row43 = fromLookup_row43;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row44" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow44 = false;
       		  	    	
       		  	    	
 							row44Struct row44ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_13) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_13 = false;
								
                        		    		    row44HashKey.FECHA = row42.FPERIODO  == null ? null : new java.util.Date((row42.FPERIODO ).getTime());
                        		    		

								
		                        	row44HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row44.lookup( row44HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row44.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_13 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row44 != null && tHash_Lookup_row44.getCount(row44HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row44' and it contains more one result from keys :  row44.FECHA = '" + row44HashKey.FECHA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row44Struct fromLookup_row44 = null;
							row44 = row44Default;
										 
							
								 
							
							
								if (tHash_Lookup_row44 !=null && tHash_Lookup_row44.hasNext()) { // G 099
								
							
								
								fromLookup_row44 = tHash_Lookup_row44.next();

							
							
								} // G 099
							
							

							if(fromLookup_row44 != null) {
								row44 = fromLookup_row44;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
        // ###############################
        // # Output tables

out1 = null;

if(!rejectedInnerJoin_tMap_13 ) {

// # Output table : 'out1'
out1_tmp.UORG_ID = row42.UORG_ID ;
out1_tmp.NRADICADO = row42.NRADICADO ;
out1_tmp.ETAPA = row42.ETAPA ;
out1_tmp.TPAGOS_ID = row43.ID ;
out1_tmp.TIEMPOS_ID = row44.ID ;
out1_tmp.TINDICADORES_ID = row42.TINDICADORES_ID ;
out1_tmp.NUMERADOR = row42.NUMERADOR ;
out1_tmp.DENOMINADOR = row42.DENOMINADOR ;
out1_tmp.INDICADOR = row42.INDICADOR ;
out1_tmp.TINDICADORES_ID1 = row42.TINDICADORES_ID1 ;
out1_tmp.NUMERADOR1 = row42.NUMERADOR1 ;
out1_tmp.DENOMINADOR1 = row42.DENOMINADOR1 ;
out1_tmp.INDICADOR1 = row42.INDICADOR1 ;
out1_tmp.TINDICADORES_ID2 = row42.TINDICADORES_ID2 ;
out1_tmp.NUMERADOR2 = row42.NUMERADOR2 ;
out1_tmp.DENOMINADOR2 = row42.DENOMINADOR2 ;
out1_tmp.INDICADOR2 = row42.INDICADOR2 ;
out1_tmp.TINDICADORES_ID3 = row42.TINDICADORES_ID3 ;
out1_tmp.NUMERADOR3 = row42.NUMERADOR3 ;
out1_tmp.DENOMINADOR3 = row42.DENOMINADOR3 ;
out1_tmp.INDICADOR3 = row42.INDICADOR3 ;
out1_tmp.TINDICADORES_ID4 = row42.TINDICADORES_ID4 ;
out1_tmp.NUMERADOR4 = row42.NUMERADOR4 ;
out1_tmp.DENOMINADOR4 = row42.DENOMINADOR4 ;
out1_tmp.INDICADOR4 = row42.INDICADOR4 ;
out1_tmp.PRESTADOR_ID = row42.PRESTADOR_ID ;
out1 = out1_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
	
	/**
	 * [tMap_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	

 



/**
 * [tMap_13 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tMap_14 main ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_14 = false;
		boolean mainRowRejected_tMap_14 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
        // ###############################
        // # Output tables

Elimina11 = null;
Inserta14 = null;
Elimina12 = null;
Inserta15 = null;
Elimina13 = null;
Inserta16 = null;
Elimina14 = null;
Inserta17 = null;
Elimina15 = null;
Inserta18 = null;


// # Output table : 'Elimina11'
Elimina11_tmp.UORG_ID = out1.UORG_ID ;
Elimina11_tmp.NRADICADO = out1.NRADICADO ;
Elimina11_tmp.TPAGOS_ID = out1.TPAGOS_ID ;
Elimina11_tmp.TIEMPOS_ID = out1.TIEMPOS_ID ;
Elimina11_tmp.TINDICADORES_ID = out1.TINDICADORES_ID ;
Elimina11_tmp.PRESTADOR_ID = out1.PRESTADOR_ID ;
Elimina11 = Elimina11_tmp;

// # Output table : 'Inserta14'
Inserta14_tmp.UORG_ID = out1.UORG_ID ;
Inserta14_tmp.NRADICADO = out1.NRADICADO ;
Inserta14_tmp.ETAPA = out1.ETAPA ;
Inserta14_tmp.TPAGOS_ID = out1.TPAGOS_ID ;
Inserta14_tmp.TIEMPOS_ID = out1.TIEMPOS_ID ;
Inserta14_tmp.TINDICADORES_ID = out1.TINDICADORES_ID ;
Inserta14_tmp.NUMERADOR = out1.NUMERADOR ;
Inserta14_tmp.DENOMINADOR = out1.DENOMINADOR ;
Inserta14_tmp.INDICADOR = out1.INDICADOR ;
Inserta14_tmp.PRESTADOR_ID = out1.PRESTADOR_ID ;
Inserta14 = Inserta14_tmp;

// # Output table : 'Elimina12'
Elimina12_tmp.UORG_ID = out1.UORG_ID ;
Elimina12_tmp.NRADICADO = out1.NRADICADO ;
Elimina12_tmp.TPAGOS_ID = out1.TPAGOS_ID ;
Elimina12_tmp.TIEMPOS_ID = out1.TIEMPOS_ID ;
Elimina12_tmp.TINDICADORES_ID = out1.TINDICADORES_ID1 ;
Elimina12_tmp.PRESTADOR_ID = out1.PRESTADOR_ID ;
Elimina12 = Elimina12_tmp;

// # Output table : 'Inserta15'
Inserta15_tmp.UORG_ID = out1.UORG_ID ;
Inserta15_tmp.NRADICADO = out1.NRADICADO ;
Inserta15_tmp.ETAPA = out1.ETAPA ;
Inserta15_tmp.TPAGOS_ID = out1.TPAGOS_ID ;
Inserta15_tmp.TIEMPOS_ID = out1.TIEMPOS_ID ;
Inserta15_tmp.TINDICADORES_ID = out1.TINDICADORES_ID1 ;
Inserta15_tmp.NUMERADOR = out1.NUMERADOR1 ;
Inserta15_tmp.DENOMINADOR = out1.DENOMINADOR1 ;
Inserta15_tmp.INDICADOR = out1.INDICADOR1 ;
Inserta15_tmp.PRESTADOR_ID = out1.PRESTADOR_ID ;
Inserta15 = Inserta15_tmp;

// # Output table : 'Elimina13'
Elimina13_tmp.UORG_ID = out1.UORG_ID ;
Elimina13_tmp.NRADICADO = out1.NRADICADO ;
Elimina13_tmp.TPAGOS_ID = out1.TPAGOS_ID ;
Elimina13_tmp.TIEMPOS_ID = out1.TIEMPOS_ID ;
Elimina13_tmp.TINDICADORES_ID = out1.TINDICADORES_ID2 ;
Elimina13_tmp.PRESTADOR_ID = out1.PRESTADOR_ID ;
Elimina13 = Elimina13_tmp;

// # Output table : 'Inserta16'
Inserta16_tmp.UORG_ID = out1.UORG_ID ;
Inserta16_tmp.NRADICADO = out1.NRADICADO ;
Inserta16_tmp.ETAPA = out1.ETAPA ;
Inserta16_tmp.TPAGOS_ID = out1.TPAGOS_ID ;
Inserta16_tmp.TIEMPOS_ID = out1.TIEMPOS_ID ;
Inserta16_tmp.TINDICADORES_ID = out1.TINDICADORES_ID2 ;
Inserta16_tmp.NUMERADOR = out1.NUMERADOR2 ;
Inserta16_tmp.DENOMINADOR = out1.DENOMINADOR2 ;
Inserta16_tmp.INDICADOR = out1.INDICADOR2 ;
Inserta16_tmp.PRESTADOR_ID = out1.PRESTADOR_ID ;
Inserta16 = Inserta16_tmp;

// # Output table : 'Elimina14'
Elimina14_tmp.UORG_ID = out1.UORG_ID ;
Elimina14_tmp.NRADICADO = out1.NRADICADO ;
Elimina14_tmp.TPAGOS_ID = out1.TPAGOS_ID ;
Elimina14_tmp.TIEMPOS_ID = out1.TIEMPOS_ID ;
Elimina14_tmp.TINDICADORES_ID = out1.TINDICADORES_ID3 ;
Elimina14_tmp.PRESTADOR_ID = out1.PRESTADOR_ID ;
Elimina14 = Elimina14_tmp;

// # Output table : 'Inserta17'
Inserta17_tmp.UORG_ID = out1.UORG_ID ;
Inserta17_tmp.NRADICADO = out1.NRADICADO ;
Inserta17_tmp.ETAPA = out1.ETAPA ;
Inserta17_tmp.TPAGOS_ID = out1.TPAGOS_ID ;
Inserta17_tmp.TIEMPOS_ID = out1.TIEMPOS_ID ;
Inserta17_tmp.TINDICADORES_ID = out1.TINDICADORES_ID3 ;
Inserta17_tmp.NUMERADOR = out1.NUMERADOR3 ;
Inserta17_tmp.DENOMINADOR = out1.DENOMINADOR3 ;
Inserta17_tmp.INDICADOR = out1.INDICADOR3 ;
Inserta17_tmp.PRESTADOR_ID = out1.PRESTADOR_ID ;
Inserta17 = Inserta17_tmp;

// # Output table : 'Elimina15'
Elimina15_tmp.UORG_ID = out1.UORG_ID ;
Elimina15_tmp.NRADICADO = out1.NRADICADO ;
Elimina15_tmp.TPAGOS_ID = out1.TPAGOS_ID ;
Elimina15_tmp.TIEMPOS_ID = out1.TIEMPOS_ID ;
Elimina15_tmp.TINDICADORES_ID = out1.TINDICADORES_ID4 ;
Elimina15_tmp.PRESTADOR_ID = out1.PRESTADOR_ID ;
Elimina15 = Elimina15_tmp;

// # Output table : 'Inserta18'
Inserta18_tmp.UORG_ID = out1.UORG_ID ;
Inserta18_tmp.NRADICADO = out1.NRADICADO ;
Inserta18_tmp.ETAPA = out1.ETAPA ;
Inserta18_tmp.TPAGOS_ID = out1.TPAGOS_ID ;
Inserta18_tmp.TIEMPOS_ID = out1.TIEMPOS_ID ;
Inserta18_tmp.TINDICADORES_ID = out1.TINDICADORES_ID4 ;
Inserta18_tmp.NUMERADOR = out1.NUMERADOR4 ;
Inserta18_tmp.DENOMINADOR = out1.DENOMINADOR4 ;
Inserta18_tmp.INDICADOR = out1.INDICADOR4 ;
Inserta18_tmp.PRESTADOR_ID = out1.PRESTADOR_ID ;
Inserta18 = Inserta18_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_14 = false;










 


	tos_count_tMap_14++;

/**
 * [tMap_14 main ] stop
 */
	
	/**
	 * [tMap_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	

 



/**
 * [tMap_14 process_data_begin ] stop
 */
// Start of branch "Elimina11"
if(Elimina11 != null) { 



	
	/**
	 * [tOracleOutput_29 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_29";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Elimina11"
						
						);
					}
					



        whetherReject_tOracleOutput_29 = false;
                    pstmt_tOracleOutput_29.setBigDecimal(1, Elimina11.UORG_ID);

                    if(Elimina11.NRADICADO == null) {
pstmt_tOracleOutput_29.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_29.setString(2, Elimina11.NRADICADO);
}

                    pstmt_tOracleOutput_29.setBigDecimal(3, Elimina11.TPAGOS_ID);

                    pstmt_tOracleOutput_29.setBigDecimal(4, Elimina11.TIEMPOS_ID);

                    pstmt_tOracleOutput_29.setBigDecimal(5, Elimina11.TINDICADORES_ID);

                    pstmt_tOracleOutput_29.setBigDecimal(6, Elimina11.PRESTADOR_ID);

                pstmt_tOracleOutput_29.addBatch();
                nb_line_tOracleOutput_29++;
                batchSizeCounter_tOracleOutput_29++;
            if (batchSize_tOracleOutput_29 > 0 &&  batchSize_tOracleOutput_29 <= batchSizeCounter_tOracleOutput_29) {
                try {
                    pstmt_tOracleOutput_29.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_29){
globalMap.put("tOracleOutput_29_ERROR_MESSAGE",e_tOracleOutput_29.getMessage());
			        java.sql.SQLException ne_tOracleOutput_29 = e_tOracleOutput_29.getNextException(),sqle_tOracleOutput_29=null;
			    	String errormessage_tOracleOutput_29;
					if (ne_tOracleOutput_29 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_29 = new java.sql.SQLException(e_tOracleOutput_29.getMessage() + "\ncaused by: " + ne_tOracleOutput_29.getMessage(), ne_tOracleOutput_29.getSQLState(), ne_tOracleOutput_29.getErrorCode(), ne_tOracleOutput_29);
						errormessage_tOracleOutput_29 = sqle_tOracleOutput_29.getMessage();
					}else{
						errormessage_tOracleOutput_29 = e_tOracleOutput_29.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_29);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_29 = pstmt_tOracleOutput_29.getUpdateCount();
                    deletedCount_tOracleOutput_29
                += (tmp_batchUpdateCount_tOracleOutput_29!=-1?tmp_batchUpdateCount_tOracleOutput_29:0);
                rowsToCommitCount_tOracleOutput_29 += (tmp_batchUpdateCount_tOracleOutput_29!=-1?tmp_batchUpdateCount_tOracleOutput_29:0);
                batchSizeCounter_tOracleOutput_29 = 0;
            }
                commitCounter_tOracleOutput_29++;
                if(commitEvery_tOracleOutput_29 <= commitCounter_tOracleOutput_29) {
                    if(batchSizeCounter_tOracleOutput_29 > 0) {
                        try {
                            pstmt_tOracleOutput_29.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_29){
globalMap.put("tOracleOutput_29_ERROR_MESSAGE",e_tOracleOutput_29.getMessage());
					        java.sql.SQLException ne_tOracleOutput_29 = e_tOracleOutput_29.getNextException(),sqle_tOracleOutput_29=null;
					    	String errormessage_tOracleOutput_29;
							if (ne_tOracleOutput_29 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_29 = new java.sql.SQLException(e_tOracleOutput_29.getMessage() + "\ncaused by: " + ne_tOracleOutput_29.getMessage(), ne_tOracleOutput_29.getSQLState(), ne_tOracleOutput_29.getErrorCode(), ne_tOracleOutput_29);
								errormessage_tOracleOutput_29 = sqle_tOracleOutput_29.getMessage();
							}else{
								errormessage_tOracleOutput_29 = e_tOracleOutput_29.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_29);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_29 = pstmt_tOracleOutput_29.getUpdateCount();
                            deletedCount_tOracleOutput_29
                        += (tmp_batchUpdateCount_tOracleOutput_29!=-1?tmp_batchUpdateCount_tOracleOutput_29:0);
                        rowsToCommitCount_tOracleOutput_29 += (tmp_batchUpdateCount_tOracleOutput_29!=-1?tmp_batchUpdateCount_tOracleOutput_29:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_29 != 0){
                    	
                    }
                    conn_tOracleOutput_29.commit();
                    if(rowsToCommitCount_tOracleOutput_29 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_29 = 0;
                    }
                    commitCounter_tOracleOutput_29=0;
                    	batchSizeCounter_tOracleOutput_29=0;
                }

 


	tos_count_tOracleOutput_29++;

/**
 * [tOracleOutput_29 main ] stop
 */
	
	/**
	 * [tOracleOutput_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_29";
	
	

 



/**
 * [tOracleOutput_29 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_29";
	
	

 



/**
 * [tOracleOutput_29 process_data_end ] stop
 */

} // End of branch "Elimina11"




// Start of branch "Inserta14"
if(Inserta14 != null) { 



	
	/**
	 * [tOracleOutput_30 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_30";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta14"
						
						);
					}
					



        whetherReject_tOracleOutput_30 = false;
                        pstmt_tOracleOutput_30.setBigDecimal(1, Inserta14.UORG_ID);

                        if(Inserta14.NRADICADO == null) {
pstmt_tOracleOutput_30.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_30.setString(2, Inserta14.NRADICADO);
}

                        pstmt_tOracleOutput_30.setBigDecimal(3, Inserta14.ETAPA);

                        pstmt_tOracleOutput_30.setBigDecimal(4, Inserta14.TPAGOS_ID);

                        pstmt_tOracleOutput_30.setBigDecimal(5, Inserta14.TIEMPOS_ID);

                        pstmt_tOracleOutput_30.setBigDecimal(6, Inserta14.TINDICADORES_ID);

                        pstmt_tOracleOutput_30.setBigDecimal(7, Inserta14.NUMERADOR);

                        pstmt_tOracleOutput_30.setBigDecimal(8, Inserta14.DENOMINADOR);

                        pstmt_tOracleOutput_30.setBigDecimal(9, Inserta14.INDICADOR);

                        pstmt_tOracleOutput_30.setBigDecimal(10, Inserta14.PRESTADOR_ID);

                pstmt_tOracleOutput_30.addBatch();
                nb_line_tOracleOutput_30++;
                batchSizeCounter_tOracleOutput_30++;
            if (batchSize_tOracleOutput_30 > 0 &&  batchSize_tOracleOutput_30 <= batchSizeCounter_tOracleOutput_30) {
                try {
                    pstmt_tOracleOutput_30.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_30){
globalMap.put("tOracleOutput_30_ERROR_MESSAGE",e_tOracleOutput_30.getMessage());
			        java.sql.SQLException ne_tOracleOutput_30 = e_tOracleOutput_30.getNextException(),sqle_tOracleOutput_30=null;
			    	String errormessage_tOracleOutput_30;
					if (ne_tOracleOutput_30 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_30 = new java.sql.SQLException(e_tOracleOutput_30.getMessage() + "\ncaused by: " + ne_tOracleOutput_30.getMessage(), ne_tOracleOutput_30.getSQLState(), ne_tOracleOutput_30.getErrorCode(), ne_tOracleOutput_30);
						errormessage_tOracleOutput_30 = sqle_tOracleOutput_30.getMessage();
					}else{
						errormessage_tOracleOutput_30 = e_tOracleOutput_30.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_30);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_30 = pstmt_tOracleOutput_30.getUpdateCount();
                    insertedCount_tOracleOutput_30
                += (tmp_batchUpdateCount_tOracleOutput_30!=-1?tmp_batchUpdateCount_tOracleOutput_30:0);
                rowsToCommitCount_tOracleOutput_30 += (tmp_batchUpdateCount_tOracleOutput_30!=-1?tmp_batchUpdateCount_tOracleOutput_30:0);
                batchSizeCounter_tOracleOutput_30 = 0;
            }
                commitCounter_tOracleOutput_30++;
                if(commitEvery_tOracleOutput_30 <= commitCounter_tOracleOutput_30) {
                    if(batchSizeCounter_tOracleOutput_30 > 0) {
                        try {
                            pstmt_tOracleOutput_30.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_30){
globalMap.put("tOracleOutput_30_ERROR_MESSAGE",e_tOracleOutput_30.getMessage());
					        java.sql.SQLException ne_tOracleOutput_30 = e_tOracleOutput_30.getNextException(),sqle_tOracleOutput_30=null;
					    	String errormessage_tOracleOutput_30;
							if (ne_tOracleOutput_30 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_30 = new java.sql.SQLException(e_tOracleOutput_30.getMessage() + "\ncaused by: " + ne_tOracleOutput_30.getMessage(), ne_tOracleOutput_30.getSQLState(), ne_tOracleOutput_30.getErrorCode(), ne_tOracleOutput_30);
								errormessage_tOracleOutput_30 = sqle_tOracleOutput_30.getMessage();
							}else{
								errormessage_tOracleOutput_30 = e_tOracleOutput_30.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_30);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_30 = pstmt_tOracleOutput_30.getUpdateCount();
                            insertedCount_tOracleOutput_30
                        += (tmp_batchUpdateCount_tOracleOutput_30!=-1?tmp_batchUpdateCount_tOracleOutput_30:0);
                        rowsToCommitCount_tOracleOutput_30 += (tmp_batchUpdateCount_tOracleOutput_30!=-1?tmp_batchUpdateCount_tOracleOutput_30:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_30 != 0){
                    	
                    }
                    conn_tOracleOutput_30.commit();
                    if(rowsToCommitCount_tOracleOutput_30 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_30 = 0;
                    }
                    commitCounter_tOracleOutput_30=0;
                    	batchSizeCounter_tOracleOutput_30=0;
                }

 


	tos_count_tOracleOutput_30++;

/**
 * [tOracleOutput_30 main ] stop
 */
	
	/**
	 * [tOracleOutput_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_30";
	
	

 



/**
 * [tOracleOutput_30 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_30";
	
	

 



/**
 * [tOracleOutput_30 process_data_end ] stop
 */

} // End of branch "Inserta14"




// Start of branch "Elimina12"
if(Elimina12 != null) { 



	
	/**
	 * [tOracleOutput_31 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_31";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Elimina12"
						
						);
					}
					



        whetherReject_tOracleOutput_31 = false;
                    pstmt_tOracleOutput_31.setBigDecimal(1, Elimina12.UORG_ID);

                    if(Elimina12.NRADICADO == null) {
pstmt_tOracleOutput_31.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_31.setString(2, Elimina12.NRADICADO);
}

                    pstmt_tOracleOutput_31.setBigDecimal(3, Elimina12.TPAGOS_ID);

                    pstmt_tOracleOutput_31.setBigDecimal(4, Elimina12.TIEMPOS_ID);

                    pstmt_tOracleOutput_31.setBigDecimal(5, Elimina12.TINDICADORES_ID);

                    pstmt_tOracleOutput_31.setBigDecimal(6, Elimina12.PRESTADOR_ID);

                pstmt_tOracleOutput_31.addBatch();
                nb_line_tOracleOutput_31++;
                batchSizeCounter_tOracleOutput_31++;
            if (batchSize_tOracleOutput_31 > 0 &&  batchSize_tOracleOutput_31 <= batchSizeCounter_tOracleOutput_31) {
                try {
                    pstmt_tOracleOutput_31.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_31){
globalMap.put("tOracleOutput_31_ERROR_MESSAGE",e_tOracleOutput_31.getMessage());
			        java.sql.SQLException ne_tOracleOutput_31 = e_tOracleOutput_31.getNextException(),sqle_tOracleOutput_31=null;
			    	String errormessage_tOracleOutput_31;
					if (ne_tOracleOutput_31 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_31 = new java.sql.SQLException(e_tOracleOutput_31.getMessage() + "\ncaused by: " + ne_tOracleOutput_31.getMessage(), ne_tOracleOutput_31.getSQLState(), ne_tOracleOutput_31.getErrorCode(), ne_tOracleOutput_31);
						errormessage_tOracleOutput_31 = sqle_tOracleOutput_31.getMessage();
					}else{
						errormessage_tOracleOutput_31 = e_tOracleOutput_31.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_31);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_31 = pstmt_tOracleOutput_31.getUpdateCount();
                    deletedCount_tOracleOutput_31
                += (tmp_batchUpdateCount_tOracleOutput_31!=-1?tmp_batchUpdateCount_tOracleOutput_31:0);
                rowsToCommitCount_tOracleOutput_31 += (tmp_batchUpdateCount_tOracleOutput_31!=-1?tmp_batchUpdateCount_tOracleOutput_31:0);
                batchSizeCounter_tOracleOutput_31 = 0;
            }
                commitCounter_tOracleOutput_31++;
                if(commitEvery_tOracleOutput_31 <= commitCounter_tOracleOutput_31) {
                    if(batchSizeCounter_tOracleOutput_31 > 0) {
                        try {
                            pstmt_tOracleOutput_31.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_31){
globalMap.put("tOracleOutput_31_ERROR_MESSAGE",e_tOracleOutput_31.getMessage());
					        java.sql.SQLException ne_tOracleOutput_31 = e_tOracleOutput_31.getNextException(),sqle_tOracleOutput_31=null;
					    	String errormessage_tOracleOutput_31;
							if (ne_tOracleOutput_31 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_31 = new java.sql.SQLException(e_tOracleOutput_31.getMessage() + "\ncaused by: " + ne_tOracleOutput_31.getMessage(), ne_tOracleOutput_31.getSQLState(), ne_tOracleOutput_31.getErrorCode(), ne_tOracleOutput_31);
								errormessage_tOracleOutput_31 = sqle_tOracleOutput_31.getMessage();
							}else{
								errormessage_tOracleOutput_31 = e_tOracleOutput_31.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_31);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_31 = pstmt_tOracleOutput_31.getUpdateCount();
                            deletedCount_tOracleOutput_31
                        += (tmp_batchUpdateCount_tOracleOutput_31!=-1?tmp_batchUpdateCount_tOracleOutput_31:0);
                        rowsToCommitCount_tOracleOutput_31 += (tmp_batchUpdateCount_tOracleOutput_31!=-1?tmp_batchUpdateCount_tOracleOutput_31:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_31 != 0){
                    	
                    }
                    conn_tOracleOutput_31.commit();
                    if(rowsToCommitCount_tOracleOutput_31 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_31 = 0;
                    }
                    commitCounter_tOracleOutput_31=0;
                    	batchSizeCounter_tOracleOutput_31=0;
                }

 


	tos_count_tOracleOutput_31++;

/**
 * [tOracleOutput_31 main ] stop
 */
	
	/**
	 * [tOracleOutput_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_31";
	
	

 



/**
 * [tOracleOutput_31 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_31";
	
	

 



/**
 * [tOracleOutput_31 process_data_end ] stop
 */

} // End of branch "Elimina12"




// Start of branch "Inserta15"
if(Inserta15 != null) { 



	
	/**
	 * [tOracleOutput_32 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_32";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta15"
						
						);
					}
					



        whetherReject_tOracleOutput_32 = false;
                        pstmt_tOracleOutput_32.setBigDecimal(1, Inserta15.UORG_ID);

                        if(Inserta15.NRADICADO == null) {
pstmt_tOracleOutput_32.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_32.setString(2, Inserta15.NRADICADO);
}

                        pstmt_tOracleOutput_32.setBigDecimal(3, Inserta15.ETAPA);

                        pstmt_tOracleOutput_32.setBigDecimal(4, Inserta15.TPAGOS_ID);

                        pstmt_tOracleOutput_32.setBigDecimal(5, Inserta15.TIEMPOS_ID);

                        pstmt_tOracleOutput_32.setBigDecimal(6, Inserta15.TINDICADORES_ID);

                        pstmt_tOracleOutput_32.setBigDecimal(7, Inserta15.NUMERADOR);

                        pstmt_tOracleOutput_32.setBigDecimal(8, Inserta15.DENOMINADOR);

                        pstmt_tOracleOutput_32.setBigDecimal(9, Inserta15.INDICADOR);

                        pstmt_tOracleOutput_32.setBigDecimal(10, Inserta15.PRESTADOR_ID);

                pstmt_tOracleOutput_32.addBatch();
                nb_line_tOracleOutput_32++;
                batchSizeCounter_tOracleOutput_32++;
            if (batchSize_tOracleOutput_32 > 0 &&  batchSize_tOracleOutput_32 <= batchSizeCounter_tOracleOutput_32) {
                try {
                    pstmt_tOracleOutput_32.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_32){
globalMap.put("tOracleOutput_32_ERROR_MESSAGE",e_tOracleOutput_32.getMessage());
			        java.sql.SQLException ne_tOracleOutput_32 = e_tOracleOutput_32.getNextException(),sqle_tOracleOutput_32=null;
			    	String errormessage_tOracleOutput_32;
					if (ne_tOracleOutput_32 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_32 = new java.sql.SQLException(e_tOracleOutput_32.getMessage() + "\ncaused by: " + ne_tOracleOutput_32.getMessage(), ne_tOracleOutput_32.getSQLState(), ne_tOracleOutput_32.getErrorCode(), ne_tOracleOutput_32);
						errormessage_tOracleOutput_32 = sqle_tOracleOutput_32.getMessage();
					}else{
						errormessage_tOracleOutput_32 = e_tOracleOutput_32.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_32);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_32 = pstmt_tOracleOutput_32.getUpdateCount();
                    insertedCount_tOracleOutput_32
                += (tmp_batchUpdateCount_tOracleOutput_32!=-1?tmp_batchUpdateCount_tOracleOutput_32:0);
                rowsToCommitCount_tOracleOutput_32 += (tmp_batchUpdateCount_tOracleOutput_32!=-1?tmp_batchUpdateCount_tOracleOutput_32:0);
                batchSizeCounter_tOracleOutput_32 = 0;
            }
                commitCounter_tOracleOutput_32++;
                if(commitEvery_tOracleOutput_32 <= commitCounter_tOracleOutput_32) {
                    if(batchSizeCounter_tOracleOutput_32 > 0) {
                        try {
                            pstmt_tOracleOutput_32.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_32){
globalMap.put("tOracleOutput_32_ERROR_MESSAGE",e_tOracleOutput_32.getMessage());
					        java.sql.SQLException ne_tOracleOutput_32 = e_tOracleOutput_32.getNextException(),sqle_tOracleOutput_32=null;
					    	String errormessage_tOracleOutput_32;
							if (ne_tOracleOutput_32 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_32 = new java.sql.SQLException(e_tOracleOutput_32.getMessage() + "\ncaused by: " + ne_tOracleOutput_32.getMessage(), ne_tOracleOutput_32.getSQLState(), ne_tOracleOutput_32.getErrorCode(), ne_tOracleOutput_32);
								errormessage_tOracleOutput_32 = sqle_tOracleOutput_32.getMessage();
							}else{
								errormessage_tOracleOutput_32 = e_tOracleOutput_32.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_32);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_32 = pstmt_tOracleOutput_32.getUpdateCount();
                            insertedCount_tOracleOutput_32
                        += (tmp_batchUpdateCount_tOracleOutput_32!=-1?tmp_batchUpdateCount_tOracleOutput_32:0);
                        rowsToCommitCount_tOracleOutput_32 += (tmp_batchUpdateCount_tOracleOutput_32!=-1?tmp_batchUpdateCount_tOracleOutput_32:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_32 != 0){
                    	
                    }
                    conn_tOracleOutput_32.commit();
                    if(rowsToCommitCount_tOracleOutput_32 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_32 = 0;
                    }
                    commitCounter_tOracleOutput_32=0;
                    	batchSizeCounter_tOracleOutput_32=0;
                }

 


	tos_count_tOracleOutput_32++;

/**
 * [tOracleOutput_32 main ] stop
 */
	
	/**
	 * [tOracleOutput_32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_32";
	
	

 



/**
 * [tOracleOutput_32 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_32 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_32";
	
	

 



/**
 * [tOracleOutput_32 process_data_end ] stop
 */

} // End of branch "Inserta15"




// Start of branch "Elimina13"
if(Elimina13 != null) { 



	
	/**
	 * [tOracleOutput_33 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_33";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Elimina13"
						
						);
					}
					



        whetherReject_tOracleOutput_33 = false;
                    pstmt_tOracleOutput_33.setBigDecimal(1, Elimina13.UORG_ID);

                    if(Elimina13.NRADICADO == null) {
pstmt_tOracleOutput_33.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_33.setString(2, Elimina13.NRADICADO);
}

                    pstmt_tOracleOutput_33.setBigDecimal(3, Elimina13.TPAGOS_ID);

                    pstmt_tOracleOutput_33.setBigDecimal(4, Elimina13.TIEMPOS_ID);

                    pstmt_tOracleOutput_33.setBigDecimal(5, Elimina13.TINDICADORES_ID);

                    pstmt_tOracleOutput_33.setBigDecimal(6, Elimina13.PRESTADOR_ID);

                pstmt_tOracleOutput_33.addBatch();
                nb_line_tOracleOutput_33++;
                batchSizeCounter_tOracleOutput_33++;
            if (batchSize_tOracleOutput_33 > 0 &&  batchSize_tOracleOutput_33 <= batchSizeCounter_tOracleOutput_33) {
                try {
                    pstmt_tOracleOutput_33.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_33){
globalMap.put("tOracleOutput_33_ERROR_MESSAGE",e_tOracleOutput_33.getMessage());
			        java.sql.SQLException ne_tOracleOutput_33 = e_tOracleOutput_33.getNextException(),sqle_tOracleOutput_33=null;
			    	String errormessage_tOracleOutput_33;
					if (ne_tOracleOutput_33 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_33 = new java.sql.SQLException(e_tOracleOutput_33.getMessage() + "\ncaused by: " + ne_tOracleOutput_33.getMessage(), ne_tOracleOutput_33.getSQLState(), ne_tOracleOutput_33.getErrorCode(), ne_tOracleOutput_33);
						errormessage_tOracleOutput_33 = sqle_tOracleOutput_33.getMessage();
					}else{
						errormessage_tOracleOutput_33 = e_tOracleOutput_33.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_33);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_33 = pstmt_tOracleOutput_33.getUpdateCount();
                    deletedCount_tOracleOutput_33
                += (tmp_batchUpdateCount_tOracleOutput_33!=-1?tmp_batchUpdateCount_tOracleOutput_33:0);
                rowsToCommitCount_tOracleOutput_33 += (tmp_batchUpdateCount_tOracleOutput_33!=-1?tmp_batchUpdateCount_tOracleOutput_33:0);
                batchSizeCounter_tOracleOutput_33 = 0;
            }
                commitCounter_tOracleOutput_33++;
                if(commitEvery_tOracleOutput_33 <= commitCounter_tOracleOutput_33) {
                    if(batchSizeCounter_tOracleOutput_33 > 0) {
                        try {
                            pstmt_tOracleOutput_33.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_33){
globalMap.put("tOracleOutput_33_ERROR_MESSAGE",e_tOracleOutput_33.getMessage());
					        java.sql.SQLException ne_tOracleOutput_33 = e_tOracleOutput_33.getNextException(),sqle_tOracleOutput_33=null;
					    	String errormessage_tOracleOutput_33;
							if (ne_tOracleOutput_33 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_33 = new java.sql.SQLException(e_tOracleOutput_33.getMessage() + "\ncaused by: " + ne_tOracleOutput_33.getMessage(), ne_tOracleOutput_33.getSQLState(), ne_tOracleOutput_33.getErrorCode(), ne_tOracleOutput_33);
								errormessage_tOracleOutput_33 = sqle_tOracleOutput_33.getMessage();
							}else{
								errormessage_tOracleOutput_33 = e_tOracleOutput_33.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_33);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_33 = pstmt_tOracleOutput_33.getUpdateCount();
                            deletedCount_tOracleOutput_33
                        += (tmp_batchUpdateCount_tOracleOutput_33!=-1?tmp_batchUpdateCount_tOracleOutput_33:0);
                        rowsToCommitCount_tOracleOutput_33 += (tmp_batchUpdateCount_tOracleOutput_33!=-1?tmp_batchUpdateCount_tOracleOutput_33:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_33 != 0){
                    	
                    }
                    conn_tOracleOutput_33.commit();
                    if(rowsToCommitCount_tOracleOutput_33 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_33 = 0;
                    }
                    commitCounter_tOracleOutput_33=0;
                    	batchSizeCounter_tOracleOutput_33=0;
                }

 


	tos_count_tOracleOutput_33++;

/**
 * [tOracleOutput_33 main ] stop
 */
	
	/**
	 * [tOracleOutput_33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_33";
	
	

 



/**
 * [tOracleOutput_33 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_33 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_33";
	
	

 



/**
 * [tOracleOutput_33 process_data_end ] stop
 */

} // End of branch "Elimina13"




// Start of branch "Inserta16"
if(Inserta16 != null) { 



	
	/**
	 * [tOracleOutput_34 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_34";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta16"
						
						);
					}
					



        whetherReject_tOracleOutput_34 = false;
                        pstmt_tOracleOutput_34.setBigDecimal(1, Inserta16.UORG_ID);

                        if(Inserta16.NRADICADO == null) {
pstmt_tOracleOutput_34.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_34.setString(2, Inserta16.NRADICADO);
}

                        pstmt_tOracleOutput_34.setBigDecimal(3, Inserta16.ETAPA);

                        pstmt_tOracleOutput_34.setBigDecimal(4, Inserta16.TPAGOS_ID);

                        pstmt_tOracleOutput_34.setBigDecimal(5, Inserta16.TIEMPOS_ID);

                        pstmt_tOracleOutput_34.setBigDecimal(6, Inserta16.TINDICADORES_ID);

                        pstmt_tOracleOutput_34.setBigDecimal(7, Inserta16.NUMERADOR);

                        pstmt_tOracleOutput_34.setBigDecimal(8, Inserta16.DENOMINADOR);

                        pstmt_tOracleOutput_34.setBigDecimal(9, Inserta16.INDICADOR);

                        pstmt_tOracleOutput_34.setBigDecimal(10, Inserta16.PRESTADOR_ID);

                pstmt_tOracleOutput_34.addBatch();
                nb_line_tOracleOutput_34++;
                batchSizeCounter_tOracleOutput_34++;
            if (batchSize_tOracleOutput_34 > 0 &&  batchSize_tOracleOutput_34 <= batchSizeCounter_tOracleOutput_34) {
                try {
                    pstmt_tOracleOutput_34.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_34){
globalMap.put("tOracleOutput_34_ERROR_MESSAGE",e_tOracleOutput_34.getMessage());
			        java.sql.SQLException ne_tOracleOutput_34 = e_tOracleOutput_34.getNextException(),sqle_tOracleOutput_34=null;
			    	String errormessage_tOracleOutput_34;
					if (ne_tOracleOutput_34 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_34 = new java.sql.SQLException(e_tOracleOutput_34.getMessage() + "\ncaused by: " + ne_tOracleOutput_34.getMessage(), ne_tOracleOutput_34.getSQLState(), ne_tOracleOutput_34.getErrorCode(), ne_tOracleOutput_34);
						errormessage_tOracleOutput_34 = sqle_tOracleOutput_34.getMessage();
					}else{
						errormessage_tOracleOutput_34 = e_tOracleOutput_34.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_34);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_34 = pstmt_tOracleOutput_34.getUpdateCount();
                    insertedCount_tOracleOutput_34
                += (tmp_batchUpdateCount_tOracleOutput_34!=-1?tmp_batchUpdateCount_tOracleOutput_34:0);
                rowsToCommitCount_tOracleOutput_34 += (tmp_batchUpdateCount_tOracleOutput_34!=-1?tmp_batchUpdateCount_tOracleOutput_34:0);
                batchSizeCounter_tOracleOutput_34 = 0;
            }
                commitCounter_tOracleOutput_34++;
                if(commitEvery_tOracleOutput_34 <= commitCounter_tOracleOutput_34) {
                    if(batchSizeCounter_tOracleOutput_34 > 0) {
                        try {
                            pstmt_tOracleOutput_34.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_34){
globalMap.put("tOracleOutput_34_ERROR_MESSAGE",e_tOracleOutput_34.getMessage());
					        java.sql.SQLException ne_tOracleOutput_34 = e_tOracleOutput_34.getNextException(),sqle_tOracleOutput_34=null;
					    	String errormessage_tOracleOutput_34;
							if (ne_tOracleOutput_34 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_34 = new java.sql.SQLException(e_tOracleOutput_34.getMessage() + "\ncaused by: " + ne_tOracleOutput_34.getMessage(), ne_tOracleOutput_34.getSQLState(), ne_tOracleOutput_34.getErrorCode(), ne_tOracleOutput_34);
								errormessage_tOracleOutput_34 = sqle_tOracleOutput_34.getMessage();
							}else{
								errormessage_tOracleOutput_34 = e_tOracleOutput_34.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_34);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_34 = pstmt_tOracleOutput_34.getUpdateCount();
                            insertedCount_tOracleOutput_34
                        += (tmp_batchUpdateCount_tOracleOutput_34!=-1?tmp_batchUpdateCount_tOracleOutput_34:0);
                        rowsToCommitCount_tOracleOutput_34 += (tmp_batchUpdateCount_tOracleOutput_34!=-1?tmp_batchUpdateCount_tOracleOutput_34:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_34 != 0){
                    	
                    }
                    conn_tOracleOutput_34.commit();
                    if(rowsToCommitCount_tOracleOutput_34 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_34 = 0;
                    }
                    commitCounter_tOracleOutput_34=0;
                    	batchSizeCounter_tOracleOutput_34=0;
                }

 


	tos_count_tOracleOutput_34++;

/**
 * [tOracleOutput_34 main ] stop
 */
	
	/**
	 * [tOracleOutput_34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_34";
	
	

 



/**
 * [tOracleOutput_34 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_34 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_34";
	
	

 



/**
 * [tOracleOutput_34 process_data_end ] stop
 */

} // End of branch "Inserta16"




// Start of branch "Elimina14"
if(Elimina14 != null) { 



	
	/**
	 * [tOracleOutput_35 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_35";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Elimina14"
						
						);
					}
					



        whetherReject_tOracleOutput_35 = false;
                    pstmt_tOracleOutput_35.setBigDecimal(1, Elimina14.UORG_ID);

                    if(Elimina14.NRADICADO == null) {
pstmt_tOracleOutput_35.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_35.setString(2, Elimina14.NRADICADO);
}

                    pstmt_tOracleOutput_35.setBigDecimal(3, Elimina14.TPAGOS_ID);

                    pstmt_tOracleOutput_35.setBigDecimal(4, Elimina14.TIEMPOS_ID);

                    pstmt_tOracleOutput_35.setBigDecimal(5, Elimina14.TINDICADORES_ID);

                    pstmt_tOracleOutput_35.setBigDecimal(6, Elimina14.PRESTADOR_ID);

                pstmt_tOracleOutput_35.addBatch();
                nb_line_tOracleOutput_35++;
                batchSizeCounter_tOracleOutput_35++;
            if (batchSize_tOracleOutput_35 > 0 &&  batchSize_tOracleOutput_35 <= batchSizeCounter_tOracleOutput_35) {
                try {
                    pstmt_tOracleOutput_35.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_35){
globalMap.put("tOracleOutput_35_ERROR_MESSAGE",e_tOracleOutput_35.getMessage());
			        java.sql.SQLException ne_tOracleOutput_35 = e_tOracleOutput_35.getNextException(),sqle_tOracleOutput_35=null;
			    	String errormessage_tOracleOutput_35;
					if (ne_tOracleOutput_35 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_35 = new java.sql.SQLException(e_tOracleOutput_35.getMessage() + "\ncaused by: " + ne_tOracleOutput_35.getMessage(), ne_tOracleOutput_35.getSQLState(), ne_tOracleOutput_35.getErrorCode(), ne_tOracleOutput_35);
						errormessage_tOracleOutput_35 = sqle_tOracleOutput_35.getMessage();
					}else{
						errormessage_tOracleOutput_35 = e_tOracleOutput_35.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_35);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_35 = pstmt_tOracleOutput_35.getUpdateCount();
                    deletedCount_tOracleOutput_35
                += (tmp_batchUpdateCount_tOracleOutput_35!=-1?tmp_batchUpdateCount_tOracleOutput_35:0);
                rowsToCommitCount_tOracleOutput_35 += (tmp_batchUpdateCount_tOracleOutput_35!=-1?tmp_batchUpdateCount_tOracleOutput_35:0);
                batchSizeCounter_tOracleOutput_35 = 0;
            }
                commitCounter_tOracleOutput_35++;
                if(commitEvery_tOracleOutput_35 <= commitCounter_tOracleOutput_35) {
                    if(batchSizeCounter_tOracleOutput_35 > 0) {
                        try {
                            pstmt_tOracleOutput_35.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_35){
globalMap.put("tOracleOutput_35_ERROR_MESSAGE",e_tOracleOutput_35.getMessage());
					        java.sql.SQLException ne_tOracleOutput_35 = e_tOracleOutput_35.getNextException(),sqle_tOracleOutput_35=null;
					    	String errormessage_tOracleOutput_35;
							if (ne_tOracleOutput_35 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_35 = new java.sql.SQLException(e_tOracleOutput_35.getMessage() + "\ncaused by: " + ne_tOracleOutput_35.getMessage(), ne_tOracleOutput_35.getSQLState(), ne_tOracleOutput_35.getErrorCode(), ne_tOracleOutput_35);
								errormessage_tOracleOutput_35 = sqle_tOracleOutput_35.getMessage();
							}else{
								errormessage_tOracleOutput_35 = e_tOracleOutput_35.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_35);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_35 = pstmt_tOracleOutput_35.getUpdateCount();
                            deletedCount_tOracleOutput_35
                        += (tmp_batchUpdateCount_tOracleOutput_35!=-1?tmp_batchUpdateCount_tOracleOutput_35:0);
                        rowsToCommitCount_tOracleOutput_35 += (tmp_batchUpdateCount_tOracleOutput_35!=-1?tmp_batchUpdateCount_tOracleOutput_35:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_35 != 0){
                    	
                    }
                    conn_tOracleOutput_35.commit();
                    if(rowsToCommitCount_tOracleOutput_35 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_35 = 0;
                    }
                    commitCounter_tOracleOutput_35=0;
                    	batchSizeCounter_tOracleOutput_35=0;
                }

 


	tos_count_tOracleOutput_35++;

/**
 * [tOracleOutput_35 main ] stop
 */
	
	/**
	 * [tOracleOutput_35 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_35";
	
	

 



/**
 * [tOracleOutput_35 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_35 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_35";
	
	

 



/**
 * [tOracleOutput_35 process_data_end ] stop
 */

} // End of branch "Elimina14"




// Start of branch "Inserta17"
if(Inserta17 != null) { 



	
	/**
	 * [tOracleOutput_36 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_36";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta17"
						
						);
					}
					



        whetherReject_tOracleOutput_36 = false;
                        pstmt_tOracleOutput_36.setBigDecimal(1, Inserta17.UORG_ID);

                        if(Inserta17.NRADICADO == null) {
pstmt_tOracleOutput_36.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_36.setString(2, Inserta17.NRADICADO);
}

                        pstmt_tOracleOutput_36.setBigDecimal(3, Inserta17.ETAPA);

                        pstmt_tOracleOutput_36.setBigDecimal(4, Inserta17.TPAGOS_ID);

                        pstmt_tOracleOutput_36.setBigDecimal(5, Inserta17.TIEMPOS_ID);

                        pstmt_tOracleOutput_36.setBigDecimal(6, Inserta17.TINDICADORES_ID);

                        pstmt_tOracleOutput_36.setBigDecimal(7, Inserta17.NUMERADOR);

                        pstmt_tOracleOutput_36.setBigDecimal(8, Inserta17.DENOMINADOR);

                        pstmt_tOracleOutput_36.setBigDecimal(9, Inserta17.INDICADOR);

                        pstmt_tOracleOutput_36.setBigDecimal(10, Inserta17.PRESTADOR_ID);

                pstmt_tOracleOutput_36.addBatch();
                nb_line_tOracleOutput_36++;
                batchSizeCounter_tOracleOutput_36++;
            if (batchSize_tOracleOutput_36 > 0 &&  batchSize_tOracleOutput_36 <= batchSizeCounter_tOracleOutput_36) {
                try {
                    pstmt_tOracleOutput_36.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_36){
globalMap.put("tOracleOutput_36_ERROR_MESSAGE",e_tOracleOutput_36.getMessage());
			        java.sql.SQLException ne_tOracleOutput_36 = e_tOracleOutput_36.getNextException(),sqle_tOracleOutput_36=null;
			    	String errormessage_tOracleOutput_36;
					if (ne_tOracleOutput_36 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_36 = new java.sql.SQLException(e_tOracleOutput_36.getMessage() + "\ncaused by: " + ne_tOracleOutput_36.getMessage(), ne_tOracleOutput_36.getSQLState(), ne_tOracleOutput_36.getErrorCode(), ne_tOracleOutput_36);
						errormessage_tOracleOutput_36 = sqle_tOracleOutput_36.getMessage();
					}else{
						errormessage_tOracleOutput_36 = e_tOracleOutput_36.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_36);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_36 = pstmt_tOracleOutput_36.getUpdateCount();
                    insertedCount_tOracleOutput_36
                += (tmp_batchUpdateCount_tOracleOutput_36!=-1?tmp_batchUpdateCount_tOracleOutput_36:0);
                rowsToCommitCount_tOracleOutput_36 += (tmp_batchUpdateCount_tOracleOutput_36!=-1?tmp_batchUpdateCount_tOracleOutput_36:0);
                batchSizeCounter_tOracleOutput_36 = 0;
            }
                commitCounter_tOracleOutput_36++;
                if(commitEvery_tOracleOutput_36 <= commitCounter_tOracleOutput_36) {
                    if(batchSizeCounter_tOracleOutput_36 > 0) {
                        try {
                            pstmt_tOracleOutput_36.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_36){
globalMap.put("tOracleOutput_36_ERROR_MESSAGE",e_tOracleOutput_36.getMessage());
					        java.sql.SQLException ne_tOracleOutput_36 = e_tOracleOutput_36.getNextException(),sqle_tOracleOutput_36=null;
					    	String errormessage_tOracleOutput_36;
							if (ne_tOracleOutput_36 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_36 = new java.sql.SQLException(e_tOracleOutput_36.getMessage() + "\ncaused by: " + ne_tOracleOutput_36.getMessage(), ne_tOracleOutput_36.getSQLState(), ne_tOracleOutput_36.getErrorCode(), ne_tOracleOutput_36);
								errormessage_tOracleOutput_36 = sqle_tOracleOutput_36.getMessage();
							}else{
								errormessage_tOracleOutput_36 = e_tOracleOutput_36.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_36);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_36 = pstmt_tOracleOutput_36.getUpdateCount();
                            insertedCount_tOracleOutput_36
                        += (tmp_batchUpdateCount_tOracleOutput_36!=-1?tmp_batchUpdateCount_tOracleOutput_36:0);
                        rowsToCommitCount_tOracleOutput_36 += (tmp_batchUpdateCount_tOracleOutput_36!=-1?tmp_batchUpdateCount_tOracleOutput_36:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_36 != 0){
                    	
                    }
                    conn_tOracleOutput_36.commit();
                    if(rowsToCommitCount_tOracleOutput_36 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_36 = 0;
                    }
                    commitCounter_tOracleOutput_36=0;
                    	batchSizeCounter_tOracleOutput_36=0;
                }

 


	tos_count_tOracleOutput_36++;

/**
 * [tOracleOutput_36 main ] stop
 */
	
	/**
	 * [tOracleOutput_36 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_36";
	
	

 



/**
 * [tOracleOutput_36 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_36 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_36";
	
	

 



/**
 * [tOracleOutput_36 process_data_end ] stop
 */

} // End of branch "Inserta17"




// Start of branch "Elimina15"
if(Elimina15 != null) { 



	
	/**
	 * [tOracleOutput_37 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_37";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Elimina15"
						
						);
					}
					



        whetherReject_tOracleOutput_37 = false;
                    pstmt_tOracleOutput_37.setBigDecimal(1, Elimina15.UORG_ID);

                    if(Elimina15.NRADICADO == null) {
pstmt_tOracleOutput_37.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_37.setString(2, Elimina15.NRADICADO);
}

                    pstmt_tOracleOutput_37.setBigDecimal(3, Elimina15.TPAGOS_ID);

                    pstmt_tOracleOutput_37.setBigDecimal(4, Elimina15.TIEMPOS_ID);

                    pstmt_tOracleOutput_37.setBigDecimal(5, Elimina15.TINDICADORES_ID);

                    pstmt_tOracleOutput_37.setBigDecimal(6, Elimina15.PRESTADOR_ID);

                pstmt_tOracleOutput_37.addBatch();
                nb_line_tOracleOutput_37++;
                batchSizeCounter_tOracleOutput_37++;
            if (batchSize_tOracleOutput_37 > 0 &&  batchSize_tOracleOutput_37 <= batchSizeCounter_tOracleOutput_37) {
                try {
                    pstmt_tOracleOutput_37.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_37){
globalMap.put("tOracleOutput_37_ERROR_MESSAGE",e_tOracleOutput_37.getMessage());
			        java.sql.SQLException ne_tOracleOutput_37 = e_tOracleOutput_37.getNextException(),sqle_tOracleOutput_37=null;
			    	String errormessage_tOracleOutput_37;
					if (ne_tOracleOutput_37 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_37 = new java.sql.SQLException(e_tOracleOutput_37.getMessage() + "\ncaused by: " + ne_tOracleOutput_37.getMessage(), ne_tOracleOutput_37.getSQLState(), ne_tOracleOutput_37.getErrorCode(), ne_tOracleOutput_37);
						errormessage_tOracleOutput_37 = sqle_tOracleOutput_37.getMessage();
					}else{
						errormessage_tOracleOutput_37 = e_tOracleOutput_37.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_37);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_37 = pstmt_tOracleOutput_37.getUpdateCount();
                    deletedCount_tOracleOutput_37
                += (tmp_batchUpdateCount_tOracleOutput_37!=-1?tmp_batchUpdateCount_tOracleOutput_37:0);
                rowsToCommitCount_tOracleOutput_37 += (tmp_batchUpdateCount_tOracleOutput_37!=-1?tmp_batchUpdateCount_tOracleOutput_37:0);
                batchSizeCounter_tOracleOutput_37 = 0;
            }
                commitCounter_tOracleOutput_37++;
                if(commitEvery_tOracleOutput_37 <= commitCounter_tOracleOutput_37) {
                    if(batchSizeCounter_tOracleOutput_37 > 0) {
                        try {
                            pstmt_tOracleOutput_37.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_37){
globalMap.put("tOracleOutput_37_ERROR_MESSAGE",e_tOracleOutput_37.getMessage());
					        java.sql.SQLException ne_tOracleOutput_37 = e_tOracleOutput_37.getNextException(),sqle_tOracleOutput_37=null;
					    	String errormessage_tOracleOutput_37;
							if (ne_tOracleOutput_37 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_37 = new java.sql.SQLException(e_tOracleOutput_37.getMessage() + "\ncaused by: " + ne_tOracleOutput_37.getMessage(), ne_tOracleOutput_37.getSQLState(), ne_tOracleOutput_37.getErrorCode(), ne_tOracleOutput_37);
								errormessage_tOracleOutput_37 = sqle_tOracleOutput_37.getMessage();
							}else{
								errormessage_tOracleOutput_37 = e_tOracleOutput_37.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_37);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_37 = pstmt_tOracleOutput_37.getUpdateCount();
                            deletedCount_tOracleOutput_37
                        += (tmp_batchUpdateCount_tOracleOutput_37!=-1?tmp_batchUpdateCount_tOracleOutput_37:0);
                        rowsToCommitCount_tOracleOutput_37 += (tmp_batchUpdateCount_tOracleOutput_37!=-1?tmp_batchUpdateCount_tOracleOutput_37:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_37 != 0){
                    	
                    }
                    conn_tOracleOutput_37.commit();
                    if(rowsToCommitCount_tOracleOutput_37 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_37 = 0;
                    }
                    commitCounter_tOracleOutput_37=0;
                    	batchSizeCounter_tOracleOutput_37=0;
                }

 


	tos_count_tOracleOutput_37++;

/**
 * [tOracleOutput_37 main ] stop
 */
	
	/**
	 * [tOracleOutput_37 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_37";
	
	

 



/**
 * [tOracleOutput_37 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_37 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_37";
	
	

 



/**
 * [tOracleOutput_37 process_data_end ] stop
 */

} // End of branch "Elimina15"




// Start of branch "Inserta18"
if(Inserta18 != null) { 



	
	/**
	 * [tOracleOutput_38 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_38";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta18"
						
						);
					}
					



        whetherReject_tOracleOutput_38 = false;
                        pstmt_tOracleOutput_38.setBigDecimal(1, Inserta18.UORG_ID);

                        if(Inserta18.NRADICADO == null) {
pstmt_tOracleOutput_38.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_38.setString(2, Inserta18.NRADICADO);
}

                        pstmt_tOracleOutput_38.setBigDecimal(3, Inserta18.ETAPA);

                        pstmt_tOracleOutput_38.setBigDecimal(4, Inserta18.TPAGOS_ID);

                        pstmt_tOracleOutput_38.setBigDecimal(5, Inserta18.TIEMPOS_ID);

                        pstmt_tOracleOutput_38.setBigDecimal(6, Inserta18.TINDICADORES_ID);

                        pstmt_tOracleOutput_38.setBigDecimal(7, Inserta18.NUMERADOR);

                        pstmt_tOracleOutput_38.setBigDecimal(8, Inserta18.DENOMINADOR);

                        pstmt_tOracleOutput_38.setBigDecimal(9, Inserta18.INDICADOR);

                        pstmt_tOracleOutput_38.setBigDecimal(10, Inserta18.PRESTADOR_ID);

                pstmt_tOracleOutput_38.addBatch();
                nb_line_tOracleOutput_38++;
                batchSizeCounter_tOracleOutput_38++;
            if (batchSize_tOracleOutput_38 > 0 &&  batchSize_tOracleOutput_38 <= batchSizeCounter_tOracleOutput_38) {
                try {
                    pstmt_tOracleOutput_38.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_38){
globalMap.put("tOracleOutput_38_ERROR_MESSAGE",e_tOracleOutput_38.getMessage());
			        java.sql.SQLException ne_tOracleOutput_38 = e_tOracleOutput_38.getNextException(),sqle_tOracleOutput_38=null;
			    	String errormessage_tOracleOutput_38;
					if (ne_tOracleOutput_38 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_38 = new java.sql.SQLException(e_tOracleOutput_38.getMessage() + "\ncaused by: " + ne_tOracleOutput_38.getMessage(), ne_tOracleOutput_38.getSQLState(), ne_tOracleOutput_38.getErrorCode(), ne_tOracleOutput_38);
						errormessage_tOracleOutput_38 = sqle_tOracleOutput_38.getMessage();
					}else{
						errormessage_tOracleOutput_38 = e_tOracleOutput_38.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_38);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_38 = pstmt_tOracleOutput_38.getUpdateCount();
                    insertedCount_tOracleOutput_38
                += (tmp_batchUpdateCount_tOracleOutput_38!=-1?tmp_batchUpdateCount_tOracleOutput_38:0);
                rowsToCommitCount_tOracleOutput_38 += (tmp_batchUpdateCount_tOracleOutput_38!=-1?tmp_batchUpdateCount_tOracleOutput_38:0);
                batchSizeCounter_tOracleOutput_38 = 0;
            }
                commitCounter_tOracleOutput_38++;
                if(commitEvery_tOracleOutput_38 <= commitCounter_tOracleOutput_38) {
                    if(batchSizeCounter_tOracleOutput_38 > 0) {
                        try {
                            pstmt_tOracleOutput_38.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_38){
globalMap.put("tOracleOutput_38_ERROR_MESSAGE",e_tOracleOutput_38.getMessage());
					        java.sql.SQLException ne_tOracleOutput_38 = e_tOracleOutput_38.getNextException(),sqle_tOracleOutput_38=null;
					    	String errormessage_tOracleOutput_38;
							if (ne_tOracleOutput_38 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_38 = new java.sql.SQLException(e_tOracleOutput_38.getMessage() + "\ncaused by: " + ne_tOracleOutput_38.getMessage(), ne_tOracleOutput_38.getSQLState(), ne_tOracleOutput_38.getErrorCode(), ne_tOracleOutput_38);
								errormessage_tOracleOutput_38 = sqle_tOracleOutput_38.getMessage();
							}else{
								errormessage_tOracleOutput_38 = e_tOracleOutput_38.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_38);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_38 = pstmt_tOracleOutput_38.getUpdateCount();
                            insertedCount_tOracleOutput_38
                        += (tmp_batchUpdateCount_tOracleOutput_38!=-1?tmp_batchUpdateCount_tOracleOutput_38:0);
                        rowsToCommitCount_tOracleOutput_38 += (tmp_batchUpdateCount_tOracleOutput_38!=-1?tmp_batchUpdateCount_tOracleOutput_38:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_38 != 0){
                    	
                    }
                    conn_tOracleOutput_38.commit();
                    if(rowsToCommitCount_tOracleOutput_38 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_38 = 0;
                    }
                    commitCounter_tOracleOutput_38=0;
                    	batchSizeCounter_tOracleOutput_38=0;
                }

 


	tos_count_tOracleOutput_38++;

/**
 * [tOracleOutput_38 main ] stop
 */
	
	/**
	 * [tOracleOutput_38 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_38";
	
	

 



/**
 * [tOracleOutput_38 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_38 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_38";
	
	

 



/**
 * [tOracleOutput_38 process_data_end ] stop
 */

} // End of branch "Inserta18"




	
	/**
	 * [tMap_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	

 



/**
 * [tMap_14 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	

 



/**
 * [tMap_13 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_22";
	
	

 



/**
 * [tOracleInput_22 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_22 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_22";
	
	

}
}finally{
	if (rs_tOracleInput_22 != null) {
		rs_tOracleInput_22.close();
	}
	if (stmt_tOracleInput_22 != null) {
		stmt_tOracleInput_22.close();
	}
}

globalMap.put("tOracleInput_22_NB_LINE",nb_line_tOracleInput_22);
 

ok_Hash.put("tOracleInput_22", true);
end_Hash.put("tOracleInput_22", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk19", 0, "ok");
				}
				tJava_13Process(globalMap);



/**
 * [tOracleInput_22 end ] stop
 */

	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row43 != null) {
						tHash_Lookup_row43.endGet();
					}
					globalMap.remove( "tHash_Lookup_row43" );

					
					
				
					if(tHash_Lookup_row44 != null) {
						tHash_Lookup_row44.endGet();
					}
					globalMap.remove( "tHash_Lookup_row44" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tMap_14 end ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tMap_14", true);
end_Hash.put("tMap_14", System.currentTimeMillis());




/**
 * [tMap_14 end ] stop
 */

	
	/**
	 * [tOracleOutput_29 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_29";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_29 > 0) {
            try {
            	if (pstmt_tOracleOutput_29 != null) {
					
					pstmt_tOracleOutput_29.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_29){
globalMap.put("tOracleOutput_29_ERROR_MESSAGE",e_tOracleOutput_29.getMessage());
		        java.sql.SQLException ne_tOracleOutput_29 = e_tOracleOutput_29.getNextException(),sqle_tOracleOutput_29=null;
		    	String errormessage_tOracleOutput_29;
				if (ne_tOracleOutput_29 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_29 = new java.sql.SQLException(e_tOracleOutput_29.getMessage() + "\ncaused by: " + ne_tOracleOutput_29.getMessage(), ne_tOracleOutput_29.getSQLState(), ne_tOracleOutput_29.getErrorCode(), ne_tOracleOutput_29);
					errormessage_tOracleOutput_29 = sqle_tOracleOutput_29.getMessage();
				}else{
					errormessage_tOracleOutput_29 = e_tOracleOutput_29.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_29);
            	
        	}
        	if (pstmt_tOracleOutput_29 != null) {
            	tmp_batchUpdateCount_tOracleOutput_29 = pstmt_tOracleOutput_29.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_29
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_29!=-1?tmp_batchUpdateCount_tOracleOutput_29:0);
				rowsToCommitCount_tOracleOutput_29 += (tmp_batchUpdateCount_tOracleOutput_29!=-1?tmp_batchUpdateCount_tOracleOutput_29:0);
            }
        }
        if(pstmt_tOracleOutput_29 != null) {
			
				pstmt_tOracleOutput_29.close();
				resourceMap.remove("pstmt_tOracleOutput_29");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_29", true);
		if(commitCounter_tOracleOutput_29 > 0 && rowsToCommitCount_tOracleOutput_29 != 0) {
			
		}
		conn_tOracleOutput_29.commit();
		if(commitCounter_tOracleOutput_29 > 0 && rowsToCommitCount_tOracleOutput_29 != 0) {
			
			rowsToCommitCount_tOracleOutput_29 = 0;
		}
		commitCounter_tOracleOutput_29 = 0;
		
		
		conn_tOracleOutput_29 .close();
		
		resourceMap.put("finish_tOracleOutput_29", true);
   	

	
	nb_line_deleted_tOracleOutput_29=nb_line_deleted_tOracleOutput_29+ deletedCount_tOracleOutput_29;
	nb_line_update_tOracleOutput_29=nb_line_update_tOracleOutput_29 + updatedCount_tOracleOutput_29;
	nb_line_inserted_tOracleOutput_29=nb_line_inserted_tOracleOutput_29 + insertedCount_tOracleOutput_29;
	nb_line_rejected_tOracleOutput_29=nb_line_rejected_tOracleOutput_29 + rejectedCount_tOracleOutput_29;
	
        globalMap.put("tOracleOutput_29_NB_LINE",nb_line_tOracleOutput_29);
        globalMap.put("tOracleOutput_29_NB_LINE_UPDATED",nb_line_update_tOracleOutput_29);
        globalMap.put("tOracleOutput_29_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_29);
        globalMap.put("tOracleOutput_29_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_29);
        globalMap.put("tOracleOutput_29_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_29);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Elimina11");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_29", true);
end_Hash.put("tOracleOutput_29", System.currentTimeMillis());




/**
 * [tOracleOutput_29 end ] stop
 */




	
	/**
	 * [tOracleOutput_30 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_30";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_30 > 0) {
            try {
            	if (pstmt_tOracleOutput_30 != null) {
					
					pstmt_tOracleOutput_30.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_30){
globalMap.put("tOracleOutput_30_ERROR_MESSAGE",e_tOracleOutput_30.getMessage());
		        java.sql.SQLException ne_tOracleOutput_30 = e_tOracleOutput_30.getNextException(),sqle_tOracleOutput_30=null;
		    	String errormessage_tOracleOutput_30;
				if (ne_tOracleOutput_30 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_30 = new java.sql.SQLException(e_tOracleOutput_30.getMessage() + "\ncaused by: " + ne_tOracleOutput_30.getMessage(), ne_tOracleOutput_30.getSQLState(), ne_tOracleOutput_30.getErrorCode(), ne_tOracleOutput_30);
					errormessage_tOracleOutput_30 = sqle_tOracleOutput_30.getMessage();
				}else{
					errormessage_tOracleOutput_30 = e_tOracleOutput_30.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_30);
            	
        	}
        	if (pstmt_tOracleOutput_30 != null) {
            	tmp_batchUpdateCount_tOracleOutput_30 = pstmt_tOracleOutput_30.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_30
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_30!=-1?tmp_batchUpdateCount_tOracleOutput_30:0);
				rowsToCommitCount_tOracleOutput_30 += (tmp_batchUpdateCount_tOracleOutput_30!=-1?tmp_batchUpdateCount_tOracleOutput_30:0);
            }
        }
        if(pstmt_tOracleOutput_30 != null) {
			
				pstmt_tOracleOutput_30.close();
				resourceMap.remove("pstmt_tOracleOutput_30");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_30", true);
		if(commitCounter_tOracleOutput_30 > 0 && rowsToCommitCount_tOracleOutput_30 != 0) {
			
		}
		conn_tOracleOutput_30.commit();
		if(commitCounter_tOracleOutput_30 > 0 && rowsToCommitCount_tOracleOutput_30 != 0) {
			
			rowsToCommitCount_tOracleOutput_30 = 0;
		}
		commitCounter_tOracleOutput_30 = 0;
		
		
		conn_tOracleOutput_30 .close();
		
		resourceMap.put("finish_tOracleOutput_30", true);
   	

	
	nb_line_deleted_tOracleOutput_30=nb_line_deleted_tOracleOutput_30+ deletedCount_tOracleOutput_30;
	nb_line_update_tOracleOutput_30=nb_line_update_tOracleOutput_30 + updatedCount_tOracleOutput_30;
	nb_line_inserted_tOracleOutput_30=nb_line_inserted_tOracleOutput_30 + insertedCount_tOracleOutput_30;
	nb_line_rejected_tOracleOutput_30=nb_line_rejected_tOracleOutput_30 + rejectedCount_tOracleOutput_30;
	
        globalMap.put("tOracleOutput_30_NB_LINE",nb_line_tOracleOutput_30);
        globalMap.put("tOracleOutput_30_NB_LINE_UPDATED",nb_line_update_tOracleOutput_30);
        globalMap.put("tOracleOutput_30_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_30);
        globalMap.put("tOracleOutput_30_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_30);
        globalMap.put("tOracleOutput_30_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_30);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta14");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_30", true);
end_Hash.put("tOracleOutput_30", System.currentTimeMillis());




/**
 * [tOracleOutput_30 end ] stop
 */




	
	/**
	 * [tOracleOutput_31 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_31";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_31 > 0) {
            try {
            	if (pstmt_tOracleOutput_31 != null) {
					
					pstmt_tOracleOutput_31.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_31){
globalMap.put("tOracleOutput_31_ERROR_MESSAGE",e_tOracleOutput_31.getMessage());
		        java.sql.SQLException ne_tOracleOutput_31 = e_tOracleOutput_31.getNextException(),sqle_tOracleOutput_31=null;
		    	String errormessage_tOracleOutput_31;
				if (ne_tOracleOutput_31 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_31 = new java.sql.SQLException(e_tOracleOutput_31.getMessage() + "\ncaused by: " + ne_tOracleOutput_31.getMessage(), ne_tOracleOutput_31.getSQLState(), ne_tOracleOutput_31.getErrorCode(), ne_tOracleOutput_31);
					errormessage_tOracleOutput_31 = sqle_tOracleOutput_31.getMessage();
				}else{
					errormessage_tOracleOutput_31 = e_tOracleOutput_31.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_31);
            	
        	}
        	if (pstmt_tOracleOutput_31 != null) {
            	tmp_batchUpdateCount_tOracleOutput_31 = pstmt_tOracleOutput_31.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_31
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_31!=-1?tmp_batchUpdateCount_tOracleOutput_31:0);
				rowsToCommitCount_tOracleOutput_31 += (tmp_batchUpdateCount_tOracleOutput_31!=-1?tmp_batchUpdateCount_tOracleOutput_31:0);
            }
        }
        if(pstmt_tOracleOutput_31 != null) {
			
				pstmt_tOracleOutput_31.close();
				resourceMap.remove("pstmt_tOracleOutput_31");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_31", true);
		if(commitCounter_tOracleOutput_31 > 0 && rowsToCommitCount_tOracleOutput_31 != 0) {
			
		}
		conn_tOracleOutput_31.commit();
		if(commitCounter_tOracleOutput_31 > 0 && rowsToCommitCount_tOracleOutput_31 != 0) {
			
			rowsToCommitCount_tOracleOutput_31 = 0;
		}
		commitCounter_tOracleOutput_31 = 0;
		
		
		conn_tOracleOutput_31 .close();
		
		resourceMap.put("finish_tOracleOutput_31", true);
   	

	
	nb_line_deleted_tOracleOutput_31=nb_line_deleted_tOracleOutput_31+ deletedCount_tOracleOutput_31;
	nb_line_update_tOracleOutput_31=nb_line_update_tOracleOutput_31 + updatedCount_tOracleOutput_31;
	nb_line_inserted_tOracleOutput_31=nb_line_inserted_tOracleOutput_31 + insertedCount_tOracleOutput_31;
	nb_line_rejected_tOracleOutput_31=nb_line_rejected_tOracleOutput_31 + rejectedCount_tOracleOutput_31;
	
        globalMap.put("tOracleOutput_31_NB_LINE",nb_line_tOracleOutput_31);
        globalMap.put("tOracleOutput_31_NB_LINE_UPDATED",nb_line_update_tOracleOutput_31);
        globalMap.put("tOracleOutput_31_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_31);
        globalMap.put("tOracleOutput_31_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_31);
        globalMap.put("tOracleOutput_31_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_31);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Elimina12");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_31", true);
end_Hash.put("tOracleOutput_31", System.currentTimeMillis());




/**
 * [tOracleOutput_31 end ] stop
 */




	
	/**
	 * [tOracleOutput_32 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_32";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_32 > 0) {
            try {
            	if (pstmt_tOracleOutput_32 != null) {
					
					pstmt_tOracleOutput_32.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_32){
globalMap.put("tOracleOutput_32_ERROR_MESSAGE",e_tOracleOutput_32.getMessage());
		        java.sql.SQLException ne_tOracleOutput_32 = e_tOracleOutput_32.getNextException(),sqle_tOracleOutput_32=null;
		    	String errormessage_tOracleOutput_32;
				if (ne_tOracleOutput_32 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_32 = new java.sql.SQLException(e_tOracleOutput_32.getMessage() + "\ncaused by: " + ne_tOracleOutput_32.getMessage(), ne_tOracleOutput_32.getSQLState(), ne_tOracleOutput_32.getErrorCode(), ne_tOracleOutput_32);
					errormessage_tOracleOutput_32 = sqle_tOracleOutput_32.getMessage();
				}else{
					errormessage_tOracleOutput_32 = e_tOracleOutput_32.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_32);
            	
        	}
        	if (pstmt_tOracleOutput_32 != null) {
            	tmp_batchUpdateCount_tOracleOutput_32 = pstmt_tOracleOutput_32.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_32
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_32!=-1?tmp_batchUpdateCount_tOracleOutput_32:0);
				rowsToCommitCount_tOracleOutput_32 += (tmp_batchUpdateCount_tOracleOutput_32!=-1?tmp_batchUpdateCount_tOracleOutput_32:0);
            }
        }
        if(pstmt_tOracleOutput_32 != null) {
			
				pstmt_tOracleOutput_32.close();
				resourceMap.remove("pstmt_tOracleOutput_32");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_32", true);
		if(commitCounter_tOracleOutput_32 > 0 && rowsToCommitCount_tOracleOutput_32 != 0) {
			
		}
		conn_tOracleOutput_32.commit();
		if(commitCounter_tOracleOutput_32 > 0 && rowsToCommitCount_tOracleOutput_32 != 0) {
			
			rowsToCommitCount_tOracleOutput_32 = 0;
		}
		commitCounter_tOracleOutput_32 = 0;
		
		
		conn_tOracleOutput_32 .close();
		
		resourceMap.put("finish_tOracleOutput_32", true);
   	

	
	nb_line_deleted_tOracleOutput_32=nb_line_deleted_tOracleOutput_32+ deletedCount_tOracleOutput_32;
	nb_line_update_tOracleOutput_32=nb_line_update_tOracleOutput_32 + updatedCount_tOracleOutput_32;
	nb_line_inserted_tOracleOutput_32=nb_line_inserted_tOracleOutput_32 + insertedCount_tOracleOutput_32;
	nb_line_rejected_tOracleOutput_32=nb_line_rejected_tOracleOutput_32 + rejectedCount_tOracleOutput_32;
	
        globalMap.put("tOracleOutput_32_NB_LINE",nb_line_tOracleOutput_32);
        globalMap.put("tOracleOutput_32_NB_LINE_UPDATED",nb_line_update_tOracleOutput_32);
        globalMap.put("tOracleOutput_32_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_32);
        globalMap.put("tOracleOutput_32_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_32);
        globalMap.put("tOracleOutput_32_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_32);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta15");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_32", true);
end_Hash.put("tOracleOutput_32", System.currentTimeMillis());




/**
 * [tOracleOutput_32 end ] stop
 */




	
	/**
	 * [tOracleOutput_33 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_33";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_33 > 0) {
            try {
            	if (pstmt_tOracleOutput_33 != null) {
					
					pstmt_tOracleOutput_33.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_33){
globalMap.put("tOracleOutput_33_ERROR_MESSAGE",e_tOracleOutput_33.getMessage());
		        java.sql.SQLException ne_tOracleOutput_33 = e_tOracleOutput_33.getNextException(),sqle_tOracleOutput_33=null;
		    	String errormessage_tOracleOutput_33;
				if (ne_tOracleOutput_33 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_33 = new java.sql.SQLException(e_tOracleOutput_33.getMessage() + "\ncaused by: " + ne_tOracleOutput_33.getMessage(), ne_tOracleOutput_33.getSQLState(), ne_tOracleOutput_33.getErrorCode(), ne_tOracleOutput_33);
					errormessage_tOracleOutput_33 = sqle_tOracleOutput_33.getMessage();
				}else{
					errormessage_tOracleOutput_33 = e_tOracleOutput_33.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_33);
            	
        	}
        	if (pstmt_tOracleOutput_33 != null) {
            	tmp_batchUpdateCount_tOracleOutput_33 = pstmt_tOracleOutput_33.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_33
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_33!=-1?tmp_batchUpdateCount_tOracleOutput_33:0);
				rowsToCommitCount_tOracleOutput_33 += (tmp_batchUpdateCount_tOracleOutput_33!=-1?tmp_batchUpdateCount_tOracleOutput_33:0);
            }
        }
        if(pstmt_tOracleOutput_33 != null) {
			
				pstmt_tOracleOutput_33.close();
				resourceMap.remove("pstmt_tOracleOutput_33");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_33", true);
		if(commitCounter_tOracleOutput_33 > 0 && rowsToCommitCount_tOracleOutput_33 != 0) {
			
		}
		conn_tOracleOutput_33.commit();
		if(commitCounter_tOracleOutput_33 > 0 && rowsToCommitCount_tOracleOutput_33 != 0) {
			
			rowsToCommitCount_tOracleOutput_33 = 0;
		}
		commitCounter_tOracleOutput_33 = 0;
		
		
		conn_tOracleOutput_33 .close();
		
		resourceMap.put("finish_tOracleOutput_33", true);
   	

	
	nb_line_deleted_tOracleOutput_33=nb_line_deleted_tOracleOutput_33+ deletedCount_tOracleOutput_33;
	nb_line_update_tOracleOutput_33=nb_line_update_tOracleOutput_33 + updatedCount_tOracleOutput_33;
	nb_line_inserted_tOracleOutput_33=nb_line_inserted_tOracleOutput_33 + insertedCount_tOracleOutput_33;
	nb_line_rejected_tOracleOutput_33=nb_line_rejected_tOracleOutput_33 + rejectedCount_tOracleOutput_33;
	
        globalMap.put("tOracleOutput_33_NB_LINE",nb_line_tOracleOutput_33);
        globalMap.put("tOracleOutput_33_NB_LINE_UPDATED",nb_line_update_tOracleOutput_33);
        globalMap.put("tOracleOutput_33_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_33);
        globalMap.put("tOracleOutput_33_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_33);
        globalMap.put("tOracleOutput_33_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_33);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Elimina13");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_33", true);
end_Hash.put("tOracleOutput_33", System.currentTimeMillis());




/**
 * [tOracleOutput_33 end ] stop
 */




	
	/**
	 * [tOracleOutput_34 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_34";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_34 > 0) {
            try {
            	if (pstmt_tOracleOutput_34 != null) {
					
					pstmt_tOracleOutput_34.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_34){
globalMap.put("tOracleOutput_34_ERROR_MESSAGE",e_tOracleOutput_34.getMessage());
		        java.sql.SQLException ne_tOracleOutput_34 = e_tOracleOutput_34.getNextException(),sqle_tOracleOutput_34=null;
		    	String errormessage_tOracleOutput_34;
				if (ne_tOracleOutput_34 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_34 = new java.sql.SQLException(e_tOracleOutput_34.getMessage() + "\ncaused by: " + ne_tOracleOutput_34.getMessage(), ne_tOracleOutput_34.getSQLState(), ne_tOracleOutput_34.getErrorCode(), ne_tOracleOutput_34);
					errormessage_tOracleOutput_34 = sqle_tOracleOutput_34.getMessage();
				}else{
					errormessage_tOracleOutput_34 = e_tOracleOutput_34.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_34);
            	
        	}
        	if (pstmt_tOracleOutput_34 != null) {
            	tmp_batchUpdateCount_tOracleOutput_34 = pstmt_tOracleOutput_34.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_34
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_34!=-1?tmp_batchUpdateCount_tOracleOutput_34:0);
				rowsToCommitCount_tOracleOutput_34 += (tmp_batchUpdateCount_tOracleOutput_34!=-1?tmp_batchUpdateCount_tOracleOutput_34:0);
            }
        }
        if(pstmt_tOracleOutput_34 != null) {
			
				pstmt_tOracleOutput_34.close();
				resourceMap.remove("pstmt_tOracleOutput_34");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_34", true);
		if(commitCounter_tOracleOutput_34 > 0 && rowsToCommitCount_tOracleOutput_34 != 0) {
			
		}
		conn_tOracleOutput_34.commit();
		if(commitCounter_tOracleOutput_34 > 0 && rowsToCommitCount_tOracleOutput_34 != 0) {
			
			rowsToCommitCount_tOracleOutput_34 = 0;
		}
		commitCounter_tOracleOutput_34 = 0;
		
		
		conn_tOracleOutput_34 .close();
		
		resourceMap.put("finish_tOracleOutput_34", true);
   	

	
	nb_line_deleted_tOracleOutput_34=nb_line_deleted_tOracleOutput_34+ deletedCount_tOracleOutput_34;
	nb_line_update_tOracleOutput_34=nb_line_update_tOracleOutput_34 + updatedCount_tOracleOutput_34;
	nb_line_inserted_tOracleOutput_34=nb_line_inserted_tOracleOutput_34 + insertedCount_tOracleOutput_34;
	nb_line_rejected_tOracleOutput_34=nb_line_rejected_tOracleOutput_34 + rejectedCount_tOracleOutput_34;
	
        globalMap.put("tOracleOutput_34_NB_LINE",nb_line_tOracleOutput_34);
        globalMap.put("tOracleOutput_34_NB_LINE_UPDATED",nb_line_update_tOracleOutput_34);
        globalMap.put("tOracleOutput_34_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_34);
        globalMap.put("tOracleOutput_34_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_34);
        globalMap.put("tOracleOutput_34_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_34);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta16");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_34", true);
end_Hash.put("tOracleOutput_34", System.currentTimeMillis());




/**
 * [tOracleOutput_34 end ] stop
 */




	
	/**
	 * [tOracleOutput_35 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_35";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_35 > 0) {
            try {
            	if (pstmt_tOracleOutput_35 != null) {
					
					pstmt_tOracleOutput_35.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_35){
globalMap.put("tOracleOutput_35_ERROR_MESSAGE",e_tOracleOutput_35.getMessage());
		        java.sql.SQLException ne_tOracleOutput_35 = e_tOracleOutput_35.getNextException(),sqle_tOracleOutput_35=null;
		    	String errormessage_tOracleOutput_35;
				if (ne_tOracleOutput_35 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_35 = new java.sql.SQLException(e_tOracleOutput_35.getMessage() + "\ncaused by: " + ne_tOracleOutput_35.getMessage(), ne_tOracleOutput_35.getSQLState(), ne_tOracleOutput_35.getErrorCode(), ne_tOracleOutput_35);
					errormessage_tOracleOutput_35 = sqle_tOracleOutput_35.getMessage();
				}else{
					errormessage_tOracleOutput_35 = e_tOracleOutput_35.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_35);
            	
        	}
        	if (pstmt_tOracleOutput_35 != null) {
            	tmp_batchUpdateCount_tOracleOutput_35 = pstmt_tOracleOutput_35.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_35
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_35!=-1?tmp_batchUpdateCount_tOracleOutput_35:0);
				rowsToCommitCount_tOracleOutput_35 += (tmp_batchUpdateCount_tOracleOutput_35!=-1?tmp_batchUpdateCount_tOracleOutput_35:0);
            }
        }
        if(pstmt_tOracleOutput_35 != null) {
			
				pstmt_tOracleOutput_35.close();
				resourceMap.remove("pstmt_tOracleOutput_35");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_35", true);
		if(commitCounter_tOracleOutput_35 > 0 && rowsToCommitCount_tOracleOutput_35 != 0) {
			
		}
		conn_tOracleOutput_35.commit();
		if(commitCounter_tOracleOutput_35 > 0 && rowsToCommitCount_tOracleOutput_35 != 0) {
			
			rowsToCommitCount_tOracleOutput_35 = 0;
		}
		commitCounter_tOracleOutput_35 = 0;
		
		
		conn_tOracleOutput_35 .close();
		
		resourceMap.put("finish_tOracleOutput_35", true);
   	

	
	nb_line_deleted_tOracleOutput_35=nb_line_deleted_tOracleOutput_35+ deletedCount_tOracleOutput_35;
	nb_line_update_tOracleOutput_35=nb_line_update_tOracleOutput_35 + updatedCount_tOracleOutput_35;
	nb_line_inserted_tOracleOutput_35=nb_line_inserted_tOracleOutput_35 + insertedCount_tOracleOutput_35;
	nb_line_rejected_tOracleOutput_35=nb_line_rejected_tOracleOutput_35 + rejectedCount_tOracleOutput_35;
	
        globalMap.put("tOracleOutput_35_NB_LINE",nb_line_tOracleOutput_35);
        globalMap.put("tOracleOutput_35_NB_LINE_UPDATED",nb_line_update_tOracleOutput_35);
        globalMap.put("tOracleOutput_35_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_35);
        globalMap.put("tOracleOutput_35_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_35);
        globalMap.put("tOracleOutput_35_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_35);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Elimina14");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_35", true);
end_Hash.put("tOracleOutput_35", System.currentTimeMillis());




/**
 * [tOracleOutput_35 end ] stop
 */




	
	/**
	 * [tOracleOutput_36 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_36";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_36 > 0) {
            try {
            	if (pstmt_tOracleOutput_36 != null) {
					
					pstmt_tOracleOutput_36.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_36){
globalMap.put("tOracleOutput_36_ERROR_MESSAGE",e_tOracleOutput_36.getMessage());
		        java.sql.SQLException ne_tOracleOutput_36 = e_tOracleOutput_36.getNextException(),sqle_tOracleOutput_36=null;
		    	String errormessage_tOracleOutput_36;
				if (ne_tOracleOutput_36 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_36 = new java.sql.SQLException(e_tOracleOutput_36.getMessage() + "\ncaused by: " + ne_tOracleOutput_36.getMessage(), ne_tOracleOutput_36.getSQLState(), ne_tOracleOutput_36.getErrorCode(), ne_tOracleOutput_36);
					errormessage_tOracleOutput_36 = sqle_tOracleOutput_36.getMessage();
				}else{
					errormessage_tOracleOutput_36 = e_tOracleOutput_36.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_36);
            	
        	}
        	if (pstmt_tOracleOutput_36 != null) {
            	tmp_batchUpdateCount_tOracleOutput_36 = pstmt_tOracleOutput_36.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_36
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_36!=-1?tmp_batchUpdateCount_tOracleOutput_36:0);
				rowsToCommitCount_tOracleOutput_36 += (tmp_batchUpdateCount_tOracleOutput_36!=-1?tmp_batchUpdateCount_tOracleOutput_36:0);
            }
        }
        if(pstmt_tOracleOutput_36 != null) {
			
				pstmt_tOracleOutput_36.close();
				resourceMap.remove("pstmt_tOracleOutput_36");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_36", true);
		if(commitCounter_tOracleOutput_36 > 0 && rowsToCommitCount_tOracleOutput_36 != 0) {
			
		}
		conn_tOracleOutput_36.commit();
		if(commitCounter_tOracleOutput_36 > 0 && rowsToCommitCount_tOracleOutput_36 != 0) {
			
			rowsToCommitCount_tOracleOutput_36 = 0;
		}
		commitCounter_tOracleOutput_36 = 0;
		
		
		conn_tOracleOutput_36 .close();
		
		resourceMap.put("finish_tOracleOutput_36", true);
   	

	
	nb_line_deleted_tOracleOutput_36=nb_line_deleted_tOracleOutput_36+ deletedCount_tOracleOutput_36;
	nb_line_update_tOracleOutput_36=nb_line_update_tOracleOutput_36 + updatedCount_tOracleOutput_36;
	nb_line_inserted_tOracleOutput_36=nb_line_inserted_tOracleOutput_36 + insertedCount_tOracleOutput_36;
	nb_line_rejected_tOracleOutput_36=nb_line_rejected_tOracleOutput_36 + rejectedCount_tOracleOutput_36;
	
        globalMap.put("tOracleOutput_36_NB_LINE",nb_line_tOracleOutput_36);
        globalMap.put("tOracleOutput_36_NB_LINE_UPDATED",nb_line_update_tOracleOutput_36);
        globalMap.put("tOracleOutput_36_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_36);
        globalMap.put("tOracleOutput_36_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_36);
        globalMap.put("tOracleOutput_36_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_36);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta17");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_36", true);
end_Hash.put("tOracleOutput_36", System.currentTimeMillis());




/**
 * [tOracleOutput_36 end ] stop
 */




	
	/**
	 * [tOracleOutput_37 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_37";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_37 > 0) {
            try {
            	if (pstmt_tOracleOutput_37 != null) {
					
					pstmt_tOracleOutput_37.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_37){
globalMap.put("tOracleOutput_37_ERROR_MESSAGE",e_tOracleOutput_37.getMessage());
		        java.sql.SQLException ne_tOracleOutput_37 = e_tOracleOutput_37.getNextException(),sqle_tOracleOutput_37=null;
		    	String errormessage_tOracleOutput_37;
				if (ne_tOracleOutput_37 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_37 = new java.sql.SQLException(e_tOracleOutput_37.getMessage() + "\ncaused by: " + ne_tOracleOutput_37.getMessage(), ne_tOracleOutput_37.getSQLState(), ne_tOracleOutput_37.getErrorCode(), ne_tOracleOutput_37);
					errormessage_tOracleOutput_37 = sqle_tOracleOutput_37.getMessage();
				}else{
					errormessage_tOracleOutput_37 = e_tOracleOutput_37.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_37);
            	
        	}
        	if (pstmt_tOracleOutput_37 != null) {
            	tmp_batchUpdateCount_tOracleOutput_37 = pstmt_tOracleOutput_37.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_37
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_37!=-1?tmp_batchUpdateCount_tOracleOutput_37:0);
				rowsToCommitCount_tOracleOutput_37 += (tmp_batchUpdateCount_tOracleOutput_37!=-1?tmp_batchUpdateCount_tOracleOutput_37:0);
            }
        }
        if(pstmt_tOracleOutput_37 != null) {
			
				pstmt_tOracleOutput_37.close();
				resourceMap.remove("pstmt_tOracleOutput_37");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_37", true);
		if(commitCounter_tOracleOutput_37 > 0 && rowsToCommitCount_tOracleOutput_37 != 0) {
			
		}
		conn_tOracleOutput_37.commit();
		if(commitCounter_tOracleOutput_37 > 0 && rowsToCommitCount_tOracleOutput_37 != 0) {
			
			rowsToCommitCount_tOracleOutput_37 = 0;
		}
		commitCounter_tOracleOutput_37 = 0;
		
		
		conn_tOracleOutput_37 .close();
		
		resourceMap.put("finish_tOracleOutput_37", true);
   	

	
	nb_line_deleted_tOracleOutput_37=nb_line_deleted_tOracleOutput_37+ deletedCount_tOracleOutput_37;
	nb_line_update_tOracleOutput_37=nb_line_update_tOracleOutput_37 + updatedCount_tOracleOutput_37;
	nb_line_inserted_tOracleOutput_37=nb_line_inserted_tOracleOutput_37 + insertedCount_tOracleOutput_37;
	nb_line_rejected_tOracleOutput_37=nb_line_rejected_tOracleOutput_37 + rejectedCount_tOracleOutput_37;
	
        globalMap.put("tOracleOutput_37_NB_LINE",nb_line_tOracleOutput_37);
        globalMap.put("tOracleOutput_37_NB_LINE_UPDATED",nb_line_update_tOracleOutput_37);
        globalMap.put("tOracleOutput_37_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_37);
        globalMap.put("tOracleOutput_37_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_37);
        globalMap.put("tOracleOutput_37_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_37);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Elimina15");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_37", true);
end_Hash.put("tOracleOutput_37", System.currentTimeMillis());




/**
 * [tOracleOutput_37 end ] stop
 */




	
	/**
	 * [tOracleOutput_38 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_38";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_38 > 0) {
            try {
            	if (pstmt_tOracleOutput_38 != null) {
					
					pstmt_tOracleOutput_38.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_38){
globalMap.put("tOracleOutput_38_ERROR_MESSAGE",e_tOracleOutput_38.getMessage());
		        java.sql.SQLException ne_tOracleOutput_38 = e_tOracleOutput_38.getNextException(),sqle_tOracleOutput_38=null;
		    	String errormessage_tOracleOutput_38;
				if (ne_tOracleOutput_38 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_38 = new java.sql.SQLException(e_tOracleOutput_38.getMessage() + "\ncaused by: " + ne_tOracleOutput_38.getMessage(), ne_tOracleOutput_38.getSQLState(), ne_tOracleOutput_38.getErrorCode(), ne_tOracleOutput_38);
					errormessage_tOracleOutput_38 = sqle_tOracleOutput_38.getMessage();
				}else{
					errormessage_tOracleOutput_38 = e_tOracleOutput_38.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_38);
            	
        	}
        	if (pstmt_tOracleOutput_38 != null) {
            	tmp_batchUpdateCount_tOracleOutput_38 = pstmt_tOracleOutput_38.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_38
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_38!=-1?tmp_batchUpdateCount_tOracleOutput_38:0);
				rowsToCommitCount_tOracleOutput_38 += (tmp_batchUpdateCount_tOracleOutput_38!=-1?tmp_batchUpdateCount_tOracleOutput_38:0);
            }
        }
        if(pstmt_tOracleOutput_38 != null) {
			
				pstmt_tOracleOutput_38.close();
				resourceMap.remove("pstmt_tOracleOutput_38");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_38", true);
		if(commitCounter_tOracleOutput_38 > 0 && rowsToCommitCount_tOracleOutput_38 != 0) {
			
		}
		conn_tOracleOutput_38.commit();
		if(commitCounter_tOracleOutput_38 > 0 && rowsToCommitCount_tOracleOutput_38 != 0) {
			
			rowsToCommitCount_tOracleOutput_38 = 0;
		}
		commitCounter_tOracleOutput_38 = 0;
		
		
		conn_tOracleOutput_38 .close();
		
		resourceMap.put("finish_tOracleOutput_38", true);
   	

	
	nb_line_deleted_tOracleOutput_38=nb_line_deleted_tOracleOutput_38+ deletedCount_tOracleOutput_38;
	nb_line_update_tOracleOutput_38=nb_line_update_tOracleOutput_38 + updatedCount_tOracleOutput_38;
	nb_line_inserted_tOracleOutput_38=nb_line_inserted_tOracleOutput_38 + insertedCount_tOracleOutput_38;
	nb_line_rejected_tOracleOutput_38=nb_line_rejected_tOracleOutput_38 + rejectedCount_tOracleOutput_38;
	
        globalMap.put("tOracleOutput_38_NB_LINE",nb_line_tOracleOutput_38);
        globalMap.put("tOracleOutput_38_NB_LINE_UPDATED",nb_line_update_tOracleOutput_38);
        globalMap.put("tOracleOutput_38_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_38);
        globalMap.put("tOracleOutput_38_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_38);
        globalMap.put("tOracleOutput_38_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_38);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta18");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_38", true);
end_Hash.put("tOracleOutput_38", System.currentTimeMillis());




/**
 * [tOracleOutput_38 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_13"
					     			globalMap.remove("tHash_Lookup_row43"); 
				     			
					     			//free memory for "tMap_13"
					     			globalMap.remove("tHash_Lookup_row44"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_22 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_22";
	
	

 



/**
 * [tOracleInput_22 finally ] stop
 */

	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tMap_14 finally ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	

 



/**
 * [tMap_14 finally ] stop
 */

	
	/**
	 * [tOracleOutput_29 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_29";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_29") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_29 = null;
                if ((pstmtToClose_tOracleOutput_29 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_29")) != null) {
                    pstmtToClose_tOracleOutput_29.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_29") == null){
            java.sql.Connection ctn_tOracleOutput_29 = null;
            if((ctn_tOracleOutput_29 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_29")) != null){
                try {
                    ctn_tOracleOutput_29.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_29) {
                    String errorMessage_tOracleOutput_29 = "failed to close the connection in tOracleOutput_29 :" + sqlEx_tOracleOutput_29.getMessage();
                    System.err.println(errorMessage_tOracleOutput_29);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_29 finally ] stop
 */




	
	/**
	 * [tOracleOutput_30 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_30";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_30") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_30 = null;
                if ((pstmtToClose_tOracleOutput_30 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_30")) != null) {
                    pstmtToClose_tOracleOutput_30.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_30") == null){
            java.sql.Connection ctn_tOracleOutput_30 = null;
            if((ctn_tOracleOutput_30 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_30")) != null){
                try {
                    ctn_tOracleOutput_30.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_30) {
                    String errorMessage_tOracleOutput_30 = "failed to close the connection in tOracleOutput_30 :" + sqlEx_tOracleOutput_30.getMessage();
                    System.err.println(errorMessage_tOracleOutput_30);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_30 finally ] stop
 */




	
	/**
	 * [tOracleOutput_31 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_31";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_31") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_31 = null;
                if ((pstmtToClose_tOracleOutput_31 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_31")) != null) {
                    pstmtToClose_tOracleOutput_31.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_31") == null){
            java.sql.Connection ctn_tOracleOutput_31 = null;
            if((ctn_tOracleOutput_31 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_31")) != null){
                try {
                    ctn_tOracleOutput_31.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_31) {
                    String errorMessage_tOracleOutput_31 = "failed to close the connection in tOracleOutput_31 :" + sqlEx_tOracleOutput_31.getMessage();
                    System.err.println(errorMessage_tOracleOutput_31);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_31 finally ] stop
 */




	
	/**
	 * [tOracleOutput_32 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_32";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_32") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_32 = null;
                if ((pstmtToClose_tOracleOutput_32 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_32")) != null) {
                    pstmtToClose_tOracleOutput_32.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_32") == null){
            java.sql.Connection ctn_tOracleOutput_32 = null;
            if((ctn_tOracleOutput_32 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_32")) != null){
                try {
                    ctn_tOracleOutput_32.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_32) {
                    String errorMessage_tOracleOutput_32 = "failed to close the connection in tOracleOutput_32 :" + sqlEx_tOracleOutput_32.getMessage();
                    System.err.println(errorMessage_tOracleOutput_32);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_32 finally ] stop
 */




	
	/**
	 * [tOracleOutput_33 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_33";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_33") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_33 = null;
                if ((pstmtToClose_tOracleOutput_33 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_33")) != null) {
                    pstmtToClose_tOracleOutput_33.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_33") == null){
            java.sql.Connection ctn_tOracleOutput_33 = null;
            if((ctn_tOracleOutput_33 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_33")) != null){
                try {
                    ctn_tOracleOutput_33.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_33) {
                    String errorMessage_tOracleOutput_33 = "failed to close the connection in tOracleOutput_33 :" + sqlEx_tOracleOutput_33.getMessage();
                    System.err.println(errorMessage_tOracleOutput_33);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_33 finally ] stop
 */




	
	/**
	 * [tOracleOutput_34 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_34";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_34") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_34 = null;
                if ((pstmtToClose_tOracleOutput_34 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_34")) != null) {
                    pstmtToClose_tOracleOutput_34.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_34") == null){
            java.sql.Connection ctn_tOracleOutput_34 = null;
            if((ctn_tOracleOutput_34 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_34")) != null){
                try {
                    ctn_tOracleOutput_34.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_34) {
                    String errorMessage_tOracleOutput_34 = "failed to close the connection in tOracleOutput_34 :" + sqlEx_tOracleOutput_34.getMessage();
                    System.err.println(errorMessage_tOracleOutput_34);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_34 finally ] stop
 */




	
	/**
	 * [tOracleOutput_35 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_35";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_35") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_35 = null;
                if ((pstmtToClose_tOracleOutput_35 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_35")) != null) {
                    pstmtToClose_tOracleOutput_35.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_35") == null){
            java.sql.Connection ctn_tOracleOutput_35 = null;
            if((ctn_tOracleOutput_35 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_35")) != null){
                try {
                    ctn_tOracleOutput_35.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_35) {
                    String errorMessage_tOracleOutput_35 = "failed to close the connection in tOracleOutput_35 :" + sqlEx_tOracleOutput_35.getMessage();
                    System.err.println(errorMessage_tOracleOutput_35);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_35 finally ] stop
 */




	
	/**
	 * [tOracleOutput_36 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_36";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_36") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_36 = null;
                if ((pstmtToClose_tOracleOutput_36 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_36")) != null) {
                    pstmtToClose_tOracleOutput_36.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_36") == null){
            java.sql.Connection ctn_tOracleOutput_36 = null;
            if((ctn_tOracleOutput_36 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_36")) != null){
                try {
                    ctn_tOracleOutput_36.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_36) {
                    String errorMessage_tOracleOutput_36 = "failed to close the connection in tOracleOutput_36 :" + sqlEx_tOracleOutput_36.getMessage();
                    System.err.println(errorMessage_tOracleOutput_36);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_36 finally ] stop
 */




	
	/**
	 * [tOracleOutput_37 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_37";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_37") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_37 = null;
                if ((pstmtToClose_tOracleOutput_37 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_37")) != null) {
                    pstmtToClose_tOracleOutput_37.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_37") == null){
            java.sql.Connection ctn_tOracleOutput_37 = null;
            if((ctn_tOracleOutput_37 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_37")) != null){
                try {
                    ctn_tOracleOutput_37.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_37) {
                    String errorMessage_tOracleOutput_37 = "failed to close the connection in tOracleOutput_37 :" + sqlEx_tOracleOutput_37.getMessage();
                    System.err.println(errorMessage_tOracleOutput_37);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_37 finally ] stop
 */




	
	/**
	 * [tOracleOutput_38 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_38";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_38") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_38 = null;
                if ((pstmtToClose_tOracleOutput_38 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_38")) != null) {
                    pstmtToClose_tOracleOutput_38.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_38") == null){
            java.sql.Connection ctn_tOracleOutput_38 = null;
            if((ctn_tOracleOutput_38 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_38")) != null){
                try {
                    ctn_tOracleOutput_38.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_38) {
                    String errorMessage_tOracleOutput_38 = "failed to close the connection in tOracleOutput_38 :" + sqlEx_tOracleOutput_38.getMessage();
                    System.err.println(errorMessage_tOracleOutput_38);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_38 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_22_SUBPROCESS_STATE", 1);
	}
	


public void tJava_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_13", false);
		start_Hash.put("tJava_13", System.currentTimeMillis());
		
	
	currentComponent="tJava_13";
	
	
		int tos_count_tJava_13 = 0;
		


System.out.println("consulta tabla: BACM_INDICADORES3");
System.out.println(" ");
System.out.println(((String)globalMap.get("tOracleInput_22_QUERY")));
System.out.println("=======================================================");
System.out.println(" ");
 



/**
 * [tJava_13 begin ] stop
 */
	
	/**
	 * [tJava_13 main ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 


	tos_count_tJava_13++;

/**
 * [tJava_13 main ] stop
 */
	
	/**
	 * [tJava_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 



/**
 * [tJava_13 process_data_begin ] stop
 */
	
	/**
	 * [tJava_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 



/**
 * [tJava_13 process_data_end ] stop
 */
	
	/**
	 * [tJava_13 end ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 

ok_Hash.put("tJava_13", true);
end_Hash.put("tJava_13", System.currentTimeMillis());




/**
 * [tJava_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_13 finally ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 



/**
 * [tJava_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_13_SUBPROCESS_STATE", 1);
	}
	


public void tJava_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_11", false);
		start_Hash.put("tJava_11", System.currentTimeMillis());
		
	
	currentComponent="tJava_11";
	
	
		int tos_count_tJava_11 = 0;
		


System.out.println("consulta tabla: BACM_INDICADORES2");
System.out.println(" ");
System.out.println(((String)globalMap.get("tOracleInput_20_QUERY")));
System.out.println("=======================================================");
System.out.println(" ");
 



/**
 * [tJava_11 begin ] stop
 */
	
	/**
	 * [tJava_11 main ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 


	tos_count_tJava_11++;

/**
 * [tJava_11 main ] stop
 */
	
	/**
	 * [tJava_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 



/**
 * [tJava_11 process_data_begin ] stop
 */
	
	/**
	 * [tJava_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 



/**
 * [tJava_11 process_data_end ] stop
 */
	
	/**
	 * [tJava_11 end ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 

ok_Hash.put("tJava_11", true);
end_Hash.put("tJava_11", System.currentTimeMillis());




/**
 * [tJava_11 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_11 finally ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 



/**
 * [tJava_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}
	


public void tJava_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_10", false);
		start_Hash.put("tJava_10", System.currentTimeMillis());
		
	
	currentComponent="tJava_10";
	
	
		int tos_count_tJava_10 = 0;
		


System.out.println("consulta tabla: BACM_INDICADORES");
System.out.println(" ");
System.out.println(((String)globalMap.get("tOracleInput_12_QUERY")));
System.out.println("=======================================================");
System.out.println(" ");
 



/**
 * [tJava_10 begin ] stop
 */
	
	/**
	 * [tJava_10 main ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 


	tos_count_tJava_10++;

/**
 * [tJava_10 main ] stop
 */
	
	/**
	 * [tJava_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 



/**
 * [tJava_10 process_data_begin ] stop
 */
	
	/**
	 * [tJava_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 



/**
 * [tJava_10 process_data_end ] stop
 */
	
	/**
	 * [tJava_10 end ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 

ok_Hash.put("tJava_10", true);
end_Hash.put("tJava_10", System.currentTimeMillis());




/**
 * [tJava_10 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_10 finally ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 



/**
 * [tJava_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}
	


public void tJava_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_9", false);
		start_Hash.put("tJava_9", System.currentTimeMillis());
		
	
	currentComponent="tJava_9";
	
	
		int tos_count_tJava_9 = 0;
		


System.out.println("consulta tabla: BACM_CAUSALESGLOSAS");
System.out.println(" ");
System.out.println(((String)globalMap.get("tOracleInput_11_QUERY")));
System.out.println("=======================================================");
System.out.println(" ");
 



/**
 * [tJava_9 begin ] stop
 */
	
	/**
	 * [tJava_9 main ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 


	tos_count_tJava_9++;

/**
 * [tJava_9 main ] stop
 */
	
	/**
	 * [tJava_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 



/**
 * [tJava_9 process_data_begin ] stop
 */
	
	/**
	 * [tJava_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 



/**
 * [tJava_9 process_data_end ] stop
 */
	
	/**
	 * [tJava_9 end ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 

ok_Hash.put("tJava_9", true);
end_Hash.put("tJava_9", System.currentTimeMillis());




/**
 * [tJava_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_9 finally ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 



/**
 * [tJava_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}
	


public void tJava_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_8", false);
		start_Hash.put("tJava_8", System.currentTimeMillis());
		
	
	currentComponent="tJava_8";
	
	
		int tos_count_tJava_8 = 0;
		


System.out.println("consulta tabla: BACM_ATENCIONES");
System.out.println(" ");
System.out.println(((String)globalMap.get("tOracleInput_10_QUERY")));
System.out.println("=======================================================");
System.out.println(" ");
 



/**
 * [tJava_8 begin ] stop
 */
	
	/**
	 * [tJava_8 main ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 


	tos_count_tJava_8++;

/**
 * [tJava_8 main ] stop
 */
	
	/**
	 * [tJava_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 process_data_begin ] stop
 */
	
	/**
	 * [tJava_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 process_data_end ] stop
 */
	
	/**
	 * [tJava_8 end ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 

ok_Hash.put("tJava_8", true);
end_Hash.put("tJava_8", System.currentTimeMillis());




/**
 * [tJava_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_8 finally ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}
	


public void tJava_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_7", false);
		start_Hash.put("tJava_7", System.currentTimeMillis());
		
	
	currentComponent="tJava_7";
	
	
		int tos_count_tJava_7 = 0;
		


System.out.println("consulta tabla: BACM_GASTOGE");
System.out.println(" ");
System.out.println(((String)globalMap.get("tOracleInput_9_QUERY")));
System.out.println("=======================================================");
System.out.println(" ");
 



/**
 * [tJava_7 begin ] stop
 */
	
	/**
	 * [tJava_7 main ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 


	tos_count_tJava_7++;

/**
 * [tJava_7 main ] stop
 */
	
	/**
	 * [tJava_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 process_data_begin ] stop
 */
	
	/**
	 * [tJava_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 process_data_end ] stop
 */
	
	/**
	 * [tJava_7 end ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 

ok_Hash.put("tJava_7", true);
end_Hash.put("tJava_7", System.currentTimeMillis());




/**
 * [tJava_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_7 finally ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}
	


public void tJava_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_6", false);
		start_Hash.put("tJava_6", System.currentTimeMillis());
		
	
	currentComponent="tJava_6";
	
	
		int tos_count_tJava_6 = 0;
		


System.out.println("consulta tabla: BACM_DIAGNOSTICOS");
System.out.println(" ");
System.out.println(((String)globalMap.get("tOracleInput_8_QUERY")));
System.out.println("=======================================================");
System.out.println(" ");
 



/**
 * [tJava_6 begin ] stop
 */
	
	/**
	 * [tJava_6 main ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 


	tos_count_tJava_6++;

/**
 * [tJava_6 main ] stop
 */
	
	/**
	 * [tJava_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 process_data_begin ] stop
 */
	
	/**
	 * [tJava_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 process_data_end ] stop
 */
	
	/**
	 * [tJava_6 end ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 

ok_Hash.put("tJava_6", true);
end_Hash.put("tJava_6", System.currentTimeMillis());




/**
 * [tJava_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_6 finally ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}
	


public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";
	
	
		int tos_count_tJava_5 = 0;
		


System.out.println("consulta tabla: BACM_GSERVICIOS");
System.out.println(" ");
System.out.println(((String)globalMap.get("tOracleInput_7_QUERY")));
System.out.println("=======================================================");
System.out.println(" ");
 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 process_data_begin ] stop
 */
	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());




/**
 * [tJava_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	


public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
		int tos_count_tJava_4 = 0;
		


System.out.println("consulta tabla: BACM_CAUDITORIA_PGLOSAS");
System.out.println(" ");
System.out.println(((String)globalMap.get("tOracleInput_6_QUERY")));
System.out.println("=======================================================");
System.out.println(" ");
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return true;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return null;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return null;
				}
				public Integer NOMBREPrecision(){
				    return null;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal CODIGO;

				public BigDecimal getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return null;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return "";
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return null;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal TIPO;

				public BigDecimal getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return null;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return "";
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public String NUMCONTRATO;

				public String getNUMCONTRATO () {
					return this.NUMCONTRATO;
				}

				public Boolean NUMCONTRATOIsNullable(){
				    return true;
				}
				public Boolean NUMCONTRATOIsKey(){
				    return false;
				}
				public Integer NUMCONTRATOLength(){
				    return null;
				}
				public Integer NUMCONTRATOPrecision(){
				    return null;
				}
				public String NUMCONTRATODefault(){
				
					return null;
				
				}
				public String NUMCONTRATOComment(){
				
				    return "";
				
				}
				public String NUMCONTRATOPattern(){
				
					return "";
				
				}
				public String NUMCONTRATOOriginalDbColumnName(){
				
					return "NUMCONTRATO";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return null;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return null;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public BigDecimal PADRE_ID;

				public BigDecimal getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return null;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return "";
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.IPS_ID == null) ? 0 : this.IPS_ID.hashCode());
					
						result = prime * result + ((this.NOMBRE == null) ? 0 : this.NOMBRE.hashCode());
					
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
						result = prime * result + ((this.VALOR == null) ? 0 : this.VALOR.hashCode());
					
						result = prime * result + ((this.TIPO == null) ? 0 : this.TIPO.hashCode());
					
						result = prime * result + ((this.NUMCONTRATO == null) ? 0 : this.NUMCONTRATO.hashCode());
					
						result = prime * result + ((this.CONTRATOS_ID == null) ? 0 : this.CONTRATOS_ID.hashCode());
					
						result = prime * result + ((this.CLASE == null) ? 0 : this.CLASE.hashCode());
					
						result = prime * result + ((this.PADRE_ID == null) ? 0 : this.PADRE_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.IPS_ID == null) {
							if (other.IPS_ID != null)
								return false;
						
						} else if (!this.IPS_ID.equals(other.IPS_ID))
						
							return false;
					
						if (this.NOMBRE == null) {
							if (other.NOMBRE != null)
								return false;
						
						} else if (!this.NOMBRE.equals(other.NOMBRE))
						
							return false;
					
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					
						if (this.VALOR == null) {
							if (other.VALOR != null)
								return false;
						
						} else if (!this.VALOR.equals(other.VALOR))
						
							return false;
					
						if (this.TIPO == null) {
							if (other.TIPO != null)
								return false;
						
						} else if (!this.TIPO.equals(other.TIPO))
						
							return false;
					
						if (this.NUMCONTRATO == null) {
							if (other.NUMCONTRATO != null)
								return false;
						
						} else if (!this.NUMCONTRATO.equals(other.NUMCONTRATO))
						
							return false;
					
						if (this.CONTRATOS_ID == null) {
							if (other.CONTRATOS_ID != null)
								return false;
						
						} else if (!this.CONTRATOS_ID.equals(other.CONTRATOS_ID))
						
							return false;
					
						if (this.CLASE == null) {
							if (other.CLASE != null)
								return false;
						
						} else if (!this.CLASE.equals(other.CLASE))
						
							return false;
					
						if (this.PADRE_ID == null) {
							if (other.PADRE_ID != null)
								return false;
						
						} else if (!this.PADRE_ID.equals(other.PADRE_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.IPS_ID = this.IPS_ID;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            other.VALOR = this.VALOR;
	            other.TIPO = this.TIPO;
	            other.NUMCONTRATO = this.NUMCONTRATO;
	            other.CONTRATOS_ID = this.CONTRATOS_ID;
	            other.CLASE = this.CLASE;
	            other.PADRE_ID = this.PADRE_ID;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.IPS_ID = this.IPS_ID;
	            	other.NOMBRE = this.NOMBRE;
	            	other.CODIGO = this.CODIGO;
	            	other.VALOR = this.VALOR;
	            	other.TIPO = this.TIPO;
	            	other.NUMCONTRATO = this.NUMCONTRATO;
	            	other.CONTRATOS_ID = this.CONTRATOS_ID;
	            	other.CLASE = this.CLASE;
	            	other.PADRE_ID = this.PADRE_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.CODIGO = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NUMCONTRATO = readString(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.IPS_ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.CODIGO = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NUMCONTRATO = readString(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IPS_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NUMCONTRATO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IPS_ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NUMCONTRATO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TIPO="+String.valueOf(TIPO));
		sb.append(",NUMCONTRATO="+NUMCONTRATO);
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.IPS_ID, other.IPS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NOMBRE, other.NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.VALOR, other.VALOR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIPO, other.TIPO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUMCONTRATO, other.NUMCONTRATO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CONTRATOS_ID, other.CONTRATOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CLASE, other.CLASE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PADRE_ID, other.PADRE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tAdvancedHash_row7 = 0;
		

			   		// connection name:row7
			   		// source node:tOracleInput_2 - inputs:(after_tOracleInput_1) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_1 - inputs:(row6,row7,row8) outputs:(Actualiza,Inserta)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_2.setFetchSize(1000);


		    String dbquery_tOracleInput_2 = "SELECT    UORG_ID\n        , IPS_ID\n        , NOMBRE\n        , CODIGO \n        , VALOR\n        , TIPO\n        , NU"
+"MCONTRATO\n        , CONTRATOS_ID\n        , CLASE \n        , PADRE_ID        \nFROM BACM_TPAGOS";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row7.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row7.UORG_ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
						row7.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row7.IPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(2) != null) {
						row7.IPS_ID = rs_tOracleInput_2.getBigDecimal(2);
					} else {
				
						row7.IPS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row7.NOMBRE = null;
							} else {
	                         		
        	row7.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 4) {
								row7.CODIGO = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(4) != null) {
						row7.CODIGO = rs_tOracleInput_2.getBigDecimal(4);
					} else {
				
						row7.CODIGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 5) {
								row7.VALOR = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(5) != null) {
						row7.VALOR = rs_tOracleInput_2.getBigDecimal(5);
					} else {
				
						row7.VALOR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 6) {
								row7.TIPO = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(6) != null) {
						row7.TIPO = rs_tOracleInput_2.getBigDecimal(6);
					} else {
				
						row7.TIPO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 7) {
								row7.NUMCONTRATO = null;
							} else {
	                         		
        	row7.NUMCONTRATO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 8) {
								row7.CONTRATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(8) != null) {
						row7.CONTRATOS_ID = rs_tOracleInput_2.getBigDecimal(8);
					} else {
				
						row7.CONTRATOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 9) {
								row7.CLASE = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(9) != null) {
						row7.CLASE = rs_tOracleInput_2.getBigDecimal(9);
					} else {
				
						row7.CLASE = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 10) {
								row7.PADRE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(10) != null) {
						row7.PADRE_ID = rs_tOracleInput_2.getBigDecimal(10);
					} else {
				
						row7.PADRE_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.UORG_ID = row7.UORG_ID;
				
				row7_HashRow.IPS_ID = row7.IPS_ID;
				
				row7_HashRow.NOMBRE = row7.NOMBRE;
				
				row7_HashRow.CODIGO = row7.CODIGO;
				
				row7_HashRow.VALOR = row7.VALOR;
				
				row7_HashRow.TIPO = row7.TIPO;
				
				row7_HashRow.NUMCONTRATO = row7.NUMCONTRATO;
				
				row7_HashRow.CONTRATOS_ID = row7.CONTRATOS_ID;
				
				row7_HashRow.CLASE = row7.CLASE;
				
				row7_HashRow.PADRE_ID = row7.PADRE_ID;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

tHash_Lookup_row7.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return null;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return null;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CONTRATOS_ID == null) ? 0 : this.CONTRATOS_ID.hashCode());
					
						result = prime * result + ((this.CLASE == null) ? 0 : this.CLASE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.CONTRATOS_ID == null) {
							if (other.CONTRATOS_ID != null)
								return false;
						
						} else if (!this.CONTRATOS_ID.equals(other.CONTRATOS_ID))
						
							return false;
					
						if (this.CLASE == null) {
							if (other.CLASE != null)
								return false;
						
						} else if (!this.CLASE.equals(other.CLASE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.CONTRATOS_ID = this.CONTRATOS_ID;
	            other.CLASE = this.CLASE;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.CONTRATOS_ID = this.CONTRATOS_ID;
	            	other.CLASE = this.CLASE;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CONTRATOS_ID, other.CONTRATOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CLASE, other.CLASE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tOracleInput_3 - inputs:(after_tOracleInput_1) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_1 - inputs:(row6,row7,row8) outputs:(Actualiza,Inserta)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_3.setFetchSize(1000);


		    String dbquery_tOracleInput_3 = "SELECT    CONTRATOS_ID\n        , CLASE         \nFROM BACM_TPAGOS";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row8.CONTRATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row8.CONTRATOS_ID = rs_tOracleInput_3.getBigDecimal(1);
					} else {
				
						row8.CONTRATOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row8.CLASE = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(2) != null) {
						row8.CLASE = rs_tOracleInput_3.getBigDecimal(2);
					} else {
				
						row8.CLASE = null;
					}
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.CONTRATOS_ID = row8.CONTRATOS_ID;
				
				row8_HashRow.CLASE = row8.CLASE;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

tHash_Lookup_row8.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FECHA == null) ? 0 : this.FECHA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row12Struct other = (row12Struct) obj;
		
						if (this.FECHA == null) {
							if (other.FECHA != null)
								return false;
						
						} else if (!this.FECHA.equals(other.FECHA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row12Struct other) {

		other.ID = this.ID;
	            other.FECHA = this.FECHA;
	            
	}

	public void copyKeysDataTo(row12Struct other) {

		other.FECHA = this.FECHA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FECHA, other.FECHA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tAdvancedHash_row12 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row12", false);
		start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tAdvancedHash_row12 = 0;
		

			   		// connection name:row12
			   		// source node:tHashInput_2 - inputs:(after_tOracleInput_6) outputs:(row12,row12) | target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
			   		// linked node: tMap_2 - inputs:(row11,row12,row13) outputs:(Elimina,Inserta1,Memoria)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row12Struct>getLookup(matchingModeEnum_row12);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row12 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_ACM_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row10Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row12.ID = next_tHashInput_2.ID;
	row12.FECHA = next_tHashInput_2.FECHA;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					


			   
			   

					row12Struct row12_HashRow = new row12Struct();
		   	   	   
				
				row12_HashRow.ID = row12.ID;
				
				row12_HashRow.FECHA = row12.FECHA;
				
			tHash_Lookup_row12.put(row12_HashRow);
			
            




 


	tos_count_tAdvancedHash_row12++;

/**
 * [tAdvancedHash_row12 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ACM_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

tHash_Lookup_row12.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row12", true);
end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());




/**
 * [tAdvancedHash_row12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return true;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal CODIGO;

				public BigDecimal getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 0;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return "";
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal TIPO;

				public BigDecimal getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 0;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return "";
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public String NUMCONTRATO;

				public String getNUMCONTRATO () {
					return this.NUMCONTRATO;
				}

				public Boolean NUMCONTRATOIsNullable(){
				    return true;
				}
				public Boolean NUMCONTRATOIsKey(){
				    return false;
				}
				public Integer NUMCONTRATOLength(){
				    return 50;
				}
				public Integer NUMCONTRATOPrecision(){
				    return 0;
				}
				public String NUMCONTRATODefault(){
				
					return null;
				
				}
				public String NUMCONTRATOComment(){
				
				    return "";
				
				}
				public String NUMCONTRATOPattern(){
				
					return "";
				
				}
				public String NUMCONTRATOOriginalDbColumnName(){
				
					return "NUMCONTRATO";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public BigDecimal PADRE_ID;

				public BigDecimal getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return "";
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CONTRATOS_ID == null) ? 0 : this.CONTRATOS_ID.hashCode());
					
						result = prime * result + ((this.CLASE == null) ? 0 : this.CLASE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.CONTRATOS_ID == null) {
							if (other.CONTRATOS_ID != null)
								return false;
						
						} else if (!this.CONTRATOS_ID.equals(other.CONTRATOS_ID))
						
							return false;
					
						if (this.CLASE == null) {
							if (other.CLASE != null)
								return false;
						
						} else if (!this.CLASE.equals(other.CLASE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.ID = this.ID;
	            other.UORG_ID = this.UORG_ID;
	            other.IPS_ID = this.IPS_ID;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            other.VALOR = this.VALOR;
	            other.TIPO = this.TIPO;
	            other.NUMCONTRATO = this.NUMCONTRATO;
	            other.CONTRATOS_ID = this.CONTRATOS_ID;
	            other.CLASE = this.CLASE;
	            other.PADRE_ID = this.PADRE_ID;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.CONTRATOS_ID = this.CONTRATOS_ID;
	            	other.CLASE = this.CLASE;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
       			    	this.UORG_ID = (BigDecimal) ois.readObject();
					
       			    	this.IPS_ID = (BigDecimal) ois.readObject();
					
						this.NOMBRE = readString(dis,ois);
					
       			    	this.CODIGO = (BigDecimal) ois.readObject();
					
       			    	this.VALOR = (BigDecimal) ois.readObject();
					
       			    	this.TIPO = (BigDecimal) ois.readObject();
					
						this.NUMCONTRATO = readString(dis,ois);
					
       			    	this.PADRE_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
       			    	this.UORG_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.IPS_ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBRE = readString(dis,objectIn);
					
       			    	this.CODIGO = (BigDecimal) objectIn.readObject();
					
       			    	this.VALOR = (BigDecimal) objectIn.readObject();
					
       			    	this.TIPO = (BigDecimal) objectIn.readObject();
					
						this.NUMCONTRATO = readString(dis,objectIn);
					
       			    	this.PADRE_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
       			    	oos.writeObject(this.UORG_ID);
					
       			    	oos.writeObject(this.IPS_ID);
					
						writeString(this.NOMBRE, dos, oos);
					
       			    	oos.writeObject(this.CODIGO);
					
       			    	oos.writeObject(this.VALOR);
					
       			    	oos.writeObject(this.TIPO);
					
						writeString(this.NUMCONTRATO, dos, oos);
					
       			    	oos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.UORG_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.IPS_ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CODIGO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VALOR);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TIPO);
					
						writeString(this.NUMCONTRATO, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TIPO="+String.valueOf(TIPO));
		sb.append(",NUMCONTRATO="+NUMCONTRATO);
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CONTRATOS_ID, other.CONTRATOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CLASE, other.CLASE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tHashInput_1 - inputs:(after_tOracleInput_6) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_2 - inputs:(row11,row12,row13) outputs:(Elimina,Inserta1,Memoria)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_ACM_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row9Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row9Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row13.ID = next_tHashInput_1.ID;
	row13.UORG_ID = next_tHashInput_1.UORG_ID;
	row13.IPS_ID = next_tHashInput_1.IPS_ID;
	row13.NOMBRE = next_tHashInput_1.NOMBRE;
	row13.CODIGO = next_tHashInput_1.CODIGO;
	row13.VALOR = next_tHashInput_1.VALOR;
	row13.TIPO = next_tHashInput_1.TIPO;
	row13.NUMCONTRATO = next_tHashInput_1.NUMCONTRATO;
	row13.CONTRATOS_ID = next_tHashInput_1.CONTRATOS_ID;
	row13.CLASE = next_tHashInput_1.CLASE;
	row13.PADRE_ID = next_tHashInput_1.PADRE_ID;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.ID = row13.ID;
				
				row13_HashRow.UORG_ID = row13.UORG_ID;
				
				row13_HashRow.IPS_ID = row13.IPS_ID;
				
				row13_HashRow.NOMBRE = row13.NOMBRE;
				
				row13_HashRow.CODIGO = row13.CODIGO;
				
				row13_HashRow.VALOR = row13.VALOR;
				
				row13_HashRow.TIPO = row13.TIPO;
				
				row13_HashRow.NUMCONTRATO = row13.NUMCONTRATO;
				
				row13_HashRow.CONTRATOS_ID = row13.CONTRATOS_ID;
				
				row13_HashRow.CLASE = row13.CLASE;
				
				row13_HashRow.PADRE_ID = row13.PADRE_ID;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ACM_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

tHash_Lookup_row13.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal VFACTURADO;

				public BigDecimal getVFACTURADO () {
					return this.VFACTURADO;
				}

				public Boolean VFACTURADOIsNullable(){
				    return true;
				}
				public Boolean VFACTURADOIsKey(){
				    return false;
				}
				public Integer VFACTURADOLength(){
				    return 0;
				}
				public Integer VFACTURADOPrecision(){
				    return 0;
				}
				public String VFACTURADODefault(){
				
					return "";
				
				}
				public String VFACTURADOComment(){
				
				    return "";
				
				}
				public String VFACTURADOPattern(){
				
					return "";
				
				}
				public String VFACTURADOOriginalDbColumnName(){
				
					return "VFACTURADO";
				
				}

				
			    public BigDecimal VPAGAR;

				public BigDecimal getVPAGAR () {
					return this.VPAGAR;
				}

				public Boolean VPAGARIsNullable(){
				    return true;
				}
				public Boolean VPAGARIsKey(){
				    return false;
				}
				public Integer VPAGARLength(){
				    return 0;
				}
				public Integer VPAGARPrecision(){
				    return 0;
				}
				public String VPAGARDefault(){
				
					return "";
				
				}
				public String VPAGARComment(){
				
				    return "";
				
				}
				public String VPAGARPattern(){
				
					return "";
				
				}
				public String VPAGAROriginalDbColumnName(){
				
					return "VPAGAR";
				
				}

				
			    public BigDecimal TRADICADO_ID;

				public BigDecimal getTRADICADO_ID () {
					return this.TRADICADO_ID;
				}

				public Boolean TRADICADO_IDIsNullable(){
				    return true;
				}
				public Boolean TRADICADO_IDIsKey(){
				    return false;
				}
				public Integer TRADICADO_IDLength(){
				    return null;
				}
				public Integer TRADICADO_IDPrecision(){
				    return null;
				}
				public String TRADICADO_IDDefault(){
				
					return null;
				
				}
				public String TRADICADO_IDComment(){
				
				    return "";
				
				}
				public String TRADICADO_IDPattern(){
				
					return "";
				
				}
				public String TRADICADO_IDOriginalDbColumnName(){
				
					return "TRADICADO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.TRADICADO_ID == null) ? 0 : this.TRADICADO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row15Struct other = (row15Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.TRADICADO_ID == null) {
							if (other.TRADICADO_ID != null)
								return false;
						
						} else if (!this.TRADICADO_ID.equals(other.TRADICADO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row15Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.VFACTURADO = this.VFACTURADO;
	            other.VPAGAR = this.VPAGAR;
	            other.TRADICADO_ID = this.TRADICADO_ID;
	            
	}

	public void copyKeysDataTo(row15Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.TRADICADO_ID = this.TRADICADO_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.TRADICADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.TRADICADO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRADICADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TRADICADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.VFACTURADO = (BigDecimal) ois.readObject();
					
       			    	this.VPAGAR = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.VFACTURADO = (BigDecimal) objectIn.readObject();
					
       			    	this.VPAGAR = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.VFACTURADO);
					
       			    	oos.writeObject(this.VPAGAR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VFACTURADO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VPAGAR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",VFACTURADO="+String.valueOf(VFACTURADO));
		sb.append(",VPAGAR="+String.valueOf(VPAGAR));
		sb.append(",TRADICADO_ID="+String.valueOf(TRADICADO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TRADICADO_ID, other.TRADICADO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tAdvancedHash_row15 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row15", false);
		start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tAdvancedHash_row15 = 0;
		

			   		// connection name:row15
			   		// source node:tHashInput_3 - inputs:(after_tHashInput_4) outputs:(row15,row15) | target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
			   		// linked node: tMap_3 - inputs:(row17,row15) outputs:(Elimina1,Inserta2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row15Struct>getLookup(matchingModeEnum_row15);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row15 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_ACM_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row14Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row14Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row15.UORG_ID = next_tHashInput_3.UORG_ID;
	row15.VFACTURADO = next_tHashInput_3.VFACTURADO;
	row15.VPAGAR = next_tHashInput_3.VPAGAR;
	row15.TRADICADO_ID = next_tHashInput_3.TRADICADO_ID;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					


			   
			   

					row15Struct row15_HashRow = new row15Struct();
		   	   	   
				
				row15_HashRow.UORG_ID = row15.UORG_ID;
				
				row15_HashRow.VFACTURADO = row15.VFACTURADO;
				
				row15_HashRow.VPAGAR = row15.VPAGAR;
				
				row15_HashRow.TRADICADO_ID = row15.TRADICADO_ID;
				
			tHash_Lookup_row15.put(row15_HashRow);
			
            




 


	tos_count_tAdvancedHash_row15++;

/**
 * [tAdvancedHash_row15 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    		
    		mf_tHashInput_3.clearCache("tHashFile_ACM_" + pid +"_tHashOutput_3");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ACM_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

tHash_Lookup_row15.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row15", true);
end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());




/**
 * [tAdvancedHash_row15 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableComparableLookupRow<row19Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FECHA == null) ? 0 : this.FECHA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row19Struct other = (row19Struct) obj;
		
						if (this.FECHA == null) {
							if (other.FECHA != null)
								return false;
						
						} else if (!this.FECHA.equals(other.FECHA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row19Struct other) {

		other.ID = this.ID;
	            other.FECHA = this.FECHA;
	            
	}

	public void copyKeysDataTo(row19Struct other) {

		other.FECHA = this.FECHA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FECHA, other.FECHA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();




	
	/**
	 * [tAdvancedHash_row19 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row19", false);
		start_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row19";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tAdvancedHash_row19 = 0;
		

			   		// connection name:row19
			   		// source node:tHashInput_5 - inputs:(after_tOracleInput_7) outputs:(row19,row19) | target node:tAdvancedHash_row19 - inputs:(row19) outputs:()
			   		// linked node: tMap_4 - inputs:(row18,row19) outputs:(Elimina2,Inserta3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row19 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row19Struct>getLookup(matchingModeEnum_row19);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row19", tHash_Lookup_row19);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row19 begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_ACM_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    row10Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row19.ID = next_tHashInput_5.ID;
	row19.FECHA = next_tHashInput_5.FECHA;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					


			   
			   

					row19Struct row19_HashRow = new row19Struct();
		   	   	   
				
				row19_HashRow.ID = row19.ID;
				
				row19_HashRow.FECHA = row19.FECHA;
				
			tHash_Lookup_row19.put(row19_HashRow);
			
            




 


	tos_count_tAdvancedHash_row19++;

/**
 * [tAdvancedHash_row19 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";
	
	

 



/**
 * [tAdvancedHash_row19 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";
	
	

 



/**
 * [tAdvancedHash_row19 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ACM_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";
	
	

tHash_Lookup_row19.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row19", true);
end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());




/**
 * [tAdvancedHash_row19 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";
	
	

 



/**
 * [tAdvancedHash_row19 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row21Struct implements routines.system.IPersistableComparableLookupRow<row21Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return true;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal CODIGO;

				public BigDecimal getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 0;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return "";
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal TIPO;

				public BigDecimal getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 0;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return "";
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public String NUMCONTRATO;

				public String getNUMCONTRATO () {
					return this.NUMCONTRATO;
				}

				public Boolean NUMCONTRATOIsNullable(){
				    return true;
				}
				public Boolean NUMCONTRATOIsKey(){
				    return false;
				}
				public Integer NUMCONTRATOLength(){
				    return 50;
				}
				public Integer NUMCONTRATOPrecision(){
				    return 0;
				}
				public String NUMCONTRATODefault(){
				
					return null;
				
				}
				public String NUMCONTRATOComment(){
				
				    return "";
				
				}
				public String NUMCONTRATOPattern(){
				
					return "";
				
				}
				public String NUMCONTRATOOriginalDbColumnName(){
				
					return "NUMCONTRATO";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public BigDecimal PADRE_ID;

				public BigDecimal getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return "";
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CONTRATOS_ID == null) ? 0 : this.CONTRATOS_ID.hashCode());
					
						result = prime * result + ((this.CLASE == null) ? 0 : this.CLASE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row21Struct other = (row21Struct) obj;
		
						if (this.CONTRATOS_ID == null) {
							if (other.CONTRATOS_ID != null)
								return false;
						
						} else if (!this.CONTRATOS_ID.equals(other.CONTRATOS_ID))
						
							return false;
					
						if (this.CLASE == null) {
							if (other.CLASE != null)
								return false;
						
						} else if (!this.CLASE.equals(other.CLASE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row21Struct other) {

		other.ID = this.ID;
	            other.UORG_ID = this.UORG_ID;
	            other.IPS_ID = this.IPS_ID;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            other.VALOR = this.VALOR;
	            other.TIPO = this.TIPO;
	            other.NUMCONTRATO = this.NUMCONTRATO;
	            other.CONTRATOS_ID = this.CONTRATOS_ID;
	            other.CLASE = this.CLASE;
	            other.PADRE_ID = this.PADRE_ID;
	            
	}

	public void copyKeysDataTo(row21Struct other) {

		other.CONTRATOS_ID = this.CONTRATOS_ID;
	            	other.CLASE = this.CLASE;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
       			    	this.UORG_ID = (BigDecimal) ois.readObject();
					
       			    	this.IPS_ID = (BigDecimal) ois.readObject();
					
						this.NOMBRE = readString(dis,ois);
					
       			    	this.CODIGO = (BigDecimal) ois.readObject();
					
       			    	this.VALOR = (BigDecimal) ois.readObject();
					
       			    	this.TIPO = (BigDecimal) ois.readObject();
					
						this.NUMCONTRATO = readString(dis,ois);
					
       			    	this.PADRE_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
       			    	this.UORG_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.IPS_ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBRE = readString(dis,objectIn);
					
       			    	this.CODIGO = (BigDecimal) objectIn.readObject();
					
       			    	this.VALOR = (BigDecimal) objectIn.readObject();
					
       			    	this.TIPO = (BigDecimal) objectIn.readObject();
					
						this.NUMCONTRATO = readString(dis,objectIn);
					
       			    	this.PADRE_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
       			    	oos.writeObject(this.UORG_ID);
					
       			    	oos.writeObject(this.IPS_ID);
					
						writeString(this.NOMBRE, dos, oos);
					
       			    	oos.writeObject(this.CODIGO);
					
       			    	oos.writeObject(this.VALOR);
					
       			    	oos.writeObject(this.TIPO);
					
						writeString(this.NUMCONTRATO, dos, oos);
					
       			    	oos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.UORG_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.IPS_ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CODIGO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VALOR);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TIPO);
					
						writeString(this.NUMCONTRATO, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TIPO="+String.valueOf(TIPO));
		sb.append(",NUMCONTRATO="+NUMCONTRATO);
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CONTRATOS_ID, other.CONTRATOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CLASE, other.CLASE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row21Struct row21 = new row21Struct();




	
	/**
	 * [tAdvancedHash_row21 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row21", false);
		start_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tAdvancedHash_row21 = 0;
		

			   		// connection name:row21
			   		// source node:tHashInput_6 - inputs:(after_tOracleInput_8) outputs:(row21,row21) | target node:tAdvancedHash_row21 - inputs:(row21) outputs:()
			   		// linked node: tMap_5 - inputs:(row20,row21,row22) outputs:(Elimina3,Inserta4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row21 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row21Struct>getLookup(matchingModeEnum_row21);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row21", tHash_Lookup_row21);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row21 begin ] stop
 */



	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_ACM_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row9Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row9Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row21.ID = next_tHashInput_6.ID;
	row21.UORG_ID = next_tHashInput_6.UORG_ID;
	row21.IPS_ID = next_tHashInput_6.IPS_ID;
	row21.NOMBRE = next_tHashInput_6.NOMBRE;
	row21.CODIGO = next_tHashInput_6.CODIGO;
	row21.VALOR = next_tHashInput_6.VALOR;
	row21.TIPO = next_tHashInput_6.TIPO;
	row21.NUMCONTRATO = next_tHashInput_6.NUMCONTRATO;
	row21.CONTRATOS_ID = next_tHashInput_6.CONTRATOS_ID;
	row21.CLASE = next_tHashInput_6.CLASE;
	row21.PADRE_ID = next_tHashInput_6.PADRE_ID;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					


			   
			   

					row21Struct row21_HashRow = new row21Struct();
		   	   	   
				
				row21_HashRow.ID = row21.ID;
				
				row21_HashRow.UORG_ID = row21.UORG_ID;
				
				row21_HashRow.IPS_ID = row21.IPS_ID;
				
				row21_HashRow.NOMBRE = row21.NOMBRE;
				
				row21_HashRow.CODIGO = row21.CODIGO;
				
				row21_HashRow.VALOR = row21.VALOR;
				
				row21_HashRow.TIPO = row21.TIPO;
				
				row21_HashRow.NUMCONTRATO = row21.NUMCONTRATO;
				
				row21_HashRow.CONTRATOS_ID = row21.CONTRATOS_ID;
				
				row21_HashRow.CLASE = row21.CLASE;
				
				row21_HashRow.PADRE_ID = row21.PADRE_ID;
				
			tHash_Lookup_row21.put(row21_HashRow);
			
            




 


	tos_count_tAdvancedHash_row21++;

/**
 * [tAdvancedHash_row21 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row21 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ACM_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

tHash_Lookup_row21.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row21", true);
end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());




/**
 * [tAdvancedHash_row21 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row22Struct implements routines.system.IPersistableComparableLookupRow<row22Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FECHA == null) ? 0 : this.FECHA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row22Struct other = (row22Struct) obj;
		
						if (this.FECHA == null) {
							if (other.FECHA != null)
								return false;
						
						} else if (!this.FECHA.equals(other.FECHA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row22Struct other) {

		other.ID = this.ID;
	            other.FECHA = this.FECHA;
	            
	}

	public void copyKeysDataTo(row22Struct other) {

		other.FECHA = this.FECHA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FECHA, other.FECHA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();




	
	/**
	 * [tAdvancedHash_row22 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row22", false);
		start_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row22";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tAdvancedHash_row22 = 0;
		

			   		// connection name:row22
			   		// source node:tHashInput_7 - inputs:(after_tOracleInput_8) outputs:(row22,row22) | target node:tAdvancedHash_row22 - inputs:(row22) outputs:()
			   		// linked node: tMap_5 - inputs:(row20,row21,row22) outputs:(Elimina3,Inserta4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row22Struct>getLookup(matchingModeEnum_row22);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row22 begin ] stop
 */



	
	/**
	 * [tHashInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_7", false);
		start_Hash.put("tHashInput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_7";
	
	
		int tos_count_tHashInput_7 = 0;
		


int nb_line_tHashInput_7 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_7 = mf_tHashInput_7.getAdvancedMemoryHashFile("tHashFile_ACM_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_7==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_7 = tHashFile_tHashInput_7.iterator();
while (iterator_tHashInput_7.hasNext()) {
    row10Struct next_tHashInput_7 = iterator_tHashInput_7.next();

	row22.ID = next_tHashInput_7.ID;
	row22.FECHA = next_tHashInput_7.FECHA;

 



/**
 * [tHashInput_7 begin ] stop
 */
	
	/**
	 * [tHashInput_7 main ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 


	tos_count_tHashInput_7++;

/**
 * [tHashInput_7 main ] stop
 */
	
	/**
	 * [tHashInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					


			   
			   

					row22Struct row22_HashRow = new row22Struct();
		   	   	   
				
				row22_HashRow.ID = row22.ID;
				
				row22_HashRow.FECHA = row22.FECHA;
				
			tHash_Lookup_row22.put(row22_HashRow);
			
            




 


	tos_count_tAdvancedHash_row22++;

/**
 * [tAdvancedHash_row22 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";
	
	

 



/**
 * [tAdvancedHash_row22 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row22 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";
	
	

 



/**
 * [tAdvancedHash_row22 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_7 end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	
    

		
			nb_line_tHashInput_7++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ACM_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_7_NB_LINE", nb_line_tHashInput_7);       

 

ok_Hash.put("tHashInput_7", true);
end_Hash.put("tHashInput_7", System.currentTimeMillis());




/**
 * [tHashInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";
	
	

tHash_Lookup_row22.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row22", true);
end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());




/**
 * [tAdvancedHash_row22 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";
	
	

 



/**
 * [tAdvancedHash_row22 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row24Struct implements routines.system.IPersistableComparableLookupRow<row24Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return true;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal CODIGO;

				public BigDecimal getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 0;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return "";
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal TIPO;

				public BigDecimal getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 0;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return "";
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public String NUMCONTRATO;

				public String getNUMCONTRATO () {
					return this.NUMCONTRATO;
				}

				public Boolean NUMCONTRATOIsNullable(){
				    return true;
				}
				public Boolean NUMCONTRATOIsKey(){
				    return false;
				}
				public Integer NUMCONTRATOLength(){
				    return 50;
				}
				public Integer NUMCONTRATOPrecision(){
				    return 0;
				}
				public String NUMCONTRATODefault(){
				
					return null;
				
				}
				public String NUMCONTRATOComment(){
				
				    return "";
				
				}
				public String NUMCONTRATOPattern(){
				
					return "";
				
				}
				public String NUMCONTRATOOriginalDbColumnName(){
				
					return "NUMCONTRATO";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public BigDecimal PADRE_ID;

				public BigDecimal getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return "";
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CONTRATOS_ID == null) ? 0 : this.CONTRATOS_ID.hashCode());
					
						result = prime * result + ((this.CLASE == null) ? 0 : this.CLASE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row24Struct other = (row24Struct) obj;
		
						if (this.CONTRATOS_ID == null) {
							if (other.CONTRATOS_ID != null)
								return false;
						
						} else if (!this.CONTRATOS_ID.equals(other.CONTRATOS_ID))
						
							return false;
					
						if (this.CLASE == null) {
							if (other.CLASE != null)
								return false;
						
						} else if (!this.CLASE.equals(other.CLASE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row24Struct other) {

		other.ID = this.ID;
	            other.UORG_ID = this.UORG_ID;
	            other.IPS_ID = this.IPS_ID;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            other.VALOR = this.VALOR;
	            other.TIPO = this.TIPO;
	            other.NUMCONTRATO = this.NUMCONTRATO;
	            other.CONTRATOS_ID = this.CONTRATOS_ID;
	            other.CLASE = this.CLASE;
	            other.PADRE_ID = this.PADRE_ID;
	            
	}

	public void copyKeysDataTo(row24Struct other) {

		other.CONTRATOS_ID = this.CONTRATOS_ID;
	            	other.CLASE = this.CLASE;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
       			    	this.UORG_ID = (BigDecimal) ois.readObject();
					
       			    	this.IPS_ID = (BigDecimal) ois.readObject();
					
						this.NOMBRE = readString(dis,ois);
					
       			    	this.CODIGO = (BigDecimal) ois.readObject();
					
       			    	this.VALOR = (BigDecimal) ois.readObject();
					
       			    	this.TIPO = (BigDecimal) ois.readObject();
					
						this.NUMCONTRATO = readString(dis,ois);
					
       			    	this.PADRE_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
       			    	this.UORG_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.IPS_ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBRE = readString(dis,objectIn);
					
       			    	this.CODIGO = (BigDecimal) objectIn.readObject();
					
       			    	this.VALOR = (BigDecimal) objectIn.readObject();
					
       			    	this.TIPO = (BigDecimal) objectIn.readObject();
					
						this.NUMCONTRATO = readString(dis,objectIn);
					
       			    	this.PADRE_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
       			    	oos.writeObject(this.UORG_ID);
					
       			    	oos.writeObject(this.IPS_ID);
					
						writeString(this.NOMBRE, dos, oos);
					
       			    	oos.writeObject(this.CODIGO);
					
       			    	oos.writeObject(this.VALOR);
					
       			    	oos.writeObject(this.TIPO);
					
						writeString(this.NUMCONTRATO, dos, oos);
					
       			    	oos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.UORG_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.IPS_ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CODIGO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VALOR);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TIPO);
					
						writeString(this.NUMCONTRATO, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TIPO="+String.valueOf(TIPO));
		sb.append(",NUMCONTRATO="+NUMCONTRATO);
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CONTRATOS_ID, other.CONTRATOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CLASE, other.CLASE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row24Struct row24 = new row24Struct();




	
	/**
	 * [tAdvancedHash_row24 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row24", false);
		start_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row24";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tAdvancedHash_row24 = 0;
		

			   		// connection name:row24
			   		// source node:tHashInput_8 - inputs:(after_tOracleInput_9) outputs:(row24,row24) | target node:tAdvancedHash_row24 - inputs:(row24) outputs:()
			   		// linked node: tMap_6 - inputs:(row23,row24,row25) outputs:(Elimina4,Inserta5)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row24 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row24Struct>getLookup(matchingModeEnum_row24);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row24", tHash_Lookup_row24);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row24 begin ] stop
 */



	
	/**
	 * [tHashInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_8", false);
		start_Hash.put("tHashInput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_8";
	
	
		int tos_count_tHashInput_8 = 0;
		


int nb_line_tHashInput_8 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashInput_8 = mf_tHashInput_8.getAdvancedMemoryHashFile("tHashFile_ACM_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_8==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row9Struct> iterator_tHashInput_8 = tHashFile_tHashInput_8.iterator();
while (iterator_tHashInput_8.hasNext()) {
    row9Struct next_tHashInput_8 = iterator_tHashInput_8.next();

	row24.ID = next_tHashInput_8.ID;
	row24.UORG_ID = next_tHashInput_8.UORG_ID;
	row24.IPS_ID = next_tHashInput_8.IPS_ID;
	row24.NOMBRE = next_tHashInput_8.NOMBRE;
	row24.CODIGO = next_tHashInput_8.CODIGO;
	row24.VALOR = next_tHashInput_8.VALOR;
	row24.TIPO = next_tHashInput_8.TIPO;
	row24.NUMCONTRATO = next_tHashInput_8.NUMCONTRATO;
	row24.CONTRATOS_ID = next_tHashInput_8.CONTRATOS_ID;
	row24.CLASE = next_tHashInput_8.CLASE;
	row24.PADRE_ID = next_tHashInput_8.PADRE_ID;

 



/**
 * [tHashInput_8 begin ] stop
 */
	
	/**
	 * [tHashInput_8 main ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 


	tos_count_tHashInput_8++;

/**
 * [tHashInput_8 main ] stop
 */
	
	/**
	 * [tHashInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row24 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row24";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row24"
						
						);
					}
					


			   
			   

					row24Struct row24_HashRow = new row24Struct();
		   	   	   
				
				row24_HashRow.ID = row24.ID;
				
				row24_HashRow.UORG_ID = row24.UORG_ID;
				
				row24_HashRow.IPS_ID = row24.IPS_ID;
				
				row24_HashRow.NOMBRE = row24.NOMBRE;
				
				row24_HashRow.CODIGO = row24.CODIGO;
				
				row24_HashRow.VALOR = row24.VALOR;
				
				row24_HashRow.TIPO = row24.TIPO;
				
				row24_HashRow.NUMCONTRATO = row24.NUMCONTRATO;
				
				row24_HashRow.CONTRATOS_ID = row24.CONTRATOS_ID;
				
				row24_HashRow.CLASE = row24.CLASE;
				
				row24_HashRow.PADRE_ID = row24.PADRE_ID;
				
			tHash_Lookup_row24.put(row24_HashRow);
			
            




 


	tos_count_tAdvancedHash_row24++;

/**
 * [tAdvancedHash_row24 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row24";
	
	

 



/**
 * [tAdvancedHash_row24 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row24 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row24";
	
	

 



/**
 * [tAdvancedHash_row24 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_8 end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	
    

		
			nb_line_tHashInput_8++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ACM_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_8_NB_LINE", nb_line_tHashInput_8);       

 

ok_Hash.put("tHashInput_8", true);
end_Hash.put("tHashInput_8", System.currentTimeMillis());




/**
 * [tHashInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row24 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row24";
	
	

tHash_Lookup_row24.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row24", true);
end_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());




/**
 * [tAdvancedHash_row24 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row24 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row24";
	
	

 



/**
 * [tAdvancedHash_row24 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row25Struct implements routines.system.IPersistableComparableLookupRow<row25Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FECHA == null) ? 0 : this.FECHA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row25Struct other = (row25Struct) obj;
		
						if (this.FECHA == null) {
							if (other.FECHA != null)
								return false;
						
						} else if (!this.FECHA.equals(other.FECHA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row25Struct other) {

		other.ID = this.ID;
	            other.FECHA = this.FECHA;
	            
	}

	public void copyKeysDataTo(row25Struct other) {

		other.FECHA = this.FECHA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FECHA, other.FECHA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();




	
	/**
	 * [tAdvancedHash_row25 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row25", false);
		start_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row25";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tAdvancedHash_row25 = 0;
		

			   		// connection name:row25
			   		// source node:tHashInput_9 - inputs:(after_tOracleInput_9) outputs:(row25,row25) | target node:tAdvancedHash_row25 - inputs:(row25) outputs:()
			   		// linked node: tMap_6 - inputs:(row23,row24,row25) outputs:(Elimina4,Inserta5)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row25 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row25Struct>getLookup(matchingModeEnum_row25);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row25", tHash_Lookup_row25);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row25 begin ] stop
 */



	
	/**
	 * [tHashInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_9", false);
		start_Hash.put("tHashInput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_9";
	
	
		int tos_count_tHashInput_9 = 0;
		


int nb_line_tHashInput_9 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_9 = mf_tHashInput_9.getAdvancedMemoryHashFile("tHashFile_ACM_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_9==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_9 = tHashFile_tHashInput_9.iterator();
while (iterator_tHashInput_9.hasNext()) {
    row10Struct next_tHashInput_9 = iterator_tHashInput_9.next();

	row25.ID = next_tHashInput_9.ID;
	row25.FECHA = next_tHashInput_9.FECHA;

 



/**
 * [tHashInput_9 begin ] stop
 */
	
	/**
	 * [tHashInput_9 main ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 


	tos_count_tHashInput_9++;

/**
 * [tHashInput_9 main ] stop
 */
	
	/**
	 * [tHashInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row25"
						
						);
					}
					


			   
			   

					row25Struct row25_HashRow = new row25Struct();
		   	   	   
				
				row25_HashRow.ID = row25.ID;
				
				row25_HashRow.FECHA = row25.FECHA;
				
			tHash_Lookup_row25.put(row25_HashRow);
			
            




 


	tos_count_tAdvancedHash_row25++;

/**
 * [tAdvancedHash_row25 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	

 



/**
 * [tAdvancedHash_row25 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row25 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	

 



/**
 * [tAdvancedHash_row25 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_9 end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	
    

		
			nb_line_tHashInput_9++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ACM_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_9_NB_LINE", nb_line_tHashInput_9);       

 

ok_Hash.put("tHashInput_9", true);
end_Hash.put("tHashInput_9", System.currentTimeMillis());




/**
 * [tHashInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	

tHash_Lookup_row25.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row25", true);
end_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());




/**
 * [tAdvancedHash_row25 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	

 



/**
 * [tAdvancedHash_row25 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row27Struct implements routines.system.IPersistableComparableLookupRow<row27Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FECHA == null) ? 0 : this.FECHA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row27Struct other = (row27Struct) obj;
		
						if (this.FECHA == null) {
							if (other.FECHA != null)
								return false;
						
						} else if (!this.FECHA.equals(other.FECHA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row27Struct other) {

		other.ID = this.ID;
	            other.FECHA = this.FECHA;
	            
	}

	public void copyKeysDataTo(row27Struct other) {

		other.FECHA = this.FECHA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FECHA, other.FECHA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();




	
	/**
	 * [tAdvancedHash_row27 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row27", false);
		start_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row27";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tAdvancedHash_row27 = 0;
		

			   		// connection name:row27
			   		// source node:tHashInput_10 - inputs:(after_tOracleInput_10) outputs:(row27,row27) | target node:tAdvancedHash_row27 - inputs:(row27) outputs:()
			   		// linked node: tMap_7 - inputs:(row26,row27) outputs:(Elimina5,Inserta6)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row27 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row27Struct>getLookup(matchingModeEnum_row27);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row27", tHash_Lookup_row27);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row27 begin ] stop
 */



	
	/**
	 * [tHashInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_10", false);
		start_Hash.put("tHashInput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_10";
	
	
		int tos_count_tHashInput_10 = 0;
		


int nb_line_tHashInput_10 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_10 = mf_tHashInput_10.getAdvancedMemoryHashFile("tHashFile_ACM_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_10==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_10 = tHashFile_tHashInput_10.iterator();
while (iterator_tHashInput_10.hasNext()) {
    row10Struct next_tHashInput_10 = iterator_tHashInput_10.next();

	row27.ID = next_tHashInput_10.ID;
	row27.FECHA = next_tHashInput_10.FECHA;

 



/**
 * [tHashInput_10 begin ] stop
 */
	
	/**
	 * [tHashInput_10 main ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 


	tos_count_tHashInput_10++;

/**
 * [tHashInput_10 main ] stop
 */
	
	/**
	 * [tHashInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row27"
						
						);
					}
					


			   
			   

					row27Struct row27_HashRow = new row27Struct();
		   	   	   
				
				row27_HashRow.ID = row27.ID;
				
				row27_HashRow.FECHA = row27.FECHA;
				
			tHash_Lookup_row27.put(row27_HashRow);
			
            




 


	tos_count_tAdvancedHash_row27++;

/**
 * [tAdvancedHash_row27 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";
	
	

 



/**
 * [tAdvancedHash_row27 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row27 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";
	
	

 



/**
 * [tAdvancedHash_row27 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_10 end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	
    

		
			nb_line_tHashInput_10++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ACM_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_10_NB_LINE", nb_line_tHashInput_10);       

 

ok_Hash.put("tHashInput_10", true);
end_Hash.put("tHashInput_10", System.currentTimeMillis());




/**
 * [tHashInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";
	
	

tHash_Lookup_row27.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row27", true);
end_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());




/**
 * [tAdvancedHash_row27 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";
	
	

 



/**
 * [tAdvancedHash_row27 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row29Struct implements routines.system.IPersistableComparableLookupRow<row29Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return true;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal CODIGO;

				public BigDecimal getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 0;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return "";
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal TIPO;

				public BigDecimal getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 0;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return "";
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public String NUMCONTRATO;

				public String getNUMCONTRATO () {
					return this.NUMCONTRATO;
				}

				public Boolean NUMCONTRATOIsNullable(){
				    return true;
				}
				public Boolean NUMCONTRATOIsKey(){
				    return false;
				}
				public Integer NUMCONTRATOLength(){
				    return 50;
				}
				public Integer NUMCONTRATOPrecision(){
				    return 0;
				}
				public String NUMCONTRATODefault(){
				
					return null;
				
				}
				public String NUMCONTRATOComment(){
				
				    return "";
				
				}
				public String NUMCONTRATOPattern(){
				
					return "";
				
				}
				public String NUMCONTRATOOriginalDbColumnName(){
				
					return "NUMCONTRATO";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public BigDecimal PADRE_ID;

				public BigDecimal getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return "";
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CONTRATOS_ID == null) ? 0 : this.CONTRATOS_ID.hashCode());
					
						result = prime * result + ((this.CLASE == null) ? 0 : this.CLASE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row29Struct other = (row29Struct) obj;
		
						if (this.CONTRATOS_ID == null) {
							if (other.CONTRATOS_ID != null)
								return false;
						
						} else if (!this.CONTRATOS_ID.equals(other.CONTRATOS_ID))
						
							return false;
					
						if (this.CLASE == null) {
							if (other.CLASE != null)
								return false;
						
						} else if (!this.CLASE.equals(other.CLASE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row29Struct other) {

		other.ID = this.ID;
	            other.UORG_ID = this.UORG_ID;
	            other.IPS_ID = this.IPS_ID;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            other.VALOR = this.VALOR;
	            other.TIPO = this.TIPO;
	            other.NUMCONTRATO = this.NUMCONTRATO;
	            other.CONTRATOS_ID = this.CONTRATOS_ID;
	            other.CLASE = this.CLASE;
	            other.PADRE_ID = this.PADRE_ID;
	            
	}

	public void copyKeysDataTo(row29Struct other) {

		other.CONTRATOS_ID = this.CONTRATOS_ID;
	            	other.CLASE = this.CLASE;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
       			    	this.UORG_ID = (BigDecimal) ois.readObject();
					
       			    	this.IPS_ID = (BigDecimal) ois.readObject();
					
						this.NOMBRE = readString(dis,ois);
					
       			    	this.CODIGO = (BigDecimal) ois.readObject();
					
       			    	this.VALOR = (BigDecimal) ois.readObject();
					
       			    	this.TIPO = (BigDecimal) ois.readObject();
					
						this.NUMCONTRATO = readString(dis,ois);
					
       			    	this.PADRE_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
       			    	this.UORG_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.IPS_ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBRE = readString(dis,objectIn);
					
       			    	this.CODIGO = (BigDecimal) objectIn.readObject();
					
       			    	this.VALOR = (BigDecimal) objectIn.readObject();
					
       			    	this.TIPO = (BigDecimal) objectIn.readObject();
					
						this.NUMCONTRATO = readString(dis,objectIn);
					
       			    	this.PADRE_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
       			    	oos.writeObject(this.UORG_ID);
					
       			    	oos.writeObject(this.IPS_ID);
					
						writeString(this.NOMBRE, dos, oos);
					
       			    	oos.writeObject(this.CODIGO);
					
       			    	oos.writeObject(this.VALOR);
					
       			    	oos.writeObject(this.TIPO);
					
						writeString(this.NUMCONTRATO, dos, oos);
					
       			    	oos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.UORG_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.IPS_ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CODIGO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VALOR);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TIPO);
					
						writeString(this.NUMCONTRATO, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TIPO="+String.valueOf(TIPO));
		sb.append(",NUMCONTRATO="+NUMCONTRATO);
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CONTRATOS_ID, other.CONTRATOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CLASE, other.CLASE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row29Struct row29 = new row29Struct();




	
	/**
	 * [tAdvancedHash_row29 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row29", false);
		start_Hash.put("tAdvancedHash_row29", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row29";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tAdvancedHash_row29 = 0;
		

			   		// connection name:row29
			   		// source node:tHashInput_11 - inputs:(after_tOracleInput_11) outputs:(row29,row29) | target node:tAdvancedHash_row29 - inputs:(row29) outputs:()
			   		// linked node: tMap_8 - inputs:(row28,row29,row30) outputs:(Elimina6,Inserta7)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row29 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct> tHash_Lookup_row29 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row29Struct>getLookup(matchingModeEnum_row29);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row29", tHash_Lookup_row29);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row29 begin ] stop
 */



	
	/**
	 * [tHashInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_11", false);
		start_Hash.put("tHashInput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_11";
	
	
		int tos_count_tHashInput_11 = 0;
		


int nb_line_tHashInput_11 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashInput_11 = mf_tHashInput_11.getAdvancedMemoryHashFile("tHashFile_ACM_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_11==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row9Struct> iterator_tHashInput_11 = tHashFile_tHashInput_11.iterator();
while (iterator_tHashInput_11.hasNext()) {
    row9Struct next_tHashInput_11 = iterator_tHashInput_11.next();

	row29.ID = next_tHashInput_11.ID;
	row29.UORG_ID = next_tHashInput_11.UORG_ID;
	row29.IPS_ID = next_tHashInput_11.IPS_ID;
	row29.NOMBRE = next_tHashInput_11.NOMBRE;
	row29.CODIGO = next_tHashInput_11.CODIGO;
	row29.VALOR = next_tHashInput_11.VALOR;
	row29.TIPO = next_tHashInput_11.TIPO;
	row29.NUMCONTRATO = next_tHashInput_11.NUMCONTRATO;
	row29.CONTRATOS_ID = next_tHashInput_11.CONTRATOS_ID;
	row29.CLASE = next_tHashInput_11.CLASE;
	row29.PADRE_ID = next_tHashInput_11.PADRE_ID;

 



/**
 * [tHashInput_11 begin ] stop
 */
	
	/**
	 * [tHashInput_11 main ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 


	tos_count_tHashInput_11++;

/**
 * [tHashInput_11 main ] stop
 */
	
	/**
	 * [tHashInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row29"
						
						);
					}
					


			   
			   

					row29Struct row29_HashRow = new row29Struct();
		   	   	   
				
				row29_HashRow.ID = row29.ID;
				
				row29_HashRow.UORG_ID = row29.UORG_ID;
				
				row29_HashRow.IPS_ID = row29.IPS_ID;
				
				row29_HashRow.NOMBRE = row29.NOMBRE;
				
				row29_HashRow.CODIGO = row29.CODIGO;
				
				row29_HashRow.VALOR = row29.VALOR;
				
				row29_HashRow.TIPO = row29.TIPO;
				
				row29_HashRow.NUMCONTRATO = row29.NUMCONTRATO;
				
				row29_HashRow.CONTRATOS_ID = row29.CONTRATOS_ID;
				
				row29_HashRow.CLASE = row29.CLASE;
				
				row29_HashRow.PADRE_ID = row29.PADRE_ID;
				
			tHash_Lookup_row29.put(row29_HashRow);
			
            




 


	tos_count_tAdvancedHash_row29++;

/**
 * [tAdvancedHash_row29 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";
	
	

 



/**
 * [tAdvancedHash_row29 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row29 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";
	
	

 



/**
 * [tAdvancedHash_row29 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_11 end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	
    

		
			nb_line_tHashInput_11++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ACM_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_11_NB_LINE", nb_line_tHashInput_11);       

 

ok_Hash.put("tHashInput_11", true);
end_Hash.put("tHashInput_11", System.currentTimeMillis());




/**
 * [tHashInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";
	
	

tHash_Lookup_row29.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row29", true);
end_Hash.put("tAdvancedHash_row29", System.currentTimeMillis());




/**
 * [tAdvancedHash_row29 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";
	
	

 



/**
 * [tAdvancedHash_row29 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row30Struct implements routines.system.IPersistableComparableLookupRow<row30Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FECHA == null) ? 0 : this.FECHA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row30Struct other = (row30Struct) obj;
		
						if (this.FECHA == null) {
							if (other.FECHA != null)
								return false;
						
						} else if (!this.FECHA.equals(other.FECHA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row30Struct other) {

		other.ID = this.ID;
	            other.FECHA = this.FECHA;
	            
	}

	public void copyKeysDataTo(row30Struct other) {

		other.FECHA = this.FECHA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FECHA, other.FECHA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();




	
	/**
	 * [tAdvancedHash_row30 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row30", false);
		start_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row30";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tAdvancedHash_row30 = 0;
		

			   		// connection name:row30
			   		// source node:tHashInput_12 - inputs:(after_tOracleInput_11) outputs:(row30,row30) | target node:tAdvancedHash_row30 - inputs:(row30) outputs:()
			   		// linked node: tMap_8 - inputs:(row28,row29,row30) outputs:(Elimina6,Inserta7)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row30 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row30Struct>getLookup(matchingModeEnum_row30);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row30", tHash_Lookup_row30);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row30 begin ] stop
 */



	
	/**
	 * [tHashInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_12", false);
		start_Hash.put("tHashInput_12", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_12";
	
	
		int tos_count_tHashInput_12 = 0;
		


int nb_line_tHashInput_12 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_12=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_12 = mf_tHashInput_12.getAdvancedMemoryHashFile("tHashFile_ACM_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_12==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_12 = tHashFile_tHashInput_12.iterator();
while (iterator_tHashInput_12.hasNext()) {
    row10Struct next_tHashInput_12 = iterator_tHashInput_12.next();

	row30.ID = next_tHashInput_12.ID;
	row30.FECHA = next_tHashInput_12.FECHA;

 



/**
 * [tHashInput_12 begin ] stop
 */
	
	/**
	 * [tHashInput_12 main ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 


	tos_count_tHashInput_12++;

/**
 * [tHashInput_12 main ] stop
 */
	
	/**
	 * [tHashInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 



/**
 * [tHashInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					


			   
			   

					row30Struct row30_HashRow = new row30Struct();
		   	   	   
				
				row30_HashRow.ID = row30.ID;
				
				row30_HashRow.FECHA = row30.FECHA;
				
			tHash_Lookup_row30.put(row30_HashRow);
			
            




 


	tos_count_tAdvancedHash_row30++;

/**
 * [tAdvancedHash_row30 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	

 



/**
 * [tAdvancedHash_row30 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row30 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	

 



/**
 * [tAdvancedHash_row30 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 



/**
 * [tHashInput_12 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_12 end ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	
    

		
			nb_line_tHashInput_12++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ACM_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_12_NB_LINE", nb_line_tHashInput_12);       

 

ok_Hash.put("tHashInput_12", true);
end_Hash.put("tHashInput_12", System.currentTimeMillis());




/**
 * [tHashInput_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	

tHash_Lookup_row30.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row30", true);
end_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());




/**
 * [tAdvancedHash_row30 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_12 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 



/**
 * [tHashInput_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	

 



/**
 * [tAdvancedHash_row30 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row32Struct implements routines.system.IPersistableComparableLookupRow<row32Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FECHA == null) ? 0 : this.FECHA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row32Struct other = (row32Struct) obj;
		
						if (this.FECHA == null) {
							if (other.FECHA != null)
								return false;
						
						} else if (!this.FECHA.equals(other.FECHA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row32Struct other) {

		other.ID = this.ID;
	            other.FECHA = this.FECHA;
	            
	}

	public void copyKeysDataTo(row32Struct other) {

		other.FECHA = this.FECHA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FECHA, other.FECHA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row32Struct row32 = new row32Struct();




	
	/**
	 * [tAdvancedHash_row32 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row32", false);
		start_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row32";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tAdvancedHash_row32 = 0;
		

			   		// connection name:row32
			   		// source node:tHashInput_13 - inputs:(after_tOracleInput_12) outputs:(row32,row32) | target node:tAdvancedHash_row32 - inputs:(row32) outputs:()
			   		// linked node: tMap_9 - inputs:(row31,row32) outputs:(Elimina7,Inserta8)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row32 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row32Struct>getLookup(matchingModeEnum_row32);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row32", tHash_Lookup_row32);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row32 begin ] stop
 */



	
	/**
	 * [tHashInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_13", false);
		start_Hash.put("tHashInput_13", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_13";
	
	
		int tos_count_tHashInput_13 = 0;
		


int nb_line_tHashInput_13 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_13=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_13 = mf_tHashInput_13.getAdvancedMemoryHashFile("tHashFile_ACM_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_13==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_13 = tHashFile_tHashInput_13.iterator();
while (iterator_tHashInput_13.hasNext()) {
    row10Struct next_tHashInput_13 = iterator_tHashInput_13.next();

	row32.ID = next_tHashInput_13.ID;
	row32.FECHA = next_tHashInput_13.FECHA;

 



/**
 * [tHashInput_13 begin ] stop
 */
	
	/**
	 * [tHashInput_13 main ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 


	tos_count_tHashInput_13++;

/**
 * [tHashInput_13 main ] stop
 */
	
	/**
	 * [tHashInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 



/**
 * [tHashInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row32 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row32"
						
						);
					}
					


			   
			   

					row32Struct row32_HashRow = new row32Struct();
		   	   	   
				
				row32_HashRow.ID = row32.ID;
				
				row32_HashRow.FECHA = row32.FECHA;
				
			tHash_Lookup_row32.put(row32_HashRow);
			
            




 


	tos_count_tAdvancedHash_row32++;

/**
 * [tAdvancedHash_row32 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";
	
	

 



/**
 * [tAdvancedHash_row32 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row32 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";
	
	

 



/**
 * [tAdvancedHash_row32 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 



/**
 * [tHashInput_13 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_13 end ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	
    

		
			nb_line_tHashInput_13++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ACM_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_13_NB_LINE", nb_line_tHashInput_13);       

 

ok_Hash.put("tHashInput_13", true);
end_Hash.put("tHashInput_13", System.currentTimeMillis());




/**
 * [tHashInput_13 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row32 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";
	
	

tHash_Lookup_row32.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row32", true);
end_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());




/**
 * [tAdvancedHash_row32 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_13 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 



/**
 * [tHashInput_13 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row32 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";
	
	

 



/**
 * [tAdvancedHash_row32 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableComparableLookupRow<row34Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 50;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 500;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CIRCULAR;

				public String getCIRCULAR () {
					return this.CIRCULAR;
				}

				public Boolean CIRCULARIsNullable(){
				    return true;
				}
				public Boolean CIRCULARIsKey(){
				    return false;
				}
				public Integer CIRCULARLength(){
				    return 50;
				}
				public Integer CIRCULARPrecision(){
				    return 0;
				}
				public String CIRCULARDefault(){
				
					return null;
				
				}
				public String CIRCULARComment(){
				
				    return "";
				
				}
				public String CIRCULARPattern(){
				
					return "";
				
				}
				public String CIRCULAROriginalDbColumnName(){
				
					return "CIRCULAR";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return 0;
				}
				public Integer METAPrecision(){
				    return null;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				
			    public String UNIDAD;

				public String getUNIDAD () {
					return this.UNIDAD;
				}

				public Boolean UNIDADIsNullable(){
				    return true;
				}
				public Boolean UNIDADIsKey(){
				    return false;
				}
				public Integer UNIDADLength(){
				    return 50;
				}
				public Integer UNIDADPrecision(){
				    return 0;
				}
				public String UNIDADDefault(){
				
					return null;
				
				}
				public String UNIDADComment(){
				
				    return "";
				
				}
				public String UNIDADPattern(){
				
					return "";
				
				}
				public String UNIDADOriginalDbColumnName(){
				
					return "UNIDAD";
				
				}

				
			    public String NUMERADOR_DESCRIPCION;

				public String getNUMERADOR_DESCRIPCION () {
					return this.NUMERADOR_DESCRIPCION;
				}

				public Boolean NUMERADOR_DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean NUMERADOR_DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer NUMERADOR_DESCRIPCIONLength(){
				    return 2000;
				}
				public Integer NUMERADOR_DESCRIPCIONPrecision(){
				    return 0;
				}
				public String NUMERADOR_DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String NUMERADOR_DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String NUMERADOR_DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String NUMERADOR_DESCRIPCIONOriginalDbColumnName(){
				
					return "NUMERADOR_DESCRIPCION";
				
				}

				
			    public String DENOMINADOR_DESCRIPCION;

				public String getDENOMINADOR_DESCRIPCION () {
					return this.DENOMINADOR_DESCRIPCION;
				}

				public Boolean DENOMINADOR_DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR_DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DENOMINADOR_DESCRIPCIONLength(){
				    return 2000;
				}
				public Integer DENOMINADOR_DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DENOMINADOR_DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DENOMINADOR_DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DENOMINADOR_DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DENOMINADOR_DESCRIPCIONOriginalDbColumnName(){
				
					return "DENOMINADOR_DESCRIPCION";
				
				}

				
			    public String INDICADOR_DESCRIPCION;

				public String getINDICADOR_DESCRIPCION () {
					return this.INDICADOR_DESCRIPCION;
				}

				public Boolean INDICADOR_DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean INDICADOR_DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer INDICADOR_DESCRIPCIONLength(){
				    return 4000;
				}
				public Integer INDICADOR_DESCRIPCIONPrecision(){
				    return 0;
				}
				public String INDICADOR_DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String INDICADOR_DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String INDICADOR_DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String INDICADOR_DESCRIPCIONOriginalDbColumnName(){
				
					return "INDICADOR_DESCRIPCION";
				
				}

				
			    public BigDecimal CATEGORIA;

				public BigDecimal getCATEGORIA () {
					return this.CATEGORIA;
				}

				public Boolean CATEGORIAIsNullable(){
				    return true;
				}
				public Boolean CATEGORIAIsKey(){
				    return false;
				}
				public Integer CATEGORIALength(){
				    return 0;
				}
				public Integer CATEGORIAPrecision(){
				    return null;
				}
				public String CATEGORIADefault(){
				
					return "";
				
				}
				public String CATEGORIAComment(){
				
				    return "";
				
				}
				public String CATEGORIAPattern(){
				
					return "";
				
				}
				public String CATEGORIAOriginalDbColumnName(){
				
					return "CATEGORIA";
				
				}

				
			    public String NUMERADOR_NOMBRE;

				public String getNUMERADOR_NOMBRE () {
					return this.NUMERADOR_NOMBRE;
				}

				public Boolean NUMERADOR_NOMBREIsNullable(){
				    return true;
				}
				public Boolean NUMERADOR_NOMBREIsKey(){
				    return false;
				}
				public Integer NUMERADOR_NOMBRELength(){
				    return 1000;
				}
				public Integer NUMERADOR_NOMBREPrecision(){
				    return 0;
				}
				public String NUMERADOR_NOMBREDefault(){
				
					return "";
				
				}
				public String NUMERADOR_NOMBREComment(){
				
				    return "";
				
				}
				public String NUMERADOR_NOMBREPattern(){
				
					return "";
				
				}
				public String NUMERADOR_NOMBREOriginalDbColumnName(){
				
					return "NUMERADOR_NOMBRE";
				
				}

				
			    public String DENOMINADOR_NOMBRE;

				public String getDENOMINADOR_NOMBRE () {
					return this.DENOMINADOR_NOMBRE;
				}

				public Boolean DENOMINADOR_NOMBREIsNullable(){
				    return true;
				}
				public Boolean DENOMINADOR_NOMBREIsKey(){
				    return false;
				}
				public Integer DENOMINADOR_NOMBRELength(){
				    return 1000;
				}
				public Integer DENOMINADOR_NOMBREPrecision(){
				    return 0;
				}
				public String DENOMINADOR_NOMBREDefault(){
				
					return "";
				
				}
				public String DENOMINADOR_NOMBREComment(){
				
				    return "";
				
				}
				public String DENOMINADOR_NOMBREPattern(){
				
					return "";
				
				}
				public String DENOMINADOR_NOMBREOriginalDbColumnName(){
				
					return "DENOMINADOR_NOMBRE";
				
				}

				
			    public BigDecimal TENDENCIA;

				public BigDecimal getTENDENCIA () {
					return this.TENDENCIA;
				}

				public Boolean TENDENCIAIsNullable(){
				    return true;
				}
				public Boolean TENDENCIAIsKey(){
				    return false;
				}
				public Integer TENDENCIALength(){
				    return 0;
				}
				public Integer TENDENCIAPrecision(){
				    return null;
				}
				public String TENDENCIADefault(){
				
					return "";
				
				}
				public String TENDENCIAComment(){
				
				    return "";
				
				}
				public String TENDENCIAPattern(){
				
					return "";
				
				}
				public String TENDENCIAOriginalDbColumnName(){
				
					return "TENDENCIA";
				
				}

				
			    public String MODULO;

				public String getMODULO () {
					return this.MODULO;
				}

				public Boolean MODULOIsNullable(){
				    return true;
				}
				public Boolean MODULOIsKey(){
				    return false;
				}
				public Integer MODULOLength(){
				    return 10;
				}
				public Integer MODULOPrecision(){
				    return 0;
				}
				public String MODULODefault(){
				
					return "";
				
				}
				public String MODULOComment(){
				
				    return "";
				
				}
				public String MODULOPattern(){
				
					return "";
				
				}
				public String MODULOOriginalDbColumnName(){
				
					return "MODULO";
				
				}

				
			    public BigDecimal TGESTION;

				public BigDecimal getTGESTION () {
					return this.TGESTION;
				}

				public Boolean TGESTIONIsNullable(){
				    return true;
				}
				public Boolean TGESTIONIsKey(){
				    return false;
				}
				public Integer TGESTIONLength(){
				    return 0;
				}
				public Integer TGESTIONPrecision(){
				    return null;
				}
				public String TGESTIONDefault(){
				
					return "";
				
				}
				public String TGESTIONComment(){
				
				    return "";
				
				}
				public String TGESTIONPattern(){
				
					return "";
				
				}
				public String TGESTIONOriginalDbColumnName(){
				
					return "TGESTION";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
						result = prime * result + ((this.NOMBRE == null) ? 0 : this.NOMBRE.hashCode());
					
						result = prime * result + ((this.CIRCULAR == null) ? 0 : this.CIRCULAR.hashCode());
					
						result = prime * result + ((this.ESPECIALIDADES_ID == null) ? 0 : this.ESPECIALIDADES_ID.hashCode());
					
						result = prime * result + ((this.META == null) ? 0 : this.META.hashCode());
					
						result = prime * result + ((this.UNIDAD == null) ? 0 : this.UNIDAD.hashCode());
					
						result = prime * result + ((this.NUMERADOR_DESCRIPCION == null) ? 0 : this.NUMERADOR_DESCRIPCION.hashCode());
					
						result = prime * result + ((this.DENOMINADOR_DESCRIPCION == null) ? 0 : this.DENOMINADOR_DESCRIPCION.hashCode());
					
						result = prime * result + ((this.INDICADOR_DESCRIPCION == null) ? 0 : this.INDICADOR_DESCRIPCION.hashCode());
					
						result = prime * result + ((this.CATEGORIA == null) ? 0 : this.CATEGORIA.hashCode());
					
						result = prime * result + ((this.NUMERADOR_NOMBRE == null) ? 0 : this.NUMERADOR_NOMBRE.hashCode());
					
						result = prime * result + ((this.DENOMINADOR_NOMBRE == null) ? 0 : this.DENOMINADOR_NOMBRE.hashCode());
					
						result = prime * result + ((this.TENDENCIA == null) ? 0 : this.TENDENCIA.hashCode());
					
						result = prime * result + ((this.MODULO == null) ? 0 : this.MODULO.hashCode());
					
						result = prime * result + ((this.TGESTION == null) ? 0 : this.TGESTION.hashCode());
					
						result = prime * result + ((this.ESTREGISTRO_ID == null) ? 0 : this.ESTREGISTRO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row34Struct other = (row34Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					
						if (this.NOMBRE == null) {
							if (other.NOMBRE != null)
								return false;
						
						} else if (!this.NOMBRE.equals(other.NOMBRE))
						
							return false;
					
						if (this.CIRCULAR == null) {
							if (other.CIRCULAR != null)
								return false;
						
						} else if (!this.CIRCULAR.equals(other.CIRCULAR))
						
							return false;
					
						if (this.ESPECIALIDADES_ID == null) {
							if (other.ESPECIALIDADES_ID != null)
								return false;
						
						} else if (!this.ESPECIALIDADES_ID.equals(other.ESPECIALIDADES_ID))
						
							return false;
					
						if (this.META == null) {
							if (other.META != null)
								return false;
						
						} else if (!this.META.equals(other.META))
						
							return false;
					
						if (this.UNIDAD == null) {
							if (other.UNIDAD != null)
								return false;
						
						} else if (!this.UNIDAD.equals(other.UNIDAD))
						
							return false;
					
						if (this.NUMERADOR_DESCRIPCION == null) {
							if (other.NUMERADOR_DESCRIPCION != null)
								return false;
						
						} else if (!this.NUMERADOR_DESCRIPCION.equals(other.NUMERADOR_DESCRIPCION))
						
							return false;
					
						if (this.DENOMINADOR_DESCRIPCION == null) {
							if (other.DENOMINADOR_DESCRIPCION != null)
								return false;
						
						} else if (!this.DENOMINADOR_DESCRIPCION.equals(other.DENOMINADOR_DESCRIPCION))
						
							return false;
					
						if (this.INDICADOR_DESCRIPCION == null) {
							if (other.INDICADOR_DESCRIPCION != null)
								return false;
						
						} else if (!this.INDICADOR_DESCRIPCION.equals(other.INDICADOR_DESCRIPCION))
						
							return false;
					
						if (this.CATEGORIA == null) {
							if (other.CATEGORIA != null)
								return false;
						
						} else if (!this.CATEGORIA.equals(other.CATEGORIA))
						
							return false;
					
						if (this.NUMERADOR_NOMBRE == null) {
							if (other.NUMERADOR_NOMBRE != null)
								return false;
						
						} else if (!this.NUMERADOR_NOMBRE.equals(other.NUMERADOR_NOMBRE))
						
							return false;
					
						if (this.DENOMINADOR_NOMBRE == null) {
							if (other.DENOMINADOR_NOMBRE != null)
								return false;
						
						} else if (!this.DENOMINADOR_NOMBRE.equals(other.DENOMINADOR_NOMBRE))
						
							return false;
					
						if (this.TENDENCIA == null) {
							if (other.TENDENCIA != null)
								return false;
						
						} else if (!this.TENDENCIA.equals(other.TENDENCIA))
						
							return false;
					
						if (this.MODULO == null) {
							if (other.MODULO != null)
								return false;
						
						} else if (!this.MODULO.equals(other.MODULO))
						
							return false;
					
						if (this.TGESTION == null) {
							if (other.TGESTION != null)
								return false;
						
						} else if (!this.TGESTION.equals(other.TGESTION))
						
							return false;
					
						if (this.ESTREGISTRO_ID == null) {
							if (other.ESTREGISTRO_ID != null)
								return false;
						
						} else if (!this.ESTREGISTRO_ID.equals(other.ESTREGISTRO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row34Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            other.NOMBRE = this.NOMBRE;
	            other.CIRCULAR = this.CIRCULAR;
	            other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            other.META = this.META;
	            other.UNIDAD = this.UNIDAD;
	            other.NUMERADOR_DESCRIPCION = this.NUMERADOR_DESCRIPCION;
	            other.DENOMINADOR_DESCRIPCION = this.DENOMINADOR_DESCRIPCION;
	            other.INDICADOR_DESCRIPCION = this.INDICADOR_DESCRIPCION;
	            other.CATEGORIA = this.CATEGORIA;
	            other.NUMERADOR_NOMBRE = this.NUMERADOR_NOMBRE;
	            other.DENOMINADOR_NOMBRE = this.DENOMINADOR_NOMBRE;
	            other.TENDENCIA = this.TENDENCIA;
	            other.MODULO = this.MODULO;
	            other.TGESTION = this.TGESTION;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            
	}

	public void copyKeysDataTo(row34Struct other) {

		other.ID = this.ID;
	            	other.CODIGO = this.CODIGO;
	            	other.NOMBRE = this.NOMBRE;
	            	other.CIRCULAR = this.CIRCULAR;
	            	other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            	other.META = this.META;
	            	other.UNIDAD = this.UNIDAD;
	            	other.NUMERADOR_DESCRIPCION = this.NUMERADOR_DESCRIPCION;
	            	other.DENOMINADOR_DESCRIPCION = this.DENOMINADOR_DESCRIPCION;
	            	other.INDICADOR_DESCRIPCION = this.INDICADOR_DESCRIPCION;
	            	other.CATEGORIA = this.CATEGORIA;
	            	other.NUMERADOR_NOMBRE = this.NUMERADOR_NOMBRE;
	            	other.DENOMINADOR_NOMBRE = this.DENOMINADOR_NOMBRE;
	            	other.TENDENCIA = this.TENDENCIA;
	            	other.MODULO = this.MODULO;
	            	other.TGESTION = this.TGESTION;
	            	other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
					this.UNIDAD = readString(dis);
					
					this.NUMERADOR_DESCRIPCION = readString(dis);
					
					this.DENOMINADOR_DESCRIPCION = readString(dis);
					
					this.INDICADOR_DESCRIPCION = readString(dis);
					
						this.CATEGORIA = (BigDecimal) dis.readObject();
					
					this.NUMERADOR_NOMBRE = readString(dis);
					
					this.DENOMINADOR_NOMBRE = readString(dis);
					
						this.TENDENCIA = (BigDecimal) dis.readObject();
					
					this.MODULO = readString(dis);
					
						this.TGESTION = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
					this.UNIDAD = readString(dis);
					
					this.NUMERADOR_DESCRIPCION = readString(dis);
					
					this.DENOMINADOR_DESCRIPCION = readString(dis);
					
					this.INDICADOR_DESCRIPCION = readString(dis);
					
						this.CATEGORIA = (BigDecimal) dis.readObject();
					
					this.NUMERADOR_NOMBRE = readString(dis);
					
					this.DENOMINADOR_NOMBRE = readString(dis);
					
						this.TENDENCIA = (BigDecimal) dis.readObject();
					
					this.MODULO = readString(dis);
					
						this.TGESTION = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
					// String
				
						writeString(this.UNIDAD,dos);
					
					// String
				
						writeString(this.NUMERADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.DENOMINADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.INDICADOR_DESCRIPCION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CATEGORIA);
					
					// String
				
						writeString(this.NUMERADOR_NOMBRE,dos);
					
					// String
				
						writeString(this.DENOMINADOR_NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TENDENCIA);
					
					// String
				
						writeString(this.MODULO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TGESTION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
					// String
				
						writeString(this.UNIDAD,dos);
					
					// String
				
						writeString(this.NUMERADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.DENOMINADOR_DESCRIPCION,dos);
					
					// String
				
						writeString(this.INDICADOR_DESCRIPCION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CATEGORIA);
					
					// String
				
						writeString(this.NUMERADOR_NOMBRE,dos);
					
					// String
				
						writeString(this.DENOMINADOR_NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TENDENCIA);
					
					// String
				
						writeString(this.MODULO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TGESTION);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CIRCULAR="+CIRCULAR);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",META="+String.valueOf(META));
		sb.append(",UNIDAD="+UNIDAD);
		sb.append(",NUMERADOR_DESCRIPCION="+NUMERADOR_DESCRIPCION);
		sb.append(",DENOMINADOR_DESCRIPCION="+DENOMINADOR_DESCRIPCION);
		sb.append(",INDICADOR_DESCRIPCION="+INDICADOR_DESCRIPCION);
		sb.append(",CATEGORIA="+String.valueOf(CATEGORIA));
		sb.append(",NUMERADOR_NOMBRE="+NUMERADOR_NOMBRE);
		sb.append(",DENOMINADOR_NOMBRE="+DENOMINADOR_NOMBRE);
		sb.append(",TENDENCIA="+String.valueOf(TENDENCIA));
		sb.append(",MODULO="+MODULO);
		sb.append(",TGESTION="+String.valueOf(TGESTION));
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NOMBRE, other.NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CIRCULAR, other.CIRCULAR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ESPECIALIDADES_ID, other.ESPECIALIDADES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.META, other.META);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.UNIDAD, other.UNIDAD);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUMERADOR_DESCRIPCION, other.NUMERADOR_DESCRIPCION);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DENOMINADOR_DESCRIPCION, other.DENOMINADOR_DESCRIPCION);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.INDICADOR_DESCRIPCION, other.INDICADOR_DESCRIPCION);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CATEGORIA, other.CATEGORIA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUMERADOR_NOMBRE, other.NUMERADOR_NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DENOMINADOR_NOMBRE, other.DENOMINADOR_NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TENDENCIA, other.TENDENCIA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.MODULO, other.MODULO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TGESTION, other.TGESTION);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ESTREGISTRO_ID, other.ESTREGISTRO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row34Struct row34 = new row34Struct();




	
	/**
	 * [tAdvancedHash_row34 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row34", false);
		start_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row34";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tAdvancedHash_row34 = 0;
		

			   		// connection name:row34
			   		// source node:tOracleInput_14 - inputs:(after_tOracleInput_13) outputs:(row34,row34) | target node:tAdvancedHash_row34 - inputs:(row34) outputs:()
			   		// linked node: tMap_10 - inputs:(row33,row34,row35) outputs:(Actualiza1,Inserta10)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row34 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row34Struct>getLookup(matchingModeEnum_row34);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row34", tHash_Lookup_row34);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row34 begin ] stop
 */



	
	/**
	 * [tOracleInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_14", false);
		start_Hash.put("tOracleInput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_14";
	
	
		int tos_count_tOracleInput_14 = 0;
		
	


	
		    int nb_line_tOracleInput_14 = 0;
		    java.sql.Connection conn_tOracleInput_14 = null;
				conn_tOracleInput_14 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_14 = false;
				boolean isConnectionWrapped_tOracleInput_14 = !(conn_tOracleInput_14 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_14.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_14 = null;
                if (isConnectionWrapped_tOracleInput_14) {
					unwrappedOraConn_tOracleInput_14 = conn_tOracleInput_14.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_14 != null) {
                        isTimeZoneNull_tOracleInput_14 = (unwrappedOraConn_tOracleInput_14.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_14 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_14).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_14) {
					java.sql.Statement stmtGetTZ_tOracleInput_14 = conn_tOracleInput_14.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_14 = stmtGetTZ_tOracleInput_14.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_14 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_14.next()) {
						sessionTimezone_tOracleInput_14 = rsGetTZ_tOracleInput_14.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_14 && unwrappedOraConn_tOracleInput_14 != null) {
                        unwrappedOraConn_tOracleInput_14.setSessionTimeZone(sessionTimezone_tOracleInput_14);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_14).setSessionTimeZone(sessionTimezone_tOracleInput_14);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_14 = conn_tOracleInput_14.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_14.setFetchSize(1000);


		    String dbquery_tOracleInput_14 = "SELECT    TIN.ID \n        , TIN.CODIGO \n        , TIN.NOMBRE\n        , TIN.CIRCULAR\n        , TIN.ESPECIALIDADES_ID"
+"\n        , TIN.META\n        , TIN.UNIDAD\n        , TIN.NUMERADOR_DESCRIPCION\n        , TIN.DENOMINADOR_DESCRIPCION\n"
+"        , TIN.INDICADOR_DESCRIPCION\n        , TIN.CATEGORIA\n        , TIN.NUMERADOR_NOMBRE\n        , TIN.DENOMINADOR_"
+"NOMBRE\n        , TIN.TENDENCIA\n        , TIN.MODULO\n        , TIN.TGESTION\n        , TIN.ESTREGISTRO_ID \nFROM BGEN_"
+"TINDICADORES TIN\nWHERE TIN.MODULO = 'ACM'";
		    

		    globalMap.put("tOracleInput_14_QUERY",dbquery_tOracleInput_14);

		    java.sql.ResultSet rs_tOracleInput_14 = null;

		    try {
		    	rs_tOracleInput_14 = stmt_tOracleInput_14.executeQuery(dbquery_tOracleInput_14);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_14 = rs_tOracleInput_14.getMetaData();
		    	int colQtyInRs_tOracleInput_14 = rsmd_tOracleInput_14.getColumnCount();

		    String tmpContent_tOracleInput_14 = null;
		    
		    
		    while (rs_tOracleInput_14.next()) {
		        nb_line_tOracleInput_14++;
		        
							if(colQtyInRs_tOracleInput_14 < 1) {
								row34.ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(1) != null) {
						row34.ID = rs_tOracleInput_14.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 2) {
								row34.CODIGO = null;
							} else {
	                         		
        	row34.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 3) {
								row34.NOMBRE = null;
							} else {
	                         		
        	row34.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 4) {
								row34.CIRCULAR = null;
							} else {
	                         		
        	row34.CIRCULAR = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 5) {
								row34.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(5) != null) {
						row34.ESPECIALIDADES_ID = rs_tOracleInput_14.getBigDecimal(5);
					} else {
				
						row34.ESPECIALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 6) {
								row34.META = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(6) != null) {
						row34.META = rs_tOracleInput_14.getBigDecimal(6);
					} else {
				
						row34.META = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 7) {
								row34.UNIDAD = null;
							} else {
	                         		
        	row34.UNIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 8) {
								row34.NUMERADOR_DESCRIPCION = null;
							} else {
	                         		
        	row34.NUMERADOR_DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 9) {
								row34.DENOMINADOR_DESCRIPCION = null;
							} else {
	                         		
        	row34.DENOMINADOR_DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 10) {
								row34.INDICADOR_DESCRIPCION = null;
							} else {
	                         		
        	row34.INDICADOR_DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 11) {
								row34.CATEGORIA = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(11) != null) {
						row34.CATEGORIA = rs_tOracleInput_14.getBigDecimal(11);
					} else {
				
						row34.CATEGORIA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 12) {
								row34.NUMERADOR_NOMBRE = null;
							} else {
	                         		
        	row34.NUMERADOR_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 13) {
								row34.DENOMINADOR_NOMBRE = null;
							} else {
	                         		
        	row34.DENOMINADOR_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 14) {
								row34.TENDENCIA = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(14) != null) {
						row34.TENDENCIA = rs_tOracleInput_14.getBigDecimal(14);
					} else {
				
						row34.TENDENCIA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 15) {
								row34.MODULO = null;
							} else {
	                         		
        	row34.MODULO = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 16) {
								row34.TGESTION = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(16) != null) {
						row34.TGESTION = rs_tOracleInput_14.getBigDecimal(16);
					} else {
				
						row34.TGESTION = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 17) {
								row34.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(17) != null) {
						row34.ESTREGISTRO_ID = rs_tOracleInput_14.getBigDecimal(17);
					} else {
				
						row34.ESTREGISTRO_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_14 begin ] stop
 */
	
	/**
	 * [tOracleInput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 


	tos_count_tOracleInput_14++;

/**
 * [tOracleInput_14 main ] stop
 */
	
	/**
	 * [tOracleInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row34"
						
						);
					}
					


			   
			   

					row34Struct row34_HashRow = new row34Struct();
		   	   	   
				
				row34_HashRow.ID = row34.ID;
				
				row34_HashRow.CODIGO = row34.CODIGO;
				
				row34_HashRow.NOMBRE = row34.NOMBRE;
				
				row34_HashRow.CIRCULAR = row34.CIRCULAR;
				
				row34_HashRow.ESPECIALIDADES_ID = row34.ESPECIALIDADES_ID;
				
				row34_HashRow.META = row34.META;
				
				row34_HashRow.UNIDAD = row34.UNIDAD;
				
				row34_HashRow.NUMERADOR_DESCRIPCION = row34.NUMERADOR_DESCRIPCION;
				
				row34_HashRow.DENOMINADOR_DESCRIPCION = row34.DENOMINADOR_DESCRIPCION;
				
				row34_HashRow.INDICADOR_DESCRIPCION = row34.INDICADOR_DESCRIPCION;
				
				row34_HashRow.CATEGORIA = row34.CATEGORIA;
				
				row34_HashRow.NUMERADOR_NOMBRE = row34.NUMERADOR_NOMBRE;
				
				row34_HashRow.DENOMINADOR_NOMBRE = row34.DENOMINADOR_NOMBRE;
				
				row34_HashRow.TENDENCIA = row34.TENDENCIA;
				
				row34_HashRow.MODULO = row34.MODULO;
				
				row34_HashRow.TGESTION = row34.TGESTION;
				
				row34_HashRow.ESTREGISTRO_ID = row34.ESTREGISTRO_ID;
				
			tHash_Lookup_row34.put(row34_HashRow);
			
            




 


	tos_count_tAdvancedHash_row34++;

/**
 * [tAdvancedHash_row34 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";
	
	

 



/**
 * [tAdvancedHash_row34 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row34 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";
	
	

 



/**
 * [tAdvancedHash_row34 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

}
}finally{
	if (rs_tOracleInput_14 != null) {
		rs_tOracleInput_14.close();
	}
	if (stmt_tOracleInput_14 != null) {
		stmt_tOracleInput_14.close();
	}
}

globalMap.put("tOracleInput_14_NB_LINE",nb_line_tOracleInput_14);
 

ok_Hash.put("tOracleInput_14", true);
end_Hash.put("tOracleInput_14", System.currentTimeMillis());




/**
 * [tOracleInput_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";
	
	

tHash_Lookup_row34.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row34", true);
end_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());




/**
 * [tAdvancedHash_row34 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";
	
	

 



/**
 * [tAdvancedHash_row34 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableComparableLookupRow<row35Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row35Struct other = (row35Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row35Struct other) {

		other.ID = this.ID;
	            
	}

	public void copyKeysDataTo(row35Struct other) {

		other.ID = this.ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row35Struct row35 = new row35Struct();




	
	/**
	 * [tAdvancedHash_row35 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row35", false);
		start_Hash.put("tAdvancedHash_row35", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row35";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tAdvancedHash_row35 = 0;
		

			   		// connection name:row35
			   		// source node:tOracleInput_15 - inputs:(after_tOracleInput_13) outputs:(row35,row35) | target node:tAdvancedHash_row35 - inputs:(row35) outputs:()
			   		// linked node: tMap_10 - inputs:(row33,row34,row35) outputs:(Actualiza1,Inserta10)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row35 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct> tHash_Lookup_row35 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row35Struct>getLookup(matchingModeEnum_row35);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row35", tHash_Lookup_row35);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row35 begin ] stop
 */



	
	/**
	 * [tOracleInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_15", false);
		start_Hash.put("tOracleInput_15", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_15";
	
	
		int tos_count_tOracleInput_15 = 0;
		
	


	
		    int nb_line_tOracleInput_15 = 0;
		    java.sql.Connection conn_tOracleInput_15 = null;
				String driverClass_tOracleInput_15 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_15);
				
			String url_tOracleInput_15 = null;
				url_tOracleInput_15 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";

				String dbUser_tOracleInput_15 = context.db_destino_Login;

				

				
	final String decryptedPassword_tOracleInput_15 = context.db_destino_Password; 

				String dbPwd_tOracleInput_15 = decryptedPassword_tOracleInput_15;

				
					java.util.Properties atnParamsPrope_tOracleInput_15 = new java.util.Properties();
					atnParamsPrope_tOracleInput_15.put("user",dbUser_tOracleInput_15);
					atnParamsPrope_tOracleInput_15.put("password",dbPwd_tOracleInput_15);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleInput_15.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_15 = java.sql.DriverManager.getConnection(url_tOracleInput_15, atnParamsPrope_tOracleInput_15);
				java.sql.Statement stmtGetTZ_tOracleInput_15 = conn_tOracleInput_15.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_15 = stmtGetTZ_tOracleInput_15.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_15 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_15.next()) {
					sessionTimezone_tOracleInput_15 = rsGetTZ_tOracleInput_15.getString(1);
				}
                                if (!(conn_tOracleInput_15 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_15.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_15.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_15.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_15);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_15).setSessionTimeZone(sessionTimezone_tOracleInput_15);
                                }
		    
			java.sql.Statement stmt_tOracleInput_15 = conn_tOracleInput_15.createStatement();

		    String dbquery_tOracleInput_15 = "SELECT    TIN.ID         \nFROM BGEN_TINDICADORES TIN\nWHERE TIN.MODULO = 'ACM'";
		    

		    globalMap.put("tOracleInput_15_QUERY",dbquery_tOracleInput_15);

		    java.sql.ResultSet rs_tOracleInput_15 = null;

		    try {
		    	rs_tOracleInput_15 = stmt_tOracleInput_15.executeQuery(dbquery_tOracleInput_15);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_15 = rs_tOracleInput_15.getMetaData();
		    	int colQtyInRs_tOracleInput_15 = rsmd_tOracleInput_15.getColumnCount();

		    String tmpContent_tOracleInput_15 = null;
		    
		    
		    while (rs_tOracleInput_15.next()) {
		        nb_line_tOracleInput_15++;
		        
							if(colQtyInRs_tOracleInput_15 < 1) {
								row35.ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(1) != null) {
						row35.ID = rs_tOracleInput_15.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_15 begin ] stop
 */
	
	/**
	 * [tOracleInput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 


	tos_count_tOracleInput_15++;

/**
 * [tOracleInput_15 main ] stop
 */
	
	/**
	 * [tOracleInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row35 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row35"
						
						);
					}
					


			   
			   

					row35Struct row35_HashRow = new row35Struct();
		   	   	   
				
				row35_HashRow.ID = row35.ID;
				
			tHash_Lookup_row35.put(row35_HashRow);
			
            




 


	tos_count_tAdvancedHash_row35++;

/**
 * [tAdvancedHash_row35 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row35 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";
	
	

 



/**
 * [tAdvancedHash_row35 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row35 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";
	
	

 



/**
 * [tAdvancedHash_row35 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_15 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

}
}finally{
	if (rs_tOracleInput_15 != null) {
		rs_tOracleInput_15.close();
	}
	if (stmt_tOracleInput_15 != null) {
		stmt_tOracleInput_15.close();
	}
	if(conn_tOracleInput_15 != null && !conn_tOracleInput_15.isClosed()) {
	
			conn_tOracleInput_15.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_15_NB_LINE",nb_line_tOracleInput_15);
 

ok_Hash.put("tOracleInput_15", true);
end_Hash.put("tOracleInput_15", System.currentTimeMillis());




/**
 * [tOracleInput_15 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row35 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";
	
	

tHash_Lookup_row35.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row35", true);
end_Hash.put("tAdvancedHash_row35", System.currentTimeMillis());




/**
 * [tAdvancedHash_row35 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_15 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row35 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";
	
	

 



/**
 * [tAdvancedHash_row35 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row37Struct implements routines.system.IPersistableComparableLookupRow<row37Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return null;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String TDOCUMENTO_SIGLA;

				public String getTDOCUMENTO_SIGLA () {
					return this.TDOCUMENTO_SIGLA;
				}

				public Boolean TDOCUMENTO_SIGLAIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_SIGLAIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_SIGLALength(){
				    return 5;
				}
				public Integer TDOCUMENTO_SIGLAPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_SIGLADefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_SIGLAComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_SIGLAPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_SIGLAOriginalDbColumnName(){
				
					return "TDOCUMENTO_SIGLA";
				
				}

				
			    public String TDOCUMENTO_NOMBRE;

				public String getTDOCUMENTO_NOMBRE () {
					return this.TDOCUMENTO_NOMBRE;
				}

				public Boolean TDOCUMENTO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_NOMBREIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_NOMBRELength(){
				    return 50;
				}
				public Integer TDOCUMENTO_NOMBREPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_NOMBREDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_NOMBREComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_NOMBREPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_NOMBREOriginalDbColumnName(){
				
					return "TDOCUMENTO_NOMBRE";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String ESTADO_USUARIO;

				public String getESTADO_USUARIO () {
					return this.ESTADO_USUARIO;
				}

				public Boolean ESTADO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean ESTADO_USUARIOIsKey(){
				    return false;
				}
				public Integer ESTADO_USUARIOLength(){
				    return 10;
				}
				public Integer ESTADO_USUARIOPrecision(){
				    return 0;
				}
				public String ESTADO_USUARIODefault(){
				
					return null;
				
				}
				public String ESTADO_USUARIOComment(){
				
				    return "";
				
				}
				public String ESTADO_USUARIOPattern(){
				
					return "";
				
				}
				public String ESTADO_USUARIOOriginalDbColumnName(){
				
					return "ESTADO_USUARIO";
				
				}

				
			    public String USUARIO;

				public String getUSUARIO () {
					return this.USUARIO;
				}

				public Boolean USUARIOIsNullable(){
				    return true;
				}
				public Boolean USUARIOIsKey(){
				    return false;
				}
				public Integer USUARIOLength(){
				    return 500;
				}
				public Integer USUARIOPrecision(){
				    return 0;
				}
				public String USUARIODefault(){
				
					return null;
				
				}
				public String USUARIOComment(){
				
				    return "";
				
				}
				public String USUARIOPattern(){
				
					return "";
				
				}
				public String USUARIOOriginalDbColumnName(){
				
					return "USUARIO";
				
				}

				
			    public String TUSUARIO;

				public String getTUSUARIO () {
					return this.TUSUARIO;
				}

				public Boolean TUSUARIOIsNullable(){
				    return true;
				}
				public Boolean TUSUARIOIsKey(){
				    return false;
				}
				public Integer TUSUARIOLength(){
				    return 200;
				}
				public Integer TUSUARIOPrecision(){
				    return 0;
				}
				public String TUSUARIODefault(){
				
					return null;
				
				}
				public String TUSUARIOComment(){
				
				    return "";
				
				}
				public String TUSUARIOPattern(){
				
					return "";
				
				}
				public String TUSUARIOOriginalDbColumnName(){
				
					return "TUSUARIO";
				
				}

				
			    public String USUARIO_SIGLA;

				public String getUSUARIO_SIGLA () {
					return this.USUARIO_SIGLA;
				}

				public Boolean USUARIO_SIGLAIsNullable(){
				    return true;
				}
				public Boolean USUARIO_SIGLAIsKey(){
				    return false;
				}
				public Integer USUARIO_SIGLALength(){
				    return 5;
				}
				public Integer USUARIO_SIGLAPrecision(){
				    return 0;
				}
				public String USUARIO_SIGLADefault(){
				
					return null;
				
				}
				public String USUARIO_SIGLAComment(){
				
				    return "";
				
				}
				public String USUARIO_SIGLAPattern(){
				
					return "";
				
				}
				public String USUARIO_SIGLAOriginalDbColumnName(){
				
					return "USUARIO_SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PERSONA_ID == null) ? 0 : this.PERSONA_ID.hashCode());
					
						result = prime * result + ((this.PRIMER_NOMBRE == null) ? 0 : this.PRIMER_NOMBRE.hashCode());
					
						result = prime * result + ((this.SEGUNDO_NOMBRE == null) ? 0 : this.SEGUNDO_NOMBRE.hashCode());
					
						result = prime * result + ((this.PRIMER_APELLIDO == null) ? 0 : this.PRIMER_APELLIDO.hashCode());
					
						result = prime * result + ((this.SEGUNDO_APELLIDO == null) ? 0 : this.SEGUNDO_APELLIDO.hashCode());
					
						result = prime * result + ((this.TDOCUMENTO_SIGLA == null) ? 0 : this.TDOCUMENTO_SIGLA.hashCode());
					
						result = prime * result + ((this.TDOCUMENTO_NOMBRE == null) ? 0 : this.TDOCUMENTO_NOMBRE.hashCode());
					
						result = prime * result + ((this.DOCUMENTO == null) ? 0 : this.DOCUMENTO.hashCode());
					
						result = prime * result + ((this.ESTADO_USUARIO == null) ? 0 : this.ESTADO_USUARIO.hashCode());
					
						result = prime * result + ((this.USUARIO == null) ? 0 : this.USUARIO.hashCode());
					
						result = prime * result + ((this.TUSUARIO == null) ? 0 : this.TUSUARIO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row37Struct other = (row37Struct) obj;
		
						if (this.PERSONA_ID == null) {
							if (other.PERSONA_ID != null)
								return false;
						
						} else if (!this.PERSONA_ID.equals(other.PERSONA_ID))
						
							return false;
					
						if (this.PRIMER_NOMBRE == null) {
							if (other.PRIMER_NOMBRE != null)
								return false;
						
						} else if (!this.PRIMER_NOMBRE.equals(other.PRIMER_NOMBRE))
						
							return false;
					
						if (this.SEGUNDO_NOMBRE == null) {
							if (other.SEGUNDO_NOMBRE != null)
								return false;
						
						} else if (!this.SEGUNDO_NOMBRE.equals(other.SEGUNDO_NOMBRE))
						
							return false;
					
						if (this.PRIMER_APELLIDO == null) {
							if (other.PRIMER_APELLIDO != null)
								return false;
						
						} else if (!this.PRIMER_APELLIDO.equals(other.PRIMER_APELLIDO))
						
							return false;
					
						if (this.SEGUNDO_APELLIDO == null) {
							if (other.SEGUNDO_APELLIDO != null)
								return false;
						
						} else if (!this.SEGUNDO_APELLIDO.equals(other.SEGUNDO_APELLIDO))
						
							return false;
					
						if (this.TDOCUMENTO_SIGLA == null) {
							if (other.TDOCUMENTO_SIGLA != null)
								return false;
						
						} else if (!this.TDOCUMENTO_SIGLA.equals(other.TDOCUMENTO_SIGLA))
						
							return false;
					
						if (this.TDOCUMENTO_NOMBRE == null) {
							if (other.TDOCUMENTO_NOMBRE != null)
								return false;
						
						} else if (!this.TDOCUMENTO_NOMBRE.equals(other.TDOCUMENTO_NOMBRE))
						
							return false;
					
						if (this.DOCUMENTO == null) {
							if (other.DOCUMENTO != null)
								return false;
						
						} else if (!this.DOCUMENTO.equals(other.DOCUMENTO))
						
							return false;
					
						if (this.ESTADO_USUARIO == null) {
							if (other.ESTADO_USUARIO != null)
								return false;
						
						} else if (!this.ESTADO_USUARIO.equals(other.ESTADO_USUARIO))
						
							return false;
					
						if (this.USUARIO == null) {
							if (other.USUARIO != null)
								return false;
						
						} else if (!this.USUARIO.equals(other.USUARIO))
						
							return false;
					
						if (this.TUSUARIO == null) {
							if (other.TUSUARIO != null)
								return false;
						
						} else if (!this.TUSUARIO.equals(other.TUSUARIO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row37Struct other) {

		other.PERSONA_ID = this.PERSONA_ID;
	            other.PRIMER_NOMBRE = this.PRIMER_NOMBRE;
	            other.SEGUNDO_NOMBRE = this.SEGUNDO_NOMBRE;
	            other.PRIMER_APELLIDO = this.PRIMER_APELLIDO;
	            other.SEGUNDO_APELLIDO = this.SEGUNDO_APELLIDO;
	            other.TDOCUMENTO_SIGLA = this.TDOCUMENTO_SIGLA;
	            other.TDOCUMENTO_NOMBRE = this.TDOCUMENTO_NOMBRE;
	            other.DOCUMENTO = this.DOCUMENTO;
	            other.ESTADO_USUARIO = this.ESTADO_USUARIO;
	            other.USUARIO = this.USUARIO;
	            other.TUSUARIO = this.TUSUARIO;
	            other.USUARIO_SIGLA = this.USUARIO_SIGLA;
	            
	}

	public void copyKeysDataTo(row37Struct other) {

		other.PERSONA_ID = this.PERSONA_ID;
	            	other.PRIMER_NOMBRE = this.PRIMER_NOMBRE;
	            	other.SEGUNDO_NOMBRE = this.SEGUNDO_NOMBRE;
	            	other.PRIMER_APELLIDO = this.PRIMER_APELLIDO;
	            	other.SEGUNDO_APELLIDO = this.SEGUNDO_APELLIDO;
	            	other.TDOCUMENTO_SIGLA = this.TDOCUMENTO_SIGLA;
	            	other.TDOCUMENTO_NOMBRE = this.TDOCUMENTO_NOMBRE;
	            	other.DOCUMENTO = this.DOCUMENTO;
	            	other.ESTADO_USUARIO = this.ESTADO_USUARIO;
	            	other.USUARIO = this.USUARIO;
	            	other.TUSUARIO = this.TUSUARIO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TDOCUMENTO_SIGLA = readString(dis);
					
					this.TDOCUMENTO_NOMBRE = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.ESTADO_USUARIO = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.TUSUARIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TDOCUMENTO_SIGLA = readString(dis);
					
					this.TDOCUMENTO_NOMBRE = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.ESTADO_USUARIO = readString(dis);
					
					this.USUARIO = readString(dis);
					
					this.TUSUARIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_SIGLA,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_NOMBRE,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.ESTADO_USUARIO,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.TUSUARIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_SIGLA,dos);
					
					// String
				
						writeString(this.TDOCUMENTO_NOMBRE,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.ESTADO_USUARIO,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.TUSUARIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.USUARIO_SIGLA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.USUARIO_SIGLA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.USUARIO_SIGLA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.USUARIO_SIGLA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TDOCUMENTO_SIGLA="+TDOCUMENTO_SIGLA);
		sb.append(",TDOCUMENTO_NOMBRE="+TDOCUMENTO_NOMBRE);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",ESTADO_USUARIO="+ESTADO_USUARIO);
		sb.append(",USUARIO="+USUARIO);
		sb.append(",TUSUARIO="+TUSUARIO);
		sb.append(",USUARIO_SIGLA="+USUARIO_SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PERSONA_ID, other.PERSONA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PRIMER_NOMBRE, other.PRIMER_NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SEGUNDO_NOMBRE, other.SEGUNDO_NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PRIMER_APELLIDO, other.PRIMER_APELLIDO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SEGUNDO_APELLIDO, other.SEGUNDO_APELLIDO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TDOCUMENTO_SIGLA, other.TDOCUMENTO_SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TDOCUMENTO_NOMBRE, other.TDOCUMENTO_NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOCUMENTO, other.DOCUMENTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ESTADO_USUARIO, other.ESTADO_USUARIO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.USUARIO, other.USUARIO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TUSUARIO, other.TUSUARIO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row37Struct row37 = new row37Struct();




	
	/**
	 * [tAdvancedHash_row37 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row37", false);
		start_Hash.put("tAdvancedHash_row37", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row37";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row37");
					}
				
		int tos_count_tAdvancedHash_row37 = 0;
		

			   		// connection name:row37
			   		// source node:tOracleInput_17 - inputs:(after_tOracleInput_16) outputs:(row37,row37) | target node:tAdvancedHash_row37 - inputs:(row37) outputs:()
			   		// linked node: tMap_11 - inputs:(row36,row37,row38) outputs:(Actualiza2,Inserta11)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row37 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct> tHash_Lookup_row37 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row37Struct>getLookup(matchingModeEnum_row37);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row37", tHash_Lookup_row37);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row37 begin ] stop
 */



	
	/**
	 * [tOracleInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_17", false);
		start_Hash.put("tOracleInput_17", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_17";
	
	
		int tos_count_tOracleInput_17 = 0;
		
	


	
		    int nb_line_tOracleInput_17 = 0;
		    java.sql.Connection conn_tOracleInput_17 = null;
				conn_tOracleInput_17 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_17 = false;
				boolean isConnectionWrapped_tOracleInput_17 = !(conn_tOracleInput_17 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_17.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_17 = null;
                if (isConnectionWrapped_tOracleInput_17) {
					unwrappedOraConn_tOracleInput_17 = conn_tOracleInput_17.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_17 != null) {
                        isTimeZoneNull_tOracleInput_17 = (unwrappedOraConn_tOracleInput_17.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_17 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_17).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_17) {
					java.sql.Statement stmtGetTZ_tOracleInput_17 = conn_tOracleInput_17.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_17 = stmtGetTZ_tOracleInput_17.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_17 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_17.next()) {
						sessionTimezone_tOracleInput_17 = rsGetTZ_tOracleInput_17.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_17 && unwrappedOraConn_tOracleInput_17 != null) {
                        unwrappedOraConn_tOracleInput_17.setSessionTimeZone(sessionTimezone_tOracleInput_17);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_17).setSessionTimeZone(sessionTimezone_tOracleInput_17);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_17 = conn_tOracleInput_17.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_17.setFetchSize(1000);


		    String dbquery_tOracleInput_17 = "SELECT    PERSONA_ID \n        , PRIMER_NOMBRE\n        , SEGUNDO_NOMBRE\n        , PRIMER_APELLIDO\n        , SEGUNDO_"
+"APELLIDO\n        , TDOCUMENTO_SIGLA\n        , TDOCUMENTO_NOMBRE\n        , DOCUMENTO\n        , ESTADO_USUARIO \n     "
+"   , USUARIO \n        , TUSUARIO\n        , USUARIO_SIGLA\nFROM BACM_AUDITORES";
		    

		    globalMap.put("tOracleInput_17_QUERY",dbquery_tOracleInput_17);

		    java.sql.ResultSet rs_tOracleInput_17 = null;

		    try {
		    	rs_tOracleInput_17 = stmt_tOracleInput_17.executeQuery(dbquery_tOracleInput_17);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_17 = rs_tOracleInput_17.getMetaData();
		    	int colQtyInRs_tOracleInput_17 = rsmd_tOracleInput_17.getColumnCount();

		    String tmpContent_tOracleInput_17 = null;
		    
		    
		    while (rs_tOracleInput_17.next()) {
		        nb_line_tOracleInput_17++;
		        
							if(colQtyInRs_tOracleInput_17 < 1) {
								row37.PERSONA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(1) != null) {
						row37.PERSONA_ID = rs_tOracleInput_17.getBigDecimal(1);
					} else {
				
						row37.PERSONA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 2) {
								row37.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row37.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 3) {
								row37.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row37.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 4) {
								row37.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row37.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 5) {
								row37.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row37.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 6) {
								row37.TDOCUMENTO_SIGLA = null;
							} else {
	                         		
        	row37.TDOCUMENTO_SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 7) {
								row37.TDOCUMENTO_NOMBRE = null;
							} else {
	                         		
        	row37.TDOCUMENTO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 8) {
								row37.DOCUMENTO = null;
							} else {
	                         		
        	row37.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 9) {
								row37.ESTADO_USUARIO = null;
							} else {
	                         		
        	row37.ESTADO_USUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 10) {
								row37.USUARIO = null;
							} else {
	                         		
        	row37.USUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 11) {
								row37.TUSUARIO = null;
							} else {
	                         		
        	row37.TUSUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 12) {
								row37.USUARIO_SIGLA = null;
							} else {
	                         		
        	row37.USUARIO_SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 12, false);
		                    }
					




 



/**
 * [tOracleInput_17 begin ] stop
 */
	
	/**
	 * [tOracleInput_17 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 


	tos_count_tOracleInput_17++;

/**
 * [tOracleInput_17 main ] stop
 */
	
	/**
	 * [tOracleInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row37 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row37";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row37"
						
						);
					}
					


			   
			   

					row37Struct row37_HashRow = new row37Struct();
		   	   	   
				
				row37_HashRow.PERSONA_ID = row37.PERSONA_ID;
				
				row37_HashRow.PRIMER_NOMBRE = row37.PRIMER_NOMBRE;
				
				row37_HashRow.SEGUNDO_NOMBRE = row37.SEGUNDO_NOMBRE;
				
				row37_HashRow.PRIMER_APELLIDO = row37.PRIMER_APELLIDO;
				
				row37_HashRow.SEGUNDO_APELLIDO = row37.SEGUNDO_APELLIDO;
				
				row37_HashRow.TDOCUMENTO_SIGLA = row37.TDOCUMENTO_SIGLA;
				
				row37_HashRow.TDOCUMENTO_NOMBRE = row37.TDOCUMENTO_NOMBRE;
				
				row37_HashRow.DOCUMENTO = row37.DOCUMENTO;
				
				row37_HashRow.ESTADO_USUARIO = row37.ESTADO_USUARIO;
				
				row37_HashRow.USUARIO = row37.USUARIO;
				
				row37_HashRow.TUSUARIO = row37.TUSUARIO;
				
				row37_HashRow.USUARIO_SIGLA = row37.USUARIO_SIGLA;
				
			tHash_Lookup_row37.put(row37_HashRow);
			
            




 


	tos_count_tAdvancedHash_row37++;

/**
 * [tAdvancedHash_row37 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row37 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row37";
	
	

 



/**
 * [tAdvancedHash_row37 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row37 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row37";
	
	

 



/**
 * [tAdvancedHash_row37 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_17 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

}
}finally{
	if (rs_tOracleInput_17 != null) {
		rs_tOracleInput_17.close();
	}
	if (stmt_tOracleInput_17 != null) {
		stmt_tOracleInput_17.close();
	}
}

globalMap.put("tOracleInput_17_NB_LINE",nb_line_tOracleInput_17);
 

ok_Hash.put("tOracleInput_17", true);
end_Hash.put("tOracleInput_17", System.currentTimeMillis());




/**
 * [tOracleInput_17 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row37 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row37";
	
	

tHash_Lookup_row37.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row37");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row37", true);
end_Hash.put("tAdvancedHash_row37", System.currentTimeMillis());




/**
 * [tAdvancedHash_row37 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_17 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row37 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row37";
	
	

 



/**
 * [tAdvancedHash_row37 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class row38Struct implements routines.system.IPersistableComparableLookupRow<row38Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return null;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 100;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 100;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String TDOCUMENTO_SIGLA;

				public String getTDOCUMENTO_SIGLA () {
					return this.TDOCUMENTO_SIGLA;
				}

				public Boolean TDOCUMENTO_SIGLAIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_SIGLAIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_SIGLALength(){
				    return 5;
				}
				public Integer TDOCUMENTO_SIGLAPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_SIGLADefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_SIGLAComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_SIGLAPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_SIGLAOriginalDbColumnName(){
				
					return "TDOCUMENTO_SIGLA";
				
				}

				
			    public String TDOCUMENTO_NOMBRE;

				public String getTDOCUMENTO_NOMBRE () {
					return this.TDOCUMENTO_NOMBRE;
				}

				public Boolean TDOCUMENTO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTO_NOMBREIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_NOMBRELength(){
				    return 50;
				}
				public Integer TDOCUMENTO_NOMBREPrecision(){
				    return 0;
				}
				public String TDOCUMENTO_NOMBREDefault(){
				
					return null;
				
				}
				public String TDOCUMENTO_NOMBREComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_NOMBREPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_NOMBREOriginalDbColumnName(){
				
					return "TDOCUMENTO_NOMBRE";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String ESTADO_USUARIO;

				public String getESTADO_USUARIO () {
					return this.ESTADO_USUARIO;
				}

				public Boolean ESTADO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean ESTADO_USUARIOIsKey(){
				    return false;
				}
				public Integer ESTADO_USUARIOLength(){
				    return 10;
				}
				public Integer ESTADO_USUARIOPrecision(){
				    return 0;
				}
				public String ESTADO_USUARIODefault(){
				
					return null;
				
				}
				public String ESTADO_USUARIOComment(){
				
				    return "";
				
				}
				public String ESTADO_USUARIOPattern(){
				
					return "";
				
				}
				public String ESTADO_USUARIOOriginalDbColumnName(){
				
					return "ESTADO_USUARIO";
				
				}

				
			    public String USUARIO;

				public String getUSUARIO () {
					return this.USUARIO;
				}

				public Boolean USUARIOIsNullable(){
				    return true;
				}
				public Boolean USUARIOIsKey(){
				    return false;
				}
				public Integer USUARIOLength(){
				    return 500;
				}
				public Integer USUARIOPrecision(){
				    return 0;
				}
				public String USUARIODefault(){
				
					return null;
				
				}
				public String USUARIOComment(){
				
				    return "";
				
				}
				public String USUARIOPattern(){
				
					return "";
				
				}
				public String USUARIOOriginalDbColumnName(){
				
					return "USUARIO";
				
				}

				
			    public String TUSUARIO;

				public String getTUSUARIO () {
					return this.TUSUARIO;
				}

				public Boolean TUSUARIOIsNullable(){
				    return true;
				}
				public Boolean TUSUARIOIsKey(){
				    return false;
				}
				public Integer TUSUARIOLength(){
				    return 200;
				}
				public Integer TUSUARIOPrecision(){
				    return 0;
				}
				public String TUSUARIODefault(){
				
					return null;
				
				}
				public String TUSUARIOComment(){
				
				    return "";
				
				}
				public String TUSUARIOPattern(){
				
					return "";
				
				}
				public String TUSUARIOOriginalDbColumnName(){
				
					return "TUSUARIO";
				
				}

				
			    public String USUARIO_SIGLA;

				public String getUSUARIO_SIGLA () {
					return this.USUARIO_SIGLA;
				}

				public Boolean USUARIO_SIGLAIsNullable(){
				    return true;
				}
				public Boolean USUARIO_SIGLAIsKey(){
				    return false;
				}
				public Integer USUARIO_SIGLALength(){
				    return 5;
				}
				public Integer USUARIO_SIGLAPrecision(){
				    return 0;
				}
				public String USUARIO_SIGLADefault(){
				
					return null;
				
				}
				public String USUARIO_SIGLAComment(){
				
				    return "";
				
				}
				public String USUARIO_SIGLAPattern(){
				
					return "";
				
				}
				public String USUARIO_SIGLAOriginalDbColumnName(){
				
					return "USUARIO_SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PERSONA_ID == null) ? 0 : this.PERSONA_ID.hashCode());
					
						result = prime * result + ((this.USUARIO == null) ? 0 : this.USUARIO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row38Struct other = (row38Struct) obj;
		
						if (this.PERSONA_ID == null) {
							if (other.PERSONA_ID != null)
								return false;
						
						} else if (!this.PERSONA_ID.equals(other.PERSONA_ID))
						
							return false;
					
						if (this.USUARIO == null) {
							if (other.USUARIO != null)
								return false;
						
						} else if (!this.USUARIO.equals(other.USUARIO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row38Struct other) {

		other.PERSONA_ID = this.PERSONA_ID;
	            other.PRIMER_NOMBRE = this.PRIMER_NOMBRE;
	            other.SEGUNDO_NOMBRE = this.SEGUNDO_NOMBRE;
	            other.PRIMER_APELLIDO = this.PRIMER_APELLIDO;
	            other.SEGUNDO_APELLIDO = this.SEGUNDO_APELLIDO;
	            other.TDOCUMENTO_SIGLA = this.TDOCUMENTO_SIGLA;
	            other.TDOCUMENTO_NOMBRE = this.TDOCUMENTO_NOMBRE;
	            other.DOCUMENTO = this.DOCUMENTO;
	            other.ESTADO_USUARIO = this.ESTADO_USUARIO;
	            other.USUARIO = this.USUARIO;
	            other.TUSUARIO = this.TUSUARIO;
	            other.USUARIO_SIGLA = this.USUARIO_SIGLA;
	            
	}

	public void copyKeysDataTo(row38Struct other) {

		other.PERSONA_ID = this.PERSONA_ID;
	            	other.USUARIO = this.USUARIO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_ACM.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_ACM.length == 0) {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_ACM = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_ACM, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_ACM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
					this.USUARIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
					this.USUARIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// String
				
						writeString(this.USUARIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// String
				
						writeString(this.USUARIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.PRIMER_NOMBRE = readString(dis,ois);
					
						this.SEGUNDO_NOMBRE = readString(dis,ois);
					
						this.PRIMER_APELLIDO = readString(dis,ois);
					
						this.SEGUNDO_APELLIDO = readString(dis,ois);
					
						this.TDOCUMENTO_SIGLA = readString(dis,ois);
					
						this.TDOCUMENTO_NOMBRE = readString(dis,ois);
					
						this.DOCUMENTO = readString(dis,ois);
					
						this.ESTADO_USUARIO = readString(dis,ois);
					
						this.TUSUARIO = readString(dis,ois);
					
						this.USUARIO_SIGLA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.PRIMER_NOMBRE = readString(dis,objectIn);
					
						this.SEGUNDO_NOMBRE = readString(dis,objectIn);
					
						this.PRIMER_APELLIDO = readString(dis,objectIn);
					
						this.SEGUNDO_APELLIDO = readString(dis,objectIn);
					
						this.TDOCUMENTO_SIGLA = readString(dis,objectIn);
					
						this.TDOCUMENTO_NOMBRE = readString(dis,objectIn);
					
						this.DOCUMENTO = readString(dis,objectIn);
					
						this.ESTADO_USUARIO = readString(dis,objectIn);
					
						this.TUSUARIO = readString(dis,objectIn);
					
						this.USUARIO_SIGLA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.PRIMER_NOMBRE, dos, oos);
					
						writeString(this.SEGUNDO_NOMBRE, dos, oos);
					
						writeString(this.PRIMER_APELLIDO, dos, oos);
					
						writeString(this.SEGUNDO_APELLIDO, dos, oos);
					
						writeString(this.TDOCUMENTO_SIGLA, dos, oos);
					
						writeString(this.TDOCUMENTO_NOMBRE, dos, oos);
					
						writeString(this.DOCUMENTO, dos, oos);
					
						writeString(this.ESTADO_USUARIO, dos, oos);
					
						writeString(this.TUSUARIO, dos, oos);
					
						writeString(this.USUARIO_SIGLA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.PRIMER_NOMBRE, dos, objectOut);
					
						writeString(this.SEGUNDO_NOMBRE, dos, objectOut);
					
						writeString(this.PRIMER_APELLIDO, dos, objectOut);
					
						writeString(this.SEGUNDO_APELLIDO, dos, objectOut);
					
						writeString(this.TDOCUMENTO_SIGLA, dos, objectOut);
					
						writeString(this.TDOCUMENTO_NOMBRE, dos, objectOut);
					
						writeString(this.DOCUMENTO, dos, objectOut);
					
						writeString(this.ESTADO_USUARIO, dos, objectOut);
					
						writeString(this.TUSUARIO, dos, objectOut);
					
						writeString(this.USUARIO_SIGLA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TDOCUMENTO_SIGLA="+TDOCUMENTO_SIGLA);
		sb.append(",TDOCUMENTO_NOMBRE="+TDOCUMENTO_NOMBRE);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",ESTADO_USUARIO="+ESTADO_USUARIO);
		sb.append(",USUARIO="+USUARIO);
		sb.append(",TUSUARIO="+TUSUARIO);
		sb.append(",USUARIO_SIGLA="+USUARIO_SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PERSONA_ID, other.PERSONA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.USUARIO, other.USUARIO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row38Struct row38 = new row38Struct();




	
	/**
	 * [tAdvancedHash_row38 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row38", false);
		start_Hash.put("tAdvancedHash_row38", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row38";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row38");
					}
				
		int tos_count_tAdvancedHash_row38 = 0;
		

			   		// connection name:row38
			   		// source node:tOracleInput_18 - inputs:(after_tOracleInput_16) outputs:(row38,row38) | target node:tAdvancedHash_row38 - inputs:(row38) outputs:()
			   		// linked node: tMap_11 - inputs:(row36,row37,row38) outputs:(Actualiza2,Inserta11)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row38 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row38Struct>getLookup(matchingModeEnum_row38);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row38", tHash_Lookup_row38);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row38 begin ] stop
 */



	
	/**
	 * [tOracleInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_18", false);
		start_Hash.put("tOracleInput_18", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_18";
	
	
		int tos_count_tOracleInput_18 = 0;
		
	


	
		    int nb_line_tOracleInput_18 = 0;
		    java.sql.Connection conn_tOracleInput_18 = null;
				conn_tOracleInput_18 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_18 = false;
				boolean isConnectionWrapped_tOracleInput_18 = !(conn_tOracleInput_18 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_18.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_18 = null;
                if (isConnectionWrapped_tOracleInput_18) {
					unwrappedOraConn_tOracleInput_18 = conn_tOracleInput_18.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_18 != null) {
                        isTimeZoneNull_tOracleInput_18 = (unwrappedOraConn_tOracleInput_18.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_18 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_18).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_18) {
					java.sql.Statement stmtGetTZ_tOracleInput_18 = conn_tOracleInput_18.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_18 = stmtGetTZ_tOracleInput_18.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_18 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_18.next()) {
						sessionTimezone_tOracleInput_18 = rsGetTZ_tOracleInput_18.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_18 && unwrappedOraConn_tOracleInput_18 != null) {
                        unwrappedOraConn_tOracleInput_18.setSessionTimeZone(sessionTimezone_tOracleInput_18);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_18).setSessionTimeZone(sessionTimezone_tOracleInput_18);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_18 = conn_tOracleInput_18.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_18.setFetchSize(1000);


		    String dbquery_tOracleInput_18 = "SELECT    PERSONA_ID \n        , PRIMER_NOMBRE\n        , SEGUNDO_NOMBRE\n        , PRIMER_APELLIDO\n        , SEGUNDO_"
+"APELLIDO\n        , TDOCUMENTO_SIGLA\n        , TDOCUMENTO_NOMBRE\n        , DOCUMENTO\n        , ESTADO_USUARIO \n     "
+"   , USUARIO \n        , TUSUARIO\n        , USUARIO_SIGLA\nFROM BACM_AUDITORES";
		    

		    globalMap.put("tOracleInput_18_QUERY",dbquery_tOracleInput_18);

		    java.sql.ResultSet rs_tOracleInput_18 = null;

		    try {
		    	rs_tOracleInput_18 = stmt_tOracleInput_18.executeQuery(dbquery_tOracleInput_18);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_18 = rs_tOracleInput_18.getMetaData();
		    	int colQtyInRs_tOracleInput_18 = rsmd_tOracleInput_18.getColumnCount();

		    String tmpContent_tOracleInput_18 = null;
		    
		    
		    while (rs_tOracleInput_18.next()) {
		        nb_line_tOracleInput_18++;
		        
							if(colQtyInRs_tOracleInput_18 < 1) {
								row38.PERSONA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_18.getObject(1) != null) {
						row38.PERSONA_ID = rs_tOracleInput_18.getBigDecimal(1);
					} else {
				
						row38.PERSONA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_18 < 2) {
								row38.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row38.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 3) {
								row38.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row38.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 4) {
								row38.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row38.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 5) {
								row38.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row38.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 6) {
								row38.TDOCUMENTO_SIGLA = null;
							} else {
	                         		
        	row38.TDOCUMENTO_SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 7) {
								row38.TDOCUMENTO_NOMBRE = null;
							} else {
	                         		
        	row38.TDOCUMENTO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 8) {
								row38.DOCUMENTO = null;
							} else {
	                         		
        	row38.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 9) {
								row38.ESTADO_USUARIO = null;
							} else {
	                         		
        	row38.ESTADO_USUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 10) {
								row38.USUARIO = null;
							} else {
	                         		
        	row38.USUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 11) {
								row38.TUSUARIO = null;
							} else {
	                         		
        	row38.TUSUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 12) {
								row38.USUARIO_SIGLA = null;
							} else {
	                         		
        	row38.USUARIO_SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 12, false);
		                    }
					




 



/**
 * [tOracleInput_18 begin ] stop
 */
	
	/**
	 * [tOracleInput_18 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 


	tos_count_tOracleInput_18++;

/**
 * [tOracleInput_18 main ] stop
 */
	
	/**
	 * [tOracleInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row38 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row38"
						
						);
					}
					


			   
			   

					row38Struct row38_HashRow = new row38Struct();
		   	   	   
				
				row38_HashRow.PERSONA_ID = row38.PERSONA_ID;
				
				row38_HashRow.PRIMER_NOMBRE = row38.PRIMER_NOMBRE;
				
				row38_HashRow.SEGUNDO_NOMBRE = row38.SEGUNDO_NOMBRE;
				
				row38_HashRow.PRIMER_APELLIDO = row38.PRIMER_APELLIDO;
				
				row38_HashRow.SEGUNDO_APELLIDO = row38.SEGUNDO_APELLIDO;
				
				row38_HashRow.TDOCUMENTO_SIGLA = row38.TDOCUMENTO_SIGLA;
				
				row38_HashRow.TDOCUMENTO_NOMBRE = row38.TDOCUMENTO_NOMBRE;
				
				row38_HashRow.DOCUMENTO = row38.DOCUMENTO;
				
				row38_HashRow.ESTADO_USUARIO = row38.ESTADO_USUARIO;
				
				row38_HashRow.USUARIO = row38.USUARIO;
				
				row38_HashRow.TUSUARIO = row38.TUSUARIO;
				
				row38_HashRow.USUARIO_SIGLA = row38.USUARIO_SIGLA;
				
			tHash_Lookup_row38.put(row38_HashRow);
			
            




 


	tos_count_tAdvancedHash_row38++;

/**
 * [tAdvancedHash_row38 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row38 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";
	
	

 



/**
 * [tAdvancedHash_row38 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row38 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";
	
	

 



/**
 * [tAdvancedHash_row38 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_18 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

}
}finally{
	if (rs_tOracleInput_18 != null) {
		rs_tOracleInput_18.close();
	}
	if (stmt_tOracleInput_18 != null) {
		stmt_tOracleInput_18.close();
	}
}

globalMap.put("tOracleInput_18_NB_LINE",nb_line_tOracleInput_18);
 

ok_Hash.put("tOracleInput_18", true);
end_Hash.put("tOracleInput_18", System.currentTimeMillis());




/**
 * [tOracleInput_18 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row38 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";
	
	

tHash_Lookup_row38.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row38");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row38", true);
end_Hash.put("tAdvancedHash_row38", System.currentTimeMillis());




/**
 * [tAdvancedHash_row38 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_18 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row38 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";
	
	

 



/**
 * [tAdvancedHash_row38 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class row40Struct implements routines.system.IPersistableComparableLookupRow<row40Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FECHA == null) ? 0 : this.FECHA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row40Struct other = (row40Struct) obj;
		
						if (this.FECHA == null) {
							if (other.FECHA != null)
								return false;
						
						} else if (!this.FECHA.equals(other.FECHA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row40Struct other) {

		other.ID = this.ID;
	            other.FECHA = this.FECHA;
	            
	}

	public void copyKeysDataTo(row40Struct other) {

		other.FECHA = this.FECHA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row40Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FECHA, other.FECHA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row40Struct row40 = new row40Struct();




	
	/**
	 * [tAdvancedHash_row40 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row40", false);
		start_Hash.put("tAdvancedHash_row40", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row40";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row40");
					}
				
		int tos_count_tAdvancedHash_row40 = 0;
		

			   		// connection name:row40
			   		// source node:tHashInput_14 - inputs:(after_tOracleInput_20) outputs:(row40,row40) | target node:tAdvancedHash_row40 - inputs:(row40) outputs:()
			   		// linked node: tMap_12 - inputs:(row39,row40,row41) outputs:(Elimina9,Inserta12,Elimina10,Inserta13)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row40 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row40Struct>getLookup(matchingModeEnum_row40);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row40", tHash_Lookup_row40);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row40 begin ] stop
 */



	
	/**
	 * [tHashInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_14", false);
		start_Hash.put("tHashInput_14", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_14";
	
	
		int tos_count_tHashInput_14 = 0;
		


int nb_line_tHashInput_14 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_14=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_14 = mf_tHashInput_14.getAdvancedMemoryHashFile("tHashFile_ACM_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_14==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_14 = tHashFile_tHashInput_14.iterator();
while (iterator_tHashInput_14.hasNext()) {
    row10Struct next_tHashInput_14 = iterator_tHashInput_14.next();

	row40.ID = next_tHashInput_14.ID;
	row40.FECHA = next_tHashInput_14.FECHA;

 



/**
 * [tHashInput_14 begin ] stop
 */
	
	/**
	 * [tHashInput_14 main ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 


	tos_count_tHashInput_14++;

/**
 * [tHashInput_14 main ] stop
 */
	
	/**
	 * [tHashInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 



/**
 * [tHashInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row40 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row40"
						
						);
					}
					


			   
			   

					row40Struct row40_HashRow = new row40Struct();
		   	   	   
				
				row40_HashRow.ID = row40.ID;
				
				row40_HashRow.FECHA = row40.FECHA;
				
			tHash_Lookup_row40.put(row40_HashRow);
			
            




 


	tos_count_tAdvancedHash_row40++;

/**
 * [tAdvancedHash_row40 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row40 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";
	
	

 



/**
 * [tAdvancedHash_row40 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row40 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";
	
	

 



/**
 * [tAdvancedHash_row40 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 



/**
 * [tHashInput_14 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_14 end ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	
    

		
			nb_line_tHashInput_14++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ACM_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_14_NB_LINE", nb_line_tHashInput_14);       

 

ok_Hash.put("tHashInput_14", true);
end_Hash.put("tHashInput_14", System.currentTimeMillis());




/**
 * [tHashInput_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row40 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";
	
	

tHash_Lookup_row40.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row40");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row40", true);
end_Hash.put("tAdvancedHash_row40", System.currentTimeMillis());




/**
 * [tAdvancedHash_row40 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_14 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 



/**
 * [tHashInput_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row40 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";
	
	

 



/**
 * [tAdvancedHash_row40 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row41Struct implements routines.system.IPersistableComparableLookupRow<row41Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return null;
				}
				public Integer PERSONA_IDPrecision(){
				    return null;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PERSONA_ID == null) ? 0 : this.PERSONA_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row41Struct other = (row41Struct) obj;
		
						if (this.PERSONA_ID == null) {
							if (other.PERSONA_ID != null)
								return false;
						
						} else if (!this.PERSONA_ID.equals(other.PERSONA_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row41Struct other) {

		other.PERSONA_ID = this.PERSONA_ID;
	            other.ID = this.ID;
	            
	}

	public void copyKeysDataTo(row41Struct other) {

		other.PERSONA_ID = this.PERSONA_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PERSONA_ID, other.PERSONA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row41Struct row41 = new row41Struct();




	
	/**
	 * [tAdvancedHash_row41 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row41", false);
		start_Hash.put("tAdvancedHash_row41", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row41";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tAdvancedHash_row41 = 0;
		

			   		// connection name:row41
			   		// source node:tOracleInput_21 - inputs:(after_tOracleInput_20) outputs:(row41,row41) | target node:tAdvancedHash_row41 - inputs:(row41) outputs:()
			   		// linked node: tMap_12 - inputs:(row39,row40,row41) outputs:(Elimina9,Inserta12,Elimina10,Inserta13)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row41 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row41Struct> tHash_Lookup_row41 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row41Struct>getLookup(matchingModeEnum_row41);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row41", tHash_Lookup_row41);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row41 begin ] stop
 */



	
	/**
	 * [tOracleInput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_21", false);
		start_Hash.put("tOracleInput_21", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_21";
	
	
		int tos_count_tOracleInput_21 = 0;
		
	


	
		    int nb_line_tOracleInput_21 = 0;
		    java.sql.Connection conn_tOracleInput_21 = null;
				conn_tOracleInput_21 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_21 = false;
				boolean isConnectionWrapped_tOracleInput_21 = !(conn_tOracleInput_21 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_21.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_21 = null;
                if (isConnectionWrapped_tOracleInput_21) {
					unwrappedOraConn_tOracleInput_21 = conn_tOracleInput_21.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_21 != null) {
                        isTimeZoneNull_tOracleInput_21 = (unwrappedOraConn_tOracleInput_21.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_21 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_21).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_21) {
					java.sql.Statement stmtGetTZ_tOracleInput_21 = conn_tOracleInput_21.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_21 = stmtGetTZ_tOracleInput_21.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_21 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_21.next()) {
						sessionTimezone_tOracleInput_21 = rsGetTZ_tOracleInput_21.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_21 && unwrappedOraConn_tOracleInput_21 != null) {
                        unwrappedOraConn_tOracleInput_21.setSessionTimeZone(sessionTimezone_tOracleInput_21);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_21).setSessionTimeZone(sessionTimezone_tOracleInput_21);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_21 = conn_tOracleInput_21.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_21.setFetchSize(1000);


		    String dbquery_tOracleInput_21 = "SELECT    PERSONA_ID \n        , ID\nFROM BACM_AUDITORES";
		    

		    globalMap.put("tOracleInput_21_QUERY",dbquery_tOracleInput_21);

		    java.sql.ResultSet rs_tOracleInput_21 = null;

		    try {
		    	rs_tOracleInput_21 = stmt_tOracleInput_21.executeQuery(dbquery_tOracleInput_21);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_21 = rs_tOracleInput_21.getMetaData();
		    	int colQtyInRs_tOracleInput_21 = rsmd_tOracleInput_21.getColumnCount();

		    String tmpContent_tOracleInput_21 = null;
		    
		    
		    while (rs_tOracleInput_21.next()) {
		        nb_line_tOracleInput_21++;
		        
							if(colQtyInRs_tOracleInput_21 < 1) {
								row41.PERSONA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_21.getObject(1) != null) {
						row41.PERSONA_ID = rs_tOracleInput_21.getBigDecimal(1);
					} else {
				
						row41.PERSONA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_21 < 2) {
								row41.ID = null;
							} else {
		                          
					if(rs_tOracleInput_21.getObject(2) != null) {
						row41.ID = rs_tOracleInput_21.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_21 begin ] stop
 */
	
	/**
	 * [tOracleInput_21 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 


	tos_count_tOracleInput_21++;

/**
 * [tOracleInput_21 main ] stop
 */
	
	/**
	 * [tOracleInput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 



/**
 * [tOracleInput_21 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row41 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row41";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row41"
						
						);
					}
					


			   
			   

					row41Struct row41_HashRow = new row41Struct();
		   	   	   
				
				row41_HashRow.PERSONA_ID = row41.PERSONA_ID;
				
				row41_HashRow.ID = row41.ID;
				
			tHash_Lookup_row41.put(row41_HashRow);
			
            




 


	tos_count_tAdvancedHash_row41++;

/**
 * [tAdvancedHash_row41 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row41 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row41";
	
	

 



/**
 * [tAdvancedHash_row41 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row41 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row41";
	
	

 



/**
 * [tAdvancedHash_row41 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 



/**
 * [tOracleInput_21 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_21 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

}
}finally{
	if (rs_tOracleInput_21 != null) {
		rs_tOracleInput_21.close();
	}
	if (stmt_tOracleInput_21 != null) {
		stmt_tOracleInput_21.close();
	}
}

globalMap.put("tOracleInput_21_NB_LINE",nb_line_tOracleInput_21);
 

ok_Hash.put("tOracleInput_21", true);
end_Hash.put("tOracleInput_21", System.currentTimeMillis());




/**
 * [tOracleInput_21 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row41 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row41";
	
	

tHash_Lookup_row41.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row41", true);
end_Hash.put("tAdvancedHash_row41", System.currentTimeMillis());




/**
 * [tAdvancedHash_row41 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_21 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 



/**
 * [tOracleInput_21 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row41 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row41";
	
	

 



/**
 * [tAdvancedHash_row41 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_21_SUBPROCESS_STATE", 1);
	}
	


public static class row43Struct implements routines.system.IPersistableComparableLookupRow<row43Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal IPS_ID;

				public BigDecimal getIPS_ID () {
					return this.IPS_ID;
				}

				public Boolean IPS_IDIsNullable(){
				    return true;
				}
				public Boolean IPS_IDIsKey(){
				    return false;
				}
				public Integer IPS_IDLength(){
				    return 0;
				}
				public Integer IPS_IDPrecision(){
				    return null;
				}
				public String IPS_IDDefault(){
				
					return "";
				
				}
				public String IPS_IDComment(){
				
				    return "";
				
				}
				public String IPS_IDPattern(){
				
					return "";
				
				}
				public String IPS_IDOriginalDbColumnName(){
				
					return "IPS_ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal CODIGO;

				public BigDecimal getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 0;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return "";
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal TIPO;

				public BigDecimal getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 0;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return "";
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public String NUMCONTRATO;

				public String getNUMCONTRATO () {
					return this.NUMCONTRATO;
				}

				public Boolean NUMCONTRATOIsNullable(){
				    return true;
				}
				public Boolean NUMCONTRATOIsKey(){
				    return false;
				}
				public Integer NUMCONTRATOLength(){
				    return 50;
				}
				public Integer NUMCONTRATOPrecision(){
				    return 0;
				}
				public String NUMCONTRATODefault(){
				
					return null;
				
				}
				public String NUMCONTRATOComment(){
				
				    return "";
				
				}
				public String NUMCONTRATOPattern(){
				
					return "";
				
				}
				public String NUMCONTRATOOriginalDbColumnName(){
				
					return "NUMCONTRATO";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal CLASE;

				public BigDecimal getCLASE () {
					return this.CLASE;
				}

				public Boolean CLASEIsNullable(){
				    return true;
				}
				public Boolean CLASEIsKey(){
				    return false;
				}
				public Integer CLASELength(){
				    return 0;
				}
				public Integer CLASEPrecision(){
				    return null;
				}
				public String CLASEDefault(){
				
					return "";
				
				}
				public String CLASEComment(){
				
				    return "";
				
				}
				public String CLASEPattern(){
				
					return "";
				
				}
				public String CLASEOriginalDbColumnName(){
				
					return "CLASE";
				
				}

				
			    public BigDecimal PADRE_ID;

				public BigDecimal getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return "";
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CONTRATOS_ID == null) ? 0 : this.CONTRATOS_ID.hashCode());
					
						result = prime * result + ((this.CLASE == null) ? 0 : this.CLASE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row43Struct other = (row43Struct) obj;
		
						if (this.CONTRATOS_ID == null) {
							if (other.CONTRATOS_ID != null)
								return false;
						
						} else if (!this.CONTRATOS_ID.equals(other.CONTRATOS_ID))
						
							return false;
					
						if (this.CLASE == null) {
							if (other.CLASE != null)
								return false;
						
						} else if (!this.CLASE.equals(other.CLASE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row43Struct other) {

		other.ID = this.ID;
	            other.UORG_ID = this.UORG_ID;
	            other.IPS_ID = this.IPS_ID;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            other.VALOR = this.VALOR;
	            other.TIPO = this.TIPO;
	            other.NUMCONTRATO = this.NUMCONTRATO;
	            other.CONTRATOS_ID = this.CONTRATOS_ID;
	            other.CLASE = this.CLASE;
	            other.PADRE_ID = this.PADRE_ID;
	            
	}

	public void copyKeysDataTo(row43Struct other) {

		other.CONTRATOS_ID = this.CONTRATOS_ID;
	            	other.CLASE = this.CLASE;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CLASE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CLASE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CLASE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
       			    	this.UORG_ID = (BigDecimal) ois.readObject();
					
       			    	this.IPS_ID = (BigDecimal) ois.readObject();
					
						this.NOMBRE = readString(dis,ois);
					
       			    	this.CODIGO = (BigDecimal) ois.readObject();
					
       			    	this.VALOR = (BigDecimal) ois.readObject();
					
       			    	this.TIPO = (BigDecimal) ois.readObject();
					
						this.NUMCONTRATO = readString(dis,ois);
					
       			    	this.PADRE_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
       			    	this.UORG_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.IPS_ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBRE = readString(dis,objectIn);
					
       			    	this.CODIGO = (BigDecimal) objectIn.readObject();
					
       			    	this.VALOR = (BigDecimal) objectIn.readObject();
					
       			    	this.TIPO = (BigDecimal) objectIn.readObject();
					
						this.NUMCONTRATO = readString(dis,objectIn);
					
       			    	this.PADRE_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
       			    	oos.writeObject(this.UORG_ID);
					
       			    	oos.writeObject(this.IPS_ID);
					
						writeString(this.NOMBRE, dos, oos);
					
       			    	oos.writeObject(this.CODIGO);
					
       			    	oos.writeObject(this.VALOR);
					
       			    	oos.writeObject(this.TIPO);
					
						writeString(this.NUMCONTRATO, dos, oos);
					
       			    	oos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.UORG_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.IPS_ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CODIGO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VALOR);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TIPO);
					
						writeString(this.NUMCONTRATO, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",IPS_ID="+String.valueOf(IPS_ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+String.valueOf(CODIGO));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",TIPO="+String.valueOf(TIPO));
		sb.append(",NUMCONTRATO="+NUMCONTRATO);
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",CLASE="+String.valueOf(CLASE));
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CONTRATOS_ID, other.CONTRATOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CLASE, other.CLASE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row43Struct row43 = new row43Struct();




	
	/**
	 * [tAdvancedHash_row43 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row43", false);
		start_Hash.put("tAdvancedHash_row43", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row43";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row43");
					}
				
		int tos_count_tAdvancedHash_row43 = 0;
		

			   		// connection name:row43
			   		// source node:tHashInput_15 - inputs:(after_tOracleInput_22) outputs:(row43,row43) | target node:tAdvancedHash_row43 - inputs:(row43) outputs:()
			   		// linked node: tMap_13 - inputs:(row42,row43,row44) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row43 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row43Struct> tHash_Lookup_row43 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row43Struct>getLookup(matchingModeEnum_row43);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row43", tHash_Lookup_row43);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row43 begin ] stop
 */



	
	/**
	 * [tHashInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_15", false);
		start_Hash.put("tHashInput_15", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_15";
	
	
		int tos_count_tHashInput_15 = 0;
		


int nb_line_tHashInput_15 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_15=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashInput_15 = mf_tHashInput_15.getAdvancedMemoryHashFile("tHashFile_ACM_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_15==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row9Struct> iterator_tHashInput_15 = tHashFile_tHashInput_15.iterator();
while (iterator_tHashInput_15.hasNext()) {
    row9Struct next_tHashInput_15 = iterator_tHashInput_15.next();

	row43.ID = next_tHashInput_15.ID;
	row43.UORG_ID = next_tHashInput_15.UORG_ID;
	row43.IPS_ID = next_tHashInput_15.IPS_ID;
	row43.NOMBRE = next_tHashInput_15.NOMBRE;
	row43.CODIGO = next_tHashInput_15.CODIGO;
	row43.VALOR = next_tHashInput_15.VALOR;
	row43.TIPO = next_tHashInput_15.TIPO;
	row43.NUMCONTRATO = next_tHashInput_15.NUMCONTRATO;
	row43.CONTRATOS_ID = next_tHashInput_15.CONTRATOS_ID;
	row43.CLASE = next_tHashInput_15.CLASE;
	row43.PADRE_ID = next_tHashInput_15.PADRE_ID;

 



/**
 * [tHashInput_15 begin ] stop
 */
	
	/**
	 * [tHashInput_15 main ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 


	tos_count_tHashInput_15++;

/**
 * [tHashInput_15 main ] stop
 */
	
	/**
	 * [tHashInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 



/**
 * [tHashInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row43 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row43";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row43"
						
						);
					}
					


			   
			   

					row43Struct row43_HashRow = new row43Struct();
		   	   	   
				
				row43_HashRow.ID = row43.ID;
				
				row43_HashRow.UORG_ID = row43.UORG_ID;
				
				row43_HashRow.IPS_ID = row43.IPS_ID;
				
				row43_HashRow.NOMBRE = row43.NOMBRE;
				
				row43_HashRow.CODIGO = row43.CODIGO;
				
				row43_HashRow.VALOR = row43.VALOR;
				
				row43_HashRow.TIPO = row43.TIPO;
				
				row43_HashRow.NUMCONTRATO = row43.NUMCONTRATO;
				
				row43_HashRow.CONTRATOS_ID = row43.CONTRATOS_ID;
				
				row43_HashRow.CLASE = row43.CLASE;
				
				row43_HashRow.PADRE_ID = row43.PADRE_ID;
				
			tHash_Lookup_row43.put(row43_HashRow);
			
            




 


	tos_count_tAdvancedHash_row43++;

/**
 * [tAdvancedHash_row43 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row43 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row43";
	
	

 



/**
 * [tAdvancedHash_row43 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row43 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row43";
	
	

 



/**
 * [tAdvancedHash_row43 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 



/**
 * [tHashInput_15 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_15 end ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	
    

		
			nb_line_tHashInput_15++;
		}	
    		
    		mf_tHashInput_15.clearCache("tHashFile_ACM_" + pid +"_tHashOutput_1");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ACM_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_15_NB_LINE", nb_line_tHashInput_15);       

 

ok_Hash.put("tHashInput_15", true);
end_Hash.put("tHashInput_15", System.currentTimeMillis());




/**
 * [tHashInput_15 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row43 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row43";
	
	

tHash_Lookup_row43.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row43");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row43", true);
end_Hash.put("tAdvancedHash_row43", System.currentTimeMillis());




/**
 * [tAdvancedHash_row43 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_15 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 



/**
 * [tHashInput_15 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row43 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row43";
	
	

 



/**
 * [tAdvancedHash_row43 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row44Struct implements routines.system.IPersistableComparableLookupRow<row44Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FECHA == null) ? 0 : this.FECHA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row44Struct other = (row44Struct) obj;
		
						if (this.FECHA == null) {
							if (other.FECHA != null)
								return false;
						
						} else if (!this.FECHA.equals(other.FECHA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row44Struct other) {

		other.ID = this.ID;
	            other.FECHA = this.FECHA;
	            
	}

	public void copyKeysDataTo(row44Struct other) {

		other.FECHA = this.FECHA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FECHA, other.FECHA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row44Struct row44 = new row44Struct();




	
	/**
	 * [tAdvancedHash_row44 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row44", false);
		start_Hash.put("tAdvancedHash_row44", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row44";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row44");
					}
				
		int tos_count_tAdvancedHash_row44 = 0;
		

			   		// connection name:row44
			   		// source node:tHashInput_16 - inputs:(after_tOracleInput_22) outputs:(row44,row44) | target node:tAdvancedHash_row44 - inputs:(row44) outputs:()
			   		// linked node: tMap_13 - inputs:(row42,row43,row44) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row44 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct> tHash_Lookup_row44 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row44Struct>getLookup(matchingModeEnum_row44);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row44", tHash_Lookup_row44);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row44 begin ] stop
 */



	
	/**
	 * [tHashInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_16", false);
		start_Hash.put("tHashInput_16", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_16";
	
	
		int tos_count_tHashInput_16 = 0;
		


int nb_line_tHashInput_16 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_16=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_16 = mf_tHashInput_16.getAdvancedMemoryHashFile("tHashFile_ACM_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_16==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_16 = tHashFile_tHashInput_16.iterator();
while (iterator_tHashInput_16.hasNext()) {
    row10Struct next_tHashInput_16 = iterator_tHashInput_16.next();

	row44.ID = next_tHashInput_16.ID;
	row44.FECHA = next_tHashInput_16.FECHA;

 



/**
 * [tHashInput_16 begin ] stop
 */
	
	/**
	 * [tHashInput_16 main ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	

 


	tos_count_tHashInput_16++;

/**
 * [tHashInput_16 main ] stop
 */
	
	/**
	 * [tHashInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	

 



/**
 * [tHashInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row44 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row44"
						
						);
					}
					


			   
			   

					row44Struct row44_HashRow = new row44Struct();
		   	   	   
				
				row44_HashRow.ID = row44.ID;
				
				row44_HashRow.FECHA = row44.FECHA;
				
			tHash_Lookup_row44.put(row44_HashRow);
			
            




 


	tos_count_tAdvancedHash_row44++;

/**
 * [tAdvancedHash_row44 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row44 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";
	
	

 



/**
 * [tAdvancedHash_row44 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row44 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";
	
	

 



/**
 * [tAdvancedHash_row44 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	

 



/**
 * [tHashInput_16 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_16 end ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	
    

		
			nb_line_tHashInput_16++;
		}	
    		
    		mf_tHashInput_16.clearCache("tHashFile_ACM_" + pid +"_tHashOutput_2");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ACM_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_16_NB_LINE", nb_line_tHashInput_16);       

 

ok_Hash.put("tHashInput_16", true);
end_Hash.put("tHashInput_16", System.currentTimeMillis());




/**
 * [tHashInput_16 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row44 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";
	
	

tHash_Lookup_row44.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row44");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row44", true);
end_Hash.put("tAdvancedHash_row44", System.currentTimeMillis());




/**
 * [tAdvancedHash_row44 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_16 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	

 



/**
 * [tHashInput_16 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row44 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";
	
	

 



/**
 * [tAdvancedHash_row44 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class row46Struct implements routines.system.IPersistableComparableLookupRow<row46Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_ACM = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_ACM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FECHA == null) ? 0 : this.FECHA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row46Struct other = (row46Struct) obj;
		
						if (this.FECHA == null) {
							if (other.FECHA != null)
								return false;
						
						} else if (!this.FECHA.equals(other.FECHA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row46Struct other) {

		other.ID = this.ID;
	            other.FECHA = this.FECHA;
	            
	}

	public void copyKeysDataTo(row46Struct other) {

		other.FECHA = this.FECHA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_ACM) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row46Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FECHA, other.FECHA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row46Struct row46 = new row46Struct();




	
	/**
	 * [tAdvancedHash_row46 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row46", false);
		start_Hash.put("tAdvancedHash_row46", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row46";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row46");
					}
				
		int tos_count_tAdvancedHash_row46 = 0;
		

			   		// connection name:row46
			   		// source node:tHashInput_17 - inputs:(after_tOracleInput_19) outputs:(row46,row46) | target node:tAdvancedHash_row46 - inputs:(row46) outputs:()
			   		// linked node: tMap_15 - inputs:(row45,row46) outputs:(copyOfElimina7,copyOfInserta8)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row46 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct> tHash_Lookup_row46 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row46Struct>getLookup(matchingModeEnum_row46);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row46", tHash_Lookup_row46);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row46 begin ] stop
 */



	
	/**
	 * [tHashInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_17", false);
		start_Hash.put("tHashInput_17", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_17";
	
	
		int tos_count_tHashInput_17 = 0;
		


int nb_line_tHashInput_17 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_17=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_17 = mf_tHashInput_17.getAdvancedMemoryHashFile("tHashFile_ACM_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_17==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_17 = tHashFile_tHashInput_17.iterator();
while (iterator_tHashInput_17.hasNext()) {
    row10Struct next_tHashInput_17 = iterator_tHashInput_17.next();

	row46.ID = next_tHashInput_17.ID;
	row46.FECHA = next_tHashInput_17.FECHA;

 



/**
 * [tHashInput_17 begin ] stop
 */
	
	/**
	 * [tHashInput_17 main ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 


	tos_count_tHashInput_17++;

/**
 * [tHashInput_17 main ] stop
 */
	
	/**
	 * [tHashInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 



/**
 * [tHashInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row46 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row46"
						
						);
					}
					


			   
			   

					row46Struct row46_HashRow = new row46Struct();
		   	   	   
				
				row46_HashRow.ID = row46.ID;
				
				row46_HashRow.FECHA = row46.FECHA;
				
			tHash_Lookup_row46.put(row46_HashRow);
			
            




 


	tos_count_tAdvancedHash_row46++;

/**
 * [tAdvancedHash_row46 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row46 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	

 



/**
 * [tAdvancedHash_row46 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row46 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	

 



/**
 * [tAdvancedHash_row46 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 



/**
 * [tHashInput_17 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_17 end ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	
    

		
			nb_line_tHashInput_17++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ACM_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_17_NB_LINE", nb_line_tHashInput_17);       

 

ok_Hash.put("tHashInput_17", true);
end_Hash.put("tHashInput_17", System.currentTimeMillis());




/**
 * [tHashInput_17 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row46 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	

tHash_Lookup_row46.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row46");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row46", true);
end_Hash.put("tAdvancedHash_row46", System.currentTimeMillis());




/**
 * [tAdvancedHash_row46 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_17 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 



/**
 * [tHashInput_17 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row46 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	

 



/**
 * [tAdvancedHash_row46 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_17_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final ACM ACMClass = new ACM();

        int exitCode = ACMClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ACM.class.getClassLoader().getResourceAsStream("rep_inicio_f5/acm_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = ACM.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("JOB", "id_String");
                        if(context.getStringValue("JOB") == null) {
                            context.JOB = null;
                        } else {
                            context.JOB=(String) context.getProperty("JOB");
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("ACTUALIZACION_TOTAL", "id_Boolean");
                        if(context.getStringValue("ACTUALIZACION_TOTAL") == null) {
                            context.ACTUALIZACION_TOTAL = null;
                        } else {
                            try{
                                context.ACTUALIZACION_TOTAL=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("ACTUALIZACION_TOTAL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ACTUALIZACION_TOTAL", e.getMessage()));
                                context.ACTUALIZACION_TOTAL=null;
                            }
                        }
                        context.setContextType("CONDICION", "id_String");
                        if(context.getStringValue("CONDICION") == null) {
                            context.CONDICION = null;
                        } else {
                            context.CONDICION=(String) context.getProperty("CONDICION");
                        }
                        context.setContextType("CONDICION_AUDITORES", "id_String");
                        if(context.getStringValue("CONDICION_AUDITORES") == null) {
                            context.CONDICION_AUDITORES = null;
                        } else {
                            context.CONDICION_AUDITORES=(String) context.getProperty("CONDICION_AUDITORES");
                        }
                        context.setContextType("CONDICION_INDICADORES", "id_String");
                        if(context.getStringValue("CONDICION_INDICADORES") == null) {
                            context.CONDICION_INDICADORES = null;
                        } else {
                            context.CONDICION_INDICADORES=(String) context.getProperty("CONDICION_INDICADORES");
                        }
                        context.setContextType("CONDICION2", "id_String");
                        if(context.getStringValue("CONDICION2") == null) {
                            context.CONDICION2 = null;
                        } else {
                            context.CONDICION2=(String) context.getProperty("CONDICION2");
                        }
                        context.setContextType("DEJECUCION", "id_String");
                        if(context.getStringValue("DEJECUCION") == null) {
                            context.DEJECUCION = null;
                        } else {
                            context.DEJECUCION=(String) context.getProperty("DEJECUCION");
                        }
                        context.setContextType("FANTERIOR", "id_String");
                        if(context.getStringValue("FANTERIOR") == null) {
                            context.FANTERIOR = null;
                        } else {
                            context.FANTERIOR=(String) context.getProperty("FANTERIOR");
                        }
                        context.setContextType("FEJECUCION", "id_String");
                        if(context.getStringValue("FEJECUCION") == null) {
                            context.FEJECUCION = null;
                        } else {
                            context.FEJECUCION=(String) context.getProperty("FEJECUCION");
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("CONDITION", "id_String");
                        if(context.getStringValue("CONDITION") == null) {
                            context.CONDITION = null;
                        } else {
                            context.CONDITION=(String) context.getProperty("CONDITION");
                        }
                        context.setContextType("CONDITION_PRINCIPAL", "id_String");
                        if(context.getStringValue("CONDITION_PRINCIPAL") == null) {
                            context.CONDITION_PRINCIPAL = null;
                        } else {
                            context.CONDITION_PRINCIPAL=(String) context.getProperty("CONDITION_PRINCIPAL");
                        }
                        context.setContextType("ERROR", "id_String");
                        if(context.getStringValue("ERROR") == null) {
                            context.ERROR = null;
                        } else {
                            context.ERROR=(String) context.getProperty("ERROR");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("FECHA_TERMINACION", "id_String");
                        if(context.getStringValue("FECHA_TERMINACION") == null) {
                            context.FECHA_TERMINACION = null;
                        } else {
                            context.FECHA_TERMINACION=(String) context.getProperty("FECHA_TERMINACION");
                        }
                        context.setContextType("ID_SOLICITUD", "id_Integer");
                        if(context.getStringValue("ID_SOLICITUD") == null) {
                            context.ID_SOLICITUD = null;
                        } else {
                            try{
                                context.ID_SOLICITUD=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ID_SOLICITUD"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ID_SOLICITUD", e.getMessage()));
                                context.ID_SOLICITUD=null;
                            }
                        }
                        context.setContextType("LAST_DAYS", "id_Integer");
                        if(context.getStringValue("LAST_DAYS") == null) {
                            context.LAST_DAYS = null;
                        } else {
                            try{
                                context.LAST_DAYS=routines.system.ParserUtils.parseTo_Integer (context.getProperty("LAST_DAYS"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "LAST_DAYS", e.getMessage()));
                                context.LAST_DAYS=null;
                            }
                        }
                        context.setContextType("LOGS_STAT", "id_String");
                        if(context.getStringValue("LOGS_STAT") == null) {
                            context.LOGS_STAT = null;
                        } else {
                            context.LOGS_STAT=(String) context.getProperty("LOGS_STAT");
                        }
                        context.setContextType("RutaSistema", "id_String");
                        if(context.getStringValue("RutaSistema") == null) {
                            context.RutaSistema = null;
                        } else {
                            context.RutaSistema=(String) context.getProperty("RutaSistema");
                        }
                        context.setContextType("mail_Message", "id_String");
                        if(context.getStringValue("mail_Message") == null) {
                            context.mail_Message = null;
                        } else {
                            context.mail_Message=(String) context.getProperty("mail_Message");
                        }
                        context.setContextType("mail_Password", "id_Password");
                        if(context.getStringValue("mail_Password") == null) {
                            context.mail_Password = null;
                        } else {
                            String pwd_mail_Password_value = context.getProperty("mail_Password");
                            context.mail_Password = null;
                            if(pwd_mail_Password_value!=null) {
                                if(context_param.containsKey("mail_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.mail_Password = pwd_mail_Password_value;
                                } else if (!pwd_mail_Password_value.isEmpty()) {
                                    try {
                                        context.mail_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_mail_Password_value);
                                        context.put("mail_Password",context.mail_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("mail_Sendername", "id_String");
                        if(context.getStringValue("mail_Sendername") == null) {
                            context.mail_Sendername = null;
                        } else {
                            context.mail_Sendername=(String) context.getProperty("mail_Sendername");
                        }
                        context.setContextType("mail_SMTP_Host", "id_String");
                        if(context.getStringValue("mail_SMTP_Host") == null) {
                            context.mail_SMTP_Host = null;
                        } else {
                            context.mail_SMTP_Host=(String) context.getProperty("mail_SMTP_Host");
                        }
                        context.setContextType("mail_SMTP_Port", "id_String");
                        if(context.getStringValue("mail_SMTP_Port") == null) {
                            context.mail_SMTP_Port = null;
                        } else {
                            context.mail_SMTP_Port=(String) context.getProperty("mail_SMTP_Port");
                        }
                        context.setContextType("mail_Subject", "id_String");
                        if(context.getStringValue("mail_Subject") == null) {
                            context.mail_Subject = null;
                        } else {
                            context.mail_Subject=(String) context.getProperty("mail_Subject");
                        }
                        context.setContextType("mail_To", "id_String");
                        if(context.getStringValue("mail_To") == null) {
                            context.mail_To = null;
                        } else {
                            context.mail_To=(String) context.getProperty("mail_To");
                        }
                        context.setContextType("mail_User", "id_String");
                        if(context.getStringValue("mail_User") == null) {
                            context.mail_User = null;
                        } else {
                            context.mail_User=(String) context.getProperty("mail_User");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("JOB")) {
                context.JOB = (String) parentContextMap.get("JOB");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("ACTUALIZACION_TOTAL")) {
                context.ACTUALIZACION_TOTAL = (Boolean) parentContextMap.get("ACTUALIZACION_TOTAL");
            }if (parentContextMap.containsKey("CONDICION")) {
                context.CONDICION = (String) parentContextMap.get("CONDICION");
            }if (parentContextMap.containsKey("CONDICION_AUDITORES")) {
                context.CONDICION_AUDITORES = (String) parentContextMap.get("CONDICION_AUDITORES");
            }if (parentContextMap.containsKey("CONDICION_INDICADORES")) {
                context.CONDICION_INDICADORES = (String) parentContextMap.get("CONDICION_INDICADORES");
            }if (parentContextMap.containsKey("CONDICION2")) {
                context.CONDICION2 = (String) parentContextMap.get("CONDICION2");
            }if (parentContextMap.containsKey("DEJECUCION")) {
                context.DEJECUCION = (String) parentContextMap.get("DEJECUCION");
            }if (parentContextMap.containsKey("FANTERIOR")) {
                context.FANTERIOR = (String) parentContextMap.get("FANTERIOR");
            }if (parentContextMap.containsKey("FEJECUCION")) {
                context.FEJECUCION = (String) parentContextMap.get("FEJECUCION");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("CONDITION")) {
                context.CONDITION = (String) parentContextMap.get("CONDITION");
            }if (parentContextMap.containsKey("CONDITION_PRINCIPAL")) {
                context.CONDITION_PRINCIPAL = (String) parentContextMap.get("CONDITION_PRINCIPAL");
            }if (parentContextMap.containsKey("ERROR")) {
                context.ERROR = (String) parentContextMap.get("ERROR");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("FECHA_TERMINACION")) {
                context.FECHA_TERMINACION = (String) parentContextMap.get("FECHA_TERMINACION");
            }if (parentContextMap.containsKey("ID_SOLICITUD")) {
                context.ID_SOLICITUD = (Integer) parentContextMap.get("ID_SOLICITUD");
            }if (parentContextMap.containsKey("LAST_DAYS")) {
                context.LAST_DAYS = (Integer) parentContextMap.get("LAST_DAYS");
            }if (parentContextMap.containsKey("LOGS_STAT")) {
                context.LOGS_STAT = (String) parentContextMap.get("LOGS_STAT");
            }if (parentContextMap.containsKey("RutaSistema")) {
                context.RutaSistema = (String) parentContextMap.get("RutaSistema");
            }if (parentContextMap.containsKey("mail_Message")) {
                context.mail_Message = (String) parentContextMap.get("mail_Message");
            }if (parentContextMap.containsKey("mail_Password")) {
                context.mail_Password = (java.lang.String) parentContextMap.get("mail_Password");
            }if (parentContextMap.containsKey("mail_Sendername")) {
                context.mail_Sendername = (String) parentContextMap.get("mail_Sendername");
            }if (parentContextMap.containsKey("mail_SMTP_Host")) {
                context.mail_SMTP_Host = (String) parentContextMap.get("mail_SMTP_Host");
            }if (parentContextMap.containsKey("mail_SMTP_Port")) {
                context.mail_SMTP_Port = (String) parentContextMap.get("mail_SMTP_Port");
            }if (parentContextMap.containsKey("mail_Subject")) {
                context.mail_Subject = (String) parentContextMap.get("mail_Subject");
            }if (parentContextMap.containsKey("mail_To")) {
                context.mail_To = (String) parentContextMap.get("mail_To");
            }if (parentContextMap.containsKey("mail_User")) {
                context.mail_User = (String) parentContextMap.get("mail_User");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_destino_Password");
			parametersToEncrypt.add("db_origen_Password");
			parametersToEncrypt.add("mail_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_2) {
globalMap.put("tJava_2_SUBPROCESS_STATE", -1);

e_tJava_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ACM");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tOracleConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));
            connections.put("conn_tOracleConnection_2", globalMap.get("conn_tOracleConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     2947415 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 11:51:06 AM COT
 ************************************************************************************************/