// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package rep_inicio_f5.vac_f5_1_2;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.Utils;
import routines.getEdad;
import routines.StringHandling;
import routines.ArrayFromFile;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJavaRow_7
	import java.net.URLDecoder;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJavaRow_8
	import java.net.URLDecoder;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: VAC_F5 Purpose: <br>
 * Description: Fecha 			Quién 				Que 
06/09/2018		Roger Prieto		cambia los joblets por incompatibilidad con la versión comunity <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class VAC_F5 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(ACTUALIZACION_TOTAL != null){
				
					this.setProperty("ACTUALIZACION_TOTAL", ACTUALIZACION_TOTAL.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(CONDITION != null){
				
					this.setProperty("CONDITION", CONDITION.toString());
				
			}
			
			if(CONDITION_PRINCIPAL != null){
				
					this.setProperty("CONDITION_PRINCIPAL", CONDITION_PRINCIPAL.toString());
				
			}
			
			if(ERROR != null){
				
					this.setProperty("ERROR", ERROR.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FANTERIOR != null){
				
					this.setProperty("FANTERIOR", FANTERIOR.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(FECHA_TERMINACION != null){
				
					this.setProperty("FECHA_TERMINACION", FECHA_TERMINACION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(ID_SOLICITUD != null){
				
					this.setProperty("ID_SOLICITUD", ID_SOLICITUD.toString());
				
			}
			
			if(JOB != null){
				
					this.setProperty("JOB", JOB.toString());
				
			}
			
			if(LAST_DAYS != null){
				
					this.setProperty("LAST_DAYS", LAST_DAYS.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(LOGS_STAT != null){
				
					this.setProperty("LOGS_STAT", LOGS_STAT.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(RutaSistema != null){
				
					this.setProperty("RutaSistema", RutaSistema.toString());
				
			}
			
			if(ActualizacionTotal != null){
				
					this.setProperty("ActualizacionTotal", ActualizacionTotal.toString());
				
			}
			
			if(ANIO_PERIODO != null){
				
					this.setProperty("ANIO_PERIODO", ANIO_PERIODO.toString());
				
			}
			
			if(BorradoTotal != null){
				
					this.setProperty("BorradoTotal", BorradoTotal.toString());
				
			}
			
			if(DIA_EJECUCION != null){
				
					this.setProperty("DIA_EJECUCION", DIA_EJECUCION.toString());
				
			}
			
			if(ESTADO_PROC != null){
				
					this.setProperty("ESTADO_PROC", ESTADO_PROC.toString());
				
			}
			
			if(FECHA_INICIO_ACTUALIZACION != null){
				
					this.setProperty("FECHA_INICIO_ACTUALIZACION", FECHA_INICIO_ACTUALIZACION.toString());
				
			}
			
			if(FECHA_MAXIMA != null){
				
					this.setProperty("FECHA_MAXIMA", FECHA_MAXIMA.toString());
				
			}
			
			if(FECHA_MAXIMA2 != null){
				
					this.setProperty("FECHA_MAXIMA2", FECHA_MAXIMA2.toString());
				
			}
			
			if(FECHA_MAXIMA3 != null){
				
					this.setProperty("FECHA_MAXIMA3", FECHA_MAXIMA3.toString());
				
			}
			
			if(FECHA_MENOR != null){
				
					this.setProperty("FECHA_MENOR", FECHA_MENOR.toString());
				
			}
			
			if(FECHA_MENOR2 != null){
				
					this.setProperty("FECHA_MENOR2", FECHA_MENOR2.toString());
				
			}
			
			if(FECHA_MENOR3 != null){
				
					this.setProperty("FECHA_MENOR3", FECHA_MENOR3.toString());
				
			}
			
			if(FECHA_PERIODO != null){
				
					this.setProperty("FECHA_PERIODO", FECHA_PERIODO.toString());
				
			}
			
			if(FECHA_PRIMERDIA != null){
				
					this.setProperty("FECHA_PRIMERDIA", FECHA_PRIMERDIA.toString());
				
			}
			
			if(ID_PERIODO != null){
				
					this.setProperty("ID_PERIODO", ID_PERIODO.toString());
				
			}
			
			if(ID_PRIMERDIA != null){
				
					this.setProperty("ID_PRIMERDIA", ID_PRIMERDIA.toString());
				
			}
			
			if(MENSAJE_PROC != null){
				
					this.setProperty("MENSAJE_PROC", MENSAJE_PROC.toString());
				
			}
			
			if(PERIODO != null){
				
					this.setProperty("PERIODO", PERIODO.toString());
				
			}
			
			if(PERIODO_PRIMERDIA != null){
				
					this.setProperty("PERIODO_PRIMERDIA", PERIODO_PRIMERDIA.toString());
				
			}
			
			if(PeriodosSis != null){
				
					this.setProperty("PeriodosSis", PeriodosSis.toString());
				
			}
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public Boolean ACTUALIZACION_TOTAL;
public Boolean getACTUALIZACION_TOTAL(){
	return this.ACTUALIZACION_TOTAL;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String CONDITION;
public String getCONDITION(){
	return this.CONDITION;
}
public String CONDITION_PRINCIPAL;
public String getCONDITION_PRINCIPAL(){
	return this.CONDITION_PRINCIPAL;
}
public String ERROR;
public String getERROR(){
	return this.ERROR;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FANTERIOR;
public String getFANTERIOR(){
	return this.FANTERIOR;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String FECHA_TERMINACION;
public String getFECHA_TERMINACION(){
	return this.FECHA_TERMINACION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public Integer ID_SOLICITUD;
public Integer getID_SOLICITUD(){
	return this.ID_SOLICITUD;
}
public String JOB;
public String getJOB(){
	return this.JOB;
}
public Integer LAST_DAYS;
public Integer getLAST_DAYS(){
	return this.LAST_DAYS;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String LOGS_STAT;
public String getLOGS_STAT(){
	return this.LOGS_STAT;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public String RutaSistema;
public String getRutaSistema(){
	return this.RutaSistema;
}
public Integer ActualizacionTotal;
public Integer getActualizacionTotal(){
	return this.ActualizacionTotal;
}
public String ANIO_PERIODO;
public String getANIO_PERIODO(){
	return this.ANIO_PERIODO;
}
public Integer BorradoTotal;
public Integer getBorradoTotal(){
	return this.BorradoTotal;
}
public String DIA_EJECUCION;
public String getDIA_EJECUCION(){
	return this.DIA_EJECUCION;
}
public Integer ESTADO_PROC;
public Integer getESTADO_PROC(){
	return this.ESTADO_PROC;
}
public String FECHA_INICIO_ACTUALIZACION;
public String getFECHA_INICIO_ACTUALIZACION(){
	return this.FECHA_INICIO_ACTUALIZACION;
}
public String FECHA_MAXIMA;
public String getFECHA_MAXIMA(){
	return this.FECHA_MAXIMA;
}
public String FECHA_MAXIMA2;
public String getFECHA_MAXIMA2(){
	return this.FECHA_MAXIMA2;
}
public String FECHA_MAXIMA3;
public String getFECHA_MAXIMA3(){
	return this.FECHA_MAXIMA3;
}
public String FECHA_MENOR;
public String getFECHA_MENOR(){
	return this.FECHA_MENOR;
}
public String FECHA_MENOR2;
public String getFECHA_MENOR2(){
	return this.FECHA_MENOR2;
}
public String FECHA_MENOR3;
public String getFECHA_MENOR3(){
	return this.FECHA_MENOR3;
}
public String FECHA_PERIODO;
public String getFECHA_PERIODO(){
	return this.FECHA_PERIODO;
}
public String FECHA_PRIMERDIA;
public String getFECHA_PRIMERDIA(){
	return this.FECHA_PRIMERDIA;
}
public BigDecimal ID_PERIODO;
public BigDecimal getID_PERIODO(){
	return this.ID_PERIODO;
}
public BigDecimal ID_PRIMERDIA;
public BigDecimal getID_PRIMERDIA(){
	return this.ID_PRIMERDIA;
}
public String MENSAJE_PROC;
public String getMENSAJE_PROC(){
	return this.MENSAJE_PROC;
}
public String PERIODO;
public String getPERIODO(){
	return this.PERIODO;
}
public String PERIODO_PRIMERDIA;
public String getPERIODO_PRIMERDIA(){
	return this.PERIODO_PRIMERDIA;
}
public String PeriodosSis;
public String getPeriodosSis(){
	return this.PeriodosSis;
}
public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "1.2";
	private final String jobName = "VAC_F5";
	private final String projectName = "REP_INICIO_F5";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				VAC_F5.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(VAC_F5.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDie_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_37_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_36_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_38_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_39_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_40_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row36_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row38_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row40_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row42_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row44_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row45_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row48_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row49_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row51_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row55_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row57_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row46_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row56_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_27_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_30_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_37_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_22_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_23_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_25_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_26_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_24_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


context.FECHA_TERMINACION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");
context.ESTADO_EXEC = "Success";
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tFixedFlowInput_2Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tOracleClose_2Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tOracleClose_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row41Struct row41 = new row41Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("HORA_INICIO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("HORA_FINAL");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ESTADO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("JOBS");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row41.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row41.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row41.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row41.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row41.JOBS = context.JOB;
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row41"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row41.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.ESTADO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.JOBS != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

                    }



 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_2", false);
		start_Hash.put("tOracleClose_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_2";
	
	
		int tos_count_tOracleClose_2 = 0;
		

 



/**
 * [tOracleClose_2 begin ] stop
 */
	
	/**
	 * [tOracleClose_2 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

	java.sql.Connection conn_tOracleClose_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
	
	if(conn_tOracleClose_2 != null && !conn_tOracleClose_2.isClosed())
	{
		
			conn_tOracleClose_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_2++;

/**
 * [tOracleClose_2 main ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_2 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 

ok_Hash.put("tOracleClose_2", true);
end_Hash.put("tOracleClose_2", System.currentTimeMillis());




/**
 * [tOracleClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


/*Obtiene fecha de ejecución y día de ejecución*/
context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.DIA_EJECUCION = TalendDate.getDate("DD");
context.FECHA_INICIO_ACTUALIZACION = "01/01/2019";

/*Para pruebas */
// context.ACTUALIZACION_TOTAL = true;
// context.FECHA_EJECUCION = "01/10/2019";
// context.DIA_EJECUCION = "01";

System.out.println("\nFecha de ejecución: "+context.FECHA_EJECUCION);
System.out.println("Día de ejecución: "+context.DIA_EJECUCION);


/*Define condición para hacer la ejecución total o mensual*/
if (context.ACTUALIZACION_TOTAL){
	context.CONDITION = " AND TI.FECHA BETWEEN TO_DATE ('"+context.FECHA_INICIO_ACTUALIZACION+"', 'DD/MM/YYYY') AND ADD_MONTHS(SYSDATE, -1) ";
} else if (context.DIA_EJECUCION.equals("01")){
	context.CONDITION = " AND TI.FECHA BETWEEN ADD_MONTHS(TO_DATE ('"+context.FECHA_EJECUCION+"', 'DD/MM/YYYY'), -3) AND ADD_MONTHS(TO_DATE('"+context.FECHA_EJECUCION+"', 'DD/MM/YYYY'), -1) ";
} else {
	// actualización los 16 de cada mes
	context.CONDITION = " AND TI.FECHA = TRUNC ( ADD_MONTHS ( TO_DATE( '"+context.FECHA_EJECUCION+"', 'DD/MM/YYYY' ), DECODE ( '"+context.DIA_EJECUCION+"','01',-1, 0 ) ), 'MONTH' ) ";
}

System.out.println("Condición de ejecución: " + context.CONDITION);
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

   			if ( context.DIA_EJECUCION.equals("01") || context.DIA_EJECUCION.equals("16") || context.ACTUALIZACION_TOTAL) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tOracleInput_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class insertaStruct implements routines.system.IPersistableRow<insertaStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE_PRODUCTO;

				public String getNOMBRE_PRODUCTO () {
					return this.NOMBRE_PRODUCTO;
				}

				public Boolean NOMBRE_PRODUCTOIsNullable(){
				    return false;
				}
				public Boolean NOMBRE_PRODUCTOIsKey(){
				    return false;
				}
				public Integer NOMBRE_PRODUCTOLength(){
				    return 350;
				}
				public Integer NOMBRE_PRODUCTOPrecision(){
				    return 0;
				}
				public String NOMBRE_PRODUCTODefault(){
				
					return null;
				
				}
				public String NOMBRE_PRODUCTOComment(){
				
				    return "";
				
				}
				public String NOMBRE_PRODUCTOPattern(){
				
					return "";
				
				}
				public String NOMBRE_PRODUCTOOriginalDbColumnName(){
				
					return "NOMBRE_PRODUCTO";
				
				}

				
			    public String NOMBRE_CUPS;

				public String getNOMBRE_CUPS () {
					return this.NOMBRE_CUPS;
				}

				public Boolean NOMBRE_CUPSIsNullable(){
				    return false;
				}
				public Boolean NOMBRE_CUPSIsKey(){
				    return false;
				}
				public Integer NOMBRE_CUPSLength(){
				    return 500;
				}
				public Integer NOMBRE_CUPSPrecision(){
				    return 0;
				}
				public String NOMBRE_CUPSDefault(){
				
					return null;
				
				}
				public String NOMBRE_CUPSComment(){
				
				    return "";
				
				}
				public String NOMBRE_CUPSPattern(){
				
					return "";
				
				}
				public String NOMBRE_CUPSOriginalDbColumnName(){
				
					return "NOMBRE_CUPS";
				
				}

				
			    public String TESQUEMA;

				public String getTESQUEMA () {
					return this.TESQUEMA;
				}

				public Boolean TESQUEMAIsNullable(){
				    return false;
				}
				public Boolean TESQUEMAIsKey(){
				    return false;
				}
				public Integer TESQUEMALength(){
				    return 10;
				}
				public Integer TESQUEMAPrecision(){
				    return 0;
				}
				public String TESQUEMADefault(){
				
					return null;
				
				}
				public String TESQUEMAComment(){
				
				    return "";
				
				}
				public String TESQUEMAPattern(){
				
					return "";
				
				}
				public String TESQUEMAOriginalDbColumnName(){
				
					return "TESQUEMA";
				
				}

				
			    public BigDecimal TIEMPO_DOSIS;

				public BigDecimal getTIEMPO_DOSIS () {
					return this.TIEMPO_DOSIS;
				}

				public Boolean TIEMPO_DOSISIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_DOSISIsKey(){
				    return false;
				}
				public Integer TIEMPO_DOSISLength(){
				    return 0;
				}
				public Integer TIEMPO_DOSISPrecision(){
				    return null;
				}
				public String TIEMPO_DOSISDefault(){
				
					return "";
				
				}
				public String TIEMPO_DOSISComment(){
				
				    return "";
				
				}
				public String TIEMPO_DOSISPattern(){
				
					return "";
				
				}
				public String TIEMPO_DOSISOriginalDbColumnName(){
				
					return "TIEMPO_DOSIS";
				
				}

				
			    public BigDecimal EDADMINIMA;

				public BigDecimal getEDADMINIMA () {
					return this.EDADMINIMA;
				}

				public Boolean EDADMINIMAIsNullable(){
				    return true;
				}
				public Boolean EDADMINIMAIsKey(){
				    return false;
				}
				public Integer EDADMINIMALength(){
				    return 0;
				}
				public Integer EDADMINIMAPrecision(){
				    return null;
				}
				public String EDADMINIMADefault(){
				
					return "";
				
				}
				public String EDADMINIMAComment(){
				
				    return "";
				
				}
				public String EDADMINIMAPattern(){
				
					return "";
				
				}
				public String EDADMINIMAOriginalDbColumnName(){
				
					return "EDADMINIMA";
				
				}

				
			    public BigDecimal EDADMAXIMA;

				public BigDecimal getEDADMAXIMA () {
					return this.EDADMAXIMA;
				}

				public Boolean EDADMAXIMAIsNullable(){
				    return true;
				}
				public Boolean EDADMAXIMAIsKey(){
				    return false;
				}
				public Integer EDADMAXIMALength(){
				    return 0;
				}
				public Integer EDADMAXIMAPrecision(){
				    return null;
				}
				public String EDADMAXIMADefault(){
				
					return "";
				
				}
				public String EDADMAXIMAComment(){
				
				    return "";
				
				}
				public String EDADMAXIMAPattern(){
				
					return "";
				
				}
				public String EDADMAXIMAOriginalDbColumnName(){
				
					return "EDADMAXIMA";
				
				}

				
			    public String RJERINGA;

				public String getRJERINGA () {
					return this.RJERINGA;
				}

				public Boolean RJERINGAIsNullable(){
				    return true;
				}
				public Boolean RJERINGAIsKey(){
				    return false;
				}
				public Integer RJERINGALength(){
				    return 2;
				}
				public Integer RJERINGAPrecision(){
				    return 0;
				}
				public String RJERINGADefault(){
				
					return null;
				
				}
				public String RJERINGAComment(){
				
				    return "";
				
				}
				public String RJERINGAPattern(){
				
					return "";
				
				}
				public String RJERINGAOriginalDbColumnName(){
				
					return "RJERINGA";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 10;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final insertaStruct other = (insertaStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(insertaStruct other) {

		other.ID = this.ID;
	            other.NOMBRE_PRODUCTO = this.NOMBRE_PRODUCTO;
	            other.NOMBRE_CUPS = this.NOMBRE_CUPS;
	            other.TESQUEMA = this.TESQUEMA;
	            other.TIEMPO_DOSIS = this.TIEMPO_DOSIS;
	            other.EDADMINIMA = this.EDADMINIMA;
	            other.EDADMAXIMA = this.EDADMAXIMA;
	            other.RJERINGA = this.RJERINGA;
	            other.OBSERVACIONES = this.OBSERVACIONES;
	            other.ESTADO = this.ESTADO;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            
	}

	public void copyKeysDataTo(insertaStruct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE_PRODUCTO = readString(dis);
					
					this.NOMBRE_CUPS = readString(dis);
					
					this.TESQUEMA = readString(dis);
					
						this.TIEMPO_DOSIS = (BigDecimal) dis.readObject();
					
						this.EDADMINIMA = (BigDecimal) dis.readObject();
					
						this.EDADMAXIMA = (BigDecimal) dis.readObject();
					
					this.RJERINGA = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE_PRODUCTO = readString(dis);
					
					this.NOMBRE_CUPS = readString(dis);
					
					this.TESQUEMA = readString(dis);
					
						this.TIEMPO_DOSIS = (BigDecimal) dis.readObject();
					
						this.EDADMINIMA = (BigDecimal) dis.readObject();
					
						this.EDADMAXIMA = (BigDecimal) dis.readObject();
					
					this.RJERINGA = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE_PRODUCTO,dos);
					
					// String
				
						writeString(this.NOMBRE_CUPS,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_DOSIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDADMINIMA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDADMAXIMA);
					
					// String
				
						writeString(this.RJERINGA,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE_PRODUCTO,dos);
					
					// String
				
						writeString(this.NOMBRE_CUPS,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_DOSIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDADMINIMA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDADMAXIMA);
					
					// String
				
						writeString(this.RJERINGA,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE_PRODUCTO="+NOMBRE_PRODUCTO);
		sb.append(",NOMBRE_CUPS="+NOMBRE_CUPS);
		sb.append(",TESQUEMA="+TESQUEMA);
		sb.append(",TIEMPO_DOSIS="+String.valueOf(TIEMPO_DOSIS));
		sb.append(",EDADMINIMA="+String.valueOf(EDADMINIMA));
		sb.append(",EDADMAXIMA="+String.valueOf(EDADMAXIMA));
		sb.append(",RJERINGA="+RJERINGA);
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insertaStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class actualizaStruct implements routines.system.IPersistableRow<actualizaStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE_PRODUCTO;

				public String getNOMBRE_PRODUCTO () {
					return this.NOMBRE_PRODUCTO;
				}

				public Boolean NOMBRE_PRODUCTOIsNullable(){
				    return false;
				}
				public Boolean NOMBRE_PRODUCTOIsKey(){
				    return false;
				}
				public Integer NOMBRE_PRODUCTOLength(){
				    return 350;
				}
				public Integer NOMBRE_PRODUCTOPrecision(){
				    return 0;
				}
				public String NOMBRE_PRODUCTODefault(){
				
					return null;
				
				}
				public String NOMBRE_PRODUCTOComment(){
				
				    return "";
				
				}
				public String NOMBRE_PRODUCTOPattern(){
				
					return "";
				
				}
				public String NOMBRE_PRODUCTOOriginalDbColumnName(){
				
					return "NOMBRE_PRODUCTO";
				
				}

				
			    public String NOMBRE_CUPS;

				public String getNOMBRE_CUPS () {
					return this.NOMBRE_CUPS;
				}

				public Boolean NOMBRE_CUPSIsNullable(){
				    return false;
				}
				public Boolean NOMBRE_CUPSIsKey(){
				    return false;
				}
				public Integer NOMBRE_CUPSLength(){
				    return 500;
				}
				public Integer NOMBRE_CUPSPrecision(){
				    return 0;
				}
				public String NOMBRE_CUPSDefault(){
				
					return null;
				
				}
				public String NOMBRE_CUPSComment(){
				
				    return "";
				
				}
				public String NOMBRE_CUPSPattern(){
				
					return "";
				
				}
				public String NOMBRE_CUPSOriginalDbColumnName(){
				
					return "NOMBRE_CUPS";
				
				}

				
			    public String TESQUEMA;

				public String getTESQUEMA () {
					return this.TESQUEMA;
				}

				public Boolean TESQUEMAIsNullable(){
				    return false;
				}
				public Boolean TESQUEMAIsKey(){
				    return false;
				}
				public Integer TESQUEMALength(){
				    return 10;
				}
				public Integer TESQUEMAPrecision(){
				    return 0;
				}
				public String TESQUEMADefault(){
				
					return null;
				
				}
				public String TESQUEMAComment(){
				
				    return "";
				
				}
				public String TESQUEMAPattern(){
				
					return "";
				
				}
				public String TESQUEMAOriginalDbColumnName(){
				
					return "TESQUEMA";
				
				}

				
			    public BigDecimal TIEMPO_DOSIS;

				public BigDecimal getTIEMPO_DOSIS () {
					return this.TIEMPO_DOSIS;
				}

				public Boolean TIEMPO_DOSISIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_DOSISIsKey(){
				    return false;
				}
				public Integer TIEMPO_DOSISLength(){
				    return 0;
				}
				public Integer TIEMPO_DOSISPrecision(){
				    return null;
				}
				public String TIEMPO_DOSISDefault(){
				
					return "";
				
				}
				public String TIEMPO_DOSISComment(){
				
				    return "";
				
				}
				public String TIEMPO_DOSISPattern(){
				
					return "";
				
				}
				public String TIEMPO_DOSISOriginalDbColumnName(){
				
					return "TIEMPO_DOSIS";
				
				}

				
			    public BigDecimal EDADMINIMA;

				public BigDecimal getEDADMINIMA () {
					return this.EDADMINIMA;
				}

				public Boolean EDADMINIMAIsNullable(){
				    return true;
				}
				public Boolean EDADMINIMAIsKey(){
				    return false;
				}
				public Integer EDADMINIMALength(){
				    return 0;
				}
				public Integer EDADMINIMAPrecision(){
				    return null;
				}
				public String EDADMINIMADefault(){
				
					return "";
				
				}
				public String EDADMINIMAComment(){
				
				    return "";
				
				}
				public String EDADMINIMAPattern(){
				
					return "";
				
				}
				public String EDADMINIMAOriginalDbColumnName(){
				
					return "EDADMINIMA";
				
				}

				
			    public BigDecimal EDADMAXIMA;

				public BigDecimal getEDADMAXIMA () {
					return this.EDADMAXIMA;
				}

				public Boolean EDADMAXIMAIsNullable(){
				    return true;
				}
				public Boolean EDADMAXIMAIsKey(){
				    return false;
				}
				public Integer EDADMAXIMALength(){
				    return 0;
				}
				public Integer EDADMAXIMAPrecision(){
				    return null;
				}
				public String EDADMAXIMADefault(){
				
					return "";
				
				}
				public String EDADMAXIMAComment(){
				
				    return "";
				
				}
				public String EDADMAXIMAPattern(){
				
					return "";
				
				}
				public String EDADMAXIMAOriginalDbColumnName(){
				
					return "EDADMAXIMA";
				
				}

				
			    public String RJERINGA;

				public String getRJERINGA () {
					return this.RJERINGA;
				}

				public Boolean RJERINGAIsNullable(){
				    return true;
				}
				public Boolean RJERINGAIsKey(){
				    return false;
				}
				public Integer RJERINGALength(){
				    return 2;
				}
				public Integer RJERINGAPrecision(){
				    return 0;
				}
				public String RJERINGADefault(){
				
					return null;
				
				}
				public String RJERINGAComment(){
				
				    return "";
				
				}
				public String RJERINGAPattern(){
				
					return "";
				
				}
				public String RJERINGAOriginalDbColumnName(){
				
					return "RJERINGA";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 10;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final actualizaStruct other = (actualizaStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(actualizaStruct other) {

		other.ID = this.ID;
	            other.NOMBRE_PRODUCTO = this.NOMBRE_PRODUCTO;
	            other.NOMBRE_CUPS = this.NOMBRE_CUPS;
	            other.TESQUEMA = this.TESQUEMA;
	            other.TIEMPO_DOSIS = this.TIEMPO_DOSIS;
	            other.EDADMINIMA = this.EDADMINIMA;
	            other.EDADMAXIMA = this.EDADMAXIMA;
	            other.RJERINGA = this.RJERINGA;
	            other.OBSERVACIONES = this.OBSERVACIONES;
	            other.ESTADO = this.ESTADO;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            
	}

	public void copyKeysDataTo(actualizaStruct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE_PRODUCTO = readString(dis);
					
					this.NOMBRE_CUPS = readString(dis);
					
					this.TESQUEMA = readString(dis);
					
						this.TIEMPO_DOSIS = (BigDecimal) dis.readObject();
					
						this.EDADMINIMA = (BigDecimal) dis.readObject();
					
						this.EDADMAXIMA = (BigDecimal) dis.readObject();
					
					this.RJERINGA = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE_PRODUCTO = readString(dis);
					
					this.NOMBRE_CUPS = readString(dis);
					
					this.TESQUEMA = readString(dis);
					
						this.TIEMPO_DOSIS = (BigDecimal) dis.readObject();
					
						this.EDADMINIMA = (BigDecimal) dis.readObject();
					
						this.EDADMAXIMA = (BigDecimal) dis.readObject();
					
					this.RJERINGA = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE_PRODUCTO,dos);
					
					// String
				
						writeString(this.NOMBRE_CUPS,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_DOSIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDADMINIMA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDADMAXIMA);
					
					// String
				
						writeString(this.RJERINGA,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE_PRODUCTO,dos);
					
					// String
				
						writeString(this.NOMBRE_CUPS,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_DOSIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDADMINIMA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDADMAXIMA);
					
					// String
				
						writeString(this.RJERINGA,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE_PRODUCTO="+NOMBRE_PRODUCTO);
		sb.append(",NOMBRE_CUPS="+NOMBRE_CUPS);
		sb.append(",TESQUEMA="+TESQUEMA);
		sb.append(",TIEMPO_DOSIS="+String.valueOf(TIEMPO_DOSIS));
		sb.append(",EDADMINIMA="+String.valueOf(EDADMINIMA));
		sb.append(",EDADMAXIMA="+String.valueOf(EDADMAXIMA));
		sb.append(",RJERINGA="+RJERINGA);
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(actualizaStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE_PRODUCTO;

				public String getNOMBRE_PRODUCTO () {
					return this.NOMBRE_PRODUCTO;
				}

				public Boolean NOMBRE_PRODUCTOIsNullable(){
				    return false;
				}
				public Boolean NOMBRE_PRODUCTOIsKey(){
				    return false;
				}
				public Integer NOMBRE_PRODUCTOLength(){
				    return 350;
				}
				public Integer NOMBRE_PRODUCTOPrecision(){
				    return 0;
				}
				public String NOMBRE_PRODUCTODefault(){
				
					return null;
				
				}
				public String NOMBRE_PRODUCTOComment(){
				
				    return "";
				
				}
				public String NOMBRE_PRODUCTOPattern(){
				
					return "";
				
				}
				public String NOMBRE_PRODUCTOOriginalDbColumnName(){
				
					return "NOMBRE_PRODUCTO";
				
				}

				
			    public String NOMBRE_CUPS;

				public String getNOMBRE_CUPS () {
					return this.NOMBRE_CUPS;
				}

				public Boolean NOMBRE_CUPSIsNullable(){
				    return false;
				}
				public Boolean NOMBRE_CUPSIsKey(){
				    return false;
				}
				public Integer NOMBRE_CUPSLength(){
				    return 500;
				}
				public Integer NOMBRE_CUPSPrecision(){
				    return 0;
				}
				public String NOMBRE_CUPSDefault(){
				
					return null;
				
				}
				public String NOMBRE_CUPSComment(){
				
				    return "";
				
				}
				public String NOMBRE_CUPSPattern(){
				
					return "";
				
				}
				public String NOMBRE_CUPSOriginalDbColumnName(){
				
					return "NOMBRE_CUPS";
				
				}

				
			    public String TESQUEMA;

				public String getTESQUEMA () {
					return this.TESQUEMA;
				}

				public Boolean TESQUEMAIsNullable(){
				    return false;
				}
				public Boolean TESQUEMAIsKey(){
				    return false;
				}
				public Integer TESQUEMALength(){
				    return 10;
				}
				public Integer TESQUEMAPrecision(){
				    return 0;
				}
				public String TESQUEMADefault(){
				
					return null;
				
				}
				public String TESQUEMAComment(){
				
				    return "";
				
				}
				public String TESQUEMAPattern(){
				
					return "";
				
				}
				public String TESQUEMAOriginalDbColumnName(){
				
					return "TESQUEMA";
				
				}

				
			    public BigDecimal TIEMPO_DOSIS;

				public BigDecimal getTIEMPO_DOSIS () {
					return this.TIEMPO_DOSIS;
				}

				public Boolean TIEMPO_DOSISIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_DOSISIsKey(){
				    return false;
				}
				public Integer TIEMPO_DOSISLength(){
				    return 0;
				}
				public Integer TIEMPO_DOSISPrecision(){
				    return null;
				}
				public String TIEMPO_DOSISDefault(){
				
					return "";
				
				}
				public String TIEMPO_DOSISComment(){
				
				    return "";
				
				}
				public String TIEMPO_DOSISPattern(){
				
					return "";
				
				}
				public String TIEMPO_DOSISOriginalDbColumnName(){
				
					return "TIEMPO_DOSIS";
				
				}

				
			    public BigDecimal EDADMINIMA;

				public BigDecimal getEDADMINIMA () {
					return this.EDADMINIMA;
				}

				public Boolean EDADMINIMAIsNullable(){
				    return true;
				}
				public Boolean EDADMINIMAIsKey(){
				    return false;
				}
				public Integer EDADMINIMALength(){
				    return 0;
				}
				public Integer EDADMINIMAPrecision(){
				    return null;
				}
				public String EDADMINIMADefault(){
				
					return "";
				
				}
				public String EDADMINIMAComment(){
				
				    return "";
				
				}
				public String EDADMINIMAPattern(){
				
					return "";
				
				}
				public String EDADMINIMAOriginalDbColumnName(){
				
					return "EDADMINIMA";
				
				}

				
			    public BigDecimal EDADMAXIMA;

				public BigDecimal getEDADMAXIMA () {
					return this.EDADMAXIMA;
				}

				public Boolean EDADMAXIMAIsNullable(){
				    return true;
				}
				public Boolean EDADMAXIMAIsKey(){
				    return false;
				}
				public Integer EDADMAXIMALength(){
				    return 0;
				}
				public Integer EDADMAXIMAPrecision(){
				    return null;
				}
				public String EDADMAXIMADefault(){
				
					return "";
				
				}
				public String EDADMAXIMAComment(){
				
				    return "";
				
				}
				public String EDADMAXIMAPattern(){
				
					return "";
				
				}
				public String EDADMAXIMAOriginalDbColumnName(){
				
					return "EDADMAXIMA";
				
				}

				
			    public String RJERINGA;

				public String getRJERINGA () {
					return this.RJERINGA;
				}

				public Boolean RJERINGAIsNullable(){
				    return true;
				}
				public Boolean RJERINGAIsKey(){
				    return false;
				}
				public Integer RJERINGALength(){
				    return 2;
				}
				public Integer RJERINGAPrecision(){
				    return 0;
				}
				public String RJERINGADefault(){
				
					return null;
				
				}
				public String RJERINGAComment(){
				
				    return "";
				
				}
				public String RJERINGAPattern(){
				
					return "";
				
				}
				public String RJERINGAOriginalDbColumnName(){
				
					return "RJERINGA";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 10;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE_PRODUCTO = readString(dis);
					
					this.NOMBRE_CUPS = readString(dis);
					
					this.TESQUEMA = readString(dis);
					
						this.TIEMPO_DOSIS = (BigDecimal) dis.readObject();
					
						this.EDADMINIMA = (BigDecimal) dis.readObject();
					
						this.EDADMAXIMA = (BigDecimal) dis.readObject();
					
					this.RJERINGA = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE_PRODUCTO = readString(dis);
					
					this.NOMBRE_CUPS = readString(dis);
					
					this.TESQUEMA = readString(dis);
					
						this.TIEMPO_DOSIS = (BigDecimal) dis.readObject();
					
						this.EDADMINIMA = (BigDecimal) dis.readObject();
					
						this.EDADMAXIMA = (BigDecimal) dis.readObject();
					
					this.RJERINGA = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE_PRODUCTO,dos);
					
					// String
				
						writeString(this.NOMBRE_CUPS,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_DOSIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDADMINIMA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDADMAXIMA);
					
					// String
				
						writeString(this.RJERINGA,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE_PRODUCTO,dos);
					
					// String
				
						writeString(this.NOMBRE_CUPS,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_DOSIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDADMINIMA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDADMAXIMA);
					
					// String
				
						writeString(this.RJERINGA,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE_PRODUCTO="+NOMBRE_PRODUCTO);
		sb.append(",NOMBRE_CUPS="+NOMBRE_CUPS);
		sb.append(",TESQUEMA="+TESQUEMA);
		sb.append(",TIEMPO_DOSIS="+String.valueOf(TIEMPO_DOSIS));
		sb.append(",EDADMINIMA="+String.valueOf(EDADMINIMA));
		sb.append(",EDADMAXIMA="+String.valueOf(EDADMAXIMA));
		sb.append(",RJERINGA="+RJERINGA);
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_1Struct implements routines.system.IPersistableRow<after_tOracleInput_1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE_PRODUCTO;

				public String getNOMBRE_PRODUCTO () {
					return this.NOMBRE_PRODUCTO;
				}

				public Boolean NOMBRE_PRODUCTOIsNullable(){
				    return false;
				}
				public Boolean NOMBRE_PRODUCTOIsKey(){
				    return false;
				}
				public Integer NOMBRE_PRODUCTOLength(){
				    return 350;
				}
				public Integer NOMBRE_PRODUCTOPrecision(){
				    return 0;
				}
				public String NOMBRE_PRODUCTODefault(){
				
					return null;
				
				}
				public String NOMBRE_PRODUCTOComment(){
				
				    return "";
				
				}
				public String NOMBRE_PRODUCTOPattern(){
				
					return "";
				
				}
				public String NOMBRE_PRODUCTOOriginalDbColumnName(){
				
					return "NOMBRE_PRODUCTO";
				
				}

				
			    public String NOMBRE_CUPS;

				public String getNOMBRE_CUPS () {
					return this.NOMBRE_CUPS;
				}

				public Boolean NOMBRE_CUPSIsNullable(){
				    return false;
				}
				public Boolean NOMBRE_CUPSIsKey(){
				    return false;
				}
				public Integer NOMBRE_CUPSLength(){
				    return 500;
				}
				public Integer NOMBRE_CUPSPrecision(){
				    return 0;
				}
				public String NOMBRE_CUPSDefault(){
				
					return null;
				
				}
				public String NOMBRE_CUPSComment(){
				
				    return "";
				
				}
				public String NOMBRE_CUPSPattern(){
				
					return "";
				
				}
				public String NOMBRE_CUPSOriginalDbColumnName(){
				
					return "NOMBRE_CUPS";
				
				}

				
			    public String TESQUEMA;

				public String getTESQUEMA () {
					return this.TESQUEMA;
				}

				public Boolean TESQUEMAIsNullable(){
				    return false;
				}
				public Boolean TESQUEMAIsKey(){
				    return false;
				}
				public Integer TESQUEMALength(){
				    return 10;
				}
				public Integer TESQUEMAPrecision(){
				    return 0;
				}
				public String TESQUEMADefault(){
				
					return null;
				
				}
				public String TESQUEMAComment(){
				
				    return "";
				
				}
				public String TESQUEMAPattern(){
				
					return "";
				
				}
				public String TESQUEMAOriginalDbColumnName(){
				
					return "TESQUEMA";
				
				}

				
			    public BigDecimal TIEMPO_DOSIS;

				public BigDecimal getTIEMPO_DOSIS () {
					return this.TIEMPO_DOSIS;
				}

				public Boolean TIEMPO_DOSISIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_DOSISIsKey(){
				    return false;
				}
				public Integer TIEMPO_DOSISLength(){
				    return 0;
				}
				public Integer TIEMPO_DOSISPrecision(){
				    return null;
				}
				public String TIEMPO_DOSISDefault(){
				
					return "";
				
				}
				public String TIEMPO_DOSISComment(){
				
				    return "";
				
				}
				public String TIEMPO_DOSISPattern(){
				
					return "";
				
				}
				public String TIEMPO_DOSISOriginalDbColumnName(){
				
					return "TIEMPO_DOSIS";
				
				}

				
			    public BigDecimal EDADMINIMA;

				public BigDecimal getEDADMINIMA () {
					return this.EDADMINIMA;
				}

				public Boolean EDADMINIMAIsNullable(){
				    return true;
				}
				public Boolean EDADMINIMAIsKey(){
				    return false;
				}
				public Integer EDADMINIMALength(){
				    return 0;
				}
				public Integer EDADMINIMAPrecision(){
				    return null;
				}
				public String EDADMINIMADefault(){
				
					return "";
				
				}
				public String EDADMINIMAComment(){
				
				    return "";
				
				}
				public String EDADMINIMAPattern(){
				
					return "";
				
				}
				public String EDADMINIMAOriginalDbColumnName(){
				
					return "EDADMINIMA";
				
				}

				
			    public BigDecimal EDADMAXIMA;

				public BigDecimal getEDADMAXIMA () {
					return this.EDADMAXIMA;
				}

				public Boolean EDADMAXIMAIsNullable(){
				    return true;
				}
				public Boolean EDADMAXIMAIsKey(){
				    return false;
				}
				public Integer EDADMAXIMALength(){
				    return 0;
				}
				public Integer EDADMAXIMAPrecision(){
				    return null;
				}
				public String EDADMAXIMADefault(){
				
					return "";
				
				}
				public String EDADMAXIMAComment(){
				
				    return "";
				
				}
				public String EDADMAXIMAPattern(){
				
					return "";
				
				}
				public String EDADMAXIMAOriginalDbColumnName(){
				
					return "EDADMAXIMA";
				
				}

				
			    public String RJERINGA;

				public String getRJERINGA () {
					return this.RJERINGA;
				}

				public Boolean RJERINGAIsNullable(){
				    return true;
				}
				public Boolean RJERINGAIsKey(){
				    return false;
				}
				public Integer RJERINGALength(){
				    return 2;
				}
				public Integer RJERINGAPrecision(){
				    return 0;
				}
				public String RJERINGADefault(){
				
					return null;
				
				}
				public String RJERINGAComment(){
				
				    return "";
				
				}
				public String RJERINGAPattern(){
				
					return "";
				
				}
				public String RJERINGAOriginalDbColumnName(){
				
					return "RJERINGA";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 10;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE_PRODUCTO = readString(dis);
					
					this.NOMBRE_CUPS = readString(dis);
					
					this.TESQUEMA = readString(dis);
					
						this.TIEMPO_DOSIS = (BigDecimal) dis.readObject();
					
						this.EDADMINIMA = (BigDecimal) dis.readObject();
					
						this.EDADMAXIMA = (BigDecimal) dis.readObject();
					
					this.RJERINGA = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE_PRODUCTO = readString(dis);
					
					this.NOMBRE_CUPS = readString(dis);
					
					this.TESQUEMA = readString(dis);
					
						this.TIEMPO_DOSIS = (BigDecimal) dis.readObject();
					
						this.EDADMINIMA = (BigDecimal) dis.readObject();
					
						this.EDADMAXIMA = (BigDecimal) dis.readObject();
					
					this.RJERINGA = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE_PRODUCTO,dos);
					
					// String
				
						writeString(this.NOMBRE_CUPS,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_DOSIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDADMINIMA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDADMAXIMA);
					
					// String
				
						writeString(this.RJERINGA,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE_PRODUCTO,dos);
					
					// String
				
						writeString(this.NOMBRE_CUPS,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_DOSIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDADMINIMA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDADMAXIMA);
					
					// String
				
						writeString(this.RJERINGA,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE_PRODUCTO="+NOMBRE_PRODUCTO);
		sb.append(",NOMBRE_CUPS="+NOMBRE_CUPS);
		sb.append(",TESQUEMA="+TESQUEMA);
		sb.append(",TIEMPO_DOSIS="+String.valueOf(TIEMPO_DOSIS));
		sb.append(",EDADMINIMA="+String.valueOf(EDADMINIMA));
		sb.append(",EDADMAXIMA="+String.valueOf(EDADMAXIMA));
		sb.append(",RJERINGA="+RJERINGA);
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_2Process(globalMap);
		tOracleInput_3Process(globalMap);

		row1Struct row1 = new row1Struct();
insertaStruct inserta = new insertaStruct();
actualizaStruct actualiza = new actualizaStruct();





	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"inserta");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
                    String driverClass_tOracleOutput_1 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_1);
                String url_tOracleOutput_1 = null;
                    url_tOracleOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_1 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_1 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_1 = decryptedPassword_tOracleOutput_1;
                dbschema_tOracleOutput_1 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_1 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_1.put("user",dbUser_tOracleOutput_1);
                    atnParamsPrope_tOracleOutput_1.put("password",dbPwd_tOracleOutput_1);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_1.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_1 = java.sql.DriverManager.getConnection(url_tOracleOutput_1, atnParamsPrope_tOracleOutput_1);
        resourceMap.put("conn_tOracleOutput_1", conn_tOracleOutput_1);
            conn_tOracleOutput_1.setAutoCommit(false);
            int commitEvery_tOracleOutput_1 = 10000;
            int commitCounter_tOracleOutput_1 = 0;
        int batchSize_tOracleOutput_1 = 10000;
        int batchSizeCounter_tOracleOutput_1=0;
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("BVAC_BIOLOGICOS");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("BVAC_BIOLOGICOS");
        }
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (ID,NOMBRE_PRODUCTO,NOMBRE_CUPS,TESQUEMA,TIEMPO_DOSIS,EDADMINIMA,EDADMAXIMA,RJERINGA,OBSERVACIONES,ESTADO,ESTREGISTRO_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                        resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */




	
	/**
	 * [tOracleOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_2", false);
		start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"actualiza");
					}
				
		int tos_count_tOracleOutput_2 = 0;
		






        int updateKeyCount_tOracleOutput_2 = 1;
        if(updateKeyCount_tOracleOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_2 == 11 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_2 = 0;
    int nb_line_update_tOracleOutput_2 = 0;
    int nb_line_inserted_tOracleOutput_2 = 0;
    int nb_line_deleted_tOracleOutput_2 = 0;
    int nb_line_rejected_tOracleOutput_2 = 0;

    int tmp_batchUpdateCount_tOracleOutput_2 = 0;

    int deletedCount_tOracleOutput_2=0;
    int updatedCount_tOracleOutput_2=0;
    int insertedCount_tOracleOutput_2=0;
    int rowsToCommitCount_tOracleOutput_2=0;
    int rejectedCount_tOracleOutput_2=0;

    boolean whetherReject_tOracleOutput_2 = false;

    java.sql.Connection conn_tOracleOutput_2 = null;

    //optional table
    String dbschema_tOracleOutput_2 = null;
    String tableName_tOracleOutput_2 = null;
                    String driverClass_tOracleOutput_2 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_2);
                String url_tOracleOutput_2 = null;
                    url_tOracleOutput_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_2 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_2 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_2 = decryptedPassword_tOracleOutput_2;
                dbschema_tOracleOutput_2 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_2 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_2.put("user",dbUser_tOracleOutput_2);
                    atnParamsPrope_tOracleOutput_2.put("password",dbPwd_tOracleOutput_2);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_2.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_2 = java.sql.DriverManager.getConnection(url_tOracleOutput_2, atnParamsPrope_tOracleOutput_2);
        resourceMap.put("conn_tOracleOutput_2", conn_tOracleOutput_2);
            conn_tOracleOutput_2.setAutoCommit(false);
            int commitEvery_tOracleOutput_2 = 10000;
            int commitCounter_tOracleOutput_2 = 0;
        int batchSize_tOracleOutput_2 = 10000;
        int batchSizeCounter_tOracleOutput_2=0;
        int count_tOracleOutput_2=0;

        if(dbschema_tOracleOutput_2 == null || dbschema_tOracleOutput_2.trim().length() == 0) {
            tableName_tOracleOutput_2 = ("BVAC_BIOLOGICOS");
        } else {
            tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "." + ("BVAC_BIOLOGICOS");
        }
                String update_tOracleOutput_2 = "UPDATE " + tableName_tOracleOutput_2 + " SET NOMBRE_PRODUCTO = ?,NOMBRE_CUPS = ?,TESQUEMA = ?,TIEMPO_DOSIS = ?,EDADMINIMA = ?,EDADMAXIMA = ?,RJERINGA = ?,OBSERVACIONES = ?,ESTADO = ?,ESTREGISTRO_ID = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(update_tOracleOutput_2);
                resourceMap.put("pstmt_tOracleOutput_2", pstmt_tOracleOutput_2);





 



/**
 * [tOracleOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
insertaStruct inserta_tmp = new insertaStruct();
actualizaStruct actualiza_tmp = new actualizaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_1.setFetchSize(10000);


		    String dbquery_tOracleInput_1 = "SELECT  BIO.ID\n        ,GE.DESCRIPCION AS NOMBRE_PRODUCTO\n        ,CU.NOMBRE AS NOMBRE_CUPS\n        ,BIO.TVACUNA AS "
+"TESQUEMA\n        ,BIO.TIEMPODOSIS AS TIEMPO_DOSIS        \n        ,BIO.EDADMINIMA\n        ,BIO.EDADMAXIMA\n        ,B"
+"IO.RJERINGA\n        ,BIO.OBSERVACION AS OBSERVACIONES\n        ,BIO.ESTADO\n        ,BIO.ESTREGISTRO_ID\nFROM VAC_BIOLO"
+"GICOS BIO\nINNER JOIN MED_GENERICOS GE ON GE.ID = BIO.GENERICOS_ID\nINNER JOIN GEN_CUPS CU ON CU.ID = BIO.CUPS_ID";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row1.ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row1.ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row1.NOMBRE_PRODUCTO = null;
							} else {
	                         		
        	row1.NOMBRE_PRODUCTO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row1.NOMBRE_CUPS = null;
							} else {
	                         		
        	row1.NOMBRE_CUPS = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 4) {
								row1.TESQUEMA = null;
							} else {
	                         		
        	row1.TESQUEMA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 5) {
								row1.TIEMPO_DOSIS = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(5) != null) {
						row1.TIEMPO_DOSIS = rs_tOracleInput_1.getBigDecimal(5);
					} else {
				
						row1.TIEMPO_DOSIS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 6) {
								row1.EDADMINIMA = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(6) != null) {
						row1.EDADMINIMA = rs_tOracleInput_1.getBigDecimal(6);
					} else {
				
						row1.EDADMINIMA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 7) {
								row1.EDADMAXIMA = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(7) != null) {
						row1.EDADMAXIMA = rs_tOracleInput_1.getBigDecimal(7);
					} else {
				
						row1.EDADMAXIMA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 8) {
								row1.RJERINGA = null;
							} else {
	                         		
        	row1.RJERINGA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 9) {
								row1.OBSERVACIONES = null;
							} else {
	                         		
        	row1.OBSERVACIONES = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 10) {
								row1.ESTADO = null;
							} else {
	                         		
        	row1.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 11) {
								row1.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(11) != null) {
						row1.ESTREGISTRO_ID = rs_tOracleInput_1.getBigDecimal(11);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row2Struct row2 = null;
					
						row3Struct row3 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row2HashKey.ID = row1.ID ;
                        		    		
                        		    		    row2HashKey.NOMBRE_PRODUCTO = row1.NOMBRE_PRODUCTO ;
                        		    		
                        		    		    row2HashKey.NOMBRE_CUPS = row1.NOMBRE_CUPS ;
                        		    		
                        		    		    row2HashKey.TESQUEMA = row1.TESQUEMA ;
                        		    		
                        		    		    row2HashKey.TIEMPO_DOSIS = row1.TIEMPO_DOSIS ;
                        		    		
                        		    		    row2HashKey.EDADMINIMA = row1.EDADMINIMA ;
                        		    		
                        		    		    row2HashKey.EDADMAXIMA = row1.EDADMAXIMA ;
                        		    		
                        		    		    row2HashKey.RJERINGA = row1.RJERINGA ;
                        		    		
                        		    		    row2HashKey.OBSERVACIONES = row1.OBSERVACIONES ;
                        		    		
                        		    		    row2HashKey.ESTADO = row1.ESTADO ;
                        		    		
                        		    		    row2HashKey.ESTREGISTRO_ID = row1.ESTREGISTRO_ID ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.ID = '" + row2HashKey.ID + "', row2.NOMBRE_PRODUCTO = '" + row2HashKey.NOMBRE_PRODUCTO + "', row2.NOMBRE_CUPS = '" + row2HashKey.NOMBRE_CUPS + "', row2.TESQUEMA = '" + row2HashKey.TESQUEMA + "', row2.TIEMPO_DOSIS = '" + row2HashKey.TIEMPO_DOSIS + "', row2.EDADMINIMA = '" + row2HashKey.EDADMINIMA + "', row2.EDADMAXIMA = '" + row2HashKey.EDADMAXIMA + "', row2.RJERINGA = '" + row2HashKey.RJERINGA + "', row2.OBSERVACIONES = '" + row2HashKey.OBSERVACIONES + "', row2.ESTADO = '" + row2HashKey.ESTADO + "', row2.ESTREGISTRO_ID = '" + row2HashKey.ESTREGISTRO_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row3HashKey.ID = row1.ID ;
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.ID = '" + row3HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								 
							
							
								if (tHash_Lookup_row3 !=null && tHash_Lookup_row3.hasNext()) { // G 099
								
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							
							
								} // G 099
							
							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

inserta = null;
actualiza = null;


// # Output table : 'inserta'
// # Filter conditions 
if( 

row3.ID == null

 ) {
inserta_tmp.ID = row1.ID ;
inserta_tmp.NOMBRE_PRODUCTO = row1.NOMBRE_PRODUCTO ;
inserta_tmp.NOMBRE_CUPS = row1.NOMBRE_CUPS ;
inserta_tmp.TESQUEMA = row1.TESQUEMA ;
inserta_tmp.TIEMPO_DOSIS = row1.TIEMPO_DOSIS ;
inserta_tmp.EDADMINIMA = row1.EDADMINIMA ;
inserta_tmp.EDADMAXIMA = row1.EDADMAXIMA ;
inserta_tmp.RJERINGA = row1.RJERINGA ;
inserta_tmp.OBSERVACIONES = row1.OBSERVACIONES ;
inserta_tmp.ESTADO = row1.ESTADO ;
inserta_tmp.ESTREGISTRO_ID = row1.ESTREGISTRO_ID ;
inserta = inserta_tmp;
} // closing filter/reject

// # Output table : 'actualiza'
// # Filter conditions 
if( 

row2.ID == null && row3.ID != null

 ) {
actualiza_tmp.ID = row1.ID ;
actualiza_tmp.NOMBRE_PRODUCTO = row1.NOMBRE_PRODUCTO ;
actualiza_tmp.NOMBRE_CUPS = row1.NOMBRE_CUPS ;
actualiza_tmp.TESQUEMA = row1.TESQUEMA ;
actualiza_tmp.TIEMPO_DOSIS = row1.TIEMPO_DOSIS ;
actualiza_tmp.EDADMINIMA = row1.EDADMINIMA ;
actualiza_tmp.EDADMAXIMA = row1.EDADMAXIMA ;
actualiza_tmp.RJERINGA = row1.RJERINGA ;
actualiza_tmp.OBSERVACIONES = row1.OBSERVACIONES ;
actualiza_tmp.ESTADO = row1.ESTADO ;
actualiza_tmp.ESTREGISTRO_ID = row1.ESTREGISTRO_ID ;
actualiza = actualiza_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "inserta"
if(inserta != null) { 



	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"inserta"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                        pstmt_tOracleOutput_1.setBigDecimal(1, inserta.ID);

                        if(inserta.NOMBRE_PRODUCTO == null) {
pstmt_tOracleOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(2, inserta.NOMBRE_PRODUCTO);
}

                        if(inserta.NOMBRE_CUPS == null) {
pstmt_tOracleOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(3, inserta.NOMBRE_CUPS);
}

                        if(inserta.TESQUEMA == null) {
pstmt_tOracleOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(4, inserta.TESQUEMA);
}

                        pstmt_tOracleOutput_1.setBigDecimal(5, inserta.TIEMPO_DOSIS);

                        pstmt_tOracleOutput_1.setBigDecimal(6, inserta.EDADMINIMA);

                        pstmt_tOracleOutput_1.setBigDecimal(7, inserta.EDADMAXIMA);

                        if(inserta.RJERINGA == null) {
pstmt_tOracleOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(8, inserta.RJERINGA);
}

                        if(inserta.OBSERVACIONES == null) {
pstmt_tOracleOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(9, inserta.OBSERVACIONES);
}

                        if(inserta.ESTADO == null) {
pstmt_tOracleOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(10, inserta.ESTADO);
}

                        pstmt_tOracleOutput_1.setBigDecimal(11, inserta.ESTREGISTRO_ID);

                pstmt_tOracleOutput_1.addBatch();
                nb_line_tOracleOutput_1++;
                batchSizeCounter_tOracleOutput_1++;
            if (batchSize_tOracleOutput_1 > 0 &&  batchSize_tOracleOutput_1 <= batchSizeCounter_tOracleOutput_1) {
                try {
                    pstmt_tOracleOutput_1.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
			        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
			    	String errormessage_tOracleOutput_1;
					if (ne_tOracleOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
						errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
					}else{
						errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_1);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
                    insertedCount_tOracleOutput_1
                += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                batchSizeCounter_tOracleOutput_1 = 0;
            }
                commitCounter_tOracleOutput_1++;
                if(commitEvery_tOracleOutput_1 <= commitCounter_tOracleOutput_1) {
                    if(batchSizeCounter_tOracleOutput_1 > 0) {
                        try {
                            pstmt_tOracleOutput_1.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
					        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
					    	String errormessage_tOracleOutput_1;
							if (ne_tOracleOutput_1 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
								errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
							}else{
								errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_1);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
                            insertedCount_tOracleOutput_1
                        += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                        rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    }
                    conn_tOracleOutput_1.commit();
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_1 = 0;
                    }
                    commitCounter_tOracleOutput_1=0;
                    	batchSizeCounter_tOracleOutput_1=0;
                }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */

} // End of branch "inserta"




// Start of branch "actualiza"
if(actualiza != null) { 



	
	/**
	 * [tOracleOutput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"actualiza"
						
						);
					}
					



        whetherReject_tOracleOutput_2 = false;
                    if(actualiza.NOMBRE_PRODUCTO == null) {
pstmt_tOracleOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(1, actualiza.NOMBRE_PRODUCTO);
}

                    if(actualiza.NOMBRE_CUPS == null) {
pstmt_tOracleOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(2, actualiza.NOMBRE_CUPS);
}

                    if(actualiza.TESQUEMA == null) {
pstmt_tOracleOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(3, actualiza.TESQUEMA);
}

                    pstmt_tOracleOutput_2.setBigDecimal(4, actualiza.TIEMPO_DOSIS);

                    pstmt_tOracleOutput_2.setBigDecimal(5, actualiza.EDADMINIMA);

                    pstmt_tOracleOutput_2.setBigDecimal(6, actualiza.EDADMAXIMA);

                    if(actualiza.RJERINGA == null) {
pstmt_tOracleOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(7, actualiza.RJERINGA);
}

                    if(actualiza.OBSERVACIONES == null) {
pstmt_tOracleOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(8, actualiza.OBSERVACIONES);
}

                    if(actualiza.ESTADO == null) {
pstmt_tOracleOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(9, actualiza.ESTADO);
}

                    pstmt_tOracleOutput_2.setBigDecimal(10, actualiza.ESTREGISTRO_ID);


                    pstmt_tOracleOutput_2.setBigDecimal(11 + count_tOracleOutput_2, actualiza.ID);

                pstmt_tOracleOutput_2.addBatch();
                nb_line_tOracleOutput_2++;
                batchSizeCounter_tOracleOutput_2++;
            if (batchSize_tOracleOutput_2 > 0 &&  batchSize_tOracleOutput_2 <= batchSizeCounter_tOracleOutput_2) {
                try {
                    pstmt_tOracleOutput_2.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
			        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
			    	String errormessage_tOracleOutput_2;
					if (ne_tOracleOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
						errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
					}else{
						errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_2);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
                    updatedCount_tOracleOutput_2
                += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                batchSizeCounter_tOracleOutput_2 = 0;
            }
                commitCounter_tOracleOutput_2++;
                if(commitEvery_tOracleOutput_2 <= commitCounter_tOracleOutput_2) {
                    if(batchSizeCounter_tOracleOutput_2 > 0) {
                        try {
                            pstmt_tOracleOutput_2.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
					        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
					    	String errormessage_tOracleOutput_2;
							if (ne_tOracleOutput_2 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
								errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
							}else{
								errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_2);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
                            updatedCount_tOracleOutput_2
                        += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                        rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_2 != 0){
                    	
                    }
                    conn_tOracleOutput_2.commit();
                    if(rowsToCommitCount_tOracleOutput_2 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_2 = 0;
                    }
                    commitCounter_tOracleOutput_2=0;
                    	batchSizeCounter_tOracleOutput_2=0;
                }

 


	tos_count_tOracleOutput_2++;

/**
 * [tOracleOutput_2 main ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_end ] stop
 */

} // End of branch "actualiza"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_1 > 0) {
            try {
            	if (pstmt_tOracleOutput_1 != null) {
					
					pstmt_tOracleOutput_1.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
		        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
		    	String errormessage_tOracleOutput_1;
				if (ne_tOracleOutput_1 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
					errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
				}else{
					errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_1);
            	
        	}
        	if (pstmt_tOracleOutput_1 != null) {
            	tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_1
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
				rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
            }
        }
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
		}
		conn_tOracleOutput_1.commit();
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
			rowsToCommitCount_tOracleOutput_1 = 0;
		}
		commitCounter_tOracleOutput_1 = 0;
		
		
		conn_tOracleOutput_1 .close();
		
		resourceMap.put("finish_tOracleOutput_1", true);
   	

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"inserta");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */




	
	/**
	 * [tOracleOutput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_2 > 0) {
            try {
            	if (pstmt_tOracleOutput_2 != null) {
					
					pstmt_tOracleOutput_2.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
		        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
		    	String errormessage_tOracleOutput_2;
				if (ne_tOracleOutput_2 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
					errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
				}else{
					errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_2);
            	
        	}
        	if (pstmt_tOracleOutput_2 != null) {
            	tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_2
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
				rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
            }
        }
        if(pstmt_tOracleOutput_2 != null) {
			
				pstmt_tOracleOutput_2.close();
				resourceMap.remove("pstmt_tOracleOutput_2");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_2", true);
		if(commitCounter_tOracleOutput_2 > 0 && rowsToCommitCount_tOracleOutput_2 != 0) {
			
		}
		conn_tOracleOutput_2.commit();
		if(commitCounter_tOracleOutput_2 > 0 && rowsToCommitCount_tOracleOutput_2 != 0) {
			
			rowsToCommitCount_tOracleOutput_2 = 0;
		}
		commitCounter_tOracleOutput_2 = 0;
		
		
		conn_tOracleOutput_2 .close();
		
		resourceMap.put("finish_tOracleOutput_2", true);
   	

	
	nb_line_deleted_tOracleOutput_2=nb_line_deleted_tOracleOutput_2+ deletedCount_tOracleOutput_2;
	nb_line_update_tOracleOutput_2=nb_line_update_tOracleOutput_2 + updatedCount_tOracleOutput_2;
	nb_line_inserted_tOracleOutput_2=nb_line_inserted_tOracleOutput_2 + insertedCount_tOracleOutput_2;
	nb_line_rejected_tOracleOutput_2=nb_line_rejected_tOracleOutput_2 + rejectedCount_tOracleOutput_2;
	
        globalMap.put("tOracleOutput_2_NB_LINE",nb_line_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",nb_line_update_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"actualiza");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_2", true);
end_Hash.put("tOracleOutput_2", System.currentTimeMillis());




/**
 * [tOracleOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk19", 0, "ok");
								} 
							
							tOracleInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_1") == null){
            java.sql.Connection ctn_tOracleOutput_1 = null;
            if((ctn_tOracleOutput_1 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_1")) != null){
                try {
                    ctn_tOracleOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_1) {
                    String errorMessage_tOracleOutput_1 = "failed to close the connection in tOracleOutput_1 :" + sqlEx_tOracleOutput_1.getMessage();
                    System.err.println(errorMessage_tOracleOutput_1);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */




	
	/**
	 * [tOracleOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_2 = null;
                if ((pstmtToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_2")) != null) {
                    pstmtToClose_tOracleOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_2") == null){
            java.sql.Connection ctn_tOracleOutput_2 = null;
            if((ctn_tOracleOutput_2 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_2")) != null){
                try {
                    ctn_tOracleOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_2) {
                    String errorMessage_tOracleOutput_2 = "failed to close the connection in tOracleOutput_2 :" + sqlEx_tOracleOutput_2.getMessage();
                    System.err.println(errorMessage_tOracleOutput_2);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class Inserta1Struct implements routines.system.IPersistableRow<Inserta1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 200;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 10;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Inserta1Struct other = (Inserta1Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Inserta1Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.ESTADO = this.ESTADO;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            
	}

	public void copyKeysDataTo(Inserta1Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class actualiza1Struct implements routines.system.IPersistableRow<actualiza1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 200;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 10;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final actualiza1Struct other = (actualiza1Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(actualiza1Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.ESTADO = this.ESTADO;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            
	}

	public void copyKeysDataTo(actualiza1Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(actualiza1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 200;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 10;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_4Struct implements routines.system.IPersistableRow<after_tOracleInput_4Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 200;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 10;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_5Process(globalMap);
		tOracleInput_7Process(globalMap);

		row4Struct row4 = new row4Struct();
Inserta1Struct Inserta1 = new Inserta1Struct();
actualiza1Struct actualiza1 = new actualiza1Struct();





	
	/**
	 * [tOracleOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_4", false);
		start_Hash.put("tOracleOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta1");
					}
				
		int tos_count_tOracleOutput_4 = 0;
		






    
    int nb_line_tOracleOutput_4 = 0;
    int nb_line_update_tOracleOutput_4 = 0;
    int nb_line_inserted_tOracleOutput_4 = 0;
    int nb_line_deleted_tOracleOutput_4 = 0;
    int nb_line_rejected_tOracleOutput_4 = 0;

    int tmp_batchUpdateCount_tOracleOutput_4 = 0;

    int deletedCount_tOracleOutput_4=0;
    int updatedCount_tOracleOutput_4=0;
    int insertedCount_tOracleOutput_4=0;
    int rowsToCommitCount_tOracleOutput_4=0;
    int rejectedCount_tOracleOutput_4=0;

    boolean whetherReject_tOracleOutput_4 = false;

    java.sql.Connection conn_tOracleOutput_4 = null;

    //optional table
    String dbschema_tOracleOutput_4 = null;
    String tableName_tOracleOutput_4 = null;
                    String driverClass_tOracleOutput_4 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_4);
                String url_tOracleOutput_4 = null;
                    url_tOracleOutput_4 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_4 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_4 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_4 = decryptedPassword_tOracleOutput_4;
                dbschema_tOracleOutput_4 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_4 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_4.put("user",dbUser_tOracleOutput_4);
                    atnParamsPrope_tOracleOutput_4.put("password",dbPwd_tOracleOutput_4);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_4.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_4 = java.sql.DriverManager.getConnection(url_tOracleOutput_4, atnParamsPrope_tOracleOutput_4);
        resourceMap.put("conn_tOracleOutput_4", conn_tOracleOutput_4);
            conn_tOracleOutput_4.setAutoCommit(false);
            int commitEvery_tOracleOutput_4 = 1000;
            int commitCounter_tOracleOutput_4 = 0;
        int batchSize_tOracleOutput_4 = 1000;
        int batchSizeCounter_tOracleOutput_4=0;
        int count_tOracleOutput_4=0;

        if(dbschema_tOracleOutput_4 == null || dbschema_tOracleOutput_4.trim().length() == 0) {
            tableName_tOracleOutput_4 = ("BVAC_DOSIS");
        } else {
            tableName_tOracleOutput_4 = dbschema_tOracleOutput_4 + "." + ("BVAC_DOSIS");
        }
                String insert_tOracleOutput_4 = "INSERT INTO " + tableName_tOracleOutput_4 + " (ID,NOMBRE,ESTADO,ESTREGISTRO_ID) VALUES (?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_4 = conn_tOracleOutput_4.prepareStatement(insert_tOracleOutput_4);
                        resourceMap.put("pstmt_tOracleOutput_4", pstmt_tOracleOutput_4);





 



/**
 * [tOracleOutput_4 begin ] stop
 */




	
	/**
	 * [tOracleOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_3", false);
		start_Hash.put("tOracleOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"actualiza1");
					}
				
		int tos_count_tOracleOutput_3 = 0;
		






        int updateKeyCount_tOracleOutput_3 = 1;
        if(updateKeyCount_tOracleOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_3 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_3 = 0;
    int nb_line_update_tOracleOutput_3 = 0;
    int nb_line_inserted_tOracleOutput_3 = 0;
    int nb_line_deleted_tOracleOutput_3 = 0;
    int nb_line_rejected_tOracleOutput_3 = 0;

    int tmp_batchUpdateCount_tOracleOutput_3 = 0;

    int deletedCount_tOracleOutput_3=0;
    int updatedCount_tOracleOutput_3=0;
    int insertedCount_tOracleOutput_3=0;
    int rowsToCommitCount_tOracleOutput_3=0;
    int rejectedCount_tOracleOutput_3=0;

    boolean whetherReject_tOracleOutput_3 = false;

    java.sql.Connection conn_tOracleOutput_3 = null;

    //optional table
    String dbschema_tOracleOutput_3 = null;
    String tableName_tOracleOutput_3 = null;
                    String driverClass_tOracleOutput_3 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_3);
                String url_tOracleOutput_3 = null;
                    url_tOracleOutput_3 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_3 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_3 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_3 = decryptedPassword_tOracleOutput_3;
                dbschema_tOracleOutput_3 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_3 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_3.put("user",dbUser_tOracleOutput_3);
                    atnParamsPrope_tOracleOutput_3.put("password",dbPwd_tOracleOutput_3);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_3.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_3 = java.sql.DriverManager.getConnection(url_tOracleOutput_3, atnParamsPrope_tOracleOutput_3);
        resourceMap.put("conn_tOracleOutput_3", conn_tOracleOutput_3);
            conn_tOracleOutput_3.setAutoCommit(false);
            int commitEvery_tOracleOutput_3 = 1000;
            int commitCounter_tOracleOutput_3 = 0;
        int batchSize_tOracleOutput_3 = 1000;
        int batchSizeCounter_tOracleOutput_3=0;
        int count_tOracleOutput_3=0;

        if(dbschema_tOracleOutput_3 == null || dbschema_tOracleOutput_3.trim().length() == 0) {
            tableName_tOracleOutput_3 = ("BVAC_DOSIS");
        } else {
            tableName_tOracleOutput_3 = dbschema_tOracleOutput_3 + "." + ("BVAC_DOSIS");
        }
                String update_tOracleOutput_3 = "UPDATE " + tableName_tOracleOutput_3 + " SET NOMBRE = ?,ESTADO = ?,ESTREGISTRO_ID = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_3 = conn_tOracleOutput_3.prepareStatement(update_tOracleOutput_3);
                resourceMap.put("pstmt_tOracleOutput_3", pstmt_tOracleOutput_3);





 



/**
 * [tOracleOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
					globalMap.get( "tHash_Lookup_row5" ))
					;					
					
	

row5Struct row5HashKey = new row5Struct();
row5Struct row5Default = new row5Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
Inserta1Struct Inserta1_tmp = new Inserta1Struct();
actualiza1Struct actualiza1_tmp = new actualiza1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_4.setFetchSize(1000);


		    String dbquery_tOracleInput_4 = "SELECT  TD.ID\n        ,TD.NOMBRE\n        ,TD.ESTADO\n        ,TD.ESTREGISTRO_ID\nFROM VAC_TDOSIS TD";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row4.ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row4.ID = rs_tOracleInput_4.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row4.NOMBRE = null;
							} else {
	                         		
        	row4.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row4.ESTADO = null;
							} else {
	                         		
        	row4.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 4) {
								row4.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(4) != null) {
						row4.ESTREGISTRO_ID = rs_tOracleInput_4.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
						row5Struct row5 = null;
					
						row6Struct row6 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row5" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow5 = false;
       		  	    	
       		  	    	
 							row5Struct row5ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row5HashKey.ID = row4.ID ;
                        		    		
                        		    		    row5HashKey.NOMBRE = row4.NOMBRE ;
                        		    		
                        		    		    row5HashKey.ESTADO = row4.ESTADO ;
                        		    		
                        		    		    row5HashKey.ESTREGISTRO_ID = row4.ESTREGISTRO_ID ;
                        		    		

								
		                        	row5HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row5.lookup( row5HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row5Struct fromLookup_row5 = null;
							row5 = row5Default;
										 
							
								 
							
							
								if (tHash_Lookup_row5 !=null && tHash_Lookup_row5.hasNext()) { // G 099
								
							
								
								fromLookup_row5 = tHash_Lookup_row5.next();

							
							
								} // G 099
							
							

							if(fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row6HashKey.ID = row4.ID ;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								 
							
							
								if (tHash_Lookup_row6 !=null && tHash_Lookup_row6.hasNext()) { // G 099
								
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							
							
								} // G 099
							
							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

Inserta1 = null;
actualiza1 = null;


// # Output table : 'Inserta1'
// # Filter conditions 
if( 

row6.ID == null 

 ) {
Inserta1_tmp.ID = row4.ID ;
Inserta1_tmp.NOMBRE = row4.NOMBRE ;
Inserta1_tmp.ESTADO = row4.ESTADO ;
Inserta1_tmp.ESTREGISTRO_ID = row4.ESTREGISTRO_ID ;
Inserta1 = Inserta1_tmp;
} // closing filter/reject

// # Output table : 'actualiza1'
// # Filter conditions 
if( 

row6.ID != null &&  row5.ID == null

 ) {
actualiza1_tmp.ID = row4.ID ;
actualiza1_tmp.NOMBRE = row4.NOMBRE ;
actualiza1_tmp.ESTADO = row4.ESTADO ;
actualiza1_tmp.ESTREGISTRO_ID = row4.ESTREGISTRO_ID ;
actualiza1 = actualiza1_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "Inserta1"
if(Inserta1 != null) { 



	
	/**
	 * [tOracleOutput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta1"
						
						);
					}
					



        whetherReject_tOracleOutput_4 = false;
                        pstmt_tOracleOutput_4.setBigDecimal(1, Inserta1.ID);

                        if(Inserta1.NOMBRE == null) {
pstmt_tOracleOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_4.setString(2, Inserta1.NOMBRE);
}

                        if(Inserta1.ESTADO == null) {
pstmt_tOracleOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_4.setString(3, Inserta1.ESTADO);
}

                        pstmt_tOracleOutput_4.setBigDecimal(4, Inserta1.ESTREGISTRO_ID);

                pstmt_tOracleOutput_4.addBatch();
                nb_line_tOracleOutput_4++;
                batchSizeCounter_tOracleOutput_4++;
            if (batchSize_tOracleOutput_4 > 0 &&  batchSize_tOracleOutput_4 <= batchSizeCounter_tOracleOutput_4) {
                try {
                    pstmt_tOracleOutput_4.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_4){
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
			        java.sql.SQLException ne_tOracleOutput_4 = e_tOracleOutput_4.getNextException(),sqle_tOracleOutput_4=null;
			    	String errormessage_tOracleOutput_4;
					if (ne_tOracleOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_4 = new java.sql.SQLException(e_tOracleOutput_4.getMessage() + "\ncaused by: " + ne_tOracleOutput_4.getMessage(), ne_tOracleOutput_4.getSQLState(), ne_tOracleOutput_4.getErrorCode(), ne_tOracleOutput_4);
						errormessage_tOracleOutput_4 = sqle_tOracleOutput_4.getMessage();
					}else{
						errormessage_tOracleOutput_4 = e_tOracleOutput_4.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_4);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_4 = pstmt_tOracleOutput_4.getUpdateCount();
                    insertedCount_tOracleOutput_4
                += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                rowsToCommitCount_tOracleOutput_4 += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                batchSizeCounter_tOracleOutput_4 = 0;
            }
                commitCounter_tOracleOutput_4++;
                if(commitEvery_tOracleOutput_4 <= commitCounter_tOracleOutput_4) {
                    if(batchSizeCounter_tOracleOutput_4 > 0) {
                        try {
                            pstmt_tOracleOutput_4.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_4){
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
					        java.sql.SQLException ne_tOracleOutput_4 = e_tOracleOutput_4.getNextException(),sqle_tOracleOutput_4=null;
					    	String errormessage_tOracleOutput_4;
							if (ne_tOracleOutput_4 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_4 = new java.sql.SQLException(e_tOracleOutput_4.getMessage() + "\ncaused by: " + ne_tOracleOutput_4.getMessage(), ne_tOracleOutput_4.getSQLState(), ne_tOracleOutput_4.getErrorCode(), ne_tOracleOutput_4);
								errormessage_tOracleOutput_4 = sqle_tOracleOutput_4.getMessage();
							}else{
								errormessage_tOracleOutput_4 = e_tOracleOutput_4.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_4);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_4 = pstmt_tOracleOutput_4.getUpdateCount();
                            insertedCount_tOracleOutput_4
                        += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                        rowsToCommitCount_tOracleOutput_4 += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_4 != 0){
                    	
                    }
                    conn_tOracleOutput_4.commit();
                    if(rowsToCommitCount_tOracleOutput_4 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_4 = 0;
                    }
                    commitCounter_tOracleOutput_4=0;
                    	batchSizeCounter_tOracleOutput_4=0;
                }

 


	tos_count_tOracleOutput_4++;

/**
 * [tOracleOutput_4 main ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_end ] stop
 */

} // End of branch "Inserta1"




// Start of branch "actualiza1"
if(actualiza1 != null) { 



	
	/**
	 * [tOracleOutput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"actualiza1"
						
						);
					}
					



        whetherReject_tOracleOutput_3 = false;
                    if(actualiza1.NOMBRE == null) {
pstmt_tOracleOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(1, actualiza1.NOMBRE);
}

                    if(actualiza1.ESTADO == null) {
pstmt_tOracleOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(2, actualiza1.ESTADO);
}

                    pstmt_tOracleOutput_3.setBigDecimal(3, actualiza1.ESTREGISTRO_ID);


                    pstmt_tOracleOutput_3.setBigDecimal(4 + count_tOracleOutput_3, actualiza1.ID);

                pstmt_tOracleOutput_3.addBatch();
                nb_line_tOracleOutput_3++;
                batchSizeCounter_tOracleOutput_3++;
            if (batchSize_tOracleOutput_3 > 0 &&  batchSize_tOracleOutput_3 <= batchSizeCounter_tOracleOutput_3) {
                try {
                    pstmt_tOracleOutput_3.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_3){
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
			        java.sql.SQLException ne_tOracleOutput_3 = e_tOracleOutput_3.getNextException(),sqle_tOracleOutput_3=null;
			    	String errormessage_tOracleOutput_3;
					if (ne_tOracleOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_3 = new java.sql.SQLException(e_tOracleOutput_3.getMessage() + "\ncaused by: " + ne_tOracleOutput_3.getMessage(), ne_tOracleOutput_3.getSQLState(), ne_tOracleOutput_3.getErrorCode(), ne_tOracleOutput_3);
						errormessage_tOracleOutput_3 = sqle_tOracleOutput_3.getMessage();
					}else{
						errormessage_tOracleOutput_3 = e_tOracleOutput_3.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_3);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3.getUpdateCount();
                    updatedCount_tOracleOutput_3
                += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                rowsToCommitCount_tOracleOutput_3 += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                batchSizeCounter_tOracleOutput_3 = 0;
            }
                commitCounter_tOracleOutput_3++;
                if(commitEvery_tOracleOutput_3 <= commitCounter_tOracleOutput_3) {
                    if(batchSizeCounter_tOracleOutput_3 > 0) {
                        try {
                            pstmt_tOracleOutput_3.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_3){
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
					        java.sql.SQLException ne_tOracleOutput_3 = e_tOracleOutput_3.getNextException(),sqle_tOracleOutput_3=null;
					    	String errormessage_tOracleOutput_3;
							if (ne_tOracleOutput_3 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_3 = new java.sql.SQLException(e_tOracleOutput_3.getMessage() + "\ncaused by: " + ne_tOracleOutput_3.getMessage(), ne_tOracleOutput_3.getSQLState(), ne_tOracleOutput_3.getErrorCode(), ne_tOracleOutput_3);
								errormessage_tOracleOutput_3 = sqle_tOracleOutput_3.getMessage();
							}else{
								errormessage_tOracleOutput_3 = e_tOracleOutput_3.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_3);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3.getUpdateCount();
                            updatedCount_tOracleOutput_3
                        += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                        rowsToCommitCount_tOracleOutput_3 += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_3 != 0){
                    	
                    }
                    conn_tOracleOutput_3.commit();
                    if(rowsToCommitCount_tOracleOutput_3 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_3 = 0;
                    }
                    commitCounter_tOracleOutput_3=0;
                    	batchSizeCounter_tOracleOutput_3=0;
                }

 


	tos_count_tOracleOutput_3++;

/**
 * [tOracleOutput_3 main ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_end ] stop
 */

} // End of branch "actualiza1"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove( "tHash_Lookup_row5" );

					
					
				
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tOracleOutput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_4 > 0) {
            try {
            	if (pstmt_tOracleOutput_4 != null) {
					
					pstmt_tOracleOutput_4.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_4){
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
		        java.sql.SQLException ne_tOracleOutput_4 = e_tOracleOutput_4.getNextException(),sqle_tOracleOutput_4=null;
		    	String errormessage_tOracleOutput_4;
				if (ne_tOracleOutput_4 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_4 = new java.sql.SQLException(e_tOracleOutput_4.getMessage() + "\ncaused by: " + ne_tOracleOutput_4.getMessage(), ne_tOracleOutput_4.getSQLState(), ne_tOracleOutput_4.getErrorCode(), ne_tOracleOutput_4);
					errormessage_tOracleOutput_4 = sqle_tOracleOutput_4.getMessage();
				}else{
					errormessage_tOracleOutput_4 = e_tOracleOutput_4.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_4);
            	
        	}
        	if (pstmt_tOracleOutput_4 != null) {
            	tmp_batchUpdateCount_tOracleOutput_4 = pstmt_tOracleOutput_4.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_4
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
				rowsToCommitCount_tOracleOutput_4 += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
            }
        }
        if(pstmt_tOracleOutput_4 != null) {
			
				pstmt_tOracleOutput_4.close();
				resourceMap.remove("pstmt_tOracleOutput_4");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_4", true);
		if(commitCounter_tOracleOutput_4 > 0 && rowsToCommitCount_tOracleOutput_4 != 0) {
			
		}
		conn_tOracleOutput_4.commit();
		if(commitCounter_tOracleOutput_4 > 0 && rowsToCommitCount_tOracleOutput_4 != 0) {
			
			rowsToCommitCount_tOracleOutput_4 = 0;
		}
		commitCounter_tOracleOutput_4 = 0;
		
		
		conn_tOracleOutput_4 .close();
		
		resourceMap.put("finish_tOracleOutput_4", true);
   	

	
	nb_line_deleted_tOracleOutput_4=nb_line_deleted_tOracleOutput_4+ deletedCount_tOracleOutput_4;
	nb_line_update_tOracleOutput_4=nb_line_update_tOracleOutput_4 + updatedCount_tOracleOutput_4;
	nb_line_inserted_tOracleOutput_4=nb_line_inserted_tOracleOutput_4 + insertedCount_tOracleOutput_4;
	nb_line_rejected_tOracleOutput_4=nb_line_rejected_tOracleOutput_4 + rejectedCount_tOracleOutput_4;
	
        globalMap.put("tOracleOutput_4_NB_LINE",nb_line_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_UPDATED",nb_line_update_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_4);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta1");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_4", true);
end_Hash.put("tOracleOutput_4", System.currentTimeMillis());




/**
 * [tOracleOutput_4 end ] stop
 */




	
	/**
	 * [tOracleOutput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_3 > 0) {
            try {
            	if (pstmt_tOracleOutput_3 != null) {
					
					pstmt_tOracleOutput_3.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_3){
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
		        java.sql.SQLException ne_tOracleOutput_3 = e_tOracleOutput_3.getNextException(),sqle_tOracleOutput_3=null;
		    	String errormessage_tOracleOutput_3;
				if (ne_tOracleOutput_3 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_3 = new java.sql.SQLException(e_tOracleOutput_3.getMessage() + "\ncaused by: " + ne_tOracleOutput_3.getMessage(), ne_tOracleOutput_3.getSQLState(), ne_tOracleOutput_3.getErrorCode(), ne_tOracleOutput_3);
					errormessage_tOracleOutput_3 = sqle_tOracleOutput_3.getMessage();
				}else{
					errormessage_tOracleOutput_3 = e_tOracleOutput_3.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_3);
            	
        	}
        	if (pstmt_tOracleOutput_3 != null) {
            	tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_3
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
				rowsToCommitCount_tOracleOutput_3 += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
            }
        }
        if(pstmt_tOracleOutput_3 != null) {
			
				pstmt_tOracleOutput_3.close();
				resourceMap.remove("pstmt_tOracleOutput_3");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_3", true);
		if(commitCounter_tOracleOutput_3 > 0 && rowsToCommitCount_tOracleOutput_3 != 0) {
			
		}
		conn_tOracleOutput_3.commit();
		if(commitCounter_tOracleOutput_3 > 0 && rowsToCommitCount_tOracleOutput_3 != 0) {
			
			rowsToCommitCount_tOracleOutput_3 = 0;
		}
		commitCounter_tOracleOutput_3 = 0;
		
		
		conn_tOracleOutput_3 .close();
		
		resourceMap.put("finish_tOracleOutput_3", true);
   	

	
	nb_line_deleted_tOracleOutput_3=nb_line_deleted_tOracleOutput_3+ deletedCount_tOracleOutput_3;
	nb_line_update_tOracleOutput_3=nb_line_update_tOracleOutput_3 + updatedCount_tOracleOutput_3;
	nb_line_inserted_tOracleOutput_3=nb_line_inserted_tOracleOutput_3 + insertedCount_tOracleOutput_3;
	nb_line_rejected_tOracleOutput_3=nb_line_rejected_tOracleOutput_3 + rejectedCount_tOracleOutput_3;
	
        globalMap.put("tOracleOutput_3_NB_LINE",nb_line_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_UPDATED",nb_line_update_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_3);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"actualiza1");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_3", true);
end_Hash.put("tOracleOutput_3", System.currentTimeMillis());




/**
 * [tOracleOutput_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk20", 0, "ok");
								} 
							
							tOracleInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row5"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tOracleOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_4 = null;
                if ((pstmtToClose_tOracleOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_4")) != null) {
                    pstmtToClose_tOracleOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_4") == null){
            java.sql.Connection ctn_tOracleOutput_4 = null;
            if((ctn_tOracleOutput_4 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_4")) != null){
                try {
                    ctn_tOracleOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_4) {
                    String errorMessage_tOracleOutput_4 = "failed to close the connection in tOracleOutput_4 :" + sqlEx_tOracleOutput_4.getMessage();
                    System.err.println(errorMessage_tOracleOutput_4);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_4 finally ] stop
 */




	
	/**
	 * [tOracleOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_3 = null;
                if ((pstmtToClose_tOracleOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_3")) != null) {
                    pstmtToClose_tOracleOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_3") == null){
            java.sql.Connection ctn_tOracleOutput_3 = null;
            if((ctn_tOracleOutput_3 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_3")) != null){
                try {
                    ctn_tOracleOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_3) {
                    String errorMessage_tOracleOutput_3 = "failed to close the connection in tOracleOutput_3 :" + sqlEx_tOracleOutput_3.getMessage();
                    System.err.println(errorMessage_tOracleOutput_3);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class Inserta2Struct implements routines.system.IPersistableRow<Inserta2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal EDAD_MINIMA;

				public BigDecimal getEDAD_MINIMA () {
					return this.EDAD_MINIMA;
				}

				public Boolean EDAD_MINIMAIsNullable(){
				    return false;
				}
				public Boolean EDAD_MINIMAIsKey(){
				    return false;
				}
				public Integer EDAD_MINIMALength(){
				    return 0;
				}
				public Integer EDAD_MINIMAPrecision(){
				    return null;
				}
				public String EDAD_MINIMADefault(){
				
					return "";
				
				}
				public String EDAD_MINIMAComment(){
				
				    return "";
				
				}
				public String EDAD_MINIMAPattern(){
				
					return "";
				
				}
				public String EDAD_MINIMAOriginalDbColumnName(){
				
					return "EDAD_MINIMA";
				
				}

				
			    public BigDecimal EDAD_MAXIMA;

				public BigDecimal getEDAD_MAXIMA () {
					return this.EDAD_MAXIMA;
				}

				public Boolean EDAD_MAXIMAIsNullable(){
				    return false;
				}
				public Boolean EDAD_MAXIMAIsKey(){
				    return false;
				}
				public Integer EDAD_MAXIMALength(){
				    return 0;
				}
				public Integer EDAD_MAXIMAPrecision(){
				    return null;
				}
				public String EDAD_MAXIMADefault(){
				
					return "";
				
				}
				public String EDAD_MAXIMAComment(){
				
				    return "";
				
				}
				public String EDAD_MAXIMAPattern(){
				
					return "";
				
				}
				public String EDAD_MAXIMAOriginalDbColumnName(){
				
					return "EDAD_MAXIMA";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 10;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Inserta2Struct other = (Inserta2Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Inserta2Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.EDAD_MINIMA = this.EDAD_MINIMA;
	            other.EDAD_MAXIMA = this.EDAD_MAXIMA;
	            other.ESTADO = this.ESTADO;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            
	}

	public void copyKeysDataTo(Inserta2Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.EDAD_MINIMA = (BigDecimal) dis.readObject();
					
						this.EDAD_MAXIMA = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.EDAD_MINIMA = (BigDecimal) dis.readObject();
					
						this.EDAD_MAXIMA = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_MINIMA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_MAXIMA);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_MINIMA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_MAXIMA);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",EDAD_MINIMA="+String.valueOf(EDAD_MINIMA));
		sb.append(",EDAD_MAXIMA="+String.valueOf(EDAD_MAXIMA));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Actualiza2Struct implements routines.system.IPersistableRow<Actualiza2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal EDAD_MINIMA;

				public BigDecimal getEDAD_MINIMA () {
					return this.EDAD_MINIMA;
				}

				public Boolean EDAD_MINIMAIsNullable(){
				    return false;
				}
				public Boolean EDAD_MINIMAIsKey(){
				    return false;
				}
				public Integer EDAD_MINIMALength(){
				    return 0;
				}
				public Integer EDAD_MINIMAPrecision(){
				    return null;
				}
				public String EDAD_MINIMADefault(){
				
					return "";
				
				}
				public String EDAD_MINIMAComment(){
				
				    return "";
				
				}
				public String EDAD_MINIMAPattern(){
				
					return "";
				
				}
				public String EDAD_MINIMAOriginalDbColumnName(){
				
					return "EDAD_MINIMA";
				
				}

				
			    public BigDecimal EDAD_MAXIMA;

				public BigDecimal getEDAD_MAXIMA () {
					return this.EDAD_MAXIMA;
				}

				public Boolean EDAD_MAXIMAIsNullable(){
				    return false;
				}
				public Boolean EDAD_MAXIMAIsKey(){
				    return false;
				}
				public Integer EDAD_MAXIMALength(){
				    return 0;
				}
				public Integer EDAD_MAXIMAPrecision(){
				    return null;
				}
				public String EDAD_MAXIMADefault(){
				
					return "";
				
				}
				public String EDAD_MAXIMAComment(){
				
				    return "";
				
				}
				public String EDAD_MAXIMAPattern(){
				
					return "";
				
				}
				public String EDAD_MAXIMAOriginalDbColumnName(){
				
					return "EDAD_MAXIMA";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 10;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Actualiza2Struct other = (Actualiza2Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Actualiza2Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.EDAD_MINIMA = this.EDAD_MINIMA;
	            other.EDAD_MAXIMA = this.EDAD_MAXIMA;
	            other.ESTADO = this.ESTADO;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            
	}

	public void copyKeysDataTo(Actualiza2Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.EDAD_MINIMA = (BigDecimal) dis.readObject();
					
						this.EDAD_MAXIMA = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.EDAD_MINIMA = (BigDecimal) dis.readObject();
					
						this.EDAD_MAXIMA = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_MINIMA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_MAXIMA);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_MINIMA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_MAXIMA);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",EDAD_MINIMA="+String.valueOf(EDAD_MINIMA));
		sb.append(",EDAD_MAXIMA="+String.valueOf(EDAD_MAXIMA));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Actualiza2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal EDAD_MINIMA;

				public BigDecimal getEDAD_MINIMA () {
					return this.EDAD_MINIMA;
				}

				public Boolean EDAD_MINIMAIsNullable(){
				    return false;
				}
				public Boolean EDAD_MINIMAIsKey(){
				    return false;
				}
				public Integer EDAD_MINIMALength(){
				    return 0;
				}
				public Integer EDAD_MINIMAPrecision(){
				    return null;
				}
				public String EDAD_MINIMADefault(){
				
					return "";
				
				}
				public String EDAD_MINIMAComment(){
				
				    return "";
				
				}
				public String EDAD_MINIMAPattern(){
				
					return "";
				
				}
				public String EDAD_MINIMAOriginalDbColumnName(){
				
					return "EDAD_MINIMA";
				
				}

				
			    public BigDecimal EDAD_MAXIMA;

				public BigDecimal getEDAD_MAXIMA () {
					return this.EDAD_MAXIMA;
				}

				public Boolean EDAD_MAXIMAIsNullable(){
				    return false;
				}
				public Boolean EDAD_MAXIMAIsKey(){
				    return false;
				}
				public Integer EDAD_MAXIMALength(){
				    return 0;
				}
				public Integer EDAD_MAXIMAPrecision(){
				    return null;
				}
				public String EDAD_MAXIMADefault(){
				
					return "";
				
				}
				public String EDAD_MAXIMAComment(){
				
				    return "";
				
				}
				public String EDAD_MAXIMAPattern(){
				
					return "";
				
				}
				public String EDAD_MAXIMAOriginalDbColumnName(){
				
					return "EDAD_MAXIMA";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 10;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.EDAD_MINIMA = (BigDecimal) dis.readObject();
					
						this.EDAD_MAXIMA = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.EDAD_MINIMA = (BigDecimal) dis.readObject();
					
						this.EDAD_MAXIMA = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_MINIMA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_MAXIMA);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_MINIMA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_MAXIMA);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",EDAD_MINIMA="+String.valueOf(EDAD_MINIMA));
		sb.append(",EDAD_MAXIMA="+String.valueOf(EDAD_MAXIMA));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_6Struct implements routines.system.IPersistableRow<after_tOracleInput_6Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal EDAD_MINIMA;

				public BigDecimal getEDAD_MINIMA () {
					return this.EDAD_MINIMA;
				}

				public Boolean EDAD_MINIMAIsNullable(){
				    return false;
				}
				public Boolean EDAD_MINIMAIsKey(){
				    return false;
				}
				public Integer EDAD_MINIMALength(){
				    return 0;
				}
				public Integer EDAD_MINIMAPrecision(){
				    return null;
				}
				public String EDAD_MINIMADefault(){
				
					return "";
				
				}
				public String EDAD_MINIMAComment(){
				
				    return "";
				
				}
				public String EDAD_MINIMAPattern(){
				
					return "";
				
				}
				public String EDAD_MINIMAOriginalDbColumnName(){
				
					return "EDAD_MINIMA";
				
				}

				
			    public BigDecimal EDAD_MAXIMA;

				public BigDecimal getEDAD_MAXIMA () {
					return this.EDAD_MAXIMA;
				}

				public Boolean EDAD_MAXIMAIsNullable(){
				    return false;
				}
				public Boolean EDAD_MAXIMAIsKey(){
				    return false;
				}
				public Integer EDAD_MAXIMALength(){
				    return 0;
				}
				public Integer EDAD_MAXIMAPrecision(){
				    return null;
				}
				public String EDAD_MAXIMADefault(){
				
					return "";
				
				}
				public String EDAD_MAXIMAComment(){
				
				    return "";
				
				}
				public String EDAD_MAXIMAPattern(){
				
					return "";
				
				}
				public String EDAD_MAXIMAOriginalDbColumnName(){
				
					return "EDAD_MAXIMA";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 10;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.EDAD_MINIMA = (BigDecimal) dis.readObject();
					
						this.EDAD_MAXIMA = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.EDAD_MINIMA = (BigDecimal) dis.readObject();
					
						this.EDAD_MAXIMA = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_MINIMA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_MAXIMA);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_MINIMA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_MAXIMA);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",EDAD_MINIMA="+String.valueOf(EDAD_MINIMA));
		sb.append(",EDAD_MAXIMA="+String.valueOf(EDAD_MAXIMA));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_8Process(globalMap);
		tOracleInput_9Process(globalMap);

		row7Struct row7 = new row7Struct();
Inserta2Struct Inserta2 = new Inserta2Struct();
Actualiza2Struct Actualiza2 = new Actualiza2Struct();





	
	/**
	 * [tOracleOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_6", false);
		start_Hash.put("tOracleOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta2");
					}
				
		int tos_count_tOracleOutput_6 = 0;
		






    
    int nb_line_tOracleOutput_6 = 0;
    int nb_line_update_tOracleOutput_6 = 0;
    int nb_line_inserted_tOracleOutput_6 = 0;
    int nb_line_deleted_tOracleOutput_6 = 0;
    int nb_line_rejected_tOracleOutput_6 = 0;

    int tmp_batchUpdateCount_tOracleOutput_6 = 0;

    int deletedCount_tOracleOutput_6=0;
    int updatedCount_tOracleOutput_6=0;
    int insertedCount_tOracleOutput_6=0;
    int rowsToCommitCount_tOracleOutput_6=0;
    int rejectedCount_tOracleOutput_6=0;

    boolean whetherReject_tOracleOutput_6 = false;

    java.sql.Connection conn_tOracleOutput_6 = null;

    //optional table
    String dbschema_tOracleOutput_6 = null;
    String tableName_tOracleOutput_6 = null;
                    String driverClass_tOracleOutput_6 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_6);
                String url_tOracleOutput_6 = null;
                    url_tOracleOutput_6 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_6 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_6 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_6 = decryptedPassword_tOracleOutput_6;
                dbschema_tOracleOutput_6 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_6 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_6.put("user",dbUser_tOracleOutput_6);
                    atnParamsPrope_tOracleOutput_6.put("password",dbPwd_tOracleOutput_6);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_6.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_6 = java.sql.DriverManager.getConnection(url_tOracleOutput_6, atnParamsPrope_tOracleOutput_6);
        resourceMap.put("conn_tOracleOutput_6", conn_tOracleOutput_6);
            conn_tOracleOutput_6.setAutoCommit(false);
            int commitEvery_tOracleOutput_6 = 1000;
            int commitCounter_tOracleOutput_6 = 0;
        int batchSize_tOracleOutput_6 = 1000;
        int batchSizeCounter_tOracleOutput_6=0;
        int count_tOracleOutput_6=0;

        if(dbschema_tOracleOutput_6 == null || dbschema_tOracleOutput_6.trim().length() == 0) {
            tableName_tOracleOutput_6 = ("BVAC_RANGOS");
        } else {
            tableName_tOracleOutput_6 = dbschema_tOracleOutput_6 + "." + ("BVAC_RANGOS");
        }
                String insert_tOracleOutput_6 = "INSERT INTO " + tableName_tOracleOutput_6 + " (ID,NOMBRE,EDAD_MINIMA,EDAD_MAXIMA,ESTADO,ESTREGISTRO_ID) VALUES (?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_6 = conn_tOracleOutput_6.prepareStatement(insert_tOracleOutput_6);
                        resourceMap.put("pstmt_tOracleOutput_6", pstmt_tOracleOutput_6);





 



/**
 * [tOracleOutput_6 begin ] stop
 */




	
	/**
	 * [tOracleOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_5", false);
		start_Hash.put("tOracleOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Actualiza2");
					}
				
		int tos_count_tOracleOutput_5 = 0;
		






        int updateKeyCount_tOracleOutput_5 = 1;
        if(updateKeyCount_tOracleOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_5 == 6 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_5 = 0;
    int nb_line_update_tOracleOutput_5 = 0;
    int nb_line_inserted_tOracleOutput_5 = 0;
    int nb_line_deleted_tOracleOutput_5 = 0;
    int nb_line_rejected_tOracleOutput_5 = 0;

    int tmp_batchUpdateCount_tOracleOutput_5 = 0;

    int deletedCount_tOracleOutput_5=0;
    int updatedCount_tOracleOutput_5=0;
    int insertedCount_tOracleOutput_5=0;
    int rowsToCommitCount_tOracleOutput_5=0;
    int rejectedCount_tOracleOutput_5=0;

    boolean whetherReject_tOracleOutput_5 = false;

    java.sql.Connection conn_tOracleOutput_5 = null;

    //optional table
    String dbschema_tOracleOutput_5 = null;
    String tableName_tOracleOutput_5 = null;
                    String driverClass_tOracleOutput_5 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_5);
                String url_tOracleOutput_5 = null;
                    url_tOracleOutput_5 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_5 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_5 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_5 = decryptedPassword_tOracleOutput_5;
                dbschema_tOracleOutput_5 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_5 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_5.put("user",dbUser_tOracleOutput_5);
                    atnParamsPrope_tOracleOutput_5.put("password",dbPwd_tOracleOutput_5);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_5.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_5 = java.sql.DriverManager.getConnection(url_tOracleOutput_5, atnParamsPrope_tOracleOutput_5);
        resourceMap.put("conn_tOracleOutput_5", conn_tOracleOutput_5);
            conn_tOracleOutput_5.setAutoCommit(false);
            int commitEvery_tOracleOutput_5 = 1000;
            int commitCounter_tOracleOutput_5 = 0;
        int batchSize_tOracleOutput_5 = 1000;
        int batchSizeCounter_tOracleOutput_5=0;
        int count_tOracleOutput_5=0;

        if(dbschema_tOracleOutput_5 == null || dbschema_tOracleOutput_5.trim().length() == 0) {
            tableName_tOracleOutput_5 = ("BVAC_RANGOS");
        } else {
            tableName_tOracleOutput_5 = dbschema_tOracleOutput_5 + "." + ("BVAC_RANGOS");
        }
                String update_tOracleOutput_5 = "UPDATE " + tableName_tOracleOutput_5 + " SET NOMBRE = ?,EDAD_MINIMA = ?,EDAD_MAXIMA = ?,ESTADO = ?,ESTREGISTRO_ID = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_5 = conn_tOracleOutput_5.prepareStatement(update_tOracleOutput_5);
                resourceMap.put("pstmt_tOracleOutput_5", pstmt_tOracleOutput_5);





 



/**
 * [tOracleOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
Inserta2Struct Inserta2_tmp = new Inserta2Struct();
Actualiza2Struct Actualiza2_tmp = new Actualiza2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_6.setFetchSize(1000);


		    String dbquery_tOracleInput_6 = "SELECT  TRA.ID \n        ,TRA.NOMBRE\n        ,TRA.EDADMINIMA AS EDAD_MINIMA\n        ,TRA.EDADMAXIMA AS EDAD_MAXIMA\n "
+"       ,TRA.ESTADO\n        ,TRA.ESTREGISTRO_ID\nFROM VAC_TRAZADORES TRA";
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row7.ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(1) != null) {
						row7.ID = rs_tOracleInput_6.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								row7.NOMBRE = null;
							} else {
	                         		
        	row7.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 3) {
								row7.EDAD_MINIMA = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(3) != null) {
						row7.EDAD_MINIMA = rs_tOracleInput_6.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 4) {
								row7.EDAD_MAXIMA = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(4) != null) {
						row7.EDAD_MAXIMA = rs_tOracleInput_6.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 5) {
								row7.ESTADO = null;
							} else {
	                         		
        	row7.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 6) {
								row7.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(6) != null) {
						row7.ESTREGISTRO_ID = rs_tOracleInput_6.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
						row8Struct row8 = null;
					
						row9Struct row9 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row8HashKey.ID = row7.ID ;
                        		    		
                        		    		    row8HashKey.NOMBRE = row7.NOMBRE ;
                        		    		
                        		    		    row8HashKey.EDAD_MINIMA = row7.EDAD_MINIMA ;
                        		    		
                        		    		    row8HashKey.EDAD_MAXIMA = row7.EDAD_MAXIMA ;
                        		    		
                        		    		    row8HashKey.ESTADO = row7.ESTADO ;
                        		    		
                        		    		    row8HashKey.ESTREGISTRO_ID = row7.ESTREGISTRO_ID ;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								 
							
							
								if (tHash_Lookup_row8 !=null && tHash_Lookup_row8.hasNext()) { // G 099
								
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							
							
								} // G 099
							
							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row9HashKey.ID = row7.ID ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

Inserta2 = null;
Actualiza2 = null;


// # Output table : 'Inserta2'
// # Filter conditions 
if( 

row9.ID == null

 ) {
Inserta2_tmp.ID = row7.ID ;
Inserta2_tmp.NOMBRE = row7.NOMBRE ;
Inserta2_tmp.EDAD_MINIMA = row7.EDAD_MINIMA ;
Inserta2_tmp.EDAD_MAXIMA = row7.EDAD_MAXIMA ;
Inserta2_tmp.ESTADO = row7.ESTADO ;
Inserta2_tmp.ESTREGISTRO_ID = row7.ESTREGISTRO_ID ;
Inserta2 = Inserta2_tmp;
} // closing filter/reject

// # Output table : 'Actualiza2'
// # Filter conditions 
if( 

row9.ID != null &&  row8.ID == null

 ) {
Actualiza2_tmp.ID = row7.ID ;
Actualiza2_tmp.NOMBRE = row7.NOMBRE ;
Actualiza2_tmp.EDAD_MINIMA = row7.EDAD_MINIMA ;
Actualiza2_tmp.EDAD_MAXIMA = row7.EDAD_MAXIMA ;
Actualiza2_tmp.ESTADO = row7.ESTADO ;
Actualiza2_tmp.ESTREGISTRO_ID = row7.ESTREGISTRO_ID ;
Actualiza2 = Actualiza2_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "Inserta2"
if(Inserta2 != null) { 



	
	/**
	 * [tOracleOutput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta2"
						
						);
					}
					



        whetherReject_tOracleOutput_6 = false;
                        pstmt_tOracleOutput_6.setBigDecimal(1, Inserta2.ID);

                        if(Inserta2.NOMBRE == null) {
pstmt_tOracleOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(2, Inserta2.NOMBRE);
}

                        pstmt_tOracleOutput_6.setBigDecimal(3, Inserta2.EDAD_MINIMA);

                        pstmt_tOracleOutput_6.setBigDecimal(4, Inserta2.EDAD_MAXIMA);

                        if(Inserta2.ESTADO == null) {
pstmt_tOracleOutput_6.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(5, Inserta2.ESTADO);
}

                        pstmt_tOracleOutput_6.setBigDecimal(6, Inserta2.ESTREGISTRO_ID);

                pstmt_tOracleOutput_6.addBatch();
                nb_line_tOracleOutput_6++;
                batchSizeCounter_tOracleOutput_6++;
            if (batchSize_tOracleOutput_6 > 0 &&  batchSize_tOracleOutput_6 <= batchSizeCounter_tOracleOutput_6) {
                try {
                    pstmt_tOracleOutput_6.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_6){
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
			        java.sql.SQLException ne_tOracleOutput_6 = e_tOracleOutput_6.getNextException(),sqle_tOracleOutput_6=null;
			    	String errormessage_tOracleOutput_6;
					if (ne_tOracleOutput_6 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_6 = new java.sql.SQLException(e_tOracleOutput_6.getMessage() + "\ncaused by: " + ne_tOracleOutput_6.getMessage(), ne_tOracleOutput_6.getSQLState(), ne_tOracleOutput_6.getErrorCode(), ne_tOracleOutput_6);
						errormessage_tOracleOutput_6 = sqle_tOracleOutput_6.getMessage();
					}else{
						errormessage_tOracleOutput_6 = e_tOracleOutput_6.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_6);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_6 = pstmt_tOracleOutput_6.getUpdateCount();
                    insertedCount_tOracleOutput_6
                += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                rowsToCommitCount_tOracleOutput_6 += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                batchSizeCounter_tOracleOutput_6 = 0;
            }
                commitCounter_tOracleOutput_6++;
                if(commitEvery_tOracleOutput_6 <= commitCounter_tOracleOutput_6) {
                    if(batchSizeCounter_tOracleOutput_6 > 0) {
                        try {
                            pstmt_tOracleOutput_6.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_6){
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
					        java.sql.SQLException ne_tOracleOutput_6 = e_tOracleOutput_6.getNextException(),sqle_tOracleOutput_6=null;
					    	String errormessage_tOracleOutput_6;
							if (ne_tOracleOutput_6 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_6 = new java.sql.SQLException(e_tOracleOutput_6.getMessage() + "\ncaused by: " + ne_tOracleOutput_6.getMessage(), ne_tOracleOutput_6.getSQLState(), ne_tOracleOutput_6.getErrorCode(), ne_tOracleOutput_6);
								errormessage_tOracleOutput_6 = sqle_tOracleOutput_6.getMessage();
							}else{
								errormessage_tOracleOutput_6 = e_tOracleOutput_6.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_6);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_6 = pstmt_tOracleOutput_6.getUpdateCount();
                            insertedCount_tOracleOutput_6
                        += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                        rowsToCommitCount_tOracleOutput_6 += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_6 != 0){
                    	
                    }
                    conn_tOracleOutput_6.commit();
                    if(rowsToCommitCount_tOracleOutput_6 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_6 = 0;
                    }
                    commitCounter_tOracleOutput_6=0;
                    	batchSizeCounter_tOracleOutput_6=0;
                }

 


	tos_count_tOracleOutput_6++;

/**
 * [tOracleOutput_6 main ] stop
 */
	
	/**
	 * [tOracleOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_end ] stop
 */

} // End of branch "Inserta2"




// Start of branch "Actualiza2"
if(Actualiza2 != null) { 



	
	/**
	 * [tOracleOutput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Actualiza2"
						
						);
					}
					



        whetherReject_tOracleOutput_5 = false;
                    if(Actualiza2.NOMBRE == null) {
pstmt_tOracleOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_5.setString(1, Actualiza2.NOMBRE);
}

                    pstmt_tOracleOutput_5.setBigDecimal(2, Actualiza2.EDAD_MINIMA);

                    pstmt_tOracleOutput_5.setBigDecimal(3, Actualiza2.EDAD_MAXIMA);

                    if(Actualiza2.ESTADO == null) {
pstmt_tOracleOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_5.setString(4, Actualiza2.ESTADO);
}

                    pstmt_tOracleOutput_5.setBigDecimal(5, Actualiza2.ESTREGISTRO_ID);


                    pstmt_tOracleOutput_5.setBigDecimal(6 + count_tOracleOutput_5, Actualiza2.ID);

                pstmt_tOracleOutput_5.addBatch();
                nb_line_tOracleOutput_5++;
                batchSizeCounter_tOracleOutput_5++;
            if (batchSize_tOracleOutput_5 > 0 &&  batchSize_tOracleOutput_5 <= batchSizeCounter_tOracleOutput_5) {
                try {
                    pstmt_tOracleOutput_5.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_5){
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
			        java.sql.SQLException ne_tOracleOutput_5 = e_tOracleOutput_5.getNextException(),sqle_tOracleOutput_5=null;
			    	String errormessage_tOracleOutput_5;
					if (ne_tOracleOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_5 = new java.sql.SQLException(e_tOracleOutput_5.getMessage() + "\ncaused by: " + ne_tOracleOutput_5.getMessage(), ne_tOracleOutput_5.getSQLState(), ne_tOracleOutput_5.getErrorCode(), ne_tOracleOutput_5);
						errormessage_tOracleOutput_5 = sqle_tOracleOutput_5.getMessage();
					}else{
						errormessage_tOracleOutput_5 = e_tOracleOutput_5.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_5);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_5 = pstmt_tOracleOutput_5.getUpdateCount();
                    updatedCount_tOracleOutput_5
                += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
                rowsToCommitCount_tOracleOutput_5 += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
                batchSizeCounter_tOracleOutput_5 = 0;
            }
                commitCounter_tOracleOutput_5++;
                if(commitEvery_tOracleOutput_5 <= commitCounter_tOracleOutput_5) {
                    if(batchSizeCounter_tOracleOutput_5 > 0) {
                        try {
                            pstmt_tOracleOutput_5.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_5){
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
					        java.sql.SQLException ne_tOracleOutput_5 = e_tOracleOutput_5.getNextException(),sqle_tOracleOutput_5=null;
					    	String errormessage_tOracleOutput_5;
							if (ne_tOracleOutput_5 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_5 = new java.sql.SQLException(e_tOracleOutput_5.getMessage() + "\ncaused by: " + ne_tOracleOutput_5.getMessage(), ne_tOracleOutput_5.getSQLState(), ne_tOracleOutput_5.getErrorCode(), ne_tOracleOutput_5);
								errormessage_tOracleOutput_5 = sqle_tOracleOutput_5.getMessage();
							}else{
								errormessage_tOracleOutput_5 = e_tOracleOutput_5.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_5);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_5 = pstmt_tOracleOutput_5.getUpdateCount();
                            updatedCount_tOracleOutput_5
                        += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
                        rowsToCommitCount_tOracleOutput_5 += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_5 != 0){
                    	
                    }
                    conn_tOracleOutput_5.commit();
                    if(rowsToCommitCount_tOracleOutput_5 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_5 = 0;
                    }
                    commitCounter_tOracleOutput_5=0;
                    	batchSizeCounter_tOracleOutput_5=0;
                }

 


	tos_count_tOracleOutput_5++;

/**
 * [tOracleOutput_5 main ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_end ] stop
 */

} // End of branch "Actualiza2"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());




/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tOracleOutput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_6 > 0) {
            try {
            	if (pstmt_tOracleOutput_6 != null) {
					
					pstmt_tOracleOutput_6.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_6){
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
		        java.sql.SQLException ne_tOracleOutput_6 = e_tOracleOutput_6.getNextException(),sqle_tOracleOutput_6=null;
		    	String errormessage_tOracleOutput_6;
				if (ne_tOracleOutput_6 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_6 = new java.sql.SQLException(e_tOracleOutput_6.getMessage() + "\ncaused by: " + ne_tOracleOutput_6.getMessage(), ne_tOracleOutput_6.getSQLState(), ne_tOracleOutput_6.getErrorCode(), ne_tOracleOutput_6);
					errormessage_tOracleOutput_6 = sqle_tOracleOutput_6.getMessage();
				}else{
					errormessage_tOracleOutput_6 = e_tOracleOutput_6.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_6);
            	
        	}
        	if (pstmt_tOracleOutput_6 != null) {
            	tmp_batchUpdateCount_tOracleOutput_6 = pstmt_tOracleOutput_6.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_6
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
				rowsToCommitCount_tOracleOutput_6 += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
            }
        }
        if(pstmt_tOracleOutput_6 != null) {
			
				pstmt_tOracleOutput_6.close();
				resourceMap.remove("pstmt_tOracleOutput_6");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_6", true);
		if(commitCounter_tOracleOutput_6 > 0 && rowsToCommitCount_tOracleOutput_6 != 0) {
			
		}
		conn_tOracleOutput_6.commit();
		if(commitCounter_tOracleOutput_6 > 0 && rowsToCommitCount_tOracleOutput_6 != 0) {
			
			rowsToCommitCount_tOracleOutput_6 = 0;
		}
		commitCounter_tOracleOutput_6 = 0;
		
		
		conn_tOracleOutput_6 .close();
		
		resourceMap.put("finish_tOracleOutput_6", true);
   	

	
	nb_line_deleted_tOracleOutput_6=nb_line_deleted_tOracleOutput_6+ deletedCount_tOracleOutput_6;
	nb_line_update_tOracleOutput_6=nb_line_update_tOracleOutput_6 + updatedCount_tOracleOutput_6;
	nb_line_inserted_tOracleOutput_6=nb_line_inserted_tOracleOutput_6 + insertedCount_tOracleOutput_6;
	nb_line_rejected_tOracleOutput_6=nb_line_rejected_tOracleOutput_6 + rejectedCount_tOracleOutput_6;
	
        globalMap.put("tOracleOutput_6_NB_LINE",nb_line_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_UPDATED",nb_line_update_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_6);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta2");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_6", true);
end_Hash.put("tOracleOutput_6", System.currentTimeMillis());




/**
 * [tOracleOutput_6 end ] stop
 */




	
	/**
	 * [tOracleOutput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_5 > 0) {
            try {
            	if (pstmt_tOracleOutput_5 != null) {
					
					pstmt_tOracleOutput_5.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_5){
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
		        java.sql.SQLException ne_tOracleOutput_5 = e_tOracleOutput_5.getNextException(),sqle_tOracleOutput_5=null;
		    	String errormessage_tOracleOutput_5;
				if (ne_tOracleOutput_5 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_5 = new java.sql.SQLException(e_tOracleOutput_5.getMessage() + "\ncaused by: " + ne_tOracleOutput_5.getMessage(), ne_tOracleOutput_5.getSQLState(), ne_tOracleOutput_5.getErrorCode(), ne_tOracleOutput_5);
					errormessage_tOracleOutput_5 = sqle_tOracleOutput_5.getMessage();
				}else{
					errormessage_tOracleOutput_5 = e_tOracleOutput_5.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_5);
            	
        	}
        	if (pstmt_tOracleOutput_5 != null) {
            	tmp_batchUpdateCount_tOracleOutput_5 = pstmt_tOracleOutput_5.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_5
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
				rowsToCommitCount_tOracleOutput_5 += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
            }
        }
        if(pstmt_tOracleOutput_5 != null) {
			
				pstmt_tOracleOutput_5.close();
				resourceMap.remove("pstmt_tOracleOutput_5");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_5", true);
		if(commitCounter_tOracleOutput_5 > 0 && rowsToCommitCount_tOracleOutput_5 != 0) {
			
		}
		conn_tOracleOutput_5.commit();
		if(commitCounter_tOracleOutput_5 > 0 && rowsToCommitCount_tOracleOutput_5 != 0) {
			
			rowsToCommitCount_tOracleOutput_5 = 0;
		}
		commitCounter_tOracleOutput_5 = 0;
		
		
		conn_tOracleOutput_5 .close();
		
		resourceMap.put("finish_tOracleOutput_5", true);
   	

	
	nb_line_deleted_tOracleOutput_5=nb_line_deleted_tOracleOutput_5+ deletedCount_tOracleOutput_5;
	nb_line_update_tOracleOutput_5=nb_line_update_tOracleOutput_5 + updatedCount_tOracleOutput_5;
	nb_line_inserted_tOracleOutput_5=nb_line_inserted_tOracleOutput_5 + insertedCount_tOracleOutput_5;
	nb_line_rejected_tOracleOutput_5=nb_line_rejected_tOracleOutput_5 + rejectedCount_tOracleOutput_5;
	
        globalMap.put("tOracleOutput_5_NB_LINE",nb_line_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_UPDATED",nb_line_update_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_5);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Actualiza2");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_5", true);
end_Hash.put("tOracleOutput_5", System.currentTimeMillis());




/**
 * [tOracleOutput_5 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk21", 0, "ok");
								} 
							
							tOracleInput_27Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tOracleOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_6 = null;
                if ((pstmtToClose_tOracleOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_6")) != null) {
                    pstmtToClose_tOracleOutput_6.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_6") == null){
            java.sql.Connection ctn_tOracleOutput_6 = null;
            if((ctn_tOracleOutput_6 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_6")) != null){
                try {
                    ctn_tOracleOutput_6.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_6) {
                    String errorMessage_tOracleOutput_6 = "failed to close the connection in tOracleOutput_6 :" + sqlEx_tOracleOutput_6.getMessage();
                    System.err.println(errorMessage_tOracleOutput_6);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_6 finally ] stop
 */




	
	/**
	 * [tOracleOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_5 = null;
                if ((pstmtToClose_tOracleOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_5")) != null) {
                    pstmtToClose_tOracleOutput_5.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_5") == null){
            java.sql.Connection ctn_tOracleOutput_5 = null;
            if((ctn_tOracleOutput_5 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_5")) != null){
                try {
                    ctn_tOracleOutput_5.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_5) {
                    String errorMessage_tOracleOutput_5 = "failed to close the connection in tOracleOutput_5 :" + sqlEx_tOracleOutput_5.getMessage();
                    System.err.println(errorMessage_tOracleOutput_5);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class InsertarInsumosStruct implements routines.system.IPersistableRow<InsertarInsumosStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal TIPO;

				public BigDecimal getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 0;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return "";
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public String NOMBRE_COMERCIAL;

				public String getNOMBRE_COMERCIAL () {
					return this.NOMBRE_COMERCIAL;
				}

				public Boolean NOMBRE_COMERCIALIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_COMERCIALIsKey(){
				    return false;
				}
				public Integer NOMBRE_COMERCIALLength(){
				    return 150;
				}
				public Integer NOMBRE_COMERCIALPrecision(){
				    return 0;
				}
				public String NOMBRE_COMERCIALDefault(){
				
					return null;
				
				}
				public String NOMBRE_COMERCIALComment(){
				
				    return "";
				
				}
				public String NOMBRE_COMERCIALPattern(){
				
					return "";
				
				}
				public String NOMBRE_COMERCIALOriginalDbColumnName(){
				
					return "NOMBRE_COMERCIAL";
				
				}

				
			    public String LABORATORIO;

				public String getLABORATORIO () {
					return this.LABORATORIO;
				}

				public Boolean LABORATORIOIsNullable(){
				    return true;
				}
				public Boolean LABORATORIOIsKey(){
				    return false;
				}
				public Integer LABORATORIOLength(){
				    return 500;
				}
				public Integer LABORATORIOPrecision(){
				    return 0;
				}
				public String LABORATORIODefault(){
				
					return null;
				
				}
				public String LABORATORIOComment(){
				
				    return "";
				
				}
				public String LABORATORIOPattern(){
				
					return "";
				
				}
				public String LABORATORIOOriginalDbColumnName(){
				
					return "LABORATORIO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NOMBRE_COMERCIAL = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NOMBRE_COMERCIAL = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NOMBRE_COMERCIAL,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NOMBRE_COMERCIAL,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",TIPO="+String.valueOf(TIPO));
		sb.append(",NOMBRE_COMERCIAL="+NOMBRE_COMERCIAL);
		sb.append(",LABORATORIO="+LABORATORIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(InsertarInsumosStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ActualizarInsumosStruct implements routines.system.IPersistableRow<ActualizarInsumosStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal TIPO;

				public BigDecimal getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 0;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return "";
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public String NOMBRE_COMERCIAL;

				public String getNOMBRE_COMERCIAL () {
					return this.NOMBRE_COMERCIAL;
				}

				public Boolean NOMBRE_COMERCIALIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_COMERCIALIsKey(){
				    return false;
				}
				public Integer NOMBRE_COMERCIALLength(){
				    return 150;
				}
				public Integer NOMBRE_COMERCIALPrecision(){
				    return 0;
				}
				public String NOMBRE_COMERCIALDefault(){
				
					return null;
				
				}
				public String NOMBRE_COMERCIALComment(){
				
				    return "";
				
				}
				public String NOMBRE_COMERCIALPattern(){
				
					return "";
				
				}
				public String NOMBRE_COMERCIALOriginalDbColumnName(){
				
					return "NOMBRE_COMERCIAL";
				
				}

				
			    public String LABORATORIO;

				public String getLABORATORIO () {
					return this.LABORATORIO;
				}

				public Boolean LABORATORIOIsNullable(){
				    return true;
				}
				public Boolean LABORATORIOIsKey(){
				    return false;
				}
				public Integer LABORATORIOLength(){
				    return 500;
				}
				public Integer LABORATORIOPrecision(){
				    return 0;
				}
				public String LABORATORIODefault(){
				
					return null;
				
				}
				public String LABORATORIOComment(){
				
				    return "";
				
				}
				public String LABORATORIOPattern(){
				
					return "";
				
				}
				public String LABORATORIOOriginalDbColumnName(){
				
					return "LABORATORIO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ActualizarInsumosStruct other = (ActualizarInsumosStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ActualizarInsumosStruct other) {

		other.ID = this.ID;
	            other.TIPO = this.TIPO;
	            other.NOMBRE_COMERCIAL = this.NOMBRE_COMERCIAL;
	            other.LABORATORIO = this.LABORATORIO;
	            
	}

	public void copyKeysDataTo(ActualizarInsumosStruct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NOMBRE_COMERCIAL = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NOMBRE_COMERCIAL = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NOMBRE_COMERCIAL,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NOMBRE_COMERCIAL,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",TIPO="+String.valueOf(TIPO));
		sb.append(",NOMBRE_COMERCIAL="+NOMBRE_COMERCIAL);
		sb.append(",LABORATORIO="+LABORATORIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ActualizarInsumosStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal TIPO;

				public BigDecimal getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 0;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return "";
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public String NOMBRE_COMERCIAL;

				public String getNOMBRE_COMERCIAL () {
					return this.NOMBRE_COMERCIAL;
				}

				public Boolean NOMBRE_COMERCIALIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_COMERCIALIsKey(){
				    return false;
				}
				public Integer NOMBRE_COMERCIALLength(){
				    return 150;
				}
				public Integer NOMBRE_COMERCIALPrecision(){
				    return 0;
				}
				public String NOMBRE_COMERCIALDefault(){
				
					return null;
				
				}
				public String NOMBRE_COMERCIALComment(){
				
				    return "";
				
				}
				public String NOMBRE_COMERCIALPattern(){
				
					return "";
				
				}
				public String NOMBRE_COMERCIALOriginalDbColumnName(){
				
					return "NOMBRE_COMERCIAL";
				
				}

				
			    public String LABORATORIO;

				public String getLABORATORIO () {
					return this.LABORATORIO;
				}

				public Boolean LABORATORIOIsNullable(){
				    return true;
				}
				public Boolean LABORATORIOIsKey(){
				    return false;
				}
				public Integer LABORATORIOLength(){
				    return 500;
				}
				public Integer LABORATORIOPrecision(){
				    return 0;
				}
				public String LABORATORIODefault(){
				
					return null;
				
				}
				public String LABORATORIOComment(){
				
				    return "";
				
				}
				public String LABORATORIOPattern(){
				
					return "";
				
				}
				public String LABORATORIOOriginalDbColumnName(){
				
					return "LABORATORIO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NOMBRE_COMERCIAL = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NOMBRE_COMERCIAL = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NOMBRE_COMERCIAL,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NOMBRE_COMERCIAL,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",TIPO="+String.valueOf(TIPO));
		sb.append(",NOMBRE_COMERCIAL="+NOMBRE_COMERCIAL);
		sb.append(",LABORATORIO="+LABORATORIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_27Struct implements routines.system.IPersistableRow<after_tOracleInput_27Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal TIPO;

				public BigDecimal getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 0;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return "";
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public String NOMBRE_COMERCIAL;

				public String getNOMBRE_COMERCIAL () {
					return this.NOMBRE_COMERCIAL;
				}

				public Boolean NOMBRE_COMERCIALIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_COMERCIALIsKey(){
				    return false;
				}
				public Integer NOMBRE_COMERCIALLength(){
				    return 150;
				}
				public Integer NOMBRE_COMERCIALPrecision(){
				    return 0;
				}
				public String NOMBRE_COMERCIALDefault(){
				
					return null;
				
				}
				public String NOMBRE_COMERCIALComment(){
				
				    return "";
				
				}
				public String NOMBRE_COMERCIALPattern(){
				
					return "";
				
				}
				public String NOMBRE_COMERCIALOriginalDbColumnName(){
				
					return "NOMBRE_COMERCIAL";
				
				}

				
			    public String LABORATORIO;

				public String getLABORATORIO () {
					return this.LABORATORIO;
				}

				public Boolean LABORATORIOIsNullable(){
				    return true;
				}
				public Boolean LABORATORIOIsKey(){
				    return false;
				}
				public Integer LABORATORIOLength(){
				    return 500;
				}
				public Integer LABORATORIOPrecision(){
				    return 0;
				}
				public String LABORATORIODefault(){
				
					return null;
				
				}
				public String LABORATORIOComment(){
				
				    return "";
				
				}
				public String LABORATORIOPattern(){
				
					return "";
				
				}
				public String LABORATORIOOriginalDbColumnName(){
				
					return "LABORATORIO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NOMBRE_COMERCIAL = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NOMBRE_COMERCIAL = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NOMBRE_COMERCIAL,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NOMBRE_COMERCIAL,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",TIPO="+String.valueOf(TIPO));
		sb.append(",NOMBRE_COMERCIAL="+NOMBRE_COMERCIAL);
		sb.append(",LABORATORIO="+LABORATORIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_27_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_29Process(globalMap);
		tOracleInput_28Process(globalMap);

		row39Struct row39 = new row39Struct();
InsertarInsumosStruct InsertarInsumos = new InsertarInsumosStruct();
ActualizarInsumosStruct ActualizarInsumos = new ActualizarInsumosStruct();





	
	/**
	 * [tOracleOutput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_18", false);
		start_Hash.put("tOracleOutput_18", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"InsertarInsumos");
					}
				
		int tos_count_tOracleOutput_18 = 0;
		






    
    int nb_line_tOracleOutput_18 = 0;
    int nb_line_update_tOracleOutput_18 = 0;
    int nb_line_inserted_tOracleOutput_18 = 0;
    int nb_line_deleted_tOracleOutput_18 = 0;
    int nb_line_rejected_tOracleOutput_18 = 0;

    int tmp_batchUpdateCount_tOracleOutput_18 = 0;

    int deletedCount_tOracleOutput_18=0;
    int updatedCount_tOracleOutput_18=0;
    int insertedCount_tOracleOutput_18=0;
    int rowsToCommitCount_tOracleOutput_18=0;
    int rejectedCount_tOracleOutput_18=0;

    boolean whetherReject_tOracleOutput_18 = false;

    java.sql.Connection conn_tOracleOutput_18 = null;

    //optional table
    String dbschema_tOracleOutput_18 = null;
    String tableName_tOracleOutput_18 = null;
        dbschema_tOracleOutput_18 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_18 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_18=0;

        if(dbschema_tOracleOutput_18 == null || dbschema_tOracleOutput_18.trim().length() == 0) {
            tableName_tOracleOutput_18 = ("BVAC_INSUMOS");
        } else {
            tableName_tOracleOutput_18 = dbschema_tOracleOutput_18 + "." + ("BVAC_INSUMOS");
        }
                String insert_tOracleOutput_18 = "INSERT INTO " + tableName_tOracleOutput_18 + " (ID,TIPO,NOMBRE_COMERCIAL,LABORATORIO) VALUES (?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_18 = conn_tOracleOutput_18.prepareStatement(insert_tOracleOutput_18);
                        resourceMap.put("pstmt_tOracleOutput_18", pstmt_tOracleOutput_18);





 



/**
 * [tOracleOutput_18 begin ] stop
 */




	
	/**
	 * [tOracleOutput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_19", false);
		start_Hash.put("tOracleOutput_19", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_19";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ActualizarInsumos");
					}
				
		int tos_count_tOracleOutput_19 = 0;
		






        int updateKeyCount_tOracleOutput_19 = 1;
        if(updateKeyCount_tOracleOutput_19 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_19 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_19 = 0;
    int nb_line_update_tOracleOutput_19 = 0;
    int nb_line_inserted_tOracleOutput_19 = 0;
    int nb_line_deleted_tOracleOutput_19 = 0;
    int nb_line_rejected_tOracleOutput_19 = 0;

    int tmp_batchUpdateCount_tOracleOutput_19 = 0;

    int deletedCount_tOracleOutput_19=0;
    int updatedCount_tOracleOutput_19=0;
    int insertedCount_tOracleOutput_19=0;
    int rowsToCommitCount_tOracleOutput_19=0;
    int rejectedCount_tOracleOutput_19=0;

    boolean whetherReject_tOracleOutput_19 = false;

    java.sql.Connection conn_tOracleOutput_19 = null;

    //optional table
    String dbschema_tOracleOutput_19 = null;
    String tableName_tOracleOutput_19 = null;
        dbschema_tOracleOutput_19 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_19 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_19=0;

        if(dbschema_tOracleOutput_19 == null || dbschema_tOracleOutput_19.trim().length() == 0) {
            tableName_tOracleOutput_19 = ("BVAC_INSUMOS");
        } else {
            tableName_tOracleOutput_19 = dbschema_tOracleOutput_19 + "." + ("BVAC_INSUMOS");
        }
                String update_tOracleOutput_19 = "UPDATE " + tableName_tOracleOutput_19 + " SET TIPO = ?,NOMBRE_COMERCIAL = ?,LABORATORIO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_19 = conn_tOracleOutput_19.prepareStatement(update_tOracleOutput_19);
                resourceMap.put("pstmt_tOracleOutput_19", pstmt_tOracleOutput_19);





 



/**
 * [tOracleOutput_19 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row39");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) 
					globalMap.get( "tHash_Lookup_row40" ))
					;					
					
	

row40Struct row40HashKey = new row40Struct();
row40Struct row40Default = new row40Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct> tHash_Lookup_row42 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct>) 
					globalMap.get( "tHash_Lookup_row42" ))
					;					
					
	

row42Struct row42HashKey = new row42Struct();
row42Struct row42Default = new row42Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
InsertarInsumosStruct InsertarInsumos_tmp = new InsertarInsumosStruct();
ActualizarInsumosStruct ActualizarInsumos_tmp = new ActualizarInsumosStruct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tOracleInput_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_27", false);
		start_Hash.put("tOracleInput_27", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_27";
	
	
		int tos_count_tOracleInput_27 = 0;
		
	


	
		    int nb_line_tOracleInput_27 = 0;
		    java.sql.Connection conn_tOracleInput_27 = null;
				String driverClass_tOracleInput_27 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_27);
				
			String url_tOracleInput_27 = null;
				url_tOracleInput_27 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_27 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_27 = context.db_origen_Password; 

				String dbPwd_tOracleInput_27 = decryptedPassword_tOracleInput_27;

				
					java.util.Properties atnParamsPrope_tOracleInput_27 = new java.util.Properties();
					atnParamsPrope_tOracleInput_27.put("user",dbUser_tOracleInput_27);
					atnParamsPrope_tOracleInput_27.put("password",dbPwd_tOracleInput_27);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_27.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_27 = java.sql.DriverManager.getConnection(url_tOracleInput_27, atnParamsPrope_tOracleInput_27);
				java.sql.Statement stmtGetTZ_tOracleInput_27 = conn_tOracleInput_27.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_27 = stmtGetTZ_tOracleInput_27.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_27 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_27.next()) {
					sessionTimezone_tOracleInput_27 = rsGetTZ_tOracleInput_27.getString(1);
				}
                                if (!(conn_tOracleInput_27 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_27.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_27.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_27.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_27);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_27).setSessionTimeZone(sessionTimezone_tOracleInput_27);
                                }
		    
			java.sql.Statement stmt_tOracleInput_27 = conn_tOracleInput_27.createStatement();

		    String dbquery_tOracleInput_27 = "\nSELECT DISTINCT \n    PRO.ID,\n    0 AS TIPO,\n    PRO.COMERCIAL     AS NOMBRE_COMERCIAL,    \n    LAB.NOMBRE        "
+"AS LABORATORIO\nFROM VAC_BIOLOGICOS BIO\nINNER JOIN VAC_INVENTARIOS INV ON INV.BIOLOGICO_ID = BIO.ID\nINNER JOIN MED_PRO"
+"DUCTOS  PRO  ON INV.PRODUCTOS_ID = PRO.ID\nLEFT JOIN GEN_PROVEEDORES LAB  ON PRO.FABRICANTE = LAB.ID\nWHERE BIO.ESTREGIS"
+"TRO_ID = 1\nUNION\nSELECT DISTINCT\n    PRO.ID,\n    1 AS TIPO,\n    PRO.COMERCIAL   AS NOMBRE_COMERCIAL,\n    LAB.NOMBR"
+"E      AS LABORATORIO\nFROM\n    VAC_CALIBRES   CAL\n    INNER JOIN VAC_INVENTARIOS INV ON INV.PRODUCTOS_ID = CAL.PRODUC"
+"TO_ID\n    INNER JOIN MED_PRODUCTOS   PRO ON CAL.PRODUCTO_ID = PRO.ID\n    LEFT JOIN GEN_PROVEEDORES  LAB ON PRO.FABRICA"
+"NTE = LAB.ID\nWHERE CAL.ESTREGISTRO_ID = 1\nUNION\nSELECT DISTINCT\n    PRO.ID,\n    2 AS TIPO,\n    PRO.COMERCIAL   AS "
+"NOMBRE_COMERCIAL,\n    LAB.NOMBRE      AS LABORATORIO\nFROM VAC_DILUYENTES DIL\nINNER JOIN MED_INVENTARIOS MINV ON DIL.M"
+"INVENTARIO_ID = MINV.ID\nINNER JOIN MED_PRODUCTOS   PRO  ON MINV.PRODUCTOS_ID = PRO.ID\nLEFT JOIN GEN_PROVEEDORES  LAB  "
+"ON PRO.FABRICANTE = LAB.ID\n";
		    

		    globalMap.put("tOracleInput_27_QUERY",dbquery_tOracleInput_27);

		    java.sql.ResultSet rs_tOracleInput_27 = null;

		    try {
		    	rs_tOracleInput_27 = stmt_tOracleInput_27.executeQuery(dbquery_tOracleInput_27);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_27 = rs_tOracleInput_27.getMetaData();
		    	int colQtyInRs_tOracleInput_27 = rsmd_tOracleInput_27.getColumnCount();

		    String tmpContent_tOracleInput_27 = null;
		    
		    
		    while (rs_tOracleInput_27.next()) {
		        nb_line_tOracleInput_27++;
		        
							if(colQtyInRs_tOracleInput_27 < 1) {
								row39.ID = null;
							} else {
		                          
					if(rs_tOracleInput_27.getObject(1) != null) {
						row39.ID = rs_tOracleInput_27.getBigDecimal(1);
					} else {
				
						row39.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_27 < 2) {
								row39.TIPO = null;
							} else {
		                          
					if(rs_tOracleInput_27.getObject(2) != null) {
						row39.TIPO = rs_tOracleInput_27.getBigDecimal(2);
					} else {
				
						row39.TIPO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_27 < 3) {
								row39.NOMBRE_COMERCIAL = null;
							} else {
	                         		
        	row39.NOMBRE_COMERCIAL = routines.system.JDBCUtil.getString(rs_tOracleInput_27, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_27 < 4) {
								row39.LABORATORIO = null;
							} else {
	                         		
        	row39.LABORATORIO = routines.system.JDBCUtil.getString(rs_tOracleInput_27, 4, false);
		                    }
					




 



/**
 * [tOracleInput_27 begin ] stop
 */
	
	/**
	 * [tOracleInput_27 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_27";
	
	

 


	tos_count_tOracleInput_27++;

/**
 * [tOracleInput_27 main ] stop
 */
	
	/**
	 * [tOracleInput_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_27";
	
	

 



/**
 * [tOracleInput_27 process_data_begin ] stop
 */

	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row39"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
						row40Struct row40 = null;
					
						row42Struct row42 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_10 = false;
		boolean mainRowRejected_tMap_10 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row40" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow40 = false;
       		  	    	
       		  	    	
 							row40Struct row40ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_10 = false;
								
                        		    		    row40HashKey.ID = row39.ID ;
                        		    		
                        		    		    row40HashKey.TIPO = row39.TIPO ;
                        		    		
                        		    		    row40HashKey.NOMBRE_COMERCIAL = row39.NOMBRE_COMERCIAL ;
                        		    		
                        		    		    row40HashKey.LABORATORIO = row39.LABORATORIO ;
                        		    		

								
		                        	row40HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row40.lookup( row40HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row40Struct fromLookup_row40 = null;
							row40 = row40Default;
										 
							
								 
							
							
								if (tHash_Lookup_row40 !=null && tHash_Lookup_row40.hasNext()) { // G 099
								
							
								
								fromLookup_row40 = tHash_Lookup_row40.next();

							
							
								} // G 099
							
							

							if(fromLookup_row40 != null) {
								row40 = fromLookup_row40;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_10 = false;
								
                        		    		    row42HashKey.ID = row39.ID ;
                        		    		

								
		                        	row42HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								 
							
							
								if (tHash_Lookup_row42 !=null && tHash_Lookup_row42.hasNext()) { // G 099
								
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							
							
								} // G 099
							
							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

InsertarInsumos = null;
ActualizarInsumos = null;


// # Output table : 'InsertarInsumos'
// # Filter conditions 
if( 

row42.ID == null

 ) {
InsertarInsumos_tmp.ID = row39.ID ;
InsertarInsumos_tmp.TIPO = row39.TIPO ;
InsertarInsumos_tmp.NOMBRE_COMERCIAL = row39.NOMBRE_COMERCIAL ;
InsertarInsumos_tmp.LABORATORIO = row39.LABORATORIO ;
InsertarInsumos = InsertarInsumos_tmp;
} // closing filter/reject

// # Output table : 'ActualizarInsumos'
// # Filter conditions 
if( 

row42.ID != null &&  row40.ID == null

 ) {
ActualizarInsumos_tmp.ID = row39.ID ;
ActualizarInsumos_tmp.TIPO = row39.TIPO ;
ActualizarInsumos_tmp.NOMBRE_COMERCIAL = row39.NOMBRE_COMERCIAL ;
ActualizarInsumos_tmp.LABORATORIO = row39.LABORATORIO ;
ActualizarInsumos = ActualizarInsumos_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "InsertarInsumos"
if(InsertarInsumos != null) { 



	
	/**
	 * [tOracleOutput_18 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"InsertarInsumos"
						
						);
					}
					



        whetherReject_tOracleOutput_18 = false;
                        pstmt_tOracleOutput_18.setBigDecimal(1, InsertarInsumos.ID);

                        pstmt_tOracleOutput_18.setBigDecimal(2, InsertarInsumos.TIPO);

                        if(InsertarInsumos.NOMBRE_COMERCIAL == null) {
pstmt_tOracleOutput_18.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_18.setString(3, InsertarInsumos.NOMBRE_COMERCIAL);
}

                        if(InsertarInsumos.LABORATORIO == null) {
pstmt_tOracleOutput_18.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_18.setString(4, InsertarInsumos.LABORATORIO);
}

                try {
                    nb_line_tOracleOutput_18++;
                    int processedCount_tOracleOutput_18 = pstmt_tOracleOutput_18.executeUpdate();
                    insertedCount_tOracleOutput_18 += processedCount_tOracleOutput_18;
                    rowsToCommitCount_tOracleOutput_18 += processedCount_tOracleOutput_18;
                } catch(java.lang.Exception e_tOracleOutput_18) {
globalMap.put("tOracleOutput_18_ERROR_MESSAGE",e_tOracleOutput_18.getMessage());
                    whetherReject_tOracleOutput_18 = true;
                            System.err.print(e_tOracleOutput_18.getMessage());
                }

 


	tos_count_tOracleOutput_18++;

/**
 * [tOracleOutput_18 main ] stop
 */
	
	/**
	 * [tOracleOutput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	

 



/**
 * [tOracleOutput_18 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	

 



/**
 * [tOracleOutput_18 process_data_end ] stop
 */

} // End of branch "InsertarInsumos"




// Start of branch "ActualizarInsumos"
if(ActualizarInsumos != null) { 



	
	/**
	 * [tOracleOutput_19 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_19";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ActualizarInsumos"
						
						);
					}
					



        whetherReject_tOracleOutput_19 = false;
                    pstmt_tOracleOutput_19.setBigDecimal(1, ActualizarInsumos.TIPO);

                    if(ActualizarInsumos.NOMBRE_COMERCIAL == null) {
pstmt_tOracleOutput_19.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_19.setString(2, ActualizarInsumos.NOMBRE_COMERCIAL);
}

                    if(ActualizarInsumos.LABORATORIO == null) {
pstmt_tOracleOutput_19.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_19.setString(3, ActualizarInsumos.LABORATORIO);
}


                    pstmt_tOracleOutput_19.setBigDecimal(4 + count_tOracleOutput_19, ActualizarInsumos.ID);

                try {
                    nb_line_tOracleOutput_19++;
                    int processedCount_tOracleOutput_19 = pstmt_tOracleOutput_19.executeUpdate();
                    updatedCount_tOracleOutput_19 += processedCount_tOracleOutput_19;
                    rowsToCommitCount_tOracleOutput_19 += processedCount_tOracleOutput_19;
                } catch(java.lang.Exception e_tOracleOutput_19) {
globalMap.put("tOracleOutput_19_ERROR_MESSAGE",e_tOracleOutput_19.getMessage());
                    whetherReject_tOracleOutput_19 = true;
                            System.err.print(e_tOracleOutput_19.getMessage());
                }

 


	tos_count_tOracleOutput_19++;

/**
 * [tOracleOutput_19 main ] stop
 */
	
	/**
	 * [tOracleOutput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_19";
	
	

 



/**
 * [tOracleOutput_19 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_19";
	
	

 



/**
 * [tOracleOutput_19 process_data_end ] stop
 */

} // End of branch "ActualizarInsumos"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_27";
	
	

 



/**
 * [tOracleInput_27 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_27 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_27";
	
	

}
}finally{
	if (rs_tOracleInput_27 != null) {
		rs_tOracleInput_27.close();
	}
	if (stmt_tOracleInput_27 != null) {
		stmt_tOracleInput_27.close();
	}
	if(conn_tOracleInput_27 != null && !conn_tOracleInput_27.isClosed()) {
	
			conn_tOracleInput_27.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_27_NB_LINE",nb_line_tOracleInput_27);
 

ok_Hash.put("tOracleInput_27", true);
end_Hash.put("tOracleInput_27", System.currentTimeMillis());




/**
 * [tOracleInput_27 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row40 != null) {
						tHash_Lookup_row40.endGet();
					}
					globalMap.remove( "tHash_Lookup_row40" );

					
					
				
					if(tHash_Lookup_row42 != null) {
						tHash_Lookup_row42.endGet();
					}
					globalMap.remove( "tHash_Lookup_row42" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row39");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tOracleOutput_18 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	
	



	
        if(pstmt_tOracleOutput_18 != null) {
			
				pstmt_tOracleOutput_18.close();
				resourceMap.remove("pstmt_tOracleOutput_18");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_18", true);

	
	nb_line_deleted_tOracleOutput_18=nb_line_deleted_tOracleOutput_18+ deletedCount_tOracleOutput_18;
	nb_line_update_tOracleOutput_18=nb_line_update_tOracleOutput_18 + updatedCount_tOracleOutput_18;
	nb_line_inserted_tOracleOutput_18=nb_line_inserted_tOracleOutput_18 + insertedCount_tOracleOutput_18;
	nb_line_rejected_tOracleOutput_18=nb_line_rejected_tOracleOutput_18 + rejectedCount_tOracleOutput_18;
	
        globalMap.put("tOracleOutput_18_NB_LINE",nb_line_tOracleOutput_18);
        globalMap.put("tOracleOutput_18_NB_LINE_UPDATED",nb_line_update_tOracleOutput_18);
        globalMap.put("tOracleOutput_18_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_18);
        globalMap.put("tOracleOutput_18_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_18);
        globalMap.put("tOracleOutput_18_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_18);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"InsertarInsumos");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_18", true);
end_Hash.put("tOracleOutput_18", System.currentTimeMillis());




/**
 * [tOracleOutput_18 end ] stop
 */




	
	/**
	 * [tOracleOutput_19 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_19";
	
	
	



	
        if(pstmt_tOracleOutput_19 != null) {
			
				pstmt_tOracleOutput_19.close();
				resourceMap.remove("pstmt_tOracleOutput_19");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_19", true);

	
	nb_line_deleted_tOracleOutput_19=nb_line_deleted_tOracleOutput_19+ deletedCount_tOracleOutput_19;
	nb_line_update_tOracleOutput_19=nb_line_update_tOracleOutput_19 + updatedCount_tOracleOutput_19;
	nb_line_inserted_tOracleOutput_19=nb_line_inserted_tOracleOutput_19 + insertedCount_tOracleOutput_19;
	nb_line_rejected_tOracleOutput_19=nb_line_rejected_tOracleOutput_19 + rejectedCount_tOracleOutput_19;
	
        globalMap.put("tOracleOutput_19_NB_LINE",nb_line_tOracleOutput_19);
        globalMap.put("tOracleOutput_19_NB_LINE_UPDATED",nb_line_update_tOracleOutput_19);
        globalMap.put("tOracleOutput_19_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_19);
        globalMap.put("tOracleOutput_19_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_19);
        globalMap.put("tOracleOutput_19_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_19);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ActualizarInsumos");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_19", true);
end_Hash.put("tOracleOutput_19", System.currentTimeMillis());




/**
 * [tOracleOutput_19 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_27:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk18", 0, "ok");
								} 
							
							tOracleInput_30Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_10"
					     			globalMap.remove("tHash_Lookup_row40"); 
				     			
					     			//free memory for "tMap_10"
					     			globalMap.remove("tHash_Lookup_row42"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_27 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_27";
	
	

 



/**
 * [tOracleInput_27 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tOracleOutput_18 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_18") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_18 = null;
                if ((pstmtToClose_tOracleOutput_18 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_18")) != null) {
                    pstmtToClose_tOracleOutput_18.close();
                }
    }
 



/**
 * [tOracleOutput_18 finally ] stop
 */




	
	/**
	 * [tOracleOutput_19 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_19";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_19") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_19 = null;
                if ((pstmtToClose_tOracleOutput_19 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_19")) != null) {
                    pstmtToClose_tOracleOutput_19.close();
                }
    }
 



/**
 * [tOracleOutput_19 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_27_SUBPROCESS_STATE", 1);
	}
	


public static class InsertarLotesStruct implements routines.system.IPersistableRow<InsertarLotesStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String LOTE;

				public String getLOTE () {
					return this.LOTE;
				}

				public Boolean LOTEIsNullable(){
				    return true;
				}
				public Boolean LOTEIsKey(){
				    return false;
				}
				public Integer LOTELength(){
				    return 1024;
				}
				public Integer LOTEPrecision(){
				    return 0;
				}
				public String LOTEDefault(){
				
					return null;
				
				}
				public String LOTEComment(){
				
				    return "";
				
				}
				public String LOTEPattern(){
				
					return "";
				
				}
				public String LOTEOriginalDbColumnName(){
				
					return "LOTE";
				
				}

				
			    public java.util.Date FECHA_VENCIMIENTO;

				public java.util.Date getFECHA_VENCIMIENTO () {
					return this.FECHA_VENCIMIENTO;
				}

				public Boolean FECHA_VENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_VENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_VENCIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_VENCIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_VENCIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_VENCIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_VENCIMIENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_VENCIMIENTOOriginalDbColumnName(){
				
					return "FECHA_VENCIMIENTO";
				
				}

				
			    public BigDecimal INSUMOS_ID;

				public BigDecimal getINSUMOS_ID () {
					return this.INSUMOS_ID;
				}

				public Boolean INSUMOS_IDIsNullable(){
				    return true;
				}
				public Boolean INSUMOS_IDIsKey(){
				    return false;
				}
				public Integer INSUMOS_IDLength(){
				    return 0;
				}
				public Integer INSUMOS_IDPrecision(){
				    return null;
				}
				public String INSUMOS_IDDefault(){
				
					return "";
				
				}
				public String INSUMOS_IDComment(){
				
				    return "";
				
				}
				public String INSUMOS_IDPattern(){
				
					return "";
				
				}
				public String INSUMOS_IDOriginalDbColumnName(){
				
					return "INSUMOS_ID";
				
				}

				
			    public java.util.Date FECHA_INGRESO;

				public java.util.Date getFECHA_INGRESO () {
					return this.FECHA_INGRESO;
				}

				public Boolean FECHA_INGRESOIsNullable(){
				    return false;
				}
				public Boolean FECHA_INGRESOIsKey(){
				    return false;
				}
				public Integer FECHA_INGRESOLength(){
				    return 0;
				}
				public Integer FECHA_INGRESOPrecision(){
				    return 0;
				}
				public String FECHA_INGRESODefault(){
				
					return null;
				
				}
				public String FECHA_INGRESOComment(){
				
				    return "";
				
				}
				public String FECHA_INGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_INGRESOOriginalDbColumnName(){
				
					return "FECHA_INGRESO";
				
				}

				
			    public String TESQUEMA;

				public String getTESQUEMA () {
					return this.TESQUEMA;
				}

				public Boolean TESQUEMAIsNullable(){
				    return true;
				}
				public Boolean TESQUEMAIsKey(){
				    return false;
				}
				public Integer TESQUEMALength(){
				    return 10;
				}
				public Integer TESQUEMAPrecision(){
				    return 0;
				}
				public String TESQUEMADefault(){
				
					return null;
				
				}
				public String TESQUEMAComment(){
				
				    return "";
				
				}
				public String TESQUEMAPattern(){
				
					return "";
				
				}
				public String TESQUEMAOriginalDbColumnName(){
				
					return "TESQUEMA";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 362;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return true;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICO_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.LOTE = readString(dis);
					
					this.FECHA_VENCIMIENTO = readDate(dis);
					
						this.INSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_INGRESO = readDate(dis);
					
					this.TESQUEMA = readString(dis);
					
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.LOTE = readString(dis);
					
					this.FECHA_VENCIMIENTO = readDate(dis);
					
						this.INSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_INGRESO = readDate(dis);
					
					this.TESQUEMA = readString(dis);
					
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_VENCIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_VENCIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",LOTE="+LOTE);
		sb.append(",FECHA_VENCIMIENTO="+String.valueOf(FECHA_VENCIMIENTO));
		sb.append(",INSUMOS_ID="+String.valueOf(INSUMOS_ID));
		sb.append(",FECHA_INGRESO="+String.valueOf(FECHA_INGRESO));
		sb.append(",TESQUEMA="+TESQUEMA);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(InsertarLotesStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ActualizarLotesStruct implements routines.system.IPersistableRow<ActualizarLotesStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String LOTE;

				public String getLOTE () {
					return this.LOTE;
				}

				public Boolean LOTEIsNullable(){
				    return true;
				}
				public Boolean LOTEIsKey(){
				    return false;
				}
				public Integer LOTELength(){
				    return 1024;
				}
				public Integer LOTEPrecision(){
				    return 0;
				}
				public String LOTEDefault(){
				
					return null;
				
				}
				public String LOTEComment(){
				
				    return "";
				
				}
				public String LOTEPattern(){
				
					return "";
				
				}
				public String LOTEOriginalDbColumnName(){
				
					return "LOTE";
				
				}

				
			    public java.util.Date FECHA_VENCIMIENTO;

				public java.util.Date getFECHA_VENCIMIENTO () {
					return this.FECHA_VENCIMIENTO;
				}

				public Boolean FECHA_VENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_VENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_VENCIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_VENCIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_VENCIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_VENCIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_VENCIMIENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_VENCIMIENTOOriginalDbColumnName(){
				
					return "FECHA_VENCIMIENTO";
				
				}

				
			    public BigDecimal INSUMOS_ID;

				public BigDecimal getINSUMOS_ID () {
					return this.INSUMOS_ID;
				}

				public Boolean INSUMOS_IDIsNullable(){
				    return true;
				}
				public Boolean INSUMOS_IDIsKey(){
				    return false;
				}
				public Integer INSUMOS_IDLength(){
				    return 0;
				}
				public Integer INSUMOS_IDPrecision(){
				    return null;
				}
				public String INSUMOS_IDDefault(){
				
					return "";
				
				}
				public String INSUMOS_IDComment(){
				
				    return "";
				
				}
				public String INSUMOS_IDPattern(){
				
					return "";
				
				}
				public String INSUMOS_IDOriginalDbColumnName(){
				
					return "INSUMOS_ID";
				
				}

				
			    public java.util.Date FECHA_INGRESO;

				public java.util.Date getFECHA_INGRESO () {
					return this.FECHA_INGRESO;
				}

				public Boolean FECHA_INGRESOIsNullable(){
				    return false;
				}
				public Boolean FECHA_INGRESOIsKey(){
				    return false;
				}
				public Integer FECHA_INGRESOLength(){
				    return 0;
				}
				public Integer FECHA_INGRESOPrecision(){
				    return 0;
				}
				public String FECHA_INGRESODefault(){
				
					return null;
				
				}
				public String FECHA_INGRESOComment(){
				
				    return "";
				
				}
				public String FECHA_INGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_INGRESOOriginalDbColumnName(){
				
					return "FECHA_INGRESO";
				
				}

				
			    public String TESQUEMA;

				public String getTESQUEMA () {
					return this.TESQUEMA;
				}

				public Boolean TESQUEMAIsNullable(){
				    return true;
				}
				public Boolean TESQUEMAIsKey(){
				    return false;
				}
				public Integer TESQUEMALength(){
				    return 10;
				}
				public Integer TESQUEMAPrecision(){
				    return 0;
				}
				public String TESQUEMADefault(){
				
					return null;
				
				}
				public String TESQUEMAComment(){
				
				    return "";
				
				}
				public String TESQUEMAPattern(){
				
					return "";
				
				}
				public String TESQUEMAOriginalDbColumnName(){
				
					return "TESQUEMA";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 362;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return true;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICO_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ActualizarLotesStruct other = (ActualizarLotesStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ActualizarLotesStruct other) {

		other.ID = this.ID;
	            other.LOTE = this.LOTE;
	            other.FECHA_VENCIMIENTO = this.FECHA_VENCIMIENTO;
	            other.INSUMOS_ID = this.INSUMOS_ID;
	            other.FECHA_INGRESO = this.FECHA_INGRESO;
	            other.TESQUEMA = this.TESQUEMA;
	            other.NOMBRE = this.NOMBRE;
	            other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            
	}

	public void copyKeysDataTo(ActualizarLotesStruct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.LOTE = readString(dis);
					
					this.FECHA_VENCIMIENTO = readDate(dis);
					
						this.INSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_INGRESO = readDate(dis);
					
					this.TESQUEMA = readString(dis);
					
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.LOTE = readString(dis);
					
					this.FECHA_VENCIMIENTO = readDate(dis);
					
						this.INSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_INGRESO = readDate(dis);
					
					this.TESQUEMA = readString(dis);
					
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_VENCIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_VENCIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",LOTE="+LOTE);
		sb.append(",FECHA_VENCIMIENTO="+String.valueOf(FECHA_VENCIMIENTO));
		sb.append(",INSUMOS_ID="+String.valueOf(INSUMOS_ID));
		sb.append(",FECHA_INGRESO="+String.valueOf(FECHA_INGRESO));
		sb.append(",TESQUEMA="+TESQUEMA);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ActualizarLotesStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal LOTES_ID;

				public BigDecimal getLOTES_ID () {
					return this.LOTES_ID;
				}

				public Boolean LOTES_IDIsNullable(){
				    return true;
				}
				public Boolean LOTES_IDIsKey(){
				    return false;
				}
				public Integer LOTES_IDLength(){
				    return 0;
				}
				public Integer LOTES_IDPrecision(){
				    return null;
				}
				public String LOTES_IDDefault(){
				
					return "";
				
				}
				public String LOTES_IDComment(){
				
				    return "";
				
				}
				public String LOTES_IDPattern(){
				
					return "";
				
				}
				public String LOTES_IDOriginalDbColumnName(){
				
					return "LOTES_ID";
				
				}

				
			    public String LOTE;

				public String getLOTE () {
					return this.LOTE;
				}

				public Boolean LOTEIsNullable(){
				    return true;
				}
				public Boolean LOTEIsKey(){
				    return false;
				}
				public Integer LOTELength(){
				    return 25;
				}
				public Integer LOTEPrecision(){
				    return 0;
				}
				public String LOTEDefault(){
				
					return null;
				
				}
				public String LOTEComment(){
				
				    return "";
				
				}
				public String LOTEPattern(){
				
					return "";
				
				}
				public String LOTEOriginalDbColumnName(){
				
					return "LOTE";
				
				}

				
			    public java.util.Date FVENCIMIENTO;

				public java.util.Date getFVENCIMIENTO () {
					return this.FVENCIMIENTO;
				}

				public Boolean FVENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTOLength(){
				    return 0;
				}
				public Integer FVENCIMIENTOPrecision(){
				    return 0;
				}
				public String FVENCIMIENTODefault(){
				
					return null;
				
				}
				public String FVENCIMIENTOComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FVENCIMIENTOOriginalDbColumnName(){
				
					return "FVENCIMIENTO";
				
				}

				
			    public BigDecimal INSUMO_ID;

				public BigDecimal getINSUMO_ID () {
					return this.INSUMO_ID;
				}

				public Boolean INSUMO_IDIsNullable(){
				    return true;
				}
				public Boolean INSUMO_IDIsKey(){
				    return false;
				}
				public Integer INSUMO_IDLength(){
				    return 0;
				}
				public Integer INSUMO_IDPrecision(){
				    return null;
				}
				public String INSUMO_IDDefault(){
				
					return "";
				
				}
				public String INSUMO_IDComment(){
				
				    return "";
				
				}
				public String INSUMO_IDPattern(){
				
					return "";
				
				}
				public String INSUMO_IDOriginalDbColumnName(){
				
					return "INSUMO_ID";
				
				}

				
			    public java.util.Date FINGRESO;

				public java.util.Date getFINGRESO () {
					return this.FINGRESO;
				}

				public Boolean FINGRESOIsNullable(){
				    return true;
				}
				public Boolean FINGRESOIsKey(){
				    return false;
				}
				public Integer FINGRESOLength(){
				    return 0;
				}
				public Integer FINGRESOPrecision(){
				    return 0;
				}
				public String FINGRESODefault(){
				
					return null;
				
				}
				public String FINGRESOComment(){
				
				    return "";
				
				}
				public String FINGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FINGRESOOriginalDbColumnName(){
				
					return "FINGRESO";
				
				}

				
			    public String TESQUEMA;

				public String getTESQUEMA () {
					return this.TESQUEMA;
				}

				public Boolean TESQUEMAIsNullable(){
				    return true;
				}
				public Boolean TESQUEMAIsKey(){
				    return false;
				}
				public Integer TESQUEMALength(){
				    return 10;
				}
				public Integer TESQUEMAPrecision(){
				    return 0;
				}
				public String TESQUEMADefault(){
				
					return null;
				
				}
				public String TESQUEMAComment(){
				
				    return "";
				
				}
				public String TESQUEMAPattern(){
				
					return "";
				
				}
				public String TESQUEMAOriginalDbColumnName(){
				
					return "TESQUEMA";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 362;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return true;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICO_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
					this.LOTE = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.INSUMO_ID = (BigDecimal) dis.readObject();
					
					this.FINGRESO = readDate(dis);
					
					this.TESQUEMA = readString(dis);
					
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
					this.LOTE = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.INSUMO_ID = (BigDecimal) dis.readObject();
					
					this.FINGRESO = readDate(dis);
					
					this.TESQUEMA = readString(dis);
					
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.LOTES_ID);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INSUMO_ID);
					
					// java.util.Date
				
						writeDate(this.FINGRESO,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LOTES_ID);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INSUMO_ID);
					
					// java.util.Date
				
						writeDate(this.FINGRESO,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LOTES_ID="+String.valueOf(LOTES_ID));
		sb.append(",LOTE="+LOTE);
		sb.append(",FVENCIMIENTO="+String.valueOf(FVENCIMIENTO));
		sb.append(",INSUMO_ID="+String.valueOf(INSUMO_ID));
		sb.append(",FINGRESO="+String.valueOf(FINGRESO));
		sb.append(",TESQUEMA="+TESQUEMA);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_30Struct implements routines.system.IPersistableRow<after_tOracleInput_30Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal LOTES_ID;

				public BigDecimal getLOTES_ID () {
					return this.LOTES_ID;
				}

				public Boolean LOTES_IDIsNullable(){
				    return true;
				}
				public Boolean LOTES_IDIsKey(){
				    return false;
				}
				public Integer LOTES_IDLength(){
				    return 0;
				}
				public Integer LOTES_IDPrecision(){
				    return null;
				}
				public String LOTES_IDDefault(){
				
					return "";
				
				}
				public String LOTES_IDComment(){
				
				    return "";
				
				}
				public String LOTES_IDPattern(){
				
					return "";
				
				}
				public String LOTES_IDOriginalDbColumnName(){
				
					return "LOTES_ID";
				
				}

				
			    public String LOTE;

				public String getLOTE () {
					return this.LOTE;
				}

				public Boolean LOTEIsNullable(){
				    return true;
				}
				public Boolean LOTEIsKey(){
				    return false;
				}
				public Integer LOTELength(){
				    return 25;
				}
				public Integer LOTEPrecision(){
				    return 0;
				}
				public String LOTEDefault(){
				
					return null;
				
				}
				public String LOTEComment(){
				
				    return "";
				
				}
				public String LOTEPattern(){
				
					return "";
				
				}
				public String LOTEOriginalDbColumnName(){
				
					return "LOTE";
				
				}

				
			    public java.util.Date FVENCIMIENTO;

				public java.util.Date getFVENCIMIENTO () {
					return this.FVENCIMIENTO;
				}

				public Boolean FVENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTOLength(){
				    return 0;
				}
				public Integer FVENCIMIENTOPrecision(){
				    return 0;
				}
				public String FVENCIMIENTODefault(){
				
					return null;
				
				}
				public String FVENCIMIENTOComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FVENCIMIENTOOriginalDbColumnName(){
				
					return "FVENCIMIENTO";
				
				}

				
			    public BigDecimal INSUMO_ID;

				public BigDecimal getINSUMO_ID () {
					return this.INSUMO_ID;
				}

				public Boolean INSUMO_IDIsNullable(){
				    return true;
				}
				public Boolean INSUMO_IDIsKey(){
				    return false;
				}
				public Integer INSUMO_IDLength(){
				    return 0;
				}
				public Integer INSUMO_IDPrecision(){
				    return null;
				}
				public String INSUMO_IDDefault(){
				
					return "";
				
				}
				public String INSUMO_IDComment(){
				
				    return "";
				
				}
				public String INSUMO_IDPattern(){
				
					return "";
				
				}
				public String INSUMO_IDOriginalDbColumnName(){
				
					return "INSUMO_ID";
				
				}

				
			    public java.util.Date FINGRESO;

				public java.util.Date getFINGRESO () {
					return this.FINGRESO;
				}

				public Boolean FINGRESOIsNullable(){
				    return true;
				}
				public Boolean FINGRESOIsKey(){
				    return false;
				}
				public Integer FINGRESOLength(){
				    return 0;
				}
				public Integer FINGRESOPrecision(){
				    return 0;
				}
				public String FINGRESODefault(){
				
					return null;
				
				}
				public String FINGRESOComment(){
				
				    return "";
				
				}
				public String FINGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FINGRESOOriginalDbColumnName(){
				
					return "FINGRESO";
				
				}

				
			    public String TESQUEMA;

				public String getTESQUEMA () {
					return this.TESQUEMA;
				}

				public Boolean TESQUEMAIsNullable(){
				    return true;
				}
				public Boolean TESQUEMAIsKey(){
				    return false;
				}
				public Integer TESQUEMALength(){
				    return 10;
				}
				public Integer TESQUEMAPrecision(){
				    return 0;
				}
				public String TESQUEMADefault(){
				
					return null;
				
				}
				public String TESQUEMAComment(){
				
				    return "";
				
				}
				public String TESQUEMAPattern(){
				
					return "";
				
				}
				public String TESQUEMAOriginalDbColumnName(){
				
					return "TESQUEMA";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 362;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return true;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICO_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
					this.LOTE = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.INSUMO_ID = (BigDecimal) dis.readObject();
					
					this.FINGRESO = readDate(dis);
					
					this.TESQUEMA = readString(dis);
					
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
					this.LOTE = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.INSUMO_ID = (BigDecimal) dis.readObject();
					
					this.FINGRESO = readDate(dis);
					
					this.TESQUEMA = readString(dis);
					
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.LOTES_ID);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INSUMO_ID);
					
					// java.util.Date
				
						writeDate(this.FINGRESO,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LOTES_ID);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INSUMO_ID);
					
					// java.util.Date
				
						writeDate(this.FINGRESO,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LOTES_ID="+String.valueOf(LOTES_ID));
		sb.append(",LOTE="+LOTE);
		sb.append(",FVENCIMIENTO="+String.valueOf(FVENCIMIENTO));
		sb.append(",INSUMO_ID="+String.valueOf(INSUMO_ID));
		sb.append(",FINGRESO="+String.valueOf(FINGRESO));
		sb.append(",TESQUEMA="+TESQUEMA);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_30_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_31Process(globalMap);
		tOracleInput_32Process(globalMap);

		row43Struct row43 = new row43Struct();
InsertarLotesStruct InsertarLotes = new InsertarLotesStruct();
ActualizarLotesStruct ActualizarLotes = new ActualizarLotesStruct();





	
	/**
	 * [tOracleOutput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_20", false);
		start_Hash.put("tOracleOutput_20", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_20";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"InsertarLotes");
					}
				
		int tos_count_tOracleOutput_20 = 0;
		






    
    int nb_line_tOracleOutput_20 = 0;
    int nb_line_update_tOracleOutput_20 = 0;
    int nb_line_inserted_tOracleOutput_20 = 0;
    int nb_line_deleted_tOracleOutput_20 = 0;
    int nb_line_rejected_tOracleOutput_20 = 0;

    int tmp_batchUpdateCount_tOracleOutput_20 = 0;

    int deletedCount_tOracleOutput_20=0;
    int updatedCount_tOracleOutput_20=0;
    int insertedCount_tOracleOutput_20=0;
    int rowsToCommitCount_tOracleOutput_20=0;
    int rejectedCount_tOracleOutput_20=0;

    boolean whetherReject_tOracleOutput_20 = false;

    java.sql.Connection conn_tOracleOutput_20 = null;

    //optional table
    String dbschema_tOracleOutput_20 = null;
    String tableName_tOracleOutput_20 = null;
        dbschema_tOracleOutput_20 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_20 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_20=0;

        if(dbschema_tOracleOutput_20 == null || dbschema_tOracleOutput_20.trim().length() == 0) {
            tableName_tOracleOutput_20 = ("BVAC_LOTES");
        } else {
            tableName_tOracleOutput_20 = dbschema_tOracleOutput_20 + "." + ("BVAC_LOTES");
        }
                String insert_tOracleOutput_20 = "INSERT INTO " + tableName_tOracleOutput_20 + " (ID,LOTE,FECHA_VENCIMIENTO,INSUMOS_ID,FECHA_INGRESO,TESQUEMA,NOMBRE,BIOLOGICO_ID) VALUES (?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_20 = conn_tOracleOutput_20.prepareStatement(insert_tOracleOutput_20);
                        resourceMap.put("pstmt_tOracleOutput_20", pstmt_tOracleOutput_20);





 



/**
 * [tOracleOutput_20 begin ] stop
 */




	
	/**
	 * [tOracleOutput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_21", false);
		start_Hash.put("tOracleOutput_21", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ActualizarLotes");
					}
				
		int tos_count_tOracleOutput_21 = 0;
		






        int updateKeyCount_tOracleOutput_21 = 1;
        if(updateKeyCount_tOracleOutput_21 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_21 == 8 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_21 = 0;
    int nb_line_update_tOracleOutput_21 = 0;
    int nb_line_inserted_tOracleOutput_21 = 0;
    int nb_line_deleted_tOracleOutput_21 = 0;
    int nb_line_rejected_tOracleOutput_21 = 0;

    int tmp_batchUpdateCount_tOracleOutput_21 = 0;

    int deletedCount_tOracleOutput_21=0;
    int updatedCount_tOracleOutput_21=0;
    int insertedCount_tOracleOutput_21=0;
    int rowsToCommitCount_tOracleOutput_21=0;
    int rejectedCount_tOracleOutput_21=0;

    boolean whetherReject_tOracleOutput_21 = false;

    java.sql.Connection conn_tOracleOutput_21 = null;

    //optional table
    String dbschema_tOracleOutput_21 = null;
    String tableName_tOracleOutput_21 = null;
        dbschema_tOracleOutput_21 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_21 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_21=0;

        if(dbschema_tOracleOutput_21 == null || dbschema_tOracleOutput_21.trim().length() == 0) {
            tableName_tOracleOutput_21 = ("BVAC_LOTES");
        } else {
            tableName_tOracleOutput_21 = dbschema_tOracleOutput_21 + "." + ("BVAC_LOTES");
        }
                String update_tOracleOutput_21 = "UPDATE " + tableName_tOracleOutput_21 + " SET LOTE = ?,FECHA_VENCIMIENTO = ?,INSUMOS_ID = ?,FECHA_INGRESO = ?,TESQUEMA = ?,NOMBRE = ?,BIOLOGICO_ID = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_21 = conn_tOracleOutput_21.prepareStatement(update_tOracleOutput_21);
                resourceMap.put("pstmt_tOracleOutput_21", pstmt_tOracleOutput_21);





 



/**
 * [tOracleOutput_21 begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row43");
					}
				
		int tos_count_tMap_13 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct> tHash_Lookup_row44 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct>) 
					globalMap.get( "tHash_Lookup_row44" ))
					;					
					
	

row44Struct row44HashKey = new row44Struct();
row44Struct row44Default = new row44Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct> tHash_Lookup_row45 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct>) 
					globalMap.get( "tHash_Lookup_row45" ))
					;					
					
	

row45Struct row45HashKey = new row45Struct();
row45Struct row45Default = new row45Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
InsertarLotesStruct InsertarLotes_tmp = new InsertarLotesStruct();
ActualizarLotesStruct ActualizarLotes_tmp = new ActualizarLotesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */



	
	/**
	 * [tOracleInput_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_30", false);
		start_Hash.put("tOracleInput_30", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_30";
	
	
		int tos_count_tOracleInput_30 = 0;
		
	


	
		    int nb_line_tOracleInput_30 = 0;
		    java.sql.Connection conn_tOracleInput_30 = null;
				conn_tOracleInput_30 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_30 = false;
				boolean isConnectionWrapped_tOracleInput_30 = !(conn_tOracleInput_30 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_30.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_30 = null;
                if (isConnectionWrapped_tOracleInput_30) {
					unwrappedOraConn_tOracleInput_30 = conn_tOracleInput_30.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_30 != null) {
                        isTimeZoneNull_tOracleInput_30 = (unwrappedOraConn_tOracleInput_30.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_30 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_30).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_30) {
					java.sql.Statement stmtGetTZ_tOracleInput_30 = conn_tOracleInput_30.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_30 = stmtGetTZ_tOracleInput_30.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_30 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_30.next()) {
						sessionTimezone_tOracleInput_30 = rsGetTZ_tOracleInput_30.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_30 && unwrappedOraConn_tOracleInput_30 != null) {
                        unwrappedOraConn_tOracleInput_30.setSessionTimeZone(sessionTimezone_tOracleInput_30);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_30).setSessionTimeZone(sessionTimezone_tOracleInput_30);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_30 = conn_tOracleInput_30.createStatement();

		    String dbquery_tOracleInput_30 = "\nSELECT\n    MINV.ID AS LOTES_ID,\n    TRIM(MINV.LOTE) AS LOTE,\n    MINV.FVENCIMIENTO,        \n    MINV.PRODUCTOS_ID"
+" AS INSUMO_ID,\n    MINV.FECHA AS FINGRESO,\n    BIO.TVACUNA AS TESQUEMA,\n    DECODE(INV.TINVENTARIO, 'VAC', GEN.DESCRI"
+"PCION, 'JER', CAL.NOMBRE) AS NOMBRE,\n    CASE WHEN INV.TINVENTARIO = 'VAC' THEN BIO.ID END AS BIOLOGICO_ID\nFROM VAC_IN"
+"VENTARIOS INV\nINNER JOIN MED_INVENTARIOS  MINV ON INV.MINVENTARIO_ID = MINV.ID\nLEFT JOIN VAC_CALIBRES      CAL  ON INV"
+".PRODUCTOS_ID = CAL.PRODUCTO_ID AND INV.TINVENTARIO = 'JER'\nLEFT JOIN VAC_BIOLOGICOS    BIO  ON INV.BIOLOGICO_ID = BIO."
+"ID AND INV.TINVENTARIO = 'VAC'\nLEFT JOIN MED_GENERICOS     GEN  ON BIO.GENERICOS_ID = GEN.ID\nWHERE INV.ESTREGISTRO_ID "
+"= 1 \nUNION \nSELECT         \n    MINV.ID AS LOTES_ID,\n    TRIM(MINV.LOTE) AS LOTE,\n    MINV.FVENCIMIENTO,       \n  "
+"  MINV.PRODUCTOS_ID AS INSUMO_ID,\n    MINV.FECHA  AS FINGRESO,\n    BIO.TVACUNA AS TESQUEMA,\n    'Diluyente - ' || GEN"
+".DESCRIPCION AS NOMBRE,\n    CASE WHEN VIND.TINVENTARIO = 'VAC' THEN BIO.ID END AS BIOLOGICO_ID\nFROM VAC_DILUYENTES DIL"
+"\nINNER JOIN MED_INVENTARIOS MINV ON DIL.MINVENTARIO_ID = MINV.ID\nINNER JOIN VAC_INVENTARIOS VIND ON DIL.VINVENTARIO_ID"
+" = VIND.ID\nLEFT JOIN VAC_BIOLOGICOS    BIO ON VIND.BIOLOGICO_ID = BIO.ID AND VIND.TINVENTARIO = 'VAC'\nLEFT JOIN MED_GE"
+"NERICOS     GEN ON BIO.GENERICOS_ID = GEN.ID\nWHERE DIL.ESTREGISTRO_ID = 1\n";
		    

		    globalMap.put("tOracleInput_30_QUERY",dbquery_tOracleInput_30);

		    java.sql.ResultSet rs_tOracleInput_30 = null;

		    try {
		    	rs_tOracleInput_30 = stmt_tOracleInput_30.executeQuery(dbquery_tOracleInput_30);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_30 = rs_tOracleInput_30.getMetaData();
		    	int colQtyInRs_tOracleInput_30 = rsmd_tOracleInput_30.getColumnCount();

		    String tmpContent_tOracleInput_30 = null;
		    
		    
		    while (rs_tOracleInput_30.next()) {
		        nb_line_tOracleInput_30++;
		        
							if(colQtyInRs_tOracleInput_30 < 1) {
								row43.LOTES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_30.getObject(1) != null) {
						row43.LOTES_ID = rs_tOracleInput_30.getBigDecimal(1);
					} else {
				
						row43.LOTES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_30 < 2) {
								row43.LOTE = null;
							} else {
	                         		
        	row43.LOTE = routines.system.JDBCUtil.getString(rs_tOracleInput_30, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_30 < 3) {
								row43.FVENCIMIENTO = null;
							} else {
										
			row43.FVENCIMIENTO = routines.system.JDBCUtil.getDate(rs_tOracleInput_30, 3);
		                    }
							if(colQtyInRs_tOracleInput_30 < 4) {
								row43.INSUMO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_30.getObject(4) != null) {
						row43.INSUMO_ID = rs_tOracleInput_30.getBigDecimal(4);
					} else {
				
						row43.INSUMO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_30 < 5) {
								row43.FINGRESO = null;
							} else {
										
			row43.FINGRESO = routines.system.JDBCUtil.getDate(rs_tOracleInput_30, 5);
		                    }
							if(colQtyInRs_tOracleInput_30 < 6) {
								row43.TESQUEMA = null;
							} else {
	                         		
        	row43.TESQUEMA = routines.system.JDBCUtil.getString(rs_tOracleInput_30, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_30 < 7) {
								row43.NOMBRE = null;
							} else {
	                         		
        	row43.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_30, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_30 < 8) {
								row43.BIOLOGICO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_30.getObject(8) != null) {
						row43.BIOLOGICO_ID = rs_tOracleInput_30.getBigDecimal(8);
					} else {
				
						row43.BIOLOGICO_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_30 begin ] stop
 */
	
	/**
	 * [tOracleInput_30 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_30";
	
	

 


	tos_count_tOracleInput_30++;

/**
 * [tOracleInput_30 main ] stop
 */
	
	/**
	 * [tOracleInput_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_30";
	
	

 



/**
 * [tOracleInput_30 process_data_begin ] stop
 */

	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row43"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		
						row44Struct row44 = null;
					
						row45Struct row45 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_13 = false;
		boolean mainRowRejected_tMap_13 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row44" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow44 = false;
       		  	    	
       		  	    	
 							row44Struct row44ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_13) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_13 = false;
								
                        		    		    row44HashKey.ID = row43.LOTES_ID ;
                        		    		
                        		    		    row44HashKey.LOTE = row43.LOTE ;
                        		    		
                        		    		    row44HashKey.FECHA_VENCIMIENTO = row43.FVENCIMIENTO  == null ? null : new java.util.Date((row43.FVENCIMIENTO ).getTime());
                        		    		
                        		    		    row44HashKey.INSUMOS_ID = row43.INSUMO_ID ;
                        		    		
                        		    		    row44HashKey.FECHA_INGRESO = row43.FINGRESO  == null ? null : new java.util.Date((row43.FINGRESO ).getTime());
                        		    		
                        		    		    row44HashKey.TESQUEMA = row43.TESQUEMA ;
                        		    		
                        		    		    row44HashKey.NOMBRE = row43.NOMBRE ;
                        		    		
                        		    		    row44HashKey.BIOLOGICO_ID = row43.BIOLOGICO_ID ;
                        		    		

								
		                        	row44HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row44.lookup( row44HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row44Struct fromLookup_row44 = null;
							row44 = row44Default;
										 
							
								 
							
							
								if (tHash_Lookup_row44 !=null && tHash_Lookup_row44.hasNext()) { // G 099
								
							
								
								fromLookup_row44 = tHash_Lookup_row44.next();

							
							
								} // G 099
							
							

							if(fromLookup_row44 != null) {
								row44 = fromLookup_row44;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row45" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow45 = false;
       		  	    	
       		  	    	
 							row45Struct row45ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_13) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_13 = false;
								
                        		    		    row45HashKey.ID = row43.LOTES_ID ;
                        		    		

								
		                        	row45HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row45.lookup( row45HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row45Struct fromLookup_row45 = null;
							row45 = row45Default;
										 
							
								 
							
							
								if (tHash_Lookup_row45 !=null && tHash_Lookup_row45.hasNext()) { // G 099
								
							
								
								fromLookup_row45 = tHash_Lookup_row45.next();

							
							
								} // G 099
							
							

							if(fromLookup_row45 != null) {
								row45 = fromLookup_row45;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
        // ###############################
        // # Output tables

InsertarLotes = null;
ActualizarLotes = null;


// # Output table : 'InsertarLotes'
// # Filter conditions 
if( 

row45.ID == null

 ) {
InsertarLotes_tmp.ID = row43.LOTES_ID ;
InsertarLotes_tmp.LOTE = row43.LOTE ;
InsertarLotes_tmp.FECHA_VENCIMIENTO = row43.FVENCIMIENTO ;
InsertarLotes_tmp.INSUMOS_ID = row43.INSUMO_ID ;
InsertarLotes_tmp.FECHA_INGRESO = row43.FINGRESO ;
InsertarLotes_tmp.TESQUEMA = row43.TESQUEMA ;
InsertarLotes_tmp.NOMBRE = row43.NOMBRE ;
InsertarLotes_tmp.BIOLOGICO_ID = row43.BIOLOGICO_ID ;
InsertarLotes = InsertarLotes_tmp;
} // closing filter/reject

// # Output table : 'ActualizarLotes'
// # Filter conditions 
if( 

row45.ID != null &&  row44.ID == null

 ) {
ActualizarLotes_tmp.ID = row43.LOTES_ID ;
ActualizarLotes_tmp.LOTE = row43.LOTE ;
ActualizarLotes_tmp.FECHA_VENCIMIENTO = row43.FVENCIMIENTO ;
ActualizarLotes_tmp.INSUMOS_ID = row43.INSUMO_ID ;
ActualizarLotes_tmp.FECHA_INGRESO = row43.FINGRESO ;
ActualizarLotes_tmp.TESQUEMA = row43.TESQUEMA ;
ActualizarLotes_tmp.NOMBRE = row43.NOMBRE ;
ActualizarLotes_tmp.BIOLOGICO_ID = row43.BIOLOGICO_ID ;
ActualizarLotes = ActualizarLotes_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
	
	/**
	 * [tMap_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	

 



/**
 * [tMap_13 process_data_begin ] stop
 */
// Start of branch "InsertarLotes"
if(InsertarLotes != null) { 



	
	/**
	 * [tOracleOutput_20 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_20";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"InsertarLotes"
						
						);
					}
					



        whetherReject_tOracleOutput_20 = false;
                        pstmt_tOracleOutput_20.setBigDecimal(1, InsertarLotes.ID);

                        if(InsertarLotes.LOTE == null) {
pstmt_tOracleOutput_20.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_20.setString(2, InsertarLotes.LOTE);
}

                        if(InsertarLotes.FECHA_VENCIMIENTO != null) {
pstmt_tOracleOutput_20.setObject(3, new java.sql.Timestamp(InsertarLotes.FECHA_VENCIMIENTO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_20.setNull(3, java.sql.Types.DATE);
}

                        pstmt_tOracleOutput_20.setBigDecimal(4, InsertarLotes.INSUMOS_ID);

                        if(InsertarLotes.FECHA_INGRESO != null) {
pstmt_tOracleOutput_20.setObject(5, new java.sql.Timestamp(InsertarLotes.FECHA_INGRESO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_20.setNull(5, java.sql.Types.DATE);
}

                        if(InsertarLotes.TESQUEMA == null) {
pstmt_tOracleOutput_20.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_20.setString(6, InsertarLotes.TESQUEMA);
}

                        if(InsertarLotes.NOMBRE == null) {
pstmt_tOracleOutput_20.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_20.setString(7, InsertarLotes.NOMBRE);
}

                        pstmt_tOracleOutput_20.setBigDecimal(8, InsertarLotes.BIOLOGICO_ID);

                try {
                    nb_line_tOracleOutput_20++;
                    int processedCount_tOracleOutput_20 = pstmt_tOracleOutput_20.executeUpdate();
                    insertedCount_tOracleOutput_20 += processedCount_tOracleOutput_20;
                    rowsToCommitCount_tOracleOutput_20 += processedCount_tOracleOutput_20;
                } catch(java.lang.Exception e_tOracleOutput_20) {
globalMap.put("tOracleOutput_20_ERROR_MESSAGE",e_tOracleOutput_20.getMessage());
                    whetherReject_tOracleOutput_20 = true;
                            System.err.print(e_tOracleOutput_20.getMessage());
                }

 


	tos_count_tOracleOutput_20++;

/**
 * [tOracleOutput_20 main ] stop
 */
	
	/**
	 * [tOracleOutput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_20";
	
	

 



/**
 * [tOracleOutput_20 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_20";
	
	

 



/**
 * [tOracleOutput_20 process_data_end ] stop
 */

} // End of branch "InsertarLotes"




// Start of branch "ActualizarLotes"
if(ActualizarLotes != null) { 



	
	/**
	 * [tOracleOutput_21 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ActualizarLotes"
						
						);
					}
					



        whetherReject_tOracleOutput_21 = false;
                    if(ActualizarLotes.LOTE == null) {
pstmt_tOracleOutput_21.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(1, ActualizarLotes.LOTE);
}

                    if(ActualizarLotes.FECHA_VENCIMIENTO != null) {
pstmt_tOracleOutput_21.setObject(2, new java.sql.Timestamp(ActualizarLotes.FECHA_VENCIMIENTO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_21.setNull(2, java.sql.Types.DATE);
}

                    pstmt_tOracleOutput_21.setBigDecimal(3, ActualizarLotes.INSUMOS_ID);

                    if(ActualizarLotes.FECHA_INGRESO != null) {
pstmt_tOracleOutput_21.setObject(4, new java.sql.Timestamp(ActualizarLotes.FECHA_INGRESO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_21.setNull(4, java.sql.Types.DATE);
}

                    if(ActualizarLotes.TESQUEMA == null) {
pstmt_tOracleOutput_21.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(5, ActualizarLotes.TESQUEMA);
}

                    if(ActualizarLotes.NOMBRE == null) {
pstmt_tOracleOutput_21.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(6, ActualizarLotes.NOMBRE);
}

                    pstmt_tOracleOutput_21.setBigDecimal(7, ActualizarLotes.BIOLOGICO_ID);


                    pstmt_tOracleOutput_21.setBigDecimal(8 + count_tOracleOutput_21, ActualizarLotes.ID);

                try {
                    nb_line_tOracleOutput_21++;
                    int processedCount_tOracleOutput_21 = pstmt_tOracleOutput_21.executeUpdate();
                    updatedCount_tOracleOutput_21 += processedCount_tOracleOutput_21;
                    rowsToCommitCount_tOracleOutput_21 += processedCount_tOracleOutput_21;
                } catch(java.lang.Exception e_tOracleOutput_21) {
globalMap.put("tOracleOutput_21_ERROR_MESSAGE",e_tOracleOutput_21.getMessage());
                    whetherReject_tOracleOutput_21 = true;
                            System.err.print(e_tOracleOutput_21.getMessage());
                }

 


	tos_count_tOracleOutput_21++;

/**
 * [tOracleOutput_21 main ] stop
 */
	
	/**
	 * [tOracleOutput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	

 



/**
 * [tOracleOutput_21 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	

 



/**
 * [tOracleOutput_21 process_data_end ] stop
 */

} // End of branch "ActualizarLotes"




	
	/**
	 * [tMap_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	

 



/**
 * [tMap_13 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_30";
	
	

 



/**
 * [tOracleInput_30 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_30 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_30";
	
	

}
}finally{
	if (rs_tOracleInput_30 != null) {
		rs_tOracleInput_30.close();
	}
	if (stmt_tOracleInput_30 != null) {
		stmt_tOracleInput_30.close();
	}
}

globalMap.put("tOracleInput_30_NB_LINE",nb_line_tOracleInput_30);
 

ok_Hash.put("tOracleInput_30", true);
end_Hash.put("tOracleInput_30", System.currentTimeMillis());




/**
 * [tOracleInput_30 end ] stop
 */

	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row44 != null) {
						tHash_Lookup_row44.endGet();
					}
					globalMap.remove( "tHash_Lookup_row44" );

					
					
				
					if(tHash_Lookup_row45 != null) {
						tHash_Lookup_row45.endGet();
					}
					globalMap.remove( "tHash_Lookup_row45" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row43");
			  	}
			  	
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tOracleOutput_20 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_20";
	
	
	



	
        if(pstmt_tOracleOutput_20 != null) {
			
				pstmt_tOracleOutput_20.close();
				resourceMap.remove("pstmt_tOracleOutput_20");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_20", true);

	
	nb_line_deleted_tOracleOutput_20=nb_line_deleted_tOracleOutput_20+ deletedCount_tOracleOutput_20;
	nb_line_update_tOracleOutput_20=nb_line_update_tOracleOutput_20 + updatedCount_tOracleOutput_20;
	nb_line_inserted_tOracleOutput_20=nb_line_inserted_tOracleOutput_20 + insertedCount_tOracleOutput_20;
	nb_line_rejected_tOracleOutput_20=nb_line_rejected_tOracleOutput_20 + rejectedCount_tOracleOutput_20;
	
        globalMap.put("tOracleOutput_20_NB_LINE",nb_line_tOracleOutput_20);
        globalMap.put("tOracleOutput_20_NB_LINE_UPDATED",nb_line_update_tOracleOutput_20);
        globalMap.put("tOracleOutput_20_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_20);
        globalMap.put("tOracleOutput_20_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_20);
        globalMap.put("tOracleOutput_20_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_20);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"InsertarLotes");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_20", true);
end_Hash.put("tOracleOutput_20", System.currentTimeMillis());




/**
 * [tOracleOutput_20 end ] stop
 */




	
	/**
	 * [tOracleOutput_21 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	
	



	
        if(pstmt_tOracleOutput_21 != null) {
			
				pstmt_tOracleOutput_21.close();
				resourceMap.remove("pstmt_tOracleOutput_21");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_21", true);

	
	nb_line_deleted_tOracleOutput_21=nb_line_deleted_tOracleOutput_21+ deletedCount_tOracleOutput_21;
	nb_line_update_tOracleOutput_21=nb_line_update_tOracleOutput_21 + updatedCount_tOracleOutput_21;
	nb_line_inserted_tOracleOutput_21=nb_line_inserted_tOracleOutput_21 + insertedCount_tOracleOutput_21;
	nb_line_rejected_tOracleOutput_21=nb_line_rejected_tOracleOutput_21 + rejectedCount_tOracleOutput_21;
	
        globalMap.put("tOracleOutput_21_NB_LINE",nb_line_tOracleOutput_21);
        globalMap.put("tOracleOutput_21_NB_LINE_UPDATED",nb_line_update_tOracleOutput_21);
        globalMap.put("tOracleOutput_21_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_21);
        globalMap.put("tOracleOutput_21_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_21);
        globalMap.put("tOracleOutput_21_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_21);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ActualizarLotes");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_21", true);
end_Hash.put("tOracleOutput_21", System.currentTimeMillis());




/**
 * [tOracleOutput_21 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_30:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk22", 0, "ok");
								} 
							
							tFixedFlowInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_13"
					     			globalMap.remove("tHash_Lookup_row44"); 
				     			
					     			//free memory for "tMap_13"
					     			globalMap.remove("tHash_Lookup_row45"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_30 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_30";
	
	

 



/**
 * [tOracleInput_30 finally ] stop
 */

	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tOracleOutput_20 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_20";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_20") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_20 = null;
                if ((pstmtToClose_tOracleOutput_20 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_20")) != null) {
                    pstmtToClose_tOracleOutput_20.close();
                }
    }
 



/**
 * [tOracleOutput_20 finally ] stop
 */




	
	/**
	 * [tOracleOutput_21 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_21") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_21 = null;
                if ((pstmtToClose_tOracleOutput_21 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_21")) != null) {
                    pstmtToClose_tOracleOutput_21.close();
                }
    }
 



/**
 * [tOracleOutput_21 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_30_SUBPROCESS_STATE", 1);
	}
	


public static class row52Struct implements routines.system.IPersistableRow<row52Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public String Sproc;

				public String getSproc () {
					return this.Sproc;
				}

				public Boolean SprocIsNullable(){
				    return true;
				}
				public Boolean SprocIsKey(){
				    return false;
				}
				public Integer SprocLength(){
				    return null;
				}
				public Integer SprocPrecision(){
				    return null;
				}
				public String SprocDefault(){
				
					return null;
				
				}
				public String SprocComment(){
				
				    return "";
				
				}
				public String SprocPattern(){
				
					return "";
				
				}
				public String SprocOriginalDbColumnName(){
				
					return "Sproc";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.Sproc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.Sproc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Sproc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Sproc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Sproc="+Sproc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row52Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row50Struct implements routines.system.IPersistableRow<row50Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public String Sproc;

				public String getSproc () {
					return this.Sproc;
				}

				public Boolean SprocIsNullable(){
				    return true;
				}
				public Boolean SprocIsKey(){
				    return false;
				}
				public Integer SprocLength(){
				    return null;
				}
				public Integer SprocPrecision(){
				    return null;
				}
				public String SprocDefault(){
				
					return null;
				
				}
				public String SprocComment(){
				
				    return "";
				
				}
				public String SprocPattern(){
				
					return "";
				
				}
				public String SprocOriginalDbColumnName(){
				
					return "Sproc";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.Sproc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.Sproc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Sproc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Sproc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Sproc="+Sproc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row50Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row50Struct row50 = new row50Struct();
row52Struct row52 = new row52Struct();





	
	/**
	 * [tJavaRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_7", false);
		start_Hash.put("tJavaRow_7", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row52");
					}
				
		int tos_count_tJavaRow_7 = 0;
		

int nb_line_tJavaRow_7 = 0;

 



/**
 * [tJavaRow_7 begin ] stop
 */



	
	/**
	 * [tOracleSP_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_2", false);
		start_Hash.put("tOracleSP_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row50");
					}
				
		int tos_count_tOracleSP_2 = 0;
		

	java.sql.Connection connection_tOracleSP_2 = null;
	connection_tOracleSP_2 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_2 = connection_tOracleSP_2.prepareCall("{call " + "REP.InsVacNivel" + "(?)}");

java.sql.Timestamp tmpDate_tOracleSP_2;
String tmpString_tOracleSP_2;

 



/**
 * [tOracleSP_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";
	
	
		int tos_count_tFixedFlowInput_3 = 0;
		

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		row50.Sproc = null;        	            	
    	            	

 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_2 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row50"
						
						);
					}
					

			// code for the argument 1 (Sproc) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_2.registerOutParameter(1, java.sql.Types.VARCHAR);
		statement_tOracleSP_2.execute();
		
									row52.Sproc = statement_tOracleSP_2.getString(1);
									
									if (statement_tOracleSP_2.wasNull()) {
										row52.Sproc = null;
									}
									

 


	tos_count_tOracleSP_2++;

/**
 * [tOracleSP_2 main ] stop
 */
	
	/**
	 * [tOracleSP_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_7 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row52"
						
						);
					}
					

    
/*Convierte el string a un objeto json*/
JSONObject data = new JSONObject(row52.Sproc);

/*Obtiene la variable estado*/
context.ESTADO_PROC = Integer.parseInt(data.getString("State")); 

/*Obtiene la variable mensaje*/
context.MENSAJE_PROC = URLDecoder.decode(data.getString("Message"), "UTF-8");

/*Valida si el estado de ejecución fue erróneo y complementa el mensaje*/

if ( context.ESTADO_PROC.equals(0) ) {//Error en la ejecución del procedimiento estado = 0
	context.MENSAJE_PROC = context.MENSAJE_PROC + " Código SQL: "+data.getString("Sqlcode")+ ", Mensaje de error SQL: "+URLDecoder.decode(data.getString("Sqlerrm"), "UTF-8")+", Traza del error: "+URLDecoder.decode(data.getString("ErrorBacktrace"), "UTF-8")+" Parámetro de entrada periodo: "; 
}

/*Imprime variables de ejecución del procedimiento de control de los indicadores*/
System.out.println("Estado ejecución procedimiento InsVacNivel: "+context.ESTADO_PROC);
System.out.println("Mensaje ejecución procedimiento: "+context.MENSAJE_PROC);
    nb_line_tJavaRow_7++;   

 


	tos_count_tJavaRow_7++;

/**
 * [tJavaRow_7 main ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_end ] stop
 */



	
	/**
	 * [tOracleSP_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tOracleSP_2 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	


	statement_tOracleSP_2.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row50");
			  	}
			  	
 

ok_Hash.put("tOracleSP_2", true);
end_Hash.put("tOracleSP_2", System.currentTimeMillis());




/**
 * [tOracleSP_2 end ] stop
 */

	
	/**
	 * [tJavaRow_7 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

globalMap.put("tJavaRow_7_NB_LINE",nb_line_tJavaRow_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row52");
			  	}
			  	
 

ok_Hash.put("tJavaRow_7", true);
end_Hash.put("tJavaRow_7", System.currentTimeMillis());

   			if (context.ESTADO_PROC.equals(0)) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tDie_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_7 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk23", 0, "ok");
								} 
							
							tOracleInput_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tOracleSP_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_7 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tDie_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_2", false);
		start_Hash.put("tDie_2", System.currentTimeMillis());
		
	
	currentComponent="tDie_2";
	
	
		int tos_count_tDie_2 = 0;
		

 



/**
 * [tDie_2 begin ] stop
 */
	
	/**
	 * [tDie_2 main ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_2", 6, context.MENSAJE_PROC, context.ESTADO_PROC);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_2_DIE_PRIORITY", 6);
	System.err.println(context.MENSAJE_PROC);
	
	globalMap.put("tDie_2_DIE_MESSAGE", context.MENSAJE_PROC);
	globalMap.put("tDie_2_DIE_MESSAGES", context.MENSAJE_PROC);
	
	} catch (Exception | Error e_tDie_2) {
	    globalMap.put("tDie_2_ERROR_MESSAGE",e_tDie_2.getMessage());
		logIgnoredError(String.format("tDie_2 - tDie failed to log message due to internal error: %s", e_tDie_2), e_tDie_2);
	}
	
	currentComponent = "tDie_2";
	status = "failure";
    	errorCode = new Integer(context.ESTADO_PROC);
        ((java.util.Map)threadLocal.get()).put("errorCode", new Integer(context.ESTADO_PROC));
        ((java.util.Map)threadLocal.get()).put("status", "failure");
        globalMap.put("tDie_2_DIE_CODE", errorCode);

    
	

	
	
	System.exit(context.ESTADO_PROC);

 


	tos_count_tDie_2++;

/**
 * [tDie_2 main ] stop
 */
	
	/**
	 * [tDie_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 process_data_begin ] stop
 */
	
	/**
	 * [tDie_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 process_data_end ] stop
 */
	
	/**
	 * [tDie_2 end ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 

ok_Hash.put("tDie_2", true);
end_Hash.put("tDie_2", System.currentTimeMillis());




/**
 * [tDie_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_2 finally ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal ID_PERIODO;

				public BigDecimal getID_PERIODO () {
					return this.ID_PERIODO;
				}

				public Boolean ID_PERIODOIsNullable(){
				    return false;
				}
				public Boolean ID_PERIODOIsKey(){
				    return false;
				}
				public Integer ID_PERIODOLength(){
				    return 0;
				}
				public Integer ID_PERIODOPrecision(){
				    return null;
				}
				public String ID_PERIODODefault(){
				
					return "";
				
				}
				public String ID_PERIODOComment(){
				
				    return "";
				
				}
				public String ID_PERIODOPattern(){
				
					return "";
				
				}
				public String ID_PERIODOOriginalDbColumnName(){
				
					return "ID_PERIODO";
				
				}

				
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 6;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public String FECHA_PERIODO;

				public String getFECHA_PERIODO () {
					return this.FECHA_PERIODO;
				}

				public Boolean FECHA_PERIODOIsNullable(){
				    return true;
				}
				public Boolean FECHA_PERIODOIsKey(){
				    return false;
				}
				public Integer FECHA_PERIODOLength(){
				    return 10;
				}
				public Integer FECHA_PERIODOPrecision(){
				    return 0;
				}
				public String FECHA_PERIODODefault(){
				
					return null;
				
				}
				public String FECHA_PERIODOComment(){
				
				    return "";
				
				}
				public String FECHA_PERIODOPattern(){
				
					return "";
				
				}
				public String FECHA_PERIODOOriginalDbColumnName(){
				
					return "FECHA_PERIODO";
				
				}

				
			    public String ANIO_PERIODO;

				public String getANIO_PERIODO () {
					return this.ANIO_PERIODO;
				}

				public Boolean ANIO_PERIODOIsNullable(){
				    return true;
				}
				public Boolean ANIO_PERIODOIsKey(){
				    return false;
				}
				public Integer ANIO_PERIODOLength(){
				    return 4;
				}
				public Integer ANIO_PERIODOPrecision(){
				    return 0;
				}
				public String ANIO_PERIODODefault(){
				
					return null;
				
				}
				public String ANIO_PERIODOComment(){
				
				    return "";
				
				}
				public String ANIO_PERIODOPattern(){
				
					return "";
				
				}
				public String ANIO_PERIODOOriginalDbColumnName(){
				
					return "ANIO_PERIODO";
				
				}

				
			    public BigDecimal ID_PRIMERDIA;

				public BigDecimal getID_PRIMERDIA () {
					return this.ID_PRIMERDIA;
				}

				public Boolean ID_PRIMERDIAIsNullable(){
				    return true;
				}
				public Boolean ID_PRIMERDIAIsKey(){
				    return false;
				}
				public Integer ID_PRIMERDIALength(){
				    return 0;
				}
				public Integer ID_PRIMERDIAPrecision(){
				    return null;
				}
				public String ID_PRIMERDIADefault(){
				
					return "";
				
				}
				public String ID_PRIMERDIAComment(){
				
				    return "";
				
				}
				public String ID_PRIMERDIAPattern(){
				
					return "";
				
				}
				public String ID_PRIMERDIAOriginalDbColumnName(){
				
					return "ID_PRIMERDIA";
				
				}

				
			    public String PERIODO_PRIMERDIA;

				public String getPERIODO_PRIMERDIA () {
					return this.PERIODO_PRIMERDIA;
				}

				public Boolean PERIODO_PRIMERDIAIsNullable(){
				    return true;
				}
				public Boolean PERIODO_PRIMERDIAIsKey(){
				    return false;
				}
				public Integer PERIODO_PRIMERDIALength(){
				    return 6;
				}
				public Integer PERIODO_PRIMERDIAPrecision(){
				    return 0;
				}
				public String PERIODO_PRIMERDIADefault(){
				
					return null;
				
				}
				public String PERIODO_PRIMERDIAComment(){
				
				    return "";
				
				}
				public String PERIODO_PRIMERDIAPattern(){
				
					return "";
				
				}
				public String PERIODO_PRIMERDIAOriginalDbColumnName(){
				
					return "PERIODO_PRIMERDIA";
				
				}

				
			    public String FECHA_PRIMERDIA;

				public String getFECHA_PRIMERDIA () {
					return this.FECHA_PRIMERDIA;
				}

				public Boolean FECHA_PRIMERDIAIsNullable(){
				    return true;
				}
				public Boolean FECHA_PRIMERDIAIsKey(){
				    return false;
				}
				public Integer FECHA_PRIMERDIALength(){
				    return 10;
				}
				public Integer FECHA_PRIMERDIAPrecision(){
				    return 0;
				}
				public String FECHA_PRIMERDIADefault(){
				
					return null;
				
				}
				public String FECHA_PRIMERDIAComment(){
				
				    return "";
				
				}
				public String FECHA_PRIMERDIAPattern(){
				
					return "";
				
				}
				public String FECHA_PRIMERDIAOriginalDbColumnName(){
				
					return "FECHA_PRIMERDIA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID_PERIODO = (BigDecimal) dis.readObject();
					
					this.PERIODO = readString(dis);
					
					this.FECHA_PERIODO = readString(dis);
					
					this.ANIO_PERIODO = readString(dis);
					
						this.ID_PRIMERDIA = (BigDecimal) dis.readObject();
					
					this.PERIODO_PRIMERDIA = readString(dis);
					
					this.FECHA_PRIMERDIA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID_PERIODO = (BigDecimal) dis.readObject();
					
					this.PERIODO = readString(dis);
					
					this.FECHA_PERIODO = readString(dis);
					
					this.ANIO_PERIODO = readString(dis);
					
						this.ID_PRIMERDIA = (BigDecimal) dis.readObject();
					
					this.PERIODO_PRIMERDIA = readString(dis);
					
					this.FECHA_PRIMERDIA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID_PERIODO);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// String
				
						writeString(this.FECHA_PERIODO,dos);
					
					// String
				
						writeString(this.ANIO_PERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_PRIMERDIA);
					
					// String
				
						writeString(this.PERIODO_PRIMERDIA,dos);
					
					// String
				
						writeString(this.FECHA_PRIMERDIA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_PERIODO);
					
					// String
				
						writeString(this.PERIODO,dos);
					
					// String
				
						writeString(this.FECHA_PERIODO,dos);
					
					// String
				
						writeString(this.ANIO_PERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_PRIMERDIA);
					
					// String
				
						writeString(this.PERIODO_PRIMERDIA,dos);
					
					// String
				
						writeString(this.FECHA_PRIMERDIA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID_PERIODO="+String.valueOf(ID_PERIODO));
		sb.append(",PERIODO="+PERIODO);
		sb.append(",FECHA_PERIODO="+FECHA_PERIODO);
		sb.append(",ANIO_PERIODO="+ANIO_PERIODO);
		sb.append(",ID_PRIMERDIA="+String.valueOf(ID_PRIMERDIA));
		sb.append(",PERIODO_PRIMERDIA="+PERIODO_PRIMERDIA);
		sb.append(",FECHA_PRIMERDIA="+FECHA_PRIMERDIA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tJava_4 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_10", false);
		start_Hash.put("tOracleInput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_10";
	
	
		int tos_count_tOracleInput_10 = 0;
		
	


	
		    int nb_line_tOracleInput_10 = 0;
		    java.sql.Connection conn_tOracleInput_10 = null;
				conn_tOracleInput_10 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_10 = false;
				boolean isConnectionWrapped_tOracleInput_10 = !(conn_tOracleInput_10 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_10.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_10 = null;
                if (isConnectionWrapped_tOracleInput_10) {
					unwrappedOraConn_tOracleInput_10 = conn_tOracleInput_10.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_10 != null) {
                        isTimeZoneNull_tOracleInput_10 = (unwrappedOraConn_tOracleInput_10.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_10 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_10).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_10) {
					java.sql.Statement stmtGetTZ_tOracleInput_10 = conn_tOracleInput_10.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_10 = stmtGetTZ_tOracleInput_10.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_10 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_10.next()) {
						sessionTimezone_tOracleInput_10 = rsGetTZ_tOracleInput_10.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_10 && unwrappedOraConn_tOracleInput_10 != null) {
                        unwrappedOraConn_tOracleInput_10.setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_10).setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_10 = conn_tOracleInput_10.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_10.setFetchSize(2000);


		    String dbquery_tOracleInput_10 = "SELECT  TI.ID AS ID_PERIODO\n        ,TO_CHAR ( TI.FECHA, 'YYYYMM' ) AS PERIODO\n        ,TO_CHAR ( TI.FECHA, 'DD/MM/YY"
+"YY' ) AS FECHA_PERIODO\n        ,TO_CHAR ( TI.FECHA, 'YYYY' ) AS ANIO_PERIODO\n        ,TA.ID AS ID_PRIMERDIA\n        ,"
+"TO_CHAR ( TA.FECHA, 'YYYYMM' ) AS PERIODO_PRIMERDIA\n        ,TO_CHAR ( TA.FECHA, 'DD/MM/YYYY' ) AS FECHA_PRIMERDIA\nFRO"
+"M BGEN_TIEMPOS TI \nFULL OUTER JOIN BGEN_TIEMPOS TA ON TA.DIA = 1 AND TA.MES = 1 AND TA.ANIO = TO_CHAR ( TI.FECHA, 'YYYY"
+"' )\nWHERE TI.DIA = 1\n"+context.CONDITION+"\nORDER BY TO_CHAR ( TI.FECHA, 'YYYYMM' ) ASC";
		    

		    globalMap.put("tOracleInput_10_QUERY",dbquery_tOracleInput_10);

		    java.sql.ResultSet rs_tOracleInput_10 = null;

		    try {
		    	rs_tOracleInput_10 = stmt_tOracleInput_10.executeQuery(dbquery_tOracleInput_10);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_10 = rs_tOracleInput_10.getMetaData();
		    	int colQtyInRs_tOracleInput_10 = rsmd_tOracleInput_10.getColumnCount();

		    String tmpContent_tOracleInput_10 = null;
		    
		    
		    while (rs_tOracleInput_10.next()) {
		        nb_line_tOracleInput_10++;
		        
							if(colQtyInRs_tOracleInput_10 < 1) {
								row10.ID_PERIODO = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(1) != null) {
						row10.ID_PERIODO = rs_tOracleInput_10.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 2) {
								row10.PERIODO = null;
							} else {
	                         		
        	row10.PERIODO = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 3) {
								row10.FECHA_PERIODO = null;
							} else {
	                         		
        	row10.FECHA_PERIODO = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 4) {
								row10.ANIO_PERIODO = null;
							} else {
	                         		
        	row10.ANIO_PERIODO = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 5) {
								row10.ID_PRIMERDIA = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(5) != null) {
						row10.ID_PRIMERDIA = rs_tOracleInput_10.getBigDecimal(5);
					} else {
				
						row10.ID_PRIMERDIA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 6) {
								row10.PERIODO_PRIMERDIA = null;
							} else {
	                         		
        	row10.PERIODO_PRIMERDIA = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 7) {
								row10.FECHA_PRIMERDIA = null;
							} else {
	                         		
        	row10.FECHA_PRIMERDIA = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 7, false);
		                    }
					




 



/**
 * [tOracleInput_10 begin ] stop
 */
	
	/**
	 * [tOracleInput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 


	tos_count_tOracleInput_10++;

/**
 * [tOracleInput_10 main ] stop
 */
	
	/**
	 * [tOracleInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					


    	            
            globalMap.put("row10.ID_PERIODO", row10.ID_PERIODO);
    	            
            globalMap.put("row10.PERIODO", row10.PERIODO);
    	            
            globalMap.put("row10.FECHA_PERIODO", row10.FECHA_PERIODO);
    	            
            globalMap.put("row10.ANIO_PERIODO", row10.ANIO_PERIODO);
    	            
            globalMap.put("row10.ID_PRIMERDIA", row10.ID_PRIMERDIA);
    	            
            globalMap.put("row10.PERIODO_PRIMERDIA", row10.PERIODO_PRIMERDIA);
    	            
            globalMap.put("row10.FECHA_PRIMERDIA", row10.FECHA_PRIMERDIA);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tJava_4++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("Actualiza3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row55", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_37", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row15", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row38", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row51", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Actualiza4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row47", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row33", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row24", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row46", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row55", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row48", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row23", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row46", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_20", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row23", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_37", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_24", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_26", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row22", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Actualiza5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Registra5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk16", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row48", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row28", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_37", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row26", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row51", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row16", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_37", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row36", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row49", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row29", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row31", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_24", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Inserta3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row30", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row32", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Lotes", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row56", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row57", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_37", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row38", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row57", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row53", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row21", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_37", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Inserta4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row37", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Borra2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_37", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("borra", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row20", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row33", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row31", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row49", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_24", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row56", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk9", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_19", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row21", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row19", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row25", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row36", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row18", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row16", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row54", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJava_4);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
		int tos_count_tJava_4 = 0;
		


/*Iguala las variables de contexto con los periodos a pasar*/

context.ID_PERIODO = row10.ID_PERIODO;
context.PERIODO = row10.PERIODO;
context.FECHA_PERIODO = row10.FECHA_PERIODO;
context.ANIO_PERIODO = row10.ANIO_PERIODO;
context.ID_PRIMERDIA = row10.ID_PRIMERDIA;
context.PERIODO_PRIMERDIA = row10.PERIODO_PRIMERDIA;
context.FECHA_PRIMERDIA = row10.FECHA_PRIMERDIA;


/*Imprime en consola*/
System.out.println(" ");
System.out.println("///////////////////////////////////////////////");
System.out.println("ID_PERIODO: "+context.ID_PERIODO);
System.out.println("PERIODO: "+context.PERIODO);
System.out.println("FECHA_PERIODO: "+context.FECHA_PERIODO);
System.out.println("ANIO_PERIODO: "+context.ANIO_PERIODO);
System.out.println("ID_PRIMERDIA: "+context.ID_PRIMERDIA);
System.out.println("PERIODO_PRIMERDIA: "+context.PERIODO_PRIMERDIA);
System.out.println("FECHA_PRIMERDIA: "+context.FECHA_PRIMERDIA);

 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tFixedFlowInput_4Process(globalMap);



/**
 * [tJava_4 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJava_4);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

}
}finally{
	if (rs_tOracleInput_10 != null) {
		rs_tOracleInput_10.close();
	}
	if (stmt_tOracleInput_10 != null) {
		stmt_tOracleInput_10.close();
	}
}

globalMap.put("tOracleInput_10_NB_LINE",nb_line_tOracleInput_10);
 

ok_Hash.put("tOracleInput_10", true);
end_Hash.put("tOracleInput_10", System.currentTimeMillis());




/**
 * [tOracleInput_10 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row54Struct implements routines.system.IPersistableRow<row54Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public String Periodo;

				public String getPeriodo () {
					return this.Periodo;
				}

				public Boolean PeriodoIsNullable(){
				    return true;
				}
				public Boolean PeriodoIsKey(){
				    return false;
				}
				public Integer PeriodoLength(){
				    return null;
				}
				public Integer PeriodoPrecision(){
				    return null;
				}
				public String PeriodoDefault(){
				
					return null;
				
				}
				public String PeriodoComment(){
				
				    return "";
				
				}
				public String PeriodoPattern(){
				
					return "";
				
				}
				public String PeriodoOriginalDbColumnName(){
				
					return "Periodo";
				
				}

				
			    public BigDecimal TiemposId;

				public BigDecimal getTiemposId () {
					return this.TiemposId;
				}

				public Boolean TiemposIdIsNullable(){
				    return true;
				}
				public Boolean TiemposIdIsKey(){
				    return false;
				}
				public Integer TiemposIdLength(){
				    return null;
				}
				public Integer TiemposIdPrecision(){
				    return null;
				}
				public String TiemposIdDefault(){
				
					return null;
				
				}
				public String TiemposIdComment(){
				
				    return "";
				
				}
				public String TiemposIdPattern(){
				
					return "";
				
				}
				public String TiemposIdOriginalDbColumnName(){
				
					return "TiemposId";
				
				}

				
			    public String DiaEjecucion;

				public String getDiaEjecucion () {
					return this.DiaEjecucion;
				}

				public Boolean DiaEjecucionIsNullable(){
				    return true;
				}
				public Boolean DiaEjecucionIsKey(){
				    return false;
				}
				public Integer DiaEjecucionLength(){
				    return null;
				}
				public Integer DiaEjecucionPrecision(){
				    return null;
				}
				public String DiaEjecucionDefault(){
				
					return null;
				
				}
				public String DiaEjecucionComment(){
				
				    return "";
				
				}
				public String DiaEjecucionPattern(){
				
					return "";
				
				}
				public String DiaEjecucionOriginalDbColumnName(){
				
					return "DiaEjecucion";
				
				}

				
			    public String Insert;

				public String getInsert () {
					return this.Insert;
				}

				public Boolean InsertIsNullable(){
				    return true;
				}
				public Boolean InsertIsKey(){
				    return false;
				}
				public Integer InsertLength(){
				    return null;
				}
				public Integer InsertPrecision(){
				    return null;
				}
				public String InsertDefault(){
				
					return null;
				
				}
				public String InsertComment(){
				
				    return "";
				
				}
				public String InsertPattern(){
				
					return "";
				
				}
				public String InsertOriginalDbColumnName(){
				
					return "Insert";
				
				}

				
			    public String Sproc;

				public String getSproc () {
					return this.Sproc;
				}

				public Boolean SprocIsNullable(){
				    return true;
				}
				public Boolean SprocIsKey(){
				    return false;
				}
				public Integer SprocLength(){
				    return null;
				}
				public Integer SprocPrecision(){
				    return null;
				}
				public String SprocDefault(){
				
					return null;
				
				}
				public String SprocComment(){
				
				    return "";
				
				}
				public String SprocPattern(){
				
					return "";
				
				}
				public String SprocOriginalDbColumnName(){
				
					return "Sproc";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.Periodo = readString(dis);
					
						this.TiemposId = (BigDecimal) dis.readObject();
					
					this.DiaEjecucion = readString(dis);
					
					this.Insert = readString(dis);
					
					this.Sproc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.Periodo = readString(dis);
					
						this.TiemposId = (BigDecimal) dis.readObject();
					
					this.DiaEjecucion = readString(dis);
					
					this.Insert = readString(dis);
					
					this.Sproc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Periodo,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TiemposId);
					
					// String
				
						writeString(this.DiaEjecucion,dos);
					
					// String
				
						writeString(this.Insert,dos);
					
					// String
				
						writeString(this.Sproc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Periodo,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TiemposId);
					
					// String
				
						writeString(this.DiaEjecucion,dos);
					
					// String
				
						writeString(this.Insert,dos);
					
					// String
				
						writeString(this.Sproc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Periodo="+Periodo);
		sb.append(",TiemposId="+String.valueOf(TiemposId));
		sb.append(",DiaEjecucion="+DiaEjecucion);
		sb.append(",Insert="+Insert);
		sb.append(",Sproc="+Sproc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row54Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row53Struct implements routines.system.IPersistableRow<row53Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public String Periodo;

				public String getPeriodo () {
					return this.Periodo;
				}

				public Boolean PeriodoIsNullable(){
				    return true;
				}
				public Boolean PeriodoIsKey(){
				    return false;
				}
				public Integer PeriodoLength(){
				    return null;
				}
				public Integer PeriodoPrecision(){
				    return null;
				}
				public String PeriodoDefault(){
				
					return null;
				
				}
				public String PeriodoComment(){
				
				    return "";
				
				}
				public String PeriodoPattern(){
				
					return "";
				
				}
				public String PeriodoOriginalDbColumnName(){
				
					return "Periodo";
				
				}

				
			    public BigDecimal TiemposId;

				public BigDecimal getTiemposId () {
					return this.TiemposId;
				}

				public Boolean TiemposIdIsNullable(){
				    return true;
				}
				public Boolean TiemposIdIsKey(){
				    return false;
				}
				public Integer TiemposIdLength(){
				    return null;
				}
				public Integer TiemposIdPrecision(){
				    return null;
				}
				public String TiemposIdDefault(){
				
					return null;
				
				}
				public String TiemposIdComment(){
				
				    return "";
				
				}
				public String TiemposIdPattern(){
				
					return "";
				
				}
				public String TiemposIdOriginalDbColumnName(){
				
					return "TiemposId";
				
				}

				
			    public String DiaEjecucion;

				public String getDiaEjecucion () {
					return this.DiaEjecucion;
				}

				public Boolean DiaEjecucionIsNullable(){
				    return true;
				}
				public Boolean DiaEjecucionIsKey(){
				    return false;
				}
				public Integer DiaEjecucionLength(){
				    return null;
				}
				public Integer DiaEjecucionPrecision(){
				    return null;
				}
				public String DiaEjecucionDefault(){
				
					return null;
				
				}
				public String DiaEjecucionComment(){
				
				    return "";
				
				}
				public String DiaEjecucionPattern(){
				
					return "";
				
				}
				public String DiaEjecucionOriginalDbColumnName(){
				
					return "DiaEjecucion";
				
				}

				
			    public String Insert;

				public String getInsert () {
					return this.Insert;
				}

				public Boolean InsertIsNullable(){
				    return true;
				}
				public Boolean InsertIsKey(){
				    return false;
				}
				public Integer InsertLength(){
				    return null;
				}
				public Integer InsertPrecision(){
				    return null;
				}
				public String InsertDefault(){
				
					return null;
				
				}
				public String InsertComment(){
				
				    return "";
				
				}
				public String InsertPattern(){
				
					return "";
				
				}
				public String InsertOriginalDbColumnName(){
				
					return "Insert";
				
				}

				
			    public String Sproc;

				public String getSproc () {
					return this.Sproc;
				}

				public Boolean SprocIsNullable(){
				    return true;
				}
				public Boolean SprocIsKey(){
				    return false;
				}
				public Integer SprocLength(){
				    return null;
				}
				public Integer SprocPrecision(){
				    return null;
				}
				public String SprocDefault(){
				
					return null;
				
				}
				public String SprocComment(){
				
				    return "";
				
				}
				public String SprocPattern(){
				
					return "";
				
				}
				public String SprocOriginalDbColumnName(){
				
					return "Sproc";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.Periodo = readString(dis);
					
						this.TiemposId = (BigDecimal) dis.readObject();
					
					this.DiaEjecucion = readString(dis);
					
					this.Insert = readString(dis);
					
					this.Sproc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.Periodo = readString(dis);
					
						this.TiemposId = (BigDecimal) dis.readObject();
					
					this.DiaEjecucion = readString(dis);
					
					this.Insert = readString(dis);
					
					this.Sproc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Periodo,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TiemposId);
					
					// String
				
						writeString(this.DiaEjecucion,dos);
					
					// String
				
						writeString(this.Insert,dos);
					
					// String
				
						writeString(this.Sproc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Periodo,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TiemposId);
					
					// String
				
						writeString(this.DiaEjecucion,dos);
					
					// String
				
						writeString(this.Insert,dos);
					
					// String
				
						writeString(this.Sproc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Periodo="+Periodo);
		sb.append(",TiemposId="+String.valueOf(TiemposId));
		sb.append(",DiaEjecucion="+DiaEjecucion);
		sb.append(",Insert="+Insert);
		sb.append(",Sproc="+Sproc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row53Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row53Struct row53 = new row53Struct();
row54Struct row54 = new row54Struct();





	
	/**
	 * [tJavaRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_8", false);
		start_Hash.put("tJavaRow_8", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row54");
					}
				
		int tos_count_tJavaRow_8 = 0;
		

int nb_line_tJavaRow_8 = 0;

 



/**
 * [tJavaRow_8 begin ] stop
 */



	
	/**
	 * [tOracleSP_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_3", false);
		start_Hash.put("tOracleSP_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row53");
					}
				
		int tos_count_tOracleSP_3 = 0;
		

	java.sql.Connection connection_tOracleSP_3 = null;
	connection_tOracleSP_3 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_3 = connection_tOracleSP_3.prepareCall("{call " + "REP.InsSis151" + "(?,?,?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_3;
String tmpString_tOracleSP_3;

 



/**
 * [tOracleSP_3 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_4", false);
		start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_4";
	
	
		int tos_count_tFixedFlowInput_4 = 0;
		

	    for (int i_tFixedFlowInput_4 = 0 ; i_tFixedFlowInput_4 < 1 ; i_tFixedFlowInput_4++) {
	                	            	
    	            		row53.Periodo = context.PERIODO;
    	            	        	            	
    	            		row53.TiemposId = context.ID_PERIODO;
    	            	        	            	
    	            		row53.DiaEjecucion = context.DIA_EJECUCION;
    	            	        	            	
    	            		row53.Insert = null;        	            	
    	            	        	            	
    	            		row53.Sproc = null;        	            	
    	            	

 



/**
 * [tFixedFlowInput_4 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 


	tos_count_tFixedFlowInput_4++;

/**
 * [tFixedFlowInput_4 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_3 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row53"
						
						);
					}
					

			// code for the argument 1 (Periodo) of type 'IN AUTOMAPPING'
    					if (row53.Periodo == null) {
    						statement_tOracleSP_3.setNull(1, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_3.setString(1, row53.Periodo);
    					}
    					
			// code for the argument 2 (TiemposId) of type 'IN AUTOMAPPING'
    					if (row53.TiemposId == null) {
    						statement_tOracleSP_3.setNull(2, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_3.setBigDecimal(2, row53.TiemposId);
    					}
    					
			// code for the argument 3 (DiaEjecucion) of type 'IN AUTOMAPPING'
    					if (row53.DiaEjecucion == null) {
    						statement_tOracleSP_3.setNull(3, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_3.setString(3, row53.DiaEjecucion);
    					}
    					
			// code for the argument 4 (Insert) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_3.registerOutParameter(4, java.sql.Types.VARCHAR);
			// code for the argument 5 (Sproc) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_3.registerOutParameter(5, java.sql.Types.VARCHAR);
		statement_tOracleSP_3.execute();
		
								row54.Periodo = row53.Periodo;
								
								row54.TiemposId = row53.TiemposId;
								
								row54.DiaEjecucion = row53.DiaEjecucion;
								
									row54.Insert = statement_tOracleSP_3.getString(4);
									
									if (statement_tOracleSP_3.wasNull()) {
										row54.Insert = null;
									}
									
									row54.Sproc = statement_tOracleSP_3.getString(5);
									
									if (statement_tOracleSP_3.wasNull()) {
										row54.Sproc = null;
									}
									

 


	tos_count_tOracleSP_3++;

/**
 * [tOracleSP_3 main ] stop
 */
	
	/**
	 * [tOracleSP_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_8 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row54"
						
						);
					}
					

    
/*Convierte el string a un objeto json*/
JSONObject data = new JSONObject(row54.Sproc);

/*Obtiene la variable estado*/
context.ESTADO_PROC = Integer.parseInt(data.getString("State")); 

/*Obtiene la variable mensaje*/
context.MENSAJE_PROC = URLDecoder.decode(data.getString("Message"), "UTF-8");

/*Valida si el estado de ejecución fue erróneo y complementa el mensaje*/

if ( context.ESTADO_PROC.equals(0) ) {//Error en la ejecución del procedimiento estado = 0
	context.MENSAJE_PROC = context.MENSAJE_PROC + " Código SQL: "+data.getString("Sqlcode")+ ", Mensaje de error SQL: "+URLDecoder.decode(data.getString("Sqlerrm"), "UTF-8")+", Traza del error: "+URLDecoder.decode(data.getString("ErrorBacktrace"), "UTF-8")+" Parámetro de entrada periodo: "+ row54.Periodo;   
}

/*Imprime variables de ejecución del procedimiento de control de los indicadores*/
System.out.println("Estado ejecución procedimiento InsSis151: "+context.ESTADO_PROC);
System.out.println("Mensaje ejecución procedimiento: "+context.MENSAJE_PROC);

/*Para pruebas*/
/*
System.out.println(" ");
System.out.println("Consulta insert: "+row54.Insert);
System.out.println(" ");
System.out.println("Consulta update: "+row54.Update);
System.out.println(" ");
System.out.println("Consulta delete: "+row54.Delete);
*/
    nb_line_tJavaRow_8++;   

 


	tos_count_tJavaRow_8++;

/**
 * [tJavaRow_8 main ] stop
 */
	
	/**
	 * [tJavaRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_end ] stop
 */



	
	/**
	 * [tOracleSP_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

        }
        globalMap.put("tFixedFlowInput_4_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_4", true);
end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());




/**
 * [tFixedFlowInput_4 end ] stop
 */

	
	/**
	 * [tOracleSP_3 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	


	statement_tOracleSP_3.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row53");
			  	}
			  	
 

ok_Hash.put("tOracleSP_3", true);
end_Hash.put("tOracleSP_3", System.currentTimeMillis());




/**
 * [tOracleSP_3 end ] stop
 */

	
	/**
	 * [tJavaRow_8 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

globalMap.put("tJavaRow_8_NB_LINE",nb_line_tJavaRow_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row54");
			  	}
			  	
 

ok_Hash.put("tJavaRow_8", true);
end_Hash.put("tJavaRow_8", System.currentTimeMillis());

   			if (context.ESTADO_PROC.equals(0)) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tDie_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_8 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tOracleRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_4 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 finally ] stop
 */

	
	/**
	 * [tOracleSP_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_8 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}
	


public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 6, context.MENSAJE_PROC, context.ESTADO_PROC);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 6);
	System.err.println(context.MENSAJE_PROC);
	
	globalMap.put("tDie_1_DIE_MESSAGE", context.MENSAJE_PROC);
	globalMap.put("tDie_1_DIE_MESSAGES", context.MENSAJE_PROC);
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
    	errorCode = new Integer(context.ESTADO_PROC);
        ((java.util.Map)threadLocal.get()).put("errorCode", new Integer(context.ESTADO_PROC));
        ((java.util.Map)threadLocal.get()).put("status", "failure");
        globalMap.put("tDie_1_DIE_CODE", errorCode);

    
	

	
	
	System.exit(context.ESTADO_PROC);

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_1", false);
		start_Hash.put("tOracleRow_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_1";
	
	
		int tos_count_tOracleRow_1 = 0;
		

	java.sql.Connection conn_tOracleRow_1 = null;
	String query_tOracleRow_1 = "";
	boolean whetherReject_tOracleRow_1 = false;
	int count_tOracleRow_1 = 0;
				conn_tOracleRow_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
			
        resourceMap.put("conn_tOracleRow_1", conn_tOracleRow_1);
        java.sql.Statement stmt_tOracleRow_1 = conn_tOracleRow_1.createStatement();
        resourceMap.put("stmt_tOracleRow_1", stmt_tOracleRow_1);
				int nb_line_deleted_tOracleRow_1 = 0;
			

 



/**
 * [tOracleRow_1 begin ] stop
 */
	
	/**
	 * [tOracleRow_1 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

query_tOracleRow_1 =  "DELETE FROM BVAC_MOVIMIENTOS WHERE TIEMPOS_ID = "  +context.ID_PERIODO;
whetherReject_tOracleRow_1 = false;
globalMap.put("tOracleRow_1_QUERY",query_tOracleRow_1);
try {
		stmt_tOracleRow_1.execute(query_tOracleRow_1);
		
		nb_line_deleted_tOracleRow_1 += stmt_tOracleRow_1.getUpdateCount();
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_1_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_1) {
		
	}
	

 


	tos_count_tOracleRow_1++;

/**
 * [tOracleRow_1 main ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_1 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

	globalMap.put("tOracleRow_1_NB_LINE", count_tOracleRow_1);
        stmt_tOracleRow_1.close();
        resourceMap.remove("stmt_tOracleRow_1");
    resourceMap.put("statementClosed_tOracleRow_1", true);
    resourceMap.put("finish_tOracleRow_1", true);

    globalMap.put("tOracleRow_1_NB_LINE_DELETED",nb_line_deleted_tOracleRow_1);
 

ok_Hash.put("tOracleRow_1", true);
end_Hash.put("tOracleRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tOracleInput_37Process(globalMap);



/**
 * [tOracleRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
								} 
							
							tOracleInput_12Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_1") == null) {
            java.sql.Statement stmtToClose_tOracleRow_1 = null;
            if ((stmtToClose_tOracleRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_1")) != null) {
                stmtToClose_tOracleRow_1.close();
            }
    }
 



/**
 * [tOracleRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class LotesStruct implements routines.system.IPersistableRow<LotesStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal LOTES_ID;

				public BigDecimal getLOTES_ID () {
					return this.LOTES_ID;
				}

				public Boolean LOTES_IDIsNullable(){
				    return false;
				}
				public Boolean LOTES_IDIsKey(){
				    return false;
				}
				public Integer LOTES_IDLength(){
				    return 0;
				}
				public Integer LOTES_IDPrecision(){
				    return null;
				}
				public String LOTES_IDDefault(){
				
					return "";
				
				}
				public String LOTES_IDComment(){
				
				    return "";
				
				}
				public String LOTES_IDPattern(){
				
					return "";
				
				}
				public String LOTES_IDOriginalDbColumnName(){
				
					return "LOTES_ID";
				
				}

				
			    public BigDecimal SALDO_ANTERIOR;

				public BigDecimal getSALDO_ANTERIOR () {
					return this.SALDO_ANTERIOR;
				}

				public Boolean SALDO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean SALDO_ANTERIORIsKey(){
				    return false;
				}
				public Integer SALDO_ANTERIORLength(){
				    return null;
				}
				public Integer SALDO_ANTERIORPrecision(){
				    return null;
				}
				public String SALDO_ANTERIORDefault(){
				
					return null;
				
				}
				public String SALDO_ANTERIORComment(){
				
				    return "";
				
				}
				public String SALDO_ANTERIORPattern(){
				
					return "";
				
				}
				public String SALDO_ANTERIOROriginalDbColumnName(){
				
					return "SALDO_ANTERIOR";
				
				}

				
			    public BigDecimal ENTRADAS;

				public BigDecimal getENTRADAS () {
					return this.ENTRADAS;
				}

				public Boolean ENTRADASIsNullable(){
				    return true;
				}
				public Boolean ENTRADASIsKey(){
				    return false;
				}
				public Integer ENTRADASLength(){
				    return null;
				}
				public Integer ENTRADASPrecision(){
				    return null;
				}
				public String ENTRADASDefault(){
				
					return "";
				
				}
				public String ENTRADASComment(){
				
				    return "";
				
				}
				public String ENTRADASPattern(){
				
					return "";
				
				}
				public String ENTRADASOriginalDbColumnName(){
				
					return "ENTRADAS";
				
				}

				
			    public BigDecimal APLICADAS;

				public BigDecimal getAPLICADAS () {
					return this.APLICADAS;
				}

				public Boolean APLICADASIsNullable(){
				    return true;
				}
				public Boolean APLICADASIsKey(){
				    return false;
				}
				public Integer APLICADASLength(){
				    return null;
				}
				public Integer APLICADASPrecision(){
				    return null;
				}
				public String APLICADASDefault(){
				
					return "";
				
				}
				public String APLICADASComment(){
				
				    return "";
				
				}
				public String APLICADASPattern(){
				
					return "";
				
				}
				public String APLICADASOriginalDbColumnName(){
				
					return "APLICADAS";
				
				}

				
			    public BigDecimal PERDIDAS;

				public BigDecimal getPERDIDAS () {
					return this.PERDIDAS;
				}

				public Boolean PERDIDASIsNullable(){
				    return true;
				}
				public Boolean PERDIDASIsKey(){
				    return false;
				}
				public Integer PERDIDASLength(){
				    return null;
				}
				public Integer PERDIDASPrecision(){
				    return null;
				}
				public String PERDIDASDefault(){
				
					return "";
				
				}
				public String PERDIDASComment(){
				
				    return "";
				
				}
				public String PERDIDASPattern(){
				
					return "";
				
				}
				public String PERDIDASOriginalDbColumnName(){
				
					return "PERDIDAS";
				
				}

				
			    public BigDecimal SALDO_RESTANTE;

				public BigDecimal getSALDO_RESTANTE () {
					return this.SALDO_RESTANTE;
				}

				public Boolean SALDO_RESTANTEIsNullable(){
				    return true;
				}
				public Boolean SALDO_RESTANTEIsKey(){
				    return false;
				}
				public Integer SALDO_RESTANTELength(){
				    return null;
				}
				public Integer SALDO_RESTANTEPrecision(){
				    return null;
				}
				public String SALDO_RESTANTEDefault(){
				
					return null;
				
				}
				public String SALDO_RESTANTEComment(){
				
				    return "";
				
				}
				public String SALDO_RESTANTEPattern(){
				
					return "";
				
				}
				public String SALDO_RESTANTEOriginalDbColumnName(){
				
					return "SALDO_RESTANTE";
				
				}

				
			    public BigDecimal TRASLADOS_SALIDA;

				public BigDecimal getTRASLADOS_SALIDA () {
					return this.TRASLADOS_SALIDA;
				}

				public Boolean TRASLADOS_SALIDAIsNullable(){
				    return true;
				}
				public Boolean TRASLADOS_SALIDAIsKey(){
				    return false;
				}
				public Integer TRASLADOS_SALIDALength(){
				    return null;
				}
				public Integer TRASLADOS_SALIDAPrecision(){
				    return null;
				}
				public String TRASLADOS_SALIDADefault(){
				
					return "";
				
				}
				public String TRASLADOS_SALIDAComment(){
				
				    return "";
				
				}
				public String TRASLADOS_SALIDAPattern(){
				
					return "";
				
				}
				public String TRASLADOS_SALIDAOriginalDbColumnName(){
				
					return "TRASLADOS_SALIDA";
				
				}

				
			    public BigDecimal AJUSTES;

				public BigDecimal getAJUSTES () {
					return this.AJUSTES;
				}

				public Boolean AJUSTESIsNullable(){
				    return true;
				}
				public Boolean AJUSTESIsKey(){
				    return false;
				}
				public Integer AJUSTESLength(){
				    return null;
				}
				public Integer AJUSTESPrecision(){
				    return null;
				}
				public String AJUSTESDefault(){
				
					return "";
				
				}
				public String AJUSTESComment(){
				
				    return "";
				
				}
				public String AJUSTESPattern(){
				
					return "";
				
				}
				public String AJUSTESOriginalDbColumnName(){
				
					return "AJUSTES";
				
				}

				
			    public BigDecimal TRASLADOS_ENTRADA;

				public BigDecimal getTRASLADOS_ENTRADA () {
					return this.TRASLADOS_ENTRADA;
				}

				public Boolean TRASLADOS_ENTRADAIsNullable(){
				    return true;
				}
				public Boolean TRASLADOS_ENTRADAIsKey(){
				    return false;
				}
				public Integer TRASLADOS_ENTRADALength(){
				    return null;
				}
				public Integer TRASLADOS_ENTRADAPrecision(){
				    return null;
				}
				public String TRASLADOS_ENTRADADefault(){
				
					return null;
				
				}
				public String TRASLADOS_ENTRADAComment(){
				
				    return "";
				
				}
				public String TRASLADOS_ENTRADAPattern(){
				
					return "";
				
				}
				public String TRASLADOS_ENTRADAOriginalDbColumnName(){
				
					return "TRASLADOS_ENTRADA";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
						this.SALDO_ANTERIOR = (BigDecimal) dis.readObject();
					
						this.ENTRADAS = (BigDecimal) dis.readObject();
					
						this.APLICADAS = (BigDecimal) dis.readObject();
					
						this.PERDIDAS = (BigDecimal) dis.readObject();
					
						this.SALDO_RESTANTE = (BigDecimal) dis.readObject();
					
						this.TRASLADOS_SALIDA = (BigDecimal) dis.readObject();
					
						this.AJUSTES = (BigDecimal) dis.readObject();
					
						this.TRASLADOS_ENTRADA = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
						this.SALDO_ANTERIOR = (BigDecimal) dis.readObject();
					
						this.ENTRADAS = (BigDecimal) dis.readObject();
					
						this.APLICADAS = (BigDecimal) dis.readObject();
					
						this.PERDIDAS = (BigDecimal) dis.readObject();
					
						this.SALDO_RESTANTE = (BigDecimal) dis.readObject();
					
						this.TRASLADOS_SALIDA = (BigDecimal) dis.readObject();
					
						this.AJUSTES = (BigDecimal) dis.readObject();
					
						this.TRASLADOS_ENTRADA = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LOTES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SALDO_ANTERIOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ENTRADAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLICADAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERDIDAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SALDO_RESTANTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRASLADOS_SALIDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AJUSTES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRASLADOS_ENTRADA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LOTES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SALDO_ANTERIOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ENTRADAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.APLICADAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERDIDAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SALDO_RESTANTE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TRASLADOS_SALIDA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AJUSTES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TRASLADOS_ENTRADA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",LOTES_ID="+String.valueOf(LOTES_ID));
		sb.append(",SALDO_ANTERIOR="+String.valueOf(SALDO_ANTERIOR));
		sb.append(",ENTRADAS="+String.valueOf(ENTRADAS));
		sb.append(",APLICADAS="+String.valueOf(APLICADAS));
		sb.append(",PERDIDAS="+String.valueOf(PERDIDAS));
		sb.append(",SALDO_RESTANTE="+String.valueOf(SALDO_RESTANTE));
		sb.append(",TRASLADOS_SALIDA="+String.valueOf(TRASLADOS_SALIDA));
		sb.append(",AJUSTES="+String.valueOf(AJUSTES));
		sb.append(",TRASLADOS_ENTRADA="+String.valueOf(TRASLADOS_ENTRADA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(LotesStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row47Struct implements routines.system.IPersistableRow<row47Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal LOTES_ID;

				public BigDecimal getLOTES_ID () {
					return this.LOTES_ID;
				}

				public Boolean LOTES_IDIsNullable(){
				    return false;
				}
				public Boolean LOTES_IDIsKey(){
				    return false;
				}
				public Integer LOTES_IDLength(){
				    return 0;
				}
				public Integer LOTES_IDPrecision(){
				    return null;
				}
				public String LOTES_IDDefault(){
				
					return "";
				
				}
				public String LOTES_IDComment(){
				
				    return "";
				
				}
				public String LOTES_IDPattern(){
				
					return "";
				
				}
				public String LOTES_IDOriginalDbColumnName(){
				
					return "LOTES_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LOTES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LOTES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",LOTES_ID="+String.valueOf(LOTES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row47Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_37Struct implements routines.system.IPersistableRow<after_tOracleInput_37Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal LOTES_ID;

				public BigDecimal getLOTES_ID () {
					return this.LOTES_ID;
				}

				public Boolean LOTES_IDIsNullable(){
				    return false;
				}
				public Boolean LOTES_IDIsKey(){
				    return false;
				}
				public Integer LOTES_IDLength(){
				    return 0;
				}
				public Integer LOTES_IDPrecision(){
				    return null;
				}
				public String LOTES_IDDefault(){
				
					return "";
				
				}
				public String LOTES_IDComment(){
				
				    return "";
				
				}
				public String LOTES_IDPattern(){
				
					return "";
				
				}
				public String LOTES_IDOriginalDbColumnName(){
				
					return "LOTES_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LOTES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LOTES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",LOTES_ID="+String.valueOf(LOTES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_37Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_37Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_37_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_36Process(globalMap);
		tOracleInput_33Process(globalMap);
		tOracleInput_34Process(globalMap);
		tOracleInput_35Process(globalMap);
		tOracleInput_38Process(globalMap);
		tOracleInput_39Process(globalMap);
		tOracleInput_40Process(globalMap);

		row47Struct row47 = new row47Struct();
LotesStruct Lotes = new LotesStruct();





	
	/**
	 * [tOracleOutput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_22", false);
		start_Hash.put("tOracleOutput_22", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_22";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Lotes");
					}
				
		int tos_count_tOracleOutput_22 = 0;
		






    
    int nb_line_tOracleOutput_22 = 0;
    int nb_line_update_tOracleOutput_22 = 0;
    int nb_line_inserted_tOracleOutput_22 = 0;
    int nb_line_deleted_tOracleOutput_22 = 0;
    int nb_line_rejected_tOracleOutput_22 = 0;

    int tmp_batchUpdateCount_tOracleOutput_22 = 0;

    int deletedCount_tOracleOutput_22=0;
    int updatedCount_tOracleOutput_22=0;
    int insertedCount_tOracleOutput_22=0;
    int rowsToCommitCount_tOracleOutput_22=0;
    int rejectedCount_tOracleOutput_22=0;

    boolean whetherReject_tOracleOutput_22 = false;

    java.sql.Connection conn_tOracleOutput_22 = null;

    //optional table
    String dbschema_tOracleOutput_22 = null;
    String tableName_tOracleOutput_22 = null;
                    String driverClass_tOracleOutput_22 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_22);
                String url_tOracleOutput_22 = null;
                    url_tOracleOutput_22 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_22 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_22 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_22 = decryptedPassword_tOracleOutput_22;
                dbschema_tOracleOutput_22 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_22 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_22.put("user",dbUser_tOracleOutput_22);
                    atnParamsPrope_tOracleOutput_22.put("password",dbPwd_tOracleOutput_22);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_22.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_22 = java.sql.DriverManager.getConnection(url_tOracleOutput_22, atnParamsPrope_tOracleOutput_22);
        resourceMap.put("conn_tOracleOutput_22", conn_tOracleOutput_22);
            conn_tOracleOutput_22.setAutoCommit(false);
            int commitEvery_tOracleOutput_22 = 5000;
            int commitCounter_tOracleOutput_22 = 0;
        int batchSize_tOracleOutput_22 = 5000;
        int batchSizeCounter_tOracleOutput_22=0;
        int count_tOracleOutput_22=0;

        if(dbschema_tOracleOutput_22 == null || dbschema_tOracleOutput_22.trim().length() == 0) {
            tableName_tOracleOutput_22 = ("BVAC_MOVIMIENTOS");
        } else {
            tableName_tOracleOutput_22 = dbschema_tOracleOutput_22 + "." + ("BVAC_MOVIMIENTOS");
        }
                String insert_tOracleOutput_22 = "INSERT INTO " + tableName_tOracleOutput_22 + " (UORG_ID,TIEMPOS_ID,LOTES_ID,SALDO_ANTERIOR,ENTRADAS,APLICADAS,PERDIDAS,SALDO_RESTANTE,TRASLADOS_SALIDA,AJUSTES,TRASLADOS_ENTRADA) VALUES (?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_22 = conn_tOracleOutput_22.prepareStatement(insert_tOracleOutput_22);
                        resourceMap.put("pstmt_tOracleOutput_22", pstmt_tOracleOutput_22);





 



/**
 * [tOracleOutput_22 begin ] stop
 */



	
	/**
	 * [tMap_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_14", false);
		start_Hash.put("tMap_14", System.currentTimeMillis());
		
	
	currentComponent="tMap_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row47");
					}
				
		int tos_count_tMap_14 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct> tHash_Lookup_row48 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct>) 
					globalMap.get( "tHash_Lookup_row48" ))
					;					
					
	

row48Struct row48HashKey = new row48Struct();
row48Struct row48Default = new row48Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct> tHash_Lookup_row49 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct>) 
					globalMap.get( "tHash_Lookup_row49" ))
					;					
					
	

row49Struct row49HashKey = new row49Struct();
row49Struct row49Default = new row49Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct> tHash_Lookup_row51 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct>) 
					globalMap.get( "tHash_Lookup_row51" ))
					;					
					
	

row51Struct row51HashKey = new row51Struct();
row51Struct row51Default = new row51Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row55Struct> tHash_Lookup_row55 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row55Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row55Struct>) 
					globalMap.get( "tHash_Lookup_row55" ))
					;					
					
	

row55Struct row55HashKey = new row55Struct();
row55Struct row55Default = new row55Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row57Struct> tHash_Lookup_row57 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row57Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row57Struct>) 
					globalMap.get( "tHash_Lookup_row57" ))
					;					
					
	

row57Struct row57HashKey = new row57Struct();
row57Struct row57Default = new row57Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct> tHash_Lookup_row46 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct>) 
					globalMap.get( "tHash_Lookup_row46" ))
					;					
					
	

row46Struct row46HashKey = new row46Struct();
row46Struct row46Default = new row46Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row56Struct> tHash_Lookup_row56 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row56Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row56Struct>) 
					globalMap.get( "tHash_Lookup_row56" ))
					;					
					
	

row56Struct row56HashKey = new row56Struct();
row56Struct row56Default = new row56Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_14__Struct  {
	BigDecimal APLICADAS;
	BigDecimal ENTRADAS;
	BigDecimal PERDIDAS;
	BigDecimal TRASLADOS_SALIDA;
	BigDecimal SALDO_ANTERIOR;
	BigDecimal AJUSTES;
	BigDecimal TRASLADOS_ENTRADA;
}
Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
LotesStruct Lotes_tmp = new LotesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_14 begin ] stop
 */



	
	/**
	 * [tOracleInput_37 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_37", false);
		start_Hash.put("tOracleInput_37", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_37";
	
	
		int tos_count_tOracleInput_37 = 0;
		
	


	
		    int nb_line_tOracleInput_37 = 0;
		    java.sql.Connection conn_tOracleInput_37 = null;
				conn_tOracleInput_37 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_37 = false;
				boolean isConnectionWrapped_tOracleInput_37 = !(conn_tOracleInput_37 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_37.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_37 = null;
                if (isConnectionWrapped_tOracleInput_37) {
					unwrappedOraConn_tOracleInput_37 = conn_tOracleInput_37.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_37 != null) {
                        isTimeZoneNull_tOracleInput_37 = (unwrappedOraConn_tOracleInput_37.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_37 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_37).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_37) {
					java.sql.Statement stmtGetTZ_tOracleInput_37 = conn_tOracleInput_37.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_37 = stmtGetTZ_tOracleInput_37.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_37 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_37.next()) {
						sessionTimezone_tOracleInput_37 = rsGetTZ_tOracleInput_37.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_37 && unwrappedOraConn_tOracleInput_37 != null) {
                        unwrappedOraConn_tOracleInput_37.setSessionTimeZone(sessionTimezone_tOracleInput_37);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_37).setSessionTimeZone(sessionTimezone_tOracleInput_37);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_37 = conn_tOracleInput_37.createStatement();

		    String dbquery_tOracleInput_37 = "\nSELECT\n    INV.UORG_ID,\n    MINV.ID AS LOTES_ID    \nFROM VAC_INVENTARIOS INV\nINNER JOIN MED_INVENTARIOS MINV ON I"
+"NV.MINVENTARIO_ID = MINV.ID\nWHERE INV.ESTREGISTRO_ID = 1\nUNION\nSELECT \n    INV.UORG_ID,\n    MINV.ID AS LOTES_ID    "
+"\nFROM VAC_DILUYENTES DIL\nINNER JOIN VAC_INVENTARIOS INV ON DIL.VINVENTARIO_ID = INV.ID\nINNER JOIN MED_INVENTARIOS MIN"
+"V ON DIL.MINVENTARIO_ID = MINV.ID\nWHERE DIL.ESTREGISTRO_ID = 1\n";
		    

		    globalMap.put("tOracleInput_37_QUERY",dbquery_tOracleInput_37);

		    java.sql.ResultSet rs_tOracleInput_37 = null;

		    try {
		    	rs_tOracleInput_37 = stmt_tOracleInput_37.executeQuery(dbquery_tOracleInput_37);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_37 = rs_tOracleInput_37.getMetaData();
		    	int colQtyInRs_tOracleInput_37 = rsmd_tOracleInput_37.getColumnCount();

		    String tmpContent_tOracleInput_37 = null;
		    
		    
		    while (rs_tOracleInput_37.next()) {
		        nb_line_tOracleInput_37++;
		        
							if(colQtyInRs_tOracleInput_37 < 1) {
								row47.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_37.getObject(1) != null) {
						row47.UORG_ID = rs_tOracleInput_37.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_37 < 2) {
								row47.LOTES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_37.getObject(2) != null) {
						row47.LOTES_ID = rs_tOracleInput_37.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_37 begin ] stop
 */
	
	/**
	 * [tOracleInput_37 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_37";
	
	

 


	tos_count_tOracleInput_37++;

/**
 * [tOracleInput_37 main ] stop
 */
	
	/**
	 * [tOracleInput_37 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_37";
	
	

 



/**
 * [tOracleInput_37 process_data_begin ] stop
 */

	
	/**
	 * [tMap_14 main ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row47"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;
		
						row48Struct row48 = null;
					
						row49Struct row49 = null;
					
						row51Struct row51 = null;
					
						row55Struct row55 = null;
					
						row57Struct row57 = null;
					
						row46Struct row46 = null;
					
						row56Struct row56 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_14 = false;
		boolean mainRowRejected_tMap_14 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row48" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow48 = false;
       		  	    	
       		  	    	
 							row48Struct row48ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_14) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_14 = false;
								
                        		    		    row48HashKey.UORG_ID = row47.UORG_ID ;
                        		    		
                        		    		    row48HashKey.LOTES_ID = row47.LOTES_ID ;
                        		    		

								
		                        	row48HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row48.lookup( row48HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row48 != null && tHash_Lookup_row48.getCount(row48HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row48' and it contains more one result from keys :  row48.UORG_ID = '" + row48HashKey.UORG_ID + "', row48.LOTES_ID = '" + row48HashKey.LOTES_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row48Struct fromLookup_row48 = null;
							row48 = row48Default;
										 
							
								 
							
							
								if (tHash_Lookup_row48 !=null && tHash_Lookup_row48.hasNext()) { // G 099
								
							
								
								fromLookup_row48 = tHash_Lookup_row48.next();

							
							
								} // G 099
							
							

							if(fromLookup_row48 != null) {
								row48 = fromLookup_row48;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row49" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow49 = false;
       		  	    	
       		  	    	
 							row49Struct row49ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_14) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_14 = false;
								
                        		    		    row49HashKey.UORG_ID = row47.UORG_ID ;
                        		    		
                        		    		    row49HashKey.LOTES_ID = row47.LOTES_ID ;
                        		    		

								
		                        	row49HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row49.lookup( row49HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row49 != null && tHash_Lookup_row49.getCount(row49HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row49' and it contains more one result from keys :  row49.UORG_ID = '" + row49HashKey.UORG_ID + "', row49.LOTES_ID = '" + row49HashKey.LOTES_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row49Struct fromLookup_row49 = null;
							row49 = row49Default;
										 
							
								 
							
							
								if (tHash_Lookup_row49 !=null && tHash_Lookup_row49.hasNext()) { // G 099
								
							
								
								fromLookup_row49 = tHash_Lookup_row49.next();

							
							
								} // G 099
							
							

							if(fromLookup_row49 != null) {
								row49 = fromLookup_row49;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row51" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow51 = false;
       		  	    	
       		  	    	
 							row51Struct row51ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_14) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_14 = false;
								
                        		    		    row51HashKey.UORG_ID = row47.UORG_ID ;
                        		    		
                        		    		    row51HashKey.LOTES_ID = row47.LOTES_ID ;
                        		    		

								
		                        	row51HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row51.lookup( row51HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row51 != null && tHash_Lookup_row51.getCount(row51HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row51' and it contains more one result from keys :  row51.UORG_ID = '" + row51HashKey.UORG_ID + "', row51.LOTES_ID = '" + row51HashKey.LOTES_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row51Struct fromLookup_row51 = null;
							row51 = row51Default;
										 
							
								 
							
							
								if (tHash_Lookup_row51 !=null && tHash_Lookup_row51.hasNext()) { // G 099
								
							
								
								fromLookup_row51 = tHash_Lookup_row51.next();

							
							
								} // G 099
							
							

							if(fromLookup_row51 != null) {
								row51 = fromLookup_row51;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row55" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow55 = false;
       		  	    	
       		  	    	
 							row55Struct row55ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_14) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_14 = false;
								
                        		    		    row55HashKey.UORG_ID = row47.UORG_ID ;
                        		    		
                        		    		    row55HashKey.LOTES_ID = row47.LOTES_ID ;
                        		    		

								
		                        	row55HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row55.lookup( row55HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row55 != null && tHash_Lookup_row55.getCount(row55HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row55' and it contains more one result from keys :  row55.UORG_ID = '" + row55HashKey.UORG_ID + "', row55.LOTES_ID = '" + row55HashKey.LOTES_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row55Struct fromLookup_row55 = null;
							row55 = row55Default;
										 
							
								 
							
							
								if (tHash_Lookup_row55 !=null && tHash_Lookup_row55.hasNext()) { // G 099
								
							
								
								fromLookup_row55 = tHash_Lookup_row55.next();

							
							
								} // G 099
							
							

							if(fromLookup_row55 != null) {
								row55 = fromLookup_row55;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row57" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow57 = false;
       		  	    	
       		  	    	
 							row57Struct row57ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_14) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_14 = false;
								
                        		    		    row57HashKey.UORG_ID = row47.UORG_ID ;
                        		    		
                        		    		    row57HashKey.LOTES_ID = row47.LOTES_ID ;
                        		    		

								
		                        	row57HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row57.lookup( row57HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row57 != null && tHash_Lookup_row57.getCount(row57HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row57' and it contains more one result from keys :  row57.UORG_ID = '" + row57HashKey.UORG_ID + "', row57.LOTES_ID = '" + row57HashKey.LOTES_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row57Struct fromLookup_row57 = null;
							row57 = row57Default;
										 
							
								 
							
							
								if (tHash_Lookup_row57 !=null && tHash_Lookup_row57.hasNext()) { // G 099
								
							
								
								fromLookup_row57 = tHash_Lookup_row57.next();

							
							
								} // G 099
							
							

							if(fromLookup_row57 != null) {
								row57 = fromLookup_row57;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row46" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow46 = false;
       		  	    	
       		  	    	
 							row46Struct row46ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_14) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_14 = false;
								
                        		    		    row46HashKey.UORG_ID = row47.UORG_ID ;
                        		    		
                        		    		    row46HashKey.LOTES_ID = row47.LOTES_ID ;
                        		    		

								
		                        	row46HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row46.lookup( row46HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row46 != null && tHash_Lookup_row46.getCount(row46HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row46' and it contains more one result from keys :  row46.UORG_ID = '" + row46HashKey.UORG_ID + "', row46.LOTES_ID = '" + row46HashKey.LOTES_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row46Struct fromLookup_row46 = null;
							row46 = row46Default;
										 
							
								 
							
							
								if (tHash_Lookup_row46 !=null && tHash_Lookup_row46.hasNext()) { // G 099
								
							
								
								fromLookup_row46 = tHash_Lookup_row46.next();

							
							
								} // G 099
							
							

							if(fromLookup_row46 != null) {
								row46 = fromLookup_row46;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row56" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow56 = false;
       		  	    	
       		  	    	
 							row56Struct row56ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_14) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_14 = false;
								
                        		    		    row56HashKey.UORG_ID = row47.UORG_ID ;
                        		    		
                        		    		    row56HashKey.LOTES_ID = row47.LOTES_ID ;
                        		    		

								
		                        	row56HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row56.lookup( row56HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row56 != null && tHash_Lookup_row56.getCount(row56HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row56' and it contains more one result from keys :  row56.UORG_ID = '" + row56HashKey.UORG_ID + "', row56.LOTES_ID = '" + row56HashKey.LOTES_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row56Struct fromLookup_row56 = null;
							row56 = row56Default;
										 
							
								 
							
							
								if (tHash_Lookup_row56 !=null && tHash_Lookup_row56.hasNext()) { // G 099
								
							
								
								fromLookup_row56 = tHash_Lookup_row56.next();

							
							
								} // G 099
							
							

							if(fromLookup_row56 != null) {
								row56 = fromLookup_row56;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_14__Struct Var = Var__tMap_14;
Var.APLICADAS = row48.APLICADAS == null ? new BigDecimal(0) : row48.APLICADAS ;
Var.ENTRADAS = row49.ENTRADAS == null ? new BigDecimal(0) : row49.ENTRADAS ;
Var.PERDIDAS = row51.PERDIDAS == null ? new BigDecimal(0) : row51.PERDIDAS ;
Var.TRASLADOS_SALIDA = row55.TRASLADOS_SALIDA == null ? new BigDecimal(0) : row55.TRASLADOS_SALIDA ;
Var.SALDO_ANTERIOR = row57.SALDO_RESTANTE == null ? new BigDecimal(0) : row57.SALDO_RESTANTE ;
Var.AJUSTES = row46.AJUSTES == null ? new BigDecimal(0) : row46.AJUSTES ;
Var.TRASLADOS_ENTRADA = row56.TRASLADOS_ENTRADA  == null ? new BigDecimal(0) : row56.TRASLADOS_ENTRADA ;// ###############################
        // ###############################
        // # Output tables

Lotes = null;


// # Output table : 'Lotes'
// # Filter conditions 
if( 

row48.APLICADAS != null || row49.ENTRADAS != null || row51.PERDIDAS != null || row55.TRASLADOS_SALIDA  != null || row46.AJUSTES != null || row56.TRASLADOS_ENTRADA  != null || row57.SALDO_RESTANTE != null

 ) {
Lotes_tmp.UORG_ID = row47.UORG_ID ;
Lotes_tmp.TIEMPOS_ID = context.ID_PERIODO;
Lotes_tmp.LOTES_ID = row47.LOTES_ID ;
Lotes_tmp.SALDO_ANTERIOR = Var.SALDO_ANTERIOR ;
Lotes_tmp.ENTRADAS = Var.ENTRADAS ;
Lotes_tmp.APLICADAS = Var.APLICADAS ;
Lotes_tmp.PERDIDAS = Var.PERDIDAS ;
Lotes_tmp.SALDO_RESTANTE = ((Var.SALDO_ANTERIOR.add(Var.ENTRADAS).add(Var.TRASLADOS_ENTRADA )).subtract(Var.APLICADAS.add(Var.TRASLADOS_SALIDA).add(Var.PERDIDAS))).add(Var.AJUSTES) ;
Lotes_tmp.TRASLADOS_SALIDA = Var.TRASLADOS_SALIDA ;
Lotes_tmp.AJUSTES = Var.AJUSTES ;
Lotes_tmp.TRASLADOS_ENTRADA = Var.TRASLADOS_ENTRADA ;
Lotes = Lotes_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_14 = false;










 


	tos_count_tMap_14++;

/**
 * [tMap_14 main ] stop
 */
	
	/**
	 * [tMap_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	

 



/**
 * [tMap_14 process_data_begin ] stop
 */
// Start of branch "Lotes"
if(Lotes != null) { 



	
	/**
	 * [tOracleOutput_22 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Lotes"
						
						);
					}
					



        whetherReject_tOracleOutput_22 = false;
                        pstmt_tOracleOutput_22.setBigDecimal(1, Lotes.UORG_ID);

                        pstmt_tOracleOutput_22.setBigDecimal(2, Lotes.TIEMPOS_ID);

                        pstmt_tOracleOutput_22.setBigDecimal(3, Lotes.LOTES_ID);

                        pstmt_tOracleOutput_22.setBigDecimal(4, Lotes.SALDO_ANTERIOR);

                        pstmt_tOracleOutput_22.setBigDecimal(5, Lotes.ENTRADAS);

                        pstmt_tOracleOutput_22.setBigDecimal(6, Lotes.APLICADAS);

                        pstmt_tOracleOutput_22.setBigDecimal(7, Lotes.PERDIDAS);

                        pstmt_tOracleOutput_22.setBigDecimal(8, Lotes.SALDO_RESTANTE);

                        pstmt_tOracleOutput_22.setBigDecimal(9, Lotes.TRASLADOS_SALIDA);

                        pstmt_tOracleOutput_22.setBigDecimal(10, Lotes.AJUSTES);

                        pstmt_tOracleOutput_22.setBigDecimal(11, Lotes.TRASLADOS_ENTRADA);

                pstmt_tOracleOutput_22.addBatch();
                nb_line_tOracleOutput_22++;
                batchSizeCounter_tOracleOutput_22++;
            if (batchSize_tOracleOutput_22 > 0 &&  batchSize_tOracleOutput_22 <= batchSizeCounter_tOracleOutput_22) {
                try {
                    pstmt_tOracleOutput_22.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_22){
globalMap.put("tOracleOutput_22_ERROR_MESSAGE",e_tOracleOutput_22.getMessage());
			        java.sql.SQLException ne_tOracleOutput_22 = e_tOracleOutput_22.getNextException(),sqle_tOracleOutput_22=null;
			    	String errormessage_tOracleOutput_22;
					if (ne_tOracleOutput_22 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_22 = new java.sql.SQLException(e_tOracleOutput_22.getMessage() + "\ncaused by: " + ne_tOracleOutput_22.getMessage(), ne_tOracleOutput_22.getSQLState(), ne_tOracleOutput_22.getErrorCode(), ne_tOracleOutput_22);
						errormessage_tOracleOutput_22 = sqle_tOracleOutput_22.getMessage();
					}else{
						errormessage_tOracleOutput_22 = e_tOracleOutput_22.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_22);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_22 = pstmt_tOracleOutput_22.getUpdateCount();
                    insertedCount_tOracleOutput_22
                += (tmp_batchUpdateCount_tOracleOutput_22!=-1?tmp_batchUpdateCount_tOracleOutput_22:0);
                rowsToCommitCount_tOracleOutput_22 += (tmp_batchUpdateCount_tOracleOutput_22!=-1?tmp_batchUpdateCount_tOracleOutput_22:0);
                batchSizeCounter_tOracleOutput_22 = 0;
            }
                commitCounter_tOracleOutput_22++;
                if(commitEvery_tOracleOutput_22 <= commitCounter_tOracleOutput_22) {
                    if(batchSizeCounter_tOracleOutput_22 > 0) {
                        try {
                            pstmt_tOracleOutput_22.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_22){
globalMap.put("tOracleOutput_22_ERROR_MESSAGE",e_tOracleOutput_22.getMessage());
					        java.sql.SQLException ne_tOracleOutput_22 = e_tOracleOutput_22.getNextException(),sqle_tOracleOutput_22=null;
					    	String errormessage_tOracleOutput_22;
							if (ne_tOracleOutput_22 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_22 = new java.sql.SQLException(e_tOracleOutput_22.getMessage() + "\ncaused by: " + ne_tOracleOutput_22.getMessage(), ne_tOracleOutput_22.getSQLState(), ne_tOracleOutput_22.getErrorCode(), ne_tOracleOutput_22);
								errormessage_tOracleOutput_22 = sqle_tOracleOutput_22.getMessage();
							}else{
								errormessage_tOracleOutput_22 = e_tOracleOutput_22.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_22);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_22 = pstmt_tOracleOutput_22.getUpdateCount();
                            insertedCount_tOracleOutput_22
                        += (tmp_batchUpdateCount_tOracleOutput_22!=-1?tmp_batchUpdateCount_tOracleOutput_22:0);
                        rowsToCommitCount_tOracleOutput_22 += (tmp_batchUpdateCount_tOracleOutput_22!=-1?tmp_batchUpdateCount_tOracleOutput_22:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_22 != 0){
                    	
                    }
                    conn_tOracleOutput_22.commit();
                    if(rowsToCommitCount_tOracleOutput_22 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_22 = 0;
                    }
                    commitCounter_tOracleOutput_22=0;
                    	batchSizeCounter_tOracleOutput_22=0;
                }

 


	tos_count_tOracleOutput_22++;

/**
 * [tOracleOutput_22 main ] stop
 */
	
	/**
	 * [tOracleOutput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	

 



/**
 * [tOracleOutput_22 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	

 



/**
 * [tOracleOutput_22 process_data_end ] stop
 */

} // End of branch "Lotes"




	
	/**
	 * [tMap_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	

 



/**
 * [tMap_14 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_37 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_37";
	
	

 



/**
 * [tOracleInput_37 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_37 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_37";
	
	

}
}finally{
	if (rs_tOracleInput_37 != null) {
		rs_tOracleInput_37.close();
	}
	if (stmt_tOracleInput_37 != null) {
		stmt_tOracleInput_37.close();
	}
}

globalMap.put("tOracleInput_37_NB_LINE",nb_line_tOracleInput_37);
 

ok_Hash.put("tOracleInput_37", true);
end_Hash.put("tOracleInput_37", System.currentTimeMillis());




/**
 * [tOracleInput_37 end ] stop
 */

	
	/**
	 * [tMap_14 end ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row48 != null) {
						tHash_Lookup_row48.endGet();
					}
					globalMap.remove( "tHash_Lookup_row48" );

					
					
				
					if(tHash_Lookup_row49 != null) {
						tHash_Lookup_row49.endGet();
					}
					globalMap.remove( "tHash_Lookup_row49" );

					
					
				
					if(tHash_Lookup_row51 != null) {
						tHash_Lookup_row51.endGet();
					}
					globalMap.remove( "tHash_Lookup_row51" );

					
					
				
					if(tHash_Lookup_row55 != null) {
						tHash_Lookup_row55.endGet();
					}
					globalMap.remove( "tHash_Lookup_row55" );

					
					
				
					if(tHash_Lookup_row57 != null) {
						tHash_Lookup_row57.endGet();
					}
					globalMap.remove( "tHash_Lookup_row57" );

					
					
				
					if(tHash_Lookup_row46 != null) {
						tHash_Lookup_row46.endGet();
					}
					globalMap.remove( "tHash_Lookup_row46" );

					
					
				
					if(tHash_Lookup_row56 != null) {
						tHash_Lookup_row56.endGet();
					}
					globalMap.remove( "tHash_Lookup_row56" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row47");
			  	}
			  	
 

ok_Hash.put("tMap_14", true);
end_Hash.put("tMap_14", System.currentTimeMillis());




/**
 * [tMap_14 end ] stop
 */

	
	/**
	 * [tOracleOutput_22 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_22 > 0) {
            try {
            	if (pstmt_tOracleOutput_22 != null) {
					
					pstmt_tOracleOutput_22.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_22){
globalMap.put("tOracleOutput_22_ERROR_MESSAGE",e_tOracleOutput_22.getMessage());
		        java.sql.SQLException ne_tOracleOutput_22 = e_tOracleOutput_22.getNextException(),sqle_tOracleOutput_22=null;
		    	String errormessage_tOracleOutput_22;
				if (ne_tOracleOutput_22 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_22 = new java.sql.SQLException(e_tOracleOutput_22.getMessage() + "\ncaused by: " + ne_tOracleOutput_22.getMessage(), ne_tOracleOutput_22.getSQLState(), ne_tOracleOutput_22.getErrorCode(), ne_tOracleOutput_22);
					errormessage_tOracleOutput_22 = sqle_tOracleOutput_22.getMessage();
				}else{
					errormessage_tOracleOutput_22 = e_tOracleOutput_22.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_22);
            	
        	}
        	if (pstmt_tOracleOutput_22 != null) {
            	tmp_batchUpdateCount_tOracleOutput_22 = pstmt_tOracleOutput_22.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_22
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_22!=-1?tmp_batchUpdateCount_tOracleOutput_22:0);
				rowsToCommitCount_tOracleOutput_22 += (tmp_batchUpdateCount_tOracleOutput_22!=-1?tmp_batchUpdateCount_tOracleOutput_22:0);
            }
        }
        if(pstmt_tOracleOutput_22 != null) {
			
				pstmt_tOracleOutput_22.close();
				resourceMap.remove("pstmt_tOracleOutput_22");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_22", true);
		if(commitCounter_tOracleOutput_22 > 0 && rowsToCommitCount_tOracleOutput_22 != 0) {
			
		}
		conn_tOracleOutput_22.commit();
		if(commitCounter_tOracleOutput_22 > 0 && rowsToCommitCount_tOracleOutput_22 != 0) {
			
			rowsToCommitCount_tOracleOutput_22 = 0;
		}
		commitCounter_tOracleOutput_22 = 0;
		
		
		conn_tOracleOutput_22 .close();
		
		resourceMap.put("finish_tOracleOutput_22", true);
   	

	
	nb_line_deleted_tOracleOutput_22=nb_line_deleted_tOracleOutput_22+ deletedCount_tOracleOutput_22;
	nb_line_update_tOracleOutput_22=nb_line_update_tOracleOutput_22 + updatedCount_tOracleOutput_22;
	nb_line_inserted_tOracleOutput_22=nb_line_inserted_tOracleOutput_22 + insertedCount_tOracleOutput_22;
	nb_line_rejected_tOracleOutput_22=nb_line_rejected_tOracleOutput_22 + rejectedCount_tOracleOutput_22;
	
        globalMap.put("tOracleOutput_22_NB_LINE",nb_line_tOracleOutput_22);
        globalMap.put("tOracleOutput_22_NB_LINE_UPDATED",nb_line_update_tOracleOutput_22);
        globalMap.put("tOracleOutput_22_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_22);
        globalMap.put("tOracleOutput_22_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_22);
        globalMap.put("tOracleOutput_22_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_22);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Lotes");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_22", true);
end_Hash.put("tOracleOutput_22", System.currentTimeMillis());




/**
 * [tOracleOutput_22 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_14"
					     			globalMap.remove("tHash_Lookup_row48"); 
				     			
					     			//free memory for "tMap_14"
					     			globalMap.remove("tHash_Lookup_row49"); 
				     			
					     			//free memory for "tMap_14"
					     			globalMap.remove("tHash_Lookup_row51"); 
				     			
					     			//free memory for "tMap_14"
					     			globalMap.remove("tHash_Lookup_row55"); 
				     			
					     			//free memory for "tMap_14"
					     			globalMap.remove("tHash_Lookup_row57"); 
				     			
					     			//free memory for "tMap_14"
					     			globalMap.remove("tHash_Lookup_row46"); 
				     			
					     			//free memory for "tMap_14"
					     			globalMap.remove("tHash_Lookup_row56"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_37 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_37";
	
	

 



/**
 * [tOracleInput_37 finally ] stop
 */

	
	/**
	 * [tMap_14 finally ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	

 



/**
 * [tMap_14 finally ] stop
 */

	
	/**
	 * [tOracleOutput_22 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_22") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_22 = null;
                if ((pstmtToClose_tOracleOutput_22 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_22")) != null) {
                    pstmtToClose_tOracleOutput_22.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_22") == null){
            java.sql.Connection ctn_tOracleOutput_22 = null;
            if((ctn_tOracleOutput_22 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_22")) != null){
                try {
                    ctn_tOracleOutput_22.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_22) {
                    String errorMessage_tOracleOutput_22 = "failed to close the connection in tOracleOutput_22 :" + sqlEx_tOracleOutput_22.getMessage();
                    System.err.println(errorMessage_tOracleOutput_22);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_22 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_37_SUBPROCESS_STATE", 1);
	}
	


public static class Inserta3Struct implements routines.system.IPersistableRow<Inserta3Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal POBLACION_ID;

				public BigDecimal getPOBLACION_ID () {
					return this.POBLACION_ID;
				}

				public Boolean POBLACION_IDIsNullable(){
				    return false;
				}
				public Boolean POBLACION_IDIsKey(){
				    return false;
				}
				public Integer POBLACION_IDLength(){
				    return 0;
				}
				public Integer POBLACION_IDPrecision(){
				    return null;
				}
				public String POBLACION_IDDefault(){
				
					return "";
				
				}
				public String POBLACION_IDComment(){
				
				    return "";
				
				}
				public String POBLACION_IDPattern(){
				
					return "";
				
				}
				public String POBLACION_IDOriginalDbColumnName(){
				
					return "POBLACION_ID";
				
				}

				
			    public String POBLACION_NOMBRE;

				public String getPOBLACION_NOMBRE () {
					return this.POBLACION_NOMBRE;
				}

				public Boolean POBLACION_NOMBREIsNullable(){
				    return false;
				}
				public Boolean POBLACION_NOMBREIsKey(){
				    return false;
				}
				public Integer POBLACION_NOMBRELength(){
				    return 200;
				}
				public Integer POBLACION_NOMBREPrecision(){
				    return 0;
				}
				public String POBLACION_NOMBREDefault(){
				
					return null;
				
				}
				public String POBLACION_NOMBREComment(){
				
				    return "";
				
				}
				public String POBLACION_NOMBREPattern(){
				
					return "";
				
				}
				public String POBLACION_NOMBREOriginalDbColumnName(){
				
					return "POBLACION_NOMBRE";
				
				}

				
			    public String POBLACION_SIGLA;

				public String getPOBLACION_SIGLA () {
					return this.POBLACION_SIGLA;
				}

				public Boolean POBLACION_SIGLAIsNullable(){
				    return false;
				}
				public Boolean POBLACION_SIGLAIsKey(){
				    return false;
				}
				public Integer POBLACION_SIGLALength(){
				    return 10;
				}
				public Integer POBLACION_SIGLAPrecision(){
				    return 0;
				}
				public String POBLACION_SIGLADefault(){
				
					return null;
				
				}
				public String POBLACION_SIGLAComment(){
				
				    return "";
				
				}
				public String POBLACION_SIGLAPattern(){
				
					return "";
				
				}
				public String POBLACION_SIGLAOriginalDbColumnName(){
				
					return "POBLACION_SIGLA";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICO_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 8;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public java.util.Date FINACTIVACION;

				public java.util.Date getFINACTIVACION () {
					return this.FINACTIVACION;
				}

				public Boolean FINACTIVACIONIsNullable(){
				    return true;
				}
				public Boolean FINACTIVACIONIsKey(){
				    return false;
				}
				public Integer FINACTIVACIONLength(){
				    return 8;
				}
				public Integer FINACTIVACIONPrecision(){
				    return 0;
				}
				public String FINACTIVACIONDefault(){
				
					return null;
				
				}
				public String FINACTIVACIONComment(){
				
				    return "";
				
				}
				public String FINACTIVACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FINACTIVACIONOriginalDbColumnName(){
				
					return "FINACTIVACION";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Inserta3Struct other = (Inserta3Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Inserta3Struct other) {

		other.ID = this.ID;
	            other.POBLACION_ID = this.POBLACION_ID;
	            other.POBLACION_NOMBRE = this.POBLACION_NOMBRE;
	            other.POBLACION_SIGLA = this.POBLACION_SIGLA;
	            other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            other.ESTADO = this.ESTADO;
	            other.FINACTIVACION = this.FINACTIVACION;
	            
	}

	public void copyKeysDataTo(Inserta3Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.POBLACION_ID = (BigDecimal) dis.readObject();
					
					this.POBLACION_NOMBRE = readString(dis);
					
					this.POBLACION_SIGLA = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.POBLACION_ID = (BigDecimal) dis.readObject();
					
					this.POBLACION_NOMBRE = readString(dis);
					
					this.POBLACION_SIGLA = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBLACION_ID);
					
					// String
				
						writeString(this.POBLACION_NOMBRE,dos);
					
					// String
				
						writeString(this.POBLACION_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.POBLACION_ID);
					
					// String
				
						writeString(this.POBLACION_NOMBRE,dos);
					
					// String
				
						writeString(this.POBLACION_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",POBLACION_ID="+String.valueOf(POBLACION_ID));
		sb.append(",POBLACION_NOMBRE="+POBLACION_NOMBRE);
		sb.append(",POBLACION_SIGLA="+POBLACION_SIGLA);
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",FINACTIVACION="+String.valueOf(FINACTIVACION));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Actualiza3Struct implements routines.system.IPersistableRow<Actualiza3Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal POBLACION_ID;

				public BigDecimal getPOBLACION_ID () {
					return this.POBLACION_ID;
				}

				public Boolean POBLACION_IDIsNullable(){
				    return false;
				}
				public Boolean POBLACION_IDIsKey(){
				    return true;
				}
				public Integer POBLACION_IDLength(){
				    return 0;
				}
				public Integer POBLACION_IDPrecision(){
				    return null;
				}
				public String POBLACION_IDDefault(){
				
					return "";
				
				}
				public String POBLACION_IDComment(){
				
				    return "";
				
				}
				public String POBLACION_IDPattern(){
				
					return "";
				
				}
				public String POBLACION_IDOriginalDbColumnName(){
				
					return "POBLACION_ID";
				
				}

				
			    public String POBLACION_NOMBRE;

				public String getPOBLACION_NOMBRE () {
					return this.POBLACION_NOMBRE;
				}

				public Boolean POBLACION_NOMBREIsNullable(){
				    return false;
				}
				public Boolean POBLACION_NOMBREIsKey(){
				    return false;
				}
				public Integer POBLACION_NOMBRELength(){
				    return 200;
				}
				public Integer POBLACION_NOMBREPrecision(){
				    return 0;
				}
				public String POBLACION_NOMBREDefault(){
				
					return null;
				
				}
				public String POBLACION_NOMBREComment(){
				
				    return "";
				
				}
				public String POBLACION_NOMBREPattern(){
				
					return "";
				
				}
				public String POBLACION_NOMBREOriginalDbColumnName(){
				
					return "POBLACION_NOMBRE";
				
				}

				
			    public String POBLACION_SIGLA;

				public String getPOBLACION_SIGLA () {
					return this.POBLACION_SIGLA;
				}

				public Boolean POBLACION_SIGLAIsNullable(){
				    return false;
				}
				public Boolean POBLACION_SIGLAIsKey(){
				    return false;
				}
				public Integer POBLACION_SIGLALength(){
				    return 10;
				}
				public Integer POBLACION_SIGLAPrecision(){
				    return 0;
				}
				public String POBLACION_SIGLADefault(){
				
					return null;
				
				}
				public String POBLACION_SIGLAComment(){
				
				    return "";
				
				}
				public String POBLACION_SIGLAPattern(){
				
					return "";
				
				}
				public String POBLACION_SIGLAOriginalDbColumnName(){
				
					return "POBLACION_SIGLA";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return true;
				}
				public Integer BIOLOGICO_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 8;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public java.util.Date FINACTIVACION;

				public java.util.Date getFINACTIVACION () {
					return this.FINACTIVACION;
				}

				public Boolean FINACTIVACIONIsNullable(){
				    return true;
				}
				public Boolean FINACTIVACIONIsKey(){
				    return false;
				}
				public Integer FINACTIVACIONLength(){
				    return 8;
				}
				public Integer FINACTIVACIONPrecision(){
				    return 0;
				}
				public String FINACTIVACIONDefault(){
				
					return null;
				
				}
				public String FINACTIVACIONComment(){
				
				    return "";
				
				}
				public String FINACTIVACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FINACTIVACIONOriginalDbColumnName(){
				
					return "FINACTIVACION";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.POBLACION_ID == null) ? 0 : this.POBLACION_ID.hashCode());
					
						result = prime * result + ((this.BIOLOGICO_ID == null) ? 0 : this.BIOLOGICO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Actualiza3Struct other = (Actualiza3Struct) obj;
		
						if (this.POBLACION_ID == null) {
							if (other.POBLACION_ID != null)
								return false;
						
						} else if (!this.POBLACION_ID.equals(other.POBLACION_ID))
						
							return false;
					
						if (this.BIOLOGICO_ID == null) {
							if (other.BIOLOGICO_ID != null)
								return false;
						
						} else if (!this.BIOLOGICO_ID.equals(other.BIOLOGICO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Actualiza3Struct other) {

		other.ID = this.ID;
	            other.POBLACION_ID = this.POBLACION_ID;
	            other.POBLACION_NOMBRE = this.POBLACION_NOMBRE;
	            other.POBLACION_SIGLA = this.POBLACION_SIGLA;
	            other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            other.ESTADO = this.ESTADO;
	            other.FINACTIVACION = this.FINACTIVACION;
	            
	}

	public void copyKeysDataTo(Actualiza3Struct other) {

		other.POBLACION_ID = this.POBLACION_ID;
	            	other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.POBLACION_ID = (BigDecimal) dis.readObject();
					
					this.POBLACION_NOMBRE = readString(dis);
					
					this.POBLACION_SIGLA = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.POBLACION_ID = (BigDecimal) dis.readObject();
					
					this.POBLACION_NOMBRE = readString(dis);
					
					this.POBLACION_SIGLA = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBLACION_ID);
					
					// String
				
						writeString(this.POBLACION_NOMBRE,dos);
					
					// String
				
						writeString(this.POBLACION_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.POBLACION_ID);
					
					// String
				
						writeString(this.POBLACION_NOMBRE,dos);
					
					// String
				
						writeString(this.POBLACION_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",POBLACION_ID="+String.valueOf(POBLACION_ID));
		sb.append(",POBLACION_NOMBRE="+POBLACION_NOMBRE);
		sb.append(",POBLACION_SIGLA="+POBLACION_SIGLA);
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",FINACTIVACION="+String.valueOf(FINACTIVACION));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Actualiza3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.POBLACION_ID, other.POBLACION_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.BIOLOGICO_ID, other.BIOLOGICO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal POBLACION_ID;

				public BigDecimal getPOBLACION_ID () {
					return this.POBLACION_ID;
				}

				public Boolean POBLACION_IDIsNullable(){
				    return false;
				}
				public Boolean POBLACION_IDIsKey(){
				    return false;
				}
				public Integer POBLACION_IDLength(){
				    return null;
				}
				public Integer POBLACION_IDPrecision(){
				    return null;
				}
				public String POBLACION_IDDefault(){
				
					return "";
				
				}
				public String POBLACION_IDComment(){
				
				    return "";
				
				}
				public String POBLACION_IDPattern(){
				
					return "";
				
				}
				public String POBLACION_IDOriginalDbColumnName(){
				
					return "POBLACION_ID";
				
				}

				
			    public String POBLACION_NOMBRE;

				public String getPOBLACION_NOMBRE () {
					return this.POBLACION_NOMBRE;
				}

				public Boolean POBLACION_NOMBREIsNullable(){
				    return false;
				}
				public Boolean POBLACION_NOMBREIsKey(){
				    return false;
				}
				public Integer POBLACION_NOMBRELength(){
				    return null;
				}
				public Integer POBLACION_NOMBREPrecision(){
				    return null;
				}
				public String POBLACION_NOMBREDefault(){
				
					return null;
				
				}
				public String POBLACION_NOMBREComment(){
				
				    return "";
				
				}
				public String POBLACION_NOMBREPattern(){
				
					return "";
				
				}
				public String POBLACION_NOMBREOriginalDbColumnName(){
				
					return "POBLACION_NOMBRE";
				
				}

				
			    public String POBLACION_SIGLA;

				public String getPOBLACION_SIGLA () {
					return this.POBLACION_SIGLA;
				}

				public Boolean POBLACION_SIGLAIsNullable(){
				    return false;
				}
				public Boolean POBLACION_SIGLAIsKey(){
				    return false;
				}
				public Integer POBLACION_SIGLALength(){
				    return null;
				}
				public Integer POBLACION_SIGLAPrecision(){
				    return null;
				}
				public String POBLACION_SIGLADefault(){
				
					return null;
				
				}
				public String POBLACION_SIGLAComment(){
				
				    return "";
				
				}
				public String POBLACION_SIGLAPattern(){
				
					return "";
				
				}
				public String POBLACION_SIGLAOriginalDbColumnName(){
				
					return "POBLACION_SIGLA";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICO_IDLength(){
				    return null;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public java.util.Date FINACTIVACION;

				public java.util.Date getFINACTIVACION () {
					return this.FINACTIVACION;
				}

				public Boolean FINACTIVACIONIsNullable(){
				    return true;
				}
				public Boolean FINACTIVACIONIsKey(){
				    return false;
				}
				public Integer FINACTIVACIONLength(){
				    return null;
				}
				public Integer FINACTIVACIONPrecision(){
				    return null;
				}
				public String FINACTIVACIONDefault(){
				
					return null;
				
				}
				public String FINACTIVACIONComment(){
				
				    return "";
				
				}
				public String FINACTIVACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FINACTIVACIONOriginalDbColumnName(){
				
					return "FINACTIVACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.POBLACION_ID = (BigDecimal) dis.readObject();
					
					this.POBLACION_NOMBRE = readString(dis);
					
					this.POBLACION_SIGLA = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.POBLACION_ID = (BigDecimal) dis.readObject();
					
					this.POBLACION_NOMBRE = readString(dis);
					
					this.POBLACION_SIGLA = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBLACION_ID);
					
					// String
				
						writeString(this.POBLACION_NOMBRE,dos);
					
					// String
				
						writeString(this.POBLACION_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.POBLACION_ID);
					
					// String
				
						writeString(this.POBLACION_NOMBRE,dos);
					
					// String
				
						writeString(this.POBLACION_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",POBLACION_ID="+String.valueOf(POBLACION_ID));
		sb.append(",POBLACION_NOMBRE="+POBLACION_NOMBRE);
		sb.append(",POBLACION_SIGLA="+POBLACION_SIGLA);
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",FINACTIVACION="+String.valueOf(FINACTIVACION));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_12Struct implements routines.system.IPersistableRow<after_tOracleInput_12Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal POBLACION_ID;

				public BigDecimal getPOBLACION_ID () {
					return this.POBLACION_ID;
				}

				public Boolean POBLACION_IDIsNullable(){
				    return false;
				}
				public Boolean POBLACION_IDIsKey(){
				    return false;
				}
				public Integer POBLACION_IDLength(){
				    return null;
				}
				public Integer POBLACION_IDPrecision(){
				    return null;
				}
				public String POBLACION_IDDefault(){
				
					return "";
				
				}
				public String POBLACION_IDComment(){
				
				    return "";
				
				}
				public String POBLACION_IDPattern(){
				
					return "";
				
				}
				public String POBLACION_IDOriginalDbColumnName(){
				
					return "POBLACION_ID";
				
				}

				
			    public String POBLACION_NOMBRE;

				public String getPOBLACION_NOMBRE () {
					return this.POBLACION_NOMBRE;
				}

				public Boolean POBLACION_NOMBREIsNullable(){
				    return false;
				}
				public Boolean POBLACION_NOMBREIsKey(){
				    return false;
				}
				public Integer POBLACION_NOMBRELength(){
				    return null;
				}
				public Integer POBLACION_NOMBREPrecision(){
				    return null;
				}
				public String POBLACION_NOMBREDefault(){
				
					return null;
				
				}
				public String POBLACION_NOMBREComment(){
				
				    return "";
				
				}
				public String POBLACION_NOMBREPattern(){
				
					return "";
				
				}
				public String POBLACION_NOMBREOriginalDbColumnName(){
				
					return "POBLACION_NOMBRE";
				
				}

				
			    public String POBLACION_SIGLA;

				public String getPOBLACION_SIGLA () {
					return this.POBLACION_SIGLA;
				}

				public Boolean POBLACION_SIGLAIsNullable(){
				    return false;
				}
				public Boolean POBLACION_SIGLAIsKey(){
				    return false;
				}
				public Integer POBLACION_SIGLALength(){
				    return null;
				}
				public Integer POBLACION_SIGLAPrecision(){
				    return null;
				}
				public String POBLACION_SIGLADefault(){
				
					return null;
				
				}
				public String POBLACION_SIGLAComment(){
				
				    return "";
				
				}
				public String POBLACION_SIGLAPattern(){
				
					return "";
				
				}
				public String POBLACION_SIGLAOriginalDbColumnName(){
				
					return "POBLACION_SIGLA";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICO_IDLength(){
				    return null;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public java.util.Date FINACTIVACION;

				public java.util.Date getFINACTIVACION () {
					return this.FINACTIVACION;
				}

				public Boolean FINACTIVACIONIsNullable(){
				    return true;
				}
				public Boolean FINACTIVACIONIsKey(){
				    return false;
				}
				public Integer FINACTIVACIONLength(){
				    return null;
				}
				public Integer FINACTIVACIONPrecision(){
				    return null;
				}
				public String FINACTIVACIONDefault(){
				
					return null;
				
				}
				public String FINACTIVACIONComment(){
				
				    return "";
				
				}
				public String FINACTIVACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FINACTIVACIONOriginalDbColumnName(){
				
					return "FINACTIVACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.POBLACION_ID = (BigDecimal) dis.readObject();
					
					this.POBLACION_NOMBRE = readString(dis);
					
					this.POBLACION_SIGLA = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.POBLACION_ID = (BigDecimal) dis.readObject();
					
					this.POBLACION_NOMBRE = readString(dis);
					
					this.POBLACION_SIGLA = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBLACION_ID);
					
					// String
				
						writeString(this.POBLACION_NOMBRE,dos);
					
					// String
				
						writeString(this.POBLACION_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.POBLACION_ID);
					
					// String
				
						writeString(this.POBLACION_NOMBRE,dos);
					
					// String
				
						writeString(this.POBLACION_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",POBLACION_ID="+String.valueOf(POBLACION_ID));
		sb.append(",POBLACION_NOMBRE="+POBLACION_NOMBRE);
		sb.append(",POBLACION_SIGLA="+POBLACION_SIGLA);
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",FINACTIVACION="+String.valueOf(FINACTIVACION));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_11Process(globalMap);
		tOracleInput_13Process(globalMap);

		row12Struct row12 = new row12Struct();
Inserta3Struct Inserta3 = new Inserta3Struct();
Actualiza3Struct Actualiza3 = new Actualiza3Struct();





	
	/**
	 * [tOracleOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_7", false);
		start_Hash.put("tOracleOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta3");
					}
				
		int tos_count_tOracleOutput_7 = 0;
		






    
    int nb_line_tOracleOutput_7 = 0;
    int nb_line_update_tOracleOutput_7 = 0;
    int nb_line_inserted_tOracleOutput_7 = 0;
    int nb_line_deleted_tOracleOutput_7 = 0;
    int nb_line_rejected_tOracleOutput_7 = 0;

    int tmp_batchUpdateCount_tOracleOutput_7 = 0;

    int deletedCount_tOracleOutput_7=0;
    int updatedCount_tOracleOutput_7=0;
    int insertedCount_tOracleOutput_7=0;
    int rowsToCommitCount_tOracleOutput_7=0;
    int rejectedCount_tOracleOutput_7=0;

    boolean whetherReject_tOracleOutput_7 = false;

    java.sql.Connection conn_tOracleOutput_7 = null;

    //optional table
    String dbschema_tOracleOutput_7 = null;
    String tableName_tOracleOutput_7 = null;
                    String driverClass_tOracleOutput_7 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_7);
                String url_tOracleOutput_7 = null;
                    url_tOracleOutput_7 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_7 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_7 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_7 = decryptedPassword_tOracleOutput_7;
                dbschema_tOracleOutput_7 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_7 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_7.put("user",dbUser_tOracleOutput_7);
                    atnParamsPrope_tOracleOutput_7.put("password",dbPwd_tOracleOutput_7);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_7.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_7 = java.sql.DriverManager.getConnection(url_tOracleOutput_7, atnParamsPrope_tOracleOutput_7);
        resourceMap.put("conn_tOracleOutput_7", conn_tOracleOutput_7);
            conn_tOracleOutput_7.setAutoCommit(false);
            int commitEvery_tOracleOutput_7 = 5000;
            int commitCounter_tOracleOutput_7 = 0;
        int batchSize_tOracleOutput_7 = 5000;
        int batchSizeCounter_tOracleOutput_7=0;
        int count_tOracleOutput_7=0;

        if(dbschema_tOracleOutput_7 == null || dbschema_tOracleOutput_7.trim().length() == 0) {
            tableName_tOracleOutput_7 = ("BVAC_POBLACIONBIOLOGICO");
        } else {
            tableName_tOracleOutput_7 = dbschema_tOracleOutput_7 + "." + ("BVAC_POBLACIONBIOLOGICO");
        }
                String insert_tOracleOutput_7 = "INSERT INTO " + tableName_tOracleOutput_7 + " (ID,POBLACION_ID,POBLACION_NOMBRE,POBLACION_SIGLA,BIOLOGICO_ID,ESTADO,FINACTIVACION) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_7 = conn_tOracleOutput_7.prepareStatement(insert_tOracleOutput_7);
                        resourceMap.put("pstmt_tOracleOutput_7", pstmt_tOracleOutput_7);





 



/**
 * [tOracleOutput_7 begin ] stop
 */




	
	/**
	 * [tOracleOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_8", false);
		start_Hash.put("tOracleOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Actualiza3");
					}
				
		int tos_count_tOracleOutput_8 = 0;
		






        int updateKeyCount_tOracleOutput_8 = 2;
        if(updateKeyCount_tOracleOutput_8 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_8 == 7 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_8 = 0;
    int nb_line_update_tOracleOutput_8 = 0;
    int nb_line_inserted_tOracleOutput_8 = 0;
    int nb_line_deleted_tOracleOutput_8 = 0;
    int nb_line_rejected_tOracleOutput_8 = 0;

    int tmp_batchUpdateCount_tOracleOutput_8 = 0;

    int deletedCount_tOracleOutput_8=0;
    int updatedCount_tOracleOutput_8=0;
    int insertedCount_tOracleOutput_8=0;
    int rowsToCommitCount_tOracleOutput_8=0;
    int rejectedCount_tOracleOutput_8=0;

    boolean whetherReject_tOracleOutput_8 = false;

    java.sql.Connection conn_tOracleOutput_8 = null;

    //optional table
    String dbschema_tOracleOutput_8 = null;
    String tableName_tOracleOutput_8 = null;
                    String driverClass_tOracleOutput_8 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_8);
                String url_tOracleOutput_8 = null;
                    url_tOracleOutput_8 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_8 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_8 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_8 = decryptedPassword_tOracleOutput_8;
                dbschema_tOracleOutput_8 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_8 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_8.put("user",dbUser_tOracleOutput_8);
                    atnParamsPrope_tOracleOutput_8.put("password",dbPwd_tOracleOutput_8);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_8.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_8 = java.sql.DriverManager.getConnection(url_tOracleOutput_8, atnParamsPrope_tOracleOutput_8);
        resourceMap.put("conn_tOracleOutput_8", conn_tOracleOutput_8);
            conn_tOracleOutput_8.setAutoCommit(false);
            int commitEvery_tOracleOutput_8 = 5000;
            int commitCounter_tOracleOutput_8 = 0;
        int batchSize_tOracleOutput_8 = 5000;
        int batchSizeCounter_tOracleOutput_8=0;
        int count_tOracleOutput_8=0;

        if(dbschema_tOracleOutput_8 == null || dbschema_tOracleOutput_8.trim().length() == 0) {
            tableName_tOracleOutput_8 = ("BVAC_POBLACIONBIOLOGICO");
        } else {
            tableName_tOracleOutput_8 = dbschema_tOracleOutput_8 + "." + ("BVAC_POBLACIONBIOLOGICO");
        }
                String update_tOracleOutput_8 = "UPDATE " + tableName_tOracleOutput_8 + " SET ID = ?,POBLACION_NOMBRE = ?,POBLACION_SIGLA = ?,ESTADO = ?,FINACTIVACION = ? WHERE POBLACION_ID = ? AND BIOLOGICO_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_8 = conn_tOracleOutput_8.prepareStatement(update_tOracleOutput_8);
                resourceMap.put("pstmt_tOracleOutput_8", pstmt_tOracleOutput_8);





 



/**
 * [tOracleOutput_8 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
					globalMap.get( "tHash_Lookup_row14" ))
					;					
					
	

row14Struct row14HashKey = new row14Struct();
row14Struct row14Default = new row14Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
Inserta3Struct Inserta3_tmp = new Inserta3Struct();
Actualiza3Struct Actualiza3_tmp = new Actualiza3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_12", false);
		start_Hash.put("tOracleInput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_12";
	
	
		int tos_count_tOracleInput_12 = 0;
		
	


	
		    int nb_line_tOracleInput_12 = 0;
		    java.sql.Connection conn_tOracleInput_12 = null;
				conn_tOracleInput_12 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_12 = false;
				boolean isConnectionWrapped_tOracleInput_12 = !(conn_tOracleInput_12 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_12.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_12 = null;
                if (isConnectionWrapped_tOracleInput_12) {
					unwrappedOraConn_tOracleInput_12 = conn_tOracleInput_12.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_12 != null) {
                        isTimeZoneNull_tOracleInput_12 = (unwrappedOraConn_tOracleInput_12.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_12 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_12).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_12) {
					java.sql.Statement stmtGetTZ_tOracleInput_12 = conn_tOracleInput_12.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_12 = stmtGetTZ_tOracleInput_12.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_12 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_12.next()) {
						sessionTimezone_tOracleInput_12 = rsGetTZ_tOracleInput_12.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_12 && unwrappedOraConn_tOracleInput_12 != null) {
                        unwrappedOraConn_tOracleInput_12.setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_12).setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_12 = conn_tOracleInput_12.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_12.setFetchSize(5000);


		    String dbquery_tOracleInput_12 = "SELECT  ID\n        , POBLACION_ID\n        , POBLACION_NOMBRE\n        , POBLACION_SIGLA\n        , BIOLOGICO_ID\n    "
+"    , ESTADO \n        , to_date (FINACTIVACION) AS FINACTIVACION\nFROM ( \n  SELECT  EPO.ID \n          ,PO.ID AS POBLA"
+"CION_ID\n          ,PO.NOMBRE AS POBLACION_NOMBRE        \n          ,PO.SIGLA AS POBLACION_SIGLA\n          ,ES.BIOLOGI"
+"COS_ID AS BIOLOGICO_ID\n          ,ROW_NUMBER() OVER (PARTITION BY PO.ID,ES.BIOLOGICOS_ID ORDER BY EPO.ID ) R\n         "
+" ,DECODE ( EST.CANT, NULL, 'Activo', 'Inactivo') AS ESTADO\n          ,DECODE ( EST.CANT, NULL, NULL, NVL( EST.FINACTIVA"
+"CION ,TO_DATE ('"+context.FECHA_PERIODO+"','DD/MM/YYYY'))) AS FINACTIVACION          \n  FROM VAC_POBLACIONOBJETO PO \n  INNER JOIN VAC_ESQUEMAS_POBLACIONOBJETO"
+" EPO ON EPO.POBLACIONOBJETO_ID = PO.ID\n  INNER JOIN VAC_ESQUEMAS ES ON ES.ID = EPO.ESQUEMAS_ID \n  INNER JOIN ( \n    S"
+"ELECT  COUNT (EPO.ID) CANT\n            ,PO.ID AS POBLACION_ID\n            ,ES.BIOLOGICOS_ID AS BIOLOGICO_ID        \n "
+"   FROM VAC_POBLACIONOBJETO PO \n    INNER JOIN VAC_ESQUEMAS_POBLACIONOBJETO EPO ON EPO.POBLACIONOBJETO_ID = PO.ID\n    "
+"INNER JOIN VAC_ESQUEMAS ES ON ES.ID = EPO.ESQUEMAS_ID\n    WHERE ( TO_CHAR( EPO.FREGISTRO, 'YYYYMM') = '"+context.PERIODO+"' OR TO_CHAR( EPO.FACTUALIZACION ) = '"+context.PERIODO+"' )\n    GROUP BY  PO.ID\n              ,ES.BIOLOGICOS_ID\n  ) FFECHA ON FFECHA.POBLACION_ID = PO.ID AND FFECHA.BIOLOGI"
+"CO_ID = ES.BIOLOGICOS_ID\n  LEFT JOIN (\n    SELECT  PO.ID AS POBLACION_ID\n            ,ES.BIOLOGICOS_ID AS BIOLOGICO_I"
+"D    \n            ,COUNT (EPO.ID) CANT\n            ,MAX( EPO.FACTUALIZACION ) AS FINACTIVACION\n    FROM VAC_POBLACION"
+"OBJETO PO \n    INNER JOIN VAC_ESQUEMAS_POBLACIONOBJETO EPO ON EPO.POBLACIONOBJETO_ID = PO.ID\n    INNER JOIN VAC_ESQUEM"
+"AS ES ON ES.ID = EPO.ESQUEMAS_ID\n    WHERE ( ES.ESTADO = 'Inactivo' OR EPO.ESTADO = 'Inactivo' )\n    GROUP BY  PO.ID\n"
+"              ,ES.BIOLOGICOS_ID\n  ) EST ON EST.POBLACION_ID = PO.ID AND EST.BIOLOGICO_ID = ES.BIOLOGICOS_ID AND EST.CAN"
+"T = FFECHA.CANT   \n) WHERE R = 1";
		    

		    globalMap.put("tOracleInput_12_QUERY",dbquery_tOracleInput_12);

		    java.sql.ResultSet rs_tOracleInput_12 = null;

		    try {
		    	rs_tOracleInput_12 = stmt_tOracleInput_12.executeQuery(dbquery_tOracleInput_12);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_12 = rs_tOracleInput_12.getMetaData();
		    	int colQtyInRs_tOracleInput_12 = rsmd_tOracleInput_12.getColumnCount();

		    String tmpContent_tOracleInput_12 = null;
		    
		    
		    while (rs_tOracleInput_12.next()) {
		        nb_line_tOracleInput_12++;
		        
							if(colQtyInRs_tOracleInput_12 < 1) {
								row12.ID = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(1) != null) {
						row12.ID = rs_tOracleInput_12.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 2) {
								row12.POBLACION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(2) != null) {
						row12.POBLACION_ID = rs_tOracleInput_12.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 3) {
								row12.POBLACION_NOMBRE = null;
							} else {
	                         		
        	row12.POBLACION_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_12, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_12 < 4) {
								row12.POBLACION_SIGLA = null;
							} else {
	                         		
        	row12.POBLACION_SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_12, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_12 < 5) {
								row12.BIOLOGICO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(5) != null) {
						row12.BIOLOGICO_ID = rs_tOracleInput_12.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 6) {
								row12.ESTADO = null;
							} else {
	                         		
        	row12.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_12, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_12 < 7) {
								row12.FINACTIVACION = null;
							} else {
										
			row12.FINACTIVACION = routines.system.JDBCUtil.getDate(rs_tOracleInput_12, 7);
		                    }
					




 



/**
 * [tOracleInput_12 begin ] stop
 */
	
	/**
	 * [tOracleInput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 


	tos_count_tOracleInput_12++;

/**
 * [tOracleInput_12 main ] stop
 */
	
	/**
	 * [tOracleInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row13Struct row13 = null;
					
						row14Struct row14 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row13HashKey.POBLACION_ID = row12.POBLACION_ID ;
                        		    		
                        		    		    row13HashKey.POBLACION_NOMBRE = row12.POBLACION_NOMBRE ;
                        		    		
                        		    		    row13HashKey.POBLACION_SIGLA = row12.POBLACION_SIGLA ;
                        		    		
                        		    		    row13HashKey.BIOLOGICO_ID = row12.BIOLOGICO_ID ;
                        		    		
                        		    		    row13HashKey.ESTADO = row12.ESTADO ;
                        		    		
                        		    		    row13HashKey.FINACTIVACION = row12.FINACTIVACION  == null ? null : new java.util.Date((row12.FINACTIVACION ).getTime());
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row14" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow14 = false;
       		  	    	
       		  	    	
 							row14Struct row14ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row14HashKey.POBLACION_ID = row12.POBLACION_ID ;
                        		    		
                        		    		    row14HashKey.BIOLOGICO_ID = row12.BIOLOGICO_ID ;
                        		    		

								
		                        	row14HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row14.lookup( row14HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row14Struct fromLookup_row14 = null;
							row14 = row14Default;
										 
							
								 
							
							
								if (tHash_Lookup_row14 !=null && tHash_Lookup_row14.hasNext()) { // G 099
								
							
								
								fromLookup_row14 = tHash_Lookup_row14.next();

							
							
								} // G 099
							
							

							if(fromLookup_row14 != null) {
								row14 = fromLookup_row14;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

Inserta3 = null;
Actualiza3 = null;


// # Output table : 'Inserta3'
// # Filter conditions 
if( 

row14.POBLACION_ID == null

 ) {
Inserta3_tmp.ID = row12.ID ;
Inserta3_tmp.POBLACION_ID = row12.POBLACION_ID ;
Inserta3_tmp.POBLACION_NOMBRE = row12.POBLACION_NOMBRE ;
Inserta3_tmp.POBLACION_SIGLA = row12.POBLACION_SIGLA ;
Inserta3_tmp.BIOLOGICO_ID = row12.BIOLOGICO_ID ;
Inserta3_tmp.ESTADO = row12.ESTADO ;
Inserta3_tmp.FINACTIVACION = row12.FINACTIVACION ;
Inserta3 = Inserta3_tmp;
} // closing filter/reject

// # Output table : 'Actualiza3'
// # Filter conditions 
if( 

row14.POBLACION_ID != null  && row13.ID == null

 ) {
Actualiza3_tmp.ID = row12.ID ;
Actualiza3_tmp.POBLACION_ID = row12.POBLACION_ID ;
Actualiza3_tmp.POBLACION_NOMBRE = row12.POBLACION_NOMBRE ;
Actualiza3_tmp.POBLACION_SIGLA = row12.POBLACION_SIGLA ;
Actualiza3_tmp.BIOLOGICO_ID = row12.BIOLOGICO_ID ;
Actualiza3_tmp.ESTADO = row12.ESTADO ;
Actualiza3_tmp.FINACTIVACION = row12.FINACTIVACION ;
Actualiza3 = Actualiza3_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "Inserta3"
if(Inserta3 != null) { 



	
	/**
	 * [tOracleOutput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta3"
						
						);
					}
					



        whetherReject_tOracleOutput_7 = false;
                        pstmt_tOracleOutput_7.setBigDecimal(1, Inserta3.ID);

                        pstmt_tOracleOutput_7.setBigDecimal(2, Inserta3.POBLACION_ID);

                        if(Inserta3.POBLACION_NOMBRE == null) {
pstmt_tOracleOutput_7.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_7.setString(3, Inserta3.POBLACION_NOMBRE);
}

                        if(Inserta3.POBLACION_SIGLA == null) {
pstmt_tOracleOutput_7.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_7.setString(4, Inserta3.POBLACION_SIGLA);
}

                        pstmt_tOracleOutput_7.setBigDecimal(5, Inserta3.BIOLOGICO_ID);

                        if(Inserta3.ESTADO == null) {
pstmt_tOracleOutput_7.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_7.setString(6, Inserta3.ESTADO);
}

                        if(Inserta3.FINACTIVACION != null) {
pstmt_tOracleOutput_7.setObject(7, new java.sql.Timestamp(Inserta3.FINACTIVACION.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_7.setNull(7, java.sql.Types.DATE);
}

                pstmt_tOracleOutput_7.addBatch();
                nb_line_tOracleOutput_7++;
                batchSizeCounter_tOracleOutput_7++;
            if (batchSize_tOracleOutput_7 > 0 &&  batchSize_tOracleOutput_7 <= batchSizeCounter_tOracleOutput_7) {
                try {
                    pstmt_tOracleOutput_7.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_7){
globalMap.put("tOracleOutput_7_ERROR_MESSAGE",e_tOracleOutput_7.getMessage());
			        java.sql.SQLException ne_tOracleOutput_7 = e_tOracleOutput_7.getNextException(),sqle_tOracleOutput_7=null;
			    	String errormessage_tOracleOutput_7;
					if (ne_tOracleOutput_7 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_7 = new java.sql.SQLException(e_tOracleOutput_7.getMessage() + "\ncaused by: " + ne_tOracleOutput_7.getMessage(), ne_tOracleOutput_7.getSQLState(), ne_tOracleOutput_7.getErrorCode(), ne_tOracleOutput_7);
						errormessage_tOracleOutput_7 = sqle_tOracleOutput_7.getMessage();
					}else{
						errormessage_tOracleOutput_7 = e_tOracleOutput_7.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_7);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_7 = pstmt_tOracleOutput_7.getUpdateCount();
                    insertedCount_tOracleOutput_7
                += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
                rowsToCommitCount_tOracleOutput_7 += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
                batchSizeCounter_tOracleOutput_7 = 0;
            }
                commitCounter_tOracleOutput_7++;
                if(commitEvery_tOracleOutput_7 <= commitCounter_tOracleOutput_7) {
                    if(batchSizeCounter_tOracleOutput_7 > 0) {
                        try {
                            pstmt_tOracleOutput_7.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_7){
globalMap.put("tOracleOutput_7_ERROR_MESSAGE",e_tOracleOutput_7.getMessage());
					        java.sql.SQLException ne_tOracleOutput_7 = e_tOracleOutput_7.getNextException(),sqle_tOracleOutput_7=null;
					    	String errormessage_tOracleOutput_7;
							if (ne_tOracleOutput_7 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_7 = new java.sql.SQLException(e_tOracleOutput_7.getMessage() + "\ncaused by: " + ne_tOracleOutput_7.getMessage(), ne_tOracleOutput_7.getSQLState(), ne_tOracleOutput_7.getErrorCode(), ne_tOracleOutput_7);
								errormessage_tOracleOutput_7 = sqle_tOracleOutput_7.getMessage();
							}else{
								errormessage_tOracleOutput_7 = e_tOracleOutput_7.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_7);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_7 = pstmt_tOracleOutput_7.getUpdateCount();
                            insertedCount_tOracleOutput_7
                        += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
                        rowsToCommitCount_tOracleOutput_7 += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_7 != 0){
                    	
                    }
                    conn_tOracleOutput_7.commit();
                    if(rowsToCommitCount_tOracleOutput_7 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_7 = 0;
                    }
                    commitCounter_tOracleOutput_7=0;
                    	batchSizeCounter_tOracleOutput_7=0;
                }

 


	tos_count_tOracleOutput_7++;

/**
 * [tOracleOutput_7 main ] stop
 */
	
	/**
	 * [tOracleOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	

 



/**
 * [tOracleOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	

 



/**
 * [tOracleOutput_7 process_data_end ] stop
 */

} // End of branch "Inserta3"




// Start of branch "Actualiza3"
if(Actualiza3 != null) { 



	
	/**
	 * [tOracleOutput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Actualiza3"
						
						);
					}
					



        whetherReject_tOracleOutput_8 = false;
                    pstmt_tOracleOutput_8.setBigDecimal(1, Actualiza3.ID);

                    if(Actualiza3.POBLACION_NOMBRE == null) {
pstmt_tOracleOutput_8.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_8.setString(2, Actualiza3.POBLACION_NOMBRE);
}

                    if(Actualiza3.POBLACION_SIGLA == null) {
pstmt_tOracleOutput_8.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_8.setString(3, Actualiza3.POBLACION_SIGLA);
}

                    if(Actualiza3.ESTADO == null) {
pstmt_tOracleOutput_8.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_8.setString(4, Actualiza3.ESTADO);
}

                    if(Actualiza3.FINACTIVACION != null) {
pstmt_tOracleOutput_8.setObject(5, new java.sql.Timestamp(Actualiza3.FINACTIVACION.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_8.setNull(5, java.sql.Types.DATE);
}


                    pstmt_tOracleOutput_8.setBigDecimal(6 + count_tOracleOutput_8, Actualiza3.POBLACION_ID);


                    pstmt_tOracleOutput_8.setBigDecimal(7 + count_tOracleOutput_8, Actualiza3.BIOLOGICO_ID);

                pstmt_tOracleOutput_8.addBatch();
                nb_line_tOracleOutput_8++;
                batchSizeCounter_tOracleOutput_8++;
            if (batchSize_tOracleOutput_8 > 0 &&  batchSize_tOracleOutput_8 <= batchSizeCounter_tOracleOutput_8) {
                try {
                    pstmt_tOracleOutput_8.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_8){
globalMap.put("tOracleOutput_8_ERROR_MESSAGE",e_tOracleOutput_8.getMessage());
			        java.sql.SQLException ne_tOracleOutput_8 = e_tOracleOutput_8.getNextException(),sqle_tOracleOutput_8=null;
			    	String errormessage_tOracleOutput_8;
					if (ne_tOracleOutput_8 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_8 = new java.sql.SQLException(e_tOracleOutput_8.getMessage() + "\ncaused by: " + ne_tOracleOutput_8.getMessage(), ne_tOracleOutput_8.getSQLState(), ne_tOracleOutput_8.getErrorCode(), ne_tOracleOutput_8);
						errormessage_tOracleOutput_8 = sqle_tOracleOutput_8.getMessage();
					}else{
						errormessage_tOracleOutput_8 = e_tOracleOutput_8.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_8);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_8 = pstmt_tOracleOutput_8.getUpdateCount();
                    updatedCount_tOracleOutput_8
                += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
                rowsToCommitCount_tOracleOutput_8 += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
                batchSizeCounter_tOracleOutput_8 = 0;
            }
                commitCounter_tOracleOutput_8++;
                if(commitEvery_tOracleOutput_8 <= commitCounter_tOracleOutput_8) {
                    if(batchSizeCounter_tOracleOutput_8 > 0) {
                        try {
                            pstmt_tOracleOutput_8.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_8){
globalMap.put("tOracleOutput_8_ERROR_MESSAGE",e_tOracleOutput_8.getMessage());
					        java.sql.SQLException ne_tOracleOutput_8 = e_tOracleOutput_8.getNextException(),sqle_tOracleOutput_8=null;
					    	String errormessage_tOracleOutput_8;
							if (ne_tOracleOutput_8 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_8 = new java.sql.SQLException(e_tOracleOutput_8.getMessage() + "\ncaused by: " + ne_tOracleOutput_8.getMessage(), ne_tOracleOutput_8.getSQLState(), ne_tOracleOutput_8.getErrorCode(), ne_tOracleOutput_8);
								errormessage_tOracleOutput_8 = sqle_tOracleOutput_8.getMessage();
							}else{
								errormessage_tOracleOutput_8 = e_tOracleOutput_8.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_8);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_8 = pstmt_tOracleOutput_8.getUpdateCount();
                            updatedCount_tOracleOutput_8
                        += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
                        rowsToCommitCount_tOracleOutput_8 += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_8 != 0){
                    	
                    }
                    conn_tOracleOutput_8.commit();
                    if(rowsToCommitCount_tOracleOutput_8 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_8 = 0;
                    }
                    commitCounter_tOracleOutput_8=0;
                    	batchSizeCounter_tOracleOutput_8=0;
                }

 


	tos_count_tOracleOutput_8++;

/**
 * [tOracleOutput_8 main ] stop
 */
	
	/**
	 * [tOracleOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	

 



/**
 * [tOracleOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	

 



/**
 * [tOracleOutput_8 process_data_end ] stop
 */

} // End of branch "Actualiza3"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

}
}finally{
	if (rs_tOracleInput_12 != null) {
		rs_tOracleInput_12.close();
	}
	if (stmt_tOracleInput_12 != null) {
		stmt_tOracleInput_12.close();
	}
}

globalMap.put("tOracleInput_12_NB_LINE",nb_line_tOracleInput_12);
 

ok_Hash.put("tOracleInput_12", true);
end_Hash.put("tOracleInput_12", System.currentTimeMillis());




/**
 * [tOracleInput_12 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
					if(tHash_Lookup_row14 != null) {
						tHash_Lookup_row14.endGet();
					}
					globalMap.remove( "tHash_Lookup_row14" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tOracleOutput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_7 > 0) {
            try {
            	if (pstmt_tOracleOutput_7 != null) {
					
					pstmt_tOracleOutput_7.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_7){
globalMap.put("tOracleOutput_7_ERROR_MESSAGE",e_tOracleOutput_7.getMessage());
		        java.sql.SQLException ne_tOracleOutput_7 = e_tOracleOutput_7.getNextException(),sqle_tOracleOutput_7=null;
		    	String errormessage_tOracleOutput_7;
				if (ne_tOracleOutput_7 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_7 = new java.sql.SQLException(e_tOracleOutput_7.getMessage() + "\ncaused by: " + ne_tOracleOutput_7.getMessage(), ne_tOracleOutput_7.getSQLState(), ne_tOracleOutput_7.getErrorCode(), ne_tOracleOutput_7);
					errormessage_tOracleOutput_7 = sqle_tOracleOutput_7.getMessage();
				}else{
					errormessage_tOracleOutput_7 = e_tOracleOutput_7.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_7);
            	
        	}
        	if (pstmt_tOracleOutput_7 != null) {
            	tmp_batchUpdateCount_tOracleOutput_7 = pstmt_tOracleOutput_7.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_7
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
				rowsToCommitCount_tOracleOutput_7 += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
            }
        }
        if(pstmt_tOracleOutput_7 != null) {
			
				pstmt_tOracleOutput_7.close();
				resourceMap.remove("pstmt_tOracleOutput_7");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_7", true);
		if(commitCounter_tOracleOutput_7 > 0 && rowsToCommitCount_tOracleOutput_7 != 0) {
			
		}
		conn_tOracleOutput_7.commit();
		if(commitCounter_tOracleOutput_7 > 0 && rowsToCommitCount_tOracleOutput_7 != 0) {
			
			rowsToCommitCount_tOracleOutput_7 = 0;
		}
		commitCounter_tOracleOutput_7 = 0;
		
		
		conn_tOracleOutput_7 .close();
		
		resourceMap.put("finish_tOracleOutput_7", true);
   	

	
	nb_line_deleted_tOracleOutput_7=nb_line_deleted_tOracleOutput_7+ deletedCount_tOracleOutput_7;
	nb_line_update_tOracleOutput_7=nb_line_update_tOracleOutput_7 + updatedCount_tOracleOutput_7;
	nb_line_inserted_tOracleOutput_7=nb_line_inserted_tOracleOutput_7 + insertedCount_tOracleOutput_7;
	nb_line_rejected_tOracleOutput_7=nb_line_rejected_tOracleOutput_7 + rejectedCount_tOracleOutput_7;
	
        globalMap.put("tOracleOutput_7_NB_LINE",nb_line_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_UPDATED",nb_line_update_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_7);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta3");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_7", true);
end_Hash.put("tOracleOutput_7", System.currentTimeMillis());




/**
 * [tOracleOutput_7 end ] stop
 */




	
	/**
	 * [tOracleOutput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_8 > 0) {
            try {
            	if (pstmt_tOracleOutput_8 != null) {
					
					pstmt_tOracleOutput_8.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_8){
globalMap.put("tOracleOutput_8_ERROR_MESSAGE",e_tOracleOutput_8.getMessage());
		        java.sql.SQLException ne_tOracleOutput_8 = e_tOracleOutput_8.getNextException(),sqle_tOracleOutput_8=null;
		    	String errormessage_tOracleOutput_8;
				if (ne_tOracleOutput_8 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_8 = new java.sql.SQLException(e_tOracleOutput_8.getMessage() + "\ncaused by: " + ne_tOracleOutput_8.getMessage(), ne_tOracleOutput_8.getSQLState(), ne_tOracleOutput_8.getErrorCode(), ne_tOracleOutput_8);
					errormessage_tOracleOutput_8 = sqle_tOracleOutput_8.getMessage();
				}else{
					errormessage_tOracleOutput_8 = e_tOracleOutput_8.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_8);
            	
        	}
        	if (pstmt_tOracleOutput_8 != null) {
            	tmp_batchUpdateCount_tOracleOutput_8 = pstmt_tOracleOutput_8.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_8
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
				rowsToCommitCount_tOracleOutput_8 += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
            }
        }
        if(pstmt_tOracleOutput_8 != null) {
			
				pstmt_tOracleOutput_8.close();
				resourceMap.remove("pstmt_tOracleOutput_8");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_8", true);
		if(commitCounter_tOracleOutput_8 > 0 && rowsToCommitCount_tOracleOutput_8 != 0) {
			
		}
		conn_tOracleOutput_8.commit();
		if(commitCounter_tOracleOutput_8 > 0 && rowsToCommitCount_tOracleOutput_8 != 0) {
			
			rowsToCommitCount_tOracleOutput_8 = 0;
		}
		commitCounter_tOracleOutput_8 = 0;
		
		
		conn_tOracleOutput_8 .close();
		
		resourceMap.put("finish_tOracleOutput_8", true);
   	

	
	nb_line_deleted_tOracleOutput_8=nb_line_deleted_tOracleOutput_8+ deletedCount_tOracleOutput_8;
	nb_line_update_tOracleOutput_8=nb_line_update_tOracleOutput_8 + updatedCount_tOracleOutput_8;
	nb_line_inserted_tOracleOutput_8=nb_line_inserted_tOracleOutput_8 + insertedCount_tOracleOutput_8;
	nb_line_rejected_tOracleOutput_8=nb_line_rejected_tOracleOutput_8 + rejectedCount_tOracleOutput_8;
	
        globalMap.put("tOracleOutput_8_NB_LINE",nb_line_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_UPDATED",nb_line_update_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_8);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Actualiza3");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_8", true);
end_Hash.put("tOracleOutput_8", System.currentTimeMillis());




/**
 * [tOracleOutput_8 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_12:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tOracleInput_14Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row14"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tOracleOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_7 = null;
                if ((pstmtToClose_tOracleOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_7")) != null) {
                    pstmtToClose_tOracleOutput_7.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_7") == null){
            java.sql.Connection ctn_tOracleOutput_7 = null;
            if((ctn_tOracleOutput_7 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_7")) != null){
                try {
                    ctn_tOracleOutput_7.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_7) {
                    String errorMessage_tOracleOutput_7 = "failed to close the connection in tOracleOutput_7 :" + sqlEx_tOracleOutput_7.getMessage();
                    System.err.println(errorMessage_tOracleOutput_7);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_7 finally ] stop
 */




	
	/**
	 * [tOracleOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_8 = null;
                if ((pstmtToClose_tOracleOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_8")) != null) {
                    pstmtToClose_tOracleOutput_8.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_8") == null){
            java.sql.Connection ctn_tOracleOutput_8 = null;
            if((ctn_tOracleOutput_8 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_8")) != null){
                try {
                    ctn_tOracleOutput_8.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_8) {
                    String errorMessage_tOracleOutput_8 = "failed to close the connection in tOracleOutput_8 :" + sqlEx_tOracleOutput_8.getMessage();
                    System.err.println(errorMessage_tOracleOutput_8);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class Inserta4Struct implements routines.system.IPersistableRow<Inserta4Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return null;
				}
				public Integer NOMBREPrecision(){
				    return null;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal BIOLOGICOS_ID;

				public BigDecimal getBIOLOGICOS_ID () {
					return this.BIOLOGICOS_ID;
				}

				public Boolean BIOLOGICOS_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICOS_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICOS_IDLength(){
				    return null;
				}
				public Integer BIOLOGICOS_IDPrecision(){
				    return null;
				}
				public String BIOLOGICOS_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICOS_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDOriginalDbColumnName(){
				
					return "BIOLOGICOS_ID";
				
				}

				
			    public BigDecimal RANGOS_ID;

				public BigDecimal getRANGOS_ID () {
					return this.RANGOS_ID;
				}

				public Boolean RANGOS_IDIsNullable(){
				    return false;
				}
				public Boolean RANGOS_IDIsKey(){
				    return false;
				}
				public Integer RANGOS_IDLength(){
				    return null;
				}
				public Integer RANGOS_IDPrecision(){
				    return null;
				}
				public String RANGOS_IDDefault(){
				
					return "";
				
				}
				public String RANGOS_IDComment(){
				
				    return "";
				
				}
				public String RANGOS_IDPattern(){
				
					return "";
				
				}
				public String RANGOS_IDOriginalDbColumnName(){
				
					return "RANGOS_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean DOSIS_IDIsKey(){
				    return false;
				}
				public Integer DOSIS_IDLength(){
				    return null;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public java.util.Date FINACTIVACION;

				public java.util.Date getFINACTIVACION () {
					return this.FINACTIVACION;
				}

				public Boolean FINACTIVACIONIsNullable(){
				    return true;
				}
				public Boolean FINACTIVACIONIsKey(){
				    return false;
				}
				public Integer FINACTIVACIONLength(){
				    return null;
				}
				public Integer FINACTIVACIONPrecision(){
				    return null;
				}
				public String FINACTIVACIONDefault(){
				
					return null;
				
				}
				public String FINACTIVACIONComment(){
				
				    return "";
				
				}
				public String FINACTIVACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FINACTIVACIONOriginalDbColumnName(){
				
					return "FINACTIVACION";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Inserta4Struct other = (Inserta4Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Inserta4Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.BIOLOGICOS_ID = this.BIOLOGICOS_ID;
	            other.RANGOS_ID = this.RANGOS_ID;
	            other.DOSIS_ID = this.DOSIS_ID;
	            other.ESTADO = this.ESTADO;
	            other.FINACTIVACION = this.FINACTIVACION;
	            
	}

	public void copyKeysDataTo(Inserta4Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RANGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RANGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",BIOLOGICOS_ID="+String.valueOf(BIOLOGICOS_ID));
		sb.append(",RANGOS_ID="+String.valueOf(RANGOS_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",FINACTIVACION="+String.valueOf(FINACTIVACION));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Inserta4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Actualiza4Struct implements routines.system.IPersistableRow<Actualiza4Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return null;
				}
				public Integer NOMBREPrecision(){
				    return null;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal BIOLOGICOS_ID;

				public BigDecimal getBIOLOGICOS_ID () {
					return this.BIOLOGICOS_ID;
				}

				public Boolean BIOLOGICOS_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICOS_IDIsKey(){
				    return true;
				}
				public Integer BIOLOGICOS_IDLength(){
				    return null;
				}
				public Integer BIOLOGICOS_IDPrecision(){
				    return null;
				}
				public String BIOLOGICOS_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICOS_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDOriginalDbColumnName(){
				
					return "BIOLOGICOS_ID";
				
				}

				
			    public BigDecimal RANGOS_ID;

				public BigDecimal getRANGOS_ID () {
					return this.RANGOS_ID;
				}

				public Boolean RANGOS_IDIsNullable(){
				    return false;
				}
				public Boolean RANGOS_IDIsKey(){
				    return true;
				}
				public Integer RANGOS_IDLength(){
				    return null;
				}
				public Integer RANGOS_IDPrecision(){
				    return null;
				}
				public String RANGOS_IDDefault(){
				
					return "";
				
				}
				public String RANGOS_IDComment(){
				
				    return "";
				
				}
				public String RANGOS_IDPattern(){
				
					return "";
				
				}
				public String RANGOS_IDOriginalDbColumnName(){
				
					return "RANGOS_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean DOSIS_IDIsKey(){
				    return true;
				}
				public Integer DOSIS_IDLength(){
				    return null;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public java.util.Date FINACTIVACION;

				public java.util.Date getFINACTIVACION () {
					return this.FINACTIVACION;
				}

				public Boolean FINACTIVACIONIsNullable(){
				    return true;
				}
				public Boolean FINACTIVACIONIsKey(){
				    return false;
				}
				public Integer FINACTIVACIONLength(){
				    return null;
				}
				public Integer FINACTIVACIONPrecision(){
				    return null;
				}
				public String FINACTIVACIONDefault(){
				
					return null;
				
				}
				public String FINACTIVACIONComment(){
				
				    return "";
				
				}
				public String FINACTIVACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FINACTIVACIONOriginalDbColumnName(){
				
					return "FINACTIVACION";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.BIOLOGICOS_ID == null) ? 0 : this.BIOLOGICOS_ID.hashCode());
					
						result = prime * result + ((this.RANGOS_ID == null) ? 0 : this.RANGOS_ID.hashCode());
					
						result = prime * result + ((this.DOSIS_ID == null) ? 0 : this.DOSIS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Actualiza4Struct other = (Actualiza4Struct) obj;
		
						if (this.BIOLOGICOS_ID == null) {
							if (other.BIOLOGICOS_ID != null)
								return false;
						
						} else if (!this.BIOLOGICOS_ID.equals(other.BIOLOGICOS_ID))
						
							return false;
					
						if (this.RANGOS_ID == null) {
							if (other.RANGOS_ID != null)
								return false;
						
						} else if (!this.RANGOS_ID.equals(other.RANGOS_ID))
						
							return false;
					
						if (this.DOSIS_ID == null) {
							if (other.DOSIS_ID != null)
								return false;
						
						} else if (!this.DOSIS_ID.equals(other.DOSIS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Actualiza4Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.BIOLOGICOS_ID = this.BIOLOGICOS_ID;
	            other.RANGOS_ID = this.RANGOS_ID;
	            other.DOSIS_ID = this.DOSIS_ID;
	            other.ESTADO = this.ESTADO;
	            other.FINACTIVACION = this.FINACTIVACION;
	            
	}

	public void copyKeysDataTo(Actualiza4Struct other) {

		other.BIOLOGICOS_ID = this.BIOLOGICOS_ID;
	            	other.RANGOS_ID = this.RANGOS_ID;
	            	other.DOSIS_ID = this.DOSIS_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RANGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RANGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",BIOLOGICOS_ID="+String.valueOf(BIOLOGICOS_ID));
		sb.append(",RANGOS_ID="+String.valueOf(RANGOS_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",FINACTIVACION="+String.valueOf(FINACTIVACION));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Actualiza4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.BIOLOGICOS_ID, other.BIOLOGICOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.RANGOS_ID, other.RANGOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOSIS_ID, other.DOSIS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return null;
				}
				public Integer NOMBREPrecision(){
				    return null;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal BIOLOGICOS_ID;

				public BigDecimal getBIOLOGICOS_ID () {
					return this.BIOLOGICOS_ID;
				}

				public Boolean BIOLOGICOS_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICOS_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICOS_IDLength(){
				    return null;
				}
				public Integer BIOLOGICOS_IDPrecision(){
				    return null;
				}
				public String BIOLOGICOS_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICOS_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDOriginalDbColumnName(){
				
					return "BIOLOGICOS_ID";
				
				}

				
			    public BigDecimal RANGOS_ID;

				public BigDecimal getRANGOS_ID () {
					return this.RANGOS_ID;
				}

				public Boolean RANGOS_IDIsNullable(){
				    return false;
				}
				public Boolean RANGOS_IDIsKey(){
				    return false;
				}
				public Integer RANGOS_IDLength(){
				    return null;
				}
				public Integer RANGOS_IDPrecision(){
				    return null;
				}
				public String RANGOS_IDDefault(){
				
					return "";
				
				}
				public String RANGOS_IDComment(){
				
				    return "";
				
				}
				public String RANGOS_IDPattern(){
				
					return "";
				
				}
				public String RANGOS_IDOriginalDbColumnName(){
				
					return "RANGOS_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean DOSIS_IDIsKey(){
				    return false;
				}
				public Integer DOSIS_IDLength(){
				    return null;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public java.util.Date FINACTIVACION;

				public java.util.Date getFINACTIVACION () {
					return this.FINACTIVACION;
				}

				public Boolean FINACTIVACIONIsNullable(){
				    return true;
				}
				public Boolean FINACTIVACIONIsKey(){
				    return false;
				}
				public Integer FINACTIVACIONLength(){
				    return null;
				}
				public Integer FINACTIVACIONPrecision(){
				    return null;
				}
				public String FINACTIVACIONDefault(){
				
					return null;
				
				}
				public String FINACTIVACIONComment(){
				
				    return "";
				
				}
				public String FINACTIVACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FINACTIVACIONOriginalDbColumnName(){
				
					return "FINACTIVACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RANGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RANGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",BIOLOGICOS_ID="+String.valueOf(BIOLOGICOS_ID));
		sb.append(",RANGOS_ID="+String.valueOf(RANGOS_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",FINACTIVACION="+String.valueOf(FINACTIVACION));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_14Struct implements routines.system.IPersistableRow<after_tOracleInput_14Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return null;
				}
				public Integer NOMBREPrecision(){
				    return null;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal BIOLOGICOS_ID;

				public BigDecimal getBIOLOGICOS_ID () {
					return this.BIOLOGICOS_ID;
				}

				public Boolean BIOLOGICOS_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICOS_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICOS_IDLength(){
				    return null;
				}
				public Integer BIOLOGICOS_IDPrecision(){
				    return null;
				}
				public String BIOLOGICOS_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICOS_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDOriginalDbColumnName(){
				
					return "BIOLOGICOS_ID";
				
				}

				
			    public BigDecimal RANGOS_ID;

				public BigDecimal getRANGOS_ID () {
					return this.RANGOS_ID;
				}

				public Boolean RANGOS_IDIsNullable(){
				    return false;
				}
				public Boolean RANGOS_IDIsKey(){
				    return false;
				}
				public Integer RANGOS_IDLength(){
				    return null;
				}
				public Integer RANGOS_IDPrecision(){
				    return null;
				}
				public String RANGOS_IDDefault(){
				
					return "";
				
				}
				public String RANGOS_IDComment(){
				
				    return "";
				
				}
				public String RANGOS_IDPattern(){
				
					return "";
				
				}
				public String RANGOS_IDOriginalDbColumnName(){
				
					return "RANGOS_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean DOSIS_IDIsKey(){
				    return false;
				}
				public Integer DOSIS_IDLength(){
				    return null;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public java.util.Date FINACTIVACION;

				public java.util.Date getFINACTIVACION () {
					return this.FINACTIVACION;
				}

				public Boolean FINACTIVACIONIsNullable(){
				    return true;
				}
				public Boolean FINACTIVACIONIsKey(){
				    return false;
				}
				public Integer FINACTIVACIONLength(){
				    return null;
				}
				public Integer FINACTIVACIONPrecision(){
				    return null;
				}
				public String FINACTIVACIONDefault(){
				
					return null;
				
				}
				public String FINACTIVACIONComment(){
				
				    return "";
				
				}
				public String FINACTIVACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FINACTIVACIONOriginalDbColumnName(){
				
					return "FINACTIVACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RANGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RANGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",BIOLOGICOS_ID="+String.valueOf(BIOLOGICOS_ID));
		sb.append(",RANGOS_ID="+String.valueOf(RANGOS_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",FINACTIVACION="+String.valueOf(FINACTIVACION));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_15Process(globalMap);
		tOracleInput_16Process(globalMap);

		row15Struct row15 = new row15Struct();
Inserta4Struct Inserta4 = new Inserta4Struct();
Actualiza4Struct Actualiza4 = new Actualiza4Struct();





	
	/**
	 * [tOracleOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_9", false);
		start_Hash.put("tOracleOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Inserta4");
					}
				
		int tos_count_tOracleOutput_9 = 0;
		






    
    int nb_line_tOracleOutput_9 = 0;
    int nb_line_update_tOracleOutput_9 = 0;
    int nb_line_inserted_tOracleOutput_9 = 0;
    int nb_line_deleted_tOracleOutput_9 = 0;
    int nb_line_rejected_tOracleOutput_9 = 0;

    int tmp_batchUpdateCount_tOracleOutput_9 = 0;

    int deletedCount_tOracleOutput_9=0;
    int updatedCount_tOracleOutput_9=0;
    int insertedCount_tOracleOutput_9=0;
    int rowsToCommitCount_tOracleOutput_9=0;
    int rejectedCount_tOracleOutput_9=0;

    boolean whetherReject_tOracleOutput_9 = false;

    java.sql.Connection conn_tOracleOutput_9 = null;

    //optional table
    String dbschema_tOracleOutput_9 = null;
    String tableName_tOracleOutput_9 = null;
                    String driverClass_tOracleOutput_9 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_9);
                String url_tOracleOutput_9 = null;
                    url_tOracleOutput_9 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_9 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_9 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_9 = decryptedPassword_tOracleOutput_9;
                dbschema_tOracleOutput_9 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_9 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_9.put("user",dbUser_tOracleOutput_9);
                    atnParamsPrope_tOracleOutput_9.put("password",dbPwd_tOracleOutput_9);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_9.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_9 = java.sql.DriverManager.getConnection(url_tOracleOutput_9, atnParamsPrope_tOracleOutput_9);
        resourceMap.put("conn_tOracleOutput_9", conn_tOracleOutput_9);
            conn_tOracleOutput_9.setAutoCommit(false);
            int commitEvery_tOracleOutput_9 = 5000;
            int commitCounter_tOracleOutput_9 = 0;
        int batchSize_tOracleOutput_9 = 5000;
        int batchSizeCounter_tOracleOutput_9=0;
        int count_tOracleOutput_9=0;

        if(dbschema_tOracleOutput_9 == null || dbschema_tOracleOutput_9.trim().length() == 0) {
            tableName_tOracleOutput_9 = ("BVAC_TRAZADORES");
        } else {
            tableName_tOracleOutput_9 = dbschema_tOracleOutput_9 + "." + ("BVAC_TRAZADORES");
        }
                String insert_tOracleOutput_9 = "INSERT INTO " + tableName_tOracleOutput_9 + " (ID,NOMBRE,BIOLOGICOS_ID,RANGOS_ID,DOSIS_ID,ESTADO,FINACTIVACION) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_9 = conn_tOracleOutput_9.prepareStatement(insert_tOracleOutput_9);
                        resourceMap.put("pstmt_tOracleOutput_9", pstmt_tOracleOutput_9);





 



/**
 * [tOracleOutput_9 begin ] stop
 */




	
	/**
	 * [tOracleOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_10", false);
		start_Hash.put("tOracleOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Actualiza4");
					}
				
		int tos_count_tOracleOutput_10 = 0;
		






        int updateKeyCount_tOracleOutput_10 = 3;
        if(updateKeyCount_tOracleOutput_10 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_10 == 7 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_10 = 0;
    int nb_line_update_tOracleOutput_10 = 0;
    int nb_line_inserted_tOracleOutput_10 = 0;
    int nb_line_deleted_tOracleOutput_10 = 0;
    int nb_line_rejected_tOracleOutput_10 = 0;

    int tmp_batchUpdateCount_tOracleOutput_10 = 0;

    int deletedCount_tOracleOutput_10=0;
    int updatedCount_tOracleOutput_10=0;
    int insertedCount_tOracleOutput_10=0;
    int rowsToCommitCount_tOracleOutput_10=0;
    int rejectedCount_tOracleOutput_10=0;

    boolean whetherReject_tOracleOutput_10 = false;

    java.sql.Connection conn_tOracleOutput_10 = null;

    //optional table
    String dbschema_tOracleOutput_10 = null;
    String tableName_tOracleOutput_10 = null;
                    String driverClass_tOracleOutput_10 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_10);
                String url_tOracleOutput_10 = null;
                    url_tOracleOutput_10 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_10 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_10 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_10 = decryptedPassword_tOracleOutput_10;
                dbschema_tOracleOutput_10 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_10 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_10.put("user",dbUser_tOracleOutput_10);
                    atnParamsPrope_tOracleOutput_10.put("password",dbPwd_tOracleOutput_10);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_10.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_10 = java.sql.DriverManager.getConnection(url_tOracleOutput_10, atnParamsPrope_tOracleOutput_10);
        resourceMap.put("conn_tOracleOutput_10", conn_tOracleOutput_10);
            conn_tOracleOutput_10.setAutoCommit(false);
            int commitEvery_tOracleOutput_10 = 5000;
            int commitCounter_tOracleOutput_10 = 0;
        int batchSize_tOracleOutput_10 = 5000;
        int batchSizeCounter_tOracleOutput_10=0;
        int count_tOracleOutput_10=0;

        if(dbschema_tOracleOutput_10 == null || dbschema_tOracleOutput_10.trim().length() == 0) {
            tableName_tOracleOutput_10 = ("BVAC_TRAZADORES");
        } else {
            tableName_tOracleOutput_10 = dbschema_tOracleOutput_10 + "." + ("BVAC_TRAZADORES");
        }
                String update_tOracleOutput_10 = "UPDATE " + tableName_tOracleOutput_10 + " SET ID = ?,NOMBRE = ?,ESTADO = ?,FINACTIVACION = ? WHERE BIOLOGICOS_ID = ? AND RANGOS_ID = ? AND DOSIS_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_10 = conn_tOracleOutput_10.prepareStatement(update_tOracleOutput_10);
                resourceMap.put("pstmt_tOracleOutput_10", pstmt_tOracleOutput_10);





 



/**
 * [tOracleOutput_10 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
					globalMap.get( "tHash_Lookup_row16" ))
					;					
					
	

row16Struct row16HashKey = new row16Struct();
row16Struct row16Default = new row16Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
					globalMap.get( "tHash_Lookup_row17" ))
					;					
					
	

row17Struct row17HashKey = new row17Struct();
row17Struct row17Default = new row17Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
Inserta4Struct Inserta4_tmp = new Inserta4Struct();
Actualiza4Struct Actualiza4_tmp = new Actualiza4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_14", false);
		start_Hash.put("tOracleInput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_14";
	
	
		int tos_count_tOracleInput_14 = 0;
		
	


	
		    int nb_line_tOracleInput_14 = 0;
		    java.sql.Connection conn_tOracleInput_14 = null;
				conn_tOracleInput_14 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_14 = false;
				boolean isConnectionWrapped_tOracleInput_14 = !(conn_tOracleInput_14 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_14.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_14 = null;
                if (isConnectionWrapped_tOracleInput_14) {
					unwrappedOraConn_tOracleInput_14 = conn_tOracleInput_14.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_14 != null) {
                        isTimeZoneNull_tOracleInput_14 = (unwrappedOraConn_tOracleInput_14.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_14 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_14).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_14) {
					java.sql.Statement stmtGetTZ_tOracleInput_14 = conn_tOracleInput_14.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_14 = stmtGetTZ_tOracleInput_14.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_14 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_14.next()) {
						sessionTimezone_tOracleInput_14 = rsGetTZ_tOracleInput_14.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_14 && unwrappedOraConn_tOracleInput_14 != null) {
                        unwrappedOraConn_tOracleInput_14.setSessionTimeZone(sessionTimezone_tOracleInput_14);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_14).setSessionTimeZone(sessionTimezone_tOracleInput_14);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_14 = conn_tOracleInput_14.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_14.setFetchSize(5000);


		    String dbquery_tOracleInput_14 = "SELECT  ID\n        ,NOMBRE\n        ,BIOLOGICOS_ID\n        ,RANGOS_ID\n        ,DOSIS_ID\n        ,ESTADO\n        ,T"
+"O_DATE ( FINACTIVACION ) AS FINACTIVACION\nFROM ( \n  SELECT  TT.ID\n          ,GE.DESCRIPCION ||' '||TD.NOMBRE AS NOMBR"
+"E\n          ,ES.BIOLOGICOS_ID\n          ,TT.TRAZADORES_ID AS RANGOS_ID\n          ,TD.ID AS DOSIS_ID\n          ,DECOD"
+"E ( EST.CANT, NULL, 'Activo', 'Inactivo') AS ESTADO\n          ,DECODE ( EST.CANT, NULL, NULL, NVL( EST.FINACTIVACION ,T"
+"O_DATE ('"+context.FECHA_PERIODO+"','DD/MM/YYYY'))) AS FINACTIVACION   \n          ,ROW_NUMBER() OVER (PARTITION BY ES.BIOLOGICOS_ID, TT.TRAZADORES_ID, T"
+"D.ID  ORDER BY TT.ID DESC) R\n  FROM VAC_TRAZADORES_TDOSIS TT\n  INNER JOIN VAC_ESQUEMAS_TDOSIS ET ON ET.ID = TT.ESQUEMA"
+"S_TDOSIS_ID\n  INNER JOIN VAC_ESQUEMAS ES ON ES.ID = ET.ESQUEMAS_ID\n  INNER JOIN VAC_TDOSIS TD ON TD.ID = ET.TDOSIS_ID"
+"\n  INNER JOIN VAC_BIOLOGICOS BIO ON BIO.ID = ES.BIOLOGICOS_ID\n  INNER JOIN MED_GENERICOS GE ON GE.ID = BIO.GENERICOS_ID"
+"\n  INNER JOIN ( \n    SELECT  ES.BIOLOGICOS_ID\n            ,TT.TRAZADORES_ID AS RANGOS_ID\n            ,ET.TDOSIS_ID A"
+"S DOSIS_ID \n            ,COUNT( TT.ID ) AS CANT\n    FROM VAC_TRAZADORES_TDOSIS TT\n    INNER JOIN VAC_ESQUEMAS_TDOSIS "
+"ET ON ET.ID = TT.ESQUEMAS_TDOSIS_ID\n    INNER JOIN VAC_ESQUEMAS ES ON ES.ID = ET.ESQUEMAS_ID\n    WHERE ( TO_CHAR( TT.F"
+"REGISTRO, 'YYYYMM' ) = '"+context.PERIODO+"' OR TO_CHAR( TT.FACTUALIZACION, 'YYYYMM' ) > = '"+context.PERIODO+"' )\n    GROUP BY ES.BIOLOGICOS_ID\n            ,TT.TRAZADORES_ID \n            ,ET.TDOSIS_ID\n  ) FFECHA ON FFECHA.BIO"
+"LOGICOS_ID = ES.BIOLOGICOS_ID AND FFECHA.RANGOS_ID = TT.TRAZADORES_ID AND FFECHA.DOSIS_ID = TD.ID\n  LEFT JOIN ( \n    S"
+"ELECT  ES.BIOLOGICOS_ID\n            ,TT.TRAZADORES_ID AS RANGOS_ID\n            ,ET.TDOSIS_ID AS DOSIS_ID \n           "
+" ,COUNT( TT.ID ) AS CANT\n            ,MAX ( TT.FACTUALIZACION ) AS FINACTIVACION\n    FROM VAC_TRAZADORES_TDOSIS TT\n  "
+"  INNER JOIN VAC_ESQUEMAS_TDOSIS ET ON ET.ID = TT.ESQUEMAS_TDOSIS_ID\n    INNER JOIN VAC_ESQUEMAS ES ON ES.ID = ET.ESQUE"
+"MAS_ID\n    WHERE ( ES.ESTADO = 'Inactivo' OR TT.ESTADO = 'Inactivo' )\n    GROUP BY ES.BIOLOGICOS_ID\n            ,TT.T"
+"RAZADORES_ID \n            ,ET.TDOSIS_ID\n  ) EST ON EST.BIOLOGICOS_ID = ES.BIOLOGICOS_ID AND EST.RANGOS_ID = FFECHA.RAN"
+"GOS_ID AND EST.DOSIS_ID = TD.ID AND EST.CANT = FFECHA.CANT \n) WHERE R = 1";
		    

		    globalMap.put("tOracleInput_14_QUERY",dbquery_tOracleInput_14);

		    java.sql.ResultSet rs_tOracleInput_14 = null;

		    try {
		    	rs_tOracleInput_14 = stmt_tOracleInput_14.executeQuery(dbquery_tOracleInput_14);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_14 = rs_tOracleInput_14.getMetaData();
		    	int colQtyInRs_tOracleInput_14 = rsmd_tOracleInput_14.getColumnCount();

		    String tmpContent_tOracleInput_14 = null;
		    
		    
		    while (rs_tOracleInput_14.next()) {
		        nb_line_tOracleInput_14++;
		        
							if(colQtyInRs_tOracleInput_14 < 1) {
								row15.ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(1) != null) {
						row15.ID = rs_tOracleInput_14.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 2) {
								row15.NOMBRE = null;
							} else {
	                         		
        	row15.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 3) {
								row15.BIOLOGICOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(3) != null) {
						row15.BIOLOGICOS_ID = rs_tOracleInput_14.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 4) {
								row15.RANGOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(4) != null) {
						row15.RANGOS_ID = rs_tOracleInput_14.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 5) {
								row15.DOSIS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(5) != null) {
						row15.DOSIS_ID = rs_tOracleInput_14.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 6) {
								row15.ESTADO = null;
							} else {
	                         		
        	row15.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 7) {
								row15.FINACTIVACION = null;
							} else {
										
			row15.FINACTIVACION = routines.system.JDBCUtil.getDate(rs_tOracleInput_14, 7);
		                    }
					




 



/**
 * [tOracleInput_14 begin ] stop
 */
	
	/**
	 * [tOracleInput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 


	tos_count_tOracleInput_14++;

/**
 * [tOracleInput_14 main ] stop
 */
	
	/**
	 * [tOracleInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
						row16Struct row16 = null;
					
						row17Struct row17 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row16" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow16 = false;
       		  	    	
       		  	    	
 							row16Struct row16ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row16HashKey.NOMBRE = row15.NOMBRE ;
                        		    		
                        		    		    row16HashKey.BIOLOGICOS_ID = row15.BIOLOGICOS_ID ;
                        		    		
                        		    		    row16HashKey.RANGOS_ID = row15.RANGOS_ID ;
                        		    		
                        		    		    row16HashKey.DOSIS_ID = row15.DOSIS_ID ;
                        		    		
                        		    		    row16HashKey.ESTADO = row15.ESTADO ;
                        		    		
                        		    		    row16HashKey.FINACTIVACION = row15.FINACTIVACION  == null ? null : new java.util.Date((row15.FINACTIVACION ).getTime());
                        		    		

								
		                        	row16HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row16.lookup( row16HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row16Struct fromLookup_row16 = null;
							row16 = row16Default;
										 
							
								 
							
							
								if (tHash_Lookup_row16 !=null && tHash_Lookup_row16.hasNext()) { // G 099
								
							
								
								fromLookup_row16 = tHash_Lookup_row16.next();

							
							
								} // G 099
							
							

							if(fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row17" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow17 = false;
       		  	    	
       		  	    	
 							row17Struct row17ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row17HashKey.BIOLOGICOS_ID = row15.BIOLOGICOS_ID ;
                        		    		
                        		    		    row17HashKey.RANGOS_ID = row15.RANGOS_ID ;
                        		    		
                        		    		    row17HashKey.DOSIS_ID = row15.DOSIS_ID ;
                        		    		

								
		                        	row17HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row17.lookup( row17HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row17Struct fromLookup_row17 = null;
							row17 = row17Default;
										 
							
								 
							
							
								if (tHash_Lookup_row17 !=null && tHash_Lookup_row17.hasNext()) { // G 099
								
							
								
								fromLookup_row17 = tHash_Lookup_row17.next();

							
							
								} // G 099
							
							

							if(fromLookup_row17 != null) {
								row17 = fromLookup_row17;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

Inserta4 = null;
Actualiza4 = null;


// # Output table : 'Inserta4'
// # Filter conditions 
if( 

row17.BIOLOGICOS_ID == null

 ) {
Inserta4_tmp.ID = row15.ID ;
Inserta4_tmp.NOMBRE = row15.NOMBRE ;
Inserta4_tmp.BIOLOGICOS_ID = row15.BIOLOGICOS_ID ;
Inserta4_tmp.RANGOS_ID = row15.RANGOS_ID ;
Inserta4_tmp.DOSIS_ID = row15.DOSIS_ID ;
Inserta4_tmp.ESTADO = row15.ESTADO ;
Inserta4_tmp.FINACTIVACION = row15.FINACTIVACION ;
Inserta4 = Inserta4_tmp;
} // closing filter/reject

// # Output table : 'Actualiza4'
// # Filter conditions 
if( 

row17.BIOLOGICOS_ID != null &&  row16.ID == null

 ) {
Actualiza4_tmp.ID = row15.ID ;
Actualiza4_tmp.NOMBRE = row15.NOMBRE ;
Actualiza4_tmp.BIOLOGICOS_ID = row15.BIOLOGICOS_ID ;
Actualiza4_tmp.RANGOS_ID = row15.RANGOS_ID ;
Actualiza4_tmp.DOSIS_ID = row15.DOSIS_ID ;
Actualiza4_tmp.ESTADO = row15.ESTADO ;
Actualiza4_tmp.FINACTIVACION = row15.FINACTIVACION ;
Actualiza4 = Actualiza4_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "Inserta4"
if(Inserta4 != null) { 



	
	/**
	 * [tOracleOutput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Inserta4"
						
						);
					}
					



        whetherReject_tOracleOutput_9 = false;
                        pstmt_tOracleOutput_9.setBigDecimal(1, Inserta4.ID);

                        if(Inserta4.NOMBRE == null) {
pstmt_tOracleOutput_9.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(2, Inserta4.NOMBRE);
}

                        pstmt_tOracleOutput_9.setBigDecimal(3, Inserta4.BIOLOGICOS_ID);

                        pstmt_tOracleOutput_9.setBigDecimal(4, Inserta4.RANGOS_ID);

                        pstmt_tOracleOutput_9.setBigDecimal(5, Inserta4.DOSIS_ID);

                        if(Inserta4.ESTADO == null) {
pstmt_tOracleOutput_9.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(6, Inserta4.ESTADO);
}

                        if(Inserta4.FINACTIVACION != null) {
pstmt_tOracleOutput_9.setObject(7, new java.sql.Timestamp(Inserta4.FINACTIVACION.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_9.setNull(7, java.sql.Types.DATE);
}

                pstmt_tOracleOutput_9.addBatch();
                nb_line_tOracleOutput_9++;
                batchSizeCounter_tOracleOutput_9++;
            if (batchSize_tOracleOutput_9 > 0 &&  batchSize_tOracleOutput_9 <= batchSizeCounter_tOracleOutput_9) {
                try {
                    pstmt_tOracleOutput_9.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_9){
globalMap.put("tOracleOutput_9_ERROR_MESSAGE",e_tOracleOutput_9.getMessage());
			        java.sql.SQLException ne_tOracleOutput_9 = e_tOracleOutput_9.getNextException(),sqle_tOracleOutput_9=null;
			    	String errormessage_tOracleOutput_9;
					if (ne_tOracleOutput_9 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_9 = new java.sql.SQLException(e_tOracleOutput_9.getMessage() + "\ncaused by: " + ne_tOracleOutput_9.getMessage(), ne_tOracleOutput_9.getSQLState(), ne_tOracleOutput_9.getErrorCode(), ne_tOracleOutput_9);
						errormessage_tOracleOutput_9 = sqle_tOracleOutput_9.getMessage();
					}else{
						errormessage_tOracleOutput_9 = e_tOracleOutput_9.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_9);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_9 = pstmt_tOracleOutput_9.getUpdateCount();
                    insertedCount_tOracleOutput_9
                += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                rowsToCommitCount_tOracleOutput_9 += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                batchSizeCounter_tOracleOutput_9 = 0;
            }
                commitCounter_tOracleOutput_9++;
                if(commitEvery_tOracleOutput_9 <= commitCounter_tOracleOutput_9) {
                    if(batchSizeCounter_tOracleOutput_9 > 0) {
                        try {
                            pstmt_tOracleOutput_9.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_9){
globalMap.put("tOracleOutput_9_ERROR_MESSAGE",e_tOracleOutput_9.getMessage());
					        java.sql.SQLException ne_tOracleOutput_9 = e_tOracleOutput_9.getNextException(),sqle_tOracleOutput_9=null;
					    	String errormessage_tOracleOutput_9;
							if (ne_tOracleOutput_9 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_9 = new java.sql.SQLException(e_tOracleOutput_9.getMessage() + "\ncaused by: " + ne_tOracleOutput_9.getMessage(), ne_tOracleOutput_9.getSQLState(), ne_tOracleOutput_9.getErrorCode(), ne_tOracleOutput_9);
								errormessage_tOracleOutput_9 = sqle_tOracleOutput_9.getMessage();
							}else{
								errormessage_tOracleOutput_9 = e_tOracleOutput_9.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_9);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_9 = pstmt_tOracleOutput_9.getUpdateCount();
                            insertedCount_tOracleOutput_9
                        += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                        rowsToCommitCount_tOracleOutput_9 += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_9 != 0){
                    	
                    }
                    conn_tOracleOutput_9.commit();
                    if(rowsToCommitCount_tOracleOutput_9 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_9 = 0;
                    }
                    commitCounter_tOracleOutput_9=0;
                    	batchSizeCounter_tOracleOutput_9=0;
                }

 


	tos_count_tOracleOutput_9++;

/**
 * [tOracleOutput_9 main ] stop
 */
	
	/**
	 * [tOracleOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	

 



/**
 * [tOracleOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	

 



/**
 * [tOracleOutput_9 process_data_end ] stop
 */

} // End of branch "Inserta4"




// Start of branch "Actualiza4"
if(Actualiza4 != null) { 



	
	/**
	 * [tOracleOutput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Actualiza4"
						
						);
					}
					



        whetherReject_tOracleOutput_10 = false;
                    pstmt_tOracleOutput_10.setBigDecimal(1, Actualiza4.ID);

                    if(Actualiza4.NOMBRE == null) {
pstmt_tOracleOutput_10.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(2, Actualiza4.NOMBRE);
}

                    if(Actualiza4.ESTADO == null) {
pstmt_tOracleOutput_10.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(3, Actualiza4.ESTADO);
}

                    if(Actualiza4.FINACTIVACION != null) {
pstmt_tOracleOutput_10.setObject(4, new java.sql.Timestamp(Actualiza4.FINACTIVACION.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_10.setNull(4, java.sql.Types.DATE);
}


                    pstmt_tOracleOutput_10.setBigDecimal(5 + count_tOracleOutput_10, Actualiza4.BIOLOGICOS_ID);


                    pstmt_tOracleOutput_10.setBigDecimal(6 + count_tOracleOutput_10, Actualiza4.RANGOS_ID);


                    pstmt_tOracleOutput_10.setBigDecimal(7 + count_tOracleOutput_10, Actualiza4.DOSIS_ID);

                pstmt_tOracleOutput_10.addBatch();
                nb_line_tOracleOutput_10++;
                batchSizeCounter_tOracleOutput_10++;
            if (batchSize_tOracleOutput_10 > 0 &&  batchSize_tOracleOutput_10 <= batchSizeCounter_tOracleOutput_10) {
                try {
                    pstmt_tOracleOutput_10.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_10){
globalMap.put("tOracleOutput_10_ERROR_MESSAGE",e_tOracleOutput_10.getMessage());
			        java.sql.SQLException ne_tOracleOutput_10 = e_tOracleOutput_10.getNextException(),sqle_tOracleOutput_10=null;
			    	String errormessage_tOracleOutput_10;
					if (ne_tOracleOutput_10 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_10 = new java.sql.SQLException(e_tOracleOutput_10.getMessage() + "\ncaused by: " + ne_tOracleOutput_10.getMessage(), ne_tOracleOutput_10.getSQLState(), ne_tOracleOutput_10.getErrorCode(), ne_tOracleOutput_10);
						errormessage_tOracleOutput_10 = sqle_tOracleOutput_10.getMessage();
					}else{
						errormessage_tOracleOutput_10 = e_tOracleOutput_10.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_10);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_10 = pstmt_tOracleOutput_10.getUpdateCount();
                    updatedCount_tOracleOutput_10
                += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                rowsToCommitCount_tOracleOutput_10 += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                batchSizeCounter_tOracleOutput_10 = 0;
            }
                commitCounter_tOracleOutput_10++;
                if(commitEvery_tOracleOutput_10 <= commitCounter_tOracleOutput_10) {
                    if(batchSizeCounter_tOracleOutput_10 > 0) {
                        try {
                            pstmt_tOracleOutput_10.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_10){
globalMap.put("tOracleOutput_10_ERROR_MESSAGE",e_tOracleOutput_10.getMessage());
					        java.sql.SQLException ne_tOracleOutput_10 = e_tOracleOutput_10.getNextException(),sqle_tOracleOutput_10=null;
					    	String errormessage_tOracleOutput_10;
							if (ne_tOracleOutput_10 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_10 = new java.sql.SQLException(e_tOracleOutput_10.getMessage() + "\ncaused by: " + ne_tOracleOutput_10.getMessage(), ne_tOracleOutput_10.getSQLState(), ne_tOracleOutput_10.getErrorCode(), ne_tOracleOutput_10);
								errormessage_tOracleOutput_10 = sqle_tOracleOutput_10.getMessage();
							}else{
								errormessage_tOracleOutput_10 = e_tOracleOutput_10.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_10);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_10 = pstmt_tOracleOutput_10.getUpdateCount();
                            updatedCount_tOracleOutput_10
                        += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                        rowsToCommitCount_tOracleOutput_10 += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_10 != 0){
                    	
                    }
                    conn_tOracleOutput_10.commit();
                    if(rowsToCommitCount_tOracleOutput_10 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_10 = 0;
                    }
                    commitCounter_tOracleOutput_10=0;
                    	batchSizeCounter_tOracleOutput_10=0;
                }

 


	tos_count_tOracleOutput_10++;

/**
 * [tOracleOutput_10 main ] stop
 */
	
	/**
	 * [tOracleOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	

 



/**
 * [tOracleOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	

 



/**
 * [tOracleOutput_10 process_data_end ] stop
 */

} // End of branch "Actualiza4"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

}
}finally{
	if (rs_tOracleInput_14 != null) {
		rs_tOracleInput_14.close();
	}
	if (stmt_tOracleInput_14 != null) {
		stmt_tOracleInput_14.close();
	}
}

globalMap.put("tOracleInput_14_NB_LINE",nb_line_tOracleInput_14);
 

ok_Hash.put("tOracleInput_14", true);
end_Hash.put("tOracleInput_14", System.currentTimeMillis());




/**
 * [tOracleInput_14 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row16 != null) {
						tHash_Lookup_row16.endGet();
					}
					globalMap.remove( "tHash_Lookup_row16" );

					
					
				
					if(tHash_Lookup_row17 != null) {
						tHash_Lookup_row17.endGet();
					}
					globalMap.remove( "tHash_Lookup_row17" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tOracleOutput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_9 > 0) {
            try {
            	if (pstmt_tOracleOutput_9 != null) {
					
					pstmt_tOracleOutput_9.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_9){
globalMap.put("tOracleOutput_9_ERROR_MESSAGE",e_tOracleOutput_9.getMessage());
		        java.sql.SQLException ne_tOracleOutput_9 = e_tOracleOutput_9.getNextException(),sqle_tOracleOutput_9=null;
		    	String errormessage_tOracleOutput_9;
				if (ne_tOracleOutput_9 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_9 = new java.sql.SQLException(e_tOracleOutput_9.getMessage() + "\ncaused by: " + ne_tOracleOutput_9.getMessage(), ne_tOracleOutput_9.getSQLState(), ne_tOracleOutput_9.getErrorCode(), ne_tOracleOutput_9);
					errormessage_tOracleOutput_9 = sqle_tOracleOutput_9.getMessage();
				}else{
					errormessage_tOracleOutput_9 = e_tOracleOutput_9.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_9);
            	
        	}
        	if (pstmt_tOracleOutput_9 != null) {
            	tmp_batchUpdateCount_tOracleOutput_9 = pstmt_tOracleOutput_9.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_9
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
				rowsToCommitCount_tOracleOutput_9 += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
            }
        }
        if(pstmt_tOracleOutput_9 != null) {
			
				pstmt_tOracleOutput_9.close();
				resourceMap.remove("pstmt_tOracleOutput_9");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_9", true);
		if(commitCounter_tOracleOutput_9 > 0 && rowsToCommitCount_tOracleOutput_9 != 0) {
			
		}
		conn_tOracleOutput_9.commit();
		if(commitCounter_tOracleOutput_9 > 0 && rowsToCommitCount_tOracleOutput_9 != 0) {
			
			rowsToCommitCount_tOracleOutput_9 = 0;
		}
		commitCounter_tOracleOutput_9 = 0;
		
		
		conn_tOracleOutput_9 .close();
		
		resourceMap.put("finish_tOracleOutput_9", true);
   	

	
	nb_line_deleted_tOracleOutput_9=nb_line_deleted_tOracleOutput_9+ deletedCount_tOracleOutput_9;
	nb_line_update_tOracleOutput_9=nb_line_update_tOracleOutput_9 + updatedCount_tOracleOutput_9;
	nb_line_inserted_tOracleOutput_9=nb_line_inserted_tOracleOutput_9 + insertedCount_tOracleOutput_9;
	nb_line_rejected_tOracleOutput_9=nb_line_rejected_tOracleOutput_9 + rejectedCount_tOracleOutput_9;
	
        globalMap.put("tOracleOutput_9_NB_LINE",nb_line_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_UPDATED",nb_line_update_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_9);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Inserta4");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_9", true);
end_Hash.put("tOracleOutput_9", System.currentTimeMillis());




/**
 * [tOracleOutput_9 end ] stop
 */




	
	/**
	 * [tOracleOutput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_10 > 0) {
            try {
            	if (pstmt_tOracleOutput_10 != null) {
					
					pstmt_tOracleOutput_10.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_10){
globalMap.put("tOracleOutput_10_ERROR_MESSAGE",e_tOracleOutput_10.getMessage());
		        java.sql.SQLException ne_tOracleOutput_10 = e_tOracleOutput_10.getNextException(),sqle_tOracleOutput_10=null;
		    	String errormessage_tOracleOutput_10;
				if (ne_tOracleOutput_10 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_10 = new java.sql.SQLException(e_tOracleOutput_10.getMessage() + "\ncaused by: " + ne_tOracleOutput_10.getMessage(), ne_tOracleOutput_10.getSQLState(), ne_tOracleOutput_10.getErrorCode(), ne_tOracleOutput_10);
					errormessage_tOracleOutput_10 = sqle_tOracleOutput_10.getMessage();
				}else{
					errormessage_tOracleOutput_10 = e_tOracleOutput_10.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_10);
            	
        	}
        	if (pstmt_tOracleOutput_10 != null) {
            	tmp_batchUpdateCount_tOracleOutput_10 = pstmt_tOracleOutput_10.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_10
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
				rowsToCommitCount_tOracleOutput_10 += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
            }
        }
        if(pstmt_tOracleOutput_10 != null) {
			
				pstmt_tOracleOutput_10.close();
				resourceMap.remove("pstmt_tOracleOutput_10");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_10", true);
		if(commitCounter_tOracleOutput_10 > 0 && rowsToCommitCount_tOracleOutput_10 != 0) {
			
		}
		conn_tOracleOutput_10.commit();
		if(commitCounter_tOracleOutput_10 > 0 && rowsToCommitCount_tOracleOutput_10 != 0) {
			
			rowsToCommitCount_tOracleOutput_10 = 0;
		}
		commitCounter_tOracleOutput_10 = 0;
		
		
		conn_tOracleOutput_10 .close();
		
		resourceMap.put("finish_tOracleOutput_10", true);
   	

	
	nb_line_deleted_tOracleOutput_10=nb_line_deleted_tOracleOutput_10+ deletedCount_tOracleOutput_10;
	nb_line_update_tOracleOutput_10=nb_line_update_tOracleOutput_10 + updatedCount_tOracleOutput_10;
	nb_line_inserted_tOracleOutput_10=nb_line_inserted_tOracleOutput_10 + insertedCount_tOracleOutput_10;
	nb_line_rejected_tOracleOutput_10=nb_line_rejected_tOracleOutput_10 + rejectedCount_tOracleOutput_10;
	
        globalMap.put("tOracleOutput_10_NB_LINE",nb_line_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_UPDATED",nb_line_update_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_10);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Actualiza4");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_10", true);
end_Hash.put("tOracleOutput_10", System.currentTimeMillis());




/**
 * [tOracleOutput_10 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_14:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tOracleInput_17Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row16"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row17"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tOracleOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_9") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_9 = null;
                if ((pstmtToClose_tOracleOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_9")) != null) {
                    pstmtToClose_tOracleOutput_9.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_9") == null){
            java.sql.Connection ctn_tOracleOutput_9 = null;
            if((ctn_tOracleOutput_9 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_9")) != null){
                try {
                    ctn_tOracleOutput_9.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_9) {
                    String errorMessage_tOracleOutput_9 = "failed to close the connection in tOracleOutput_9 :" + sqlEx_tOracleOutput_9.getMessage();
                    System.err.println(errorMessage_tOracleOutput_9);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_9 finally ] stop
 */




	
	/**
	 * [tOracleOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_10") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_10 = null;
                if ((pstmtToClose_tOracleOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_10")) != null) {
                    pstmtToClose_tOracleOutput_10.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_10") == null){
            java.sql.Connection ctn_tOracleOutput_10 = null;
            if((ctn_tOracleOutput_10 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_10")) != null){
                try {
                    ctn_tOracleOutput_10.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_10) {
                    String errorMessage_tOracleOutput_10 = "failed to close the connection in tOracleOutput_10 :" + sqlEx_tOracleOutput_10.getMessage();
                    System.err.println(errorMessage_tOracleOutput_10);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_10 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public String FMENOR;

				public String getFMENOR () {
					return this.FMENOR;
				}

				public Boolean FMENORIsNullable(){
				    return true;
				}
				public Boolean FMENORIsKey(){
				    return false;
				}
				public Integer FMENORLength(){
				    return 10;
				}
				public Integer FMENORPrecision(){
				    return 0;
				}
				public String FMENORDefault(){
				
					return null;
				
				}
				public String FMENORComment(){
				
				    return "";
				
				}
				public String FMENORPattern(){
				
					return "";
				
				}
				public String FMENOROriginalDbColumnName(){
				
					return "FMENOR";
				
				}

				
			    public String FMAYOR;

				public String getFMAYOR () {
					return this.FMAYOR;
				}

				public Boolean FMAYORIsNullable(){
				    return true;
				}
				public Boolean FMAYORIsKey(){
				    return false;
				}
				public Integer FMAYORLength(){
				    return 10;
				}
				public Integer FMAYORPrecision(){
				    return 0;
				}
				public String FMAYORDefault(){
				
					return null;
				
				}
				public String FMAYORComment(){
				
				    return "";
				
				}
				public String FMAYORPattern(){
				
					return "";
				
				}
				public String FMAYOROriginalDbColumnName(){
				
					return "FMAYOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.FMENOR = readString(dis);
					
					this.FMAYOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.FMENOR = readString(dis);
					
					this.FMAYOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FMENOR,dos);
					
					// String
				
						writeString(this.FMAYOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FMENOR,dos);
					
					// String
				
						writeString(this.FMAYOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FMENOR="+FMENOR);
		sb.append(",FMAYOR="+FMAYOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_17", false);
		start_Hash.put("tOracleInput_17", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_17";
	
	
		int tos_count_tOracleInput_17 = 0;
		
	


	
		    int nb_line_tOracleInput_17 = 0;
		    java.sql.Connection conn_tOracleInput_17 = null;
				conn_tOracleInput_17 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_17 = false;
				boolean isConnectionWrapped_tOracleInput_17 = !(conn_tOracleInput_17 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_17.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_17 = null;
                if (isConnectionWrapped_tOracleInput_17) {
					unwrappedOraConn_tOracleInput_17 = conn_tOracleInput_17.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_17 != null) {
                        isTimeZoneNull_tOracleInput_17 = (unwrappedOraConn_tOracleInput_17.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_17 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_17).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_17) {
					java.sql.Statement stmtGetTZ_tOracleInput_17 = conn_tOracleInput_17.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_17 = stmtGetTZ_tOracleInput_17.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_17 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_17.next()) {
						sessionTimezone_tOracleInput_17 = rsGetTZ_tOracleInput_17.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_17 && unwrappedOraConn_tOracleInput_17 != null) {
                        unwrappedOraConn_tOracleInput_17.setSessionTimeZone(sessionTimezone_tOracleInput_17);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_17).setSessionTimeZone(sessionTimezone_tOracleInput_17);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_17 = conn_tOracleInput_17.createStatement();

		    String dbquery_tOracleInput_17 = "SELECT  TO_CHAR ( MIN( FAPLICACION ), 'DD/MM/YYYY') AS FMENOR\n        , TO_CHAR( MAX(FAPLICACION), 'DD/MM/YYYY' ) AS F"
+"MAYOR \nFROM ( \n  SELECT TRUNC ( AP.FAPLICACION, 'MONTH' ) AS FAPLICACION    \n         ,ROW_NUMBER() OVER (PARTITION B"
+"Y TRUNC ( AP.FAPLICACION, 'MONTH' ) ORDER BY DA.ID DESC) R\n  FROM VAC_DAPLICADAS DA \n  INNER JOIN VAC_APLICADAS AP ON "
+"AP.ID = DA.APLICADAS_ID\n  WHERE DA.ESTREGISTRO_ID = 1\n    AND AP.ESTREGISTRO_ID = 1\n    AND DA.BIOLOGICOS_ID IS NOT N"
+"ULL\n    AND TO_CHAR  ( AP.FREGISTRO, 'YYYYMM' ) =  '"+context.PERIODO+"'\n) WHERE R = 1 ";
		    

		    globalMap.put("tOracleInput_17_QUERY",dbquery_tOracleInput_17);

		    java.sql.ResultSet rs_tOracleInput_17 = null;

		    try {
		    	rs_tOracleInput_17 = stmt_tOracleInput_17.executeQuery(dbquery_tOracleInput_17);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_17 = rs_tOracleInput_17.getMetaData();
		    	int colQtyInRs_tOracleInput_17 = rsmd_tOracleInput_17.getColumnCount();

		    String tmpContent_tOracleInput_17 = null;
		    
		    
		    while (rs_tOracleInput_17.next()) {
		        nb_line_tOracleInput_17++;
		        
							if(colQtyInRs_tOracleInput_17 < 1) {
								row18.FMENOR = null;
							} else {
	                         		
        	row18.FMENOR = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 2) {
								row18.FMAYOR = null;
							} else {
	                         		
        	row18.FMAYOR = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 2, false);
		                    }
					




 



/**
 * [tOracleInput_17 begin ] stop
 */
	
	/**
	 * [tOracleInput_17 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 


	tos_count_tOracleInput_17++;

/**
 * [tOracleInput_17 main ] stop
 */
	
	/**
	 * [tOracleInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					

    //Rango de fechas de los periodos a editar
context.FECHA_MENOR = row18.FMENOR == null ? "":row18.FMENOR;
context.FECHA_MAXIMA = row18.FMAYOR == null ? "":row18.FMAYOR;




System.out.println("FECHA_MENOR: "+context.FECHA_MENOR);
System.out.println("FECHA_MAXIMA: "+context.FECHA_MAXIMA);

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_17 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

}
}finally{
	if (rs_tOracleInput_17 != null) {
		rs_tOracleInput_17.close();
	}
	if (stmt_tOracleInput_17 != null) {
		stmt_tOracleInput_17.close();
	}
}

globalMap.put("tOracleInput_17_NB_LINE",nb_line_tOracleInput_17);
 

ok_Hash.put("tOracleInput_17", true);
end_Hash.put("tOracleInput_17", System.currentTimeMillis());




/**
 * [tOracleInput_17 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_17:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tOracleInput_18Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_17 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row19Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_VAC_F5_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row19Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_18", false);
		start_Hash.put("tOracleInput_18", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_18";
	
	
		int tos_count_tOracleInput_18 = 0;
		
	


	
		    int nb_line_tOracleInput_18 = 0;
		    java.sql.Connection conn_tOracleInput_18 = null;
				conn_tOracleInput_18 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_18 = false;
				boolean isConnectionWrapped_tOracleInput_18 = !(conn_tOracleInput_18 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_18.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_18 = null;
                if (isConnectionWrapped_tOracleInput_18) {
					unwrappedOraConn_tOracleInput_18 = conn_tOracleInput_18.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_18 != null) {
                        isTimeZoneNull_tOracleInput_18 = (unwrappedOraConn_tOracleInput_18.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_18 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_18).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_18) {
					java.sql.Statement stmtGetTZ_tOracleInput_18 = conn_tOracleInput_18.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_18 = stmtGetTZ_tOracleInput_18.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_18 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_18.next()) {
						sessionTimezone_tOracleInput_18 = rsGetTZ_tOracleInput_18.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_18 && unwrappedOraConn_tOracleInput_18 != null) {
                        unwrappedOraConn_tOracleInput_18.setSessionTimeZone(sessionTimezone_tOracleInput_18);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_18).setSessionTimeZone(sessionTimezone_tOracleInput_18);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_18 = conn_tOracleInput_18.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_18.setFetchSize(5000);


		    String dbquery_tOracleInput_18 = "SELECT  TI.ID,         \n        TI.FECHA        \nFROM BGEN_TIEMPOS TI \nWHERE TI.DIA = 1  \n  AND TI.FECHA BETWEEN TO"
+"_DATE ( '"+context.FECHA_MENOR+"','DD/MM/YYYY')\n                   AND TO_DATE( '"+context.FECHA_MAXIMA+"','DD/MM/YYYY')";
		    

		    globalMap.put("tOracleInput_18_QUERY",dbquery_tOracleInput_18);

		    java.sql.ResultSet rs_tOracleInput_18 = null;

		    try {
		    	rs_tOracleInput_18 = stmt_tOracleInput_18.executeQuery(dbquery_tOracleInput_18);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_18 = rs_tOracleInput_18.getMetaData();
		    	int colQtyInRs_tOracleInput_18 = rsmd_tOracleInput_18.getColumnCount();

		    String tmpContent_tOracleInput_18 = null;
		    
		    
		    while (rs_tOracleInput_18.next()) {
		        nb_line_tOracleInput_18++;
		        
							if(colQtyInRs_tOracleInput_18 < 1) {
								row19.ID = null;
							} else {
		                          
					if(rs_tOracleInput_18.getObject(1) != null) {
						row19.ID = rs_tOracleInput_18.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_18 < 2) {
								row19.FECHA = null;
							} else {
										
			row19.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_18, 2);
		                    }
					




 



/**
 * [tOracleInput_18 begin ] stop
 */
	
	/**
	 * [tOracleInput_18 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 


	tos_count_tOracleInput_18++;

/**
 * [tOracleInput_18 main ] stop
 */
	
	/**
	 * [tOracleInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					



    
		row19Struct oneRow_tHashOutput_1 = new row19Struct();
				
					oneRow_tHashOutput_1.ID = row19.ID;
					oneRow_tHashOutput_1.FECHA = row19.FECHA;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_18 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

}
}finally{
	if (rs_tOracleInput_18 != null) {
		rs_tOracleInput_18.close();
	}
	if (stmt_tOracleInput_18 != null) {
		stmt_tOracleInput_18.close();
	}
}

globalMap.put("tOracleInput_18_NB_LINE",nb_line_tOracleInput_18);
 

ok_Hash.put("tOracleInput_18", true);
end_Hash.put("tOracleInput_18", System.currentTimeMillis());




/**
 * [tOracleInput_18 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_18:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tOracleInput_19Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_18 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class borraStruct implements routines.system.IPersistableRow<borraStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal TIEMPO_ID;

				public BigDecimal getTIEMPO_ID () {
					return this.TIEMPO_ID;
				}

				public Boolean TIEMPO_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPO_IDIsKey(){
				    return true;
				}
				public Integer TIEMPO_IDLength(){
				    return 0;
				}
				public Integer TIEMPO_IDPrecision(){
				    return null;
				}
				public String TIEMPO_IDDefault(){
				
					return "";
				
				}
				public String TIEMPO_IDComment(){
				
				    return "";
				
				}
				public String TIEMPO_IDPattern(){
				
					return "";
				
				}
				public String TIEMPO_IDOriginalDbColumnName(){
				
					return "TIEMPO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.TIEMPO_ID == null) ? 0 : this.TIEMPO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final borraStruct other = (borraStruct) obj;
		
						if (this.TIEMPO_ID == null) {
							if (other.TIEMPO_ID != null)
								return false;
						
						} else if (!this.TIEMPO_ID.equals(other.TIEMPO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(borraStruct other) {

		other.TIEMPO_ID = this.TIEMPO_ID;
	            
	}

	public void copyKeysDataTo(borraStruct other) {

		other.TIEMPO_ID = this.TIEMPO_ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.TIEMPO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.TIEMPO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TIEMPO_ID="+String.valueOf(TIEMPO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(borraStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.TIEMPO_ID, other.TIEMPO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public java.util.Date FAPLICACION;

				public java.util.Date getFAPLICACION () {
					return this.FAPLICACION;
				}

				public Boolean FAPLICACIONIsNullable(){
				    return true;
				}
				public Boolean FAPLICACIONIsKey(){
				    return false;
				}
				public Integer FAPLICACIONLength(){
				    return 0;
				}
				public Integer FAPLICACIONPrecision(){
				    return 0;
				}
				public String FAPLICACIONDefault(){
				
					return null;
				
				}
				public String FAPLICACIONComment(){
				
				    return "";
				
				}
				public String FAPLICACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FAPLICACIONOriginalDbColumnName(){
				
					return "FAPLICACION";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.FAPLICACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.FAPLICACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FAPLICACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FAPLICACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FAPLICACION="+String.valueOf(FAPLICACION));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_19Struct implements routines.system.IPersistableRow<after_tOracleInput_19Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public java.util.Date FAPLICACION;

				public java.util.Date getFAPLICACION () {
					return this.FAPLICACION;
				}

				public Boolean FAPLICACIONIsNullable(){
				    return true;
				}
				public Boolean FAPLICACIONIsKey(){
				    return false;
				}
				public Integer FAPLICACIONLength(){
				    return 0;
				}
				public Integer FAPLICACIONPrecision(){
				    return 0;
				}
				public String FAPLICACIONDefault(){
				
					return null;
				
				}
				public String FAPLICACIONComment(){
				
				    return "";
				
				}
				public String FAPLICACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FAPLICACIONOriginalDbColumnName(){
				
					return "FAPLICACION";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.FAPLICACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.FAPLICACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FAPLICACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FAPLICACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FAPLICACION="+String.valueOf(FAPLICACION));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_1Process(globalMap);

		row20Struct row20 = new row20Struct();
borraStruct borra = new borraStruct();





	
	/**
	 * [tOracleOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_11", false);
		start_Hash.put("tOracleOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"borra");
					}
				
		int tos_count_tOracleOutput_11 = 0;
		






        int deleteKeyCount_tOracleOutput_11 = 1;
        if(deleteKeyCount_tOracleOutput_11 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_11 = 0;
    int nb_line_update_tOracleOutput_11 = 0;
    int nb_line_inserted_tOracleOutput_11 = 0;
    int nb_line_deleted_tOracleOutput_11 = 0;
    int nb_line_rejected_tOracleOutput_11 = 0;

    int tmp_batchUpdateCount_tOracleOutput_11 = 0;

    int deletedCount_tOracleOutput_11=0;
    int updatedCount_tOracleOutput_11=0;
    int insertedCount_tOracleOutput_11=0;
    int rowsToCommitCount_tOracleOutput_11=0;
    int rejectedCount_tOracleOutput_11=0;

    boolean whetherReject_tOracleOutput_11 = false;

    java.sql.Connection conn_tOracleOutput_11 = null;

    //optional table
    String dbschema_tOracleOutput_11 = null;
    String tableName_tOracleOutput_11 = null;
                    String driverClass_tOracleOutput_11 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_11);
                String url_tOracleOutput_11 = null;
                    url_tOracleOutput_11 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_11 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_11 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_11 = decryptedPassword_tOracleOutput_11;
                dbschema_tOracleOutput_11 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_11 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_11.put("user",dbUser_tOracleOutput_11);
                    atnParamsPrope_tOracleOutput_11.put("password",dbPwd_tOracleOutput_11);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_11.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_11 = java.sql.DriverManager.getConnection(url_tOracleOutput_11, atnParamsPrope_tOracleOutput_11);
        resourceMap.put("conn_tOracleOutput_11", conn_tOracleOutput_11);
            conn_tOracleOutput_11.setAutoCommit(false);
            int commitEvery_tOracleOutput_11 = 5000;
            int commitCounter_tOracleOutput_11 = 0;
        int batchSize_tOracleOutput_11 = 5000;
        int batchSizeCounter_tOracleOutput_11=0;
        int count_tOracleOutput_11=0;

        if(dbschema_tOracleOutput_11 == null || dbschema_tOracleOutput_11.trim().length() == 0) {
            tableName_tOracleOutput_11 = ("BVAC_CANTIDADES");
        } else {
            tableName_tOracleOutput_11 = dbschema_tOracleOutput_11 + "." + ("BVAC_CANTIDADES");
        }
                String delete_tOracleOutput_11 = "DELETE FROM " + tableName_tOracleOutput_11 + " WHERE TIEMPO_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_11 = conn_tOracleOutput_11.prepareStatement(delete_tOracleOutput_11);
                resourceMap.put("pstmt_tOracleOutput_11", pstmt_tOracleOutput_11);





 



/**
 * [tOracleOutput_11 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
					globalMap.get( "tHash_Lookup_row21" ))
					;					
					
	

row21Struct row21HashKey = new row21Struct();
row21Struct row21Default = new row21Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
borraStruct borra_tmp = new borraStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tOracleInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_19", false);
		start_Hash.put("tOracleInput_19", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_19";
	
	
		int tos_count_tOracleInput_19 = 0;
		
	


	
		    int nb_line_tOracleInput_19 = 0;
		    java.sql.Connection conn_tOracleInput_19 = null;
				conn_tOracleInput_19 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_19 = false;
				boolean isConnectionWrapped_tOracleInput_19 = !(conn_tOracleInput_19 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_19.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_19 = null;
                if (isConnectionWrapped_tOracleInput_19) {
					unwrappedOraConn_tOracleInput_19 = conn_tOracleInput_19.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_19 != null) {
                        isTimeZoneNull_tOracleInput_19 = (unwrappedOraConn_tOracleInput_19.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_19 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_19).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_19) {
					java.sql.Statement stmtGetTZ_tOracleInput_19 = conn_tOracleInput_19.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_19 = stmtGetTZ_tOracleInput_19.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_19 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_19.next()) {
						sessionTimezone_tOracleInput_19 = rsGetTZ_tOracleInput_19.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_19 && unwrappedOraConn_tOracleInput_19 != null) {
                        unwrappedOraConn_tOracleInput_19.setSessionTimeZone(sessionTimezone_tOracleInput_19);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_19).setSessionTimeZone(sessionTimezone_tOracleInput_19);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_19 = conn_tOracleInput_19.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_19.setFetchSize(5000);


		    String dbquery_tOracleInput_19 = "SELECT FAPLICACION\nFROM ( \n  SELECT TRUNC ( AP.FAPLICACION, 'MONTH' ) AS FAPLICACION    \n         ,ROW_NUMBER() OVER"
+" (PARTITION BY TRUNC ( AP.FAPLICACION, 'MONTH' ) ORDER BY DA.ID DESC) R\n  FROM VAC_DAPLICADAS DA \n  INNER JOIN VAC_APL"
+"ICADAS AP ON AP.ID = DA.APLICADAS_ID\n  WHERE DA.ESTREGISTRO_ID = 1\n    AND AP.ESTREGISTRO_ID = 1\n    AND DA.BIOLOGICO"
+"S_ID IS NOT NULL\n    AND TO_CHAR  ( AP.FREGISTRO, 'YYYYMM' ) = '"+context.PERIODO+"' \n) WHERE R = 1  ";
		    

		    globalMap.put("tOracleInput_19_QUERY",dbquery_tOracleInput_19);

		    java.sql.ResultSet rs_tOracleInput_19 = null;

		    try {
		    	rs_tOracleInput_19 = stmt_tOracleInput_19.executeQuery(dbquery_tOracleInput_19);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_19 = rs_tOracleInput_19.getMetaData();
		    	int colQtyInRs_tOracleInput_19 = rsmd_tOracleInput_19.getColumnCount();

		    String tmpContent_tOracleInput_19 = null;
		    
		    
		    while (rs_tOracleInput_19.next()) {
		        nb_line_tOracleInput_19++;
		        
							if(colQtyInRs_tOracleInput_19 < 1) {
								row20.FAPLICACION = null;
							} else {
										
			row20.FAPLICACION = routines.system.JDBCUtil.getDate(rs_tOracleInput_19, 1);
		                    }
					




 



/**
 * [tOracleInput_19 begin ] stop
 */
	
	/**
	 * [tOracleInput_19 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 


	tos_count_tOracleInput_19++;

/**
 * [tOracleInput_19 main ] stop
 */
	
	/**
	 * [tOracleInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
						row21Struct row21 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row21" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow21 = false;
       		  	    	
       		  	    	
 							row21Struct row21ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row21HashKey.FECHA = row20.FAPLICACION  == null ? null : new java.util.Date((row20.FAPLICACION ).getTime());
                        		    		

								
		                        	row21HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row21.lookup( row21HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row21 != null && tHash_Lookup_row21.getCount(row21HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row21' and it contains more one result from keys :  row21.FECHA = '" + row21HashKey.FECHA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row21Struct fromLookup_row21 = null;
							row21 = row21Default;
										 
							
								 
							
							
								if (tHash_Lookup_row21 !=null && tHash_Lookup_row21.hasNext()) { // G 099
								
							
								
								fromLookup_row21 = tHash_Lookup_row21.next();

							
							
								} // G 099
							
							

							if(fromLookup_row21 != null) {
								row21 = fromLookup_row21;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

borra = null;


// # Output table : 'borra'
borra_tmp.TIEMPO_ID = row21.ID ;
borra = borra_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "borra"
if(borra != null) { 



	
	/**
	 * [tOracleOutput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"borra"
						
						);
					}
					



        whetherReject_tOracleOutput_11 = false;
                    pstmt_tOracleOutput_11.setBigDecimal(1, borra.TIEMPO_ID);

                pstmt_tOracleOutput_11.addBatch();
                nb_line_tOracleOutput_11++;
                batchSizeCounter_tOracleOutput_11++;
            if (batchSize_tOracleOutput_11 > 0 &&  batchSize_tOracleOutput_11 <= batchSizeCounter_tOracleOutput_11) {
                try {
                    pstmt_tOracleOutput_11.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_11){
globalMap.put("tOracleOutput_11_ERROR_MESSAGE",e_tOracleOutput_11.getMessage());
			        java.sql.SQLException ne_tOracleOutput_11 = e_tOracleOutput_11.getNextException(),sqle_tOracleOutput_11=null;
			    	String errormessage_tOracleOutput_11;
					if (ne_tOracleOutput_11 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_11 = new java.sql.SQLException(e_tOracleOutput_11.getMessage() + "\ncaused by: " + ne_tOracleOutput_11.getMessage(), ne_tOracleOutput_11.getSQLState(), ne_tOracleOutput_11.getErrorCode(), ne_tOracleOutput_11);
						errormessage_tOracleOutput_11 = sqle_tOracleOutput_11.getMessage();
					}else{
						errormessage_tOracleOutput_11 = e_tOracleOutput_11.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_11);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_11 = pstmt_tOracleOutput_11.getUpdateCount();
                    deletedCount_tOracleOutput_11
                += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                rowsToCommitCount_tOracleOutput_11 += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                batchSizeCounter_tOracleOutput_11 = 0;
            }
                commitCounter_tOracleOutput_11++;
                if(commitEvery_tOracleOutput_11 <= commitCounter_tOracleOutput_11) {
                    if(batchSizeCounter_tOracleOutput_11 > 0) {
                        try {
                            pstmt_tOracleOutput_11.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_11){
globalMap.put("tOracleOutput_11_ERROR_MESSAGE",e_tOracleOutput_11.getMessage());
					        java.sql.SQLException ne_tOracleOutput_11 = e_tOracleOutput_11.getNextException(),sqle_tOracleOutput_11=null;
					    	String errormessage_tOracleOutput_11;
							if (ne_tOracleOutput_11 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_11 = new java.sql.SQLException(e_tOracleOutput_11.getMessage() + "\ncaused by: " + ne_tOracleOutput_11.getMessage(), ne_tOracleOutput_11.getSQLState(), ne_tOracleOutput_11.getErrorCode(), ne_tOracleOutput_11);
								errormessage_tOracleOutput_11 = sqle_tOracleOutput_11.getMessage();
							}else{
								errormessage_tOracleOutput_11 = e_tOracleOutput_11.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_11);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_11 = pstmt_tOracleOutput_11.getUpdateCount();
                            deletedCount_tOracleOutput_11
                        += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                        rowsToCommitCount_tOracleOutput_11 += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_11 != 0){
                    	
                    }
                    conn_tOracleOutput_11.commit();
                    if(rowsToCommitCount_tOracleOutput_11 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_11 = 0;
                    }
                    commitCounter_tOracleOutput_11=0;
                    	batchSizeCounter_tOracleOutput_11=0;
                }

 


	tos_count_tOracleOutput_11++;

/**
 * [tOracleOutput_11 main ] stop
 */
	
	/**
	 * [tOracleOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	

 



/**
 * [tOracleOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	

 



/**
 * [tOracleOutput_11 process_data_end ] stop
 */

} // End of branch "borra"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_19 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

}
}finally{
	if (rs_tOracleInput_19 != null) {
		rs_tOracleInput_19.close();
	}
	if (stmt_tOracleInput_19 != null) {
		stmt_tOracleInput_19.close();
	}
}

globalMap.put("tOracleInput_19_NB_LINE",nb_line_tOracleInput_19);
 

ok_Hash.put("tOracleInput_19", true);
end_Hash.put("tOracleInput_19", System.currentTimeMillis());




/**
 * [tOracleInput_19 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row21 != null) {
						tHash_Lookup_row21.endGet();
					}
					globalMap.remove( "tHash_Lookup_row21" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tOracleOutput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_11 > 0) {
            try {
            	if (pstmt_tOracleOutput_11 != null) {
					
					pstmt_tOracleOutput_11.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_11){
globalMap.put("tOracleOutput_11_ERROR_MESSAGE",e_tOracleOutput_11.getMessage());
		        java.sql.SQLException ne_tOracleOutput_11 = e_tOracleOutput_11.getNextException(),sqle_tOracleOutput_11=null;
		    	String errormessage_tOracleOutput_11;
				if (ne_tOracleOutput_11 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_11 = new java.sql.SQLException(e_tOracleOutput_11.getMessage() + "\ncaused by: " + ne_tOracleOutput_11.getMessage(), ne_tOracleOutput_11.getSQLState(), ne_tOracleOutput_11.getErrorCode(), ne_tOracleOutput_11);
					errormessage_tOracleOutput_11 = sqle_tOracleOutput_11.getMessage();
				}else{
					errormessage_tOracleOutput_11 = e_tOracleOutput_11.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_11);
            	
        	}
        	if (pstmt_tOracleOutput_11 != null) {
            	tmp_batchUpdateCount_tOracleOutput_11 = pstmt_tOracleOutput_11.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_11
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
				rowsToCommitCount_tOracleOutput_11 += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
            }
        }
        if(pstmt_tOracleOutput_11 != null) {
			
				pstmt_tOracleOutput_11.close();
				resourceMap.remove("pstmt_tOracleOutput_11");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_11", true);
		if(commitCounter_tOracleOutput_11 > 0 && rowsToCommitCount_tOracleOutput_11 != 0) {
			
		}
		conn_tOracleOutput_11.commit();
		if(commitCounter_tOracleOutput_11 > 0 && rowsToCommitCount_tOracleOutput_11 != 0) {
			
			rowsToCommitCount_tOracleOutput_11 = 0;
		}
		commitCounter_tOracleOutput_11 = 0;
		
		
		conn_tOracleOutput_11 .close();
		
		resourceMap.put("finish_tOracleOutput_11", true);
   	

	
	nb_line_deleted_tOracleOutput_11=nb_line_deleted_tOracleOutput_11+ deletedCount_tOracleOutput_11;
	nb_line_update_tOracleOutput_11=nb_line_update_tOracleOutput_11 + updatedCount_tOracleOutput_11;
	nb_line_inserted_tOracleOutput_11=nb_line_inserted_tOracleOutput_11 + insertedCount_tOracleOutput_11;
	nb_line_rejected_tOracleOutput_11=nb_line_rejected_tOracleOutput_11 + rejectedCount_tOracleOutput_11;
	
        globalMap.put("tOracleOutput_11_NB_LINE",nb_line_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_UPDATED",nb_line_update_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_11);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"borra");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_11", true);
end_Hash.put("tOracleOutput_11", System.currentTimeMillis());




/**
 * [tOracleOutput_11 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_19:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tOracleInput_20Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row21"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_19 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tOracleOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_11") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_11 = null;
                if ((pstmtToClose_tOracleOutput_11 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_11")) != null) {
                    pstmtToClose_tOracleOutput_11.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_11") == null){
            java.sql.Connection ctn_tOracleOutput_11 = null;
            if((ctn_tOracleOutput_11 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_11")) != null){
                try {
                    ctn_tOracleOutput_11.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_11) {
                    String errorMessage_tOracleOutput_11 = "failed to close the connection in tOracleOutput_11 :" + sqlEx_tOracleOutput_11.getMessage();
                    System.err.println(errorMessage_tOracleOutput_11);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_11 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return 0;
				}
				public Integer CANTIDADPrecision(){
				    return 0;
				}
				public String CANTIDADDefault(){
				
					return "";
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean DOSIS_IDIsKey(){
				    return false;
				}
				public Integer DOSIS_IDLength(){
				    return 0;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return true;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICO_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal RANGO_ID;

				public BigDecimal getRANGO_ID () {
					return this.RANGO_ID;
				}

				public Boolean RANGO_IDIsNullable(){
				    return true;
				}
				public Boolean RANGO_IDIsKey(){
				    return false;
				}
				public Integer RANGO_IDLength(){
				    return 0;
				}
				public Integer RANGO_IDPrecision(){
				    return null;
				}
				public String RANGO_IDDefault(){
				
					return "";
				
				}
				public String RANGO_IDComment(){
				
				    return "";
				
				}
				public String RANGO_IDPattern(){
				
					return "";
				
				}
				public String RANGO_IDOriginalDbColumnName(){
				
					return "RANGO_ID";
				
				}

				
			    public BigDecimal POBLACION_ID;

				public BigDecimal getPOBLACION_ID () {
					return this.POBLACION_ID;
				}

				public Boolean POBLACION_IDIsNullable(){
				    return true;
				}
				public Boolean POBLACION_IDIsKey(){
				    return false;
				}
				public Integer POBLACION_IDLength(){
				    return 0;
				}
				public Integer POBLACION_IDPrecision(){
				    return 0;
				}
				public String POBLACION_IDDefault(){
				
					return "";
				
				}
				public String POBLACION_IDComment(){
				
				    return "";
				
				}
				public String POBLACION_IDPattern(){
				
					return "";
				
				}
				public String POBLACION_IDOriginalDbColumnName(){
				
					return "POBLACION_ID";
				
				}

				
			    public BigDecimal TIEMPO_ID;

				public BigDecimal getTIEMPO_ID () {
					return this.TIEMPO_ID;
				}

				public Boolean TIEMPO_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPO_IDIsKey(){
				    return false;
				}
				public Integer TIEMPO_IDLength(){
				    return 0;
				}
				public Integer TIEMPO_IDPrecision(){
				    return null;
				}
				public String TIEMPO_IDDefault(){
				
					return "";
				
				}
				public String TIEMPO_IDComment(){
				
				    return "";
				
				}
				public String TIEMPO_IDPattern(){
				
					return "";
				
				}
				public String TIEMPO_IDOriginalDbColumnName(){
				
					return "TIEMPO_ID";
				
				}

				
			    public BigDecimal ACTUALIZADAS;

				public BigDecimal getACTUALIZADAS () {
					return this.ACTUALIZADAS;
				}

				public Boolean ACTUALIZADASIsNullable(){
				    return true;
				}
				public Boolean ACTUALIZADASIsKey(){
				    return false;
				}
				public Integer ACTUALIZADASLength(){
				    return null;
				}
				public Integer ACTUALIZADASPrecision(){
				    return null;
				}
				public String ACTUALIZADASDefault(){
				
					return "";
				
				}
				public String ACTUALIZADASComment(){
				
				    return "";
				
				}
				public String ACTUALIZADASPattern(){
				
					return "";
				
				}
				public String ACTUALIZADASOriginalDbColumnName(){
				
					return "ACTUALIZADAS";
				
				}

				
			    public BigDecimal APLICADAS;

				public BigDecimal getAPLICADAS () {
					return this.APLICADAS;
				}

				public Boolean APLICADASIsNullable(){
				    return true;
				}
				public Boolean APLICADASIsKey(){
				    return false;
				}
				public Integer APLICADASLength(){
				    return null;
				}
				public Integer APLICADASPrecision(){
				    return null;
				}
				public String APLICADASDefault(){
				
					return "";
				
				}
				public String APLICADASComment(){
				
				    return "";
				
				}
				public String APLICADASPattern(){
				
					return "";
				
				}
				public String APLICADASOriginalDbColumnName(){
				
					return "APLICADAS";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.RANGO_ID = (BigDecimal) dis.readObject();
					
						this.POBLACION_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPO_ID = (BigDecimal) dis.readObject();
					
						this.ACTUALIZADAS = (BigDecimal) dis.readObject();
					
						this.APLICADAS = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.RANGO_ID = (BigDecimal) dis.readObject();
					
						this.POBLACION_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPO_ID = (BigDecimal) dis.readObject();
					
						this.ACTUALIZADAS = (BigDecimal) dis.readObject();
					
						this.APLICADAS = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RANGO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBLACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ACTUALIZADAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLICADAS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RANGO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.POBLACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ACTUALIZADAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.APLICADAS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",RANGO_ID="+String.valueOf(RANGO_ID));
		sb.append(",POBLACION_ID="+String.valueOf(POBLACION_ID));
		sb.append(",TIEMPO_ID="+String.valueOf(TIEMPO_ID));
		sb.append(",ACTUALIZADAS="+String.valueOf(ACTUALIZADAS));
		sb.append(",APLICADAS="+String.valueOf(APLICADAS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return null;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return "";
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal ACTUALIZADAS;

				public BigDecimal getACTUALIZADAS () {
					return this.ACTUALIZADAS;
				}

				public Boolean ACTUALIZADASIsNullable(){
				    return true;
				}
				public Boolean ACTUALIZADASIsKey(){
				    return false;
				}
				public Integer ACTUALIZADASLength(){
				    return null;
				}
				public Integer ACTUALIZADASPrecision(){
				    return null;
				}
				public String ACTUALIZADASDefault(){
				
					return "";
				
				}
				public String ACTUALIZADASComment(){
				
				    return "";
				
				}
				public String ACTUALIZADASPattern(){
				
					return "";
				
				}
				public String ACTUALIZADASOriginalDbColumnName(){
				
					return "ACTUALIZADAS";
				
				}

				
			    public BigDecimal APLICADAS;

				public BigDecimal getAPLICADAS () {
					return this.APLICADAS;
				}

				public Boolean APLICADASIsNullable(){
				    return true;
				}
				public Boolean APLICADASIsKey(){
				    return false;
				}
				public Integer APLICADASLength(){
				    return null;
				}
				public Integer APLICADASPrecision(){
				    return null;
				}
				public String APLICADASDefault(){
				
					return "";
				
				}
				public String APLICADASComment(){
				
				    return "";
				
				}
				public String APLICADASPattern(){
				
					return "";
				
				}
				public String APLICADASOriginalDbColumnName(){
				
					return "APLICADAS";
				
				}

				
			    public BigDecimal TDOSIS_ID;

				public BigDecimal getTDOSIS_ID () {
					return this.TDOSIS_ID;
				}

				public Boolean TDOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean TDOSIS_IDIsKey(){
				    return false;
				}
				public Integer TDOSIS_IDLength(){
				    return null;
				}
				public Integer TDOSIS_IDPrecision(){
				    return null;
				}
				public String TDOSIS_IDDefault(){
				
					return "";
				
				}
				public String TDOSIS_IDComment(){
				
				    return "";
				
				}
				public String TDOSIS_IDPattern(){
				
					return "";
				
				}
				public String TDOSIS_IDOriginalDbColumnName(){
				
					return "TDOSIS_ID";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return true;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICO_IDLength(){
				    return null;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public java.util.Date FAPLICACION;

				public java.util.Date getFAPLICACION () {
					return this.FAPLICACION;
				}

				public Boolean FAPLICACIONIsNullable(){
				    return true;
				}
				public Boolean FAPLICACIONIsKey(){
				    return false;
				}
				public Integer FAPLICACIONLength(){
				    return null;
				}
				public Integer FAPLICACIONPrecision(){
				    return null;
				}
				public String FAPLICACIONDefault(){
				
					return null;
				
				}
				public String FAPLICACIONComment(){
				
				    return "";
				
				}
				public String FAPLICACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FAPLICACIONOriginalDbColumnName(){
				
					return "FAPLICACION";
				
				}

				
			    public BigDecimal RANGO_ID;

				public BigDecimal getRANGO_ID () {
					return this.RANGO_ID;
				}

				public Boolean RANGO_IDIsNullable(){
				    return true;
				}
				public Boolean RANGO_IDIsKey(){
				    return false;
				}
				public Integer RANGO_IDLength(){
				    return null;
				}
				public Integer RANGO_IDPrecision(){
				    return null;
				}
				public String RANGO_IDDefault(){
				
					return "";
				
				}
				public String RANGO_IDComment(){
				
				    return "";
				
				}
				public String RANGO_IDPattern(){
				
					return "";
				
				}
				public String RANGO_IDOriginalDbColumnName(){
				
					return "RANGO_ID";
				
				}

				
			    public BigDecimal POBLACION_ID;

				public BigDecimal getPOBLACION_ID () {
					return this.POBLACION_ID;
				}

				public Boolean POBLACION_IDIsNullable(){
				    return true;
				}
				public Boolean POBLACION_IDIsKey(){
				    return false;
				}
				public Integer POBLACION_IDLength(){
				    return null;
				}
				public Integer POBLACION_IDPrecision(){
				    return null;
				}
				public String POBLACION_IDDefault(){
				
					return "";
				
				}
				public String POBLACION_IDComment(){
				
				    return "";
				
				}
				public String POBLACION_IDPattern(){
				
					return "";
				
				}
				public String POBLACION_IDOriginalDbColumnName(){
				
					return "POBLACION_ID";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.ACTUALIZADAS = (BigDecimal) dis.readObject();
					
						this.APLICADAS = (BigDecimal) dis.readObject();
					
						this.TDOSIS_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.FAPLICACION = readDate(dis);
					
						this.RANGO_ID = (BigDecimal) dis.readObject();
					
						this.POBLACION_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.ACTUALIZADAS = (BigDecimal) dis.readObject();
					
						this.APLICADAS = (BigDecimal) dis.readObject();
					
						this.TDOSIS_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.FAPLICACION = readDate(dis);
					
						this.RANGO_ID = (BigDecimal) dis.readObject();
					
						this.POBLACION_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ACTUALIZADAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLICADAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOSIS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// java.util.Date
				
						writeDate(this.FAPLICACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RANGO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBLACION_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ACTUALIZADAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.APLICADAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOSIS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// java.util.Date
				
						writeDate(this.FAPLICACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RANGO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.POBLACION_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",ACTUALIZADAS="+String.valueOf(ACTUALIZADAS));
		sb.append(",APLICADAS="+String.valueOf(APLICADAS));
		sb.append(",TDOSIS_ID="+String.valueOf(TDOSIS_ID));
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",FAPLICACION="+String.valueOf(FAPLICACION));
		sb.append(",RANGO_ID="+String.valueOf(RANGO_ID));
		sb.append(",POBLACION_ID="+String.valueOf(POBLACION_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_20Struct implements routines.system.IPersistableRow<after_tOracleInput_20Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return null;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return "";
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal ACTUALIZADAS;

				public BigDecimal getACTUALIZADAS () {
					return this.ACTUALIZADAS;
				}

				public Boolean ACTUALIZADASIsNullable(){
				    return true;
				}
				public Boolean ACTUALIZADASIsKey(){
				    return false;
				}
				public Integer ACTUALIZADASLength(){
				    return null;
				}
				public Integer ACTUALIZADASPrecision(){
				    return null;
				}
				public String ACTUALIZADASDefault(){
				
					return "";
				
				}
				public String ACTUALIZADASComment(){
				
				    return "";
				
				}
				public String ACTUALIZADASPattern(){
				
					return "";
				
				}
				public String ACTUALIZADASOriginalDbColumnName(){
				
					return "ACTUALIZADAS";
				
				}

				
			    public BigDecimal APLICADAS;

				public BigDecimal getAPLICADAS () {
					return this.APLICADAS;
				}

				public Boolean APLICADASIsNullable(){
				    return true;
				}
				public Boolean APLICADASIsKey(){
				    return false;
				}
				public Integer APLICADASLength(){
				    return null;
				}
				public Integer APLICADASPrecision(){
				    return null;
				}
				public String APLICADASDefault(){
				
					return "";
				
				}
				public String APLICADASComment(){
				
				    return "";
				
				}
				public String APLICADASPattern(){
				
					return "";
				
				}
				public String APLICADASOriginalDbColumnName(){
				
					return "APLICADAS";
				
				}

				
			    public BigDecimal TDOSIS_ID;

				public BigDecimal getTDOSIS_ID () {
					return this.TDOSIS_ID;
				}

				public Boolean TDOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean TDOSIS_IDIsKey(){
				    return false;
				}
				public Integer TDOSIS_IDLength(){
				    return null;
				}
				public Integer TDOSIS_IDPrecision(){
				    return null;
				}
				public String TDOSIS_IDDefault(){
				
					return "";
				
				}
				public String TDOSIS_IDComment(){
				
				    return "";
				
				}
				public String TDOSIS_IDPattern(){
				
					return "";
				
				}
				public String TDOSIS_IDOriginalDbColumnName(){
				
					return "TDOSIS_ID";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return true;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICO_IDLength(){
				    return null;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public java.util.Date FAPLICACION;

				public java.util.Date getFAPLICACION () {
					return this.FAPLICACION;
				}

				public Boolean FAPLICACIONIsNullable(){
				    return true;
				}
				public Boolean FAPLICACIONIsKey(){
				    return false;
				}
				public Integer FAPLICACIONLength(){
				    return null;
				}
				public Integer FAPLICACIONPrecision(){
				    return null;
				}
				public String FAPLICACIONDefault(){
				
					return null;
				
				}
				public String FAPLICACIONComment(){
				
				    return "";
				
				}
				public String FAPLICACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FAPLICACIONOriginalDbColumnName(){
				
					return "FAPLICACION";
				
				}

				
			    public BigDecimal RANGO_ID;

				public BigDecimal getRANGO_ID () {
					return this.RANGO_ID;
				}

				public Boolean RANGO_IDIsNullable(){
				    return true;
				}
				public Boolean RANGO_IDIsKey(){
				    return false;
				}
				public Integer RANGO_IDLength(){
				    return null;
				}
				public Integer RANGO_IDPrecision(){
				    return null;
				}
				public String RANGO_IDDefault(){
				
					return "";
				
				}
				public String RANGO_IDComment(){
				
				    return "";
				
				}
				public String RANGO_IDPattern(){
				
					return "";
				
				}
				public String RANGO_IDOriginalDbColumnName(){
				
					return "RANGO_ID";
				
				}

				
			    public BigDecimal POBLACION_ID;

				public BigDecimal getPOBLACION_ID () {
					return this.POBLACION_ID;
				}

				public Boolean POBLACION_IDIsNullable(){
				    return true;
				}
				public Boolean POBLACION_IDIsKey(){
				    return false;
				}
				public Integer POBLACION_IDLength(){
				    return null;
				}
				public Integer POBLACION_IDPrecision(){
				    return null;
				}
				public String POBLACION_IDDefault(){
				
					return "";
				
				}
				public String POBLACION_IDComment(){
				
				    return "";
				
				}
				public String POBLACION_IDPattern(){
				
					return "";
				
				}
				public String POBLACION_IDOriginalDbColumnName(){
				
					return "POBLACION_ID";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.ACTUALIZADAS = (BigDecimal) dis.readObject();
					
						this.APLICADAS = (BigDecimal) dis.readObject();
					
						this.TDOSIS_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.FAPLICACION = readDate(dis);
					
						this.RANGO_ID = (BigDecimal) dis.readObject();
					
						this.POBLACION_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.ACTUALIZADAS = (BigDecimal) dis.readObject();
					
						this.APLICADAS = (BigDecimal) dis.readObject();
					
						this.TDOSIS_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.FAPLICACION = readDate(dis);
					
						this.RANGO_ID = (BigDecimal) dis.readObject();
					
						this.POBLACION_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ACTUALIZADAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.APLICADAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOSIS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// java.util.Date
				
						writeDate(this.FAPLICACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RANGO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.POBLACION_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ACTUALIZADAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.APLICADAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOSIS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// java.util.Date
				
						writeDate(this.FAPLICACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RANGO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.POBLACION_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",ACTUALIZADAS="+String.valueOf(ACTUALIZADAS));
		sb.append(",APLICADAS="+String.valueOf(APLICADAS));
		sb.append(",TDOSIS_ID="+String.valueOf(TDOSIS_ID));
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",FAPLICACION="+String.valueOf(FAPLICACION));
		sb.append(",RANGO_ID="+String.valueOf(RANGO_ID));
		sb.append(",POBLACION_ID="+String.valueOf(POBLACION_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_2Process(globalMap);

		row22Struct row22 = new row22Struct();
out1Struct out1 = new out1Struct();





	
	/**
	 * [tOracleOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_12", false);
		start_Hash.put("tOracleOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tOracleOutput_12 = 0;
		






    
    int nb_line_tOracleOutput_12 = 0;
    int nb_line_update_tOracleOutput_12 = 0;
    int nb_line_inserted_tOracleOutput_12 = 0;
    int nb_line_deleted_tOracleOutput_12 = 0;
    int nb_line_rejected_tOracleOutput_12 = 0;

    int tmp_batchUpdateCount_tOracleOutput_12 = 0;

    int deletedCount_tOracleOutput_12=0;
    int updatedCount_tOracleOutput_12=0;
    int insertedCount_tOracleOutput_12=0;
    int rowsToCommitCount_tOracleOutput_12=0;
    int rejectedCount_tOracleOutput_12=0;

    boolean whetherReject_tOracleOutput_12 = false;

    java.sql.Connection conn_tOracleOutput_12 = null;

    //optional table
    String dbschema_tOracleOutput_12 = null;
    String tableName_tOracleOutput_12 = null;
                    String driverClass_tOracleOutput_12 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_12);
                String url_tOracleOutput_12 = null;
                    url_tOracleOutput_12 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_12 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_12 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_12 = decryptedPassword_tOracleOutput_12;
                dbschema_tOracleOutput_12 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_12 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_12.put("user",dbUser_tOracleOutput_12);
                    atnParamsPrope_tOracleOutput_12.put("password",dbPwd_tOracleOutput_12);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_12.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_12 = java.sql.DriverManager.getConnection(url_tOracleOutput_12, atnParamsPrope_tOracleOutput_12);
        resourceMap.put("conn_tOracleOutput_12", conn_tOracleOutput_12);
            conn_tOracleOutput_12.setAutoCommit(false);
            int commitEvery_tOracleOutput_12 = 5000;
            int commitCounter_tOracleOutput_12 = 0;
        int batchSize_tOracleOutput_12 = 5000;
        int batchSizeCounter_tOracleOutput_12=0;
        int count_tOracleOutput_12=0;

        if(dbschema_tOracleOutput_12 == null || dbschema_tOracleOutput_12.trim().length() == 0) {
            tableName_tOracleOutput_12 = ("BVAC_CANTIDADES");
        } else {
            tableName_tOracleOutput_12 = dbschema_tOracleOutput_12 + "." + ("BVAC_CANTIDADES");
        }
                String insert_tOracleOutput_12 = "INSERT INTO " + tableName_tOracleOutput_12 + " (CANTIDAD,DOSIS_ID,BIOLOGICO_ID,UORG_ID,RANGO_ID,POBLACION_ID,TIEMPO_ID,ACTUALIZADAS,APLICADAS) VALUES (?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_12 = conn_tOracleOutput_12.prepareStatement(insert_tOracleOutput_12);
                        resourceMap.put("pstmt_tOracleOutput_12", pstmt_tOracleOutput_12);





 



/**
 * [tOracleOutput_12 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
					globalMap.get( "tHash_Lookup_row23" ))
					;					
					
	

row23Struct row23HashKey = new row23Struct();
row23Struct row23Default = new row23Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tOracleInput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_20", false);
		start_Hash.put("tOracleInput_20", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_20";
	
	
		int tos_count_tOracleInput_20 = 0;
		
	


	
		    int nb_line_tOracleInput_20 = 0;
		    java.sql.Connection conn_tOracleInput_20 = null;
				conn_tOracleInput_20 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_20 = false;
				boolean isConnectionWrapped_tOracleInput_20 = !(conn_tOracleInput_20 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_20.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_20 = null;
                if (isConnectionWrapped_tOracleInput_20) {
					unwrappedOraConn_tOracleInput_20 = conn_tOracleInput_20.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_20 != null) {
                        isTimeZoneNull_tOracleInput_20 = (unwrappedOraConn_tOracleInput_20.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_20 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_20).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_20) {
					java.sql.Statement stmtGetTZ_tOracleInput_20 = conn_tOracleInput_20.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_20 = stmtGetTZ_tOracleInput_20.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_20 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_20.next()) {
						sessionTimezone_tOracleInput_20 = rsGetTZ_tOracleInput_20.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_20 && unwrappedOraConn_tOracleInput_20 != null) {
                        unwrappedOraConn_tOracleInput_20.setSessionTimeZone(sessionTimezone_tOracleInput_20);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_20).setSessionTimeZone(sessionTimezone_tOracleInput_20);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_20 = conn_tOracleInput_20.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_20.setFetchSize(5000);


		    String dbquery_tOracleInput_20 = "\nSELECT  \n		COUNT ( DA.ID ) AS CANTIDAD\n        ,SUM( CASE WHEN DA.ACTUALIZACION = 1 THEN 1 ELSE 0 END) AS ACTUALIZA"
+"DAS\n        ,SUM( CASE WHEN DA.ACTUALIZACION = 2 THEN 1 ELSE 0 END) AS APLICADAS\n        ,DA.TDOSIS_ID\n        ,BIO.I"
+"D AS BIOLOGICO_ID\n        ,AP.UORG_ID\n        ,TRUNC ( AP.FAPLICACION, 'MONTH' ) AS FAPLICACION       \n        ,TRA.I"
+"D AS RANGO_ID\n        ,DECODE (AP.TVACUNA,'NO PAI', DA.POBLACIONOBJETO_ID, NULL ) AS POBLACION_ID        \nFROM VAC_DAP"
+"LICADAS DA \nINNER JOIN VAC_APLICADAS AP ON AP.ID = DA.APLICADAS_ID\nINNER JOIN ( \n  SELECT FAPLICACION\n  FROM ( \n   "
+" SELECT TRUNC ( AP.FAPLICACION, 'MONTH' ) AS FAPLICACION    \n           ,ROW_NUMBER() OVER (PARTITION BY TRUNC ( AP.FAP"
+"LICACION, 'MONTH' ) ORDER BY DA.ID DESC) R\n    FROM VAC_DAPLICADAS DA \n    INNER JOIN VAC_APLICADAS AP ON AP.ID = DA.A"
+"PLICADAS_ID\n    WHERE DA.ESTREGISTRO_ID = 1\n      AND AP.ESTREGISTRO_ID = 1\n      AND DA.BIOLOGICOS_ID IS NOT NULL\n "
+"     AND TO_CHAR  ( AP.FREGISTRO, 'YYYYMM' ) = '"+context.PERIODO+"' \n  ) WHERE R = 1\n) FFECHA ON FFECHA.FAPLICACION = TRUNC ( AP.FAPLICACION, 'MONTH' )\nINNER JOIN VAC_BIOLOGICOS BIO "
+"ON BIO.ID = DA.BIOLOGICOS_ID\nINNER JOIN GEN_PERSONAS GP ON GP.ID = AP.PERSONAS_ID \nLEFT JOIN VAC_TRAZADORES TRA  ON GP"
+".FECHA_NACIMIENTO >add_months(AP.FAPLICACION,-(TRA.EDADMAXIMA/30 + 1))  \n                              AND GP.fecha_nac"
+"imiento <= ADD_MONTHS(AP.FAPLICACION,-(TRA.EDADMINIMA/30)) \n                              AND TRA.ESTADO = 'Activo' AND"
+" TRA.ESTREGISTRO_ID = 1 AND AP.TVACUNA = 'PAI'\nWHERE DA.ESTREGISTRO_ID = 1\n  AND AP.ESTREGISTRO_ID = 1\nGROUP BY DA.TD"
+"OSIS_ID\n        ,BIO.ID\n        ,AP.UORG_ID\n        ,TO_CHAR  ( AP.FAPLICACION, 'YYYYMM' )\n        ,TRA.ID \n       "
+" ,DECODE (AP.TVACUNA,'NO PAI', DA.POBLACIONOBJETO_ID, NULL ) \n        ,TRUNC ( AP.FAPLICACION, 'MONTH' )\n";
		    

		    globalMap.put("tOracleInput_20_QUERY",dbquery_tOracleInput_20);

		    java.sql.ResultSet rs_tOracleInput_20 = null;

		    try {
		    	rs_tOracleInput_20 = stmt_tOracleInput_20.executeQuery(dbquery_tOracleInput_20);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_20 = rs_tOracleInput_20.getMetaData();
		    	int colQtyInRs_tOracleInput_20 = rsmd_tOracleInput_20.getColumnCount();

		    String tmpContent_tOracleInput_20 = null;
		    
		    
		    while (rs_tOracleInput_20.next()) {
		        nb_line_tOracleInput_20++;
		        
							if(colQtyInRs_tOracleInput_20 < 1) {
								row22.CANTIDAD = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(1) != null) {
						row22.CANTIDAD = rs_tOracleInput_20.getBigDecimal(1);
					} else {
				
						row22.CANTIDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 2) {
								row22.ACTUALIZADAS = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(2) != null) {
						row22.ACTUALIZADAS = rs_tOracleInput_20.getBigDecimal(2);
					} else {
				
						row22.ACTUALIZADAS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 3) {
								row22.APLICADAS = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(3) != null) {
						row22.APLICADAS = rs_tOracleInput_20.getBigDecimal(3);
					} else {
				
						row22.APLICADAS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 4) {
								row22.TDOSIS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(4) != null) {
						row22.TDOSIS_ID = rs_tOracleInput_20.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 5) {
								row22.BIOLOGICO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(5) != null) {
						row22.BIOLOGICO_ID = rs_tOracleInput_20.getBigDecimal(5);
					} else {
				
						row22.BIOLOGICO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 6) {
								row22.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(6) != null) {
						row22.UORG_ID = rs_tOracleInput_20.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 7) {
								row22.FAPLICACION = null;
							} else {
										
			row22.FAPLICACION = routines.system.JDBCUtil.getDate(rs_tOracleInput_20, 7);
		                    }
							if(colQtyInRs_tOracleInput_20 < 8) {
								row22.RANGO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(8) != null) {
						row22.RANGO_ID = rs_tOracleInput_20.getBigDecimal(8);
					} else {
				
						row22.RANGO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 9) {
								row22.POBLACION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(9) != null) {
						row22.POBLACION_ID = rs_tOracleInput_20.getBigDecimal(9);
					} else {
				
						row22.POBLACION_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_20 begin ] stop
 */
	
	/**
	 * [tOracleInput_20 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 


	tos_count_tOracleInput_20++;

/**
 * [tOracleInput_20 main ] stop
 */
	
	/**
	 * [tOracleInput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 



/**
 * [tOracleInput_20 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
						row23Struct row23 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row23" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow23 = false;
       		  	    	
       		  	    	
 							row23Struct row23ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row23HashKey.FECHA = row22.FAPLICACION  == null ? null : new java.util.Date((row22.FAPLICACION ).getTime());
                        		    		

								
		                        	row23HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row23.lookup( row23HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row23 != null && tHash_Lookup_row23.getCount(row23HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row23' and it contains more one result from keys :  row23.FECHA = '" + row23HashKey.FECHA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row23Struct fromLookup_row23 = null;
							row23 = row23Default;
										 
							
								 
							
							
								if (tHash_Lookup_row23 !=null && tHash_Lookup_row23.hasNext()) { // G 099
								
							
								
								fromLookup_row23 = tHash_Lookup_row23.next();

							
							
								} // G 099
							
							

							if(fromLookup_row23 != null) {
								row23 = fromLookup_row23;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.CANTIDAD = row22.CANTIDAD ;
out1_tmp.DOSIS_ID = row22.TDOSIS_ID ;
out1_tmp.BIOLOGICO_ID = row22.BIOLOGICO_ID ;
out1_tmp.UORG_ID = row22.UORG_ID ;
out1_tmp.RANGO_ID = row22.RANGO_ID ;
out1_tmp.POBLACION_ID = row22.POBLACION_ID ;
out1_tmp.TIEMPO_ID = row23.ID ;
out1_tmp.ACTUALIZADAS = row22.ACTUALIZADAS ;
out1_tmp.APLICADAS = row22.APLICADAS ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tOracleOutput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					



        whetherReject_tOracleOutput_12 = false;
                        pstmt_tOracleOutput_12.setBigDecimal(1, out1.CANTIDAD);

                        pstmt_tOracleOutput_12.setBigDecimal(2, out1.DOSIS_ID);

                        pstmt_tOracleOutput_12.setBigDecimal(3, out1.BIOLOGICO_ID);

                        pstmt_tOracleOutput_12.setBigDecimal(4, out1.UORG_ID);

                        pstmt_tOracleOutput_12.setBigDecimal(5, out1.RANGO_ID);

                        pstmt_tOracleOutput_12.setBigDecimal(6, out1.POBLACION_ID);

                        pstmt_tOracleOutput_12.setBigDecimal(7, out1.TIEMPO_ID);

                        pstmt_tOracleOutput_12.setBigDecimal(8, out1.ACTUALIZADAS);

                        pstmt_tOracleOutput_12.setBigDecimal(9, out1.APLICADAS);

                pstmt_tOracleOutput_12.addBatch();
                nb_line_tOracleOutput_12++;
                batchSizeCounter_tOracleOutput_12++;
            if (batchSize_tOracleOutput_12 > 0 &&  batchSize_tOracleOutput_12 <= batchSizeCounter_tOracleOutput_12) {
                try {
                    pstmt_tOracleOutput_12.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_12){
globalMap.put("tOracleOutput_12_ERROR_MESSAGE",e_tOracleOutput_12.getMessage());
			        java.sql.SQLException ne_tOracleOutput_12 = e_tOracleOutput_12.getNextException(),sqle_tOracleOutput_12=null;
			    	String errormessage_tOracleOutput_12;
					if (ne_tOracleOutput_12 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_12 = new java.sql.SQLException(e_tOracleOutput_12.getMessage() + "\ncaused by: " + ne_tOracleOutput_12.getMessage(), ne_tOracleOutput_12.getSQLState(), ne_tOracleOutput_12.getErrorCode(), ne_tOracleOutput_12);
						errormessage_tOracleOutput_12 = sqle_tOracleOutput_12.getMessage();
					}else{
						errormessage_tOracleOutput_12 = e_tOracleOutput_12.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_12);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_12 = pstmt_tOracleOutput_12.getUpdateCount();
                    insertedCount_tOracleOutput_12
                += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                rowsToCommitCount_tOracleOutput_12 += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                batchSizeCounter_tOracleOutput_12 = 0;
            }
                commitCounter_tOracleOutput_12++;
                if(commitEvery_tOracleOutput_12 <= commitCounter_tOracleOutput_12) {
                    if(batchSizeCounter_tOracleOutput_12 > 0) {
                        try {
                            pstmt_tOracleOutput_12.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_12){
globalMap.put("tOracleOutput_12_ERROR_MESSAGE",e_tOracleOutput_12.getMessage());
					        java.sql.SQLException ne_tOracleOutput_12 = e_tOracleOutput_12.getNextException(),sqle_tOracleOutput_12=null;
					    	String errormessage_tOracleOutput_12;
							if (ne_tOracleOutput_12 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_12 = new java.sql.SQLException(e_tOracleOutput_12.getMessage() + "\ncaused by: " + ne_tOracleOutput_12.getMessage(), ne_tOracleOutput_12.getSQLState(), ne_tOracleOutput_12.getErrorCode(), ne_tOracleOutput_12);
								errormessage_tOracleOutput_12 = sqle_tOracleOutput_12.getMessage();
							}else{
								errormessage_tOracleOutput_12 = e_tOracleOutput_12.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_12);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_12 = pstmt_tOracleOutput_12.getUpdateCount();
                            insertedCount_tOracleOutput_12
                        += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                        rowsToCommitCount_tOracleOutput_12 += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_12 != 0){
                    	
                    }
                    conn_tOracleOutput_12.commit();
                    if(rowsToCommitCount_tOracleOutput_12 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_12 = 0;
                    }
                    commitCounter_tOracleOutput_12=0;
                    	batchSizeCounter_tOracleOutput_12=0;
                }

 


	tos_count_tOracleOutput_12++;

/**
 * [tOracleOutput_12 main ] stop
 */
	
	/**
	 * [tOracleOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	

 



/**
 * [tOracleOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	

 



/**
 * [tOracleOutput_12 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 



/**
 * [tOracleInput_20 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_20 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

}
}finally{
	if (rs_tOracleInput_20 != null) {
		rs_tOracleInput_20.close();
	}
	if (stmt_tOracleInput_20 != null) {
		stmt_tOracleInput_20.close();
	}
}

globalMap.put("tOracleInput_20_NB_LINE",nb_line_tOracleInput_20);
 

ok_Hash.put("tOracleInput_20", true);
end_Hash.put("tOracleInput_20", System.currentTimeMillis());




/**
 * [tOracleInput_20 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row23 != null) {
						tHash_Lookup_row23.endGet();
					}
					globalMap.remove( "tHash_Lookup_row23" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tOracleOutput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_12 > 0) {
            try {
            	if (pstmt_tOracleOutput_12 != null) {
					
					pstmt_tOracleOutput_12.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_12){
globalMap.put("tOracleOutput_12_ERROR_MESSAGE",e_tOracleOutput_12.getMessage());
		        java.sql.SQLException ne_tOracleOutput_12 = e_tOracleOutput_12.getNextException(),sqle_tOracleOutput_12=null;
		    	String errormessage_tOracleOutput_12;
				if (ne_tOracleOutput_12 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_12 = new java.sql.SQLException(e_tOracleOutput_12.getMessage() + "\ncaused by: " + ne_tOracleOutput_12.getMessage(), ne_tOracleOutput_12.getSQLState(), ne_tOracleOutput_12.getErrorCode(), ne_tOracleOutput_12);
					errormessage_tOracleOutput_12 = sqle_tOracleOutput_12.getMessage();
				}else{
					errormessage_tOracleOutput_12 = e_tOracleOutput_12.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_12);
            	
        	}
        	if (pstmt_tOracleOutput_12 != null) {
            	tmp_batchUpdateCount_tOracleOutput_12 = pstmt_tOracleOutput_12.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_12
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
				rowsToCommitCount_tOracleOutput_12 += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
            }
        }
        if(pstmt_tOracleOutput_12 != null) {
			
				pstmt_tOracleOutput_12.close();
				resourceMap.remove("pstmt_tOracleOutput_12");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_12", true);
		if(commitCounter_tOracleOutput_12 > 0 && rowsToCommitCount_tOracleOutput_12 != 0) {
			
		}
		conn_tOracleOutput_12.commit();
		if(commitCounter_tOracleOutput_12 > 0 && rowsToCommitCount_tOracleOutput_12 != 0) {
			
			rowsToCommitCount_tOracleOutput_12 = 0;
		}
		commitCounter_tOracleOutput_12 = 0;
		
		
		conn_tOracleOutput_12 .close();
		
		resourceMap.put("finish_tOracleOutput_12", true);
   	

	
	nb_line_deleted_tOracleOutput_12=nb_line_deleted_tOracleOutput_12+ deletedCount_tOracleOutput_12;
	nb_line_update_tOracleOutput_12=nb_line_update_tOracleOutput_12 + updatedCount_tOracleOutput_12;
	nb_line_inserted_tOracleOutput_12=nb_line_inserted_tOracleOutput_12 + insertedCount_tOracleOutput_12;
	nb_line_rejected_tOracleOutput_12=nb_line_rejected_tOracleOutput_12 + rejectedCount_tOracleOutput_12;
	
        globalMap.put("tOracleOutput_12_NB_LINE",nb_line_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_UPDATED",nb_line_update_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_12);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_12", true);
end_Hash.put("tOracleOutput_12", System.currentTimeMillis());




/**
 * [tOracleOutput_12 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_20:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tOracleInput_21Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row23"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_20 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 



/**
 * [tOracleInput_20 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tOracleOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_12") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_12 = null;
                if ((pstmtToClose_tOracleOutput_12 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_12")) != null) {
                    pstmtToClose_tOracleOutput_12.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_12") == null){
            java.sql.Connection ctn_tOracleOutput_12 = null;
            if((ctn_tOracleOutput_12 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_12")) != null){
                try {
                    ctn_tOracleOutput_12.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_12) {
                    String errorMessage_tOracleOutput_12 = "failed to close the connection in tOracleOutput_12 :" + sqlEx_tOracleOutput_12.getMessage();
                    System.err.println(errorMessage_tOracleOutput_12);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_12 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_20_SUBPROCESS_STATE", 1);
	}
	


public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return null;
				}
				public Integer METAPrecision(){
				    return null;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return true;
				}
				public Integer BIOLOGICO_IDLength(){
				    return null;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean DOSIS_IDIsKey(){
				    return true;
				}
				public Integer DOSIS_IDLength(){
				    return null;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return null;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.BIOLOGICO_ID == null) ? 0 : this.BIOLOGICO_ID.hashCode());
					
						result = prime * result + ((this.DOSIS_ID == null) ? 0 : this.DOSIS_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row24Struct other = (row24Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.BIOLOGICO_ID == null) {
							if (other.BIOLOGICO_ID != null)
								return false;
						
						} else if (!this.BIOLOGICO_ID.equals(other.BIOLOGICO_ID))
						
							return false;
					
						if (this.DOSIS_ID == null) {
							if (other.DOSIS_ID != null)
								return false;
						
						} else if (!this.DOSIS_ID.equals(other.DOSIS_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row24Struct other) {

		other.META = this.META;
	            other.UORG_ID = this.UORG_ID;
	            other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            other.DOSIS_ID = this.DOSIS_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            
	}

	public void copyKeysDataTo(row24Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            	other.DOSIS_ID = this.DOSIS_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.META = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.META = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("META="+String.valueOf(META));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.BIOLOGICO_ID, other.BIOLOGICO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOSIS_ID, other.DOSIS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row24Struct row24 = new row24Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_VAC_F5_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_21", false);
		start_Hash.put("tOracleInput_21", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_21";
	
	
		int tos_count_tOracleInput_21 = 0;
		
	


	
		    int nb_line_tOracleInput_21 = 0;
		    java.sql.Connection conn_tOracleInput_21 = null;
				conn_tOracleInput_21 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_21 = false;
				boolean isConnectionWrapped_tOracleInput_21 = !(conn_tOracleInput_21 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_21.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_21 = null;
                if (isConnectionWrapped_tOracleInput_21) {
					unwrappedOraConn_tOracleInput_21 = conn_tOracleInput_21.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_21 != null) {
                        isTimeZoneNull_tOracleInput_21 = (unwrappedOraConn_tOracleInput_21.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_21 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_21).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_21) {
					java.sql.Statement stmtGetTZ_tOracleInput_21 = conn_tOracleInput_21.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_21 = stmtGetTZ_tOracleInput_21.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_21 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_21.next()) {
						sessionTimezone_tOracleInput_21 = rsGetTZ_tOracleInput_21.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_21 && unwrappedOraConn_tOracleInput_21 != null) {
                        unwrappedOraConn_tOracleInput_21.setSessionTimeZone(sessionTimezone_tOracleInput_21);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_21).setSessionTimeZone(sessionTimezone_tOracleInput_21);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_21 = conn_tOracleInput_21.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_21.setFetchSize(5000);


		    String dbquery_tOracleInput_21 = "SELECT  SUM ( ME.META )  AS META\n        ,ME.UORG_ID\n        ,ES.BIOLOGICOS_ID AS BIOLOGICO_ID\n        ,ET.TDOSIS_ID"
+" AS DOSIS_ID\n        ,"+context.ID_PRIMERDIA+" AS TIEMPOS_ID        \nFROM VAC_METASESQUEMAS ME\nINNER JOIN VAC_ESQUEMAS_TDOSIS ET ON ET.ID = ME.ESQUEMAS_TDOSIS_ID\n"
+"INNER JOIN VAC_ESQUEMAS ES ON ES.ID = ET.ESQUEMAS_ID\nINNER JOIN ( \n  SELECT  ME.UORG_ID\n          ,ES.BIOLOGICOS_ID\n"
+"          ,ET.TDOSIS_ID        \n  FROM VAC_METASESQUEMAS ME\n  INNER JOIN VAC_ESQUEMAS_TDOSIS ET ON ET.ID = ME.ESQUEMAS"
+"_TDOSIS_ID\n  INNER JOIN VAC_ESQUEMAS ES ON ES.ID = ET.ESQUEMAS_ID\n  WHERE ME.ESTREGISTRO_ID = 1  \n    AND ME.TVACUNA "
+"= 'PAI'   \n    AND ( TO_CHAR( ME.FREGISTRO, 'YYYYMM') = '"+context.PERIODO+"' OR TO_CHAR( ME.FACTUALIZACION, 'YYYYMM' ) = '"+context.PERIODO+"' )\n    AND TO_CHAR ( ME.FFINAL, 'YYYY' ) = '"+context.ANIO_PERIODO+"'\n) FFECHA ON FFECHA.UORG_ID = ME.UORG_ID AND FFECHA.BIOLOGICOS_ID = ES.BIOLOGICOS_ID AND FFECHA.TDOSIS_ID = ET.TDOSIS"
+"_ID \nWHERE ME.ESTREGISTRO_ID = 1  \n  AND ME.TVACUNA = 'PAI'     \n  AND TO_CHAR ( ME.FFINAL, 'YYYY' ) = '"+context.ANIO_PERIODO+"'\n  AND ME.ESTADO = 'Activo'\nGROUP BY ME.UORG_ID\n        ,ES.BIOLOGICOS_ID\n        ,ET.TDOSIS_ID\n        ,"+context.ID_PRIMERDIA;
		    

		    globalMap.put("tOracleInput_21_QUERY",dbquery_tOracleInput_21);

		    java.sql.ResultSet rs_tOracleInput_21 = null;

		    try {
		    	rs_tOracleInput_21 = stmt_tOracleInput_21.executeQuery(dbquery_tOracleInput_21);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_21 = rs_tOracleInput_21.getMetaData();
		    	int colQtyInRs_tOracleInput_21 = rsmd_tOracleInput_21.getColumnCount();

		    String tmpContent_tOracleInput_21 = null;
		    
		    
		    while (rs_tOracleInput_21.next()) {
		        nb_line_tOracleInput_21++;
		        
							if(colQtyInRs_tOracleInput_21 < 1) {
								row24.META = null;
							} else {
		                          
					if(rs_tOracleInput_21.getObject(1) != null) {
						row24.META = rs_tOracleInput_21.getBigDecimal(1);
					} else {
				
						row24.META = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_21 < 2) {
								row24.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_21.getObject(2) != null) {
						row24.UORG_ID = rs_tOracleInput_21.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_21 < 3) {
								row24.BIOLOGICO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_21.getObject(3) != null) {
						row24.BIOLOGICO_ID = rs_tOracleInput_21.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_21 < 4) {
								row24.DOSIS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_21.getObject(4) != null) {
						row24.DOSIS_ID = rs_tOracleInput_21.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_21 < 5) {
								row24.TIEMPOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_21.getObject(5) != null) {
						row24.TIEMPOS_ID = rs_tOracleInput_21.getBigDecimal(5);
					} else {
				
						row24.TIEMPOS_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_21 begin ] stop
 */
	
	/**
	 * [tOracleInput_21 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 


	tos_count_tOracleInput_21++;

/**
 * [tOracleInput_21 main ] stop
 */
	
	/**
	 * [tOracleInput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 



/**
 * [tOracleInput_21 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row24"
						
						);
					}
					



    
		row24Struct oneRow_tHashOutput_2 = new row24Struct();
				
					oneRow_tHashOutput_2.META = row24.META;
					oneRow_tHashOutput_2.UORG_ID = row24.UORG_ID;
					oneRow_tHashOutput_2.BIOLOGICO_ID = row24.BIOLOGICO_ID;
					oneRow_tHashOutput_2.DOSIS_ID = row24.DOSIS_ID;
					oneRow_tHashOutput_2.TIEMPOS_ID = row24.TIEMPOS_ID;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 



/**
 * [tOracleInput_21 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_21 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

}
}finally{
	if (rs_tOracleInput_21 != null) {
		rs_tOracleInput_21.close();
	}
	if (stmt_tOracleInput_21 != null) {
		stmt_tOracleInput_21.close();
	}
}

globalMap.put("tOracleInput_21_NB_LINE",nb_line_tOracleInput_21);
 

ok_Hash.put("tOracleInput_21", true);
end_Hash.put("tOracleInput_21", System.currentTimeMillis());




/**
 * [tOracleInput_21 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_21:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tHashInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_21 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 



/**
 * [tOracleInput_21 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_21_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return null;
				}
				public Integer METAPrecision(){
				    return null;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return true;
				}
				public Integer BIOLOGICO_IDLength(){
				    return null;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean DOSIS_IDIsKey(){
				    return true;
				}
				public Integer DOSIS_IDLength(){
				    return null;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return null;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.BIOLOGICO_ID == null) ? 0 : this.BIOLOGICO_ID.hashCode());
					
						result = prime * result + ((this.DOSIS_ID == null) ? 0 : this.DOSIS_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out2Struct other = (out2Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.BIOLOGICO_ID == null) {
							if (other.BIOLOGICO_ID != null)
								return false;
						
						} else if (!this.BIOLOGICO_ID.equals(other.BIOLOGICO_ID))
						
							return false;
					
						if (this.DOSIS_ID == null) {
							if (other.DOSIS_ID != null)
								return false;
						
						} else if (!this.DOSIS_ID.equals(other.DOSIS_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out2Struct other) {

		other.META = this.META;
	            other.UORG_ID = this.UORG_ID;
	            other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            other.DOSIS_ID = this.DOSIS_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            
	}

	public void copyKeysDataTo(out2Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            	other.DOSIS_ID = this.DOSIS_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.META = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.META = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("META="+String.valueOf(META));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.BIOLOGICO_ID, other.BIOLOGICO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOSIS_ID, other.DOSIS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return null;
				}
				public Integer METAPrecision(){
				    return null;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return true;
				}
				public Integer BIOLOGICO_IDLength(){
				    return null;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean DOSIS_IDIsKey(){
				    return true;
				}
				public Integer DOSIS_IDLength(){
				    return null;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return null;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.META = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.META = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("META="+String.valueOf(META));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();
out2Struct out2 = new out2Struct();





	
	/**
	 * [tOracleOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_13", false);
		start_Hash.put("tOracleOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tOracleOutput_13 = 0;
		






        int deleteKeyCount_tOracleOutput_13 = 4;
        if(deleteKeyCount_tOracleOutput_13 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_13 = 0;
    int nb_line_update_tOracleOutput_13 = 0;
    int nb_line_inserted_tOracleOutput_13 = 0;
    int nb_line_deleted_tOracleOutput_13 = 0;
    int nb_line_rejected_tOracleOutput_13 = 0;

    int tmp_batchUpdateCount_tOracleOutput_13 = 0;

    int deletedCount_tOracleOutput_13=0;
    int updatedCount_tOracleOutput_13=0;
    int insertedCount_tOracleOutput_13=0;
    int rowsToCommitCount_tOracleOutput_13=0;
    int rejectedCount_tOracleOutput_13=0;

    boolean whetherReject_tOracleOutput_13 = false;

    java.sql.Connection conn_tOracleOutput_13 = null;

    //optional table
    String dbschema_tOracleOutput_13 = null;
    String tableName_tOracleOutput_13 = null;
                    String driverClass_tOracleOutput_13 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_13);
                String url_tOracleOutput_13 = null;
                    url_tOracleOutput_13 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_13 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_13 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_13 = decryptedPassword_tOracleOutput_13;
                dbschema_tOracleOutput_13 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_13 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_13.put("user",dbUser_tOracleOutput_13);
                    atnParamsPrope_tOracleOutput_13.put("password",dbPwd_tOracleOutput_13);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_13.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_13 = java.sql.DriverManager.getConnection(url_tOracleOutput_13, atnParamsPrope_tOracleOutput_13);
        resourceMap.put("conn_tOracleOutput_13", conn_tOracleOutput_13);
            conn_tOracleOutput_13.setAutoCommit(false);
            int commitEvery_tOracleOutput_13 = 5000;
            int commitCounter_tOracleOutput_13 = 0;
        int batchSize_tOracleOutput_13 = 5000;
        int batchSizeCounter_tOracleOutput_13=0;
        int count_tOracleOutput_13=0;

        if(dbschema_tOracleOutput_13 == null || dbschema_tOracleOutput_13.trim().length() == 0) {
            tableName_tOracleOutput_13 = ("BVAC_METAS");
        } else {
            tableName_tOracleOutput_13 = dbschema_tOracleOutput_13 + "." + ("BVAC_METAS");
        }
                String delete_tOracleOutput_13 = "DELETE FROM " + tableName_tOracleOutput_13 + " WHERE UORG_ID = ? AND BIOLOGICO_ID = ? AND DOSIS_ID = ? AND TIEMPOS_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_13 = conn_tOracleOutput_13.prepareStatement(delete_tOracleOutput_13);
                resourceMap.put("pstmt_tOracleOutput_13", pstmt_tOracleOutput_13);





 



/**
 * [tOracleOutput_13 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_VAC_F5_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row24Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row24Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row25.META = next_tHashInput_3.META;
	row25.UORG_ID = next_tHashInput_3.UORG_ID;
	row25.BIOLOGICO_ID = next_tHashInput_3.BIOLOGICO_ID;
	row25.DOSIS_ID = next_tHashInput_3.DOSIS_ID;
	row25.TIEMPOS_ID = next_tHashInput_3.TIEMPOS_ID;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row25"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_8 = false;
		boolean mainRowRejected_tMap_8 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.META = row25.META ;
out2_tmp.UORG_ID = row25.UORG_ID ;
out2_tmp.BIOLOGICO_ID = row25.BIOLOGICO_ID ;
out2_tmp.DOSIS_ID = row25.DOSIS_ID ;
out2_tmp.TIEMPOS_ID = row25.TIEMPOS_ID ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tOracleOutput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out2"
						
						);
					}
					



        whetherReject_tOracleOutput_13 = false;
                    pstmt_tOracleOutput_13.setBigDecimal(1, out2.UORG_ID);

                    pstmt_tOracleOutput_13.setBigDecimal(2, out2.BIOLOGICO_ID);

                    pstmt_tOracleOutput_13.setBigDecimal(3, out2.DOSIS_ID);

                    pstmt_tOracleOutput_13.setBigDecimal(4, out2.TIEMPOS_ID);

                pstmt_tOracleOutput_13.addBatch();
                nb_line_tOracleOutput_13++;
                batchSizeCounter_tOracleOutput_13++;
            if (batchSize_tOracleOutput_13 > 0 &&  batchSize_tOracleOutput_13 <= batchSizeCounter_tOracleOutput_13) {
                try {
                    pstmt_tOracleOutput_13.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_13){
globalMap.put("tOracleOutput_13_ERROR_MESSAGE",e_tOracleOutput_13.getMessage());
			        java.sql.SQLException ne_tOracleOutput_13 = e_tOracleOutput_13.getNextException(),sqle_tOracleOutput_13=null;
			    	String errormessage_tOracleOutput_13;
					if (ne_tOracleOutput_13 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_13 = new java.sql.SQLException(e_tOracleOutput_13.getMessage() + "\ncaused by: " + ne_tOracleOutput_13.getMessage(), ne_tOracleOutput_13.getSQLState(), ne_tOracleOutput_13.getErrorCode(), ne_tOracleOutput_13);
						errormessage_tOracleOutput_13 = sqle_tOracleOutput_13.getMessage();
					}else{
						errormessage_tOracleOutput_13 = e_tOracleOutput_13.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_13);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_13 = pstmt_tOracleOutput_13.getUpdateCount();
                    deletedCount_tOracleOutput_13
                += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                rowsToCommitCount_tOracleOutput_13 += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                batchSizeCounter_tOracleOutput_13 = 0;
            }
                commitCounter_tOracleOutput_13++;
                if(commitEvery_tOracleOutput_13 <= commitCounter_tOracleOutput_13) {
                    if(batchSizeCounter_tOracleOutput_13 > 0) {
                        try {
                            pstmt_tOracleOutput_13.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_13){
globalMap.put("tOracleOutput_13_ERROR_MESSAGE",e_tOracleOutput_13.getMessage());
					        java.sql.SQLException ne_tOracleOutput_13 = e_tOracleOutput_13.getNextException(),sqle_tOracleOutput_13=null;
					    	String errormessage_tOracleOutput_13;
							if (ne_tOracleOutput_13 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_13 = new java.sql.SQLException(e_tOracleOutput_13.getMessage() + "\ncaused by: " + ne_tOracleOutput_13.getMessage(), ne_tOracleOutput_13.getSQLState(), ne_tOracleOutput_13.getErrorCode(), ne_tOracleOutput_13);
								errormessage_tOracleOutput_13 = sqle_tOracleOutput_13.getMessage();
							}else{
								errormessage_tOracleOutput_13 = e_tOracleOutput_13.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_13);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_13 = pstmt_tOracleOutput_13.getUpdateCount();
                            deletedCount_tOracleOutput_13
                        += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                        rowsToCommitCount_tOracleOutput_13 += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_13 != 0){
                    	
                    }
                    conn_tOracleOutput_13.commit();
                    if(rowsToCommitCount_tOracleOutput_13 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_13 = 0;
                    }
                    commitCounter_tOracleOutput_13=0;
                    	batchSizeCounter_tOracleOutput_13=0;
                }

 


	tos_count_tOracleOutput_13++;

/**
 * [tOracleOutput_13 main ] stop
 */
	
	/**
	 * [tOracleOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	

 



/**
 * [tOracleOutput_13 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	

 



/**
 * [tOracleOutput_13 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_VAC_F5_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tOracleOutput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_13 > 0) {
            try {
            	if (pstmt_tOracleOutput_13 != null) {
					
					pstmt_tOracleOutput_13.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_13){
globalMap.put("tOracleOutput_13_ERROR_MESSAGE",e_tOracleOutput_13.getMessage());
		        java.sql.SQLException ne_tOracleOutput_13 = e_tOracleOutput_13.getNextException(),sqle_tOracleOutput_13=null;
		    	String errormessage_tOracleOutput_13;
				if (ne_tOracleOutput_13 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_13 = new java.sql.SQLException(e_tOracleOutput_13.getMessage() + "\ncaused by: " + ne_tOracleOutput_13.getMessage(), ne_tOracleOutput_13.getSQLState(), ne_tOracleOutput_13.getErrorCode(), ne_tOracleOutput_13);
					errormessage_tOracleOutput_13 = sqle_tOracleOutput_13.getMessage();
				}else{
					errormessage_tOracleOutput_13 = e_tOracleOutput_13.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_13);
            	
        	}
        	if (pstmt_tOracleOutput_13 != null) {
            	tmp_batchUpdateCount_tOracleOutput_13 = pstmt_tOracleOutput_13.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_13
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
				rowsToCommitCount_tOracleOutput_13 += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
            }
        }
        if(pstmt_tOracleOutput_13 != null) {
			
				pstmt_tOracleOutput_13.close();
				resourceMap.remove("pstmt_tOracleOutput_13");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_13", true);
		if(commitCounter_tOracleOutput_13 > 0 && rowsToCommitCount_tOracleOutput_13 != 0) {
			
		}
		conn_tOracleOutput_13.commit();
		if(commitCounter_tOracleOutput_13 > 0 && rowsToCommitCount_tOracleOutput_13 != 0) {
			
			rowsToCommitCount_tOracleOutput_13 = 0;
		}
		commitCounter_tOracleOutput_13 = 0;
		
		
		conn_tOracleOutput_13 .close();
		
		resourceMap.put("finish_tOracleOutput_13", true);
   	

	
	nb_line_deleted_tOracleOutput_13=nb_line_deleted_tOracleOutput_13+ deletedCount_tOracleOutput_13;
	nb_line_update_tOracleOutput_13=nb_line_update_tOracleOutput_13 + updatedCount_tOracleOutput_13;
	nb_line_inserted_tOracleOutput_13=nb_line_inserted_tOracleOutput_13 + insertedCount_tOracleOutput_13;
	nb_line_rejected_tOracleOutput_13=nb_line_rejected_tOracleOutput_13 + rejectedCount_tOracleOutput_13;
	
        globalMap.put("tOracleOutput_13_NB_LINE",nb_line_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_UPDATED",nb_line_update_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_13);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_13", true);
end_Hash.put("tOracleOutput_13", System.currentTimeMillis());




/**
 * [tOracleOutput_13 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tHashInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tOracleOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_13") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_13 = null;
                if ((pstmtToClose_tOracleOutput_13 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_13")) != null) {
                    pstmtToClose_tOracleOutput_13.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_13") == null){
            java.sql.Connection ctn_tOracleOutput_13 = null;
            if((ctn_tOracleOutput_13 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_13")) != null){
                try {
                    ctn_tOracleOutput_13.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_13) {
                    String errorMessage_tOracleOutput_13 = "failed to close the connection in tOracleOutput_13 :" + sqlEx_tOracleOutput_13.getMessage();
                    System.err.println(errorMessage_tOracleOutput_13);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_13 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return null;
				}
				public Integer METAPrecision(){
				    return null;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return true;
				}
				public Integer BIOLOGICO_IDLength(){
				    return null;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean DOSIS_IDIsKey(){
				    return true;
				}
				public Integer DOSIS_IDLength(){
				    return null;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return null;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.BIOLOGICO_ID == null) ? 0 : this.BIOLOGICO_ID.hashCode());
					
						result = prime * result + ((this.DOSIS_ID == null) ? 0 : this.DOSIS_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out3Struct other = (out3Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.BIOLOGICO_ID == null) {
							if (other.BIOLOGICO_ID != null)
								return false;
						
						} else if (!this.BIOLOGICO_ID.equals(other.BIOLOGICO_ID))
						
							return false;
					
						if (this.DOSIS_ID == null) {
							if (other.DOSIS_ID != null)
								return false;
						
						} else if (!this.DOSIS_ID.equals(other.DOSIS_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out3Struct other) {

		other.META = this.META;
	            other.UORG_ID = this.UORG_ID;
	            other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            other.DOSIS_ID = this.DOSIS_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            
	}

	public void copyKeysDataTo(out3Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            	other.DOSIS_ID = this.DOSIS_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.META = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.META = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("META="+String.valueOf(META));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.BIOLOGICO_ID, other.BIOLOGICO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOSIS_ID, other.DOSIS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return null;
				}
				public Integer METAPrecision(){
				    return null;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return true;
				}
				public Integer BIOLOGICO_IDLength(){
				    return null;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean DOSIS_IDIsKey(){
				    return true;
				}
				public Integer DOSIS_IDLength(){
				    return null;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return null;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.META = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.META = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("META="+String.valueOf(META));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row26Struct row26 = new row26Struct();
out3Struct out3 = new out3Struct();





	
	/**
	 * [tOracleOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_14", false);
		start_Hash.put("tOracleOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tOracleOutput_14 = 0;
		






    
    int nb_line_tOracleOutput_14 = 0;
    int nb_line_update_tOracleOutput_14 = 0;
    int nb_line_inserted_tOracleOutput_14 = 0;
    int nb_line_deleted_tOracleOutput_14 = 0;
    int nb_line_rejected_tOracleOutput_14 = 0;

    int tmp_batchUpdateCount_tOracleOutput_14 = 0;

    int deletedCount_tOracleOutput_14=0;
    int updatedCount_tOracleOutput_14=0;
    int insertedCount_tOracleOutput_14=0;
    int rowsToCommitCount_tOracleOutput_14=0;
    int rejectedCount_tOracleOutput_14=0;

    boolean whetherReject_tOracleOutput_14 = false;

    java.sql.Connection conn_tOracleOutput_14 = null;

    //optional table
    String dbschema_tOracleOutput_14 = null;
    String tableName_tOracleOutput_14 = null;
                    String driverClass_tOracleOutput_14 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_14);
                String url_tOracleOutput_14 = null;
                    url_tOracleOutput_14 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_14 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_14 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_14 = decryptedPassword_tOracleOutput_14;
                dbschema_tOracleOutput_14 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_14 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_14.put("user",dbUser_tOracleOutput_14);
                    atnParamsPrope_tOracleOutput_14.put("password",dbPwd_tOracleOutput_14);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_14.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_14 = java.sql.DriverManager.getConnection(url_tOracleOutput_14, atnParamsPrope_tOracleOutput_14);
        resourceMap.put("conn_tOracleOutput_14", conn_tOracleOutput_14);
            conn_tOracleOutput_14.setAutoCommit(false);
            int commitEvery_tOracleOutput_14 = 5000;
            int commitCounter_tOracleOutput_14 = 0;
        int batchSize_tOracleOutput_14 = 5000;
        int batchSizeCounter_tOracleOutput_14=0;
        int count_tOracleOutput_14=0;

        if(dbschema_tOracleOutput_14 == null || dbschema_tOracleOutput_14.trim().length() == 0) {
            tableName_tOracleOutput_14 = ("BVAC_METAS");
        } else {
            tableName_tOracleOutput_14 = dbschema_tOracleOutput_14 + "." + ("BVAC_METAS");
        }
                String insert_tOracleOutput_14 = "INSERT INTO " + tableName_tOracleOutput_14 + " (META,UORG_ID,BIOLOGICO_ID,DOSIS_ID,TIEMPOS_ID) VALUES (?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_14 = conn_tOracleOutput_14.prepareStatement(insert_tOracleOutput_14);
                        resourceMap.put("pstmt_tOracleOutput_14", pstmt_tOracleOutput_14);





 



/**
 * [tOracleOutput_14 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_VAC_F5_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row24Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row24Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row26.META = next_tHashInput_4.META;
	row26.UORG_ID = next_tHashInput_4.UORG_ID;
	row26.BIOLOGICO_ID = next_tHashInput_4.BIOLOGICO_ID;
	row26.DOSIS_ID = next_tHashInput_4.DOSIS_ID;
	row26.TIEMPOS_ID = next_tHashInput_4.TIEMPOS_ID;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row26"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_9 = false;
		boolean mainRowRejected_tMap_9 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp.META = row26.META ;
out3_tmp.UORG_ID = row26.UORG_ID ;
out3_tmp.BIOLOGICO_ID = row26.BIOLOGICO_ID ;
out3_tmp.DOSIS_ID = row26.DOSIS_ID ;
out3_tmp.TIEMPOS_ID = row26.TIEMPOS_ID ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tOracleOutput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out3"
						
						);
					}
					



        whetherReject_tOracleOutput_14 = false;
                        pstmt_tOracleOutput_14.setBigDecimal(1, out3.META);

                        pstmt_tOracleOutput_14.setBigDecimal(2, out3.UORG_ID);

                        pstmt_tOracleOutput_14.setBigDecimal(3, out3.BIOLOGICO_ID);

                        pstmt_tOracleOutput_14.setBigDecimal(4, out3.DOSIS_ID);

                        pstmt_tOracleOutput_14.setBigDecimal(5, out3.TIEMPOS_ID);

                pstmt_tOracleOutput_14.addBatch();
                nb_line_tOracleOutput_14++;
                batchSizeCounter_tOracleOutput_14++;
            if (batchSize_tOracleOutput_14 > 0 &&  batchSize_tOracleOutput_14 <= batchSizeCounter_tOracleOutput_14) {
                try {
                    pstmt_tOracleOutput_14.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_14){
globalMap.put("tOracleOutput_14_ERROR_MESSAGE",e_tOracleOutput_14.getMessage());
			        java.sql.SQLException ne_tOracleOutput_14 = e_tOracleOutput_14.getNextException(),sqle_tOracleOutput_14=null;
			    	String errormessage_tOracleOutput_14;
					if (ne_tOracleOutput_14 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_14 = new java.sql.SQLException(e_tOracleOutput_14.getMessage() + "\ncaused by: " + ne_tOracleOutput_14.getMessage(), ne_tOracleOutput_14.getSQLState(), ne_tOracleOutput_14.getErrorCode(), ne_tOracleOutput_14);
						errormessage_tOracleOutput_14 = sqle_tOracleOutput_14.getMessage();
					}else{
						errormessage_tOracleOutput_14 = e_tOracleOutput_14.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_14);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_14 = pstmt_tOracleOutput_14.getUpdateCount();
                    insertedCount_tOracleOutput_14
                += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                rowsToCommitCount_tOracleOutput_14 += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                batchSizeCounter_tOracleOutput_14 = 0;
            }
                commitCounter_tOracleOutput_14++;
                if(commitEvery_tOracleOutput_14 <= commitCounter_tOracleOutput_14) {
                    if(batchSizeCounter_tOracleOutput_14 > 0) {
                        try {
                            pstmt_tOracleOutput_14.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_14){
globalMap.put("tOracleOutput_14_ERROR_MESSAGE",e_tOracleOutput_14.getMessage());
					        java.sql.SQLException ne_tOracleOutput_14 = e_tOracleOutput_14.getNextException(),sqle_tOracleOutput_14=null;
					    	String errormessage_tOracleOutput_14;
							if (ne_tOracleOutput_14 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_14 = new java.sql.SQLException(e_tOracleOutput_14.getMessage() + "\ncaused by: " + ne_tOracleOutput_14.getMessage(), ne_tOracleOutput_14.getSQLState(), ne_tOracleOutput_14.getErrorCode(), ne_tOracleOutput_14);
								errormessage_tOracleOutput_14 = sqle_tOracleOutput_14.getMessage();
							}else{
								errormessage_tOracleOutput_14 = e_tOracleOutput_14.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_14);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_14 = pstmt_tOracleOutput_14.getUpdateCount();
                            insertedCount_tOracleOutput_14
                        += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                        rowsToCommitCount_tOracleOutput_14 += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_14 != 0){
                    	
                    }
                    conn_tOracleOutput_14.commit();
                    if(rowsToCommitCount_tOracleOutput_14 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_14 = 0;
                    }
                    commitCounter_tOracleOutput_14=0;
                    	batchSizeCounter_tOracleOutput_14=0;
                }

 


	tos_count_tOracleOutput_14++;

/**
 * [tOracleOutput_14 main ] stop
 */
	
	/**
	 * [tOracleOutput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	

 



/**
 * [tOracleOutput_14 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	

 



/**
 * [tOracleOutput_14 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_VAC_F5_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tOracleOutput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_14 > 0) {
            try {
            	if (pstmt_tOracleOutput_14 != null) {
					
					pstmt_tOracleOutput_14.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_14){
globalMap.put("tOracleOutput_14_ERROR_MESSAGE",e_tOracleOutput_14.getMessage());
		        java.sql.SQLException ne_tOracleOutput_14 = e_tOracleOutput_14.getNextException(),sqle_tOracleOutput_14=null;
		    	String errormessage_tOracleOutput_14;
				if (ne_tOracleOutput_14 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_14 = new java.sql.SQLException(e_tOracleOutput_14.getMessage() + "\ncaused by: " + ne_tOracleOutput_14.getMessage(), ne_tOracleOutput_14.getSQLState(), ne_tOracleOutput_14.getErrorCode(), ne_tOracleOutput_14);
					errormessage_tOracleOutput_14 = sqle_tOracleOutput_14.getMessage();
				}else{
					errormessage_tOracleOutput_14 = e_tOracleOutput_14.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_14);
            	
        	}
        	if (pstmt_tOracleOutput_14 != null) {
            	tmp_batchUpdateCount_tOracleOutput_14 = pstmt_tOracleOutput_14.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_14
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
				rowsToCommitCount_tOracleOutput_14 += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
            }
        }
        if(pstmt_tOracleOutput_14 != null) {
			
				pstmt_tOracleOutput_14.close();
				resourceMap.remove("pstmt_tOracleOutput_14");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_14", true);
		if(commitCounter_tOracleOutput_14 > 0 && rowsToCommitCount_tOracleOutput_14 != 0) {
			
		}
		conn_tOracleOutput_14.commit();
		if(commitCounter_tOracleOutput_14 > 0 && rowsToCommitCount_tOracleOutput_14 != 0) {
			
			rowsToCommitCount_tOracleOutput_14 = 0;
		}
		commitCounter_tOracleOutput_14 = 0;
		
		
		conn_tOracleOutput_14 .close();
		
		resourceMap.put("finish_tOracleOutput_14", true);
   	

	
	nb_line_deleted_tOracleOutput_14=nb_line_deleted_tOracleOutput_14+ deletedCount_tOracleOutput_14;
	nb_line_update_tOracleOutput_14=nb_line_update_tOracleOutput_14 + updatedCount_tOracleOutput_14;
	nb_line_inserted_tOracleOutput_14=nb_line_inserted_tOracleOutput_14 + insertedCount_tOracleOutput_14;
	nb_line_rejected_tOracleOutput_14=nb_line_rejected_tOracleOutput_14 + rejectedCount_tOracleOutput_14;
	
        globalMap.put("tOracleOutput_14_NB_LINE",nb_line_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_UPDATED",nb_line_update_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_14);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_14", true);
end_Hash.put("tOracleOutput_14", System.currentTimeMillis());




/**
 * [tOracleOutput_14 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tOracleInput_22Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tOracleOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_14") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_14 = null;
                if ((pstmtToClose_tOracleOutput_14 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_14")) != null) {
                    pstmtToClose_tOracleOutput_14.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_14") == null){
            java.sql.Connection ctn_tOracleOutput_14 = null;
            if((ctn_tOracleOutput_14 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_14")) != null){
                try {
                    ctn_tOracleOutput_14.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_14) {
                    String errorMessage_tOracleOutput_14 = "failed to close the connection in tOracleOutput_14 :" + sqlEx_tOracleOutput_14.getMessage();
                    System.err.println(errorMessage_tOracleOutput_14);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_14 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public String FMENOR;

				public String getFMENOR () {
					return this.FMENOR;
				}

				public Boolean FMENORIsNullable(){
				    return true;
				}
				public Boolean FMENORIsKey(){
				    return false;
				}
				public Integer FMENORLength(){
				    return 10;
				}
				public Integer FMENORPrecision(){
				    return 0;
				}
				public String FMENORDefault(){
				
					return null;
				
				}
				public String FMENORComment(){
				
				    return "";
				
				}
				public String FMENORPattern(){
				
					return "";
				
				}
				public String FMENOROriginalDbColumnName(){
				
					return "FMENOR";
				
				}

				
			    public String FMAYOR;

				public String getFMAYOR () {
					return this.FMAYOR;
				}

				public Boolean FMAYORIsNullable(){
				    return true;
				}
				public Boolean FMAYORIsKey(){
				    return false;
				}
				public Integer FMAYORLength(){
				    return 10;
				}
				public Integer FMAYORPrecision(){
				    return 0;
				}
				public String FMAYORDefault(){
				
					return null;
				
				}
				public String FMAYORComment(){
				
				    return "";
				
				}
				public String FMAYORPattern(){
				
					return "";
				
				}
				public String FMAYOROriginalDbColumnName(){
				
					return "FMAYOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.FMENOR = readString(dis);
					
					this.FMAYOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.FMENOR = readString(dis);
					
					this.FMAYOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FMENOR,dos);
					
					// String
				
						writeString(this.FMAYOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FMENOR,dos);
					
					// String
				
						writeString(this.FMAYOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FMENOR="+FMENOR);
		sb.append(",FMAYOR="+FMAYOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row28Struct row28 = new row28Struct();




	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_22", false);
		start_Hash.put("tOracleInput_22", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_22";
	
	
		int tos_count_tOracleInput_22 = 0;
		
	


	
		    int nb_line_tOracleInput_22 = 0;
		    java.sql.Connection conn_tOracleInput_22 = null;
				conn_tOracleInput_22 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_22 = false;
				boolean isConnectionWrapped_tOracleInput_22 = !(conn_tOracleInput_22 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_22.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_22 = null;
                if (isConnectionWrapped_tOracleInput_22) {
					unwrappedOraConn_tOracleInput_22 = conn_tOracleInput_22.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_22 != null) {
                        isTimeZoneNull_tOracleInput_22 = (unwrappedOraConn_tOracleInput_22.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_22 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_22).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_22) {
					java.sql.Statement stmtGetTZ_tOracleInput_22 = conn_tOracleInput_22.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_22 = stmtGetTZ_tOracleInput_22.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_22 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_22.next()) {
						sessionTimezone_tOracleInput_22 = rsGetTZ_tOracleInput_22.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_22 && unwrappedOraConn_tOracleInput_22 != null) {
                        unwrappedOraConn_tOracleInput_22.setSessionTimeZone(sessionTimezone_tOracleInput_22);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_22).setSessionTimeZone(sessionTimezone_tOracleInput_22);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_22 = conn_tOracleInput_22.createStatement();

		    String dbquery_tOracleInput_22 = "SELECT  TO_CHAR ( MIN(PERIODO) , 'DD/MM/YYYY' ) AS FMENOR\n        ,TO_CHAR ( MAX(PERIODO) , 'DD/MM/YYYY' ) AS FMAYOR\n"
+"FROM ( \n  SELECT  DATOS.UORG_ID\n          ,DATOS.BIOLOGICOS_ID \n          ,DATOS.TDOSIS_ID\n          ,ADD_MONTHS(DAT"
+"OS.FINICIAL, DUPLICAR.NIVEL ) AS PERIODO\n          ,SUM( DATOS.META_MENSUAL ) AS META\n  FROM ( \n    SELECT  ME.ID\n  "
+"          ,ME.META \n            ,ME.UORG_ID\n            ,ES.BIOLOGICOS_ID\n            ,ET.TDOSIS_ID\n            ,TRU"
+"NC( ME.FINICIAL, 'MONTH') AS FINICIAL\n            ,ME.FINICIAL AS F1\n            ,LAST_DAY ( ME.FFINAL )      AS FFINA"
+"L\n            ,ME.FFINAL AS F2\n            ,ROUND ( ME.META / ROUND ( MONTHS_BETWEEN ( LAST_DAY ( ME.FFINAL ), TRUNC( "
+"ME.FINICIAL, 'MONTH') ), 0 ),0 ) AS META_MENSUAL\n            ,ROUND ( MONTHS_BETWEEN ( LAST_DAY ( ME.FFINAL ), TRUNC( M"
+"E.FINICIAL, 'MONTH') ), 0 )-1 AS MESES_ENTRE  \n    FROM VAC_METASESQUEMAS ME\n    INNER JOIN VAC_ESQUEMAS_TDOSIS ET ON "
+"ET.ID = ME.ESQUEMAS_TDOSIS_ID\n    INNER JOIN VAC_ESQUEMAS ES ON ES.ID = ET.ESQUEMAS_ID\n    INNER JOIN ( \n      SELECT"
+" ME.UORG_ID\n            ,ES.BIOLOGICOS_ID\n            ,ET.TDOSIS_ID\n      FROM VAC_METASESQUEMAS ME\n      INNER JOIN"
+" VAC_ESQUEMAS_TDOSIS ET ON ET.ID = ME.ESQUEMAS_TDOSIS_ID\n      INNER JOIN VAC_ESQUEMAS ES ON ES.ID = ET.ESQUEMAS_ID\n  "
+"    WHERE ( TO_CHAR( ME.FREGISTRO, 'YYYYMM') = '"+context.PERIODO+"' OR TO_CHAR( ME.FACTUALIZACION,'YYYYMM') = '"+context.PERIODO+"'  )\n        AND ME.ESTREGISTRO_ID = 1  \n        AND ME.TVACUNA = 'NO PAI'\n    ) FFECHA ON FFECHA.UORG_ID = ME.UORG_"
+"ID AND FFECHA.BIOLOGICOS_ID = ES.BIOLOGICOS_ID AND FFECHA.TDOSIS_ID = ET.TDOSIS_ID\n    WHERE ME.ESTREGISTRO_ID = 1  \n "
+"     AND ME.TVACUNA = 'NO PAI'\n      AND ME.ESTADO = 'Activo'\n  ) DATOS\n  INNER JOIN ( \n    SELECT LEVEL-1 AS NIVEL"
+"\n    FROM DUAL\n    CONNECT BY LEVEL <= 12\n  ) DUPLICAR ON DUPLICAR.NIVEL < = DATOS.MESES_ENTRE\n  GROUP BY DATOS.UORG_"
+"ID\n          ,DATOS.BIOLOGICOS_ID \n          ,DATOS.TDOSIS_ID\n          ,ADD_MONTHS(DATOS.FINICIAL, DUPLICAR.NIVEL )"
+"\n)   ";
		    

		    globalMap.put("tOracleInput_22_QUERY",dbquery_tOracleInput_22);

		    java.sql.ResultSet rs_tOracleInput_22 = null;

		    try {
		    	rs_tOracleInput_22 = stmt_tOracleInput_22.executeQuery(dbquery_tOracleInput_22);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_22 = rs_tOracleInput_22.getMetaData();
		    	int colQtyInRs_tOracleInput_22 = rsmd_tOracleInput_22.getColumnCount();

		    String tmpContent_tOracleInput_22 = null;
		    
		    
		    while (rs_tOracleInput_22.next()) {
		        nb_line_tOracleInput_22++;
		        
							if(colQtyInRs_tOracleInput_22 < 1) {
								row28.FMENOR = null;
							} else {
	                         		
        	row28.FMENOR = routines.system.JDBCUtil.getString(rs_tOracleInput_22, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_22 < 2) {
								row28.FMAYOR = null;
							} else {
	                         		
        	row28.FMAYOR = routines.system.JDBCUtil.getString(rs_tOracleInput_22, 2, false);
		                    }
					




 



/**
 * [tOracleInput_22 begin ] stop
 */
	
	/**
	 * [tOracleInput_22 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_22";
	
	

 


	tos_count_tOracleInput_22++;

/**
 * [tOracleInput_22 main ] stop
 */
	
	/**
	 * [tOracleInput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_22";
	
	

 



/**
 * [tOracleInput_22 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					

    //Rango de fechas de los periodos a editar
context.FECHA_MENOR2 = row28.FMENOR == null ? "":row28.FMENOR;
context.FECHA_MAXIMA2 = row28.FMAYOR == null ? "":row28.FMAYOR;




System.out.println("FECHA_MENOR2: "+context.FECHA_MENOR2);
System.out.println("FECHA_MAXIMA2: "+context.FECHA_MAXIMA2);

    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_22";
	
	

 



/**
 * [tOracleInput_22 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_22 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_22";
	
	

}
}finally{
	if (rs_tOracleInput_22 != null) {
		rs_tOracleInput_22.close();
	}
	if (stmt_tOracleInput_22 != null) {
		stmt_tOracleInput_22.close();
	}
}

globalMap.put("tOracleInput_22_NB_LINE",nb_line_tOracleInput_22);
 

ok_Hash.put("tOracleInput_22", true);
end_Hash.put("tOracleInput_22", System.currentTimeMillis());




/**
 * [tOracleInput_22 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());




/**
 * [tJavaRow_4 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_22:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tOracleInput_23Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_22 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_22";
	
	

 



/**
 * [tOracleInput_22 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_22_SUBPROCESS_STATE", 1);
	}
	


public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row29Struct row29 = new row29Struct();




	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row29Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_VAC_F5_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row29Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_23", false);
		start_Hash.put("tOracleInput_23", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_23";
	
	
		int tos_count_tOracleInput_23 = 0;
		
	


	
		    int nb_line_tOracleInput_23 = 0;
		    java.sql.Connection conn_tOracleInput_23 = null;
				conn_tOracleInput_23 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_23 = false;
				boolean isConnectionWrapped_tOracleInput_23 = !(conn_tOracleInput_23 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_23.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_23 = null;
                if (isConnectionWrapped_tOracleInput_23) {
					unwrappedOraConn_tOracleInput_23 = conn_tOracleInput_23.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_23 != null) {
                        isTimeZoneNull_tOracleInput_23 = (unwrappedOraConn_tOracleInput_23.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_23 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_23).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_23) {
					java.sql.Statement stmtGetTZ_tOracleInput_23 = conn_tOracleInput_23.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_23 = stmtGetTZ_tOracleInput_23.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_23 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_23.next()) {
						sessionTimezone_tOracleInput_23 = rsGetTZ_tOracleInput_23.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_23 && unwrappedOraConn_tOracleInput_23 != null) {
                        unwrappedOraConn_tOracleInput_23.setSessionTimeZone(sessionTimezone_tOracleInput_23);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_23).setSessionTimeZone(sessionTimezone_tOracleInput_23);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_23 = conn_tOracleInput_23.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_23.setFetchSize(5000);


		    String dbquery_tOracleInput_23 = "SELECT  TI.ID,         \n        TI.FECHA        \nFROM BGEN_TIEMPOS TI \nWHERE TI.DIA = 1  \n  AND TI.FECHA BETWEEN TO"
+"_DATE ( '"+context.FECHA_MENOR2+"','DD/MM/YYYY')\n                   AND TO_DATE( '"+context.FECHA_MAXIMA2+"','DD/MM/YYYY')";
		    

		    globalMap.put("tOracleInput_23_QUERY",dbquery_tOracleInput_23);

		    java.sql.ResultSet rs_tOracleInput_23 = null;

		    try {
		    	rs_tOracleInput_23 = stmt_tOracleInput_23.executeQuery(dbquery_tOracleInput_23);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_23 = rs_tOracleInput_23.getMetaData();
		    	int colQtyInRs_tOracleInput_23 = rsmd_tOracleInput_23.getColumnCount();

		    String tmpContent_tOracleInput_23 = null;
		    
		    
		    while (rs_tOracleInput_23.next()) {
		        nb_line_tOracleInput_23++;
		        
							if(colQtyInRs_tOracleInput_23 < 1) {
								row29.ID = null;
							} else {
		                          
					if(rs_tOracleInput_23.getObject(1) != null) {
						row29.ID = rs_tOracleInput_23.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_23 < 2) {
								row29.FECHA = null;
							} else {
										
			row29.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_23, 2);
		                    }
					




 



/**
 * [tOracleInput_23 begin ] stop
 */
	
	/**
	 * [tOracleInput_23 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_23";
	
	

 


	tos_count_tOracleInput_23++;

/**
 * [tOracleInput_23 main ] stop
 */
	
	/**
	 * [tOracleInput_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_23";
	
	

 



/**
 * [tOracleInput_23 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row29"
						
						);
					}
					



    
		row29Struct oneRow_tHashOutput_3 = new row29Struct();
				
					oneRow_tHashOutput_3.ID = row29.ID;
					oneRow_tHashOutput_3.FECHA = row29.FECHA;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_23";
	
	

 



/**
 * [tOracleInput_23 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_23 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_23";
	
	

}
}finally{
	if (rs_tOracleInput_23 != null) {
		rs_tOracleInput_23.close();
	}
	if (stmt_tOracleInput_23 != null) {
		stmt_tOracleInput_23.close();
	}
}

globalMap.put("tOracleInput_23_NB_LINE",nb_line_tOracleInput_23);
 

ok_Hash.put("tOracleInput_23", true);
end_Hash.put("tOracleInput_23", System.currentTimeMillis());




/**
 * [tOracleInput_23 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_23:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tOracleInput_25Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_23 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_23";
	
	

 



/**
 * [tOracleInput_23 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_23_SUBPROCESS_STATE", 1);
	}
	


public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return true;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICO_IDLength(){
				    return null;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return true;
				}
				public Boolean DOSIS_IDIsKey(){
				    return false;
				}
				public Integer DOSIS_IDLength(){
				    return null;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return null;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return null;
				}
				public Integer METAPrecision(){
				    return null;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",META="+String.valueOf(META));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_25_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row32Struct row32 = new row32Struct();




	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row32Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_VAC_F5_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row32Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_25", false);
		start_Hash.put("tOracleInput_25", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_25";
	
	
		int tos_count_tOracleInput_25 = 0;
		
	


	
		    int nb_line_tOracleInput_25 = 0;
		    java.sql.Connection conn_tOracleInput_25 = null;
				conn_tOracleInput_25 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_25 = false;
				boolean isConnectionWrapped_tOracleInput_25 = !(conn_tOracleInput_25 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_25.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_25 = null;
                if (isConnectionWrapped_tOracleInput_25) {
					unwrappedOraConn_tOracleInput_25 = conn_tOracleInput_25.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_25 != null) {
                        isTimeZoneNull_tOracleInput_25 = (unwrappedOraConn_tOracleInput_25.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_25 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_25).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_25) {
					java.sql.Statement stmtGetTZ_tOracleInput_25 = conn_tOracleInput_25.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_25 = stmtGetTZ_tOracleInput_25.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_25 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_25.next()) {
						sessionTimezone_tOracleInput_25 = rsGetTZ_tOracleInput_25.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_25 && unwrappedOraConn_tOracleInput_25 != null) {
                        unwrappedOraConn_tOracleInput_25.setSessionTimeZone(sessionTimezone_tOracleInput_25);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_25).setSessionTimeZone(sessionTimezone_tOracleInput_25);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_25 = conn_tOracleInput_25.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_25.setFetchSize(5000);


		    String dbquery_tOracleInput_25 = "SELECT  BM.UORG_ID \n        ,BM.BIOLOGICO_ID\n        ,BM.DOSIS_ID\n        ,BM.TIEMPOS_ID\n        ,BM.META\nFROM BVA"
+"C_METAS BM\nINNER JOIN BVAC_BIOLOGICOS BIO ON BIO.ID = BM.BIOLOGICO_ID\nINNER JOIN BGEN_TIEMPOS TI ON TI.ID = BM.TIEMPOS"
+"_ID\nWHERE TI.DIA = 1  \n  AND BIO.TESQUEMA = 'NO PAI'\n  AND TI.FECHA BETWEEN TO_DATE ( '"+context.FECHA_MENOR2+"','DD/MM/YYYY')\n                   AND TO_DATE(  '"+context.FECHA_MAXIMA2+"','DD/MM/YYYY')";
		    

		    globalMap.put("tOracleInput_25_QUERY",dbquery_tOracleInput_25);

		    java.sql.ResultSet rs_tOracleInput_25 = null;

		    try {
		    	rs_tOracleInput_25 = stmt_tOracleInput_25.executeQuery(dbquery_tOracleInput_25);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_25 = rs_tOracleInput_25.getMetaData();
		    	int colQtyInRs_tOracleInput_25 = rsmd_tOracleInput_25.getColumnCount();

		    String tmpContent_tOracleInput_25 = null;
		    
		    
		    while (rs_tOracleInput_25.next()) {
		        nb_line_tOracleInput_25++;
		        
							if(colQtyInRs_tOracleInput_25 < 1) {
								row32.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_25.getObject(1) != null) {
						row32.UORG_ID = rs_tOracleInput_25.getBigDecimal(1);
					} else {
				
						row32.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_25 < 2) {
								row32.BIOLOGICO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_25.getObject(2) != null) {
						row32.BIOLOGICO_ID = rs_tOracleInput_25.getBigDecimal(2);
					} else {
				
						row32.BIOLOGICO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_25 < 3) {
								row32.DOSIS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_25.getObject(3) != null) {
						row32.DOSIS_ID = rs_tOracleInput_25.getBigDecimal(3);
					} else {
				
						row32.DOSIS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_25 < 4) {
								row32.TIEMPOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_25.getObject(4) != null) {
						row32.TIEMPOS_ID = rs_tOracleInput_25.getBigDecimal(4);
					} else {
				
						row32.TIEMPOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_25 < 5) {
								row32.META = null;
							} else {
		                          
					if(rs_tOracleInput_25.getObject(5) != null) {
						row32.META = rs_tOracleInput_25.getBigDecimal(5);
					} else {
				
						row32.META = null;
					}
		                    }
					




 



/**
 * [tOracleInput_25 begin ] stop
 */
	
	/**
	 * [tOracleInput_25 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_25";
	
	

 


	tos_count_tOracleInput_25++;

/**
 * [tOracleInput_25 main ] stop
 */
	
	/**
	 * [tOracleInput_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_25";
	
	

 



/**
 * [tOracleInput_25 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row32"
						
						);
					}
					



    
		row32Struct oneRow_tHashOutput_4 = new row32Struct();
				
					oneRow_tHashOutput_4.UORG_ID = row32.UORG_ID;
					oneRow_tHashOutput_4.BIOLOGICO_ID = row32.BIOLOGICO_ID;
					oneRow_tHashOutput_4.DOSIS_ID = row32.DOSIS_ID;
					oneRow_tHashOutput_4.TIEMPOS_ID = row32.TIEMPOS_ID;
					oneRow_tHashOutput_4.META = row32.META;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_25";
	
	

 



/**
 * [tOracleInput_25 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_25 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_25";
	
	

}
}finally{
	if (rs_tOracleInput_25 != null) {
		rs_tOracleInput_25.close();
	}
	if (stmt_tOracleInput_25 != null) {
		stmt_tOracleInput_25.close();
	}
}

globalMap.put("tOracleInput_25_NB_LINE",nb_line_tOracleInput_25);
 

ok_Hash.put("tOracleInput_25", true);
end_Hash.put("tOracleInput_25", System.currentTimeMillis());




/**
 * [tOracleInput_25 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_25:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tOracleInput_26Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_25 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_25";
	
	

 



/**
 * [tOracleInput_25 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_25_SUBPROCESS_STATE", 1);
	}
	


public static class Borra2Struct implements routines.system.IPersistableRow<Borra2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return true;
				}
				public Integer BIOLOGICO_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean DOSIS_IDIsKey(){
				    return true;
				}
				public Integer DOSIS_IDLength(){
				    return 0;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return 0;
				}
				public String TIEMPOS_IDDefault(){
				
					return null;
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.BIOLOGICO_ID == null) ? 0 : this.BIOLOGICO_ID.hashCode());
					
						result = prime * result + ((this.DOSIS_ID == null) ? 0 : this.DOSIS_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Borra2Struct other = (Borra2Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.BIOLOGICO_ID == null) {
							if (other.BIOLOGICO_ID != null)
								return false;
						
						} else if (!this.BIOLOGICO_ID.equals(other.BIOLOGICO_ID))
						
							return false;
					
						if (this.DOSIS_ID == null) {
							if (other.DOSIS_ID != null)
								return false;
						
						} else if (!this.DOSIS_ID.equals(other.DOSIS_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Borra2Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            other.DOSIS_ID = this.DOSIS_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            
	}

	public void copyKeysDataTo(Borra2Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            	other.DOSIS_ID = this.DOSIS_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Borra2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.BIOLOGICO_ID, other.BIOLOGICO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOSIS_ID, other.DOSIS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal BIOLOGICOS_ID;

				public BigDecimal getBIOLOGICOS_ID () {
					return this.BIOLOGICOS_ID;
				}

				public Boolean BIOLOGICOS_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICOS_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICOS_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICOS_IDPrecision(){
				    return null;
				}
				public String BIOLOGICOS_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICOS_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDOriginalDbColumnName(){
				
					return "BIOLOGICOS_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean DOSIS_IDIsKey(){
				    return false;
				}
				public Integer DOSIS_IDLength(){
				    return 0;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 0;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return 0;
				}
				public Integer METAPrecision(){
				    return 0;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
					this.PERIODO = readDate(dis);
					
						this.META = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
					this.PERIODO = readDate(dis);
					
						this.META = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",BIOLOGICOS_ID="+String.valueOf(BIOLOGICOS_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",PERIODO="+String.valueOf(PERIODO));
		sb.append(",META="+String.valueOf(META));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_26Struct implements routines.system.IPersistableRow<after_tOracleInput_26Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal BIOLOGICOS_ID;

				public BigDecimal getBIOLOGICOS_ID () {
					return this.BIOLOGICOS_ID;
				}

				public Boolean BIOLOGICOS_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICOS_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICOS_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICOS_IDPrecision(){
				    return null;
				}
				public String BIOLOGICOS_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICOS_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDOriginalDbColumnName(){
				
					return "BIOLOGICOS_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean DOSIS_IDIsKey(){
				    return false;
				}
				public Integer DOSIS_IDLength(){
				    return 0;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 0;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return 0;
				}
				public Integer METAPrecision(){
				    return 0;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
					this.PERIODO = readDate(dis);
					
						this.META = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
					this.PERIODO = readDate(dis);
					
						this.META = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",BIOLOGICOS_ID="+String.valueOf(BIOLOGICOS_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",PERIODO="+String.valueOf(PERIODO));
		sb.append(",META="+String.valueOf(META));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_26_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_8Process(globalMap);

		row37Struct row37 = new row37Struct();
Borra2Struct Borra2 = new Borra2Struct();





	
	/**
	 * [tOracleOutput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_17", false);
		start_Hash.put("tOracleOutput_17", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Borra2");
					}
				
		int tos_count_tOracleOutput_17 = 0;
		






        int deleteKeyCount_tOracleOutput_17 = 4;
        if(deleteKeyCount_tOracleOutput_17 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_17 = 0;
    int nb_line_update_tOracleOutput_17 = 0;
    int nb_line_inserted_tOracleOutput_17 = 0;
    int nb_line_deleted_tOracleOutput_17 = 0;
    int nb_line_rejected_tOracleOutput_17 = 0;

    int tmp_batchUpdateCount_tOracleOutput_17 = 0;

    int deletedCount_tOracleOutput_17=0;
    int updatedCount_tOracleOutput_17=0;
    int insertedCount_tOracleOutput_17=0;
    int rowsToCommitCount_tOracleOutput_17=0;
    int rejectedCount_tOracleOutput_17=0;

    boolean whetherReject_tOracleOutput_17 = false;

    java.sql.Connection conn_tOracleOutput_17 = null;

    //optional table
    String dbschema_tOracleOutput_17 = null;
    String tableName_tOracleOutput_17 = null;
                    String driverClass_tOracleOutput_17 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_17);
                String url_tOracleOutput_17 = null;
                    url_tOracleOutput_17 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_17 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_17 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_17 = decryptedPassword_tOracleOutput_17;
                dbschema_tOracleOutput_17 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_17 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_17.put("user",dbUser_tOracleOutput_17);
                    atnParamsPrope_tOracleOutput_17.put("password",dbPwd_tOracleOutput_17);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_17.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_17 = java.sql.DriverManager.getConnection(url_tOracleOutput_17, atnParamsPrope_tOracleOutput_17);
        resourceMap.put("conn_tOracleOutput_17", conn_tOracleOutput_17);
            conn_tOracleOutput_17.setAutoCommit(false);
            int commitEvery_tOracleOutput_17 = 5000;
            int commitCounter_tOracleOutput_17 = 0;
        int batchSize_tOracleOutput_17 = 5000;
        int batchSizeCounter_tOracleOutput_17=0;
        int count_tOracleOutput_17=0;

        if(dbschema_tOracleOutput_17 == null || dbschema_tOracleOutput_17.trim().length() == 0) {
            tableName_tOracleOutput_17 = ("BVAC_METAS");
        } else {
            tableName_tOracleOutput_17 = dbschema_tOracleOutput_17 + "." + ("BVAC_METAS");
        }
                String delete_tOracleOutput_17 = "DELETE FROM " + tableName_tOracleOutput_17 + " WHERE UORG_ID = ? AND BIOLOGICO_ID = ? AND DOSIS_ID = ? AND TIEMPOS_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_17 = conn_tOracleOutput_17.prepareStatement(delete_tOracleOutput_17);
                resourceMap.put("pstmt_tOracleOutput_17", pstmt_tOracleOutput_17);





 



/**
 * [tOracleOutput_17 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row37");
					}
				
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) 
					globalMap.get( "tHash_Lookup_row38" ))
					;					
					
	

row38Struct row38HashKey = new row38Struct();
row38Struct row38Default = new row38Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
Borra2Struct Borra2_tmp = new Borra2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tOracleInput_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_26", false);
		start_Hash.put("tOracleInput_26", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_26";
	
	
		int tos_count_tOracleInput_26 = 0;
		
	


	
		    int nb_line_tOracleInput_26 = 0;
		    java.sql.Connection conn_tOracleInput_26 = null;
				conn_tOracleInput_26 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_26 = false;
				boolean isConnectionWrapped_tOracleInput_26 = !(conn_tOracleInput_26 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_26.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_26 = null;
                if (isConnectionWrapped_tOracleInput_26) {
					unwrappedOraConn_tOracleInput_26 = conn_tOracleInput_26.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_26 != null) {
                        isTimeZoneNull_tOracleInput_26 = (unwrappedOraConn_tOracleInput_26.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_26 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_26).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_26) {
					java.sql.Statement stmtGetTZ_tOracleInput_26 = conn_tOracleInput_26.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_26 = stmtGetTZ_tOracleInput_26.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_26 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_26.next()) {
						sessionTimezone_tOracleInput_26 = rsGetTZ_tOracleInput_26.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_26 && unwrappedOraConn_tOracleInput_26 != null) {
                        unwrappedOraConn_tOracleInput_26.setSessionTimeZone(sessionTimezone_tOracleInput_26);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_26).setSessionTimeZone(sessionTimezone_tOracleInput_26);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_26 = conn_tOracleInput_26.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_26.setFetchSize(5000);


		    String dbquery_tOracleInput_26 = "SELECT  DATOS.UORG_ID\n          ,DATOS.BIOLOGICOS_ID \n          ,DATOS.TDOSIS_ID AS DOSIS_ID\n          ,ADD_MONTHS(D"
+"ATOS.FINICIAL, DUPLICAR.NIVEL ) AS PERIODO\n          ,SUM( DATOS.META_MENSUAL ) AS META\n  FROM ( \n    SELECT  ME.ID\n"
+"            ,ME.META \n            ,ME.UORG_ID\n            ,ES.BIOLOGICOS_ID\n            ,ET.TDOSIS_ID\n            ,T"
+"RUNC( ME.FINICIAL, 'MONTH') AS FINICIAL\n            ,ME.FINICIAL AS F1\n            ,LAST_DAY ( ME.FFINAL )      AS FFI"
+"NAL\n            ,ME.FFINAL AS F2\n            ,ROUND ( ME.META / ROUND ( MONTHS_BETWEEN ( LAST_DAY ( ME.FFINAL ), TRUNC"
+"( ME.FINICIAL, 'MONTH') ), 0 ),0 ) AS META_MENSUAL\n            ,ROUND ( MONTHS_BETWEEN ( LAST_DAY ( ME.FFINAL ), TRUNC("
+" ME.FINICIAL, 'MONTH') ), 0 )-1 AS MESES_ENTRE  \n    FROM VAC_METASESQUEMAS ME\n    INNER JOIN VAC_ESQUEMAS_TDOSIS ET O"
+"N ET.ID = ME.ESQUEMAS_TDOSIS_ID\n    INNER JOIN VAC_ESQUEMAS ES ON ES.ID = ET.ESQUEMAS_ID\n    INNER JOIN ( \n      SELE"
+"CT ME.UORG_ID\n            ,ES.BIOLOGICOS_ID\n            ,ET.TDOSIS_ID\n      FROM VAC_METASESQUEMAS ME\n      INNER JO"
+"IN VAC_ESQUEMAS_TDOSIS ET ON ET.ID = ME.ESQUEMAS_TDOSIS_ID\n      INNER JOIN VAC_ESQUEMAS ES ON ES.ID = ET.ESQUEMAS_ID\n"
+"      WHERE ( TO_CHAR( ME.FREGISTRO, 'YYYYMM') = '"+context.PERIODO+"' OR TO_CHAR( ME.FACTUALIZACION,'YYYYMM') = '"+context.PERIODO+"' )\n        AND ME.ESTREGISTRO_ID = 1  \n        AND ME.TVACUNA = 'NO PAI'\n    ) FFECHA ON FFECHA.UORG_ID = ME.UORG_I"
+"D AND FFECHA.BIOLOGICOS_ID = ES.BIOLOGICOS_ID AND FFECHA.TDOSIS_ID = ET.TDOSIS_ID\n    WHERE ME.ESTREGISTRO_ID = 1  \n  "
+"    AND ME.TVACUNA = 'NO PAI'\n      AND ME.ESTADO = 'Inactivo'\n  ) DATOS\n  INNER JOIN ( \n    SELECT LEVEL-1 AS NIVEL"
+"\n    FROM DUAL\n    CONNECT BY LEVEL <= 12\n  ) DUPLICAR ON DUPLICAR.NIVEL < = DATOS.MESES_ENTRE\n  GROUP BY DATOS.UORG"
+"_ID\n          ,DATOS.BIOLOGICOS_ID \n          ,DATOS.TDOSIS_ID\n          ,ADD_MONTHS(DATOS.FINICIAL, DUPLICAR.NIVEL )"
+" ";
		    

		    globalMap.put("tOracleInput_26_QUERY",dbquery_tOracleInput_26);

		    java.sql.ResultSet rs_tOracleInput_26 = null;

		    try {
		    	rs_tOracleInput_26 = stmt_tOracleInput_26.executeQuery(dbquery_tOracleInput_26);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_26 = rs_tOracleInput_26.getMetaData();
		    	int colQtyInRs_tOracleInput_26 = rsmd_tOracleInput_26.getColumnCount();

		    String tmpContent_tOracleInput_26 = null;
		    
		    
		    while (rs_tOracleInput_26.next()) {
		        nb_line_tOracleInput_26++;
		        
							if(colQtyInRs_tOracleInput_26 < 1) {
								row37.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_26.getObject(1) != null) {
						row37.UORG_ID = rs_tOracleInput_26.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_26 < 2) {
								row37.BIOLOGICOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_26.getObject(2) != null) {
						row37.BIOLOGICOS_ID = rs_tOracleInput_26.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_26 < 3) {
								row37.DOSIS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_26.getObject(3) != null) {
						row37.DOSIS_ID = rs_tOracleInput_26.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_26 < 4) {
								row37.PERIODO = null;
							} else {
										
			row37.PERIODO = routines.system.JDBCUtil.getDate(rs_tOracleInput_26, 4);
		                    }
							if(colQtyInRs_tOracleInput_26 < 5) {
								row37.META = null;
							} else {
		                          
					if(rs_tOracleInput_26.getObject(5) != null) {
						row37.META = rs_tOracleInput_26.getBigDecimal(5);
					} else {
				
						row37.META = null;
					}
		                    }
					




 



/**
 * [tOracleInput_26 begin ] stop
 */
	
	/**
	 * [tOracleInput_26 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_26";
	
	

 


	tos_count_tOracleInput_26++;

/**
 * [tOracleInput_26 main ] stop
 */
	
	/**
	 * [tOracleInput_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_26";
	
	

 



/**
 * [tOracleInput_26 process_data_begin ] stop
 */

	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row37"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
						row38Struct row38 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_12 = false;
		boolean mainRowRejected_tMap_12 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row38" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow38 = false;
       		  	    	
       		  	    	
 							row38Struct row38ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_12) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_12 = false;
								
                        		    		    row38HashKey.FECHA = row37.PERIODO  == null ? null : new java.util.Date((row37.PERIODO ).getTime());
                        		    		

								
		                        	row38HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row38.lookup( row38HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row38 != null && tHash_Lookup_row38.getCount(row38HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row38' and it contains more one result from keys :  row38.FECHA = '" + row38HashKey.FECHA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row38Struct fromLookup_row38 = null;
							row38 = row38Default;
										 
							
								 
							
							
								if (tHash_Lookup_row38 !=null && tHash_Lookup_row38.hasNext()) { // G 099
								
							
								
								fromLookup_row38 = tHash_Lookup_row38.next();

							
							
								} // G 099
							
							

							if(fromLookup_row38 != null) {
								row38 = fromLookup_row38;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

Borra2 = null;


// # Output table : 'Borra2'
Borra2_tmp.UORG_ID = row37.UORG_ID ;
Borra2_tmp.BIOLOGICO_ID = row37.BIOLOGICOS_ID ;
Borra2_tmp.DOSIS_ID = row37.DOSIS_ID ;
Borra2_tmp.TIEMPOS_ID = row38.ID ;
Borra2 = Borra2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "Borra2"
if(Borra2 != null) { 



	
	/**
	 * [tOracleOutput_17 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Borra2"
						
						);
					}
					



        whetherReject_tOracleOutput_17 = false;
                    pstmt_tOracleOutput_17.setBigDecimal(1, Borra2.UORG_ID);

                    pstmt_tOracleOutput_17.setBigDecimal(2, Borra2.BIOLOGICO_ID);

                    pstmt_tOracleOutput_17.setBigDecimal(3, Borra2.DOSIS_ID);

                    pstmt_tOracleOutput_17.setBigDecimal(4, Borra2.TIEMPOS_ID);

                pstmt_tOracleOutput_17.addBatch();
                nb_line_tOracleOutput_17++;
                batchSizeCounter_tOracleOutput_17++;
            if (batchSize_tOracleOutput_17 > 0 &&  batchSize_tOracleOutput_17 <= batchSizeCounter_tOracleOutput_17) {
                try {
                    pstmt_tOracleOutput_17.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_17){
globalMap.put("tOracleOutput_17_ERROR_MESSAGE",e_tOracleOutput_17.getMessage());
			        java.sql.SQLException ne_tOracleOutput_17 = e_tOracleOutput_17.getNextException(),sqle_tOracleOutput_17=null;
			    	String errormessage_tOracleOutput_17;
					if (ne_tOracleOutput_17 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_17 = new java.sql.SQLException(e_tOracleOutput_17.getMessage() + "\ncaused by: " + ne_tOracleOutput_17.getMessage(), ne_tOracleOutput_17.getSQLState(), ne_tOracleOutput_17.getErrorCode(), ne_tOracleOutput_17);
						errormessage_tOracleOutput_17 = sqle_tOracleOutput_17.getMessage();
					}else{
						errormessage_tOracleOutput_17 = e_tOracleOutput_17.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_17);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_17 = pstmt_tOracleOutput_17.getUpdateCount();
                    deletedCount_tOracleOutput_17
                += (tmp_batchUpdateCount_tOracleOutput_17!=-1?tmp_batchUpdateCount_tOracleOutput_17:0);
                rowsToCommitCount_tOracleOutput_17 += (tmp_batchUpdateCount_tOracleOutput_17!=-1?tmp_batchUpdateCount_tOracleOutput_17:0);
                batchSizeCounter_tOracleOutput_17 = 0;
            }
                commitCounter_tOracleOutput_17++;
                if(commitEvery_tOracleOutput_17 <= commitCounter_tOracleOutput_17) {
                    if(batchSizeCounter_tOracleOutput_17 > 0) {
                        try {
                            pstmt_tOracleOutput_17.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_17){
globalMap.put("tOracleOutput_17_ERROR_MESSAGE",e_tOracleOutput_17.getMessage());
					        java.sql.SQLException ne_tOracleOutput_17 = e_tOracleOutput_17.getNextException(),sqle_tOracleOutput_17=null;
					    	String errormessage_tOracleOutput_17;
							if (ne_tOracleOutput_17 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_17 = new java.sql.SQLException(e_tOracleOutput_17.getMessage() + "\ncaused by: " + ne_tOracleOutput_17.getMessage(), ne_tOracleOutput_17.getSQLState(), ne_tOracleOutput_17.getErrorCode(), ne_tOracleOutput_17);
								errormessage_tOracleOutput_17 = sqle_tOracleOutput_17.getMessage();
							}else{
								errormessage_tOracleOutput_17 = e_tOracleOutput_17.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_17);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_17 = pstmt_tOracleOutput_17.getUpdateCount();
                            deletedCount_tOracleOutput_17
                        += (tmp_batchUpdateCount_tOracleOutput_17!=-1?tmp_batchUpdateCount_tOracleOutput_17:0);
                        rowsToCommitCount_tOracleOutput_17 += (tmp_batchUpdateCount_tOracleOutput_17!=-1?tmp_batchUpdateCount_tOracleOutput_17:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_17 != 0){
                    	
                    }
                    conn_tOracleOutput_17.commit();
                    if(rowsToCommitCount_tOracleOutput_17 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_17 = 0;
                    }
                    commitCounter_tOracleOutput_17=0;
                    	batchSizeCounter_tOracleOutput_17=0;
                }

 


	tos_count_tOracleOutput_17++;

/**
 * [tOracleOutput_17 main ] stop
 */
	
	/**
	 * [tOracleOutput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	

 



/**
 * [tOracleOutput_17 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	

 



/**
 * [tOracleOutput_17 process_data_end ] stop
 */

} // End of branch "Borra2"




	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	

 



/**
 * [tMap_12 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_26";
	
	

 



/**
 * [tOracleInput_26 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_26 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_26";
	
	

}
}finally{
	if (rs_tOracleInput_26 != null) {
		rs_tOracleInput_26.close();
	}
	if (stmt_tOracleInput_26 != null) {
		stmt_tOracleInput_26.close();
	}
}

globalMap.put("tOracleInput_26_NB_LINE",nb_line_tOracleInput_26);
 

ok_Hash.put("tOracleInput_26", true);
end_Hash.put("tOracleInput_26", System.currentTimeMillis());




/**
 * [tOracleInput_26 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row38 != null) {
						tHash_Lookup_row38.endGet();
					}
					globalMap.remove( "tHash_Lookup_row38" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row37");
			  	}
			  	
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tOracleOutput_17 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_17 > 0) {
            try {
            	if (pstmt_tOracleOutput_17 != null) {
					
					pstmt_tOracleOutput_17.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_17){
globalMap.put("tOracleOutput_17_ERROR_MESSAGE",e_tOracleOutput_17.getMessage());
		        java.sql.SQLException ne_tOracleOutput_17 = e_tOracleOutput_17.getNextException(),sqle_tOracleOutput_17=null;
		    	String errormessage_tOracleOutput_17;
				if (ne_tOracleOutput_17 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_17 = new java.sql.SQLException(e_tOracleOutput_17.getMessage() + "\ncaused by: " + ne_tOracleOutput_17.getMessage(), ne_tOracleOutput_17.getSQLState(), ne_tOracleOutput_17.getErrorCode(), ne_tOracleOutput_17);
					errormessage_tOracleOutput_17 = sqle_tOracleOutput_17.getMessage();
				}else{
					errormessage_tOracleOutput_17 = e_tOracleOutput_17.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_17);
            	
        	}
        	if (pstmt_tOracleOutput_17 != null) {
            	tmp_batchUpdateCount_tOracleOutput_17 = pstmt_tOracleOutput_17.getUpdateCount();
    	    	
    	    	    deletedCount_tOracleOutput_17
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_17!=-1?tmp_batchUpdateCount_tOracleOutput_17:0);
				rowsToCommitCount_tOracleOutput_17 += (tmp_batchUpdateCount_tOracleOutput_17!=-1?tmp_batchUpdateCount_tOracleOutput_17:0);
            }
        }
        if(pstmt_tOracleOutput_17 != null) {
			
				pstmt_tOracleOutput_17.close();
				resourceMap.remove("pstmt_tOracleOutput_17");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_17", true);
		if(commitCounter_tOracleOutput_17 > 0 && rowsToCommitCount_tOracleOutput_17 != 0) {
			
		}
		conn_tOracleOutput_17.commit();
		if(commitCounter_tOracleOutput_17 > 0 && rowsToCommitCount_tOracleOutput_17 != 0) {
			
			rowsToCommitCount_tOracleOutput_17 = 0;
		}
		commitCounter_tOracleOutput_17 = 0;
		
		
		conn_tOracleOutput_17 .close();
		
		resourceMap.put("finish_tOracleOutput_17", true);
   	

	
	nb_line_deleted_tOracleOutput_17=nb_line_deleted_tOracleOutput_17+ deletedCount_tOracleOutput_17;
	nb_line_update_tOracleOutput_17=nb_line_update_tOracleOutput_17 + updatedCount_tOracleOutput_17;
	nb_line_inserted_tOracleOutput_17=nb_line_inserted_tOracleOutput_17 + insertedCount_tOracleOutput_17;
	nb_line_rejected_tOracleOutput_17=nb_line_rejected_tOracleOutput_17 + rejectedCount_tOracleOutput_17;
	
        globalMap.put("tOracleOutput_17_NB_LINE",nb_line_tOracleOutput_17);
        globalMap.put("tOracleOutput_17_NB_LINE_UPDATED",nb_line_update_tOracleOutput_17);
        globalMap.put("tOracleOutput_17_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_17);
        globalMap.put("tOracleOutput_17_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_17);
        globalMap.put("tOracleOutput_17_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_17);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Borra2");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_17", true);
end_Hash.put("tOracleOutput_17", System.currentTimeMillis());




/**
 * [tOracleOutput_17 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_26:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tOracleInput_24Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_12"
					     			globalMap.remove("tHash_Lookup_row38"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_26 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_26";
	
	

 



/**
 * [tOracleInput_26 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tOracleOutput_17 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_17") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_17 = null;
                if ((pstmtToClose_tOracleOutput_17 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_17")) != null) {
                    pstmtToClose_tOracleOutput_17.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_17") == null){
            java.sql.Connection ctn_tOracleOutput_17 = null;
            if((ctn_tOracleOutput_17 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_17")) != null){
                try {
                    ctn_tOracleOutput_17.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_17) {
                    String errorMessage_tOracleOutput_17 = "failed to close the connection in tOracleOutput_17 :" + sqlEx_tOracleOutput_17.getMessage();
                    System.err.println(errorMessage_tOracleOutput_17);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_17 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_26_SUBPROCESS_STATE", 1);
	}
	


public static class Actualiza5Struct implements routines.system.IPersistableRow<Actualiza5Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return true;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return true;
				}
				public Integer BIOLOGICO_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean DOSIS_IDIsKey(){
				    return true;
				}
				public Integer DOSIS_IDLength(){
				    return 0;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return true;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return 0;
				}
				public String TIEMPOS_IDDefault(){
				
					return null;
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return 0;
				}
				public Integer METAPrecision(){
				    return 0;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.BIOLOGICO_ID == null) ? 0 : this.BIOLOGICO_ID.hashCode());
					
						result = prime * result + ((this.DOSIS_ID == null) ? 0 : this.DOSIS_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Actualiza5Struct other = (Actualiza5Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.BIOLOGICO_ID == null) {
							if (other.BIOLOGICO_ID != null)
								return false;
						
						} else if (!this.BIOLOGICO_ID.equals(other.BIOLOGICO_ID))
						
							return false;
					
						if (this.DOSIS_ID == null) {
							if (other.DOSIS_ID != null)
								return false;
						
						} else if (!this.DOSIS_ID.equals(other.DOSIS_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Actualiza5Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            other.DOSIS_ID = this.DOSIS_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            other.META = this.META;
	            
	}

	public void copyKeysDataTo(Actualiza5Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            	other.DOSIS_ID = this.DOSIS_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",META="+String.valueOf(META));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Actualiza5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.BIOLOGICO_ID, other.BIOLOGICO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOSIS_ID, other.DOSIS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Registra5Struct implements routines.system.IPersistableRow<Registra5Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICO_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean DOSIS_IDIsKey(){
				    return false;
				}
				public Integer DOSIS_IDLength(){
				    return 0;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return 0;
				}
				public String TIEMPOS_IDDefault(){
				
					return null;
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return 0;
				}
				public Integer METAPrecision(){
				    return 0;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",META="+String.valueOf(META));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Registra5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal BIOLOGICOS_ID;

				public BigDecimal getBIOLOGICOS_ID () {
					return this.BIOLOGICOS_ID;
				}

				public Boolean BIOLOGICOS_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICOS_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICOS_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICOS_IDPrecision(){
				    return null;
				}
				public String BIOLOGICOS_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICOS_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDOriginalDbColumnName(){
				
					return "BIOLOGICOS_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean DOSIS_IDIsKey(){
				    return false;
				}
				public Integer DOSIS_IDLength(){
				    return 0;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 0;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return 0;
				}
				public Integer METAPrecision(){
				    return 0;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
					this.PERIODO = readDate(dis);
					
						this.META = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
					this.PERIODO = readDate(dis);
					
						this.META = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",BIOLOGICOS_ID="+String.valueOf(BIOLOGICOS_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",PERIODO="+String.valueOf(PERIODO));
		sb.append(",META="+String.valueOf(META));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_24Struct implements routines.system.IPersistableRow<after_tOracleInput_24Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal BIOLOGICOS_ID;

				public BigDecimal getBIOLOGICOS_ID () {
					return this.BIOLOGICOS_ID;
				}

				public Boolean BIOLOGICOS_IDIsNullable(){
				    return false;
				}
				public Boolean BIOLOGICOS_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICOS_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICOS_IDPrecision(){
				    return null;
				}
				public String BIOLOGICOS_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICOS_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDOriginalDbColumnName(){
				
					return "BIOLOGICOS_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return false;
				}
				public Boolean DOSIS_IDIsKey(){
				    return false;
				}
				public Integer DOSIS_IDLength(){
				    return 0;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 0;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return 0;
				}
				public Integer METAPrecision(){
				    return 0;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
					this.PERIODO = readDate(dis);
					
						this.META = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
					this.PERIODO = readDate(dis);
					
						this.META = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",BIOLOGICOS_ID="+String.valueOf(BIOLOGICOS_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",PERIODO="+String.valueOf(PERIODO));
		sb.append(",META="+String.valueOf(META));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_24_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_5Process(globalMap);
		tHashInput_6Process(globalMap);
		tHashInput_7Process(globalMap);

		row30Struct row30 = new row30Struct();
Actualiza5Struct Actualiza5 = new Actualiza5Struct();
Registra5Struct Registra5 = new Registra5Struct();





	
	/**
	 * [tOracleOutput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_16", false);
		start_Hash.put("tOracleOutput_16", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Actualiza5");
					}
				
		int tos_count_tOracleOutput_16 = 0;
		






        int updateKeyCount_tOracleOutput_16 = 4;
        if(updateKeyCount_tOracleOutput_16 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_16 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_16 = 0;
    int nb_line_update_tOracleOutput_16 = 0;
    int nb_line_inserted_tOracleOutput_16 = 0;
    int nb_line_deleted_tOracleOutput_16 = 0;
    int nb_line_rejected_tOracleOutput_16 = 0;

    int tmp_batchUpdateCount_tOracleOutput_16 = 0;

    int deletedCount_tOracleOutput_16=0;
    int updatedCount_tOracleOutput_16=0;
    int insertedCount_tOracleOutput_16=0;
    int rowsToCommitCount_tOracleOutput_16=0;
    int rejectedCount_tOracleOutput_16=0;

    boolean whetherReject_tOracleOutput_16 = false;

    java.sql.Connection conn_tOracleOutput_16 = null;

    //optional table
    String dbschema_tOracleOutput_16 = null;
    String tableName_tOracleOutput_16 = null;
                    String driverClass_tOracleOutput_16 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_16);
                String url_tOracleOutput_16 = null;
                    url_tOracleOutput_16 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_16 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_16 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_16 = decryptedPassword_tOracleOutput_16;
                dbschema_tOracleOutput_16 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_16 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_16.put("user",dbUser_tOracleOutput_16);
                    atnParamsPrope_tOracleOutput_16.put("password",dbPwd_tOracleOutput_16);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_16.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_16 = java.sql.DriverManager.getConnection(url_tOracleOutput_16, atnParamsPrope_tOracleOutput_16);
        resourceMap.put("conn_tOracleOutput_16", conn_tOracleOutput_16);
            conn_tOracleOutput_16.setAutoCommit(false);
            int commitEvery_tOracleOutput_16 = 5000;
            int commitCounter_tOracleOutput_16 = 0;
        int batchSize_tOracleOutput_16 = 5000;
        int batchSizeCounter_tOracleOutput_16=0;
        int count_tOracleOutput_16=0;

        if(dbschema_tOracleOutput_16 == null || dbschema_tOracleOutput_16.trim().length() == 0) {
            tableName_tOracleOutput_16 = ("BVAC_METAS");
        } else {
            tableName_tOracleOutput_16 = dbschema_tOracleOutput_16 + "." + ("BVAC_METAS");
        }
                String update_tOracleOutput_16 = "UPDATE " + tableName_tOracleOutput_16 + " SET META = ? WHERE UORG_ID = ? AND BIOLOGICO_ID = ? AND DOSIS_ID = ? AND TIEMPOS_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_16 = conn_tOracleOutput_16.prepareStatement(update_tOracleOutput_16);
                resourceMap.put("pstmt_tOracleOutput_16", pstmt_tOracleOutput_16);





 



/**
 * [tOracleOutput_16 begin ] stop
 */




	
	/**
	 * [tOracleOutput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_15", false);
		start_Hash.put("tOracleOutput_15", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Registra5");
					}
				
		int tos_count_tOracleOutput_15 = 0;
		






    
    int nb_line_tOracleOutput_15 = 0;
    int nb_line_update_tOracleOutput_15 = 0;
    int nb_line_inserted_tOracleOutput_15 = 0;
    int nb_line_deleted_tOracleOutput_15 = 0;
    int nb_line_rejected_tOracleOutput_15 = 0;

    int tmp_batchUpdateCount_tOracleOutput_15 = 0;

    int deletedCount_tOracleOutput_15=0;
    int updatedCount_tOracleOutput_15=0;
    int insertedCount_tOracleOutput_15=0;
    int rowsToCommitCount_tOracleOutput_15=0;
    int rejectedCount_tOracleOutput_15=0;

    boolean whetherReject_tOracleOutput_15 = false;

    java.sql.Connection conn_tOracleOutput_15 = null;

    //optional table
    String dbschema_tOracleOutput_15 = null;
    String tableName_tOracleOutput_15 = null;
                    String driverClass_tOracleOutput_15 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_15);
                String url_tOracleOutput_15 = null;
                    url_tOracleOutput_15 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_15 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_15 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_15 = decryptedPassword_tOracleOutput_15;
                dbschema_tOracleOutput_15 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_15 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_15.put("user",dbUser_tOracleOutput_15);
                    atnParamsPrope_tOracleOutput_15.put("password",dbPwd_tOracleOutput_15);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_15.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_15 = java.sql.DriverManager.getConnection(url_tOracleOutput_15, atnParamsPrope_tOracleOutput_15);
        resourceMap.put("conn_tOracleOutput_15", conn_tOracleOutput_15);
            conn_tOracleOutput_15.setAutoCommit(false);
            int commitEvery_tOracleOutput_15 = 5000;
            int commitCounter_tOracleOutput_15 = 0;
        int batchSize_tOracleOutput_15 = 5000;
        int batchSizeCounter_tOracleOutput_15=0;
        int count_tOracleOutput_15=0;

        if(dbschema_tOracleOutput_15 == null || dbschema_tOracleOutput_15.trim().length() == 0) {
            tableName_tOracleOutput_15 = ("BVAC_METAS");
        } else {
            tableName_tOracleOutput_15 = dbschema_tOracleOutput_15 + "." + ("BVAC_METAS");
        }
                String insert_tOracleOutput_15 = "INSERT INTO " + tableName_tOracleOutput_15 + " (UORG_ID,BIOLOGICO_ID,DOSIS_ID,TIEMPOS_ID,META) VALUES (?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_15 = conn_tOracleOutput_15.prepareStatement(insert_tOracleOutput_15);
                        resourceMap.put("pstmt_tOracleOutput_15", pstmt_tOracleOutput_15);





 



/**
 * [tOracleOutput_15 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) 
					globalMap.get( "tHash_Lookup_row31" ))
					;					
					
	

row31Struct row31HashKey = new row31Struct();
row31Struct row31Default = new row31Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct> tHash_Lookup_row33 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct>) 
					globalMap.get( "tHash_Lookup_row33" ))
					;					
					
	

row33Struct row33HashKey = new row33Struct();
row33Struct row33Default = new row33Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct> tHash_Lookup_row36 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct>) 
					globalMap.get( "tHash_Lookup_row36" ))
					;					
					
	

row36Struct row36HashKey = new row36Struct();
row36Struct row36Default = new row36Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
Actualiza5Struct Actualiza5_tmp = new Actualiza5Struct();
Registra5Struct Registra5_tmp = new Registra5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tOracleInput_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_24", false);
		start_Hash.put("tOracleInput_24", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_24";
	
	
		int tos_count_tOracleInput_24 = 0;
		
	


	
		    int nb_line_tOracleInput_24 = 0;
		    java.sql.Connection conn_tOracleInput_24 = null;
				conn_tOracleInput_24 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_24 = false;
				boolean isConnectionWrapped_tOracleInput_24 = !(conn_tOracleInput_24 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_24.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_24 = null;
                if (isConnectionWrapped_tOracleInput_24) {
					unwrappedOraConn_tOracleInput_24 = conn_tOracleInput_24.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_24 != null) {
                        isTimeZoneNull_tOracleInput_24 = (unwrappedOraConn_tOracleInput_24.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_24 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_24).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_24) {
					java.sql.Statement stmtGetTZ_tOracleInput_24 = conn_tOracleInput_24.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_24 = stmtGetTZ_tOracleInput_24.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_24 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_24.next()) {
						sessionTimezone_tOracleInput_24 = rsGetTZ_tOracleInput_24.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_24 && unwrappedOraConn_tOracleInput_24 != null) {
                        unwrappedOraConn_tOracleInput_24.setSessionTimeZone(sessionTimezone_tOracleInput_24);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_24).setSessionTimeZone(sessionTimezone_tOracleInput_24);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_24 = conn_tOracleInput_24.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_24.setFetchSize(5000);


		    String dbquery_tOracleInput_24 = "SELECT  DATOS.UORG_ID\n          ,DATOS.BIOLOGICOS_ID \n          ,DATOS.TDOSIS_ID AS DOSIS_ID\n          ,ADD_MONTHS(D"
+"ATOS.FINICIAL, DUPLICAR.NIVEL ) AS PERIODO\n          ,SUM( DATOS.META_MENSUAL ) AS META\n  FROM ( \n    SELECT  ME.ID\n"
+"            ,ME.META \n            ,ME.UORG_ID\n            ,ES.BIOLOGICOS_ID\n            ,ET.TDOSIS_ID\n            ,T"
+"RUNC( ME.FINICIAL, 'MONTH') AS FINICIAL\n            ,ME.FINICIAL AS F1\n            ,LAST_DAY ( ME.FFINAL )      AS FFI"
+"NAL\n            ,ME.FFINAL AS F2\n            ,ROUND ( ME.META / ROUND ( MONTHS_BETWEEN ( LAST_DAY ( ME.FFINAL ), TRUNC"
+"( ME.FINICIAL, 'MONTH') ), 0 ),0 ) AS META_MENSUAL\n            ,ROUND ( MONTHS_BETWEEN ( LAST_DAY ( ME.FFINAL ), TRUNC("
+" ME.FINICIAL, 'MONTH') ), 0 )-1 AS MESES_ENTRE  \n    FROM VAC_METASESQUEMAS ME\n    INNER JOIN VAC_ESQUEMAS_TDOSIS ET O"
+"N ET.ID = ME.ESQUEMAS_TDOSIS_ID\n    INNER JOIN VAC_ESQUEMAS ES ON ES.ID = ET.ESQUEMAS_ID\n    INNER JOIN ( \n      SELE"
+"CT ME.UORG_ID\n            ,ES.BIOLOGICOS_ID\n            ,ET.TDOSIS_ID\n      FROM VAC_METASESQUEMAS ME\n      INNER JO"
+"IN VAC_ESQUEMAS_TDOSIS ET ON ET.ID = ME.ESQUEMAS_TDOSIS_ID\n      INNER JOIN VAC_ESQUEMAS ES ON ES.ID = ET.ESQUEMAS_ID\n"
+"      WHERE ( TO_CHAR( ME.FREGISTRO, 'YYYYMM') = '"+context.PERIODO+"' OR TO_CHAR( ME.FACTUALIZACION,'YYYYMM') = '"+context.PERIODO+"' )\n        AND ME.ESTREGISTRO_ID = 1  \n        AND ME.TVACUNA = 'NO PAI'\n    ) FFECHA ON FFECHA.UORG_ID = ME.UORG_I"
+"D AND FFECHA.BIOLOGICOS_ID = ES.BIOLOGICOS_ID AND FFECHA.TDOSIS_ID = ET.TDOSIS_ID\n    WHERE ME.ESTREGISTRO_ID = 1  \n  "
+"    AND ME.TVACUNA = 'NO PAI'\n      AND ME.ESTADO = 'Activo'\n  ) DATOS\n  INNER JOIN ( \n    SELECT LEVEL-1 AS NIVEL\n"
+"    FROM DUAL\n    CONNECT BY LEVEL <= 12\n  ) DUPLICAR ON DUPLICAR.NIVEL < = DATOS.MESES_ENTRE\n  GROUP BY DATOS.UORG_I"
+"D\n          ,DATOS.BIOLOGICOS_ID \n          ,DATOS.TDOSIS_ID\n          ,ADD_MONTHS(DATOS.FINICIAL, DUPLICAR.NIVEL ) ";
		    

		    globalMap.put("tOracleInput_24_QUERY",dbquery_tOracleInput_24);

		    java.sql.ResultSet rs_tOracleInput_24 = null;

		    try {
		    	rs_tOracleInput_24 = stmt_tOracleInput_24.executeQuery(dbquery_tOracleInput_24);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_24 = rs_tOracleInput_24.getMetaData();
		    	int colQtyInRs_tOracleInput_24 = rsmd_tOracleInput_24.getColumnCount();

		    String tmpContent_tOracleInput_24 = null;
		    
		    
		    while (rs_tOracleInput_24.next()) {
		        nb_line_tOracleInput_24++;
		        
							if(colQtyInRs_tOracleInput_24 < 1) {
								row30.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_24.getObject(1) != null) {
						row30.UORG_ID = rs_tOracleInput_24.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_24 < 2) {
								row30.BIOLOGICOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_24.getObject(2) != null) {
						row30.BIOLOGICOS_ID = rs_tOracleInput_24.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_24 < 3) {
								row30.DOSIS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_24.getObject(3) != null) {
						row30.DOSIS_ID = rs_tOracleInput_24.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_24 < 4) {
								row30.PERIODO = null;
							} else {
										
			row30.PERIODO = routines.system.JDBCUtil.getDate(rs_tOracleInput_24, 4);
		                    }
							if(colQtyInRs_tOracleInput_24 < 5) {
								row30.META = null;
							} else {
		                          
					if(rs_tOracleInput_24.getObject(5) != null) {
						row30.META = rs_tOracleInput_24.getBigDecimal(5);
					} else {
				
						row30.META = null;
					}
		                    }
					




 



/**
 * [tOracleInput_24 begin ] stop
 */
	
	/**
	 * [tOracleInput_24 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_24";
	
	

 


	tos_count_tOracleInput_24++;

/**
 * [tOracleInput_24 main ] stop
 */
	
	/**
	 * [tOracleInput_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_24";
	
	

 



/**
 * [tOracleInput_24 process_data_begin ] stop
 */

	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
						row31Struct row31 = null;
					
						row33Struct row33 = null;
					
						row36Struct row36 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_11 = false;
		boolean mainRowRejected_tMap_11 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row31" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow31 = false;
       		  	    	
       		  	    	
 							row31Struct row31ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_11 = false;
								
                        		    		    row31HashKey.FECHA = row30.PERIODO  == null ? null : new java.util.Date((row30.PERIODO ).getTime());
                        		    		

								
		                        	row31HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row31.lookup( row31HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row31.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_11 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row31 != null && tHash_Lookup_row31.getCount(row31HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row31' and it contains more one result from keys :  row31.FECHA = '" + row31HashKey.FECHA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row31Struct fromLookup_row31 = null;
							row31 = row31Default;
										 
							
								 
							
							
								if (tHash_Lookup_row31 !=null && tHash_Lookup_row31.hasNext()) { // G 099
								
							
								
								fromLookup_row31 = tHash_Lookup_row31.next();

							
							
								} // G 099
							
							

							if(fromLookup_row31 != null) {
								row31 = fromLookup_row31;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row33" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow33 = false;
       		  	    	
       		  	    	
 							row33Struct row33ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_11 = false;
								
                        		    		    row33HashKey.UORG_ID = row30.UORG_ID ;
                        		    		
                        		    		    row33HashKey.BIOLOGICO_ID = row30.BIOLOGICOS_ID ;
                        		    		
                        		    		    row33HashKey.DOSIS_ID = row30.DOSIS_ID ;
                        		    		
                        		    		    row33HashKey.TIEMPOS_ID = row31.ID ;
                        		    		

								
		                        	row33HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row33.lookup( row33HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row33Struct fromLookup_row33 = null;
							row33 = row33Default;
										 
							
								 
							
							
								if (tHash_Lookup_row33 !=null && tHash_Lookup_row33.hasNext()) { // G 099
								
							
								
								fromLookup_row33 = tHash_Lookup_row33.next();

							
							
								} // G 099
							
							

							if(fromLookup_row33 != null) {
								row33 = fromLookup_row33;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row36" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow36 = false;
       		  	    	
       		  	    	
 							row36Struct row36ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_11 = false;
								
                        		    		    row36HashKey.UORG_ID = row30.UORG_ID ;
                        		    		
                        		    		    row36HashKey.BIOLOGICO_ID = row30.BIOLOGICOS_ID ;
                        		    		
                        		    		    row36HashKey.DOSIS_ID = row30.DOSIS_ID ;
                        		    		
                        		    		    row36HashKey.TIEMPOS_ID = row31.ID ;
                        		    		
                        		    		    row36HashKey.META = row30.META ;
                        		    		

								
		                        	row36HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row36.lookup( row36HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row36Struct fromLookup_row36 = null;
							row36 = row36Default;
										 
							
								 
							
							
								if (tHash_Lookup_row36 !=null && tHash_Lookup_row36.hasNext()) { // G 099
								
							
								
								fromLookup_row36 = tHash_Lookup_row36.next();

							
							
								} // G 099
							
							

							if(fromLookup_row36 != null) {
								row36 = fromLookup_row36;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

Actualiza5 = null;
Registra5 = null;

if(!rejectedInnerJoin_tMap_11 ) {

// # Output table : 'Actualiza5'
// # Filter conditions 
if( 

row33.UORG_ID != null &&  row36.UORG_ID == null

 ) {
Actualiza5_tmp.UORG_ID = row30.UORG_ID ;
Actualiza5_tmp.BIOLOGICO_ID = row30.BIOLOGICOS_ID ;
Actualiza5_tmp.DOSIS_ID = row30.DOSIS_ID ;
Actualiza5_tmp.TIEMPOS_ID = row31.ID ;
Actualiza5_tmp.META = row30.META ;
Actualiza5 = Actualiza5_tmp;
} // closing filter/reject

// # Output table : 'Registra5'
// # Filter conditions 
if( 

row33.UORG_ID == null

 ) {
Registra5_tmp.UORG_ID = row30.UORG_ID ;
Registra5_tmp.BIOLOGICO_ID = row30.BIOLOGICOS_ID ;
Registra5_tmp.DOSIS_ID = row30.DOSIS_ID ;
Registra5_tmp.TIEMPOS_ID = row31.ID ;
Registra5_tmp.META = row30.META ;
Registra5 = Registra5_tmp;
} // closing filter/reject
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "Actualiza5"
if(Actualiza5 != null) { 



	
	/**
	 * [tOracleOutput_16 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Actualiza5"
						
						);
					}
					



        whetherReject_tOracleOutput_16 = false;
                    pstmt_tOracleOutput_16.setBigDecimal(1, Actualiza5.META);


                    pstmt_tOracleOutput_16.setBigDecimal(2 + count_tOracleOutput_16, Actualiza5.UORG_ID);


                    pstmt_tOracleOutput_16.setBigDecimal(3 + count_tOracleOutput_16, Actualiza5.BIOLOGICO_ID);


                    pstmt_tOracleOutput_16.setBigDecimal(4 + count_tOracleOutput_16, Actualiza5.DOSIS_ID);


                    pstmt_tOracleOutput_16.setBigDecimal(5 + count_tOracleOutput_16, Actualiza5.TIEMPOS_ID);

                pstmt_tOracleOutput_16.addBatch();
                nb_line_tOracleOutput_16++;
                batchSizeCounter_tOracleOutput_16++;
            if (batchSize_tOracleOutput_16 > 0 &&  batchSize_tOracleOutput_16 <= batchSizeCounter_tOracleOutput_16) {
                try {
                    pstmt_tOracleOutput_16.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_16){
globalMap.put("tOracleOutput_16_ERROR_MESSAGE",e_tOracleOutput_16.getMessage());
			        java.sql.SQLException ne_tOracleOutput_16 = e_tOracleOutput_16.getNextException(),sqle_tOracleOutput_16=null;
			    	String errormessage_tOracleOutput_16;
					if (ne_tOracleOutput_16 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_16 = new java.sql.SQLException(e_tOracleOutput_16.getMessage() + "\ncaused by: " + ne_tOracleOutput_16.getMessage(), ne_tOracleOutput_16.getSQLState(), ne_tOracleOutput_16.getErrorCode(), ne_tOracleOutput_16);
						errormessage_tOracleOutput_16 = sqle_tOracleOutput_16.getMessage();
					}else{
						errormessage_tOracleOutput_16 = e_tOracleOutput_16.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_16);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_16 = pstmt_tOracleOutput_16.getUpdateCount();
                    updatedCount_tOracleOutput_16
                += (tmp_batchUpdateCount_tOracleOutput_16!=-1?tmp_batchUpdateCount_tOracleOutput_16:0);
                rowsToCommitCount_tOracleOutput_16 += (tmp_batchUpdateCount_tOracleOutput_16!=-1?tmp_batchUpdateCount_tOracleOutput_16:0);
                batchSizeCounter_tOracleOutput_16 = 0;
            }
                commitCounter_tOracleOutput_16++;
                if(commitEvery_tOracleOutput_16 <= commitCounter_tOracleOutput_16) {
                    if(batchSizeCounter_tOracleOutput_16 > 0) {
                        try {
                            pstmt_tOracleOutput_16.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_16){
globalMap.put("tOracleOutput_16_ERROR_MESSAGE",e_tOracleOutput_16.getMessage());
					        java.sql.SQLException ne_tOracleOutput_16 = e_tOracleOutput_16.getNextException(),sqle_tOracleOutput_16=null;
					    	String errormessage_tOracleOutput_16;
							if (ne_tOracleOutput_16 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_16 = new java.sql.SQLException(e_tOracleOutput_16.getMessage() + "\ncaused by: " + ne_tOracleOutput_16.getMessage(), ne_tOracleOutput_16.getSQLState(), ne_tOracleOutput_16.getErrorCode(), ne_tOracleOutput_16);
								errormessage_tOracleOutput_16 = sqle_tOracleOutput_16.getMessage();
							}else{
								errormessage_tOracleOutput_16 = e_tOracleOutput_16.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_16);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_16 = pstmt_tOracleOutput_16.getUpdateCount();
                            updatedCount_tOracleOutput_16
                        += (tmp_batchUpdateCount_tOracleOutput_16!=-1?tmp_batchUpdateCount_tOracleOutput_16:0);
                        rowsToCommitCount_tOracleOutput_16 += (tmp_batchUpdateCount_tOracleOutput_16!=-1?tmp_batchUpdateCount_tOracleOutput_16:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_16 != 0){
                    	
                    }
                    conn_tOracleOutput_16.commit();
                    if(rowsToCommitCount_tOracleOutput_16 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_16 = 0;
                    }
                    commitCounter_tOracleOutput_16=0;
                    	batchSizeCounter_tOracleOutput_16=0;
                }

 


	tos_count_tOracleOutput_16++;

/**
 * [tOracleOutput_16 main ] stop
 */
	
	/**
	 * [tOracleOutput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	

 



/**
 * [tOracleOutput_16 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	

 



/**
 * [tOracleOutput_16 process_data_end ] stop
 */

} // End of branch "Actualiza5"




// Start of branch "Registra5"
if(Registra5 != null) { 



	
	/**
	 * [tOracleOutput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Registra5"
						
						);
					}
					



        whetherReject_tOracleOutput_15 = false;
                        pstmt_tOracleOutput_15.setBigDecimal(1, Registra5.UORG_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(2, Registra5.BIOLOGICO_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(3, Registra5.DOSIS_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(4, Registra5.TIEMPOS_ID);

                        pstmt_tOracleOutput_15.setBigDecimal(5, Registra5.META);

                pstmt_tOracleOutput_15.addBatch();
                nb_line_tOracleOutput_15++;
                batchSizeCounter_tOracleOutput_15++;
            if (batchSize_tOracleOutput_15 > 0 &&  batchSize_tOracleOutput_15 <= batchSizeCounter_tOracleOutput_15) {
                try {
                    pstmt_tOracleOutput_15.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_15){
globalMap.put("tOracleOutput_15_ERROR_MESSAGE",e_tOracleOutput_15.getMessage());
			        java.sql.SQLException ne_tOracleOutput_15 = e_tOracleOutput_15.getNextException(),sqle_tOracleOutput_15=null;
			    	String errormessage_tOracleOutput_15;
					if (ne_tOracleOutput_15 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_15 = new java.sql.SQLException(e_tOracleOutput_15.getMessage() + "\ncaused by: " + ne_tOracleOutput_15.getMessage(), ne_tOracleOutput_15.getSQLState(), ne_tOracleOutput_15.getErrorCode(), ne_tOracleOutput_15);
						errormessage_tOracleOutput_15 = sqle_tOracleOutput_15.getMessage();
					}else{
						errormessage_tOracleOutput_15 = e_tOracleOutput_15.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_15);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_15 = pstmt_tOracleOutput_15.getUpdateCount();
                    insertedCount_tOracleOutput_15
                += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                rowsToCommitCount_tOracleOutput_15 += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                batchSizeCounter_tOracleOutput_15 = 0;
            }
                commitCounter_tOracleOutput_15++;
                if(commitEvery_tOracleOutput_15 <= commitCounter_tOracleOutput_15) {
                    if(batchSizeCounter_tOracleOutput_15 > 0) {
                        try {
                            pstmt_tOracleOutput_15.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_15){
globalMap.put("tOracleOutput_15_ERROR_MESSAGE",e_tOracleOutput_15.getMessage());
					        java.sql.SQLException ne_tOracleOutput_15 = e_tOracleOutput_15.getNextException(),sqle_tOracleOutput_15=null;
					    	String errormessage_tOracleOutput_15;
							if (ne_tOracleOutput_15 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_15 = new java.sql.SQLException(e_tOracleOutput_15.getMessage() + "\ncaused by: " + ne_tOracleOutput_15.getMessage(), ne_tOracleOutput_15.getSQLState(), ne_tOracleOutput_15.getErrorCode(), ne_tOracleOutput_15);
								errormessage_tOracleOutput_15 = sqle_tOracleOutput_15.getMessage();
							}else{
								errormessage_tOracleOutput_15 = e_tOracleOutput_15.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_15);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_15 = pstmt_tOracleOutput_15.getUpdateCount();
                            insertedCount_tOracleOutput_15
                        += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                        rowsToCommitCount_tOracleOutput_15 += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_15 != 0){
                    	
                    }
                    conn_tOracleOutput_15.commit();
                    if(rowsToCommitCount_tOracleOutput_15 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_15 = 0;
                    }
                    commitCounter_tOracleOutput_15=0;
                    	batchSizeCounter_tOracleOutput_15=0;
                }

 


	tos_count_tOracleOutput_15++;

/**
 * [tOracleOutput_15 main ] stop
 */
	
	/**
	 * [tOracleOutput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	

 



/**
 * [tOracleOutput_15 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	

 



/**
 * [tOracleOutput_15 process_data_end ] stop
 */

} // End of branch "Registra5"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_24";
	
	

 



/**
 * [tOracleInput_24 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_24 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_24";
	
	

}
}finally{
	if (rs_tOracleInput_24 != null) {
		rs_tOracleInput_24.close();
	}
	if (stmt_tOracleInput_24 != null) {
		stmt_tOracleInput_24.close();
	}
}

globalMap.put("tOracleInput_24_NB_LINE",nb_line_tOracleInput_24);
 

ok_Hash.put("tOracleInput_24", true);
end_Hash.put("tOracleInput_24", System.currentTimeMillis());




/**
 * [tOracleInput_24 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row31 != null) {
						tHash_Lookup_row31.endGet();
					}
					globalMap.remove( "tHash_Lookup_row31" );

					
					
				
					if(tHash_Lookup_row33 != null) {
						tHash_Lookup_row33.endGet();
					}
					globalMap.remove( "tHash_Lookup_row33" );

					
					
				
					if(tHash_Lookup_row36 != null) {
						tHash_Lookup_row36.endGet();
					}
					globalMap.remove( "tHash_Lookup_row36" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tOracleOutput_16 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_16 > 0) {
            try {
            	if (pstmt_tOracleOutput_16 != null) {
					
					pstmt_tOracleOutput_16.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_16){
globalMap.put("tOracleOutput_16_ERROR_MESSAGE",e_tOracleOutput_16.getMessage());
		        java.sql.SQLException ne_tOracleOutput_16 = e_tOracleOutput_16.getNextException(),sqle_tOracleOutput_16=null;
		    	String errormessage_tOracleOutput_16;
				if (ne_tOracleOutput_16 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_16 = new java.sql.SQLException(e_tOracleOutput_16.getMessage() + "\ncaused by: " + ne_tOracleOutput_16.getMessage(), ne_tOracleOutput_16.getSQLState(), ne_tOracleOutput_16.getErrorCode(), ne_tOracleOutput_16);
					errormessage_tOracleOutput_16 = sqle_tOracleOutput_16.getMessage();
				}else{
					errormessage_tOracleOutput_16 = e_tOracleOutput_16.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_16);
            	
        	}
        	if (pstmt_tOracleOutput_16 != null) {
            	tmp_batchUpdateCount_tOracleOutput_16 = pstmt_tOracleOutput_16.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_16
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_16!=-1?tmp_batchUpdateCount_tOracleOutput_16:0);
				rowsToCommitCount_tOracleOutput_16 += (tmp_batchUpdateCount_tOracleOutput_16!=-1?tmp_batchUpdateCount_tOracleOutput_16:0);
            }
        }
        if(pstmt_tOracleOutput_16 != null) {
			
				pstmt_tOracleOutput_16.close();
				resourceMap.remove("pstmt_tOracleOutput_16");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_16", true);
		if(commitCounter_tOracleOutput_16 > 0 && rowsToCommitCount_tOracleOutput_16 != 0) {
			
		}
		conn_tOracleOutput_16.commit();
		if(commitCounter_tOracleOutput_16 > 0 && rowsToCommitCount_tOracleOutput_16 != 0) {
			
			rowsToCommitCount_tOracleOutput_16 = 0;
		}
		commitCounter_tOracleOutput_16 = 0;
		
		
		conn_tOracleOutput_16 .close();
		
		resourceMap.put("finish_tOracleOutput_16", true);
   	

	
	nb_line_deleted_tOracleOutput_16=nb_line_deleted_tOracleOutput_16+ deletedCount_tOracleOutput_16;
	nb_line_update_tOracleOutput_16=nb_line_update_tOracleOutput_16 + updatedCount_tOracleOutput_16;
	nb_line_inserted_tOracleOutput_16=nb_line_inserted_tOracleOutput_16 + insertedCount_tOracleOutput_16;
	nb_line_rejected_tOracleOutput_16=nb_line_rejected_tOracleOutput_16 + rejectedCount_tOracleOutput_16;
	
        globalMap.put("tOracleOutput_16_NB_LINE",nb_line_tOracleOutput_16);
        globalMap.put("tOracleOutput_16_NB_LINE_UPDATED",nb_line_update_tOracleOutput_16);
        globalMap.put("tOracleOutput_16_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_16);
        globalMap.put("tOracleOutput_16_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_16);
        globalMap.put("tOracleOutput_16_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_16);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Actualiza5");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_16", true);
end_Hash.put("tOracleOutput_16", System.currentTimeMillis());




/**
 * [tOracleOutput_16 end ] stop
 */




	
	/**
	 * [tOracleOutput_15 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_15 > 0) {
            try {
            	if (pstmt_tOracleOutput_15 != null) {
					
					pstmt_tOracleOutput_15.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_15){
globalMap.put("tOracleOutput_15_ERROR_MESSAGE",e_tOracleOutput_15.getMessage());
		        java.sql.SQLException ne_tOracleOutput_15 = e_tOracleOutput_15.getNextException(),sqle_tOracleOutput_15=null;
		    	String errormessage_tOracleOutput_15;
				if (ne_tOracleOutput_15 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_15 = new java.sql.SQLException(e_tOracleOutput_15.getMessage() + "\ncaused by: " + ne_tOracleOutput_15.getMessage(), ne_tOracleOutput_15.getSQLState(), ne_tOracleOutput_15.getErrorCode(), ne_tOracleOutput_15);
					errormessage_tOracleOutput_15 = sqle_tOracleOutput_15.getMessage();
				}else{
					errormessage_tOracleOutput_15 = e_tOracleOutput_15.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_15);
            	
        	}
        	if (pstmt_tOracleOutput_15 != null) {
            	tmp_batchUpdateCount_tOracleOutput_15 = pstmt_tOracleOutput_15.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_15
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
				rowsToCommitCount_tOracleOutput_15 += (tmp_batchUpdateCount_tOracleOutput_15!=-1?tmp_batchUpdateCount_tOracleOutput_15:0);
            }
        }
        if(pstmt_tOracleOutput_15 != null) {
			
				pstmt_tOracleOutput_15.close();
				resourceMap.remove("pstmt_tOracleOutput_15");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_15", true);
		if(commitCounter_tOracleOutput_15 > 0 && rowsToCommitCount_tOracleOutput_15 != 0) {
			
		}
		conn_tOracleOutput_15.commit();
		if(commitCounter_tOracleOutput_15 > 0 && rowsToCommitCount_tOracleOutput_15 != 0) {
			
			rowsToCommitCount_tOracleOutput_15 = 0;
		}
		commitCounter_tOracleOutput_15 = 0;
		
		
		conn_tOracleOutput_15 .close();
		
		resourceMap.put("finish_tOracleOutput_15", true);
   	

	
	nb_line_deleted_tOracleOutput_15=nb_line_deleted_tOracleOutput_15+ deletedCount_tOracleOutput_15;
	nb_line_update_tOracleOutput_15=nb_line_update_tOracleOutput_15 + updatedCount_tOracleOutput_15;
	nb_line_inserted_tOracleOutput_15=nb_line_inserted_tOracleOutput_15 + insertedCount_tOracleOutput_15;
	nb_line_rejected_tOracleOutput_15=nb_line_rejected_tOracleOutput_15 + rejectedCount_tOracleOutput_15;
	
        globalMap.put("tOracleOutput_15_NB_LINE",nb_line_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_UPDATED",nb_line_update_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_15);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Registra5");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_15", true);
end_Hash.put("tOracleOutput_15", System.currentTimeMillis());




/**
 * [tOracleOutput_15 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_11"
					     			globalMap.remove("tHash_Lookup_row31"); 
				     			
					     			//free memory for "tMap_11"
					     			globalMap.remove("tHash_Lookup_row33"); 
				     			
					     			//free memory for "tMap_11"
					     			globalMap.remove("tHash_Lookup_row36"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_24 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_24";
	
	

 



/**
 * [tOracleInput_24 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tOracleOutput_16 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_16") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_16 = null;
                if ((pstmtToClose_tOracleOutput_16 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_16")) != null) {
                    pstmtToClose_tOracleOutput_16.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_16") == null){
            java.sql.Connection ctn_tOracleOutput_16 = null;
            if((ctn_tOracleOutput_16 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_16")) != null){
                try {
                    ctn_tOracleOutput_16.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_16) {
                    String errorMessage_tOracleOutput_16 = "failed to close the connection in tOracleOutput_16 :" + sqlEx_tOracleOutput_16.getMessage();
                    System.err.println(errorMessage_tOracleOutput_16);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_16 finally ] stop
 */




	
	/**
	 * [tOracleOutput_15 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_15") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_15 = null;
                if ((pstmtToClose_tOracleOutput_15 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_15")) != null) {
                    pstmtToClose_tOracleOutput_15.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_15") == null){
            java.sql.Connection ctn_tOracleOutput_15 = null;
            if((ctn_tOracleOutput_15 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_15")) != null){
                try {
                    ctn_tOracleOutput_15.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_15) {
                    String errorMessage_tOracleOutput_15 = "failed to close the connection in tOracleOutput_15 :" + sqlEx_tOracleOutput_15.getMessage();
                    System.err.println(errorMessage_tOracleOutput_15);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_15 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_24_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE_PRODUCTO;

				public String getNOMBRE_PRODUCTO () {
					return this.NOMBRE_PRODUCTO;
				}

				public Boolean NOMBRE_PRODUCTOIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_PRODUCTOIsKey(){
				    return false;
				}
				public Integer NOMBRE_PRODUCTOLength(){
				    return null;
				}
				public Integer NOMBRE_PRODUCTOPrecision(){
				    return null;
				}
				public String NOMBRE_PRODUCTODefault(){
				
					return null;
				
				}
				public String NOMBRE_PRODUCTOComment(){
				
				    return "";
				
				}
				public String NOMBRE_PRODUCTOPattern(){
				
					return "";
				
				}
				public String NOMBRE_PRODUCTOOriginalDbColumnName(){
				
					return "NOMBRE_PRODUCTO";
				
				}

				
			    public String NOMBRE_CUPS;

				public String getNOMBRE_CUPS () {
					return this.NOMBRE_CUPS;
				}

				public Boolean NOMBRE_CUPSIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_CUPSIsKey(){
				    return false;
				}
				public Integer NOMBRE_CUPSLength(){
				    return null;
				}
				public Integer NOMBRE_CUPSPrecision(){
				    return null;
				}
				public String NOMBRE_CUPSDefault(){
				
					return null;
				
				}
				public String NOMBRE_CUPSComment(){
				
				    return "";
				
				}
				public String NOMBRE_CUPSPattern(){
				
					return "";
				
				}
				public String NOMBRE_CUPSOriginalDbColumnName(){
				
					return "NOMBRE_CUPS";
				
				}

				
			    public String TESQUEMA;

				public String getTESQUEMA () {
					return this.TESQUEMA;
				}

				public Boolean TESQUEMAIsNullable(){
				    return true;
				}
				public Boolean TESQUEMAIsKey(){
				    return false;
				}
				public Integer TESQUEMALength(){
				    return null;
				}
				public Integer TESQUEMAPrecision(){
				    return null;
				}
				public String TESQUEMADefault(){
				
					return null;
				
				}
				public String TESQUEMAComment(){
				
				    return "";
				
				}
				public String TESQUEMAPattern(){
				
					return "";
				
				}
				public String TESQUEMAOriginalDbColumnName(){
				
					return "TESQUEMA";
				
				}

				
			    public BigDecimal TIEMPO_DOSIS;

				public BigDecimal getTIEMPO_DOSIS () {
					return this.TIEMPO_DOSIS;
				}

				public Boolean TIEMPO_DOSISIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_DOSISIsKey(){
				    return false;
				}
				public Integer TIEMPO_DOSISLength(){
				    return null;
				}
				public Integer TIEMPO_DOSISPrecision(){
				    return null;
				}
				public String TIEMPO_DOSISDefault(){
				
					return "";
				
				}
				public String TIEMPO_DOSISComment(){
				
				    return "";
				
				}
				public String TIEMPO_DOSISPattern(){
				
					return "";
				
				}
				public String TIEMPO_DOSISOriginalDbColumnName(){
				
					return "TIEMPO_DOSIS";
				
				}

				
			    public BigDecimal EDADMINIMA;

				public BigDecimal getEDADMINIMA () {
					return this.EDADMINIMA;
				}

				public Boolean EDADMINIMAIsNullable(){
				    return true;
				}
				public Boolean EDADMINIMAIsKey(){
				    return false;
				}
				public Integer EDADMINIMALength(){
				    return null;
				}
				public Integer EDADMINIMAPrecision(){
				    return null;
				}
				public String EDADMINIMADefault(){
				
					return "";
				
				}
				public String EDADMINIMAComment(){
				
				    return "";
				
				}
				public String EDADMINIMAPattern(){
				
					return "";
				
				}
				public String EDADMINIMAOriginalDbColumnName(){
				
					return "EDADMINIMA";
				
				}

				
			    public BigDecimal EDADMAXIMA;

				public BigDecimal getEDADMAXIMA () {
					return this.EDADMAXIMA;
				}

				public Boolean EDADMAXIMAIsNullable(){
				    return true;
				}
				public Boolean EDADMAXIMAIsKey(){
				    return false;
				}
				public Integer EDADMAXIMALength(){
				    return null;
				}
				public Integer EDADMAXIMAPrecision(){
				    return null;
				}
				public String EDADMAXIMADefault(){
				
					return "";
				
				}
				public String EDADMAXIMAComment(){
				
				    return "";
				
				}
				public String EDADMAXIMAPattern(){
				
					return "";
				
				}
				public String EDADMAXIMAOriginalDbColumnName(){
				
					return "EDADMAXIMA";
				
				}

				
			    public String RJERINGA;

				public String getRJERINGA () {
					return this.RJERINGA;
				}

				public Boolean RJERINGAIsNullable(){
				    return true;
				}
				public Boolean RJERINGAIsKey(){
				    return false;
				}
				public Integer RJERINGALength(){
				    return null;
				}
				public Integer RJERINGAPrecision(){
				    return null;
				}
				public String RJERINGADefault(){
				
					return null;
				
				}
				public String RJERINGAComment(){
				
				    return "";
				
				}
				public String RJERINGAPattern(){
				
					return "";
				
				}
				public String RJERINGAOriginalDbColumnName(){
				
					return "RJERINGA";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return null;
				}
				public Integer OBSERVACIONESPrecision(){
				    return null;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
						result = prime * result + ((this.NOMBRE_PRODUCTO == null) ? 0 : this.NOMBRE_PRODUCTO.hashCode());
					
						result = prime * result + ((this.NOMBRE_CUPS == null) ? 0 : this.NOMBRE_CUPS.hashCode());
					
						result = prime * result + ((this.TESQUEMA == null) ? 0 : this.TESQUEMA.hashCode());
					
						result = prime * result + ((this.TIEMPO_DOSIS == null) ? 0 : this.TIEMPO_DOSIS.hashCode());
					
						result = prime * result + ((this.EDADMINIMA == null) ? 0 : this.EDADMINIMA.hashCode());
					
						result = prime * result + ((this.EDADMAXIMA == null) ? 0 : this.EDADMAXIMA.hashCode());
					
						result = prime * result + ((this.RJERINGA == null) ? 0 : this.RJERINGA.hashCode());
					
						result = prime * result + ((this.OBSERVACIONES == null) ? 0 : this.OBSERVACIONES.hashCode());
					
						result = prime * result + ((this.ESTADO == null) ? 0 : this.ESTADO.hashCode());
					
						result = prime * result + ((this.ESTREGISTRO_ID == null) ? 0 : this.ESTREGISTRO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					
						if (this.NOMBRE_PRODUCTO == null) {
							if (other.NOMBRE_PRODUCTO != null)
								return false;
						
						} else if (!this.NOMBRE_PRODUCTO.equals(other.NOMBRE_PRODUCTO))
						
							return false;
					
						if (this.NOMBRE_CUPS == null) {
							if (other.NOMBRE_CUPS != null)
								return false;
						
						} else if (!this.NOMBRE_CUPS.equals(other.NOMBRE_CUPS))
						
							return false;
					
						if (this.TESQUEMA == null) {
							if (other.TESQUEMA != null)
								return false;
						
						} else if (!this.TESQUEMA.equals(other.TESQUEMA))
						
							return false;
					
						if (this.TIEMPO_DOSIS == null) {
							if (other.TIEMPO_DOSIS != null)
								return false;
						
						} else if (!this.TIEMPO_DOSIS.equals(other.TIEMPO_DOSIS))
						
							return false;
					
						if (this.EDADMINIMA == null) {
							if (other.EDADMINIMA != null)
								return false;
						
						} else if (!this.EDADMINIMA.equals(other.EDADMINIMA))
						
							return false;
					
						if (this.EDADMAXIMA == null) {
							if (other.EDADMAXIMA != null)
								return false;
						
						} else if (!this.EDADMAXIMA.equals(other.EDADMAXIMA))
						
							return false;
					
						if (this.RJERINGA == null) {
							if (other.RJERINGA != null)
								return false;
						
						} else if (!this.RJERINGA.equals(other.RJERINGA))
						
							return false;
					
						if (this.OBSERVACIONES == null) {
							if (other.OBSERVACIONES != null)
								return false;
						
						} else if (!this.OBSERVACIONES.equals(other.OBSERVACIONES))
						
							return false;
					
						if (this.ESTADO == null) {
							if (other.ESTADO != null)
								return false;
						
						} else if (!this.ESTADO.equals(other.ESTADO))
						
							return false;
					
						if (this.ESTREGISTRO_ID == null) {
							if (other.ESTREGISTRO_ID != null)
								return false;
						
						} else if (!this.ESTREGISTRO_ID.equals(other.ESTREGISTRO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.ID = this.ID;
	            other.NOMBRE_PRODUCTO = this.NOMBRE_PRODUCTO;
	            other.NOMBRE_CUPS = this.NOMBRE_CUPS;
	            other.TESQUEMA = this.TESQUEMA;
	            other.TIEMPO_DOSIS = this.TIEMPO_DOSIS;
	            other.EDADMINIMA = this.EDADMINIMA;
	            other.EDADMAXIMA = this.EDADMAXIMA;
	            other.RJERINGA = this.RJERINGA;
	            other.OBSERVACIONES = this.OBSERVACIONES;
	            other.ESTADO = this.ESTADO;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.ID = this.ID;
	            	other.NOMBRE_PRODUCTO = this.NOMBRE_PRODUCTO;
	            	other.NOMBRE_CUPS = this.NOMBRE_CUPS;
	            	other.TESQUEMA = this.TESQUEMA;
	            	other.TIEMPO_DOSIS = this.TIEMPO_DOSIS;
	            	other.EDADMINIMA = this.EDADMINIMA;
	            	other.EDADMAXIMA = this.EDADMAXIMA;
	            	other.RJERINGA = this.RJERINGA;
	            	other.OBSERVACIONES = this.OBSERVACIONES;
	            	other.ESTADO = this.ESTADO;
	            	other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE_PRODUCTO = readString(dis);
					
					this.NOMBRE_CUPS = readString(dis);
					
					this.TESQUEMA = readString(dis);
					
						this.TIEMPO_DOSIS = (BigDecimal) dis.readObject();
					
						this.EDADMINIMA = (BigDecimal) dis.readObject();
					
						this.EDADMAXIMA = (BigDecimal) dis.readObject();
					
					this.RJERINGA = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE_PRODUCTO = readString(dis);
					
					this.NOMBRE_CUPS = readString(dis);
					
					this.TESQUEMA = readString(dis);
					
						this.TIEMPO_DOSIS = (BigDecimal) dis.readObject();
					
						this.EDADMINIMA = (BigDecimal) dis.readObject();
					
						this.EDADMAXIMA = (BigDecimal) dis.readObject();
					
					this.RJERINGA = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE_PRODUCTO,dos);
					
					// String
				
						writeString(this.NOMBRE_CUPS,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_DOSIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDADMINIMA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDADMAXIMA);
					
					// String
				
						writeString(this.RJERINGA,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE_PRODUCTO,dos);
					
					// String
				
						writeString(this.NOMBRE_CUPS,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_DOSIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDADMINIMA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDADMAXIMA);
					
					// String
				
						writeString(this.RJERINGA,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE_PRODUCTO="+NOMBRE_PRODUCTO);
		sb.append(",NOMBRE_CUPS="+NOMBRE_CUPS);
		sb.append(",TESQUEMA="+TESQUEMA);
		sb.append(",TIEMPO_DOSIS="+String.valueOf(TIEMPO_DOSIS));
		sb.append(",EDADMINIMA="+String.valueOf(EDADMINIMA));
		sb.append(",EDADMAXIMA="+String.valueOf(EDADMAXIMA));
		sb.append(",RJERINGA="+RJERINGA);
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NOMBRE_PRODUCTO, other.NOMBRE_PRODUCTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NOMBRE_CUPS, other.NOMBRE_CUPS);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TESQUEMA, other.TESQUEMA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPO_DOSIS, other.TIEMPO_DOSIS);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.EDADMINIMA, other.EDADMINIMA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.EDADMAXIMA, other.EDADMAXIMA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.RJERINGA, other.RJERINGA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.OBSERVACIONES, other.OBSERVACIONES);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ESTADO, other.ESTADO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ESTREGISTRO_ID, other.ESTREGISTRO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tOracleInput_2 - inputs:(after_tOracleInput_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3) outputs:(inserta,actualiza)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_2.setFetchSize(10000);


		    String dbquery_tOracleInput_2 = "SELECT  ID \n        ,NOMBRE_PRODUCTO\n        ,NOMBRE_CUPS\n        ,TESQUEMA\n        ,TIEMPO_DOSIS\n        ,EDADMIN"
+"IMA\n        ,EDADMAXIMA\n        ,RJERINGA        \n        ,OBSERVACIONES\n        ,ESTADO\n        ,ESTREGISTRO_ID\nF"
+"ROM BVAC_BIOLOGICOS";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row2.ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row2.ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row2.NOMBRE_PRODUCTO = null;
							} else {
	                         		
        	row2.NOMBRE_PRODUCTO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row2.NOMBRE_CUPS = null;
							} else {
	                         		
        	row2.NOMBRE_CUPS = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 4) {
								row2.TESQUEMA = null;
							} else {
	                         		
        	row2.TESQUEMA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 5) {
								row2.TIEMPO_DOSIS = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(5) != null) {
						row2.TIEMPO_DOSIS = rs_tOracleInput_2.getBigDecimal(5);
					} else {
				
						row2.TIEMPO_DOSIS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 6) {
								row2.EDADMINIMA = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(6) != null) {
						row2.EDADMINIMA = rs_tOracleInput_2.getBigDecimal(6);
					} else {
				
						row2.EDADMINIMA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 7) {
								row2.EDADMAXIMA = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(7) != null) {
						row2.EDADMAXIMA = rs_tOracleInput_2.getBigDecimal(7);
					} else {
				
						row2.EDADMAXIMA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 8) {
								row2.RJERINGA = null;
							} else {
	                         		
        	row2.RJERINGA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 9) {
								row2.OBSERVACIONES = null;
							} else {
	                         		
        	row2.OBSERVACIONES = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 10) {
								row2.ESTADO = null;
							} else {
	                         		
        	row2.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 11) {
								row2.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(11) != null) {
						row2.ESTREGISTRO_ID = rs_tOracleInput_2.getBigDecimal(11);
					} else {
				
						row2.ESTREGISTRO_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.ID = row2.ID;
				
				row2_HashRow.NOMBRE_PRODUCTO = row2.NOMBRE_PRODUCTO;
				
				row2_HashRow.NOMBRE_CUPS = row2.NOMBRE_CUPS;
				
				row2_HashRow.TESQUEMA = row2.TESQUEMA;
				
				row2_HashRow.TIEMPO_DOSIS = row2.TIEMPO_DOSIS;
				
				row2_HashRow.EDADMINIMA = row2.EDADMINIMA;
				
				row2_HashRow.EDADMAXIMA = row2.EDADMAXIMA;
				
				row2_HashRow.RJERINGA = row2.RJERINGA;
				
				row2_HashRow.OBSERVACIONES = row2.OBSERVACIONES;
				
				row2_HashRow.ESTADO = row2.ESTADO;
				
				row2_HashRow.ESTREGISTRO_ID = row2.ESTREGISTRO_ID;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.ID = this.ID;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.ID = this.ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tOracleInput_3 - inputs:(after_tOracleInput_1) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3) outputs:(inserta,actualiza)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_3.setFetchSize(10000);


		    String dbquery_tOracleInput_3 = "SELECT  ID \nFROM BVAC_BIOLOGICOS";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row3.ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row3.ID = rs_tOracleInput_3.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.ID = row3.ID;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

tHash_Lookup_row3.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return null;
				}
				public Integer NOMBREPrecision(){
				    return null;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
						result = prime * result + ((this.NOMBRE == null) ? 0 : this.NOMBRE.hashCode());
					
						result = prime * result + ((this.ESTADO == null) ? 0 : this.ESTADO.hashCode());
					
						result = prime * result + ((this.ESTREGISTRO_ID == null) ? 0 : this.ESTREGISTRO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					
						if (this.NOMBRE == null) {
							if (other.NOMBRE != null)
								return false;
						
						} else if (!this.NOMBRE.equals(other.NOMBRE))
						
							return false;
					
						if (this.ESTADO == null) {
							if (other.ESTADO != null)
								return false;
						
						} else if (!this.ESTADO.equals(other.ESTADO))
						
							return false;
					
						if (this.ESTREGISTRO_ID == null) {
							if (other.ESTREGISTRO_ID != null)
								return false;
						
						} else if (!this.ESTREGISTRO_ID.equals(other.ESTREGISTRO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.ESTADO = this.ESTADO;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.ID = this.ID;
	            	other.NOMBRE = this.NOMBRE;
	            	other.ESTADO = this.ESTADO;
	            	other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NOMBRE, other.NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ESTADO, other.ESTADO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ESTREGISTRO_ID, other.ESTREGISTRO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tAdvancedHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row5", false);
		start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tAdvancedHash_row5 = 0;
		

			   		// connection name:row5
			   		// source node:tOracleInput_5 - inputs:(after_tOracleInput_4) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
			   		// linked node: tMap_2 - inputs:(row4,row5,row6) outputs:(Inserta1,actualiza1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row5Struct>getLookup(matchingModeEnum_row5);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row5 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_5.setFetchSize(1000);


		    String dbquery_tOracleInput_5 = "SELECT  ID\n        ,NOMBRE\n        ,ESTADO\n        ,ESTREGISTRO_ID\nFROM BVAC_DOSIS";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row5.ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row5.ID = rs_tOracleInput_5.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row5.NOMBRE = null;
							} else {
	                         		
        	row5.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 3) {
								row5.ESTADO = null;
							} else {
	                         		
        	row5.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 4) {
								row5.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(4) != null) {
						row5.ESTREGISTRO_ID = rs_tOracleInput_5.getBigDecimal(4);
					} else {
				
						row5.ESTREGISTRO_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					


			   
			   

					row5Struct row5_HashRow = new row5Struct();
		   	   	   
				
				row5_HashRow.ID = row5.ID;
				
				row5_HashRow.NOMBRE = row5.NOMBRE;
				
				row5_HashRow.ESTADO = row5.ESTADO;
				
				row5_HashRow.ESTREGISTRO_ID = row5.ESTREGISTRO_ID;
				
			tHash_Lookup_row5.put(row5_HashRow);
			
            




 


	tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	

 



/**
 * [tAdvancedHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	

 



/**
 * [tAdvancedHash_row5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	

tHash_Lookup_row5.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row5", true);
end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());




/**
 * [tAdvancedHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	

 



/**
 * [tAdvancedHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.ID = this.ID;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.ID = this.ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tOracleInput_7 - inputs:(after_tOracleInput_4) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_2 - inputs:(row4,row5,row6) outputs:(Inserta1,actualiza1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tOracleInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_7", false);
		start_Hash.put("tOracleInput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_7";
	
	
		int tos_count_tOracleInput_7 = 0;
		
	


	
		    int nb_line_tOracleInput_7 = 0;
		    java.sql.Connection conn_tOracleInput_7 = null;
				conn_tOracleInput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_7 = false;
				boolean isConnectionWrapped_tOracleInput_7 = !(conn_tOracleInput_7 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_7.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_7 = null;
                if (isConnectionWrapped_tOracleInput_7) {
					unwrappedOraConn_tOracleInput_7 = conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_7 != null) {
                        isTimeZoneNull_tOracleInput_7 = (unwrappedOraConn_tOracleInput_7.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_7 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_7).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_7) {
					java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_7 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_7.next()) {
						sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_7 && unwrappedOraConn_tOracleInput_7 != null) {
                        unwrappedOraConn_tOracleInput_7.setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_7).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_7.setFetchSize(1000);


		    String dbquery_tOracleInput_7 = "SELECT  ID\nFROM BVAC_DOSIS";
		    

		    globalMap.put("tOracleInput_7_QUERY",dbquery_tOracleInput_7);

		    java.sql.ResultSet rs_tOracleInput_7 = null;

		    try {
		    	rs_tOracleInput_7 = stmt_tOracleInput_7.executeQuery(dbquery_tOracleInput_7);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7.getMetaData();
		    	int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7.getColumnCount();

		    String tmpContent_tOracleInput_7 = null;
		    
		    
		    while (rs_tOracleInput_7.next()) {
		        nb_line_tOracleInput_7++;
		        
							if(colQtyInRs_tOracleInput_7 < 1) {
								row6.ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(1) != null) {
						row6.ID = rs_tOracleInput_7.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_7 begin ] stop
 */
	
	/**
	 * [tOracleInput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 


	tos_count_tOracleInput_7++;

/**
 * [tOracleInput_7 main ] stop
 */
	
	/**
	 * [tOracleInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.ID = row6.ID;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

}
}finally{
	if (rs_tOracleInput_7 != null) {
		rs_tOracleInput_7.close();
	}
	if (stmt_tOracleInput_7 != null) {
		stmt_tOracleInput_7.close();
	}
}

globalMap.put("tOracleInput_7_NB_LINE",nb_line_tOracleInput_7);
 

ok_Hash.put("tOracleInput_7", true);
end_Hash.put("tOracleInput_7", System.currentTimeMillis());




/**
 * [tOracleInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return null;
				}
				public Integer NOMBREPrecision(){
				    return null;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal EDAD_MINIMA;

				public BigDecimal getEDAD_MINIMA () {
					return this.EDAD_MINIMA;
				}

				public Boolean EDAD_MINIMAIsNullable(){
				    return true;
				}
				public Boolean EDAD_MINIMAIsKey(){
				    return false;
				}
				public Integer EDAD_MINIMALength(){
				    return null;
				}
				public Integer EDAD_MINIMAPrecision(){
				    return null;
				}
				public String EDAD_MINIMADefault(){
				
					return "";
				
				}
				public String EDAD_MINIMAComment(){
				
				    return "";
				
				}
				public String EDAD_MINIMAPattern(){
				
					return "";
				
				}
				public String EDAD_MINIMAOriginalDbColumnName(){
				
					return "EDAD_MINIMA";
				
				}

				
			    public BigDecimal EDAD_MAXIMA;

				public BigDecimal getEDAD_MAXIMA () {
					return this.EDAD_MAXIMA;
				}

				public Boolean EDAD_MAXIMAIsNullable(){
				    return true;
				}
				public Boolean EDAD_MAXIMAIsKey(){
				    return false;
				}
				public Integer EDAD_MAXIMALength(){
				    return null;
				}
				public Integer EDAD_MAXIMAPrecision(){
				    return null;
				}
				public String EDAD_MAXIMADefault(){
				
					return "";
				
				}
				public String EDAD_MAXIMAComment(){
				
				    return "";
				
				}
				public String EDAD_MAXIMAPattern(){
				
					return "";
				
				}
				public String EDAD_MAXIMAOriginalDbColumnName(){
				
					return "EDAD_MAXIMA";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
						result = prime * result + ((this.NOMBRE == null) ? 0 : this.NOMBRE.hashCode());
					
						result = prime * result + ((this.EDAD_MINIMA == null) ? 0 : this.EDAD_MINIMA.hashCode());
					
						result = prime * result + ((this.EDAD_MAXIMA == null) ? 0 : this.EDAD_MAXIMA.hashCode());
					
						result = prime * result + ((this.ESTADO == null) ? 0 : this.ESTADO.hashCode());
					
						result = prime * result + ((this.ESTREGISTRO_ID == null) ? 0 : this.ESTREGISTRO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					
						if (this.NOMBRE == null) {
							if (other.NOMBRE != null)
								return false;
						
						} else if (!this.NOMBRE.equals(other.NOMBRE))
						
							return false;
					
						if (this.EDAD_MINIMA == null) {
							if (other.EDAD_MINIMA != null)
								return false;
						
						} else if (!this.EDAD_MINIMA.equals(other.EDAD_MINIMA))
						
							return false;
					
						if (this.EDAD_MAXIMA == null) {
							if (other.EDAD_MAXIMA != null)
								return false;
						
						} else if (!this.EDAD_MAXIMA.equals(other.EDAD_MAXIMA))
						
							return false;
					
						if (this.ESTADO == null) {
							if (other.ESTADO != null)
								return false;
						
						} else if (!this.ESTADO.equals(other.ESTADO))
						
							return false;
					
						if (this.ESTREGISTRO_ID == null) {
							if (other.ESTREGISTRO_ID != null)
								return false;
						
						} else if (!this.ESTREGISTRO_ID.equals(other.ESTREGISTRO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.EDAD_MINIMA = this.EDAD_MINIMA;
	            other.EDAD_MAXIMA = this.EDAD_MAXIMA;
	            other.ESTADO = this.ESTADO;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.ID = this.ID;
	            	other.NOMBRE = this.NOMBRE;
	            	other.EDAD_MINIMA = this.EDAD_MINIMA;
	            	other.EDAD_MAXIMA = this.EDAD_MAXIMA;
	            	other.ESTADO = this.ESTADO;
	            	other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.EDAD_MINIMA = (BigDecimal) dis.readObject();
					
						this.EDAD_MAXIMA = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.EDAD_MINIMA = (BigDecimal) dis.readObject();
					
						this.EDAD_MAXIMA = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_MINIMA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD_MAXIMA);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_MINIMA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD_MAXIMA);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",EDAD_MINIMA="+String.valueOf(EDAD_MINIMA));
		sb.append(",EDAD_MAXIMA="+String.valueOf(EDAD_MAXIMA));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NOMBRE, other.NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.EDAD_MINIMA, other.EDAD_MINIMA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.EDAD_MAXIMA, other.EDAD_MAXIMA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ESTADO, other.ESTADO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ESTREGISTRO_ID, other.ESTREGISTRO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tOracleInput_8 - inputs:(after_tOracleInput_6) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_3 - inputs:(row7,row8,row9) outputs:(Inserta2,Actualiza2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tOracleInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_8", false);
		start_Hash.put("tOracleInput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_8";
	
	
		int tos_count_tOracleInput_8 = 0;
		
	


	
		    int nb_line_tOracleInput_8 = 0;
		    java.sql.Connection conn_tOracleInput_8 = null;
				conn_tOracleInput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_8 = false;
				boolean isConnectionWrapped_tOracleInput_8 = !(conn_tOracleInput_8 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_8.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_8 = null;
                if (isConnectionWrapped_tOracleInput_8) {
					unwrappedOraConn_tOracleInput_8 = conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_8 != null) {
                        isTimeZoneNull_tOracleInput_8 = (unwrappedOraConn_tOracleInput_8.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_8 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_8).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_8) {
					java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_8 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_8.next()) {
						sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_8 && unwrappedOraConn_tOracleInput_8 != null) {
                        unwrappedOraConn_tOracleInput_8.setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_8).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_8.setFetchSize(1000);


		    String dbquery_tOracleInput_8 = "SELECT  ID \n        ,NOMBRE\n        ,EDAD_MINIMA\n        ,EDAD_MAXIMA\n        ,ESTADO\n        ,ESTREGISTRO_ID\nFRO"
+"M BVAC_RANGOS";
		    

		    globalMap.put("tOracleInput_8_QUERY",dbquery_tOracleInput_8);

		    java.sql.ResultSet rs_tOracleInput_8 = null;

		    try {
		    	rs_tOracleInput_8 = stmt_tOracleInput_8.executeQuery(dbquery_tOracleInput_8);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8.getMetaData();
		    	int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8.getColumnCount();

		    String tmpContent_tOracleInput_8 = null;
		    
		    
		    while (rs_tOracleInput_8.next()) {
		        nb_line_tOracleInput_8++;
		        
							if(colQtyInRs_tOracleInput_8 < 1) {
								row8.ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(1) != null) {
						row8.ID = rs_tOracleInput_8.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 2) {
								row8.NOMBRE = null;
							} else {
	                         		
        	row8.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 3) {
								row8.EDAD_MINIMA = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(3) != null) {
						row8.EDAD_MINIMA = rs_tOracleInput_8.getBigDecimal(3);
					} else {
				
						row8.EDAD_MINIMA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 4) {
								row8.EDAD_MAXIMA = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(4) != null) {
						row8.EDAD_MAXIMA = rs_tOracleInput_8.getBigDecimal(4);
					} else {
				
						row8.EDAD_MAXIMA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 5) {
								row8.ESTADO = null;
							} else {
	                         		
        	row8.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 6) {
								row8.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(6) != null) {
						row8.ESTREGISTRO_ID = rs_tOracleInput_8.getBigDecimal(6);
					} else {
				
						row8.ESTREGISTRO_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_8 begin ] stop
 */
	
	/**
	 * [tOracleInput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 


	tos_count_tOracleInput_8++;

/**
 * [tOracleInput_8 main ] stop
 */
	
	/**
	 * [tOracleInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.ID = row8.ID;
				
				row8_HashRow.NOMBRE = row8.NOMBRE;
				
				row8_HashRow.EDAD_MINIMA = row8.EDAD_MINIMA;
				
				row8_HashRow.EDAD_MAXIMA = row8.EDAD_MAXIMA;
				
				row8_HashRow.ESTADO = row8.ESTADO;
				
				row8_HashRow.ESTREGISTRO_ID = row8.ESTREGISTRO_ID;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

}
}finally{
	if (rs_tOracleInput_8 != null) {
		rs_tOracleInput_8.close();
	}
	if (stmt_tOracleInput_8 != null) {
		stmt_tOracleInput_8.close();
	}
}

globalMap.put("tOracleInput_8_NB_LINE",nb_line_tOracleInput_8);
 

ok_Hash.put("tOracleInput_8", true);
end_Hash.put("tOracleInput_8", System.currentTimeMillis());




/**
 * [tOracleInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

tHash_Lookup_row8.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.ID = this.ID;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.ID = this.ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tAdvancedHash_row9 = 0;
		

			   		// connection name:row9
			   		// source node:tOracleInput_9 - inputs:(after_tOracleInput_6) outputs:(row9,row9) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_3 - inputs:(row7,row8,row9) outputs:(Inserta2,Actualiza2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */



	
	/**
	 * [tOracleInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_9", false);
		start_Hash.put("tOracleInput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_9";
	
	
		int tos_count_tOracleInput_9 = 0;
		
	


	
		    int nb_line_tOracleInput_9 = 0;
		    java.sql.Connection conn_tOracleInput_9 = null;
				conn_tOracleInput_9 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_9 = false;
				boolean isConnectionWrapped_tOracleInput_9 = !(conn_tOracleInput_9 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_9.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_9 = null;
                if (isConnectionWrapped_tOracleInput_9) {
					unwrappedOraConn_tOracleInput_9 = conn_tOracleInput_9.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_9 != null) {
                        isTimeZoneNull_tOracleInput_9 = (unwrappedOraConn_tOracleInput_9.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_9 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_9).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_9) {
					java.sql.Statement stmtGetTZ_tOracleInput_9 = conn_tOracleInput_9.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_9 = stmtGetTZ_tOracleInput_9.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_9 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_9.next()) {
						sessionTimezone_tOracleInput_9 = rsGetTZ_tOracleInput_9.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_9 && unwrappedOraConn_tOracleInput_9 != null) {
                        unwrappedOraConn_tOracleInput_9.setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_9).setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_9 = conn_tOracleInput_9.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_9.setFetchSize(1000);


		    String dbquery_tOracleInput_9 = "SELECT  ID \nFROM BVAC_RANGOS";
		    

		    globalMap.put("tOracleInput_9_QUERY",dbquery_tOracleInput_9);

		    java.sql.ResultSet rs_tOracleInput_9 = null;

		    try {
		    	rs_tOracleInput_9 = stmt_tOracleInput_9.executeQuery(dbquery_tOracleInput_9);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_9 = rs_tOracleInput_9.getMetaData();
		    	int colQtyInRs_tOracleInput_9 = rsmd_tOracleInput_9.getColumnCount();

		    String tmpContent_tOracleInput_9 = null;
		    
		    
		    while (rs_tOracleInput_9.next()) {
		        nb_line_tOracleInput_9++;
		        
							if(colQtyInRs_tOracleInput_9 < 1) {
								row9.ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(1) != null) {
						row9.ID = rs_tOracleInput_9.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_9 begin ] stop
 */
	
	/**
	 * [tOracleInput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 


	tos_count_tOracleInput_9++;

/**
 * [tOracleInput_9 main ] stop
 */
	
	/**
	 * [tOracleInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.ID = row9.ID;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

}
}finally{
	if (rs_tOracleInput_9 != null) {
		rs_tOracleInput_9.close();
	}
	if (stmt_tOracleInput_9 != null) {
		stmt_tOracleInput_9.close();
	}
}

globalMap.put("tOracleInput_9_NB_LINE",nb_line_tOracleInput_9);
 

ok_Hash.put("tOracleInput_9", true);
end_Hash.put("tOracleInput_9", System.currentTimeMillis());




/**
 * [tOracleInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

tHash_Lookup_row9.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal POBLACION_ID;

				public BigDecimal getPOBLACION_ID () {
					return this.POBLACION_ID;
				}

				public Boolean POBLACION_IDIsNullable(){
				    return true;
				}
				public Boolean POBLACION_IDIsKey(){
				    return false;
				}
				public Integer POBLACION_IDLength(){
				    return null;
				}
				public Integer POBLACION_IDPrecision(){
				    return null;
				}
				public String POBLACION_IDDefault(){
				
					return "";
				
				}
				public String POBLACION_IDComment(){
				
				    return "";
				
				}
				public String POBLACION_IDPattern(){
				
					return "";
				
				}
				public String POBLACION_IDOriginalDbColumnName(){
				
					return "POBLACION_ID";
				
				}

				
			    public String POBLACION_NOMBRE;

				public String getPOBLACION_NOMBRE () {
					return this.POBLACION_NOMBRE;
				}

				public Boolean POBLACION_NOMBREIsNullable(){
				    return true;
				}
				public Boolean POBLACION_NOMBREIsKey(){
				    return false;
				}
				public Integer POBLACION_NOMBRELength(){
				    return null;
				}
				public Integer POBLACION_NOMBREPrecision(){
				    return null;
				}
				public String POBLACION_NOMBREDefault(){
				
					return null;
				
				}
				public String POBLACION_NOMBREComment(){
				
				    return "";
				
				}
				public String POBLACION_NOMBREPattern(){
				
					return "";
				
				}
				public String POBLACION_NOMBREOriginalDbColumnName(){
				
					return "POBLACION_NOMBRE";
				
				}

				
			    public String POBLACION_SIGLA;

				public String getPOBLACION_SIGLA () {
					return this.POBLACION_SIGLA;
				}

				public Boolean POBLACION_SIGLAIsNullable(){
				    return true;
				}
				public Boolean POBLACION_SIGLAIsKey(){
				    return false;
				}
				public Integer POBLACION_SIGLALength(){
				    return null;
				}
				public Integer POBLACION_SIGLAPrecision(){
				    return null;
				}
				public String POBLACION_SIGLADefault(){
				
					return null;
				
				}
				public String POBLACION_SIGLAComment(){
				
				    return "";
				
				}
				public String POBLACION_SIGLAPattern(){
				
					return "";
				
				}
				public String POBLACION_SIGLAOriginalDbColumnName(){
				
					return "POBLACION_SIGLA";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return true;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICO_IDLength(){
				    return null;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public java.util.Date FINACTIVACION;

				public java.util.Date getFINACTIVACION () {
					return this.FINACTIVACION;
				}

				public Boolean FINACTIVACIONIsNullable(){
				    return true;
				}
				public Boolean FINACTIVACIONIsKey(){
				    return false;
				}
				public Integer FINACTIVACIONLength(){
				    return null;
				}
				public Integer FINACTIVACIONPrecision(){
				    return null;
				}
				public String FINACTIVACIONDefault(){
				
					return null;
				
				}
				public String FINACTIVACIONComment(){
				
				    return "";
				
				}
				public String FINACTIVACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FINACTIVACIONOriginalDbColumnName(){
				
					return "FINACTIVACION";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.POBLACION_ID == null) ? 0 : this.POBLACION_ID.hashCode());
					
						result = prime * result + ((this.POBLACION_NOMBRE == null) ? 0 : this.POBLACION_NOMBRE.hashCode());
					
						result = prime * result + ((this.POBLACION_SIGLA == null) ? 0 : this.POBLACION_SIGLA.hashCode());
					
						result = prime * result + ((this.BIOLOGICO_ID == null) ? 0 : this.BIOLOGICO_ID.hashCode());
					
						result = prime * result + ((this.ESTADO == null) ? 0 : this.ESTADO.hashCode());
					
						result = prime * result + ((this.FINACTIVACION == null) ? 0 : this.FINACTIVACION.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.POBLACION_ID == null) {
							if (other.POBLACION_ID != null)
								return false;
						
						} else if (!this.POBLACION_ID.equals(other.POBLACION_ID))
						
							return false;
					
						if (this.POBLACION_NOMBRE == null) {
							if (other.POBLACION_NOMBRE != null)
								return false;
						
						} else if (!this.POBLACION_NOMBRE.equals(other.POBLACION_NOMBRE))
						
							return false;
					
						if (this.POBLACION_SIGLA == null) {
							if (other.POBLACION_SIGLA != null)
								return false;
						
						} else if (!this.POBLACION_SIGLA.equals(other.POBLACION_SIGLA))
						
							return false;
					
						if (this.BIOLOGICO_ID == null) {
							if (other.BIOLOGICO_ID != null)
								return false;
						
						} else if (!this.BIOLOGICO_ID.equals(other.BIOLOGICO_ID))
						
							return false;
					
						if (this.ESTADO == null) {
							if (other.ESTADO != null)
								return false;
						
						} else if (!this.ESTADO.equals(other.ESTADO))
						
							return false;
					
						if (this.FINACTIVACION == null) {
							if (other.FINACTIVACION != null)
								return false;
						
						} else if (!this.FINACTIVACION.equals(other.FINACTIVACION))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.ID = this.ID;
	            other.POBLACION_ID = this.POBLACION_ID;
	            other.POBLACION_NOMBRE = this.POBLACION_NOMBRE;
	            other.POBLACION_SIGLA = this.POBLACION_SIGLA;
	            other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            other.ESTADO = this.ESTADO;
	            other.FINACTIVACION = this.FINACTIVACION;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.POBLACION_ID = this.POBLACION_ID;
	            	other.POBLACION_NOMBRE = this.POBLACION_NOMBRE;
	            	other.POBLACION_SIGLA = this.POBLACION_SIGLA;
	            	other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            	other.ESTADO = this.ESTADO;
	            	other.FINACTIVACION = this.FINACTIVACION;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.POBLACION_ID = (BigDecimal) dis.readObject();
					
					this.POBLACION_NOMBRE = readString(dis);
					
					this.POBLACION_SIGLA = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.POBLACION_ID = (BigDecimal) dis.readObject();
					
					this.POBLACION_NOMBRE = readString(dis);
					
					this.POBLACION_SIGLA = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.POBLACION_ID);
					
					// String
				
						writeString(this.POBLACION_NOMBRE,dos);
					
					// String
				
						writeString(this.POBLACION_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.POBLACION_ID);
					
					// String
				
						writeString(this.POBLACION_NOMBRE,dos);
					
					// String
				
						writeString(this.POBLACION_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",POBLACION_ID="+String.valueOf(POBLACION_ID));
		sb.append(",POBLACION_NOMBRE="+POBLACION_NOMBRE);
		sb.append(",POBLACION_SIGLA="+POBLACION_SIGLA);
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",FINACTIVACION="+String.valueOf(FINACTIVACION));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.POBLACION_ID, other.POBLACION_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.POBLACION_NOMBRE, other.POBLACION_NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.POBLACION_SIGLA, other.POBLACION_SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.BIOLOGICO_ID, other.BIOLOGICO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ESTADO, other.ESTADO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FINACTIVACION, other.FINACTIVACION);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tOracleInput_11 - inputs:(after_tOracleInput_12) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_4 - inputs:(row12,row13,row14) outputs:(Inserta3,Actualiza3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tOracleInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_11", false);
		start_Hash.put("tOracleInput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_11";
	
	
		int tos_count_tOracleInput_11 = 0;
		
	


	
		    int nb_line_tOracleInput_11 = 0;
		    java.sql.Connection conn_tOracleInput_11 = null;
				conn_tOracleInput_11 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_11 = false;
				boolean isConnectionWrapped_tOracleInput_11 = !(conn_tOracleInput_11 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_11.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_11 = null;
                if (isConnectionWrapped_tOracleInput_11) {
					unwrappedOraConn_tOracleInput_11 = conn_tOracleInput_11.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_11 != null) {
                        isTimeZoneNull_tOracleInput_11 = (unwrappedOraConn_tOracleInput_11.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_11 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_11).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_11) {
					java.sql.Statement stmtGetTZ_tOracleInput_11 = conn_tOracleInput_11.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_11 = stmtGetTZ_tOracleInput_11.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_11 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_11.next()) {
						sessionTimezone_tOracleInput_11 = rsGetTZ_tOracleInput_11.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_11 && unwrappedOraConn_tOracleInput_11 != null) {
                        unwrappedOraConn_tOracleInput_11.setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_11).setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_11 = conn_tOracleInput_11.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_11.setFetchSize(5000);


		    String dbquery_tOracleInput_11 = "SELECT  ID\n        ,POBLACION_ID\n        ,POBLACION_NOMBRE\n        ,POBLACION_SIGLA\n        ,BIOLOGICO_ID\n        "
+",ESTADO\n        ,FINACTIVACION\nFROM BVAC_POBLACIONBIOLOGICO";
		    

		    globalMap.put("tOracleInput_11_QUERY",dbquery_tOracleInput_11);

		    java.sql.ResultSet rs_tOracleInput_11 = null;

		    try {
		    	rs_tOracleInput_11 = stmt_tOracleInput_11.executeQuery(dbquery_tOracleInput_11);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_11 = rs_tOracleInput_11.getMetaData();
		    	int colQtyInRs_tOracleInput_11 = rsmd_tOracleInput_11.getColumnCount();

		    String tmpContent_tOracleInput_11 = null;
		    
		    
		    while (rs_tOracleInput_11.next()) {
		        nb_line_tOracleInput_11++;
		        
							if(colQtyInRs_tOracleInput_11 < 1) {
								row13.ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(1) != null) {
						row13.ID = rs_tOracleInput_11.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 2) {
								row13.POBLACION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(2) != null) {
						row13.POBLACION_ID = rs_tOracleInput_11.getBigDecimal(2);
					} else {
				
						row13.POBLACION_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 3) {
								row13.POBLACION_NOMBRE = null;
							} else {
	                         		
        	row13.POBLACION_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 4) {
								row13.POBLACION_SIGLA = null;
							} else {
	                         		
        	row13.POBLACION_SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 5) {
								row13.BIOLOGICO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(5) != null) {
						row13.BIOLOGICO_ID = rs_tOracleInput_11.getBigDecimal(5);
					} else {
				
						row13.BIOLOGICO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 6) {
								row13.ESTADO = null;
							} else {
	                         		
        	row13.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 7) {
								row13.FINACTIVACION = null;
							} else {
										
			row13.FINACTIVACION = routines.system.JDBCUtil.getDate(rs_tOracleInput_11, 7);
		                    }
					




 



/**
 * [tOracleInput_11 begin ] stop
 */
	
	/**
	 * [tOracleInput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 


	tos_count_tOracleInput_11++;

/**
 * [tOracleInput_11 main ] stop
 */
	
	/**
	 * [tOracleInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.ID = row13.ID;
				
				row13_HashRow.POBLACION_ID = row13.POBLACION_ID;
				
				row13_HashRow.POBLACION_NOMBRE = row13.POBLACION_NOMBRE;
				
				row13_HashRow.POBLACION_SIGLA = row13.POBLACION_SIGLA;
				
				row13_HashRow.BIOLOGICO_ID = row13.BIOLOGICO_ID;
				
				row13_HashRow.ESTADO = row13.ESTADO;
				
				row13_HashRow.FINACTIVACION = row13.FINACTIVACION;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

}
}finally{
	if (rs_tOracleInput_11 != null) {
		rs_tOracleInput_11.close();
	}
	if (stmt_tOracleInput_11 != null) {
		stmt_tOracleInput_11.close();
	}
}

globalMap.put("tOracleInput_11_NB_LINE",nb_line_tOracleInput_11);
 

ok_Hash.put("tOracleInput_11", true);
end_Hash.put("tOracleInput_11", System.currentTimeMillis());




/**
 * [tOracleInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

tHash_Lookup_row13.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableComparableLookupRow<row14Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal POBLACION_ID;

				public BigDecimal getPOBLACION_ID () {
					return this.POBLACION_ID;
				}

				public Boolean POBLACION_IDIsNullable(){
				    return true;
				}
				public Boolean POBLACION_IDIsKey(){
				    return false;
				}
				public Integer POBLACION_IDLength(){
				    return null;
				}
				public Integer POBLACION_IDPrecision(){
				    return null;
				}
				public String POBLACION_IDDefault(){
				
					return "";
				
				}
				public String POBLACION_IDComment(){
				
				    return "";
				
				}
				public String POBLACION_IDPattern(){
				
					return "";
				
				}
				public String POBLACION_IDOriginalDbColumnName(){
				
					return "POBLACION_ID";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return true;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICO_IDLength(){
				    return null;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.POBLACION_ID == null) ? 0 : this.POBLACION_ID.hashCode());
					
						result = prime * result + ((this.BIOLOGICO_ID == null) ? 0 : this.BIOLOGICO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.POBLACION_ID == null) {
							if (other.POBLACION_ID != null)
								return false;
						
						} else if (!this.POBLACION_ID.equals(other.POBLACION_ID))
						
							return false;
					
						if (this.BIOLOGICO_ID == null) {
							if (other.BIOLOGICO_ID != null)
								return false;
						
						} else if (!this.BIOLOGICO_ID.equals(other.BIOLOGICO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.POBLACION_ID = this.POBLACION_ID;
	            other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.POBLACION_ID = this.POBLACION_ID;
	            	other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.POBLACION_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.POBLACION_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.POBLACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.POBLACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("POBLACION_ID="+String.valueOf(POBLACION_ID));
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.POBLACION_ID, other.POBLACION_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.BIOLOGICO_ID, other.BIOLOGICO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tAdvancedHash_row14 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row14", false);
		start_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tAdvancedHash_row14 = 0;
		

			   		// connection name:row14
			   		// source node:tOracleInput_13 - inputs:(after_tOracleInput_12) outputs:(row14,row14) | target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
			   		// linked node: tMap_4 - inputs:(row12,row13,row14) outputs:(Inserta3,Actualiza3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row14Struct>getLookup(matchingModeEnum_row14);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row14 begin ] stop
 */



	
	/**
	 * [tOracleInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_13", false);
		start_Hash.put("tOracleInput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_13";
	
	
		int tos_count_tOracleInput_13 = 0;
		
	


	
		    int nb_line_tOracleInput_13 = 0;
		    java.sql.Connection conn_tOracleInput_13 = null;
				conn_tOracleInput_13 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_13 = false;
				boolean isConnectionWrapped_tOracleInput_13 = !(conn_tOracleInput_13 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_13.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_13 = null;
                if (isConnectionWrapped_tOracleInput_13) {
					unwrappedOraConn_tOracleInput_13 = conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_13 != null) {
                        isTimeZoneNull_tOracleInput_13 = (unwrappedOraConn_tOracleInput_13.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_13 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_13).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_13) {
					java.sql.Statement stmtGetTZ_tOracleInput_13 = conn_tOracleInput_13.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_13 = stmtGetTZ_tOracleInput_13.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_13 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_13.next()) {
						sessionTimezone_tOracleInput_13 = rsGetTZ_tOracleInput_13.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_13 && unwrappedOraConn_tOracleInput_13 != null) {
                        unwrappedOraConn_tOracleInput_13.setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_13).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_13 = conn_tOracleInput_13.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_13.setFetchSize(5000);


		    String dbquery_tOracleInput_13 = "SELECT  POBLACION_ID\n        ,BIOLOGICO_ID\nFROM BVAC_POBLACIONBIOLOGICO";
		    

		    globalMap.put("tOracleInput_13_QUERY",dbquery_tOracleInput_13);

		    java.sql.ResultSet rs_tOracleInput_13 = null;

		    try {
		    	rs_tOracleInput_13 = stmt_tOracleInput_13.executeQuery(dbquery_tOracleInput_13);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_13 = rs_tOracleInput_13.getMetaData();
		    	int colQtyInRs_tOracleInput_13 = rsmd_tOracleInput_13.getColumnCount();

		    String tmpContent_tOracleInput_13 = null;
		    
		    
		    while (rs_tOracleInput_13.next()) {
		        nb_line_tOracleInput_13++;
		        
							if(colQtyInRs_tOracleInput_13 < 1) {
								row14.POBLACION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(1) != null) {
						row14.POBLACION_ID = rs_tOracleInput_13.getBigDecimal(1);
					} else {
				
						row14.POBLACION_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 2) {
								row14.BIOLOGICO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(2) != null) {
						row14.BIOLOGICO_ID = rs_tOracleInput_13.getBigDecimal(2);
					} else {
				
						row14.BIOLOGICO_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_13 begin ] stop
 */
	
	/**
	 * [tOracleInput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 


	tos_count_tOracleInput_13++;

/**
 * [tOracleInput_13 main ] stop
 */
	
	/**
	 * [tOracleInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					


			   
			   

					row14Struct row14_HashRow = new row14Struct();
		   	   	   
				
				row14_HashRow.POBLACION_ID = row14.POBLACION_ID;
				
				row14_HashRow.BIOLOGICO_ID = row14.BIOLOGICO_ID;
				
			tHash_Lookup_row14.put(row14_HashRow);
			
            




 


	tos_count_tAdvancedHash_row14++;

/**
 * [tAdvancedHash_row14 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

}
}finally{
	if (rs_tOracleInput_13 != null) {
		rs_tOracleInput_13.close();
	}
	if (stmt_tOracleInput_13 != null) {
		stmt_tOracleInput_13.close();
	}
}

globalMap.put("tOracleInput_13_NB_LINE",nb_line_tOracleInput_13);
 

ok_Hash.put("tOracleInput_13", true);
end_Hash.put("tOracleInput_13", System.currentTimeMillis());




/**
 * [tOracleInput_13 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

tHash_Lookup_row14.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row14", true);
end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());




/**
 * [tAdvancedHash_row14 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableComparableLookupRow<row16Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return null;
				}
				public Integer NOMBREPrecision(){
				    return null;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal BIOLOGICOS_ID;

				public BigDecimal getBIOLOGICOS_ID () {
					return this.BIOLOGICOS_ID;
				}

				public Boolean BIOLOGICOS_IDIsNullable(){
				    return true;
				}
				public Boolean BIOLOGICOS_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICOS_IDLength(){
				    return null;
				}
				public Integer BIOLOGICOS_IDPrecision(){
				    return null;
				}
				public String BIOLOGICOS_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICOS_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDOriginalDbColumnName(){
				
					return "BIOLOGICOS_ID";
				
				}

				
			    public BigDecimal RANGOS_ID;

				public BigDecimal getRANGOS_ID () {
					return this.RANGOS_ID;
				}

				public Boolean RANGOS_IDIsNullable(){
				    return true;
				}
				public Boolean RANGOS_IDIsKey(){
				    return false;
				}
				public Integer RANGOS_IDLength(){
				    return null;
				}
				public Integer RANGOS_IDPrecision(){
				    return null;
				}
				public String RANGOS_IDDefault(){
				
					return "";
				
				}
				public String RANGOS_IDComment(){
				
				    return "";
				
				}
				public String RANGOS_IDPattern(){
				
					return "";
				
				}
				public String RANGOS_IDOriginalDbColumnName(){
				
					return "RANGOS_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return true;
				}
				public Boolean DOSIS_IDIsKey(){
				    return false;
				}
				public Integer DOSIS_IDLength(){
				    return null;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public java.util.Date FINACTIVACION;

				public java.util.Date getFINACTIVACION () {
					return this.FINACTIVACION;
				}

				public Boolean FINACTIVACIONIsNullable(){
				    return true;
				}
				public Boolean FINACTIVACIONIsKey(){
				    return false;
				}
				public Integer FINACTIVACIONLength(){
				    return null;
				}
				public Integer FINACTIVACIONPrecision(){
				    return null;
				}
				public String FINACTIVACIONDefault(){
				
					return null;
				
				}
				public String FINACTIVACIONComment(){
				
				    return "";
				
				}
				public String FINACTIVACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FINACTIVACIONOriginalDbColumnName(){
				
					return "FINACTIVACION";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NOMBRE == null) ? 0 : this.NOMBRE.hashCode());
					
						result = prime * result + ((this.BIOLOGICOS_ID == null) ? 0 : this.BIOLOGICOS_ID.hashCode());
					
						result = prime * result + ((this.RANGOS_ID == null) ? 0 : this.RANGOS_ID.hashCode());
					
						result = prime * result + ((this.DOSIS_ID == null) ? 0 : this.DOSIS_ID.hashCode());
					
						result = prime * result + ((this.ESTADO == null) ? 0 : this.ESTADO.hashCode());
					
						result = prime * result + ((this.FINACTIVACION == null) ? 0 : this.FINACTIVACION.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row16Struct other = (row16Struct) obj;
		
						if (this.NOMBRE == null) {
							if (other.NOMBRE != null)
								return false;
						
						} else if (!this.NOMBRE.equals(other.NOMBRE))
						
							return false;
					
						if (this.BIOLOGICOS_ID == null) {
							if (other.BIOLOGICOS_ID != null)
								return false;
						
						} else if (!this.BIOLOGICOS_ID.equals(other.BIOLOGICOS_ID))
						
							return false;
					
						if (this.RANGOS_ID == null) {
							if (other.RANGOS_ID != null)
								return false;
						
						} else if (!this.RANGOS_ID.equals(other.RANGOS_ID))
						
							return false;
					
						if (this.DOSIS_ID == null) {
							if (other.DOSIS_ID != null)
								return false;
						
						} else if (!this.DOSIS_ID.equals(other.DOSIS_ID))
						
							return false;
					
						if (this.ESTADO == null) {
							if (other.ESTADO != null)
								return false;
						
						} else if (!this.ESTADO.equals(other.ESTADO))
						
							return false;
					
						if (this.FINACTIVACION == null) {
							if (other.FINACTIVACION != null)
								return false;
						
						} else if (!this.FINACTIVACION.equals(other.FINACTIVACION))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row16Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.BIOLOGICOS_ID = this.BIOLOGICOS_ID;
	            other.RANGOS_ID = this.RANGOS_ID;
	            other.DOSIS_ID = this.DOSIS_ID;
	            other.ESTADO = this.ESTADO;
	            other.FINACTIVACION = this.FINACTIVACION;
	            
	}

	public void copyKeysDataTo(row16Struct other) {

		other.NOMBRE = this.NOMBRE;
	            	other.BIOLOGICOS_ID = this.BIOLOGICOS_ID;
	            	other.RANGOS_ID = this.RANGOS_ID;
	            	other.DOSIS_ID = this.DOSIS_ID;
	            	other.ESTADO = this.ESTADO;
	            	other.FINACTIVACION = this.FINACTIVACION;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.FINACTIVACION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RANGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RANGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// java.util.Date
				
						writeDate(this.FINACTIVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",BIOLOGICOS_ID="+String.valueOf(BIOLOGICOS_ID));
		sb.append(",RANGOS_ID="+String.valueOf(RANGOS_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",FINACTIVACION="+String.valueOf(FINACTIVACION));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NOMBRE, other.NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.BIOLOGICOS_ID, other.BIOLOGICOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.RANGOS_ID, other.RANGOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOSIS_ID, other.DOSIS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ESTADO, other.ESTADO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FINACTIVACION, other.FINACTIVACION);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tAdvancedHash_row16 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row16", false);
		start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tAdvancedHash_row16 = 0;
		

			   		// connection name:row16
			   		// source node:tOracleInput_15 - inputs:(after_tOracleInput_14) outputs:(row16,row16) | target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
			   		// linked node: tMap_5 - inputs:(row15,row16,row17) outputs:(Inserta4,Actualiza4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row16Struct>getLookup(matchingModeEnum_row16);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row16 begin ] stop
 */



	
	/**
	 * [tOracleInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_15", false);
		start_Hash.put("tOracleInput_15", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_15";
	
	
		int tos_count_tOracleInput_15 = 0;
		
	


	
		    int nb_line_tOracleInput_15 = 0;
		    java.sql.Connection conn_tOracleInput_15 = null;
				conn_tOracleInput_15 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_15 = false;
				boolean isConnectionWrapped_tOracleInput_15 = !(conn_tOracleInput_15 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_15.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_15 = null;
                if (isConnectionWrapped_tOracleInput_15) {
					unwrappedOraConn_tOracleInput_15 = conn_tOracleInput_15.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_15 != null) {
                        isTimeZoneNull_tOracleInput_15 = (unwrappedOraConn_tOracleInput_15.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_15 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_15).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_15) {
					java.sql.Statement stmtGetTZ_tOracleInput_15 = conn_tOracleInput_15.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_15 = stmtGetTZ_tOracleInput_15.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_15 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_15.next()) {
						sessionTimezone_tOracleInput_15 = rsGetTZ_tOracleInput_15.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_15 && unwrappedOraConn_tOracleInput_15 != null) {
                        unwrappedOraConn_tOracleInput_15.setSessionTimeZone(sessionTimezone_tOracleInput_15);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_15).setSessionTimeZone(sessionTimezone_tOracleInput_15);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_15 = conn_tOracleInput_15.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_15.setFetchSize(5000);


		    String dbquery_tOracleInput_15 = "SELECT  ID\n        ,NOMBRE\n        ,BIOLOGICOS_ID\n        ,RANGOS_ID\n        ,DOSIS_ID \n        ,ESTADO\n        ,"
+"FINACTIVACION\nFROM BVAC_TRAZADORES";
		    

		    globalMap.put("tOracleInput_15_QUERY",dbquery_tOracleInput_15);

		    java.sql.ResultSet rs_tOracleInput_15 = null;

		    try {
		    	rs_tOracleInput_15 = stmt_tOracleInput_15.executeQuery(dbquery_tOracleInput_15);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_15 = rs_tOracleInput_15.getMetaData();
		    	int colQtyInRs_tOracleInput_15 = rsmd_tOracleInput_15.getColumnCount();

		    String tmpContent_tOracleInput_15 = null;
		    
		    
		    while (rs_tOracleInput_15.next()) {
		        nb_line_tOracleInput_15++;
		        
							if(colQtyInRs_tOracleInput_15 < 1) {
								row16.ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(1) != null) {
						row16.ID = rs_tOracleInput_15.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 2) {
								row16.NOMBRE = null;
							} else {
	                         		
        	row16.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 3) {
								row16.BIOLOGICOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(3) != null) {
						row16.BIOLOGICOS_ID = rs_tOracleInput_15.getBigDecimal(3);
					} else {
				
						row16.BIOLOGICOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 4) {
								row16.RANGOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(4) != null) {
						row16.RANGOS_ID = rs_tOracleInput_15.getBigDecimal(4);
					} else {
				
						row16.RANGOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 5) {
								row16.DOSIS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(5) != null) {
						row16.DOSIS_ID = rs_tOracleInput_15.getBigDecimal(5);
					} else {
				
						row16.DOSIS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 6) {
								row16.ESTADO = null;
							} else {
	                         		
        	row16.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 7) {
								row16.FINACTIVACION = null;
							} else {
										
			row16.FINACTIVACION = routines.system.JDBCUtil.getDate(rs_tOracleInput_15, 7);
		                    }
					




 



/**
 * [tOracleInput_15 begin ] stop
 */
	
	/**
	 * [tOracleInput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 


	tos_count_tOracleInput_15++;

/**
 * [tOracleInput_15 main ] stop
 */
	
	/**
	 * [tOracleInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					


			   
			   

					row16Struct row16_HashRow = new row16Struct();
		   	   	   
				
				row16_HashRow.ID = row16.ID;
				
				row16_HashRow.NOMBRE = row16.NOMBRE;
				
				row16_HashRow.BIOLOGICOS_ID = row16.BIOLOGICOS_ID;
				
				row16_HashRow.RANGOS_ID = row16.RANGOS_ID;
				
				row16_HashRow.DOSIS_ID = row16.DOSIS_ID;
				
				row16_HashRow.ESTADO = row16.ESTADO;
				
				row16_HashRow.FINACTIVACION = row16.FINACTIVACION;
				
			tHash_Lookup_row16.put(row16_HashRow);
			
            




 


	tos_count_tAdvancedHash_row16++;

/**
 * [tAdvancedHash_row16 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_15 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

}
}finally{
	if (rs_tOracleInput_15 != null) {
		rs_tOracleInput_15.close();
	}
	if (stmt_tOracleInput_15 != null) {
		stmt_tOracleInput_15.close();
	}
}

globalMap.put("tOracleInput_15_NB_LINE",nb_line_tOracleInput_15);
 

ok_Hash.put("tOracleInput_15", true);
end_Hash.put("tOracleInput_15", System.currentTimeMillis());




/**
 * [tOracleInput_15 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

tHash_Lookup_row16.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row16", true);
end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());




/**
 * [tAdvancedHash_row16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_15 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableComparableLookupRow<row17Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal BIOLOGICOS_ID;

				public BigDecimal getBIOLOGICOS_ID () {
					return this.BIOLOGICOS_ID;
				}

				public Boolean BIOLOGICOS_IDIsNullable(){
				    return true;
				}
				public Boolean BIOLOGICOS_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICOS_IDLength(){
				    return null;
				}
				public Integer BIOLOGICOS_IDPrecision(){
				    return null;
				}
				public String BIOLOGICOS_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICOS_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICOS_IDOriginalDbColumnName(){
				
					return "BIOLOGICOS_ID";
				
				}

				
			    public BigDecimal RANGOS_ID;

				public BigDecimal getRANGOS_ID () {
					return this.RANGOS_ID;
				}

				public Boolean RANGOS_IDIsNullable(){
				    return true;
				}
				public Boolean RANGOS_IDIsKey(){
				    return false;
				}
				public Integer RANGOS_IDLength(){
				    return null;
				}
				public Integer RANGOS_IDPrecision(){
				    return null;
				}
				public String RANGOS_IDDefault(){
				
					return "";
				
				}
				public String RANGOS_IDComment(){
				
				    return "";
				
				}
				public String RANGOS_IDPattern(){
				
					return "";
				
				}
				public String RANGOS_IDOriginalDbColumnName(){
				
					return "RANGOS_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return true;
				}
				public Boolean DOSIS_IDIsKey(){
				    return false;
				}
				public Integer DOSIS_IDLength(){
				    return null;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.BIOLOGICOS_ID == null) ? 0 : this.BIOLOGICOS_ID.hashCode());
					
						result = prime * result + ((this.RANGOS_ID == null) ? 0 : this.RANGOS_ID.hashCode());
					
						result = prime * result + ((this.DOSIS_ID == null) ? 0 : this.DOSIS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row17Struct other = (row17Struct) obj;
		
						if (this.BIOLOGICOS_ID == null) {
							if (other.BIOLOGICOS_ID != null)
								return false;
						
						} else if (!this.BIOLOGICOS_ID.equals(other.BIOLOGICOS_ID))
						
							return false;
					
						if (this.RANGOS_ID == null) {
							if (other.RANGOS_ID != null)
								return false;
						
						} else if (!this.RANGOS_ID.equals(other.RANGOS_ID))
						
							return false;
					
						if (this.DOSIS_ID == null) {
							if (other.DOSIS_ID != null)
								return false;
						
						} else if (!this.DOSIS_ID.equals(other.DOSIS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row17Struct other) {

		other.BIOLOGICOS_ID = this.BIOLOGICOS_ID;
	            other.RANGOS_ID = this.RANGOS_ID;
	            other.DOSIS_ID = this.DOSIS_ID;
	            
	}

	public void copyKeysDataTo(row17Struct other) {

		other.BIOLOGICOS_ID = this.BIOLOGICOS_ID;
	            	other.RANGOS_ID = this.RANGOS_ID;
	            	other.DOSIS_ID = this.DOSIS_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.BIOLOGICOS_ID = (BigDecimal) dis.readObject();
					
						this.RANGOS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RANGOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RANGOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BIOLOGICOS_ID="+String.valueOf(BIOLOGICOS_ID));
		sb.append(",RANGOS_ID="+String.valueOf(RANGOS_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.BIOLOGICOS_ID, other.BIOLOGICOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.RANGOS_ID, other.RANGOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOSIS_ID, other.DOSIS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();




	
	/**
	 * [tAdvancedHash_row17 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row17", false);
		start_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tAdvancedHash_row17 = 0;
		

			   		// connection name:row17
			   		// source node:tOracleInput_16 - inputs:(after_tOracleInput_14) outputs:(row17,row17) | target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
			   		// linked node: tMap_5 - inputs:(row15,row16,row17) outputs:(Inserta4,Actualiza4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row17Struct>getLookup(matchingModeEnum_row17);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row17 begin ] stop
 */



	
	/**
	 * [tOracleInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_16", false);
		start_Hash.put("tOracleInput_16", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_16";
	
	
		int tos_count_tOracleInput_16 = 0;
		
	


	
		    int nb_line_tOracleInput_16 = 0;
		    java.sql.Connection conn_tOracleInput_16 = null;
				conn_tOracleInput_16 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_16 = false;
				boolean isConnectionWrapped_tOracleInput_16 = !(conn_tOracleInput_16 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_16.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_16 = null;
                if (isConnectionWrapped_tOracleInput_16) {
					unwrappedOraConn_tOracleInput_16 = conn_tOracleInput_16.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_16 != null) {
                        isTimeZoneNull_tOracleInput_16 = (unwrappedOraConn_tOracleInput_16.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_16 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_16).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_16) {
					java.sql.Statement stmtGetTZ_tOracleInput_16 = conn_tOracleInput_16.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_16 = stmtGetTZ_tOracleInput_16.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_16 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_16.next()) {
						sessionTimezone_tOracleInput_16 = rsGetTZ_tOracleInput_16.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_16 && unwrappedOraConn_tOracleInput_16 != null) {
                        unwrappedOraConn_tOracleInput_16.setSessionTimeZone(sessionTimezone_tOracleInput_16);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_16).setSessionTimeZone(sessionTimezone_tOracleInput_16);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_16 = conn_tOracleInput_16.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_16.setFetchSize(5000);


		    String dbquery_tOracleInput_16 = "SELECT  BIOLOGICOS_ID\n        ,RANGOS_ID\n        ,DOSIS_ID         \nFROM BVAC_TRAZADORES";
		    

		    globalMap.put("tOracleInput_16_QUERY",dbquery_tOracleInput_16);

		    java.sql.ResultSet rs_tOracleInput_16 = null;

		    try {
		    	rs_tOracleInput_16 = stmt_tOracleInput_16.executeQuery(dbquery_tOracleInput_16);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_16 = rs_tOracleInput_16.getMetaData();
		    	int colQtyInRs_tOracleInput_16 = rsmd_tOracleInput_16.getColumnCount();

		    String tmpContent_tOracleInput_16 = null;
		    
		    
		    while (rs_tOracleInput_16.next()) {
		        nb_line_tOracleInput_16++;
		        
							if(colQtyInRs_tOracleInput_16 < 1) {
								row17.BIOLOGICOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(1) != null) {
						row17.BIOLOGICOS_ID = rs_tOracleInput_16.getBigDecimal(1);
					} else {
				
						row17.BIOLOGICOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_16 < 2) {
								row17.RANGOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(2) != null) {
						row17.RANGOS_ID = rs_tOracleInput_16.getBigDecimal(2);
					} else {
				
						row17.RANGOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_16 < 3) {
								row17.DOSIS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(3) != null) {
						row17.DOSIS_ID = rs_tOracleInput_16.getBigDecimal(3);
					} else {
				
						row17.DOSIS_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_16 begin ] stop
 */
	
	/**
	 * [tOracleInput_16 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 


	tos_count_tOracleInput_16++;

/**
 * [tOracleInput_16 main ] stop
 */
	
	/**
	 * [tOracleInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					


			   
			   

					row17Struct row17_HashRow = new row17Struct();
		   	   	   
				
				row17_HashRow.BIOLOGICOS_ID = row17.BIOLOGICOS_ID;
				
				row17_HashRow.RANGOS_ID = row17.RANGOS_ID;
				
				row17_HashRow.DOSIS_ID = row17.DOSIS_ID;
				
			tHash_Lookup_row17.put(row17_HashRow);
			
            




 


	tos_count_tAdvancedHash_row17++;

/**
 * [tAdvancedHash_row17 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

 



/**
 * [tAdvancedHash_row17 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row17 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

 



/**
 * [tAdvancedHash_row17 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_16 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

}
}finally{
	if (rs_tOracleInput_16 != null) {
		rs_tOracleInput_16.close();
	}
	if (stmt_tOracleInput_16 != null) {
		stmt_tOracleInput_16.close();
	}
}

globalMap.put("tOracleInput_16_NB_LINE",nb_line_tOracleInput_16);
 

ok_Hash.put("tOracleInput_16", true);
end_Hash.put("tOracleInput_16", System.currentTimeMillis());




/**
 * [tOracleInput_16 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

tHash_Lookup_row17.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row17", true);
end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());




/**
 * [tAdvancedHash_row17 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_16 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

 



/**
 * [tAdvancedHash_row17 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class row21Struct implements routines.system.IPersistableComparableLookupRow<row21Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FECHA == null) ? 0 : this.FECHA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row21Struct other = (row21Struct) obj;
		
						if (this.FECHA == null) {
							if (other.FECHA != null)
								return false;
						
						} else if (!this.FECHA.equals(other.FECHA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row21Struct other) {

		other.ID = this.ID;
	            other.FECHA = this.FECHA;
	            
	}

	public void copyKeysDataTo(row21Struct other) {

		other.FECHA = this.FECHA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FECHA, other.FECHA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row21Struct row21 = new row21Struct();




	
	/**
	 * [tAdvancedHash_row21 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row21", false);
		start_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tAdvancedHash_row21 = 0;
		

			   		// connection name:row21
			   		// source node:tHashInput_1 - inputs:(after_tOracleInput_19) outputs:(row21,row21) | target node:tAdvancedHash_row21 - inputs:(row21) outputs:()
			   		// linked node: tMap_6 - inputs:(row20,row21) outputs:(borra)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row21 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row21Struct>getLookup(matchingModeEnum_row21);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row21", tHash_Lookup_row21);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row21 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row19Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_VAC_F5_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row19Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row19Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row21.ID = next_tHashInput_1.ID;
	row21.FECHA = next_tHashInput_1.FECHA;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					


			   
			   

					row21Struct row21_HashRow = new row21Struct();
		   	   	   
				
				row21_HashRow.ID = row21.ID;
				
				row21_HashRow.FECHA = row21.FECHA;
				
			tHash_Lookup_row21.put(row21_HashRow);
			
            




 


	tos_count_tAdvancedHash_row21++;

/**
 * [tAdvancedHash_row21 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row21 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_VAC_F5_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

tHash_Lookup_row21.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row21", true);
end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());




/**
 * [tAdvancedHash_row21 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row23Struct implements routines.system.IPersistableComparableLookupRow<row23Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FECHA == null) ? 0 : this.FECHA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row23Struct other = (row23Struct) obj;
		
						if (this.FECHA == null) {
							if (other.FECHA != null)
								return false;
						
						} else if (!this.FECHA.equals(other.FECHA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row23Struct other) {

		other.ID = this.ID;
	            other.FECHA = this.FECHA;
	            
	}

	public void copyKeysDataTo(row23Struct other) {

		other.FECHA = this.FECHA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FECHA, other.FECHA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row23Struct row23 = new row23Struct();




	
	/**
	 * [tAdvancedHash_row23 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row23", false);
		start_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row23";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tAdvancedHash_row23 = 0;
		

			   		// connection name:row23
			   		// source node:tHashInput_2 - inputs:(after_tOracleInput_20) outputs:(row23,row23) | target node:tAdvancedHash_row23 - inputs:(row23) outputs:()
			   		// linked node: tMap_7 - inputs:(row22,row23) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row23 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row23Struct>getLookup(matchingModeEnum_row23);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row23", tHash_Lookup_row23);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row23 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row19Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_VAC_F5_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row19Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row19Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row23.ID = next_tHashInput_2.ID;
	row23.FECHA = next_tHashInput_2.FECHA;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					


			   
			   

					row23Struct row23_HashRow = new row23Struct();
		   	   	   
				
				row23_HashRow.ID = row23.ID;
				
				row23_HashRow.FECHA = row23.FECHA;
				
			tHash_Lookup_row23.put(row23_HashRow);
			
            




 


	tos_count_tAdvancedHash_row23++;

/**
 * [tAdvancedHash_row23 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";
	
	

 



/**
 * [tAdvancedHash_row23 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";
	
	

 



/**
 * [tAdvancedHash_row23 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_VAC_F5_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";
	
	

tHash_Lookup_row23.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row23", true);
end_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());




/**
 * [tAdvancedHash_row23 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";
	
	

 



/**
 * [tAdvancedHash_row23 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row31Struct implements routines.system.IPersistableComparableLookupRow<row31Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FECHA == null) ? 0 : this.FECHA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row31Struct other = (row31Struct) obj;
		
						if (this.FECHA == null) {
							if (other.FECHA != null)
								return false;
						
						} else if (!this.FECHA.equals(other.FECHA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row31Struct other) {

		other.ID = this.ID;
	            other.FECHA = this.FECHA;
	            
	}

	public void copyKeysDataTo(row31Struct other) {

		other.FECHA = this.FECHA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FECHA, other.FECHA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row31Struct row31 = new row31Struct();




	
	/**
	 * [tAdvancedHash_row31 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row31", false);
		start_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row31";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tAdvancedHash_row31 = 0;
		

			   		// connection name:row31
			   		// source node:tHashInput_5 - inputs:(after_tOracleInput_24) outputs:(row31,row31) | target node:tAdvancedHash_row31 - inputs:(row31) outputs:()
			   		// linked node: tMap_11 - inputs:(row30,row31,row33,row36) outputs:(Actualiza5,Registra5)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row31 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row31Struct>getLookup(matchingModeEnum_row31);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row31", tHash_Lookup_row31);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row31 begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row29Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_VAC_F5_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row29Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    row29Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row31.ID = next_tHashInput_5.ID;
	row31.FECHA = next_tHashInput_5.FECHA;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row31 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					


			   
			   

					row31Struct row31_HashRow = new row31Struct();
		   	   	   
				
				row31_HashRow.ID = row31.ID;
				
				row31_HashRow.FECHA = row31.FECHA;
				
			tHash_Lookup_row31.put(row31_HashRow);
			
            




 


	tos_count_tAdvancedHash_row31++;

/**
 * [tAdvancedHash_row31 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";
	
	

 



/**
 * [tAdvancedHash_row31 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row31 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";
	
	

 



/**
 * [tAdvancedHash_row31 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_VAC_F5_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row31 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";
	
	

tHash_Lookup_row31.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row31", true);
end_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());




/**
 * [tAdvancedHash_row31 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row31 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";
	
	

 



/**
 * [tAdvancedHash_row31 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row33Struct implements routines.system.IPersistableComparableLookupRow<row33Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return true;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICO_IDLength(){
				    return null;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return true;
				}
				public Boolean DOSIS_IDIsKey(){
				    return false;
				}
				public Integer DOSIS_IDLength(){
				    return null;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return null;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return null;
				}
				public Integer METAPrecision(){
				    return null;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.BIOLOGICO_ID == null) ? 0 : this.BIOLOGICO_ID.hashCode());
					
						result = prime * result + ((this.DOSIS_ID == null) ? 0 : this.DOSIS_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row33Struct other = (row33Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.BIOLOGICO_ID == null) {
							if (other.BIOLOGICO_ID != null)
								return false;
						
						} else if (!this.BIOLOGICO_ID.equals(other.BIOLOGICO_ID))
						
							return false;
					
						if (this.DOSIS_ID == null) {
							if (other.DOSIS_ID != null)
								return false;
						
						} else if (!this.DOSIS_ID.equals(other.DOSIS_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row33Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            other.DOSIS_ID = this.DOSIS_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            other.META = this.META;
	            
	}

	public void copyKeysDataTo(row33Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            	other.DOSIS_ID = this.DOSIS_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.META = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.META = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.META);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.META);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",META="+String.valueOf(META));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.BIOLOGICO_ID, other.BIOLOGICO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOSIS_ID, other.DOSIS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row33Struct row33 = new row33Struct();




	
	/**
	 * [tAdvancedHash_row33 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row33", false);
		start_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row33";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tAdvancedHash_row33 = 0;
		

			   		// connection name:row33
			   		// source node:tHashInput_6 - inputs:(after_tOracleInput_24) outputs:(row33,row33) | target node:tAdvancedHash_row33 - inputs:(row33) outputs:()
			   		// linked node: tMap_11 - inputs:(row30,row31,row33,row36) outputs:(Actualiza5,Registra5)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row33 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct> tHash_Lookup_row33 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row33Struct>getLookup(matchingModeEnum_row33);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row33", tHash_Lookup_row33);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row33 begin ] stop
 */



	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row32Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_VAC_F5_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row32Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row32Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row33.UORG_ID = next_tHashInput_6.UORG_ID;
	row33.BIOLOGICO_ID = next_tHashInput_6.BIOLOGICO_ID;
	row33.DOSIS_ID = next_tHashInput_6.DOSIS_ID;
	row33.TIEMPOS_ID = next_tHashInput_6.TIEMPOS_ID;
	row33.META = next_tHashInput_6.META;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row33 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row33"
						
						);
					}
					


			   
			   

					row33Struct row33_HashRow = new row33Struct();
		   	   	   
				
				row33_HashRow.UORG_ID = row33.UORG_ID;
				
				row33_HashRow.BIOLOGICO_ID = row33.BIOLOGICO_ID;
				
				row33_HashRow.DOSIS_ID = row33.DOSIS_ID;
				
				row33_HashRow.TIEMPOS_ID = row33.TIEMPOS_ID;
				
				row33_HashRow.META = row33.META;
				
			tHash_Lookup_row33.put(row33_HashRow);
			
            




 


	tos_count_tAdvancedHash_row33++;

/**
 * [tAdvancedHash_row33 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	

 



/**
 * [tAdvancedHash_row33 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row33 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	

 



/**
 * [tAdvancedHash_row33 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_VAC_F5_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row33 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	

tHash_Lookup_row33.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row33", true);
end_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());




/**
 * [tAdvancedHash_row33 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row33 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	

 



/**
 * [tAdvancedHash_row33 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row36Struct implements routines.system.IPersistableComparableLookupRow<row36Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return true;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICO_IDLength(){
				    return null;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				
			    public BigDecimal DOSIS_ID;

				public BigDecimal getDOSIS_ID () {
					return this.DOSIS_ID;
				}

				public Boolean DOSIS_IDIsNullable(){
				    return true;
				}
				public Boolean DOSIS_IDIsKey(){
				    return false;
				}
				public Integer DOSIS_IDLength(){
				    return null;
				}
				public Integer DOSIS_IDPrecision(){
				    return null;
				}
				public String DOSIS_IDDefault(){
				
					return "";
				
				}
				public String DOSIS_IDComment(){
				
				    return "";
				
				}
				public String DOSIS_IDPattern(){
				
					return "";
				
				}
				public String DOSIS_IDOriginalDbColumnName(){
				
					return "DOSIS_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return null;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return null;
				}
				public Integer METAPrecision(){
				    return null;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.BIOLOGICO_ID == null) ? 0 : this.BIOLOGICO_ID.hashCode());
					
						result = prime * result + ((this.DOSIS_ID == null) ? 0 : this.DOSIS_ID.hashCode());
					
						result = prime * result + ((this.TIEMPOS_ID == null) ? 0 : this.TIEMPOS_ID.hashCode());
					
						result = prime * result + ((this.META == null) ? 0 : this.META.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row36Struct other = (row36Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.BIOLOGICO_ID == null) {
							if (other.BIOLOGICO_ID != null)
								return false;
						
						} else if (!this.BIOLOGICO_ID.equals(other.BIOLOGICO_ID))
						
							return false;
					
						if (this.DOSIS_ID == null) {
							if (other.DOSIS_ID != null)
								return false;
						
						} else if (!this.DOSIS_ID.equals(other.DOSIS_ID))
						
							return false;
					
						if (this.TIEMPOS_ID == null) {
							if (other.TIEMPOS_ID != null)
								return false;
						
						} else if (!this.TIEMPOS_ID.equals(other.TIEMPOS_ID))
						
							return false;
					
						if (this.META == null) {
							if (other.META != null)
								return false;
						
						} else if (!this.META.equals(other.META))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row36Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            other.DOSIS_ID = this.DOSIS_ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            other.META = this.META;
	            
	}

	public void copyKeysDataTo(row36Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            	other.DOSIS_ID = this.DOSIS_ID;
	            	other.TIEMPOS_ID = this.TIEMPOS_ID;
	            	other.META = this.META;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
		sb.append(",DOSIS_ID="+String.valueOf(DOSIS_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",META="+String.valueOf(META));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.BIOLOGICO_ID, other.BIOLOGICO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.DOSIS_ID, other.DOSIS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIEMPOS_ID, other.TIEMPOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.META, other.META);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row36Struct row36 = new row36Struct();




	
	/**
	 * [tAdvancedHash_row36 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row36", false);
		start_Hash.put("tAdvancedHash_row36", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row36";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tAdvancedHash_row36 = 0;
		

			   		// connection name:row36
			   		// source node:tHashInput_7 - inputs:(after_tOracleInput_24) outputs:(row36,row36) | target node:tAdvancedHash_row36 - inputs:(row36) outputs:()
			   		// linked node: tMap_11 - inputs:(row30,row31,row33,row36) outputs:(Actualiza5,Registra5)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row36 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct> tHash_Lookup_row36 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row36Struct>getLookup(matchingModeEnum_row36);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row36", tHash_Lookup_row36);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row36 begin ] stop
 */



	
	/**
	 * [tHashInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_7", false);
		start_Hash.put("tHashInput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_7";
	
	
		int tos_count_tHashInput_7 = 0;
		


int nb_line_tHashInput_7 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row32Struct> tHashFile_tHashInput_7 = mf_tHashInput_7.getAdvancedMemoryHashFile("tHashFile_VAC_F5_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_7==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row32Struct> iterator_tHashInput_7 = tHashFile_tHashInput_7.iterator();
while (iterator_tHashInput_7.hasNext()) {
    row32Struct next_tHashInput_7 = iterator_tHashInput_7.next();

	row36.UORG_ID = next_tHashInput_7.UORG_ID;
	row36.BIOLOGICO_ID = next_tHashInput_7.BIOLOGICO_ID;
	row36.DOSIS_ID = next_tHashInput_7.DOSIS_ID;
	row36.TIEMPOS_ID = next_tHashInput_7.TIEMPOS_ID;
	row36.META = next_tHashInput_7.META;

 



/**
 * [tHashInput_7 begin ] stop
 */
	
	/**
	 * [tHashInput_7 main ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 


	tos_count_tHashInput_7++;

/**
 * [tHashInput_7 main ] stop
 */
	
	/**
	 * [tHashInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row36 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row36";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row36"
						
						);
					}
					


			   
			   

					row36Struct row36_HashRow = new row36Struct();
		   	   	   
				
				row36_HashRow.UORG_ID = row36.UORG_ID;
				
				row36_HashRow.BIOLOGICO_ID = row36.BIOLOGICO_ID;
				
				row36_HashRow.DOSIS_ID = row36.DOSIS_ID;
				
				row36_HashRow.TIEMPOS_ID = row36.TIEMPOS_ID;
				
				row36_HashRow.META = row36.META;
				
			tHash_Lookup_row36.put(row36_HashRow);
			
            




 


	tos_count_tAdvancedHash_row36++;

/**
 * [tAdvancedHash_row36 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row36 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row36";
	
	

 



/**
 * [tAdvancedHash_row36 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row36 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row36";
	
	

 



/**
 * [tAdvancedHash_row36 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_7 end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	
    

		
			nb_line_tHashInput_7++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_VAC_F5_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_7_NB_LINE", nb_line_tHashInput_7);       

 

ok_Hash.put("tHashInput_7", true);
end_Hash.put("tHashInput_7", System.currentTimeMillis());




/**
 * [tHashInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row36 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row36";
	
	

tHash_Lookup_row36.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row36", true);
end_Hash.put("tAdvancedHash_row36", System.currentTimeMillis());




/**
 * [tAdvancedHash_row36 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row36 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row36";
	
	

 



/**
 * [tAdvancedHash_row36 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row38Struct implements routines.system.IPersistableComparableLookupRow<row38Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FECHA == null) ? 0 : this.FECHA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row38Struct other = (row38Struct) obj;
		
						if (this.FECHA == null) {
							if (other.FECHA != null)
								return false;
						
						} else if (!this.FECHA.equals(other.FECHA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row38Struct other) {

		other.ID = this.ID;
	            other.FECHA = this.FECHA;
	            
	}

	public void copyKeysDataTo(row38Struct other) {

		other.FECHA = this.FECHA;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FECHA, other.FECHA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row38Struct row38 = new row38Struct();




	
	/**
	 * [tAdvancedHash_row38 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row38", false);
		start_Hash.put("tAdvancedHash_row38", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row38";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row38");
					}
				
		int tos_count_tAdvancedHash_row38 = 0;
		

			   		// connection name:row38
			   		// source node:tHashInput_8 - inputs:(after_tOracleInput_26) outputs:(row38,row38) | target node:tAdvancedHash_row38 - inputs:(row38) outputs:()
			   		// linked node: tMap_12 - inputs:(row37,row38) outputs:(Borra2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row38 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row38Struct>getLookup(matchingModeEnum_row38);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row38", tHash_Lookup_row38);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row38 begin ] stop
 */



	
	/**
	 * [tHashInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_8", false);
		start_Hash.put("tHashInput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_8";
	
	
		int tos_count_tHashInput_8 = 0;
		


int nb_line_tHashInput_8 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row29Struct> tHashFile_tHashInput_8 = mf_tHashInput_8.getAdvancedMemoryHashFile("tHashFile_VAC_F5_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_8==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row29Struct> iterator_tHashInput_8 = tHashFile_tHashInput_8.iterator();
while (iterator_tHashInput_8.hasNext()) {
    row29Struct next_tHashInput_8 = iterator_tHashInput_8.next();

	row38.ID = next_tHashInput_8.ID;
	row38.FECHA = next_tHashInput_8.FECHA;

 



/**
 * [tHashInput_8 begin ] stop
 */
	
	/**
	 * [tHashInput_8 main ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 


	tos_count_tHashInput_8++;

/**
 * [tHashInput_8 main ] stop
 */
	
	/**
	 * [tHashInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row38 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row38"
						
						);
					}
					


			   
			   

					row38Struct row38_HashRow = new row38Struct();
		   	   	   
				
				row38_HashRow.ID = row38.ID;
				
				row38_HashRow.FECHA = row38.FECHA;
				
			tHash_Lookup_row38.put(row38_HashRow);
			
            




 


	tos_count_tAdvancedHash_row38++;

/**
 * [tAdvancedHash_row38 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row38 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";
	
	

 



/**
 * [tAdvancedHash_row38 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row38 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";
	
	

 



/**
 * [tAdvancedHash_row38 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_8 end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	
    

		
			nb_line_tHashInput_8++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_VAC_F5_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_8_NB_LINE", nb_line_tHashInput_8);       

 

ok_Hash.put("tHashInput_8", true);
end_Hash.put("tHashInput_8", System.currentTimeMillis());




/**
 * [tHashInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row38 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";
	
	

tHash_Lookup_row38.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row38");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row38", true);
end_Hash.put("tAdvancedHash_row38", System.currentTimeMillis());




/**
 * [tAdvancedHash_row38 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row38 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";
	
	

 



/**
 * [tAdvancedHash_row38 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row40Struct implements routines.system.IPersistableComparableLookupRow<row40Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal TIPO;

				public BigDecimal getTIPO () {
					return this.TIPO;
				}

				public Boolean TIPOIsNullable(){
				    return true;
				}
				public Boolean TIPOIsKey(){
				    return false;
				}
				public Integer TIPOLength(){
				    return 0;
				}
				public Integer TIPOPrecision(){
				    return null;
				}
				public String TIPODefault(){
				
					return "";
				
				}
				public String TIPOComment(){
				
				    return "";
				
				}
				public String TIPOPattern(){
				
					return "";
				
				}
				public String TIPOOriginalDbColumnName(){
				
					return "TIPO";
				
				}

				
			    public String NOMBRE_COMERCIAL;

				public String getNOMBRE_COMERCIAL () {
					return this.NOMBRE_COMERCIAL;
				}

				public Boolean NOMBRE_COMERCIALIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_COMERCIALIsKey(){
				    return false;
				}
				public Integer NOMBRE_COMERCIALLength(){
				    return 150;
				}
				public Integer NOMBRE_COMERCIALPrecision(){
				    return 0;
				}
				public String NOMBRE_COMERCIALDefault(){
				
					return null;
				
				}
				public String NOMBRE_COMERCIALComment(){
				
				    return "";
				
				}
				public String NOMBRE_COMERCIALPattern(){
				
					return "";
				
				}
				public String NOMBRE_COMERCIALOriginalDbColumnName(){
				
					return "NOMBRE_COMERCIAL";
				
				}

				
			    public String LABORATORIO;

				public String getLABORATORIO () {
					return this.LABORATORIO;
				}

				public Boolean LABORATORIOIsNullable(){
				    return true;
				}
				public Boolean LABORATORIOIsKey(){
				    return false;
				}
				public Integer LABORATORIOLength(){
				    return 100;
				}
				public Integer LABORATORIOPrecision(){
				    return 0;
				}
				public String LABORATORIODefault(){
				
					return null;
				
				}
				public String LABORATORIOComment(){
				
				    return "";
				
				}
				public String LABORATORIOPattern(){
				
					return "";
				
				}
				public String LABORATORIOOriginalDbColumnName(){
				
					return "LABORATORIO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
						result = prime * result + ((this.TIPO == null) ? 0 : this.TIPO.hashCode());
					
						result = prime * result + ((this.NOMBRE_COMERCIAL == null) ? 0 : this.NOMBRE_COMERCIAL.hashCode());
					
						result = prime * result + ((this.LABORATORIO == null) ? 0 : this.LABORATORIO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row40Struct other = (row40Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					
						if (this.TIPO == null) {
							if (other.TIPO != null)
								return false;
						
						} else if (!this.TIPO.equals(other.TIPO))
						
							return false;
					
						if (this.NOMBRE_COMERCIAL == null) {
							if (other.NOMBRE_COMERCIAL != null)
								return false;
						
						} else if (!this.NOMBRE_COMERCIAL.equals(other.NOMBRE_COMERCIAL))
						
							return false;
					
						if (this.LABORATORIO == null) {
							if (other.LABORATORIO != null)
								return false;
						
						} else if (!this.LABORATORIO.equals(other.LABORATORIO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row40Struct other) {

		other.ID = this.ID;
	            other.TIPO = this.TIPO;
	            other.NOMBRE_COMERCIAL = this.NOMBRE_COMERCIAL;
	            other.LABORATORIO = this.LABORATORIO;
	            
	}

	public void copyKeysDataTo(row40Struct other) {

		other.ID = this.ID;
	            	other.TIPO = this.TIPO;
	            	other.NOMBRE_COMERCIAL = this.NOMBRE_COMERCIAL;
	            	other.LABORATORIO = this.LABORATORIO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NOMBRE_COMERCIAL = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.TIPO = (BigDecimal) dis.readObject();
					
					this.NOMBRE_COMERCIAL = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NOMBRE_COMERCIAL,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIPO);
					
					// String
				
						writeString(this.NOMBRE_COMERCIAL,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",TIPO="+String.valueOf(TIPO));
		sb.append(",NOMBRE_COMERCIAL="+NOMBRE_COMERCIAL);
		sb.append(",LABORATORIO="+LABORATORIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row40Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIPO, other.TIPO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NOMBRE_COMERCIAL, other.NOMBRE_COMERCIAL);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.LABORATORIO, other.LABORATORIO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_29_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row40Struct row40 = new row40Struct();




	
	/**
	 * [tAdvancedHash_row40 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row40", false);
		start_Hash.put("tAdvancedHash_row40", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row40";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row40");
					}
				
		int tos_count_tAdvancedHash_row40 = 0;
		

			   		// connection name:row40
			   		// source node:tOracleInput_29 - inputs:(after_tOracleInput_27) outputs:(row40,row40) | target node:tAdvancedHash_row40 - inputs:(row40) outputs:()
			   		// linked node: tMap_10 - inputs:(row39,row40,row42) outputs:(InsertarInsumos,ActualizarInsumos)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row40 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row40Struct>getLookup(matchingModeEnum_row40);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row40", tHash_Lookup_row40);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row40 begin ] stop
 */



	
	/**
	 * [tOracleInput_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_29", false);
		start_Hash.put("tOracleInput_29", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_29";
	
	
		int tos_count_tOracleInput_29 = 0;
		
	


	
		    int nb_line_tOracleInput_29 = 0;
		    java.sql.Connection conn_tOracleInput_29 = null;
				conn_tOracleInput_29 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_29 = false;
				boolean isConnectionWrapped_tOracleInput_29 = !(conn_tOracleInput_29 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_29.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_29 = null;
                if (isConnectionWrapped_tOracleInput_29) {
					unwrappedOraConn_tOracleInput_29 = conn_tOracleInput_29.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_29 != null) {
                        isTimeZoneNull_tOracleInput_29 = (unwrappedOraConn_tOracleInput_29.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_29 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_29).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_29) {
					java.sql.Statement stmtGetTZ_tOracleInput_29 = conn_tOracleInput_29.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_29 = stmtGetTZ_tOracleInput_29.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_29 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_29.next()) {
						sessionTimezone_tOracleInput_29 = rsGetTZ_tOracleInput_29.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_29 && unwrappedOraConn_tOracleInput_29 != null) {
                        unwrappedOraConn_tOracleInput_29.setSessionTimeZone(sessionTimezone_tOracleInput_29);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_29).setSessionTimeZone(sessionTimezone_tOracleInput_29);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_29 = conn_tOracleInput_29.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_29.setFetchSize(1000);


		    String dbquery_tOracleInput_29 = "\nSELECT\n    ID,\n    TIPO,\n    NOMBRE_COMERCIAL,\n    LABORATORIO\nFROM\n    BVAC_INSUMOS\n";
		    

		    globalMap.put("tOracleInput_29_QUERY",dbquery_tOracleInput_29);

		    java.sql.ResultSet rs_tOracleInput_29 = null;

		    try {
		    	rs_tOracleInput_29 = stmt_tOracleInput_29.executeQuery(dbquery_tOracleInput_29);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_29 = rs_tOracleInput_29.getMetaData();
		    	int colQtyInRs_tOracleInput_29 = rsmd_tOracleInput_29.getColumnCount();

		    String tmpContent_tOracleInput_29 = null;
		    
		    
		    while (rs_tOracleInput_29.next()) {
		        nb_line_tOracleInput_29++;
		        
							if(colQtyInRs_tOracleInput_29 < 1) {
								row40.ID = null;
							} else {
		                          
					if(rs_tOracleInput_29.getObject(1) != null) {
						row40.ID = rs_tOracleInput_29.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_29 < 2) {
								row40.TIPO = null;
							} else {
		                          
					if(rs_tOracleInput_29.getObject(2) != null) {
						row40.TIPO = rs_tOracleInput_29.getBigDecimal(2);
					} else {
				
						row40.TIPO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_29 < 3) {
								row40.NOMBRE_COMERCIAL = null;
							} else {
	                         		
        	row40.NOMBRE_COMERCIAL = routines.system.JDBCUtil.getString(rs_tOracleInput_29, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_29 < 4) {
								row40.LABORATORIO = null;
							} else {
	                         		
        	row40.LABORATORIO = routines.system.JDBCUtil.getString(rs_tOracleInput_29, 4, false);
		                    }
					




 



/**
 * [tOracleInput_29 begin ] stop
 */
	
	/**
	 * [tOracleInput_29 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_29";
	
	

 


	tos_count_tOracleInput_29++;

/**
 * [tOracleInput_29 main ] stop
 */
	
	/**
	 * [tOracleInput_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_29";
	
	

 



/**
 * [tOracleInput_29 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row40 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row40"
						
						);
					}
					


			   
			   

					row40Struct row40_HashRow = new row40Struct();
		   	   	   
				
				row40_HashRow.ID = row40.ID;
				
				row40_HashRow.TIPO = row40.TIPO;
				
				row40_HashRow.NOMBRE_COMERCIAL = row40.NOMBRE_COMERCIAL;
				
				row40_HashRow.LABORATORIO = row40.LABORATORIO;
				
			tHash_Lookup_row40.put(row40_HashRow);
			
            




 


	tos_count_tAdvancedHash_row40++;

/**
 * [tAdvancedHash_row40 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row40 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";
	
	

 



/**
 * [tAdvancedHash_row40 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row40 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";
	
	

 



/**
 * [tAdvancedHash_row40 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_29";
	
	

 



/**
 * [tOracleInput_29 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_29 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_29";
	
	

}
}finally{
	if (rs_tOracleInput_29 != null) {
		rs_tOracleInput_29.close();
	}
	if (stmt_tOracleInput_29 != null) {
		stmt_tOracleInput_29.close();
	}
}

globalMap.put("tOracleInput_29_NB_LINE",nb_line_tOracleInput_29);
 

ok_Hash.put("tOracleInput_29", true);
end_Hash.put("tOracleInput_29", System.currentTimeMillis());




/**
 * [tOracleInput_29 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row40 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";
	
	

tHash_Lookup_row40.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row40");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row40", true);
end_Hash.put("tAdvancedHash_row40", System.currentTimeMillis());




/**
 * [tAdvancedHash_row40 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_29 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_29";
	
	

 



/**
 * [tOracleInput_29 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row40 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";
	
	

 



/**
 * [tAdvancedHash_row40 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_29_SUBPROCESS_STATE", 1);
	}
	


public static class row42Struct implements routines.system.IPersistableComparableLookupRow<row42Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row42Struct other = (row42Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row42Struct other) {

		other.ID = this.ID;
	            
	}

	public void copyKeysDataTo(row42Struct other) {

		other.ID = this.ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_28_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row42Struct row42 = new row42Struct();




	
	/**
	 * [tAdvancedHash_row42 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row42", false);
		start_Hash.put("tAdvancedHash_row42", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row42";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tAdvancedHash_row42 = 0;
		

			   		// connection name:row42
			   		// source node:tOracleInput_28 - inputs:(after_tOracleInput_27) outputs:(row42,row42) | target node:tAdvancedHash_row42 - inputs:(row42) outputs:()
			   		// linked node: tMap_10 - inputs:(row39,row40,row42) outputs:(InsertarInsumos,ActualizarInsumos)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row42 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct> tHash_Lookup_row42 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row42Struct>getLookup(matchingModeEnum_row42);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row42", tHash_Lookup_row42);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row42 begin ] stop
 */



	
	/**
	 * [tOracleInput_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_28", false);
		start_Hash.put("tOracleInput_28", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_28";
	
	
		int tos_count_tOracleInput_28 = 0;
		
	


	
		    int nb_line_tOracleInput_28 = 0;
		    java.sql.Connection conn_tOracleInput_28 = null;
				conn_tOracleInput_28 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_28 = false;
				boolean isConnectionWrapped_tOracleInput_28 = !(conn_tOracleInput_28 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_28.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_28 = null;
                if (isConnectionWrapped_tOracleInput_28) {
					unwrappedOraConn_tOracleInput_28 = conn_tOracleInput_28.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_28 != null) {
                        isTimeZoneNull_tOracleInput_28 = (unwrappedOraConn_tOracleInput_28.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_28 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_28).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_28) {
					java.sql.Statement stmtGetTZ_tOracleInput_28 = conn_tOracleInput_28.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_28 = stmtGetTZ_tOracleInput_28.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_28 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_28.next()) {
						sessionTimezone_tOracleInput_28 = rsGetTZ_tOracleInput_28.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_28 && unwrappedOraConn_tOracleInput_28 != null) {
                        unwrappedOraConn_tOracleInput_28.setSessionTimeZone(sessionTimezone_tOracleInput_28);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_28).setSessionTimeZone(sessionTimezone_tOracleInput_28);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_28 = conn_tOracleInput_28.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_28.setFetchSize(1000);


		    String dbquery_tOracleInput_28 = "SELECT  ID \nFROM BVAC_INSUMOS";
		    

		    globalMap.put("tOracleInput_28_QUERY",dbquery_tOracleInput_28);

		    java.sql.ResultSet rs_tOracleInput_28 = null;

		    try {
		    	rs_tOracleInput_28 = stmt_tOracleInput_28.executeQuery(dbquery_tOracleInput_28);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_28 = rs_tOracleInput_28.getMetaData();
		    	int colQtyInRs_tOracleInput_28 = rsmd_tOracleInput_28.getColumnCount();

		    String tmpContent_tOracleInput_28 = null;
		    
		    
		    while (rs_tOracleInput_28.next()) {
		        nb_line_tOracleInput_28++;
		        
							if(colQtyInRs_tOracleInput_28 < 1) {
								row42.ID = null;
							} else {
		                          
					if(rs_tOracleInput_28.getObject(1) != null) {
						row42.ID = rs_tOracleInput_28.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_28 begin ] stop
 */
	
	/**
	 * [tOracleInput_28 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_28";
	
	

 


	tos_count_tOracleInput_28++;

/**
 * [tOracleInput_28 main ] stop
 */
	
	/**
	 * [tOracleInput_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_28";
	
	

 



/**
 * [tOracleInput_28 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row42"
						
						);
					}
					


			   
			   

					row42Struct row42_HashRow = new row42Struct();
		   	   	   
				
				row42_HashRow.ID = row42.ID;
				
			tHash_Lookup_row42.put(row42_HashRow);
			
            




 


	tos_count_tAdvancedHash_row42++;

/**
 * [tAdvancedHash_row42 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row42 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";
	
	

 



/**
 * [tAdvancedHash_row42 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row42 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";
	
	

 



/**
 * [tAdvancedHash_row42 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_28";
	
	

 



/**
 * [tOracleInput_28 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_28 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_28";
	
	

}
}finally{
	if (rs_tOracleInput_28 != null) {
		rs_tOracleInput_28.close();
	}
	if (stmt_tOracleInput_28 != null) {
		stmt_tOracleInput_28.close();
	}
}

globalMap.put("tOracleInput_28_NB_LINE",nb_line_tOracleInput_28);
 

ok_Hash.put("tOracleInput_28", true);
end_Hash.put("tOracleInput_28", System.currentTimeMillis());




/**
 * [tOracleInput_28 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";
	
	

tHash_Lookup_row42.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row42", true);
end_Hash.put("tAdvancedHash_row42", System.currentTimeMillis());




/**
 * [tAdvancedHash_row42 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_28 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_28";
	
	

 



/**
 * [tOracleInput_28 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";
	
	

 



/**
 * [tAdvancedHash_row42 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_28_SUBPROCESS_STATE", 1);
	}
	


public static class row44Struct implements routines.system.IPersistableComparableLookupRow<row44Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String LOTE;

				public String getLOTE () {
					return this.LOTE;
				}

				public Boolean LOTEIsNullable(){
				    return true;
				}
				public Boolean LOTEIsKey(){
				    return false;
				}
				public Integer LOTELength(){
				    return 25;
				}
				public Integer LOTEPrecision(){
				    return 0;
				}
				public String LOTEDefault(){
				
					return null;
				
				}
				public String LOTEComment(){
				
				    return "";
				
				}
				public String LOTEPattern(){
				
					return "";
				
				}
				public String LOTEOriginalDbColumnName(){
				
					return "LOTE";
				
				}

				
			    public java.util.Date FECHA_VENCIMIENTO;

				public java.util.Date getFECHA_VENCIMIENTO () {
					return this.FECHA_VENCIMIENTO;
				}

				public Boolean FECHA_VENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_VENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_VENCIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_VENCIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_VENCIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_VENCIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_VENCIMIENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_VENCIMIENTOOriginalDbColumnName(){
				
					return "FECHA_VENCIMIENTO";
				
				}

				
			    public BigDecimal INSUMOS_ID;

				public BigDecimal getINSUMOS_ID () {
					return this.INSUMOS_ID;
				}

				public Boolean INSUMOS_IDIsNullable(){
				    return true;
				}
				public Boolean INSUMOS_IDIsKey(){
				    return false;
				}
				public Integer INSUMOS_IDLength(){
				    return 0;
				}
				public Integer INSUMOS_IDPrecision(){
				    return null;
				}
				public String INSUMOS_IDDefault(){
				
					return "";
				
				}
				public String INSUMOS_IDComment(){
				
				    return "";
				
				}
				public String INSUMOS_IDPattern(){
				
					return "";
				
				}
				public String INSUMOS_IDOriginalDbColumnName(){
				
					return "INSUMOS_ID";
				
				}

				
			    public java.util.Date FECHA_INGRESO;

				public java.util.Date getFECHA_INGRESO () {
					return this.FECHA_INGRESO;
				}

				public Boolean FECHA_INGRESOIsNullable(){
				    return true;
				}
				public Boolean FECHA_INGRESOIsKey(){
				    return false;
				}
				public Integer FECHA_INGRESOLength(){
				    return 0;
				}
				public Integer FECHA_INGRESOPrecision(){
				    return 0;
				}
				public String FECHA_INGRESODefault(){
				
					return null;
				
				}
				public String FECHA_INGRESOComment(){
				
				    return "";
				
				}
				public String FECHA_INGRESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_INGRESOOriginalDbColumnName(){
				
					return "FECHA_INGRESO";
				
				}

				
			    public String TESQUEMA;

				public String getTESQUEMA () {
					return this.TESQUEMA;
				}

				public Boolean TESQUEMAIsNullable(){
				    return true;
				}
				public Boolean TESQUEMAIsKey(){
				    return false;
				}
				public Integer TESQUEMALength(){
				    return 10;
				}
				public Integer TESQUEMAPrecision(){
				    return 0;
				}
				public String TESQUEMADefault(){
				
					return null;
				
				}
				public String TESQUEMAComment(){
				
				    return "";
				
				}
				public String TESQUEMAPattern(){
				
					return "";
				
				}
				public String TESQUEMAOriginalDbColumnName(){
				
					return "TESQUEMA";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 250;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal BIOLOGICO_ID;

				public BigDecimal getBIOLOGICO_ID () {
					return this.BIOLOGICO_ID;
				}

				public Boolean BIOLOGICO_IDIsNullable(){
				    return true;
				}
				public Boolean BIOLOGICO_IDIsKey(){
				    return false;
				}
				public Integer BIOLOGICO_IDLength(){
				    return 0;
				}
				public Integer BIOLOGICO_IDPrecision(){
				    return null;
				}
				public String BIOLOGICO_IDDefault(){
				
					return "";
				
				}
				public String BIOLOGICO_IDComment(){
				
				    return "";
				
				}
				public String BIOLOGICO_IDPattern(){
				
					return "";
				
				}
				public String BIOLOGICO_IDOriginalDbColumnName(){
				
					return "BIOLOGICO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
						result = prime * result + ((this.LOTE == null) ? 0 : this.LOTE.hashCode());
					
						result = prime * result + ((this.FECHA_VENCIMIENTO == null) ? 0 : this.FECHA_VENCIMIENTO.hashCode());
					
						result = prime * result + ((this.INSUMOS_ID == null) ? 0 : this.INSUMOS_ID.hashCode());
					
						result = prime * result + ((this.FECHA_INGRESO == null) ? 0 : this.FECHA_INGRESO.hashCode());
					
						result = prime * result + ((this.TESQUEMA == null) ? 0 : this.TESQUEMA.hashCode());
					
						result = prime * result + ((this.NOMBRE == null) ? 0 : this.NOMBRE.hashCode());
					
						result = prime * result + ((this.BIOLOGICO_ID == null) ? 0 : this.BIOLOGICO_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row44Struct other = (row44Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					
						if (this.LOTE == null) {
							if (other.LOTE != null)
								return false;
						
						} else if (!this.LOTE.equals(other.LOTE))
						
							return false;
					
						if (this.FECHA_VENCIMIENTO == null) {
							if (other.FECHA_VENCIMIENTO != null)
								return false;
						
						} else if (!this.FECHA_VENCIMIENTO.equals(other.FECHA_VENCIMIENTO))
						
							return false;
					
						if (this.INSUMOS_ID == null) {
							if (other.INSUMOS_ID != null)
								return false;
						
						} else if (!this.INSUMOS_ID.equals(other.INSUMOS_ID))
						
							return false;
					
						if (this.FECHA_INGRESO == null) {
							if (other.FECHA_INGRESO != null)
								return false;
						
						} else if (!this.FECHA_INGRESO.equals(other.FECHA_INGRESO))
						
							return false;
					
						if (this.TESQUEMA == null) {
							if (other.TESQUEMA != null)
								return false;
						
						} else if (!this.TESQUEMA.equals(other.TESQUEMA))
						
							return false;
					
						if (this.NOMBRE == null) {
							if (other.NOMBRE != null)
								return false;
						
						} else if (!this.NOMBRE.equals(other.NOMBRE))
						
							return false;
					
						if (this.BIOLOGICO_ID == null) {
							if (other.BIOLOGICO_ID != null)
								return false;
						
						} else if (!this.BIOLOGICO_ID.equals(other.BIOLOGICO_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row44Struct other) {

		other.ID = this.ID;
	            other.LOTE = this.LOTE;
	            other.FECHA_VENCIMIENTO = this.FECHA_VENCIMIENTO;
	            other.INSUMOS_ID = this.INSUMOS_ID;
	            other.FECHA_INGRESO = this.FECHA_INGRESO;
	            other.TESQUEMA = this.TESQUEMA;
	            other.NOMBRE = this.NOMBRE;
	            other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            
	}

	public void copyKeysDataTo(row44Struct other) {

		other.ID = this.ID;
	            	other.LOTE = this.LOTE;
	            	other.FECHA_VENCIMIENTO = this.FECHA_VENCIMIENTO;
	            	other.INSUMOS_ID = this.INSUMOS_ID;
	            	other.FECHA_INGRESO = this.FECHA_INGRESO;
	            	other.TESQUEMA = this.TESQUEMA;
	            	other.NOMBRE = this.NOMBRE;
	            	other.BIOLOGICO_ID = this.BIOLOGICO_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.LOTE = readString(dis);
					
					this.FECHA_VENCIMIENTO = readDate(dis);
					
						this.INSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_INGRESO = readDate(dis);
					
					this.TESQUEMA = readString(dis);
					
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.LOTE = readString(dis);
					
					this.FECHA_VENCIMIENTO = readDate(dis);
					
						this.INSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_INGRESO = readDate(dis);
					
					this.TESQUEMA = readString(dis);
					
					this.NOMBRE = readString(dis);
					
						this.BIOLOGICO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_VENCIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BIOLOGICO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_VENCIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// String
				
						writeString(this.TESQUEMA,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.BIOLOGICO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",LOTE="+LOTE);
		sb.append(",FECHA_VENCIMIENTO="+String.valueOf(FECHA_VENCIMIENTO));
		sb.append(",INSUMOS_ID="+String.valueOf(INSUMOS_ID));
		sb.append(",FECHA_INGRESO="+String.valueOf(FECHA_INGRESO));
		sb.append(",TESQUEMA="+TESQUEMA);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",BIOLOGICO_ID="+String.valueOf(BIOLOGICO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.LOTE, other.LOTE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FECHA_VENCIMIENTO, other.FECHA_VENCIMIENTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.INSUMOS_ID, other.INSUMOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FECHA_INGRESO, other.FECHA_INGRESO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TESQUEMA, other.TESQUEMA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NOMBRE, other.NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.BIOLOGICO_ID, other.BIOLOGICO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_31_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row44Struct row44 = new row44Struct();




	
	/**
	 * [tAdvancedHash_row44 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row44", false);
		start_Hash.put("tAdvancedHash_row44", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row44";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row44");
					}
				
		int tos_count_tAdvancedHash_row44 = 0;
		

			   		// connection name:row44
			   		// source node:tOracleInput_31 - inputs:(after_tOracleInput_30) outputs:(row44,row44) | target node:tAdvancedHash_row44 - inputs:(row44) outputs:()
			   		// linked node: tMap_13 - inputs:(row43,row44,row45) outputs:(InsertarLotes,ActualizarLotes)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row44 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct> tHash_Lookup_row44 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row44Struct>getLookup(matchingModeEnum_row44);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row44", tHash_Lookup_row44);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row44 begin ] stop
 */



	
	/**
	 * [tOracleInput_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_31", false);
		start_Hash.put("tOracleInput_31", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_31";
	
	
		int tos_count_tOracleInput_31 = 0;
		
	


	
		    int nb_line_tOracleInput_31 = 0;
		    java.sql.Connection conn_tOracleInput_31 = null;
				conn_tOracleInput_31 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_31 = false;
				boolean isConnectionWrapped_tOracleInput_31 = !(conn_tOracleInput_31 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_31.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_31 = null;
                if (isConnectionWrapped_tOracleInput_31) {
					unwrappedOraConn_tOracleInput_31 = conn_tOracleInput_31.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_31 != null) {
                        isTimeZoneNull_tOracleInput_31 = (unwrappedOraConn_tOracleInput_31.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_31 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_31).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_31) {
					java.sql.Statement stmtGetTZ_tOracleInput_31 = conn_tOracleInput_31.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_31 = stmtGetTZ_tOracleInput_31.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_31 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_31.next()) {
						sessionTimezone_tOracleInput_31 = rsGetTZ_tOracleInput_31.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_31 && unwrappedOraConn_tOracleInput_31 != null) {
                        unwrappedOraConn_tOracleInput_31.setSessionTimeZone(sessionTimezone_tOracleInput_31);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_31).setSessionTimeZone(sessionTimezone_tOracleInput_31);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_31 = conn_tOracleInput_31.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_31.setFetchSize(1000);


		    String dbquery_tOracleInput_31 = "\nSELECT\n    ID,\n    LOTE,\n    FECHA_VENCIMIENTO,\n    INSUMOS_ID,\n    FECHA_INGRESO,\n    TESQUEMA,\n 	NOMBRE,\n	B"
+"IOLOGICO_ID\nFROM\n    BVAC_LOTES\n";
		    

		    globalMap.put("tOracleInput_31_QUERY",dbquery_tOracleInput_31);

		    java.sql.ResultSet rs_tOracleInput_31 = null;

		    try {
		    	rs_tOracleInput_31 = stmt_tOracleInput_31.executeQuery(dbquery_tOracleInput_31);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_31 = rs_tOracleInput_31.getMetaData();
		    	int colQtyInRs_tOracleInput_31 = rsmd_tOracleInput_31.getColumnCount();

		    String tmpContent_tOracleInput_31 = null;
		    
		    
		    while (rs_tOracleInput_31.next()) {
		        nb_line_tOracleInput_31++;
		        
							if(colQtyInRs_tOracleInput_31 < 1) {
								row44.ID = null;
							} else {
		                          
					if(rs_tOracleInput_31.getObject(1) != null) {
						row44.ID = rs_tOracleInput_31.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_31 < 2) {
								row44.LOTE = null;
							} else {
	                         		
        	row44.LOTE = routines.system.JDBCUtil.getString(rs_tOracleInput_31, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_31 < 3) {
								row44.FECHA_VENCIMIENTO = null;
							} else {
										
			row44.FECHA_VENCIMIENTO = routines.system.JDBCUtil.getDate(rs_tOracleInput_31, 3);
		                    }
							if(colQtyInRs_tOracleInput_31 < 4) {
								row44.INSUMOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_31.getObject(4) != null) {
						row44.INSUMOS_ID = rs_tOracleInput_31.getBigDecimal(4);
					} else {
				
						row44.INSUMOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_31 < 5) {
								row44.FECHA_INGRESO = null;
							} else {
										
			row44.FECHA_INGRESO = routines.system.JDBCUtil.getDate(rs_tOracleInput_31, 5);
		                    }
							if(colQtyInRs_tOracleInput_31 < 6) {
								row44.TESQUEMA = null;
							} else {
	                         		
        	row44.TESQUEMA = routines.system.JDBCUtil.getString(rs_tOracleInput_31, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_31 < 7) {
								row44.NOMBRE = null;
							} else {
	                         		
        	row44.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_31, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_31 < 8) {
								row44.BIOLOGICO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_31.getObject(8) != null) {
						row44.BIOLOGICO_ID = rs_tOracleInput_31.getBigDecimal(8);
					} else {
				
						row44.BIOLOGICO_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_31 begin ] stop
 */
	
	/**
	 * [tOracleInput_31 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_31";
	
	

 


	tos_count_tOracleInput_31++;

/**
 * [tOracleInput_31 main ] stop
 */
	
	/**
	 * [tOracleInput_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_31";
	
	

 



/**
 * [tOracleInput_31 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row44 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row44"
						
						);
					}
					


			   
			   

					row44Struct row44_HashRow = new row44Struct();
		   	   	   
				
				row44_HashRow.ID = row44.ID;
				
				row44_HashRow.LOTE = row44.LOTE;
				
				row44_HashRow.FECHA_VENCIMIENTO = row44.FECHA_VENCIMIENTO;
				
				row44_HashRow.INSUMOS_ID = row44.INSUMOS_ID;
				
				row44_HashRow.FECHA_INGRESO = row44.FECHA_INGRESO;
				
				row44_HashRow.TESQUEMA = row44.TESQUEMA;
				
				row44_HashRow.NOMBRE = row44.NOMBRE;
				
				row44_HashRow.BIOLOGICO_ID = row44.BIOLOGICO_ID;
				
			tHash_Lookup_row44.put(row44_HashRow);
			
            




 


	tos_count_tAdvancedHash_row44++;

/**
 * [tAdvancedHash_row44 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row44 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";
	
	

 



/**
 * [tAdvancedHash_row44 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row44 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";
	
	

 



/**
 * [tAdvancedHash_row44 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_31";
	
	

 



/**
 * [tOracleInput_31 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_31 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_31";
	
	

}
}finally{
	if (rs_tOracleInput_31 != null) {
		rs_tOracleInput_31.close();
	}
	if (stmt_tOracleInput_31 != null) {
		stmt_tOracleInput_31.close();
	}
}

globalMap.put("tOracleInput_31_NB_LINE",nb_line_tOracleInput_31);
 

ok_Hash.put("tOracleInput_31", true);
end_Hash.put("tOracleInput_31", System.currentTimeMillis());




/**
 * [tOracleInput_31 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row44 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";
	
	

tHash_Lookup_row44.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row44");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row44", true);
end_Hash.put("tAdvancedHash_row44", System.currentTimeMillis());




/**
 * [tAdvancedHash_row44 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_31 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_31";
	
	

 



/**
 * [tOracleInput_31 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row44 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";
	
	

 



/**
 * [tAdvancedHash_row44 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_31_SUBPROCESS_STATE", 1);
	}
	


public static class row45Struct implements routines.system.IPersistableComparableLookupRow<row45Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row45Struct other = (row45Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row45Struct other) {

		other.ID = this.ID;
	            
	}

	public void copyKeysDataTo(row45Struct other) {

		other.ID = this.ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_32Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_32_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row45Struct row45 = new row45Struct();




	
	/**
	 * [tAdvancedHash_row45 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row45", false);
		start_Hash.put("tAdvancedHash_row45", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row45";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row45");
					}
				
		int tos_count_tAdvancedHash_row45 = 0;
		

			   		// connection name:row45
			   		// source node:tOracleInput_32 - inputs:(after_tOracleInput_30) outputs:(row45,row45) | target node:tAdvancedHash_row45 - inputs:(row45) outputs:()
			   		// linked node: tMap_13 - inputs:(row43,row44,row45) outputs:(InsertarLotes,ActualizarLotes)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row45 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct> tHash_Lookup_row45 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row45Struct>getLookup(matchingModeEnum_row45);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row45", tHash_Lookup_row45);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row45 begin ] stop
 */



	
	/**
	 * [tOracleInput_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_32", false);
		start_Hash.put("tOracleInput_32", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_32";
	
	
		int tos_count_tOracleInput_32 = 0;
		
	


	
		    int nb_line_tOracleInput_32 = 0;
		    java.sql.Connection conn_tOracleInput_32 = null;
				conn_tOracleInput_32 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_32 = false;
				boolean isConnectionWrapped_tOracleInput_32 = !(conn_tOracleInput_32 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_32.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_32 = null;
                if (isConnectionWrapped_tOracleInput_32) {
					unwrappedOraConn_tOracleInput_32 = conn_tOracleInput_32.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_32 != null) {
                        isTimeZoneNull_tOracleInput_32 = (unwrappedOraConn_tOracleInput_32.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_32 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_32).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_32) {
					java.sql.Statement stmtGetTZ_tOracleInput_32 = conn_tOracleInput_32.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_32 = stmtGetTZ_tOracleInput_32.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_32 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_32.next()) {
						sessionTimezone_tOracleInput_32 = rsGetTZ_tOracleInput_32.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_32 && unwrappedOraConn_tOracleInput_32 != null) {
                        unwrappedOraConn_tOracleInput_32.setSessionTimeZone(sessionTimezone_tOracleInput_32);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_32).setSessionTimeZone(sessionTimezone_tOracleInput_32);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_32 = conn_tOracleInput_32.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_32.setFetchSize(1000);


		    String dbquery_tOracleInput_32 = "\nSELECT  ID FROM BVAC_LOTES\n";
		    

		    globalMap.put("tOracleInput_32_QUERY",dbquery_tOracleInput_32);

		    java.sql.ResultSet rs_tOracleInput_32 = null;

		    try {
		    	rs_tOracleInput_32 = stmt_tOracleInput_32.executeQuery(dbquery_tOracleInput_32);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_32 = rs_tOracleInput_32.getMetaData();
		    	int colQtyInRs_tOracleInput_32 = rsmd_tOracleInput_32.getColumnCount();

		    String tmpContent_tOracleInput_32 = null;
		    
		    
		    while (rs_tOracleInput_32.next()) {
		        nb_line_tOracleInput_32++;
		        
							if(colQtyInRs_tOracleInput_32 < 1) {
								row45.ID = null;
							} else {
		                          
					if(rs_tOracleInput_32.getObject(1) != null) {
						row45.ID = rs_tOracleInput_32.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_32 begin ] stop
 */
	
	/**
	 * [tOracleInput_32 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_32";
	
	

 


	tos_count_tOracleInput_32++;

/**
 * [tOracleInput_32 main ] stop
 */
	
	/**
	 * [tOracleInput_32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_32";
	
	

 



/**
 * [tOracleInput_32 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row45 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row45"
						
						);
					}
					


			   
			   

					row45Struct row45_HashRow = new row45Struct();
		   	   	   
				
				row45_HashRow.ID = row45.ID;
				
			tHash_Lookup_row45.put(row45_HashRow);
			
            




 


	tos_count_tAdvancedHash_row45++;

/**
 * [tAdvancedHash_row45 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row45 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";
	
	

 



/**
 * [tAdvancedHash_row45 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row45 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";
	
	

 



/**
 * [tAdvancedHash_row45 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_32 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_32";
	
	

 



/**
 * [tOracleInput_32 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_32 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_32";
	
	

}
}finally{
	if (rs_tOracleInput_32 != null) {
		rs_tOracleInput_32.close();
	}
	if (stmt_tOracleInput_32 != null) {
		stmt_tOracleInput_32.close();
	}
}

globalMap.put("tOracleInput_32_NB_LINE",nb_line_tOracleInput_32);
 

ok_Hash.put("tOracleInput_32", true);
end_Hash.put("tOracleInput_32", System.currentTimeMillis());




/**
 * [tOracleInput_32 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row45 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";
	
	

tHash_Lookup_row45.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row45");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row45", true);
end_Hash.put("tAdvancedHash_row45", System.currentTimeMillis());




/**
 * [tAdvancedHash_row45 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_32 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_32";
	
	

 



/**
 * [tOracleInput_32 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row45 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";
	
	

 



/**
 * [tAdvancedHash_row45 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_32_SUBPROCESS_STATE", 1);
	}
	


public static class row48Struct implements routines.system.IPersistableComparableLookupRow<row48Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal LOTES_ID;

				public BigDecimal getLOTES_ID () {
					return this.LOTES_ID;
				}

				public Boolean LOTES_IDIsNullable(){
				    return true;
				}
				public Boolean LOTES_IDIsKey(){
				    return false;
				}
				public Integer LOTES_IDLength(){
				    return null;
				}
				public Integer LOTES_IDPrecision(){
				    return null;
				}
				public String LOTES_IDDefault(){
				
					return "";
				
				}
				public String LOTES_IDComment(){
				
				    return "";
				
				}
				public String LOTES_IDPattern(){
				
					return "";
				
				}
				public String LOTES_IDOriginalDbColumnName(){
				
					return "LOTES_ID";
				
				}

				
			    public BigDecimal APLICADAS;

				public BigDecimal getAPLICADAS () {
					return this.APLICADAS;
				}

				public Boolean APLICADASIsNullable(){
				    return true;
				}
				public Boolean APLICADASIsKey(){
				    return false;
				}
				public Integer APLICADASLength(){
				    return null;
				}
				public Integer APLICADASPrecision(){
				    return null;
				}
				public String APLICADASDefault(){
				
					return "";
				
				}
				public String APLICADASComment(){
				
				    return "";
				
				}
				public String APLICADASPattern(){
				
					return "";
				
				}
				public String APLICADASOriginalDbColumnName(){
				
					return "APLICADAS";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.LOTES_ID == null) ? 0 : this.LOTES_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row48Struct other = (row48Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.LOTES_ID == null) {
							if (other.LOTES_ID != null)
								return false;
						
						} else if (!this.LOTES_ID.equals(other.LOTES_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row48Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.LOTES_ID = this.LOTES_ID;
	            other.APLICADAS = this.APLICADAS;
	            
	}

	public void copyKeysDataTo(row48Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.LOTES_ID = this.LOTES_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LOTES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LOTES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.APLICADAS = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.APLICADAS = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.APLICADAS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.APLICADAS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",LOTES_ID="+String.valueOf(LOTES_ID));
		sb.append(",APLICADAS="+String.valueOf(APLICADAS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row48Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.LOTES_ID, other.LOTES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_36Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_36_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row48Struct row48 = new row48Struct();




	
	/**
	 * [tAdvancedHash_row48 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row48", false);
		start_Hash.put("tAdvancedHash_row48", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row48";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row48");
					}
				
		int tos_count_tAdvancedHash_row48 = 0;
		

			   		// connection name:row48
			   		// source node:tOracleInput_36 - inputs:(after_tOracleInput_37) outputs:(row48,row48) | target node:tAdvancedHash_row48 - inputs:(row48) outputs:()
			   		// linked node: tMap_14 - inputs:(row47,row48,row49,row51,row55,row57,row46,row56) outputs:(Lotes)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row48 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct> tHash_Lookup_row48 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row48Struct>getLookup(matchingModeEnum_row48);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row48", tHash_Lookup_row48);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row48 begin ] stop
 */



	
	/**
	 * [tOracleInput_36 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_36", false);
		start_Hash.put("tOracleInput_36", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_36";
	
	
		int tos_count_tOracleInput_36 = 0;
		
	


	
		    int nb_line_tOracleInput_36 = 0;
		    java.sql.Connection conn_tOracleInput_36 = null;
				conn_tOracleInput_36 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_36 = false;
				boolean isConnectionWrapped_tOracleInput_36 = !(conn_tOracleInput_36 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_36.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_36 = null;
                if (isConnectionWrapped_tOracleInput_36) {
					unwrappedOraConn_tOracleInput_36 = conn_tOracleInput_36.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_36 != null) {
                        isTimeZoneNull_tOracleInput_36 = (unwrappedOraConn_tOracleInput_36.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_36 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_36).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_36) {
					java.sql.Statement stmtGetTZ_tOracleInput_36 = conn_tOracleInput_36.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_36 = stmtGetTZ_tOracleInput_36.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_36 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_36.next()) {
						sessionTimezone_tOracleInput_36 = rsGetTZ_tOracleInput_36.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_36 && unwrappedOraConn_tOracleInput_36 != null) {
                        unwrappedOraConn_tOracleInput_36.setSessionTimeZone(sessionTimezone_tOracleInput_36);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_36).setSessionTimeZone(sessionTimezone_tOracleInput_36);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_36 = conn_tOracleInput_36.createStatement();

		    String dbquery_tOracleInput_36 = "\nSELECT \n    UORG_ID,\n    LOTES_ID,\n    COUNT(LOTES_ID) AS APLICADAS\nFROM \n(\n    SELECT \n        APL.UORG_ID, "
+"\n        VINV.ID AS INVENTARIO_VACUNA,\n        JINV.ID AS INVENTARIO_JERINGA,\n        DINV.ID AS INVENTARIO_DILUYENTE"
+"\n    FROM VAC_APLICADAS APL\n    INNER JOIN MED_MOVIMIENTOS  MOV  ON APL.MOVIMIENTOS_ID = MOV.ID\n    INNER JOIN MED_TMO"
+"VIMIENTOS TMOV ON MOV.TMOVIMIENTOS_ID = TMOV.ID\n    INNER JOIN VAC_DAPLICADAS   DAPL ON DAPL.APLICADAS_ID = APL.ID\n   "
+" LEFT JOIN VAC_INVENTARIOS   VAC  ON DAPL.INVENTARIOS_ID = VAC.ID\n    LEFT JOIN VAC_INVENTARIOS   JER  ON DAPL.LOTEJERI"
+"NGA_ID = JER.ID\n    LEFT JOIN VAC_DILUYENTES    DIL  ON DAPL.LOTEDILUYENTE_ID = DIL.ID\n    LEFT JOIN MED_INVENTARIOS  "
+" VINV ON VAC.MINVENTARIO_ID = VINV.ID\n    LEFT JOIN MED_INVENTARIOS   JINV ON JER.MINVENTARIO_ID = JINV.ID\n    LEFT JO"
+"IN MED_INVENTARIOS   DINV ON DIL.MINVENTARIO_ID = DINV.ID\n    WHERE DAPL.ACTUALIZACION = 2\n    AND DAPL.APLICADA = 'Si"
+"'\n    AND APL.ESTREGISTRO_ID = 1\n    AND TMOV.SIGLA = 'AV'\n    AND TO_CHAR(APL.FREGISTRO, 'YYYYMM') = '"+context.PERIODO+"'\n) \nUNPIVOT\n(\n    LOTES_ID FOR INVENTARIO IN (INVENTARIO_VACUNA, INVENTARIO_JERINGA, INVENTARIO_DILUYENTE)\n) \nGR"
+"OUP BY UORG_ID, \n         LOTES_ID\n";
		    

		    globalMap.put("tOracleInput_36_QUERY",dbquery_tOracleInput_36);

		    java.sql.ResultSet rs_tOracleInput_36 = null;

		    try {
		    	rs_tOracleInput_36 = stmt_tOracleInput_36.executeQuery(dbquery_tOracleInput_36);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_36 = rs_tOracleInput_36.getMetaData();
		    	int colQtyInRs_tOracleInput_36 = rsmd_tOracleInput_36.getColumnCount();

		    String tmpContent_tOracleInput_36 = null;
		    
		    
		    while (rs_tOracleInput_36.next()) {
		        nb_line_tOracleInput_36++;
		        
							if(colQtyInRs_tOracleInput_36 < 1) {
								row48.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_36.getObject(1) != null) {
						row48.UORG_ID = rs_tOracleInput_36.getBigDecimal(1);
					} else {
				
						row48.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_36 < 2) {
								row48.LOTES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_36.getObject(2) != null) {
						row48.LOTES_ID = rs_tOracleInput_36.getBigDecimal(2);
					} else {
				
						row48.LOTES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_36 < 3) {
								row48.APLICADAS = null;
							} else {
		                          
					if(rs_tOracleInput_36.getObject(3) != null) {
						row48.APLICADAS = rs_tOracleInput_36.getBigDecimal(3);
					} else {
				
						row48.APLICADAS = null;
					}
		                    }
					




 



/**
 * [tOracleInput_36 begin ] stop
 */
	
	/**
	 * [tOracleInput_36 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_36";
	
	

 


	tos_count_tOracleInput_36++;

/**
 * [tOracleInput_36 main ] stop
 */
	
	/**
	 * [tOracleInput_36 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_36";
	
	

 



/**
 * [tOracleInput_36 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row48 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row48";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row48"
						
						);
					}
					


			   
			   

					row48Struct row48_HashRow = new row48Struct();
		   	   	   
				
				row48_HashRow.UORG_ID = row48.UORG_ID;
				
				row48_HashRow.LOTES_ID = row48.LOTES_ID;
				
				row48_HashRow.APLICADAS = row48.APLICADAS;
				
			tHash_Lookup_row48.put(row48_HashRow);
			
            




 


	tos_count_tAdvancedHash_row48++;

/**
 * [tAdvancedHash_row48 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row48 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row48";
	
	

 



/**
 * [tAdvancedHash_row48 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row48 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row48";
	
	

 



/**
 * [tAdvancedHash_row48 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_36 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_36";
	
	

 



/**
 * [tOracleInput_36 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_36 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_36";
	
	

}
}finally{
	if (rs_tOracleInput_36 != null) {
		rs_tOracleInput_36.close();
	}
	if (stmt_tOracleInput_36 != null) {
		stmt_tOracleInput_36.close();
	}
}

globalMap.put("tOracleInput_36_NB_LINE",nb_line_tOracleInput_36);
 

ok_Hash.put("tOracleInput_36", true);
end_Hash.put("tOracleInput_36", System.currentTimeMillis());




/**
 * [tOracleInput_36 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row48 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row48";
	
	

tHash_Lookup_row48.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row48");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row48", true);
end_Hash.put("tAdvancedHash_row48", System.currentTimeMillis());




/**
 * [tAdvancedHash_row48 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_36 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_36";
	
	

 



/**
 * [tOracleInput_36 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row48 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row48";
	
	

 



/**
 * [tAdvancedHash_row48 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_36_SUBPROCESS_STATE", 1);
	}
	


public static class row49Struct implements routines.system.IPersistableComparableLookupRow<row49Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal LOTES_ID;

				public BigDecimal getLOTES_ID () {
					return this.LOTES_ID;
				}

				public Boolean LOTES_IDIsNullable(){
				    return false;
				}
				public Boolean LOTES_IDIsKey(){
				    return false;
				}
				public Integer LOTES_IDLength(){
				    return null;
				}
				public Integer LOTES_IDPrecision(){
				    return null;
				}
				public String LOTES_IDDefault(){
				
					return "";
				
				}
				public String LOTES_IDComment(){
				
				    return "";
				
				}
				public String LOTES_IDPattern(){
				
					return "";
				
				}
				public String LOTES_IDOriginalDbColumnName(){
				
					return "LOTES_ID";
				
				}

				
			    public BigDecimal ENTRADAS;

				public BigDecimal getENTRADAS () {
					return this.ENTRADAS;
				}

				public Boolean ENTRADASIsNullable(){
				    return true;
				}
				public Boolean ENTRADASIsKey(){
				    return false;
				}
				public Integer ENTRADASLength(){
				    return null;
				}
				public Integer ENTRADASPrecision(){
				    return null;
				}
				public String ENTRADASDefault(){
				
					return "";
				
				}
				public String ENTRADASComment(){
				
				    return "";
				
				}
				public String ENTRADASPattern(){
				
					return "";
				
				}
				public String ENTRADASOriginalDbColumnName(){
				
					return "ENTRADAS";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.LOTES_ID == null) ? 0 : this.LOTES_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row49Struct other = (row49Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.LOTES_ID == null) {
							if (other.LOTES_ID != null)
								return false;
						
						} else if (!this.LOTES_ID.equals(other.LOTES_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row49Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.LOTES_ID = this.LOTES_ID;
	            other.ENTRADAS = this.ENTRADAS;
	            
	}

	public void copyKeysDataTo(row49Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.LOTES_ID = this.LOTES_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LOTES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LOTES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ENTRADAS = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ENTRADAS = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ENTRADAS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ENTRADAS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",LOTES_ID="+String.valueOf(LOTES_ID));
		sb.append(",ENTRADAS="+String.valueOf(ENTRADAS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row49Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.LOTES_ID, other.LOTES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_33Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_33_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row49Struct row49 = new row49Struct();




	
	/**
	 * [tAdvancedHash_row49 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row49", false);
		start_Hash.put("tAdvancedHash_row49", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row49";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row49");
					}
				
		int tos_count_tAdvancedHash_row49 = 0;
		

			   		// connection name:row49
			   		// source node:tOracleInput_33 - inputs:(after_tOracleInput_37) outputs:(row49,row49) | target node:tAdvancedHash_row49 - inputs:(row49) outputs:()
			   		// linked node: tMap_14 - inputs:(row47,row48,row49,row51,row55,row57,row46,row56) outputs:(Lotes)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row49 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct> tHash_Lookup_row49 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row49Struct>getLookup(matchingModeEnum_row49);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row49", tHash_Lookup_row49);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row49 begin ] stop
 */



	
	/**
	 * [tOracleInput_33 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_33", false);
		start_Hash.put("tOracleInput_33", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_33";
	
	
		int tos_count_tOracleInput_33 = 0;
		
	


	
		    int nb_line_tOracleInput_33 = 0;
		    java.sql.Connection conn_tOracleInput_33 = null;
				conn_tOracleInput_33 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_33 = false;
				boolean isConnectionWrapped_tOracleInput_33 = !(conn_tOracleInput_33 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_33.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_33 = null;
                if (isConnectionWrapped_tOracleInput_33) {
					unwrappedOraConn_tOracleInput_33 = conn_tOracleInput_33.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_33 != null) {
                        isTimeZoneNull_tOracleInput_33 = (unwrappedOraConn_tOracleInput_33.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_33 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_33).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_33) {
					java.sql.Statement stmtGetTZ_tOracleInput_33 = conn_tOracleInput_33.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_33 = stmtGetTZ_tOracleInput_33.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_33 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_33.next()) {
						sessionTimezone_tOracleInput_33 = rsGetTZ_tOracleInput_33.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_33 && unwrappedOraConn_tOracleInput_33 != null) {
                        unwrappedOraConn_tOracleInput_33.setSessionTimeZone(sessionTimezone_tOracleInput_33);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_33).setSessionTimeZone(sessionTimezone_tOracleInput_33);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_33 = conn_tOracleInput_33.createStatement();

		    String dbquery_tOracleInput_33 = "\nSELECT\n    IIN.UORG_ID,    \n    MINV.ID AS LOTES_ID,\n    SUM(DMOV.CANTIDAD) AS ENTRADAS    \nFROM VAC_INGRESOS_INS"
+"UMOS   IIN\nINNER JOIN MED_MOVIMIENTOS  MOV  ON IIN.MOVIMIENTOS_ID = MOV.ID\nINNER JOIN MED_TMOVIMIENTOS TMOV ON MOV.TMO"
+"VIMIENTOS_ID = TMOV.ID\nINNER JOIN MED_DMOVIMIENTOS DMOV ON DMOV.MOVIMIENTOS_ID = MOV.ID\nINNER JOIN MED_INVENTARIOS  MI"
+"NV ON DMOV.INVENTARIOS_ID = MINV.ID\nWHERE IIN.ESTREGISTRO_ID = 1\nAND MOV.ESTREGISTRO_ID = 1\nAND IIN.ESTADO = 'Finaliz"
+"ado'    \nAND TMOV.SIGLA = 'RINV'    \nAND TO_CHAR(IIN.FREGISTRO, 'YYYYMM') = '"+context.PERIODO+"'\nGROUP BY IIN.UORG_ID, \n         MINV.ID\n";
		    

		    globalMap.put("tOracleInput_33_QUERY",dbquery_tOracleInput_33);

		    java.sql.ResultSet rs_tOracleInput_33 = null;

		    try {
		    	rs_tOracleInput_33 = stmt_tOracleInput_33.executeQuery(dbquery_tOracleInput_33);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_33 = rs_tOracleInput_33.getMetaData();
		    	int colQtyInRs_tOracleInput_33 = rsmd_tOracleInput_33.getColumnCount();

		    String tmpContent_tOracleInput_33 = null;
		    
		    
		    while (rs_tOracleInput_33.next()) {
		        nb_line_tOracleInput_33++;
		        
							if(colQtyInRs_tOracleInput_33 < 1) {
								row49.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_33.getObject(1) != null) {
						row49.UORG_ID = rs_tOracleInput_33.getBigDecimal(1);
					} else {
				
						row49.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_33 < 2) {
								row49.LOTES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_33.getObject(2) != null) {
						row49.LOTES_ID = rs_tOracleInput_33.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_33 < 3) {
								row49.ENTRADAS = null;
							} else {
		                          
					if(rs_tOracleInput_33.getObject(3) != null) {
						row49.ENTRADAS = rs_tOracleInput_33.getBigDecimal(3);
					} else {
				
						row49.ENTRADAS = null;
					}
		                    }
					




 



/**
 * [tOracleInput_33 begin ] stop
 */
	
	/**
	 * [tOracleInput_33 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_33";
	
	

 


	tos_count_tOracleInput_33++;

/**
 * [tOracleInput_33 main ] stop
 */
	
	/**
	 * [tOracleInput_33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_33";
	
	

 



/**
 * [tOracleInput_33 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row49 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row49";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row49"
						
						);
					}
					


			   
			   

					row49Struct row49_HashRow = new row49Struct();
		   	   	   
				
				row49_HashRow.UORG_ID = row49.UORG_ID;
				
				row49_HashRow.LOTES_ID = row49.LOTES_ID;
				
				row49_HashRow.ENTRADAS = row49.ENTRADAS;
				
			tHash_Lookup_row49.put(row49_HashRow);
			
            




 


	tos_count_tAdvancedHash_row49++;

/**
 * [tAdvancedHash_row49 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row49 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row49";
	
	

 



/**
 * [tAdvancedHash_row49 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row49 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row49";
	
	

 



/**
 * [tAdvancedHash_row49 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_33 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_33";
	
	

 



/**
 * [tOracleInput_33 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_33 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_33";
	
	

}
}finally{
	if (rs_tOracleInput_33 != null) {
		rs_tOracleInput_33.close();
	}
	if (stmt_tOracleInput_33 != null) {
		stmt_tOracleInput_33.close();
	}
}

globalMap.put("tOracleInput_33_NB_LINE",nb_line_tOracleInput_33);
 

ok_Hash.put("tOracleInput_33", true);
end_Hash.put("tOracleInput_33", System.currentTimeMillis());




/**
 * [tOracleInput_33 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row49 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row49";
	
	

tHash_Lookup_row49.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row49");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row49", true);
end_Hash.put("tAdvancedHash_row49", System.currentTimeMillis());




/**
 * [tAdvancedHash_row49 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_33 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_33";
	
	

 



/**
 * [tOracleInput_33 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row49 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row49";
	
	

 



/**
 * [tAdvancedHash_row49 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_33_SUBPROCESS_STATE", 1);
	}
	


public static class row51Struct implements routines.system.IPersistableComparableLookupRow<row51Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal LOTES_ID;

				public BigDecimal getLOTES_ID () {
					return this.LOTES_ID;
				}

				public Boolean LOTES_IDIsNullable(){
				    return false;
				}
				public Boolean LOTES_IDIsKey(){
				    return false;
				}
				public Integer LOTES_IDLength(){
				    return null;
				}
				public Integer LOTES_IDPrecision(){
				    return null;
				}
				public String LOTES_IDDefault(){
				
					return "";
				
				}
				public String LOTES_IDComment(){
				
				    return "";
				
				}
				public String LOTES_IDPattern(){
				
					return "";
				
				}
				public String LOTES_IDOriginalDbColumnName(){
				
					return "LOTES_ID";
				
				}

				
			    public BigDecimal PERDIDAS;

				public BigDecimal getPERDIDAS () {
					return this.PERDIDAS;
				}

				public Boolean PERDIDASIsNullable(){
				    return true;
				}
				public Boolean PERDIDASIsKey(){
				    return false;
				}
				public Integer PERDIDASLength(){
				    return null;
				}
				public Integer PERDIDASPrecision(){
				    return null;
				}
				public String PERDIDASDefault(){
				
					return "";
				
				}
				public String PERDIDASComment(){
				
				    return "";
				
				}
				public String PERDIDASPattern(){
				
					return "";
				
				}
				public String PERDIDASOriginalDbColumnName(){
				
					return "PERDIDAS";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.LOTES_ID == null) ? 0 : this.LOTES_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row51Struct other = (row51Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.LOTES_ID == null) {
							if (other.LOTES_ID != null)
								return false;
						
						} else if (!this.LOTES_ID.equals(other.LOTES_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row51Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.LOTES_ID = this.LOTES_ID;
	            other.PERDIDAS = this.PERDIDAS;
	            
	}

	public void copyKeysDataTo(row51Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.LOTES_ID = this.LOTES_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LOTES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LOTES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.PERDIDAS = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.PERDIDAS = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.PERDIDAS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PERDIDAS);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",LOTES_ID="+String.valueOf(LOTES_ID));
		sb.append(",PERDIDAS="+String.valueOf(PERDIDAS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row51Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.LOTES_ID, other.LOTES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_34Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_34_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row51Struct row51 = new row51Struct();




	
	/**
	 * [tAdvancedHash_row51 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row51", false);
		start_Hash.put("tAdvancedHash_row51", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row51";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row51");
					}
				
		int tos_count_tAdvancedHash_row51 = 0;
		

			   		// connection name:row51
			   		// source node:tOracleInput_34 - inputs:(after_tOracleInput_37) outputs:(row51,row51) | target node:tAdvancedHash_row51 - inputs:(row51) outputs:()
			   		// linked node: tMap_14 - inputs:(row47,row48,row49,row51,row55,row57,row46,row56) outputs:(Lotes)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row51 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct> tHash_Lookup_row51 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row51Struct>getLookup(matchingModeEnum_row51);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row51", tHash_Lookup_row51);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row51 begin ] stop
 */



	
	/**
	 * [tOracleInput_34 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_34", false);
		start_Hash.put("tOracleInput_34", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_34";
	
	
		int tos_count_tOracleInput_34 = 0;
		
	


	
		    int nb_line_tOracleInput_34 = 0;
		    java.sql.Connection conn_tOracleInput_34 = null;
				conn_tOracleInput_34 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_34 = false;
				boolean isConnectionWrapped_tOracleInput_34 = !(conn_tOracleInput_34 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_34.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_34 = null;
                if (isConnectionWrapped_tOracleInput_34) {
					unwrappedOraConn_tOracleInput_34 = conn_tOracleInput_34.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_34 != null) {
                        isTimeZoneNull_tOracleInput_34 = (unwrappedOraConn_tOracleInput_34.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_34 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_34).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_34) {
					java.sql.Statement stmtGetTZ_tOracleInput_34 = conn_tOracleInput_34.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_34 = stmtGetTZ_tOracleInput_34.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_34 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_34.next()) {
						sessionTimezone_tOracleInput_34 = rsGetTZ_tOracleInput_34.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_34 && unwrappedOraConn_tOracleInput_34 != null) {
                        unwrappedOraConn_tOracleInput_34.setSessionTimeZone(sessionTimezone_tOracleInput_34);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_34).setSessionTimeZone(sessionTimezone_tOracleInput_34);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_34 = conn_tOracleInput_34.createStatement();

		    String dbquery_tOracleInput_34 = "\nSELECT \n    VINV.UORG_ID,\n    MINV.ID AS LOTES_ID,\n    SUM(PER.CANTIDAD) AS PERDIDAS\nFROM VAC_PERDIDAS PER\nINNER"
+" JOIN MED_INVENTARIOS  MINV  ON PER.MINVENTARIO_ID = MINV.ID\nINNER JOIN VAC_INVENTARIOS  VINV  ON PER.VINVENTARIO_ID = "
+"VINV.ID\nINNER JOIN MED_MOVIMIENTOS  MOV   ON PER.MOVIMIENTO_ID = MOV.ID\nINNER JOIN MED_TMOVIMIENTOS TMOV  ON MOV.TMOVI"
+"MIENTOS_ID = TMOV.ID\nWHERE PER.ESTREGISTRO_ID = 1\nAND PER.ESTADO = 'Activo'\nAND MOV.ESTREGISTRO_ID = 1\nAND TMOV.SIGL"
+"A = 'RP'\nAND TO_CHAR(PER.FPERDIDA, 'YYYYMM') =  '"+context.PERIODO+"'\nGROUP BY VINV.UORG_ID,\n         MINV.ID  \n";
		    

		    globalMap.put("tOracleInput_34_QUERY",dbquery_tOracleInput_34);

		    java.sql.ResultSet rs_tOracleInput_34 = null;

		    try {
		    	rs_tOracleInput_34 = stmt_tOracleInput_34.executeQuery(dbquery_tOracleInput_34);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_34 = rs_tOracleInput_34.getMetaData();
		    	int colQtyInRs_tOracleInput_34 = rsmd_tOracleInput_34.getColumnCount();

		    String tmpContent_tOracleInput_34 = null;
		    
		    
		    while (rs_tOracleInput_34.next()) {
		        nb_line_tOracleInput_34++;
		        
							if(colQtyInRs_tOracleInput_34 < 1) {
								row51.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(1) != null) {
						row51.UORG_ID = rs_tOracleInput_34.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 2) {
								row51.LOTES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(2) != null) {
						row51.LOTES_ID = rs_tOracleInput_34.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_34 < 3) {
								row51.PERDIDAS = null;
							} else {
		                          
					if(rs_tOracleInput_34.getObject(3) != null) {
						row51.PERDIDAS = rs_tOracleInput_34.getBigDecimal(3);
					} else {
				
						row51.PERDIDAS = null;
					}
		                    }
					




 



/**
 * [tOracleInput_34 begin ] stop
 */
	
	/**
	 * [tOracleInput_34 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_34";
	
	

 


	tos_count_tOracleInput_34++;

/**
 * [tOracleInput_34 main ] stop
 */
	
	/**
	 * [tOracleInput_34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_34";
	
	

 



/**
 * [tOracleInput_34 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row51 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row51";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row51"
						
						);
					}
					


			   
			   

					row51Struct row51_HashRow = new row51Struct();
		   	   	   
				
				row51_HashRow.UORG_ID = row51.UORG_ID;
				
				row51_HashRow.LOTES_ID = row51.LOTES_ID;
				
				row51_HashRow.PERDIDAS = row51.PERDIDAS;
				
			tHash_Lookup_row51.put(row51_HashRow);
			
            




 


	tos_count_tAdvancedHash_row51++;

/**
 * [tAdvancedHash_row51 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row51 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row51";
	
	

 



/**
 * [tAdvancedHash_row51 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row51 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row51";
	
	

 



/**
 * [tAdvancedHash_row51 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_34 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_34";
	
	

 



/**
 * [tOracleInput_34 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_34 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_34";
	
	

}
}finally{
	if (rs_tOracleInput_34 != null) {
		rs_tOracleInput_34.close();
	}
	if (stmt_tOracleInput_34 != null) {
		stmt_tOracleInput_34.close();
	}
}

globalMap.put("tOracleInput_34_NB_LINE",nb_line_tOracleInput_34);
 

ok_Hash.put("tOracleInput_34", true);
end_Hash.put("tOracleInput_34", System.currentTimeMillis());




/**
 * [tOracleInput_34 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row51 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row51";
	
	

tHash_Lookup_row51.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row51");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row51", true);
end_Hash.put("tAdvancedHash_row51", System.currentTimeMillis());




/**
 * [tAdvancedHash_row51 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_34 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_34";
	
	

 



/**
 * [tOracleInput_34 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row51 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row51";
	
	

 



/**
 * [tAdvancedHash_row51 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_34_SUBPROCESS_STATE", 1);
	}
	


public static class row55Struct implements routines.system.IPersistableComparableLookupRow<row55Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal LOTES_ID;

				public BigDecimal getLOTES_ID () {
					return this.LOTES_ID;
				}

				public Boolean LOTES_IDIsNullable(){
				    return false;
				}
				public Boolean LOTES_IDIsKey(){
				    return false;
				}
				public Integer LOTES_IDLength(){
				    return null;
				}
				public Integer LOTES_IDPrecision(){
				    return null;
				}
				public String LOTES_IDDefault(){
				
					return "";
				
				}
				public String LOTES_IDComment(){
				
				    return "";
				
				}
				public String LOTES_IDPattern(){
				
					return "";
				
				}
				public String LOTES_IDOriginalDbColumnName(){
				
					return "LOTES_ID";
				
				}

				
			    public BigDecimal TRASLADOS_SALIDA;

				public BigDecimal getTRASLADOS_SALIDA () {
					return this.TRASLADOS_SALIDA;
				}

				public Boolean TRASLADOS_SALIDAIsNullable(){
				    return true;
				}
				public Boolean TRASLADOS_SALIDAIsKey(){
				    return false;
				}
				public Integer TRASLADOS_SALIDALength(){
				    return null;
				}
				public Integer TRASLADOS_SALIDAPrecision(){
				    return null;
				}
				public String TRASLADOS_SALIDADefault(){
				
					return "";
				
				}
				public String TRASLADOS_SALIDAComment(){
				
				    return "";
				
				}
				public String TRASLADOS_SALIDAPattern(){
				
					return "";
				
				}
				public String TRASLADOS_SALIDAOriginalDbColumnName(){
				
					return "TRASLADOS_SALIDA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.LOTES_ID == null) ? 0 : this.LOTES_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row55Struct other = (row55Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.LOTES_ID == null) {
							if (other.LOTES_ID != null)
								return false;
						
						} else if (!this.LOTES_ID.equals(other.LOTES_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row55Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.LOTES_ID = this.LOTES_ID;
	            other.TRASLADOS_SALIDA = this.TRASLADOS_SALIDA;
	            
	}

	public void copyKeysDataTo(row55Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.LOTES_ID = this.LOTES_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LOTES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LOTES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.TRASLADOS_SALIDA = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.TRASLADOS_SALIDA = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.TRASLADOS_SALIDA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TRASLADOS_SALIDA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",LOTES_ID="+String.valueOf(LOTES_ID));
		sb.append(",TRASLADOS_SALIDA="+String.valueOf(TRASLADOS_SALIDA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row55Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.LOTES_ID, other.LOTES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_35Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_35_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row55Struct row55 = new row55Struct();




	
	/**
	 * [tAdvancedHash_row55 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row55", false);
		start_Hash.put("tAdvancedHash_row55", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row55";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row55");
					}
				
		int tos_count_tAdvancedHash_row55 = 0;
		

			   		// connection name:row55
			   		// source node:tOracleInput_35 - inputs:(after_tOracleInput_37) outputs:(row55,row55) | target node:tAdvancedHash_row55 - inputs:(row55) outputs:()
			   		// linked node: tMap_14 - inputs:(row47,row48,row49,row51,row55,row57,row46,row56) outputs:(Lotes)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row55 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row55Struct> tHash_Lookup_row55 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row55Struct>getLookup(matchingModeEnum_row55);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row55", tHash_Lookup_row55);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row55 begin ] stop
 */



	
	/**
	 * [tOracleInput_35 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_35", false);
		start_Hash.put("tOracleInput_35", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_35";
	
	
		int tos_count_tOracleInput_35 = 0;
		
	


	
		    int nb_line_tOracleInput_35 = 0;
		    java.sql.Connection conn_tOracleInput_35 = null;
				conn_tOracleInput_35 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_35 = false;
				boolean isConnectionWrapped_tOracleInput_35 = !(conn_tOracleInput_35 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_35.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_35 = null;
                if (isConnectionWrapped_tOracleInput_35) {
					unwrappedOraConn_tOracleInput_35 = conn_tOracleInput_35.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_35 != null) {
                        isTimeZoneNull_tOracleInput_35 = (unwrappedOraConn_tOracleInput_35.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_35 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_35).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_35) {
					java.sql.Statement stmtGetTZ_tOracleInput_35 = conn_tOracleInput_35.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_35 = stmtGetTZ_tOracleInput_35.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_35 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_35.next()) {
						sessionTimezone_tOracleInput_35 = rsGetTZ_tOracleInput_35.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_35 && unwrappedOraConn_tOracleInput_35 != null) {
                        unwrappedOraConn_tOracleInput_35.setSessionTimeZone(sessionTimezone_tOracleInput_35);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_35).setSessionTimeZone(sessionTimezone_tOracleInput_35);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_35 = conn_tOracleInput_35.createStatement();

		    String dbquery_tOracleInput_35 = "\nSELECT \n    TRA.UORIGEN_ID  AS UORG_ID,\n    MINV.ID         AS LOTES_ID,    \n    SUM(DTRA.CANTIDAD_RECIBIDA) AS TR"
+"ASLADOS_SALIDA      \nFROM VAC_TRASLADOS TRA\nINNER JOIN MED_MOVIMIENTOS  MOVS  ON TRA.MOVIMIENTO_SOLICITUD_ID = MOVS.ID"
+"\nINNER JOIN MED_TMOVIMIENTOS TMOVS ON MOVS.TMOVIMIENTOS_ID = TMOVS.ID\nLEFT JOIN MED_MOVIMIENTOS   MOVR  ON TRA.MOVIMIE"
+"NTO_RESPUESTA_ID = MOVR.ID\nLEFT JOIN MED_TMOVIMIENTOS  TMOVR ON MOVR.TMOVIMIENTOS_ID = TMOVR.ID AND TMOVR.SIGLA = 'CTR'"
+"\nINNER JOIN VAC_DTRASLADOS   DTRA  ON DTRA.TRASLADO_ID = TRA.ID\nINNER JOIN MED_INVENTARIOS  MINV  ON DTRA.MINVENTARIO_"
+"ID = MINV.ID\nWHERE TMOVS.SIGLA = 'STR'\nAND TRA.ESTADO IN ('Aprobado', 'Recibido')\nAND TO_CHAR(TRA.FREGISTRO_SOLICITUD"
+", 'YYYYMM') = '"+context.PERIODO+"'\nGROUP BY TRA.UORIGEN_ID,\n         MINV.ID\n";
		    

		    globalMap.put("tOracleInput_35_QUERY",dbquery_tOracleInput_35);

		    java.sql.ResultSet rs_tOracleInput_35 = null;

		    try {
		    	rs_tOracleInput_35 = stmt_tOracleInput_35.executeQuery(dbquery_tOracleInput_35);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_35 = rs_tOracleInput_35.getMetaData();
		    	int colQtyInRs_tOracleInput_35 = rsmd_tOracleInput_35.getColumnCount();

		    String tmpContent_tOracleInput_35 = null;
		    
		    
		    while (rs_tOracleInput_35.next()) {
		        nb_line_tOracleInput_35++;
		        
							if(colQtyInRs_tOracleInput_35 < 1) {
								row55.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_35.getObject(1) != null) {
						row55.UORG_ID = rs_tOracleInput_35.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_35 < 2) {
								row55.LOTES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_35.getObject(2) != null) {
						row55.LOTES_ID = rs_tOracleInput_35.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_35 < 3) {
								row55.TRASLADOS_SALIDA = null;
							} else {
		                          
					if(rs_tOracleInput_35.getObject(3) != null) {
						row55.TRASLADOS_SALIDA = rs_tOracleInput_35.getBigDecimal(3);
					} else {
				
						row55.TRASLADOS_SALIDA = null;
					}
		                    }
					




 



/**
 * [tOracleInput_35 begin ] stop
 */
	
	/**
	 * [tOracleInput_35 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_35";
	
	

 


	tos_count_tOracleInput_35++;

/**
 * [tOracleInput_35 main ] stop
 */
	
	/**
	 * [tOracleInput_35 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_35";
	
	

 



/**
 * [tOracleInput_35 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row55 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row55";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row55"
						
						);
					}
					


			   
			   

					row55Struct row55_HashRow = new row55Struct();
		   	   	   
				
				row55_HashRow.UORG_ID = row55.UORG_ID;
				
				row55_HashRow.LOTES_ID = row55.LOTES_ID;
				
				row55_HashRow.TRASLADOS_SALIDA = row55.TRASLADOS_SALIDA;
				
			tHash_Lookup_row55.put(row55_HashRow);
			
            




 


	tos_count_tAdvancedHash_row55++;

/**
 * [tAdvancedHash_row55 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row55 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row55";
	
	

 



/**
 * [tAdvancedHash_row55 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row55 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row55";
	
	

 



/**
 * [tAdvancedHash_row55 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_35 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_35";
	
	

 



/**
 * [tOracleInput_35 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_35 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_35";
	
	

}
}finally{
	if (rs_tOracleInput_35 != null) {
		rs_tOracleInput_35.close();
	}
	if (stmt_tOracleInput_35 != null) {
		stmt_tOracleInput_35.close();
	}
}

globalMap.put("tOracleInput_35_NB_LINE",nb_line_tOracleInput_35);
 

ok_Hash.put("tOracleInput_35", true);
end_Hash.put("tOracleInput_35", System.currentTimeMillis());




/**
 * [tOracleInput_35 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row55 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row55";
	
	

tHash_Lookup_row55.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row55");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row55", true);
end_Hash.put("tAdvancedHash_row55", System.currentTimeMillis());




/**
 * [tAdvancedHash_row55 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_35 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_35";
	
	

 



/**
 * [tOracleInput_35 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row55 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row55";
	
	

 



/**
 * [tAdvancedHash_row55 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_35_SUBPROCESS_STATE", 1);
	}
	


public static class row57Struct implements routines.system.IPersistableComparableLookupRow<row57Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal LOTES_ID;

				public BigDecimal getLOTES_ID () {
					return this.LOTES_ID;
				}

				public Boolean LOTES_IDIsNullable(){
				    return true;
				}
				public Boolean LOTES_IDIsKey(){
				    return false;
				}
				public Integer LOTES_IDLength(){
				    return null;
				}
				public Integer LOTES_IDPrecision(){
				    return null;
				}
				public String LOTES_IDDefault(){
				
					return "";
				
				}
				public String LOTES_IDComment(){
				
				    return "";
				
				}
				public String LOTES_IDPattern(){
				
					return "";
				
				}
				public String LOTES_IDOriginalDbColumnName(){
				
					return "LOTES_ID";
				
				}

				
			    public BigDecimal SALDO_RESTANTE;

				public BigDecimal getSALDO_RESTANTE () {
					return this.SALDO_RESTANTE;
				}

				public Boolean SALDO_RESTANTEIsNullable(){
				    return true;
				}
				public Boolean SALDO_RESTANTEIsKey(){
				    return false;
				}
				public Integer SALDO_RESTANTELength(){
				    return null;
				}
				public Integer SALDO_RESTANTEPrecision(){
				    return null;
				}
				public String SALDO_RESTANTEDefault(){
				
					return "";
				
				}
				public String SALDO_RESTANTEComment(){
				
				    return "";
				
				}
				public String SALDO_RESTANTEPattern(){
				
					return "";
				
				}
				public String SALDO_RESTANTEOriginalDbColumnName(){
				
					return "SALDO_RESTANTE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.LOTES_ID == null) ? 0 : this.LOTES_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row57Struct other = (row57Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.LOTES_ID == null) {
							if (other.LOTES_ID != null)
								return false;
						
						} else if (!this.LOTES_ID.equals(other.LOTES_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row57Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.LOTES_ID = this.LOTES_ID;
	            other.SALDO_RESTANTE = this.SALDO_RESTANTE;
	            
	}

	public void copyKeysDataTo(row57Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.LOTES_ID = this.LOTES_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LOTES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LOTES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.SALDO_RESTANTE = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.SALDO_RESTANTE = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.SALDO_RESTANTE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.SALDO_RESTANTE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",LOTES_ID="+String.valueOf(LOTES_ID));
		sb.append(",SALDO_RESTANTE="+String.valueOf(SALDO_RESTANTE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row57Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.LOTES_ID, other.LOTES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_38Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_38_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row57Struct row57 = new row57Struct();




	
	/**
	 * [tAdvancedHash_row57 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row57", false);
		start_Hash.put("tAdvancedHash_row57", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row57";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row57");
					}
				
		int tos_count_tAdvancedHash_row57 = 0;
		

			   		// connection name:row57
			   		// source node:tOracleInput_38 - inputs:(after_tOracleInput_37) outputs:(row57,row57) | target node:tAdvancedHash_row57 - inputs:(row57) outputs:()
			   		// linked node: tMap_14 - inputs:(row47,row48,row49,row51,row55,row57,row46,row56) outputs:(Lotes)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row57 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row57Struct> tHash_Lookup_row57 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row57Struct>getLookup(matchingModeEnum_row57);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row57", tHash_Lookup_row57);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row57 begin ] stop
 */



	
	/**
	 * [tOracleInput_38 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_38", false);
		start_Hash.put("tOracleInput_38", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_38";
	
	
		int tos_count_tOracleInput_38 = 0;
		
	


	
		    int nb_line_tOracleInput_38 = 0;
		    java.sql.Connection conn_tOracleInput_38 = null;
				conn_tOracleInput_38 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_38 = false;
				boolean isConnectionWrapped_tOracleInput_38 = !(conn_tOracleInput_38 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_38.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_38 = null;
                if (isConnectionWrapped_tOracleInput_38) {
					unwrappedOraConn_tOracleInput_38 = conn_tOracleInput_38.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_38 != null) {
                        isTimeZoneNull_tOracleInput_38 = (unwrappedOraConn_tOracleInput_38.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_38 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_38).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_38) {
					java.sql.Statement stmtGetTZ_tOracleInput_38 = conn_tOracleInput_38.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_38 = stmtGetTZ_tOracleInput_38.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_38 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_38.next()) {
						sessionTimezone_tOracleInput_38 = rsGetTZ_tOracleInput_38.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_38 && unwrappedOraConn_tOracleInput_38 != null) {
                        unwrappedOraConn_tOracleInput_38.setSessionTimeZone(sessionTimezone_tOracleInput_38);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_38).setSessionTimeZone(sessionTimezone_tOracleInput_38);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_38 = conn_tOracleInput_38.createStatement();

		    String dbquery_tOracleInput_38 = "\nSELECT    \n    MOV.UORG_ID,\n    MOV.LOTES_ID,\n    MOV.SALDO_RESTANTE\nFROM BVAC_MOVIMIENTOS MOV\nINNER JOIN BGEN_T"
+"IEMPOS TI ON MOV.TIEMPOS_ID = TI.ID\nWHERE TI.FECHA = ADD_MONTHS( TO_DATE('"+context.PERIODO+"', 'YYYYMM'), -1)\n";
		    

		    globalMap.put("tOracleInput_38_QUERY",dbquery_tOracleInput_38);

		    java.sql.ResultSet rs_tOracleInput_38 = null;

		    try {
		    	rs_tOracleInput_38 = stmt_tOracleInput_38.executeQuery(dbquery_tOracleInput_38);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_38 = rs_tOracleInput_38.getMetaData();
		    	int colQtyInRs_tOracleInput_38 = rsmd_tOracleInput_38.getColumnCount();

		    String tmpContent_tOracleInput_38 = null;
		    
		    
		    while (rs_tOracleInput_38.next()) {
		        nb_line_tOracleInput_38++;
		        
							if(colQtyInRs_tOracleInput_38 < 1) {
								row57.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_38.getObject(1) != null) {
						row57.UORG_ID = rs_tOracleInput_38.getBigDecimal(1);
					} else {
				
						row57.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_38 < 2) {
								row57.LOTES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_38.getObject(2) != null) {
						row57.LOTES_ID = rs_tOracleInput_38.getBigDecimal(2);
					} else {
				
						row57.LOTES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_38 < 3) {
								row57.SALDO_RESTANTE = null;
							} else {
		                          
					if(rs_tOracleInput_38.getObject(3) != null) {
						row57.SALDO_RESTANTE = rs_tOracleInput_38.getBigDecimal(3);
					} else {
				
						row57.SALDO_RESTANTE = null;
					}
		                    }
					




 



/**
 * [tOracleInput_38 begin ] stop
 */
	
	/**
	 * [tOracleInput_38 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_38";
	
	

 


	tos_count_tOracleInput_38++;

/**
 * [tOracleInput_38 main ] stop
 */
	
	/**
	 * [tOracleInput_38 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_38";
	
	

 



/**
 * [tOracleInput_38 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row57 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row57";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row57"
						
						);
					}
					


			   
			   

					row57Struct row57_HashRow = new row57Struct();
		   	   	   
				
				row57_HashRow.UORG_ID = row57.UORG_ID;
				
				row57_HashRow.LOTES_ID = row57.LOTES_ID;
				
				row57_HashRow.SALDO_RESTANTE = row57.SALDO_RESTANTE;
				
			tHash_Lookup_row57.put(row57_HashRow);
			
            




 


	tos_count_tAdvancedHash_row57++;

/**
 * [tAdvancedHash_row57 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row57 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row57";
	
	

 



/**
 * [tAdvancedHash_row57 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row57 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row57";
	
	

 



/**
 * [tAdvancedHash_row57 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_38 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_38";
	
	

 



/**
 * [tOracleInput_38 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_38 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_38";
	
	

}
}finally{
	if (rs_tOracleInput_38 != null) {
		rs_tOracleInput_38.close();
	}
	if (stmt_tOracleInput_38 != null) {
		stmt_tOracleInput_38.close();
	}
}

globalMap.put("tOracleInput_38_NB_LINE",nb_line_tOracleInput_38);
 

ok_Hash.put("tOracleInput_38", true);
end_Hash.put("tOracleInput_38", System.currentTimeMillis());




/**
 * [tOracleInput_38 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row57 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row57";
	
	

tHash_Lookup_row57.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row57");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row57", true);
end_Hash.put("tAdvancedHash_row57", System.currentTimeMillis());




/**
 * [tAdvancedHash_row57 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_38 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_38";
	
	

 



/**
 * [tOracleInput_38 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row57 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row57";
	
	

 



/**
 * [tAdvancedHash_row57 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_38_SUBPROCESS_STATE", 1);
	}
	


public static class row46Struct implements routines.system.IPersistableComparableLookupRow<row46Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal LOTES_ID;

				public BigDecimal getLOTES_ID () {
					return this.LOTES_ID;
				}

				public Boolean LOTES_IDIsNullable(){
				    return false;
				}
				public Boolean LOTES_IDIsKey(){
				    return false;
				}
				public Integer LOTES_IDLength(){
				    return 0;
				}
				public Integer LOTES_IDPrecision(){
				    return null;
				}
				public String LOTES_IDDefault(){
				
					return "";
				
				}
				public String LOTES_IDComment(){
				
				    return "";
				
				}
				public String LOTES_IDPattern(){
				
					return "";
				
				}
				public String LOTES_IDOriginalDbColumnName(){
				
					return "LOTES_ID";
				
				}

				
			    public BigDecimal AJUSTES;

				public BigDecimal getAJUSTES () {
					return this.AJUSTES;
				}

				public Boolean AJUSTESIsNullable(){
				    return true;
				}
				public Boolean AJUSTESIsKey(){
				    return false;
				}
				public Integer AJUSTESLength(){
				    return 0;
				}
				public Integer AJUSTESPrecision(){
				    return 0;
				}
				public String AJUSTESDefault(){
				
					return "";
				
				}
				public String AJUSTESComment(){
				
				    return "";
				
				}
				public String AJUSTESPattern(){
				
					return "";
				
				}
				public String AJUSTESOriginalDbColumnName(){
				
					return "AJUSTES";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.LOTES_ID == null) ? 0 : this.LOTES_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row46Struct other = (row46Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.LOTES_ID == null) {
							if (other.LOTES_ID != null)
								return false;
						
						} else if (!this.LOTES_ID.equals(other.LOTES_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row46Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.LOTES_ID = this.LOTES_ID;
	            other.AJUSTES = this.AJUSTES;
	            
	}

	public void copyKeysDataTo(row46Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.LOTES_ID = this.LOTES_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LOTES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LOTES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.AJUSTES = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.AJUSTES = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.AJUSTES);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.AJUSTES);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",LOTES_ID="+String.valueOf(LOTES_ID));
		sb.append(",AJUSTES="+String.valueOf(AJUSTES));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row46Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.LOTES_ID, other.LOTES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_39Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_39_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row46Struct row46 = new row46Struct();




	
	/**
	 * [tAdvancedHash_row46 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row46", false);
		start_Hash.put("tAdvancedHash_row46", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row46";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row46");
					}
				
		int tos_count_tAdvancedHash_row46 = 0;
		

			   		// connection name:row46
			   		// source node:tOracleInput_39 - inputs:(after_tOracleInput_37) outputs:(row46,row46) | target node:tAdvancedHash_row46 - inputs:(row46) outputs:()
			   		// linked node: tMap_14 - inputs:(row47,row48,row49,row51,row55,row57,row46,row56) outputs:(Lotes)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row46 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct> tHash_Lookup_row46 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row46Struct>getLookup(matchingModeEnum_row46);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row46", tHash_Lookup_row46);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row46 begin ] stop
 */



	
	/**
	 * [tOracleInput_39 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_39", false);
		start_Hash.put("tOracleInput_39", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_39";
	
	
		int tos_count_tOracleInput_39 = 0;
		
	


	
		    int nb_line_tOracleInput_39 = 0;
		    java.sql.Connection conn_tOracleInput_39 = null;
				conn_tOracleInput_39 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_39 = false;
				boolean isConnectionWrapped_tOracleInput_39 = !(conn_tOracleInput_39 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_39.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_39 = null;
                if (isConnectionWrapped_tOracleInput_39) {
					unwrappedOraConn_tOracleInput_39 = conn_tOracleInput_39.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_39 != null) {
                        isTimeZoneNull_tOracleInput_39 = (unwrappedOraConn_tOracleInput_39.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_39 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_39).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_39) {
					java.sql.Statement stmtGetTZ_tOracleInput_39 = conn_tOracleInput_39.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_39 = stmtGetTZ_tOracleInput_39.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_39 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_39.next()) {
						sessionTimezone_tOracleInput_39 = rsGetTZ_tOracleInput_39.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_39 && unwrappedOraConn_tOracleInput_39 != null) {
                        unwrappedOraConn_tOracleInput_39.setSessionTimeZone(sessionTimezone_tOracleInput_39);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_39).setSessionTimeZone(sessionTimezone_tOracleInput_39);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_39 = conn_tOracleInput_39.createStatement();

		    String dbquery_tOracleInput_39 = "\nSELECT\n    INV.UORG_ID,\n	MINV.ID AS LOTES_ID,\n    SUM( CASE AJU.TIPO_AJUSTE\n            WHEN 'Suma'  THEN AJU.CAN"
+"TIDAD\n            WHEN 'Resta' THEN - AJU.CANTIDAD\n            ELSE 0\n        END) AS AJUSTES     \nFROM VAC_INVENTAR"
+"IOS_AJUSTES AJU\nINNER JOIN GEN_UORG         DGSM ON DGSM.SIGLA = 'DGSM' AND DGSM.ESTREGISTRO_ID = 1\nINNER JOIN MED_MOV"
+"IMIENTOS  MOV  ON AJU.MOVIMIENTO_ID = MOV.ID\nINNER JOIN MED_TMOVIMIENTOS TMOV ON MOV.TMOVIMIENTOS_ID = TMOV.ID\nINNER J"
+"OIN VAC_INVENTARIOS  INV  ON AJU.MINVENTARIO_ID = INV.MINVENTARIO_ID AND AJU.UORG_ID IN (INV.UORG_ID, DGSM.ID)\nINNER JO"
+"IN MED_INVENTARIOS  MINV ON AJU.MINVENTARIO_ID = MINV.ID \nWHERE AJU.ESTREGISTRO_ID = 1\nAND MOV.ESTREGISTRO_ID = 1\nAND"
+" TMOV.SIGLA = 'AIE'\nAND TO_CHAR(AJU.FREGISTRO, 'YYYYMM') = '"+context.PERIODO+"'\nGROUP BY INV.UORG_ID,\n         MINV.ID\n";
		    

		    globalMap.put("tOracleInput_39_QUERY",dbquery_tOracleInput_39);

		    java.sql.ResultSet rs_tOracleInput_39 = null;

		    try {
		    	rs_tOracleInput_39 = stmt_tOracleInput_39.executeQuery(dbquery_tOracleInput_39);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_39 = rs_tOracleInput_39.getMetaData();
		    	int colQtyInRs_tOracleInput_39 = rsmd_tOracleInput_39.getColumnCount();

		    String tmpContent_tOracleInput_39 = null;
		    
		    
		    while (rs_tOracleInput_39.next()) {
		        nb_line_tOracleInput_39++;
		        
							if(colQtyInRs_tOracleInput_39 < 1) {
								row46.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_39.getObject(1) != null) {
						row46.UORG_ID = rs_tOracleInput_39.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_39 < 2) {
								row46.LOTES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_39.getObject(2) != null) {
						row46.LOTES_ID = rs_tOracleInput_39.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_39 < 3) {
								row46.AJUSTES = null;
							} else {
		                          
					if(rs_tOracleInput_39.getObject(3) != null) {
						row46.AJUSTES = rs_tOracleInput_39.getBigDecimal(3);
					} else {
				
						row46.AJUSTES = null;
					}
		                    }
					




 



/**
 * [tOracleInput_39 begin ] stop
 */
	
	/**
	 * [tOracleInput_39 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_39";
	
	

 


	tos_count_tOracleInput_39++;

/**
 * [tOracleInput_39 main ] stop
 */
	
	/**
	 * [tOracleInput_39 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_39";
	
	

 



/**
 * [tOracleInput_39 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row46 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row46"
						
						);
					}
					


			   
			   

					row46Struct row46_HashRow = new row46Struct();
		   	   	   
				
				row46_HashRow.UORG_ID = row46.UORG_ID;
				
				row46_HashRow.LOTES_ID = row46.LOTES_ID;
				
				row46_HashRow.AJUSTES = row46.AJUSTES;
				
			tHash_Lookup_row46.put(row46_HashRow);
			
            




 


	tos_count_tAdvancedHash_row46++;

/**
 * [tAdvancedHash_row46 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row46 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	

 



/**
 * [tAdvancedHash_row46 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row46 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	

 



/**
 * [tAdvancedHash_row46 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_39 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_39";
	
	

 



/**
 * [tOracleInput_39 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_39 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_39";
	
	

}
}finally{
	if (rs_tOracleInput_39 != null) {
		rs_tOracleInput_39.close();
	}
	if (stmt_tOracleInput_39 != null) {
		stmt_tOracleInput_39.close();
	}
}

globalMap.put("tOracleInput_39_NB_LINE",nb_line_tOracleInput_39);
 

ok_Hash.put("tOracleInput_39", true);
end_Hash.put("tOracleInput_39", System.currentTimeMillis());




/**
 * [tOracleInput_39 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row46 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	

tHash_Lookup_row46.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row46");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row46", true);
end_Hash.put("tAdvancedHash_row46", System.currentTimeMillis());




/**
 * [tAdvancedHash_row46 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_39 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_39";
	
	

 



/**
 * [tOracleInput_39 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row46 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	

 



/**
 * [tAdvancedHash_row46 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_39_SUBPROCESS_STATE", 1);
	}
	


public static class row56Struct implements routines.system.IPersistableComparableLookupRow<row56Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal LOTES_ID;

				public BigDecimal getLOTES_ID () {
					return this.LOTES_ID;
				}

				public Boolean LOTES_IDIsNullable(){
				    return false;
				}
				public Boolean LOTES_IDIsKey(){
				    return false;
				}
				public Integer LOTES_IDLength(){
				    return null;
				}
				public Integer LOTES_IDPrecision(){
				    return null;
				}
				public String LOTES_IDDefault(){
				
					return "";
				
				}
				public String LOTES_IDComment(){
				
				    return "";
				
				}
				public String LOTES_IDPattern(){
				
					return "";
				
				}
				public String LOTES_IDOriginalDbColumnName(){
				
					return "LOTES_ID";
				
				}

				
			    public BigDecimal TRASLADOS_ENTRADA;

				public BigDecimal getTRASLADOS_ENTRADA () {
					return this.TRASLADOS_ENTRADA;
				}

				public Boolean TRASLADOS_ENTRADAIsNullable(){
				    return true;
				}
				public Boolean TRASLADOS_ENTRADAIsKey(){
				    return false;
				}
				public Integer TRASLADOS_ENTRADALength(){
				    return null;
				}
				public Integer TRASLADOS_ENTRADAPrecision(){
				    return null;
				}
				public String TRASLADOS_ENTRADADefault(){
				
					return "";
				
				}
				public String TRASLADOS_ENTRADAComment(){
				
				    return "";
				
				}
				public String TRASLADOS_ENTRADAPattern(){
				
					return "";
				
				}
				public String TRASLADOS_ENTRADAOriginalDbColumnName(){
				
					return "TRASLADOS_ENTRADA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
						result = prime * result + ((this.LOTES_ID == null) ? 0 : this.LOTES_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row56Struct other = (row56Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.LOTES_ID == null) {
							if (other.LOTES_ID != null)
								return false;
						
						} else if (!this.LOTES_ID.equals(other.LOTES_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row56Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.LOTES_ID = this.LOTES_ID;
	            other.TRASLADOS_ENTRADA = this.TRASLADOS_ENTRADA;
	            
	}

	public void copyKeysDataTo(row56Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	other.LOTES_ID = this.LOTES_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.LOTES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LOTES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LOTES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.TRASLADOS_ENTRADA = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.TRASLADOS_ENTRADA = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.TRASLADOS_ENTRADA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TRASLADOS_ENTRADA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",LOTES_ID="+String.valueOf(LOTES_ID));
		sb.append(",TRASLADOS_ENTRADA="+String.valueOf(TRASLADOS_ENTRADA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row56Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.LOTES_ID, other.LOTES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_40Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_40_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row56Struct row56 = new row56Struct();




	
	/**
	 * [tAdvancedHash_row56 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row56", false);
		start_Hash.put("tAdvancedHash_row56", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row56";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row56");
					}
				
		int tos_count_tAdvancedHash_row56 = 0;
		

			   		// connection name:row56
			   		// source node:tOracleInput_40 - inputs:(after_tOracleInput_37) outputs:(row56,row56) | target node:tAdvancedHash_row56 - inputs:(row56) outputs:()
			   		// linked node: tMap_14 - inputs:(row47,row48,row49,row51,row55,row57,row46,row56) outputs:(Lotes)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row56 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row56Struct> tHash_Lookup_row56 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row56Struct>getLookup(matchingModeEnum_row56);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row56", tHash_Lookup_row56);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row56 begin ] stop
 */



	
	/**
	 * [tOracleInput_40 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_40", false);
		start_Hash.put("tOracleInput_40", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_40";
	
	
		int tos_count_tOracleInput_40 = 0;
		
	


	
		    int nb_line_tOracleInput_40 = 0;
		    java.sql.Connection conn_tOracleInput_40 = null;
				conn_tOracleInput_40 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_40 = false;
				boolean isConnectionWrapped_tOracleInput_40 = !(conn_tOracleInput_40 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_40.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_40 = null;
                if (isConnectionWrapped_tOracleInput_40) {
					unwrappedOraConn_tOracleInput_40 = conn_tOracleInput_40.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_40 != null) {
                        isTimeZoneNull_tOracleInput_40 = (unwrappedOraConn_tOracleInput_40.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_40 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_40).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_40) {
					java.sql.Statement stmtGetTZ_tOracleInput_40 = conn_tOracleInput_40.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_40 = stmtGetTZ_tOracleInput_40.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_40 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_40.next()) {
						sessionTimezone_tOracleInput_40 = rsGetTZ_tOracleInput_40.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_40 && unwrappedOraConn_tOracleInput_40 != null) {
                        unwrappedOraConn_tOracleInput_40.setSessionTimeZone(sessionTimezone_tOracleInput_40);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_40).setSessionTimeZone(sessionTimezone_tOracleInput_40);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_40 = conn_tOracleInput_40.createStatement();

		    String dbquery_tOracleInput_40 = "\nSELECT \n    GUO.ID  AS UORG_ID,\n    MINV.ID AS LOTES_ID,    \n    SUM(DTRA.CANTIDAD_RECIBIDA) AS TRASLADOS_SALIDA  "
+"    \nFROM VAC_TRASLADOS TRA\nINNER JOIN MED_MOVIMIENTOS  MOVS   ON TRA.MOVIMIENTO_SOLICITUD_ID = MOVS.ID\nINNER JOIN ME"
+"D_TMOVIMIENTOS TMOVS  ON MOVS.TMOVIMIENTOS_ID = TMOVS.ID\nINNER JOIN MED_MOVIMIENTOS  MOVR   ON TRA.MOVIMIENTO_RESPUESTA"
+"_ID = MOVR.ID\nINNER JOIN MED_TMOVIMIENTOS TMOVR  ON MOVR.TMOVIMIENTOS_ID = TMOVR.ID AND TMOVR.SIGLA = 'CTR'\nINNER JOIN"
+" VAC_DTRASLADOS   DTRA   ON DTRA.TRASLADO_ID = TRA.ID\nINNER JOIN VAC_INVENTARIOS  INV    ON DTRA.VINVENTARIO_ID = INV.I"
+"D\nINNER JOIN MED_INVENTARIOS  MINV   ON DTRA.MINVENTARIO_ID = MINV.ID\nINNER JOIN GEN_UORG         GUO    ON TRA.UDESTI"
+"NO_ID = GUO.ID\nWHERE TMOVS.SIGLA = 'STR'\nAND TRA.ESTADO = 'Aprobado'\nAND TO_CHAR(TRA.FREGISTRO_SOLICITUD, 'YYYYMM') ="
+" '"+context.PERIODO+"'\nGROUP BY GUO.ID,\n         MINV.ID\n"

;
		    

		    globalMap.put("tOracleInput_40_QUERY",dbquery_tOracleInput_40);

		    java.sql.ResultSet rs_tOracleInput_40 = null;

		    try {
		    	rs_tOracleInput_40 = stmt_tOracleInput_40.executeQuery(dbquery_tOracleInput_40);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_40 = rs_tOracleInput_40.getMetaData();
		    	int colQtyInRs_tOracleInput_40 = rsmd_tOracleInput_40.getColumnCount();

		    String tmpContent_tOracleInput_40 = null;
		    
		    
		    while (rs_tOracleInput_40.next()) {
		        nb_line_tOracleInput_40++;
		        
							if(colQtyInRs_tOracleInput_40 < 1) {
								row56.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_40.getObject(1) != null) {
						row56.UORG_ID = rs_tOracleInput_40.getBigDecimal(1);
					} else {
				
						row56.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_40 < 2) {
								row56.LOTES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_40.getObject(2) != null) {
						row56.LOTES_ID = rs_tOracleInput_40.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_40 < 3) {
								row56.TRASLADOS_ENTRADA = null;
							} else {
		                          
					if(rs_tOracleInput_40.getObject(3) != null) {
						row56.TRASLADOS_ENTRADA = rs_tOracleInput_40.getBigDecimal(3);
					} else {
				
						row56.TRASLADOS_ENTRADA = null;
					}
		                    }
					




 



/**
 * [tOracleInput_40 begin ] stop
 */
	
	/**
	 * [tOracleInput_40 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_40";
	
	

 


	tos_count_tOracleInput_40++;

/**
 * [tOracleInput_40 main ] stop
 */
	
	/**
	 * [tOracleInput_40 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_40";
	
	

 



/**
 * [tOracleInput_40 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row56 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row56";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row56"
						
						);
					}
					


			   
			   

					row56Struct row56_HashRow = new row56Struct();
		   	   	   
				
				row56_HashRow.UORG_ID = row56.UORG_ID;
				
				row56_HashRow.LOTES_ID = row56.LOTES_ID;
				
				row56_HashRow.TRASLADOS_ENTRADA = row56.TRASLADOS_ENTRADA;
				
			tHash_Lookup_row56.put(row56_HashRow);
			
            




 


	tos_count_tAdvancedHash_row56++;

/**
 * [tAdvancedHash_row56 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row56 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row56";
	
	

 



/**
 * [tAdvancedHash_row56 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row56 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row56";
	
	

 



/**
 * [tAdvancedHash_row56 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_40 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_40";
	
	

 



/**
 * [tOracleInput_40 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_40 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_40";
	
	

}
}finally{
	if (rs_tOracleInput_40 != null) {
		rs_tOracleInput_40.close();
	}
	if (stmt_tOracleInput_40 != null) {
		stmt_tOracleInput_40.close();
	}
}

globalMap.put("tOracleInput_40_NB_LINE",nb_line_tOracleInput_40);
 

ok_Hash.put("tOracleInput_40", true);
end_Hash.put("tOracleInput_40", System.currentTimeMillis());




/**
 * [tOracleInput_40 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row56 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row56";
	
	

tHash_Lookup_row56.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row56");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row56", true);
end_Hash.put("tAdvancedHash_row56", System.currentTimeMillis());




/**
 * [tAdvancedHash_row56 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_40 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_40";
	
	

 



/**
 * [tOracleInput_40 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row56 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row56";
	
	

 



/**
 * [tAdvancedHash_row56 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_40_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();
row27Struct row11 = row27;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	
	String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("moment");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("root_pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("father_pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("project");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("job");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("context");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("priority");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("type");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("origin");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("message");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("code");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row27.type = lcm.getType();
		row27.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row27.priority = lcm.getPriority();
		row27.message = lcm.getMessage();
		row27.code = lcm.getCode();
		
		row27.moment = java.util.Calendar.getInstance().getTime();
	
    	row27.pid = pid;
		row27.root_pid = rootPid;
		row27.father_pid = fatherPid;
	
    	row27.project = projectName;
    	row27.job = jobName;
    	row27.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row27"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row27.moment != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(row27.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row27.pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row27.pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row27.root_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row27.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row27.father_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row27.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row27.project != null) {
                        sb_tFileOutputDelimited_2.append(
                            row27.project
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row27.job != null) {
                        sb_tFileOutputDelimited_2.append(
                            row27.job
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row27.context != null) {
                        sb_tFileOutputDelimited_2.append(
                            row27.context
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row27.priority != null) {
                        sb_tFileOutputDelimited_2.append(
                            row27.priority
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row27.type != null) {
                        sb_tFileOutputDelimited_2.append(
                            row27.type
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row27.origin != null) {
                        sb_tFileOutputDelimited_2.append(
                            row27.origin
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row27.message != null) {
                        sb_tFileOutputDelimited_2.append(
                            row27.message
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row27.code != null) {
                        sb_tFileOutputDelimited_2.append(
                            row27.code
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

                    }



 
     row11 = row27;


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
              					String classpath_tRunJob_1_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xpathutil-1.0.0.jar;../lib/slf4j-api-1.7.34.jar;../lib/crypto-utils-7.1.16.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/dom4j-2.1.3.jar;../lib/jaxen-1.1.6.jar;mail_1_3.jar;";
              					
              					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5), true);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "rep_inicio_f5.mail_1_3.Mail");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		      					String classpath_tRunJob_1_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xpathutil-1.0.0.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/../lib/jaxen-1.1.6.jar:$ROOT_PATH/mail_1_3.jar:";
		      					
		      					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "rep_inicio_f5.mail_1_3.Mail");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = row11.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = row11.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("project", obj_tRunJob_1);
	
		obj_tRunJob_1 = row11.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = row11.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = row11.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origin=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origin=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origin=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origin", obj_tRunJob_1);
	
		obj_tRunJob_1 = row11.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_destino", obj_tRunJob_1);
	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;
		
		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join();
            error_tRunJob_1.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


context.ESTADO_EXEC = "Fail";
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public void tPrejob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_2", false);
		start_Hash.put("tPrejob_2", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_2";
	
	
		int tos_count_tPrejob_2 = 0;
		

 



/**
 * [tPrejob_2 begin ] stop
 */
	
	/**
	 * [tPrejob_2 main ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 


	tos_count_tPrejob_2++;

/**
 * [tPrejob_2 main ] stop
 */
	
	/**
	 * [tPrejob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 



/**
 * [tPrejob_2 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 



/**
 * [tPrejob_2 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_2 end ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 

ok_Hash.put("tPrejob_2", true);
end_Hash.put("tPrejob_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_2 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 



/**
 * [tPrejob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_2_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 7;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row34Struct row34 = new row34Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"UTF-8");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_1 = false;
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	org.dom4j.XPath xpath_7 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PathStorage","/connectionStrings"));
	xpath_7.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(7,xpath_7);
			
	org.dom4j.XPath xpath_8 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPHost","/connectionStrings"));
	xpath_8.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(8,xpath_8);
			
	org.dom4j.XPath xpath_9 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPPort","/connectionStrings"));
	xpath_9.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(9,xpath_9);
			
	org.dom4j.XPath xpath_10 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("UsernameMail","/connectionStrings"));
	xpath_10.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(10,xpath_10);
			
	org.dom4j.XPath xpath_11 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PasswordMail","/connectionStrings"));
	xpath_11.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(11,xpath_11);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.Node temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
	if (nb_line_tFileInputXML_1>=50) {
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row34 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row34 = new row34Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Host =null;
									}else{
		row34.Host = str_tFileInputXML_1;
	}
    Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
    if(obj1_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj1_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_1 instanceof String || obj1_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
    } else if(obj1_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Port =null;
									}else{
		row34.Port = str_tFileInputXML_1;
	}
    Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
    if(obj2_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj2_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_1 instanceof String || obj2_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
    } else if(obj2_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Sid =null;
									}else{
		row34.Sid = str_tFileInputXML_1;
	}
    Object obj3_tFileInputXML_1 = xpaths_tFileInputXML_1.get(3).evaluate(temp_tFileInputXML_1);
    if(obj3_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj3_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_1 instanceof String || obj3_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj3_tFileInputXML_1);
    } else if(obj3_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.ServiceName =null;
									}else{
		row34.ServiceName = str_tFileInputXML_1;
	}
    Object obj4_tFileInputXML_1 = xpaths_tFileInputXML_1.get(4).evaluate(temp_tFileInputXML_1);
    if(obj4_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj4_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj4_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_1 instanceof String || obj4_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj4_tFileInputXML_1);
    } else if(obj4_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Schema =null;
									}else{
		row34.Schema = str_tFileInputXML_1;
	}
    Object obj5_tFileInputXML_1 = xpaths_tFileInputXML_1.get(5).evaluate(temp_tFileInputXML_1);
    if(obj5_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj5_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj5_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_1 instanceof String || obj5_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj5_tFileInputXML_1);
    } else if(obj5_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.User =null;
									}else{
		row34.User = str_tFileInputXML_1;
	}
    Object obj6_tFileInputXML_1 = xpaths_tFileInputXML_1.get(6).evaluate(temp_tFileInputXML_1);
    if(obj6_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj6_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj6_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_1 instanceof String || obj6_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj6_tFileInputXML_1);
    } else if(obj6_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Password =null;
									}else{
		row34.Password = str_tFileInputXML_1;
	}
    Object obj7_tFileInputXML_1 = xpaths_tFileInputXML_1.get(7).evaluate(temp_tFileInputXML_1);
    if(obj7_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj7_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj7_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj7_tFileInputXML_1 instanceof String || obj7_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj7_tFileInputXML_1);
    } else if(obj7_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj7_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.PathStorage =null;
									}else{
		row34.PathStorage = str_tFileInputXML_1;
	}
    Object obj8_tFileInputXML_1 = xpaths_tFileInputXML_1.get(8).evaluate(temp_tFileInputXML_1);
    if(obj8_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj8_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj8_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj8_tFileInputXML_1 instanceof String || obj8_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj8_tFileInputXML_1);
    } else if(obj8_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj8_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.SMTPHost =null;
									}else{
		row34.SMTPHost = str_tFileInputXML_1;
	}
    Object obj9_tFileInputXML_1 = xpaths_tFileInputXML_1.get(9).evaluate(temp_tFileInputXML_1);
    if(obj9_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj9_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj9_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj9_tFileInputXML_1 instanceof String || obj9_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj9_tFileInputXML_1);
    } else if(obj9_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj9_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.SMTPPort =null;
									}else{
		row34.SMTPPort = str_tFileInputXML_1;
	}
    Object obj10_tFileInputXML_1 = xpaths_tFileInputXML_1.get(10).evaluate(temp_tFileInputXML_1);
    if(obj10_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj10_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj10_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj10_tFileInputXML_1 instanceof String || obj10_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj10_tFileInputXML_1);
    } else if(obj10_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj10_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.UsernameMail =null;
									}else{
		row34.UsernameMail = str_tFileInputXML_1;
	}
    Object obj11_tFileInputXML_1 = xpaths_tFileInputXML_1.get(11).evaluate(temp_tFileInputXML_1);
    if(obj11_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj11_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj11_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj11_tFileInputXML_1 instanceof String || obj11_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj11_tFileInputXML_1);
    } else if(obj11_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj11_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.PasswordMail =null;
									}else{
		row34.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row34 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row34"
if(row34 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row34"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis
context.db_origen_Server = row34.Host;
context.db_origen_Port = row34.Port;
context.db_origen_ServiceName = row34.ServiceName;
context.db_origen_Schema = row34.Schema;
context.db_origen_Login = row34.User;
context.db_origen_Password = row34.Password;


//Guarda en variables de contexto la fecha de ejecución y la hora de inicio

context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");
context.JOB = "VAC";

//Imprime en consola el job, la fecha de ejecución y la hora de inicio
System.out.println(context.JOB+" :-Start: "+context.FECHA_EJECUCION+" "+context.HORA_INICIO);


    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "row34"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tFileInputXML_2Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_VAC_F5 = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 6;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 12;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 11;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_VAC_F5.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_VAC_F5.length == 0) {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_VAC_F5 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_VAC_F5, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_VAC_F5) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row35Struct row35 = new row35Struct();




	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tFileInputXML_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_2", false);
		start_Hash.put("tFileInputXML_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_2";
	
	
		int tos_count_tFileInputXML_2 = 0;
		

	

int nb_line_tFileInputXML_2 = 0;

	String os_tFileInputXML_2 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_2=false;
	if(os_tFileInputXML_2.indexOf("windows") > -1 || os_tFileInputXML_2.indexOf("nt") > -1){
		isWindows_tFileInputXML_2=true;
	}
class NameSpaceTool_tFileInputXML_2 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_2{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_2 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_2 = null;
try {
	filename_tFileInputXML_2 = context.BODEGA;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_2 != null && filename_tFileInputXML_2 instanceof String && filename_tFileInputXML_2.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_2){
		filename_tFileInputXML_2 = filename_tFileInputXML_2.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_2 = true;
org.dom4j.Document doc_tFileInputXML_2 = null;
java.io.Closeable toClose_tFileInputXML_2 = null;
try{
	if(filename_tFileInputXML_2 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_2 = (java.io.InputStream)filename_tFileInputXML_2;
		toClose_tFileInputXML_2 = inputStream_tFileInputXML_2;
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(inputStream_tFileInputXML_2);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_2 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_2)),"UTF-8");
		toClose_tFileInputXML_2 = unicodeReader_tFileInputXML_2;
		org.xml.sax.InputSource in_tFileInputXML_2= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_2);
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(in_tFileInputXML_2);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_2 = false;
} finally {
	if(toClose_tFileInputXML_2!=null) {
		toClose_tFileInputXML_2.close();
	}
}
if(isValidFile_tFileInputXML_2){
NameSpaceTool_tFileInputXML_2 nsTool_tFileInputXML_2 = new NameSpaceTool_tFileInputXML_2();
nsTool_tFileInputXML_2.countNSMap(doc_tFileInputXML_2.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_2 = nsTool_tFileInputXML_2.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_2 = doc_tFileInputXML_2.createXPath(nsTool_tFileInputXML_2.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_2.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_2.selectNodes(doc_tFileInputXML_2);	
XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();
String str_tFileInputXML_2 = "";
org.dom4j.Node node_tFileInputXML_2 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_2=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_2{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_2 xPathUtil_tFileInputXML_2 = new XPathUtil_tFileInputXML_2();
	xPathUtil_tFileInputXML_2.initXPaths(xpaths_tFileInputXML_2, nsTool_tFileInputXML_2, xmlNameSpaceMap_tFileInputXML_2);
for (org.dom4j.Node temp_tFileInputXML_2: nodeList_tFileInputXML_2) {
	if (nb_line_tFileInputXML_2>=50) {
	
		break;
	}
		nb_line_tFileInputXML_2++;
		
	row35 = null;			
	boolean whetherReject_tFileInputXML_2 = false;
	row35 = new row35Struct();
	try{
    Object obj0_tFileInputXML_2 = xpaths_tFileInputXML_2.get(0).evaluate(temp_tFileInputXML_2);
    if(obj0_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj0_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj0_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_2 instanceof String || obj0_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj0_tFileInputXML_2);
    } else if(obj0_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Host =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Host ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Host =null;
									}else{
		row35.Host = str_tFileInputXML_2;
	}
    Object obj1_tFileInputXML_2 = xpaths_tFileInputXML_2.get(1).evaluate(temp_tFileInputXML_2);
    if(obj1_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj1_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj1_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_2 instanceof String || obj1_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj1_tFileInputXML_2);
    } else if(obj1_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Port =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Port ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Port =null;
									}else{
		row35.Port = str_tFileInputXML_2;
	}
    Object obj2_tFileInputXML_2 = xpaths_tFileInputXML_2.get(2).evaluate(temp_tFileInputXML_2);
    if(obj2_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj2_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj2_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_2 instanceof String || obj2_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj2_tFileInputXML_2);
    } else if(obj2_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Sid =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Sid ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Sid =null;
									}else{
		row35.Sid = str_tFileInputXML_2;
	}
    Object obj3_tFileInputXML_2 = xpaths_tFileInputXML_2.get(3).evaluate(temp_tFileInputXML_2);
    if(obj3_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj3_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj3_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_2 instanceof String || obj3_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj3_tFileInputXML_2);
    } else if(obj3_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.ServiceName =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.ServiceName ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.ServiceName =null;
									}else{
		row35.ServiceName = str_tFileInputXML_2;
	}
    Object obj4_tFileInputXML_2 = xpaths_tFileInputXML_2.get(4).evaluate(temp_tFileInputXML_2);
    if(obj4_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj4_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj4_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_2 instanceof String || obj4_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj4_tFileInputXML_2);
    } else if(obj4_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Schema =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Schema ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Schema =null;
									}else{
		row35.Schema = str_tFileInputXML_2;
	}
    Object obj5_tFileInputXML_2 = xpaths_tFileInputXML_2.get(5).evaluate(temp_tFileInputXML_2);
    if(obj5_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj5_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj5_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_2 instanceof String || obj5_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj5_tFileInputXML_2);
    } else if(obj5_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.User =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.User ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.User =null;
									}else{
		row35.User = str_tFileInputXML_2;
	}
    Object obj6_tFileInputXML_2 = xpaths_tFileInputXML_2.get(6).evaluate(temp_tFileInputXML_2);
    if(obj6_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj6_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj6_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_2 instanceof String || obj6_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj6_tFileInputXML_2);
    } else if(obj6_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Password =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Password ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Password =null;
									}else{
		row35.Password = str_tFileInputXML_2;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_2 = true;
                System.err.println(e.getMessage());
                row35 = null;
    }
			
			

 



/**
 * [tFileInputXML_2 begin ] stop
 */
	
	/**
	 * [tFileInputXML_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 


	tos_count_tFileInputXML_2++;

/**
 * [tFileInputXML_2 main ] stop
 */
	
	/**
	 * [tFileInputXML_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_begin ] stop
 */
// Start of branch "row35"
if(row35 != null) { 



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row35"
						
						);
					}
					

    //Guarda en variables de contexto los parametros para la conexión a la bodega 
context.db_destino_Server = row35.Host;
context.db_destino_Port = row35.Port;
context.db_destino_ServiceName = row35.ServiceName;
context.db_destino_Schema = row35.Schema;
context.db_destino_Login = row35.User;
context.db_destino_Password = row35.Password;

    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */

} // End of branch "row35"




	
	/**
	 * [tFileInputXML_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	


}
	}
	globalMap.put("tFileInputXML_2_NB_LINE",nb_line_tFileInputXML_2);

	

 

ok_Hash.put("tFileInputXML_2", true);
end_Hash.put("tFileInputXML_2", System.currentTimeMillis());




/**
 * [tFileInputXML_2 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tOracleConnection_2Process(globalMap);



/**
 * [tJavaRow_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_2", false);
		start_Hash.put("tOracleConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_2";
	
	
		int tos_count_tOracleConnection_2 = 0;
		
	

	
        String url_tOracleConnection_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_2", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_2 = context.db_destino_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_2 = context.db_destino_Password; 
		String dbPwd_tOracleConnection_2 = decryptedPassword_tOracleConnection_2;
	
	
	java.sql.Connection conn_tOracleConnection_2 = null;
	
		
			String driverClass_tOracleConnection_2 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_2 = java.lang.Class.forName(driverClass_tOracleConnection_2);
			globalMap.put("driverClass_tOracleConnection_2", driverClass_tOracleConnection_2);
		
			java.util.Properties atnParamsPrope_tOracleConnection_2 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_2.put("user",dbUser_tOracleConnection_2);
			    atnParamsPrope_tOracleConnection_2.put("password",dbPwd_tOracleConnection_2);
			if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                atnParamsPrope_tOracleConnection_2.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_2 = java.sql.DriverManager.getConnection(url_tOracleConnection_2, atnParamsPrope_tOracleConnection_2);

		globalMap.put("conn_tOracleConnection_2", conn_tOracleConnection_2);
	if (null != conn_tOracleConnection_2) {
		
			conn_tOracleConnection_2.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_2",context.db_destino_Server);
        globalMap.put("port_" + "tOracleConnection_2",context.db_destino_Port);
        globalMap.put("dbname_" + "tOracleConnection_2",context.db_destino_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_2", context.db_destino_Schema);
	globalMap.put("username_" + "tOracleConnection_2",context.db_destino_Login);
	globalMap.put("password_" + "tOracleConnection_2",dbPwd_tOracleConnection_2);

 



/**
 * [tOracleConnection_2 begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 


	tos_count_tOracleConnection_2++;

/**
 * [tOracleConnection_2 main ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_2 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 

ok_Hash.put("tOracleConnection_2", true);
end_Hash.put("tOracleConnection_2", System.currentTimeMillis());




/**
 * [tOracleConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final VAC_F5 VAC_F5Class = new VAC_F5();

        int exitCode = VAC_F5Class.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = VAC_F5.class.getClassLoader().getResourceAsStream("rep_inicio_f5/vac_f5_1_2/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = VAC_F5.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("ACTUALIZACION_TOTAL", "id_Boolean");
                        if(context.getStringValue("ACTUALIZACION_TOTAL") == null) {
                            context.ACTUALIZACION_TOTAL = null;
                        } else {
                            try{
                                context.ACTUALIZACION_TOTAL=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("ACTUALIZACION_TOTAL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ACTUALIZACION_TOTAL", e.getMessage()));
                                context.ACTUALIZACION_TOTAL=null;
                            }
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("CONDITION", "id_String");
                        if(context.getStringValue("CONDITION") == null) {
                            context.CONDITION = null;
                        } else {
                            context.CONDITION=(String) context.getProperty("CONDITION");
                        }
                        context.setContextType("CONDITION_PRINCIPAL", "id_String");
                        if(context.getStringValue("CONDITION_PRINCIPAL") == null) {
                            context.CONDITION_PRINCIPAL = null;
                        } else {
                            context.CONDITION_PRINCIPAL=(String) context.getProperty("CONDITION_PRINCIPAL");
                        }
                        context.setContextType("ERROR", "id_String");
                        if(context.getStringValue("ERROR") == null) {
                            context.ERROR = null;
                        } else {
                            context.ERROR=(String) context.getProperty("ERROR");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FANTERIOR", "id_String");
                        if(context.getStringValue("FANTERIOR") == null) {
                            context.FANTERIOR = null;
                        } else {
                            context.FANTERIOR=(String) context.getProperty("FANTERIOR");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("FECHA_TERMINACION", "id_String");
                        if(context.getStringValue("FECHA_TERMINACION") == null) {
                            context.FECHA_TERMINACION = null;
                        } else {
                            context.FECHA_TERMINACION=(String) context.getProperty("FECHA_TERMINACION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("ID_SOLICITUD", "id_Integer");
                        if(context.getStringValue("ID_SOLICITUD") == null) {
                            context.ID_SOLICITUD = null;
                        } else {
                            try{
                                context.ID_SOLICITUD=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ID_SOLICITUD"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ID_SOLICITUD", e.getMessage()));
                                context.ID_SOLICITUD=null;
                            }
                        }
                        context.setContextType("JOB", "id_String");
                        if(context.getStringValue("JOB") == null) {
                            context.JOB = null;
                        } else {
                            context.JOB=(String) context.getProperty("JOB");
                        }
                        context.setContextType("LAST_DAYS", "id_Integer");
                        if(context.getStringValue("LAST_DAYS") == null) {
                            context.LAST_DAYS = null;
                        } else {
                            try{
                                context.LAST_DAYS=routines.system.ParserUtils.parseTo_Integer (context.getProperty("LAST_DAYS"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "LAST_DAYS", e.getMessage()));
                                context.LAST_DAYS=null;
                            }
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("LOGS_STAT", "id_String");
                        if(context.getStringValue("LOGS_STAT") == null) {
                            context.LOGS_STAT = null;
                        } else {
                            context.LOGS_STAT=(String) context.getProperty("LOGS_STAT");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("RutaSistema", "id_String");
                        if(context.getStringValue("RutaSistema") == null) {
                            context.RutaSistema = null;
                        } else {
                            context.RutaSistema=(String) context.getProperty("RutaSistema");
                        }
                        context.setContextType("ActualizacionTotal", "id_Integer");
                        if(context.getStringValue("ActualizacionTotal") == null) {
                            context.ActualizacionTotal = null;
                        } else {
                            try{
                                context.ActualizacionTotal=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ActualizacionTotal"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ActualizacionTotal", e.getMessage()));
                                context.ActualizacionTotal=null;
                            }
                        }
                        context.setContextType("ANIO_PERIODO", "id_String");
                        if(context.getStringValue("ANIO_PERIODO") == null) {
                            context.ANIO_PERIODO = null;
                        } else {
                            context.ANIO_PERIODO=(String) context.getProperty("ANIO_PERIODO");
                        }
                        context.setContextType("BorradoTotal", "id_Integer");
                        if(context.getStringValue("BorradoTotal") == null) {
                            context.BorradoTotal = null;
                        } else {
                            try{
                                context.BorradoTotal=routines.system.ParserUtils.parseTo_Integer (context.getProperty("BorradoTotal"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "BorradoTotal", e.getMessage()));
                                context.BorradoTotal=null;
                            }
                        }
                        context.setContextType("DIA_EJECUCION", "id_String");
                        if(context.getStringValue("DIA_EJECUCION") == null) {
                            context.DIA_EJECUCION = null;
                        } else {
                            context.DIA_EJECUCION=(String) context.getProperty("DIA_EJECUCION");
                        }
                        context.setContextType("ESTADO_PROC", "id_Integer");
                        if(context.getStringValue("ESTADO_PROC") == null) {
                            context.ESTADO_PROC = null;
                        } else {
                            try{
                                context.ESTADO_PROC=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ESTADO_PROC"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ESTADO_PROC", e.getMessage()));
                                context.ESTADO_PROC=null;
                            }
                        }
                        context.setContextType("FECHA_INICIO_ACTUALIZACION", "id_String");
                        if(context.getStringValue("FECHA_INICIO_ACTUALIZACION") == null) {
                            context.FECHA_INICIO_ACTUALIZACION = null;
                        } else {
                            context.FECHA_INICIO_ACTUALIZACION=(String) context.getProperty("FECHA_INICIO_ACTUALIZACION");
                        }
                        context.setContextType("FECHA_MAXIMA", "id_String");
                        if(context.getStringValue("FECHA_MAXIMA") == null) {
                            context.FECHA_MAXIMA = null;
                        } else {
                            context.FECHA_MAXIMA=(String) context.getProperty("FECHA_MAXIMA");
                        }
                        context.setContextType("FECHA_MAXIMA2", "id_String");
                        if(context.getStringValue("FECHA_MAXIMA2") == null) {
                            context.FECHA_MAXIMA2 = null;
                        } else {
                            context.FECHA_MAXIMA2=(String) context.getProperty("FECHA_MAXIMA2");
                        }
                        context.setContextType("FECHA_MAXIMA3", "id_String");
                        if(context.getStringValue("FECHA_MAXIMA3") == null) {
                            context.FECHA_MAXIMA3 = null;
                        } else {
                            context.FECHA_MAXIMA3=(String) context.getProperty("FECHA_MAXIMA3");
                        }
                        context.setContextType("FECHA_MENOR", "id_String");
                        if(context.getStringValue("FECHA_MENOR") == null) {
                            context.FECHA_MENOR = null;
                        } else {
                            context.FECHA_MENOR=(String) context.getProperty("FECHA_MENOR");
                        }
                        context.setContextType("FECHA_MENOR2", "id_String");
                        if(context.getStringValue("FECHA_MENOR2") == null) {
                            context.FECHA_MENOR2 = null;
                        } else {
                            context.FECHA_MENOR2=(String) context.getProperty("FECHA_MENOR2");
                        }
                        context.setContextType("FECHA_MENOR3", "id_String");
                        if(context.getStringValue("FECHA_MENOR3") == null) {
                            context.FECHA_MENOR3 = null;
                        } else {
                            context.FECHA_MENOR3=(String) context.getProperty("FECHA_MENOR3");
                        }
                        context.setContextType("FECHA_PERIODO", "id_String");
                        if(context.getStringValue("FECHA_PERIODO") == null) {
                            context.FECHA_PERIODO = null;
                        } else {
                            context.FECHA_PERIODO=(String) context.getProperty("FECHA_PERIODO");
                        }
                        context.setContextType("FECHA_PRIMERDIA", "id_String");
                        if(context.getStringValue("FECHA_PRIMERDIA") == null) {
                            context.FECHA_PRIMERDIA = null;
                        } else {
                            context.FECHA_PRIMERDIA=(String) context.getProperty("FECHA_PRIMERDIA");
                        }
                        context.setContextType("ID_PERIODO", "id_BigDecimal");
                        if(context.getStringValue("ID_PERIODO") == null) {
                            context.ID_PERIODO = null;
                        } else {
                            try{
                                context.ID_PERIODO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ID_PERIODO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ID_PERIODO", e.getMessage()));
                                context.ID_PERIODO=null;
                            }
                        }
                        context.setContextType("ID_PRIMERDIA", "id_BigDecimal");
                        if(context.getStringValue("ID_PRIMERDIA") == null) {
                            context.ID_PRIMERDIA = null;
                        } else {
                            try{
                                context.ID_PRIMERDIA=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ID_PRIMERDIA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ID_PRIMERDIA", e.getMessage()));
                                context.ID_PRIMERDIA=null;
                            }
                        }
                        context.setContextType("MENSAJE_PROC", "id_String");
                        if(context.getStringValue("MENSAJE_PROC") == null) {
                            context.MENSAJE_PROC = null;
                        } else {
                            context.MENSAJE_PROC=(String) context.getProperty("MENSAJE_PROC");
                        }
                        context.setContextType("PERIODO", "id_String");
                        if(context.getStringValue("PERIODO") == null) {
                            context.PERIODO = null;
                        } else {
                            context.PERIODO=(String) context.getProperty("PERIODO");
                        }
                        context.setContextType("PERIODO_PRIMERDIA", "id_String");
                        if(context.getStringValue("PERIODO_PRIMERDIA") == null) {
                            context.PERIODO_PRIMERDIA = null;
                        } else {
                            context.PERIODO_PRIMERDIA=(String) context.getProperty("PERIODO_PRIMERDIA");
                        }
                        context.setContextType("PeriodosSis", "id_String");
                        if(context.getStringValue("PeriodosSis") == null) {
                            context.PeriodosSis = null;
                        } else {
                            context.PeriodosSis=(String) context.getProperty("PeriodosSis");
                        }
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("ACTUALIZACION_TOTAL")) {
                context.ACTUALIZACION_TOTAL = (Boolean) parentContextMap.get("ACTUALIZACION_TOTAL");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("CONDITION")) {
                context.CONDITION = (String) parentContextMap.get("CONDITION");
            }if (parentContextMap.containsKey("CONDITION_PRINCIPAL")) {
                context.CONDITION_PRINCIPAL = (String) parentContextMap.get("CONDITION_PRINCIPAL");
            }if (parentContextMap.containsKey("ERROR")) {
                context.ERROR = (String) parentContextMap.get("ERROR");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FANTERIOR")) {
                context.FANTERIOR = (String) parentContextMap.get("FANTERIOR");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("FECHA_TERMINACION")) {
                context.FECHA_TERMINACION = (String) parentContextMap.get("FECHA_TERMINACION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("ID_SOLICITUD")) {
                context.ID_SOLICITUD = (Integer) parentContextMap.get("ID_SOLICITUD");
            }if (parentContextMap.containsKey("JOB")) {
                context.JOB = (String) parentContextMap.get("JOB");
            }if (parentContextMap.containsKey("LAST_DAYS")) {
                context.LAST_DAYS = (Integer) parentContextMap.get("LAST_DAYS");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("LOGS_STAT")) {
                context.LOGS_STAT = (String) parentContextMap.get("LOGS_STAT");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("RutaSistema")) {
                context.RutaSistema = (String) parentContextMap.get("RutaSistema");
            }if (parentContextMap.containsKey("ActualizacionTotal")) {
                context.ActualizacionTotal = (Integer) parentContextMap.get("ActualizacionTotal");
            }if (parentContextMap.containsKey("ANIO_PERIODO")) {
                context.ANIO_PERIODO = (String) parentContextMap.get("ANIO_PERIODO");
            }if (parentContextMap.containsKey("BorradoTotal")) {
                context.BorradoTotal = (Integer) parentContextMap.get("BorradoTotal");
            }if (parentContextMap.containsKey("DIA_EJECUCION")) {
                context.DIA_EJECUCION = (String) parentContextMap.get("DIA_EJECUCION");
            }if (parentContextMap.containsKey("ESTADO_PROC")) {
                context.ESTADO_PROC = (Integer) parentContextMap.get("ESTADO_PROC");
            }if (parentContextMap.containsKey("FECHA_INICIO_ACTUALIZACION")) {
                context.FECHA_INICIO_ACTUALIZACION = (String) parentContextMap.get("FECHA_INICIO_ACTUALIZACION");
            }if (parentContextMap.containsKey("FECHA_MAXIMA")) {
                context.FECHA_MAXIMA = (String) parentContextMap.get("FECHA_MAXIMA");
            }if (parentContextMap.containsKey("FECHA_MAXIMA2")) {
                context.FECHA_MAXIMA2 = (String) parentContextMap.get("FECHA_MAXIMA2");
            }if (parentContextMap.containsKey("FECHA_MAXIMA3")) {
                context.FECHA_MAXIMA3 = (String) parentContextMap.get("FECHA_MAXIMA3");
            }if (parentContextMap.containsKey("FECHA_MENOR")) {
                context.FECHA_MENOR = (String) parentContextMap.get("FECHA_MENOR");
            }if (parentContextMap.containsKey("FECHA_MENOR2")) {
                context.FECHA_MENOR2 = (String) parentContextMap.get("FECHA_MENOR2");
            }if (parentContextMap.containsKey("FECHA_MENOR3")) {
                context.FECHA_MENOR3 = (String) parentContextMap.get("FECHA_MENOR3");
            }if (parentContextMap.containsKey("FECHA_PERIODO")) {
                context.FECHA_PERIODO = (String) parentContextMap.get("FECHA_PERIODO");
            }if (parentContextMap.containsKey("FECHA_PRIMERDIA")) {
                context.FECHA_PRIMERDIA = (String) parentContextMap.get("FECHA_PRIMERDIA");
            }if (parentContextMap.containsKey("ID_PERIODO")) {
                context.ID_PERIODO = (BigDecimal) parentContextMap.get("ID_PERIODO");
            }if (parentContextMap.containsKey("ID_PRIMERDIA")) {
                context.ID_PRIMERDIA = (BigDecimal) parentContextMap.get("ID_PRIMERDIA");
            }if (parentContextMap.containsKey("MENSAJE_PROC")) {
                context.MENSAJE_PROC = (String) parentContextMap.get("MENSAJE_PROC");
            }if (parentContextMap.containsKey("PERIODO")) {
                context.PERIODO = (String) parentContextMap.get("PERIODO");
            }if (parentContextMap.containsKey("PERIODO_PRIMERDIA")) {
                context.PERIODO_PRIMERDIA = (String) parentContextMap.get("PERIODO_PRIMERDIA");
            }if (parentContextMap.containsKey("PeriodosSis")) {
                context.PeriodosSis = (String) parentContextMap.get("PeriodosSis");
            }if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_origen_Password");
			parametersToEncrypt.add("db_destino_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_2) {
globalMap.put("tPrejob_2_SUBPROCESS_STATE", -1);

e_tPrejob_2.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_2Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_2) {
globalMap.put("tJava_2_SUBPROCESS_STATE", -1);

e_tJava_2.printStackTrace();

}catch (java.lang.Error e_tJava_2) {
globalMap.put("tJava_2_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_2;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : VAC_F5");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tOracleConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));
            connections.put("conn_tOracleConnection_2", globalMap.get("conn_tOracleConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     2194436 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 11:51:04 AM COT
 ************************************************************************************************/