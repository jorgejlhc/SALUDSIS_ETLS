// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package rep_inicio_f5.fichafamiliar_1_3;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.Utils;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_13
	//import java.util.List;

	//the import part of tJavaRow_7
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: FichaFamiliar Purpose: Inserta información de la ficha familiar en  BFICHA_FAMILIAR<br>
 * Description: Inserta la información de la ficha familiar desde la BD saludsis hacia la bodega en la tabla BFICHA_FAMILIAR
Actualización
Fecha 			Quién 				Que 
06/09/2018		Roger Prieto		cambia los joblets por incompatibilidad con la versión comunity <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status DEV
 */
public class FichaFamiliar implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(COM_EPS_ID != null){
				
					this.setProperty("COM_EPS_ID", COM_EPS_ID.toString());
				
			}
			
			if(COM_FICHA_ID != null){
				
					this.setProperty("COM_FICHA_ID", COM_FICHA_ID.toString());
				
			}
			
			if(COM_FREGISTRO != null){
				
					String pattern_COM_FREGISTRO = "yyyy-MM-dd HH:mm:ss";
					String value_COM_FREGISTRO = "";
					String[] parts_COM_FREGISTRO = value_COM_FREGISTRO.split(";");
					if(parts_COM_FREGISTRO.length > 1){
						pattern_COM_FREGISTRO = parts_COM_FREGISTRO[0];
						this.setProperty("COM_FREGISTRO", pattern_COM_FREGISTRO + ";" + FormatterUtils.format_Date(COM_FREGISTRO, pattern_COM_FREGISTRO));
					}else{
						this.setProperty("COM_FREGISTRO", FormatterUtils.format_Date(COM_FREGISTRO, pattern_COM_FREGISTRO));
					}
				
			}
			
			if(COM_OPCION1 != null){
				
					this.setProperty("COM_OPCION1", COM_OPCION1.toString());
				
			}
			
			if(COM_OPCION2 != null){
				
					String pattern_COM_OPCION2 = "yyyy-MM-dd HH:mm:ss";
					String value_COM_OPCION2 = "";
					String[] parts_COM_OPCION2 = value_COM_OPCION2.split(";");
					if(parts_COM_OPCION2.length > 1){
						pattern_COM_OPCION2 = parts_COM_OPCION2[0];
						this.setProperty("COM_OPCION2", pattern_COM_OPCION2 + ";" + FormatterUtils.format_Date(COM_OPCION2, pattern_COM_OPCION2));
					}else{
						this.setProperty("COM_OPCION2", FormatterUtils.format_Date(COM_OPCION2, pattern_COM_OPCION2));
					}
				
			}
			
			if(COM_PERSONA_ID != null){
				
					this.setProperty("COM_PERSONA_ID", COM_PERSONA_ID.toString());
				
			}
			
			if(COM_RECOMENDACIONES != null){
				
					this.setProperty("COM_RECOMENDACIONES", COM_RECOMENDACIONES.toString());
				
			}
			
			if(COM_RESPUESTA != null){
				
					this.setProperty("COM_RESPUESTA", COM_RESPUESTA.toString());
				
			}
			
			if(COM_SIGLA != null){
				
					this.setProperty("COM_SIGLA", COM_SIGLA.toString());
				
			}
			
			if(COM_TPREGUNTAS_ID != null){
				
					this.setProperty("COM_TPREGUNTAS_ID", COM_TPREGUNTAS_ID.toString());
				
			}
			
			if(COM_TREGIMENSALUD_ID != null){
				
					this.setProperty("COM_TREGIMENSALUD_ID", COM_TREGIMENSALUD_ID.toString());
				
			}
			
			if(COM_TRESPUESTAS_ID != null){
				
					this.setProperty("COM_TRESPUESTAS_ID", COM_TRESPUESTAS_ID.toString());
				
			}
			
			if(COM_VPREDETERMINADO != null){
				
					this.setProperty("COM_VPREDETERMINADO", COM_VPREDETERMINADO.toString());
				
			}
			
			if(PER_EPS_ID != null){
				
					this.setProperty("PER_EPS_ID", PER_EPS_ID.toString());
				
			}
			
			if(PER_FICHA_ID != null){
				
					this.setProperty("PER_FICHA_ID", PER_FICHA_ID.toString());
				
			}
			
			if(PER_FREGISTRO != null){
				
					String pattern_PER_FREGISTRO = "yyyy-MM-dd HH:mm:ss";
					String value_PER_FREGISTRO = "";
					String[] parts_PER_FREGISTRO = value_PER_FREGISTRO.split(";");
					if(parts_PER_FREGISTRO.length > 1){
						pattern_PER_FREGISTRO = parts_PER_FREGISTRO[0];
						this.setProperty("PER_FREGISTRO", pattern_PER_FREGISTRO + ";" + FormatterUtils.format_Date(PER_FREGISTRO, pattern_PER_FREGISTRO));
					}else{
						this.setProperty("PER_FREGISTRO", FormatterUtils.format_Date(PER_FREGISTRO, pattern_PER_FREGISTRO));
					}
				
			}
			
			if(PER_OPCION1 != null){
				
					this.setProperty("PER_OPCION1", PER_OPCION1.toString());
				
			}
			
			if(PER_OPCION2 != null){
				
					String pattern_PER_OPCION2 = "yyyy-MM-dd HH:mm:ss";
					String value_PER_OPCION2 = "";
					String[] parts_PER_OPCION2 = value_PER_OPCION2.split(";");
					if(parts_PER_OPCION2.length > 1){
						pattern_PER_OPCION2 = parts_PER_OPCION2[0];
						this.setProperty("PER_OPCION2", pattern_PER_OPCION2 + ";" + FormatterUtils.format_Date(PER_OPCION2, pattern_PER_OPCION2));
					}else{
						this.setProperty("PER_OPCION2", FormatterUtils.format_Date(PER_OPCION2, pattern_PER_OPCION2));
					}
				
			}
			
			if(PER_PERSONA_ID != null){
				
					this.setProperty("PER_PERSONA_ID", PER_PERSONA_ID.toString());
				
			}
			
			if(PER_RECOMENDACIONES != null){
				
					this.setProperty("PER_RECOMENDACIONES", PER_RECOMENDACIONES.toString());
				
			}
			
			if(PER_RESPUESTA != null){
				
					this.setProperty("PER_RESPUESTA", PER_RESPUESTA.toString());
				
			}
			
			if(PER_SIGLA != null){
				
					this.setProperty("PER_SIGLA", PER_SIGLA.toString());
				
			}
			
			if(PER_TPREGUNTAS_ID != null){
				
					this.setProperty("PER_TPREGUNTAS_ID", PER_TPREGUNTAS_ID.toString());
				
			}
			
			if(PER_TREGIMENSALUD_ID != null){
				
					this.setProperty("PER_TREGIMENSALUD_ID", PER_TREGIMENSALUD_ID.toString());
				
			}
			
			if(PER_TRESPUESTAS_ID != null){
				
					this.setProperty("PER_TRESPUESTAS_ID", PER_TRESPUESTAS_ID.toString());
				
			}
			
			if(PER_VPREDETERMINADO != null){
				
					this.setProperty("PER_VPREDETERMINADO", PER_VPREDETERMINADO.toString());
				
			}
			
			if(ACTUALIZACION_TOTAL != null){
				
					this.setProperty("ACTUALIZACION_TOTAL", ACTUALIZACION_TOTAL.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(CONDITION != null){
				
					this.setProperty("CONDITION", CONDITION.toString());
				
			}
			
			if(CONDITION_PRINCIPAL != null){
				
					this.setProperty("CONDITION_PRINCIPAL", CONDITION_PRINCIPAL.toString());
				
			}
			
			if(ERROR != null){
				
					this.setProperty("ERROR", ERROR.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FANTERIOR != null){
				
					this.setProperty("FANTERIOR", FANTERIOR.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(FECHA_TERMINACION != null){
				
					this.setProperty("FECHA_TERMINACION", FECHA_TERMINACION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(ID_SOLICITUD != null){
				
					this.setProperty("ID_SOLICITUD", ID_SOLICITUD.toString());
				
			}
			
			if(JOB != null){
				
					this.setProperty("JOB", JOB.toString());
				
			}
			
			if(LAST_DAYS != null){
				
					this.setProperty("LAST_DAYS", LAST_DAYS.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(LOGS_STAT != null){
				
					this.setProperty("LOGS_STAT", LOGS_STAT.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(RutaSistema != null){
				
					this.setProperty("RutaSistema", RutaSistema.toString());
				
			}
			
			if(ABIERTA != null){
				
					this.setProperty("ABIERTA", ABIERTA.toString());
				
			}
			
			if(AREA != null){
				
					this.setProperty("AREA", AREA.toString());
				
			}
			
			if(COMBO != null){
				
					this.setProperty("COMBO", COMBO.toString());
				
			}
			
			if(COMBO_COMBO != null){
				
					this.setProperty("COMBO_COMBO", COMBO_COMBO.toString());
				
			}
			
			if(COMBO_NUMERICO != null){
				
					this.setProperty("COMBO_NUMERICO", COMBO_NUMERICO.toString());
				
			}
			
			if(COMBO_OTRO != null){
				
					this.setProperty("COMBO_OTRO", COMBO_OTRO.toString());
				
			}
			
			if(COMBO_TEXTO != null){
				
					this.setProperty("COMBO_TEXTO", COMBO_TEXTO.toString());
				
			}
			
			if(COMBO_TEXTO_FIJO != null){
				
					this.setProperty("COMBO_TEXTO_FIJO", COMBO_TEXTO_FIJO.toString());
				
			}
			
			if(FECHA_NORMAL != null){
				
					this.setProperty("FECHA_NORMAL", FECHA_NORMAL.toString());
				
			}
			
			if(MULTISELECT != null){
				
					this.setProperty("MULTISELECT", MULTISELECT.toString());
				
			}
			
			if(RANGO_NUMERICO != null){
				
					this.setProperty("RANGO_NUMERICO", RANGO_NUMERICO.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public BigDecimal COM_EPS_ID;
public BigDecimal getCOM_EPS_ID(){
	return this.COM_EPS_ID;
}
public BigDecimal COM_FICHA_ID;
public BigDecimal getCOM_FICHA_ID(){
	return this.COM_FICHA_ID;
}
public java.util.Date COM_FREGISTRO;
public java.util.Date getCOM_FREGISTRO(){
	return this.COM_FREGISTRO;
}
public String COM_OPCION1;
public String getCOM_OPCION1(){
	return this.COM_OPCION1;
}
public java.util.Date COM_OPCION2;
public java.util.Date getCOM_OPCION2(){
	return this.COM_OPCION2;
}
public BigDecimal COM_PERSONA_ID;
public BigDecimal getCOM_PERSONA_ID(){
	return this.COM_PERSONA_ID;
}
public String COM_RECOMENDACIONES;
public String getCOM_RECOMENDACIONES(){
	return this.COM_RECOMENDACIONES;
}
public String COM_RESPUESTA;
public String getCOM_RESPUESTA(){
	return this.COM_RESPUESTA;
}
public String COM_SIGLA;
public String getCOM_SIGLA(){
	return this.COM_SIGLA;
}
public BigDecimal COM_TPREGUNTAS_ID;
public BigDecimal getCOM_TPREGUNTAS_ID(){
	return this.COM_TPREGUNTAS_ID;
}
public BigDecimal COM_TREGIMENSALUD_ID;
public BigDecimal getCOM_TREGIMENSALUD_ID(){
	return this.COM_TREGIMENSALUD_ID;
}
public BigDecimal COM_TRESPUESTAS_ID;
public BigDecimal getCOM_TRESPUESTAS_ID(){
	return this.COM_TRESPUESTAS_ID;
}
public String COM_VPREDETERMINADO;
public String getCOM_VPREDETERMINADO(){
	return this.COM_VPREDETERMINADO;
}
public BigDecimal PER_EPS_ID;
public BigDecimal getPER_EPS_ID(){
	return this.PER_EPS_ID;
}
public BigDecimal PER_FICHA_ID;
public BigDecimal getPER_FICHA_ID(){
	return this.PER_FICHA_ID;
}
public java.util.Date PER_FREGISTRO;
public java.util.Date getPER_FREGISTRO(){
	return this.PER_FREGISTRO;
}
public String PER_OPCION1;
public String getPER_OPCION1(){
	return this.PER_OPCION1;
}
public java.util.Date PER_OPCION2;
public java.util.Date getPER_OPCION2(){
	return this.PER_OPCION2;
}
public BigDecimal PER_PERSONA_ID;
public BigDecimal getPER_PERSONA_ID(){
	return this.PER_PERSONA_ID;
}
public String PER_RECOMENDACIONES;
public String getPER_RECOMENDACIONES(){
	return this.PER_RECOMENDACIONES;
}
public String PER_RESPUESTA;
public String getPER_RESPUESTA(){
	return this.PER_RESPUESTA;
}
public String PER_SIGLA;
public String getPER_SIGLA(){
	return this.PER_SIGLA;
}
public BigDecimal PER_TPREGUNTAS_ID;
public BigDecimal getPER_TPREGUNTAS_ID(){
	return this.PER_TPREGUNTAS_ID;
}
public BigDecimal PER_TREGIMENSALUD_ID;
public BigDecimal getPER_TREGIMENSALUD_ID(){
	return this.PER_TREGIMENSALUD_ID;
}
public BigDecimal PER_TRESPUESTAS_ID;
public BigDecimal getPER_TRESPUESTAS_ID(){
	return this.PER_TRESPUESTAS_ID;
}
public String PER_VPREDETERMINADO;
public String getPER_VPREDETERMINADO(){
	return this.PER_VPREDETERMINADO;
}
public Boolean ACTUALIZACION_TOTAL;
public Boolean getACTUALIZACION_TOTAL(){
	return this.ACTUALIZACION_TOTAL;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String CONDITION;
public String getCONDITION(){
	return this.CONDITION;
}
public String CONDITION_PRINCIPAL;
public String getCONDITION_PRINCIPAL(){
	return this.CONDITION_PRINCIPAL;
}
public String ERROR;
public String getERROR(){
	return this.ERROR;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FANTERIOR;
public String getFANTERIOR(){
	return this.FANTERIOR;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String FECHA_TERMINACION;
public String getFECHA_TERMINACION(){
	return this.FECHA_TERMINACION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public Integer ID_SOLICITUD;
public Integer getID_SOLICITUD(){
	return this.ID_SOLICITUD;
}
public String JOB;
public String getJOB(){
	return this.JOB;
}
public Integer LAST_DAYS;
public Integer getLAST_DAYS(){
	return this.LAST_DAYS;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String LOGS_STAT;
public String getLOGS_STAT(){
	return this.LOGS_STAT;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public String RutaSistema;
public String getRutaSistema(){
	return this.RutaSistema;
}
public BigDecimal ABIERTA;
public BigDecimal getABIERTA(){
	return this.ABIERTA;
}
public BigDecimal AREA;
public BigDecimal getAREA(){
	return this.AREA;
}
public BigDecimal COMBO;
public BigDecimal getCOMBO(){
	return this.COMBO;
}
public BigDecimal COMBO_COMBO;
public BigDecimal getCOMBO_COMBO(){
	return this.COMBO_COMBO;
}
public BigDecimal COMBO_NUMERICO;
public BigDecimal getCOMBO_NUMERICO(){
	return this.COMBO_NUMERICO;
}
public BigDecimal COMBO_OTRO;
public BigDecimal getCOMBO_OTRO(){
	return this.COMBO_OTRO;
}
public BigDecimal COMBO_TEXTO;
public BigDecimal getCOMBO_TEXTO(){
	return this.COMBO_TEXTO;
}
public BigDecimal COMBO_TEXTO_FIJO;
public BigDecimal getCOMBO_TEXTO_FIJO(){
	return this.COMBO_TEXTO_FIJO;
}
public BigDecimal FECHA_NORMAL;
public BigDecimal getFECHA_NORMAL(){
	return this.FECHA_NORMAL;
}
public BigDecimal MULTISELECT;
public BigDecimal getMULTISELECT(){
	return this.MULTISELECT;
}
public BigDecimal RANGO_NUMERICO;
public BigDecimal getRANGO_NUMERICO(){
	return this.RANGO_NUMERICO;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "1.3";
	private final String jobName = "FichaFamiliar";
	private final String projectName = "REP_INICIO_F5";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_2 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				FichaFamiliar.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(FichaFamiliar.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_2.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_2Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tOracleClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tOracleClose_2Process(globalMap);



/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_2", false);
		start_Hash.put("tOracleClose_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_2";
	
	
		int tos_count_tOracleClose_2 = 0;
		

 



/**
 * [tOracleClose_2 begin ] stop
 */
	
	/**
	 * [tOracleClose_2 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

	java.sql.Connection conn_tOracleClose_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
	
	if(conn_tOracleClose_2 != null && !conn_tOracleClose_2.isClosed())
	{
		
			conn_tOracleClose_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_2++;

/**
 * [tOracleClose_2 main ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_2 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 

ok_Hash.put("tOracleClose_2", true);
end_Hash.put("tOracleClose_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk20", 0, "ok");
				}
				tJava_13Process(globalMap);



/**
 * [tOracleClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_13", false);
		start_Hash.put("tJava_13", System.currentTimeMillis());
		
	
	currentComponent="tJava_13";
	
	
		int tos_count_tJava_13 = 0;
		


context.FECHA_TERMINACION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");
context.ESTADO_EXEC = "Success";

System.out.println("  - End: " + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );
System.out.println("+ Job " + context.ESTADO_EXEC);
 



/**
 * [tJava_13 begin ] stop
 */
	
	/**
	 * [tJava_13 main ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 


	tos_count_tJava_13++;

/**
 * [tJava_13 main ] stop
 */
	
	/**
	 * [tJava_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 



/**
 * [tJava_13 process_data_begin ] stop
 */
	
	/**
	 * [tJava_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 



/**
 * [tJava_13 process_data_end ] stop
 */
	
	/**
	 * [tJava_13 end ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 

ok_Hash.put("tJava_13", true);
end_Hash.put("tJava_13", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk21", 0, "ok");
				}
				tFixedFlowInput_4Process(globalMap);



/**
 * [tJava_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_13 finally ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 



/**
 * [tJava_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_13_SUBPROCESS_STATE", 1);
	}
	


public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row41Struct row41 = new row41Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("HORA_INICIO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("HORA_FINAL");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ESTADO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("JOBS");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_4", false);
		start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_4";
	
	
		int tos_count_tFixedFlowInput_4 = 0;
		

	    for (int i_tFixedFlowInput_4 = 0 ; i_tFixedFlowInput_4 < 1 ; i_tFixedFlowInput_4++) {
	                	            	
    	            		row41.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row41.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row41.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row41.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row41.JOBS = context.JOB;
    	            	

 



/**
 * [tFixedFlowInput_4 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 


	tos_count_tFixedFlowInput_4++;

/**
 * [tFixedFlowInput_4 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row41"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row41.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.ESTADO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.JOBS != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

                    }



 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

        }
        globalMap.put("tFixedFlowInput_4_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_4", true);
end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());




/**
 * [tFixedFlowInput_4 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_4 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();
row30Struct row31 = row30;
row32Struct row32 = new row32Struct();






	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tRunJob_2 = 0;
		
class DealChildJobLibrary_tRunJob_2 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_2 dealChildJobLibrary_tRunJob_2 = new DealChildJobLibrary_tRunJob_2();

	class JVMArgumentHelper_tRunJob_2 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_2 jvm_argument_helper_tRunJob_2 = new JVMArgumentHelper_tRunJob_2();
	
	String audit_jar_path_tRunJob_2 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_7", false);
		start_Hash.put("tJavaRow_7", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tJavaRow_7 = 0;
		

int nb_line_tJavaRow_7 = 0;

 



/**
 * [tJavaRow_7 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("moment");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("root_pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("father_pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("project");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("job");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("context");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("priority");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("type");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("origin");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("message");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("code");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tLogCatcher_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_2", false);
		start_Hash.put("tLogCatcher_2", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_2";
	
	
		int tos_count_tLogCatcher_2 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_2.getMessages()) {
		row30.type = lcm.getType();
		row30.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row30.priority = lcm.getPriority();
		row30.message = lcm.getMessage();
		row30.code = lcm.getCode();
		
		row30.moment = java.util.Calendar.getInstance().getTime();
	
    	row30.pid = pid;
		row30.root_pid = rootPid;
		row30.father_pid = fatherPid;
	
    	row30.project = projectName;
    	row30.job = jobName;
    	row30.context = contextStr;
    		
 



/**
 * [tLogCatcher_2 begin ] stop
 */
	
	/**
	 * [tLogCatcher_2 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_2";
	
	

 


	tos_count_tLogCatcher_2++;

/**
 * [tLogCatcher_2 main ] stop
 */
	
	/**
	 * [tLogCatcher_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_2";
	
	

 



/**
 * [tLogCatcher_2 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row30.moment != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(row30.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.root_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.father_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.project != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.project
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.job != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.job
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.context != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.context
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.priority != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.priority
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.type != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.type
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.origin != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.origin
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.message != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.message
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.code != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.code
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

                    }



 
     row31 = row30;


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_7 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					

    //Code generate according to input schema and output schema
row32.moment = row31.moment;
row32.pid = row31.pid;
row32.root_pid = row31.root_pid;
row32.father_pid = row31.father_pid;
row32.project = row31.project;
row32.job = row31.job;
row32.context = row31.context;
row32.priority = row31.priority;
row32.type = row31.type;
row32.origin = row31.origin;
row32.message = row31.message;
row32.code = row31.code;

/*System.out.println("Error");
System.out.println("Fecha: "+row31.moment);
System.out.println("pid: "+ row31.pid );
System.out.println("root_pid: "+ row31.root_pid);
System.out.println("father_pid: "+ row31.father_pid);
System.out.println("project " + row31.project);
System.out.println("job: "+ row31.job);
System.out.println("context: "+ row31.context);
System.out.println("priority: "+ row31.priority);
System.out.println("type: "+ row31.type);
System.out.println("origin: "+ row31.origin);
System.out.println("message: "+ row31.message);
System.out.println("code: "+ row31.code);*/

context.ESTADO_EXEC = "Fail";
    nb_line_tJavaRow_7++;   

 


	tos_count_tJavaRow_7++;

/**
 * [tJavaRow_7 main ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row32"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_2 = System.getProperty("os.name");
			if (osName_tRunJob_2 != null && osName_tRunJob_2.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_2.add("C:/Program Files/Java/jdk-22/bin/java.exe");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_2.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_2 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_2 != null){
								paraList_tRunJob_2.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_2);
							}
							String log4j2_config_tRunJob_2 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_2 != null){
								paraList_tRunJob_2.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_2);
							}
							if (log4j1_config_tRunJob_2 != null || log4j2_config_tRunJob_2 != null) {
								paraList_tRunJob_2.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_2.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_2.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Dfile.encoding=UTF-8");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Dtalend.component.manager.m2.repository=D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/configuration/.m2/repository");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-cp");
		      				
              					String classpath_tRunJob_2_6 = "D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/REP_INICIO_F5/REP_INICIO_F5/poms/jobs/process/Gen/Correo/mail_1.3/target/classpath.jar;";
              					
              					if(audit_jar_path_tRunJob_2!=null && !audit_jar_path_tRunJob_2.isEmpty()) {
		      						classpath_tRunJob_2_6 += audit_jar_path_tRunJob_2;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, dealChildJobLibrary_tRunJob_2.replaceJarPathsFromCrcMap(classpath_tRunJob_2_6), true);
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "rep_inicio_f5.mail_1_3.Mail");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_node=tRunJob_2");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_2.add("C:/Program Files/Java/jdk-22/bin/java.exe");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_2.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_2 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_2 != null){
								paraList_tRunJob_2.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_2);
							}
							String log4j2_config_tRunJob_2 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_2 != null){
								paraList_tRunJob_2.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_2);
							}
							if (log4j1_config_tRunJob_2 != null || log4j2_config_tRunJob_2 != null) {
								paraList_tRunJob_2.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_2.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_2.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Dfile.encoding=UTF-8");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Dtalend.component.manager.m2.repository=D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/configuration/.m2/repository");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-cp");
		      				
		      					String classpath_tRunJob_2_6 = "D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/REP_INICIO_F5/REP_INICIO_F5/poms/jobs/process/Gen/Correo/mail_1.3/target/classes:D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/REP_INICIO_F5/REP_INICIO_F5/poms/jobs/process/Gen/Correo/mail_1.3/src/main/ext-resources:D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/REP_INICIO_F5/REP_INICIO_F5/poms/code/routines/target/classes:.:D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.17.1/log4j-slf4j-impl-2.17.1.jar:D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.1/log4j-api-2.17.1.jar:D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.17.1/log4j-core-2.17.1.jar:D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/configuration/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar:D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/configuration/.m2/repository/com/sun/mail/jakarta.mail/1.6.7/jakarta.mail-1.6.7.jar:D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/configuration/.m2/repository/org/talend/libraries/xpathutil-1.0.0/6.0.0/xpathutil-1.0.0-6.0.0.jar:D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.34/slf4j-api-1.7.34.jar:D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/configuration/.m2/repository/org/talend/daikon/crypto-utils/7.1.16/crypto-utils-7.1.16.jar:D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/configuration/.m2/repository/org/jboss/marshalling/jboss-marshalling/2.0.12.Final/jboss-marshalling-2.0.12.Final.jar:D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/configuration/.m2/repository/org/dom4j/dom4j/2.1.3/dom4j-2.1.3.jar:D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/configuration/.m2/repository/jaxen/jaxen/1.1.6/jaxen-1.1.6.jar:";
		      					
		      					if(audit_jar_path_tRunJob_2!=null && !audit_jar_path_tRunJob_2.isEmpty()) {
		      						classpath_tRunJob_2_6 += audit_jar_path_tRunJob_2;
		      					}
		      					
	      						jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, dealChildJobLibrary_tRunJob_2.replaceJarPathsFromCrcMap(classpath_tRunJob_2_6).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "rep_inicio_f5.mail_1_3.Mail");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_node=tRunJob_2");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_2.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
		obj_tRunJob_2 = row32.moment;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("moment", obj_tRunJob_2);
	
		obj_tRunJob_2 = row32.project;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param project=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("project", obj_tRunJob_2);
	
		obj_tRunJob_2 = row32.job;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param job=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("job", obj_tRunJob_2);
	
		obj_tRunJob_2 = row32.context;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param context=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("context", obj_tRunJob_2);
	
		obj_tRunJob_2 = row32.origin;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param origin=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param origin=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param origin=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("origin", obj_tRunJob_2);
	
		obj_tRunJob_2 = row32.message;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param message=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("message", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.db_origen_Server;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("server_origen", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.db_origen_ServiceName;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("service_name_origen", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.db_origen_Login;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("user_origen", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.db_origen_Server;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param server_destino=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param server_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param server_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("server_destino", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.db_destino_ServiceName;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param service_name_destino=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param service_name_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param service_name_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("service_name_destino", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.db_origen_Login;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param user_destino=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param user_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param user_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("user_destino", obj_tRunJob_2);
	
	
				class ConsoleHelper_tRunJob_2 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_2_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_2_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_2 consoleHelper_tRunJob_2 = new ConsoleHelper_tRunJob_2();

		Runtime runtime_tRunJob_2 = Runtime.getRuntime();
		Process ps_tRunJob_2 = null;
		
		//0 indicates normal termination
        int result_tRunJob_2;
        StringBuffer errorMsg_tRunJob_2 = new StringBuffer();
        try {
            ps_tRunJob_2 = runtime_tRunJob_2.exec((String[])paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));

            Thread normal_tRunJob_2 = consoleHelper_tRunJob_2.getNormalThread(ps_tRunJob_2);
            normal_tRunJob_2.start();

            Thread error_tRunJob_2 = consoleHelper_tRunJob_2.getErrorThread(ps_tRunJob_2, errorMsg_tRunJob_2);
            error_tRunJob_2.start();

            result_tRunJob_2 = ps_tRunJob_2.waitFor();
            normal_tRunJob_2.join();
            error_tRunJob_2.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_2_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_2.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_2_CHILD_RETURN_CODE",result_tRunJob_2);
		if(result_tRunJob_2 != 0){
   			globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_2.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_2 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_2.toString());
			
  		}

		

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	

 



/**
 * [tRunJob_2 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	

 



/**
 * [tRunJob_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_2";
	
	

 



/**
 * [tLogCatcher_2 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_2 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_2";
	
	
	}
} catch (Exception e_tLogCatcher_2) {
globalMap.put("tLogCatcher_2_ERROR_MESSAGE",e_tLogCatcher_2.getMessage());
	logIgnoredError(String.format("tLogCatcher_2 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_2), e_tLogCatcher_2);
}

 

ok_Hash.put("tLogCatcher_2", true);
end_Hash.put("tLogCatcher_2", System.currentTimeMillis());




/**
 * [tLogCatcher_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */

	
	/**
	 * [tJavaRow_7 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

globalMap.put("tJavaRow_7_NB_LINE",nb_line_tJavaRow_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tJavaRow_7", true);
end_Hash.put("tJavaRow_7", System.currentTimeMillis());




/**
 * [tJavaRow_7 end ] stop
 */

	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_2 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_2";
	
	

 



/**
 * [tLogCatcher_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_7 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 finally ] stop
 */

	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	
	
 



/**
 * [tRunJob_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_2_SUBPROCESS_STATE", 1);
	}
	


public void tPrejob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_2", false);
		start_Hash.put("tPrejob_2", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_2";
	
	
		int tos_count_tPrejob_2 = 0;
		

 



/**
 * [tPrejob_2 begin ] stop
 */
	
	/**
	 * [tPrejob_2 main ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 


	tos_count_tPrejob_2++;

/**
 * [tPrejob_2 main ] stop
 */
	
	/**
	 * [tPrejob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 



/**
 * [tPrejob_2 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 



/**
 * [tPrejob_2 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_2 end ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 

ok_Hash.put("tPrejob_2", true);
end_Hash.put("tPrejob_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk24", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_2 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 



/**
 * [tPrejob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_2_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 7;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row34Struct row34 = new row34Struct();




	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"UTF-8");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_1 = false;
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	org.dom4j.XPath xpath_7 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PathStorage","/connectionStrings"));
	xpath_7.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(7,xpath_7);
			
	org.dom4j.XPath xpath_8 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPHost","/connectionStrings"));
	xpath_8.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(8,xpath_8);
			
	org.dom4j.XPath xpath_9 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPPort","/connectionStrings"));
	xpath_9.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(9,xpath_9);
			
	org.dom4j.XPath xpath_10 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("UsernameMail","/connectionStrings"));
	xpath_10.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(10,xpath_10);
			
	org.dom4j.XPath xpath_11 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PasswordMail","/connectionStrings"));
	xpath_11.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(11,xpath_11);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.Node temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
	if (nb_line_tFileInputXML_1>=50) {
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row34 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row34 = new row34Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Host =null;
									}else{
		row34.Host = str_tFileInputXML_1;
	}
    Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
    if(obj1_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj1_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_1 instanceof String || obj1_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
    } else if(obj1_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Port =null;
									}else{
		row34.Port = str_tFileInputXML_1;
	}
    Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
    if(obj2_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj2_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_1 instanceof String || obj2_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
    } else if(obj2_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Sid =null;
									}else{
		row34.Sid = str_tFileInputXML_1;
	}
    Object obj3_tFileInputXML_1 = xpaths_tFileInputXML_1.get(3).evaluate(temp_tFileInputXML_1);
    if(obj3_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj3_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_1 instanceof String || obj3_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj3_tFileInputXML_1);
    } else if(obj3_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.ServiceName =null;
									}else{
		row34.ServiceName = str_tFileInputXML_1;
	}
    Object obj4_tFileInputXML_1 = xpaths_tFileInputXML_1.get(4).evaluate(temp_tFileInputXML_1);
    if(obj4_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj4_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj4_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_1 instanceof String || obj4_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj4_tFileInputXML_1);
    } else if(obj4_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Schema =null;
									}else{
		row34.Schema = str_tFileInputXML_1;
	}
    Object obj5_tFileInputXML_1 = xpaths_tFileInputXML_1.get(5).evaluate(temp_tFileInputXML_1);
    if(obj5_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj5_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj5_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_1 instanceof String || obj5_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj5_tFileInputXML_1);
    } else if(obj5_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.User =null;
									}else{
		row34.User = str_tFileInputXML_1;
	}
    Object obj6_tFileInputXML_1 = xpaths_tFileInputXML_1.get(6).evaluate(temp_tFileInputXML_1);
    if(obj6_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj6_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj6_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_1 instanceof String || obj6_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj6_tFileInputXML_1);
    } else if(obj6_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Password =null;
									}else{
		row34.Password = str_tFileInputXML_1;
	}
    Object obj7_tFileInputXML_1 = xpaths_tFileInputXML_1.get(7).evaluate(temp_tFileInputXML_1);
    if(obj7_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj7_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj7_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj7_tFileInputXML_1 instanceof String || obj7_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj7_tFileInputXML_1);
    } else if(obj7_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj7_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.PathStorage =null;
									}else{
		row34.PathStorage = str_tFileInputXML_1;
	}
    Object obj8_tFileInputXML_1 = xpaths_tFileInputXML_1.get(8).evaluate(temp_tFileInputXML_1);
    if(obj8_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj8_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj8_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj8_tFileInputXML_1 instanceof String || obj8_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj8_tFileInputXML_1);
    } else if(obj8_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj8_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.SMTPHost =null;
									}else{
		row34.SMTPHost = str_tFileInputXML_1;
	}
    Object obj9_tFileInputXML_1 = xpaths_tFileInputXML_1.get(9).evaluate(temp_tFileInputXML_1);
    if(obj9_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj9_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj9_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj9_tFileInputXML_1 instanceof String || obj9_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj9_tFileInputXML_1);
    } else if(obj9_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj9_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.SMTPPort =null;
									}else{
		row34.SMTPPort = str_tFileInputXML_1;
	}
    Object obj10_tFileInputXML_1 = xpaths_tFileInputXML_1.get(10).evaluate(temp_tFileInputXML_1);
    if(obj10_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj10_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj10_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj10_tFileInputXML_1 instanceof String || obj10_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj10_tFileInputXML_1);
    } else if(obj10_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj10_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.UsernameMail =null;
									}else{
		row34.UsernameMail = str_tFileInputXML_1;
	}
    Object obj11_tFileInputXML_1 = xpaths_tFileInputXML_1.get(11).evaluate(temp_tFileInputXML_1);
    if(obj11_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj11_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj11_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj11_tFileInputXML_1 instanceof String || obj11_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj11_tFileInputXML_1);
    } else if(obj11_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj11_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.PasswordMail =null;
									}else{
		row34.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row34 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row34"
if(row34 != null) { 



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row34"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis
context.db_origen_Server = row34.Host;
context.db_origen_Port = row34.Port;
context.db_origen_ServiceName = row34.ServiceName;
context.db_origen_Schema = row34.Schema;
context.db_origen_Login = row34.User;
context.db_origen_Password = row34.Password;


//Guarda en variables de contexto la fecha de ejecución y la hora de inicio

context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");
context.JOB = "FFA";

//Imprime en consola el job, la fecha de ejecución y la hora de inicio
System.out.println(context.JOB+" :-Start: "+context.FECHA_EJECUCION+" "+context.HORA_INICIO);


    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */

} // End of branch "row34"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk25", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk26", 0, "ok");
				}
				tFileInputXML_2Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 6;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 12;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 11;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row35Struct row35 = new row35Struct();




	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tFileInputXML_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_2", false);
		start_Hash.put("tFileInputXML_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_2";
	
	
		int tos_count_tFileInputXML_2 = 0;
		

	

int nb_line_tFileInputXML_2 = 0;

	String os_tFileInputXML_2 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_2=false;
	if(os_tFileInputXML_2.indexOf("windows") > -1 || os_tFileInputXML_2.indexOf("nt") > -1){
		isWindows_tFileInputXML_2=true;
	}
class NameSpaceTool_tFileInputXML_2 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_2{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_2 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_2 = null;
try {
	filename_tFileInputXML_2 = context.BODEGA;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_2 != null && filename_tFileInputXML_2 instanceof String && filename_tFileInputXML_2.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_2){
		filename_tFileInputXML_2 = filename_tFileInputXML_2.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_2 = true;
org.dom4j.Document doc_tFileInputXML_2 = null;
java.io.Closeable toClose_tFileInputXML_2 = null;
try{
	if(filename_tFileInputXML_2 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_2 = (java.io.InputStream)filename_tFileInputXML_2;
		toClose_tFileInputXML_2 = inputStream_tFileInputXML_2;
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(inputStream_tFileInputXML_2);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_2 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_2)),"UTF-8");
		toClose_tFileInputXML_2 = unicodeReader_tFileInputXML_2;
		org.xml.sax.InputSource in_tFileInputXML_2= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_2);
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(in_tFileInputXML_2);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_2 = false;
} finally {
	if(toClose_tFileInputXML_2!=null) {
		toClose_tFileInputXML_2.close();
	}
}
if(isValidFile_tFileInputXML_2){
NameSpaceTool_tFileInputXML_2 nsTool_tFileInputXML_2 = new NameSpaceTool_tFileInputXML_2();
nsTool_tFileInputXML_2.countNSMap(doc_tFileInputXML_2.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_2 = nsTool_tFileInputXML_2.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_2 = doc_tFileInputXML_2.createXPath(nsTool_tFileInputXML_2.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_2.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_2.selectNodes(doc_tFileInputXML_2);	
XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();
String str_tFileInputXML_2 = "";
org.dom4j.Node node_tFileInputXML_2 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_2=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_2{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_2 xPathUtil_tFileInputXML_2 = new XPathUtil_tFileInputXML_2();
	xPathUtil_tFileInputXML_2.initXPaths(xpaths_tFileInputXML_2, nsTool_tFileInputXML_2, xmlNameSpaceMap_tFileInputXML_2);
for (org.dom4j.Node temp_tFileInputXML_2: nodeList_tFileInputXML_2) {
	if (nb_line_tFileInputXML_2>=50) {
	
		break;
	}
		nb_line_tFileInputXML_2++;
		
	row35 = null;			
	boolean whetherReject_tFileInputXML_2 = false;
	row35 = new row35Struct();
	try{
    Object obj0_tFileInputXML_2 = xpaths_tFileInputXML_2.get(0).evaluate(temp_tFileInputXML_2);
    if(obj0_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj0_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj0_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_2 instanceof String || obj0_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj0_tFileInputXML_2);
    } else if(obj0_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Host =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Host ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Host =null;
									}else{
		row35.Host = str_tFileInputXML_2;
	}
    Object obj1_tFileInputXML_2 = xpaths_tFileInputXML_2.get(1).evaluate(temp_tFileInputXML_2);
    if(obj1_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj1_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj1_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_2 instanceof String || obj1_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj1_tFileInputXML_2);
    } else if(obj1_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Port =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Port ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Port =null;
									}else{
		row35.Port = str_tFileInputXML_2;
	}
    Object obj2_tFileInputXML_2 = xpaths_tFileInputXML_2.get(2).evaluate(temp_tFileInputXML_2);
    if(obj2_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj2_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj2_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_2 instanceof String || obj2_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj2_tFileInputXML_2);
    } else if(obj2_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Sid =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Sid ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Sid =null;
									}else{
		row35.Sid = str_tFileInputXML_2;
	}
    Object obj3_tFileInputXML_2 = xpaths_tFileInputXML_2.get(3).evaluate(temp_tFileInputXML_2);
    if(obj3_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj3_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj3_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_2 instanceof String || obj3_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj3_tFileInputXML_2);
    } else if(obj3_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.ServiceName =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.ServiceName ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.ServiceName =null;
									}else{
		row35.ServiceName = str_tFileInputXML_2;
	}
    Object obj4_tFileInputXML_2 = xpaths_tFileInputXML_2.get(4).evaluate(temp_tFileInputXML_2);
    if(obj4_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj4_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj4_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_2 instanceof String || obj4_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj4_tFileInputXML_2);
    } else if(obj4_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Schema =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Schema ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Schema =null;
									}else{
		row35.Schema = str_tFileInputXML_2;
	}
    Object obj5_tFileInputXML_2 = xpaths_tFileInputXML_2.get(5).evaluate(temp_tFileInputXML_2);
    if(obj5_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj5_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj5_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_2 instanceof String || obj5_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj5_tFileInputXML_2);
    } else if(obj5_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.User =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.User ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.User =null;
									}else{
		row35.User = str_tFileInputXML_2;
	}
    Object obj6_tFileInputXML_2 = xpaths_tFileInputXML_2.get(6).evaluate(temp_tFileInputXML_2);
    if(obj6_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj6_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj6_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_2 instanceof String || obj6_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj6_tFileInputXML_2);
    } else if(obj6_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Password =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Password ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Password =null;
									}else{
		row35.Password = str_tFileInputXML_2;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_2 = true;
                System.err.println(e.getMessage());
                row35 = null;
    }
			
			

 



/**
 * [tFileInputXML_2 begin ] stop
 */
	
	/**
	 * [tFileInputXML_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 


	tos_count_tFileInputXML_2++;

/**
 * [tFileInputXML_2 main ] stop
 */
	
	/**
	 * [tFileInputXML_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_begin ] stop
 */
// Start of branch "row35"
if(row35 != null) { 



	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row35"
						
						);
					}
					

    //Guarda en variables de contexto los parametros para la conexión a la bodega 
context.db_destino_Server = row35.Host;
context.db_destino_Port = row35.Port;
context.db_destino_ServiceName = row35.ServiceName;
context.db_destino_Schema = row35.Schema;
context.db_destino_Login = row35.User;
context.db_destino_Password = row35.Password;

    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */

} // End of branch "row35"




	
	/**
	 * [tFileInputXML_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	


}
	}
	globalMap.put("tFileInputXML_2_NB_LINE",nb_line_tFileInputXML_2);

	

 

ok_Hash.put("tFileInputXML_2", true);
end_Hash.put("tFileInputXML_2", System.currentTimeMillis());




/**
 * [tFileInputXML_2 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk27", 0, "ok");
				}
				tOracleConnection_2Process(globalMap);



/**
 * [tJavaRow_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_2", false);
		start_Hash.put("tOracleConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_2";
	
	
		int tos_count_tOracleConnection_2 = 0;
		
	

	
        String url_tOracleConnection_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_2", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_2 = context.db_destino_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_2 = context.db_destino_Password; 
		String dbPwd_tOracleConnection_2 = decryptedPassword_tOracleConnection_2;
	
	
	java.sql.Connection conn_tOracleConnection_2 = null;
	
		
			String driverClass_tOracleConnection_2 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_2 = java.lang.Class.forName(driverClass_tOracleConnection_2);
			globalMap.put("driverClass_tOracleConnection_2", driverClass_tOracleConnection_2);
		
			java.util.Properties atnParamsPrope_tOracleConnection_2 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_2.put("user",dbUser_tOracleConnection_2);
			    atnParamsPrope_tOracleConnection_2.put("password",dbPwd_tOracleConnection_2);
			if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                atnParamsPrope_tOracleConnection_2.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_2 = java.sql.DriverManager.getConnection(url_tOracleConnection_2, atnParamsPrope_tOracleConnection_2);

		globalMap.put("conn_tOracleConnection_2", conn_tOracleConnection_2);
	if (null != conn_tOracleConnection_2) {
		
			conn_tOracleConnection_2.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_2",context.db_destino_Server);
        globalMap.put("port_" + "tOracleConnection_2",context.db_destino_Port);
        globalMap.put("dbname_" + "tOracleConnection_2",context.db_destino_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_2", context.db_destino_Schema);
	globalMap.put("username_" + "tOracleConnection_2",context.db_destino_Login);
	globalMap.put("password_" + "tOracleConnection_2",dbPwd_tOracleConnection_2);

 



/**
 * [tOracleConnection_2 begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 


	tos_count_tOracleConnection_2++;

/**
 * [tOracleConnection_2 main ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_2 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 

ok_Hash.put("tOracleConnection_2", true);
end_Hash.put("tOracleConnection_2", System.currentTimeMillis());




/**
 * [tOracleConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


if (!context.ACTUALIZACION_TOTAL){	
	//context.FANTERIOR = TalendDate.formatDate("dd/MM/YYYY",TalendDate.addDate(TalendDate.getCurrentDate(),-1,"DD"));		
	/* para pruebas */
	//context.FANTERIOR = "01/05/2019";

	context.CONDITION = " AND  FI.HFINALIZACION >= to_date('"+ context.FANTERIOR+"' ,'DD/MM/YYYY') ";
	context.CONDITION_PRINCIPAL = "WHERE OB.FECHA  >= to_date('"+ context.FANTERIOR+"' ,'DD/MM/YYYY')";
	
	System.out.println( context.FANTERIOR);
	System.out.println("Actualización diaria");
} else {
	System.out.println("Actualización total");
	context.CONDITION = " ";
	context.CONDITION_PRINCIPAL = " ";
}
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tOracleInput_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tOracleInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 80;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal IDENTIFICACION_ID;

				public BigDecimal getIDENTIFICACION_ID () {
					return this.IDENTIFICACION_ID;
				}

				public Boolean IDENTIFICACION_IDIsNullable(){
				    return false;
				}
				public Boolean IDENTIFICACION_IDIsKey(){
				    return false;
				}
				public Integer IDENTIFICACION_IDLength(){
				    return 0;
				}
				public Integer IDENTIFICACION_IDPrecision(){
				    return null;
				}
				public String IDENTIFICACION_IDDefault(){
				
					return "";
				
				}
				public String IDENTIFICACION_IDComment(){
				
				    return "";
				
				}
				public String IDENTIFICACION_IDPattern(){
				
					return "";
				
				}
				public String IDENTIFICACION_IDOriginalDbColumnName(){
				
					return "IDENTIFICACION_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String CONSECUTIVO;

				public String getCONSECUTIVO () {
					return this.CONSECUTIVO;
				}

				public Boolean CONSECUTIVOIsNullable(){
				    return false;
				}
				public Boolean CONSECUTIVOIsKey(){
				    return false;
				}
				public Integer CONSECUTIVOLength(){
				    return 50;
				}
				public Integer CONSECUTIVOPrecision(){
				    return 0;
				}
				public String CONSECUTIVODefault(){
				
					return null;
				
				}
				public String CONSECUTIVOComment(){
				
				    return "";
				
				}
				public String CONSECUTIVOPattern(){
				
					return "";
				
				}
				public String CONSECUTIVOOriginalDbColumnName(){
				
					return "CONSECUTIVO";
				
				}

				
			    public BigDecimal GESTOR_ID;

				public BigDecimal getGESTOR_ID () {
					return this.GESTOR_ID;
				}

				public Boolean GESTOR_IDIsNullable(){
				    return false;
				}
				public Boolean GESTOR_IDIsKey(){
				    return false;
				}
				public Integer GESTOR_IDLength(){
				    return 0;
				}
				public Integer GESTOR_IDPrecision(){
				    return null;
				}
				public String GESTOR_IDDefault(){
				
					return "";
				
				}
				public String GESTOR_IDComment(){
				
				    return "";
				
				}
				public String GESTOR_IDPattern(){
				
					return "";
				
				}
				public String GESTOR_IDOriginalDbColumnName(){
				
					return "GESTOR_ID";
				
				}

				
			    public String GESTOR_NOMBRE;

				public String getGESTOR_NOMBRE () {
					return this.GESTOR_NOMBRE;
				}

				public Boolean GESTOR_NOMBREIsNullable(){
				    return true;
				}
				public Boolean GESTOR_NOMBREIsKey(){
				    return false;
				}
				public Integer GESTOR_NOMBRELength(){
				    return 403;
				}
				public Integer GESTOR_NOMBREPrecision(){
				    return 0;
				}
				public String GESTOR_NOMBREDefault(){
				
					return null;
				
				}
				public String GESTOR_NOMBREComment(){
				
				    return "";
				
				}
				public String GESTOR_NOMBREPattern(){
				
					return "";
				
				}
				public String GESTOR_NOMBREOriginalDbColumnName(){
				
					return "GESTOR_NOMBRE";
				
				}

				
			    public java.util.Date FFINALIZACION;

				public java.util.Date getFFINALIZACION () {
					return this.FFINALIZACION;
				}

				public Boolean FFINALIZACIONIsNullable(){
				    return true;
				}
				public Boolean FFINALIZACIONIsKey(){
				    return false;
				}
				public Integer FFINALIZACIONLength(){
				    return 0;
				}
				public Integer FFINALIZACIONPrecision(){
				    return 0;
				}
				public String FFINALIZACIONDefault(){
				
					return null;
				
				}
				public String FFINALIZACIONComment(){
				
				    return "";
				
				}
				public String FFINALIZACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFINALIZACIONOriginalDbColumnName(){
				
					return "FFINALIZACION";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String TREGIMEN_SALUD;

				public String getTREGIMEN_SALUD () {
					return this.TREGIMEN_SALUD;
				}

				public Boolean TREGIMEN_SALUDIsNullable(){
				    return true;
				}
				public Boolean TREGIMEN_SALUDIsKey(){
				    return false;
				}
				public Integer TREGIMEN_SALUDLength(){
				    return 150;
				}
				public Integer TREGIMEN_SALUDPrecision(){
				    return 0;
				}
				public String TREGIMEN_SALUDDefault(){
				
					return null;
				
				}
				public String TREGIMEN_SALUDComment(){
				
				    return "";
				
				}
				public String TREGIMEN_SALUDPattern(){
				
					return "";
				
				}
				public String TREGIMEN_SALUDOriginalDbColumnName(){
				
					return "TREGIMEN_SALUD";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String EPS;

				public String getEPS () {
					return this.EPS;
				}

				public Boolean EPSIsNullable(){
				    return true;
				}
				public Boolean EPSIsKey(){
				    return false;
				}
				public Integer EPSLength(){
				    return 500;
				}
				public Integer EPSPrecision(){
				    return 0;
				}
				public String EPSDefault(){
				
					return null;
				
				}
				public String EPSComment(){
				
				    return "";
				
				}
				public String EPSPattern(){
				
					return "";
				
				}
				public String EPSOriginalDbColumnName(){
				
					return "EPS";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 4000;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				
			    public String PREPAGADA;

				public String getPREPAGADA () {
					return this.PREPAGADA;
				}

				public Boolean PREPAGADAIsNullable(){
				    return true;
				}
				public Boolean PREPAGADAIsKey(){
				    return false;
				}
				public Integer PREPAGADALength(){
				    return 500;
				}
				public Integer PREPAGADAPrecision(){
				    return 0;
				}
				public String PREPAGADADefault(){
				
					return null;
				
				}
				public String PREPAGADAComment(){
				
				    return "";
				
				}
				public String PREPAGADAPattern(){
				
					return "";
				
				}
				public String PREPAGADAOriginalDbColumnName(){
				
					return "PREPAGADA";
				
				}

				
			    public BigDecimal FICHAFAMILIAR_ID;

				public BigDecimal getFICHAFAMILIAR_ID () {
					return this.FICHAFAMILIAR_ID;
				}

				public Boolean FICHAFAMILIAR_IDIsNullable(){
				    return true;
				}
				public Boolean FICHAFAMILIAR_IDIsKey(){
				    return false;
				}
				public Integer FICHAFAMILIAR_IDLength(){
				    return 0;
				}
				public Integer FICHAFAMILIAR_IDPrecision(){
				    return null;
				}
				public String FICHAFAMILIAR_IDDefault(){
				
					return "";
				
				}
				public String FICHAFAMILIAR_IDComment(){
				
				    return "";
				
				}
				public String FICHAFAMILIAR_IDPattern(){
				
					return "";
				
				}
				public String FICHAFAMILIAR_IDOriginalDbColumnName(){
				
					return "FICHAFAMILIAR_ID";
				
				}

				
			    public BigDecimal VALOR_FINDRISK;

				public BigDecimal getVALOR_FINDRISK () {
					return this.VALOR_FINDRISK;
				}

				public Boolean VALOR_FINDRISKIsNullable(){
				    return true;
				}
				public Boolean VALOR_FINDRISKIsKey(){
				    return false;
				}
				public Integer VALOR_FINDRISKLength(){
				    return 0;
				}
				public Integer VALOR_FINDRISKPrecision(){
				    return null;
				}
				public String VALOR_FINDRISKDefault(){
				
					return "";
				
				}
				public String VALOR_FINDRISKComment(){
				
				    return "";
				
				}
				public String VALOR_FINDRISKPattern(){
				
					return "";
				
				}
				public String VALOR_FINDRISKOriginalDbColumnName(){
				
					return "VALOR_FINDRISK";
				
				}

				
			    public String CATEGORIA_FINDRISK;

				public String getCATEGORIA_FINDRISK () {
					return this.CATEGORIA_FINDRISK;
				}

				public Boolean CATEGORIA_FINDRISKIsNullable(){
				    return true;
				}
				public Boolean CATEGORIA_FINDRISKIsKey(){
				    return false;
				}
				public Integer CATEGORIA_FINDRISKLength(){
				    return 15;
				}
				public Integer CATEGORIA_FINDRISKPrecision(){
				    return 0;
				}
				public String CATEGORIA_FINDRISKDefault(){
				
					return null;
				
				}
				public String CATEGORIA_FINDRISKComment(){
				
				    return "";
				
				}
				public String CATEGORIA_FINDRISKPattern(){
				
					return "";
				
				}
				public String CATEGORIA_FINDRISKOriginalDbColumnName(){
				
					return "CATEGORIA_FINDRISK";
				
				}

				
			    public String MOMENTO_VIDA;

				public String getMOMENTO_VIDA () {
					return this.MOMENTO_VIDA;
				}

				public Boolean MOMENTO_VIDAIsNullable(){
				    return true;
				}
				public Boolean MOMENTO_VIDAIsKey(){
				    return false;
				}
				public Integer MOMENTO_VIDALength(){
				    return 4000;
				}
				public Integer MOMENTO_VIDAPrecision(){
				    return 0;
				}
				public String MOMENTO_VIDADefault(){
				
					return null;
				
				}
				public String MOMENTO_VIDAComment(){
				
				    return "";
				
				}
				public String MOMENTO_VIDAPattern(){
				
					return "";
				
				}
				public String MOMENTO_VIDAOriginalDbColumnName(){
				
					return "MOMENTO_VIDA";
				
				}

				
			    public String FRAMINGHAM;

				public String getFRAMINGHAM () {
					return this.FRAMINGHAM;
				}

				public Boolean FRAMINGHAMIsNullable(){
				    return true;
				}
				public Boolean FRAMINGHAMIsKey(){
				    return false;
				}
				public Integer FRAMINGHAMLength(){
				    return 0;
				}
				public Integer FRAMINGHAMPrecision(){
				    return 0;
				}
				public String FRAMINGHAMDefault(){
				
					return null;
				
				}
				public String FRAMINGHAMComment(){
				
				    return "";
				
				}
				public String FRAMINGHAMPattern(){
				
					return "";
				
				}
				public String FRAMINGHAMOriginalDbColumnName(){
				
					return "FRAMINGHAM";
				
				}

				
			    public String RIESGO_FRAMINGHAM;

				public String getRIESGO_FRAMINGHAM () {
					return this.RIESGO_FRAMINGHAM;
				}

				public Boolean RIESGO_FRAMINGHAMIsNullable(){
				    return true;
				}
				public Boolean RIESGO_FRAMINGHAMIsKey(){
				    return false;
				}
				public Integer RIESGO_FRAMINGHAMLength(){
				    return 0;
				}
				public Integer RIESGO_FRAMINGHAMPrecision(){
				    return 0;
				}
				public String RIESGO_FRAMINGHAMDefault(){
				
					return null;
				
				}
				public String RIESGO_FRAMINGHAMComment(){
				
				    return "";
				
				}
				public String RIESGO_FRAMINGHAMPattern(){
				
					return "";
				
				}
				public String RIESGO_FRAMINGHAMOriginalDbColumnName(){
				
					return "RIESGO_FRAMINGHAM";
				
				}

				
			    public String RIESGO_COLOMBIA;

				public String getRIESGO_COLOMBIA () {
					return this.RIESGO_COLOMBIA;
				}

				public Boolean RIESGO_COLOMBIAIsNullable(){
				    return true;
				}
				public Boolean RIESGO_COLOMBIAIsKey(){
				    return false;
				}
				public Integer RIESGO_COLOMBIALength(){
				    return 0;
				}
				public Integer RIESGO_COLOMBIAPrecision(){
				    return 0;
				}
				public String RIESGO_COLOMBIADefault(){
				
					return null;
				
				}
				public String RIESGO_COLOMBIAComment(){
				
				    return "";
				
				}
				public String RIESGO_COLOMBIAPattern(){
				
					return "";
				
				}
				public String RIESGO_COLOMBIAOriginalDbColumnName(){
				
					return "RIESGO_COLOMBIA";
				
				}

				
			    public BigDecimal EBAS_ID;

				public BigDecimal getEBAS_ID () {
					return this.EBAS_ID;
				}

				public Boolean EBAS_IDIsNullable(){
				    return true;
				}
				public Boolean EBAS_IDIsKey(){
				    return false;
				}
				public Integer EBAS_IDLength(){
				    return 0;
				}
				public Integer EBAS_IDPrecision(){
				    return 0;
				}
				public String EBAS_IDDefault(){
				
					return "";
				
				}
				public String EBAS_IDComment(){
				
				    return "";
				
				}
				public String EBAS_IDPattern(){
				
					return "";
				
				}
				public String EBAS_IDOriginalDbColumnName(){
				
					return "EBAS_ID";
				
				}

				
			    public String TSEGUIMIENTO;

				public String getTSEGUIMIENTO () {
					return this.TSEGUIMIENTO;
				}

				public Boolean TSEGUIMIENTOIsNullable(){
				    return true;
				}
				public Boolean TSEGUIMIENTOIsKey(){
				    return false;
				}
				public Integer TSEGUIMIENTOLength(){
				    return null;
				}
				public Integer TSEGUIMIENTOPrecision(){
				    return null;
				}
				public String TSEGUIMIENTODefault(){
				
					return null;
				
				}
				public String TSEGUIMIENTOComment(){
				
				    return "";
				
				}
				public String TSEGUIMIENTOPattern(){
				
					return "";
				
				}
				public String TSEGUIMIENTOOriginalDbColumnName(){
				
					return "TSEGUIMIENTO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out2Struct other = (out2Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out2Struct other) {

		other.ID = this.ID;
	            other.IDENTIFICACION_ID = this.IDENTIFICACION_ID;
	            other.PERSONAS_ID = this.PERSONAS_ID;
	            other.CONSECUTIVO = this.CONSECUTIVO;
	            other.GESTOR_ID = this.GESTOR_ID;
	            other.GESTOR_NOMBRE = this.GESTOR_NOMBRE;
	            other.FFINALIZACION = this.FFINALIZACION;
	            other.FREGISTRO = this.FREGISTRO;
	            other.TREGIMEN_SALUD = this.TREGIMEN_SALUD;
	            other.UORG_ID = this.UORG_ID;
	            other.EPS = this.EPS;
	            other.RECOMENDACIONES = this.RECOMENDACIONES;
	            other.PREPAGADA = this.PREPAGADA;
	            other.FICHAFAMILIAR_ID = this.FICHAFAMILIAR_ID;
	            other.VALOR_FINDRISK = this.VALOR_FINDRISK;
	            other.CATEGORIA_FINDRISK = this.CATEGORIA_FINDRISK;
	            other.MOMENTO_VIDA = this.MOMENTO_VIDA;
	            other.FRAMINGHAM = this.FRAMINGHAM;
	            other.RIESGO_FRAMINGHAM = this.RIESGO_FRAMINGHAM;
	            other.RIESGO_COLOMBIA = this.RIESGO_COLOMBIA;
	            other.EBAS_ID = this.EBAS_ID;
	            other.TSEGUIMIENTO = this.TSEGUIMIENTO;
	            
	}

	public void copyKeysDataTo(out2Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.IDENTIFICACION_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.CONSECUTIVO = readString(dis);
					
						this.GESTOR_ID = (BigDecimal) dis.readObject();
					
					this.GESTOR_NOMBRE = readString(dis);
					
					this.FFINALIZACION = readDate(dis);
					
					this.FREGISTRO = readDate(dis);
					
					this.TREGIMEN_SALUD = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.EPS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
					this.PREPAGADA = readString(dis);
					
						this.FICHAFAMILIAR_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_FINDRISK = (BigDecimal) dis.readObject();
					
					this.CATEGORIA_FINDRISK = readString(dis);
					
					this.MOMENTO_VIDA = readString(dis);
					
					this.FRAMINGHAM = readString(dis);
					
					this.RIESGO_FRAMINGHAM = readString(dis);
					
					this.RIESGO_COLOMBIA = readString(dis);
					
						this.EBAS_ID = (BigDecimal) dis.readObject();
					
					this.TSEGUIMIENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.IDENTIFICACION_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.CONSECUTIVO = readString(dis);
					
						this.GESTOR_ID = (BigDecimal) dis.readObject();
					
					this.GESTOR_NOMBRE = readString(dis);
					
					this.FFINALIZACION = readDate(dis);
					
					this.FREGISTRO = readDate(dis);
					
					this.TREGIMEN_SALUD = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.EPS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
					this.PREPAGADA = readString(dis);
					
						this.FICHAFAMILIAR_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_FINDRISK = (BigDecimal) dis.readObject();
					
					this.CATEGORIA_FINDRISK = readString(dis);
					
					this.MOMENTO_VIDA = readString(dis);
					
					this.FRAMINGHAM = readString(dis);
					
					this.RIESGO_FRAMINGHAM = readString(dis);
					
					this.RIESGO_COLOMBIA = readString(dis);
					
						this.EBAS_ID = (BigDecimal) dis.readObject();
					
					this.TSEGUIMIENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDENTIFICACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.CONSECUTIVO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GESTOR_ID);
					
					// String
				
						writeString(this.GESTOR_NOMBRE,dos);
					
					// java.util.Date
				
						writeDate(this.FFINALIZACION,dos);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.TREGIMEN_SALUD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.EPS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
					// String
				
						writeString(this.PREPAGADA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHAFAMILIAR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_FINDRISK);
					
					// String
				
						writeString(this.CATEGORIA_FINDRISK,dos);
					
					// String
				
						writeString(this.MOMENTO_VIDA,dos);
					
					// String
				
						writeString(this.FRAMINGHAM,dos);
					
					// String
				
						writeString(this.RIESGO_FRAMINGHAM,dos);
					
					// String
				
						writeString(this.RIESGO_COLOMBIA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EBAS_ID);
					
					// String
				
						writeString(this.TSEGUIMIENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IDENTIFICACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.CONSECUTIVO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GESTOR_ID);
					
					// String
				
						writeString(this.GESTOR_NOMBRE,dos);
					
					// java.util.Date
				
						writeDate(this.FFINALIZACION,dos);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.TREGIMEN_SALUD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.EPS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
					// String
				
						writeString(this.PREPAGADA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHAFAMILIAR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_FINDRISK);
					
					// String
				
						writeString(this.CATEGORIA_FINDRISK,dos);
					
					// String
				
						writeString(this.MOMENTO_VIDA,dos);
					
					// String
				
						writeString(this.FRAMINGHAM,dos);
					
					// String
				
						writeString(this.RIESGO_FRAMINGHAM,dos);
					
					// String
				
						writeString(this.RIESGO_COLOMBIA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EBAS_ID);
					
					// String
				
						writeString(this.TSEGUIMIENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",IDENTIFICACION_ID="+String.valueOf(IDENTIFICACION_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",CONSECUTIVO="+CONSECUTIVO);
		sb.append(",GESTOR_ID="+String.valueOf(GESTOR_ID));
		sb.append(",GESTOR_NOMBRE="+GESTOR_NOMBRE);
		sb.append(",FFINALIZACION="+String.valueOf(FFINALIZACION));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",TREGIMEN_SALUD="+TREGIMEN_SALUD);
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",EPS="+EPS);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
		sb.append(",PREPAGADA="+PREPAGADA);
		sb.append(",FICHAFAMILIAR_ID="+String.valueOf(FICHAFAMILIAR_ID));
		sb.append(",VALOR_FINDRISK="+String.valueOf(VALOR_FINDRISK));
		sb.append(",CATEGORIA_FINDRISK="+CATEGORIA_FINDRISK);
		sb.append(",MOMENTO_VIDA="+MOMENTO_VIDA);
		sb.append(",FRAMINGHAM="+FRAMINGHAM);
		sb.append(",RIESGO_FRAMINGHAM="+RIESGO_FRAMINGHAM);
		sb.append(",RIESGO_COLOMBIA="+RIESGO_COLOMBIA);
		sb.append(",EBAS_ID="+String.valueOf(EBAS_ID));
		sb.append(",TSEGUIMIENTO="+TSEGUIMIENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal IDENTIFICACION_ID;

				public BigDecimal getIDENTIFICACION_ID () {
					return this.IDENTIFICACION_ID;
				}

				public Boolean IDENTIFICACION_IDIsNullable(){
				    return false;
				}
				public Boolean IDENTIFICACION_IDIsKey(){
				    return false;
				}
				public Integer IDENTIFICACION_IDLength(){
				    return 0;
				}
				public Integer IDENTIFICACION_IDPrecision(){
				    return null;
				}
				public String IDENTIFICACION_IDDefault(){
				
					return "";
				
				}
				public String IDENTIFICACION_IDComment(){
				
				    return "";
				
				}
				public String IDENTIFICACION_IDPattern(){
				
					return "";
				
				}
				public String IDENTIFICACION_IDOriginalDbColumnName(){
				
					return "IDENTIFICACION_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String CONSECUTIVO;

				public String getCONSECUTIVO () {
					return this.CONSECUTIVO;
				}

				public Boolean CONSECUTIVOIsNullable(){
				    return false;
				}
				public Boolean CONSECUTIVOIsKey(){
				    return false;
				}
				public Integer CONSECUTIVOLength(){
				    return 50;
				}
				public Integer CONSECUTIVOPrecision(){
				    return 0;
				}
				public String CONSECUTIVODefault(){
				
					return null;
				
				}
				public String CONSECUTIVOComment(){
				
				    return "";
				
				}
				public String CONSECUTIVOPattern(){
				
					return "";
				
				}
				public String CONSECUTIVOOriginalDbColumnName(){
				
					return "CONSECUTIVO";
				
				}

				
			    public BigDecimal GESTOR_ID;

				public BigDecimal getGESTOR_ID () {
					return this.GESTOR_ID;
				}

				public Boolean GESTOR_IDIsNullable(){
				    return false;
				}
				public Boolean GESTOR_IDIsKey(){
				    return false;
				}
				public Integer GESTOR_IDLength(){
				    return 0;
				}
				public Integer GESTOR_IDPrecision(){
				    return null;
				}
				public String GESTOR_IDDefault(){
				
					return "";
				
				}
				public String GESTOR_IDComment(){
				
				    return "";
				
				}
				public String GESTOR_IDPattern(){
				
					return "";
				
				}
				public String GESTOR_IDOriginalDbColumnName(){
				
					return "GESTOR_ID";
				
				}

				
			    public String GESTOR_NOMBRE;

				public String getGESTOR_NOMBRE () {
					return this.GESTOR_NOMBRE;
				}

				public Boolean GESTOR_NOMBREIsNullable(){
				    return true;
				}
				public Boolean GESTOR_NOMBREIsKey(){
				    return false;
				}
				public Integer GESTOR_NOMBRELength(){
				    return 403;
				}
				public Integer GESTOR_NOMBREPrecision(){
				    return 0;
				}
				public String GESTOR_NOMBREDefault(){
				
					return null;
				
				}
				public String GESTOR_NOMBREComment(){
				
				    return "";
				
				}
				public String GESTOR_NOMBREPattern(){
				
					return "";
				
				}
				public String GESTOR_NOMBREOriginalDbColumnName(){
				
					return "GESTOR_NOMBRE";
				
				}

				
			    public java.util.Date FFINALIZACION;

				public java.util.Date getFFINALIZACION () {
					return this.FFINALIZACION;
				}

				public Boolean FFINALIZACIONIsNullable(){
				    return true;
				}
				public Boolean FFINALIZACIONIsKey(){
				    return false;
				}
				public Integer FFINALIZACIONLength(){
				    return 0;
				}
				public Integer FFINALIZACIONPrecision(){
				    return 0;
				}
				public String FFINALIZACIONDefault(){
				
					return null;
				
				}
				public String FFINALIZACIONComment(){
				
				    return "";
				
				}
				public String FFINALIZACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFINALIZACIONOriginalDbColumnName(){
				
					return "FFINALIZACION";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String TREGIMEN_SALUD;

				public String getTREGIMEN_SALUD () {
					return this.TREGIMEN_SALUD;
				}

				public Boolean TREGIMEN_SALUDIsNullable(){
				    return true;
				}
				public Boolean TREGIMEN_SALUDIsKey(){
				    return false;
				}
				public Integer TREGIMEN_SALUDLength(){
				    return 150;
				}
				public Integer TREGIMEN_SALUDPrecision(){
				    return 0;
				}
				public String TREGIMEN_SALUDDefault(){
				
					return null;
				
				}
				public String TREGIMEN_SALUDComment(){
				
				    return "";
				
				}
				public String TREGIMEN_SALUDPattern(){
				
					return "";
				
				}
				public String TREGIMEN_SALUDOriginalDbColumnName(){
				
					return "TREGIMEN_SALUD";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String EPS;

				public String getEPS () {
					return this.EPS;
				}

				public Boolean EPSIsNullable(){
				    return true;
				}
				public Boolean EPSIsKey(){
				    return false;
				}
				public Integer EPSLength(){
				    return 500;
				}
				public Integer EPSPrecision(){
				    return 0;
				}
				public String EPSDefault(){
				
					return null;
				
				}
				public String EPSComment(){
				
				    return "";
				
				}
				public String EPSPattern(){
				
					return "";
				
				}
				public String EPSOriginalDbColumnName(){
				
					return "EPS";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 4000;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				
			    public String PREPAGADA;

				public String getPREPAGADA () {
					return this.PREPAGADA;
				}

				public Boolean PREPAGADAIsNullable(){
				    return true;
				}
				public Boolean PREPAGADAIsKey(){
				    return false;
				}
				public Integer PREPAGADALength(){
				    return 500;
				}
				public Integer PREPAGADAPrecision(){
				    return 0;
				}
				public String PREPAGADADefault(){
				
					return null;
				
				}
				public String PREPAGADAComment(){
				
				    return "";
				
				}
				public String PREPAGADAPattern(){
				
					return "";
				
				}
				public String PREPAGADAOriginalDbColumnName(){
				
					return "PREPAGADA";
				
				}

				
			    public BigDecimal FICHAFAMILIAR_ID;

				public BigDecimal getFICHAFAMILIAR_ID () {
					return this.FICHAFAMILIAR_ID;
				}

				public Boolean FICHAFAMILIAR_IDIsNullable(){
				    return true;
				}
				public Boolean FICHAFAMILIAR_IDIsKey(){
				    return false;
				}
				public Integer FICHAFAMILIAR_IDLength(){
				    return 0;
				}
				public Integer FICHAFAMILIAR_IDPrecision(){
				    return null;
				}
				public String FICHAFAMILIAR_IDDefault(){
				
					return "";
				
				}
				public String FICHAFAMILIAR_IDComment(){
				
				    return "";
				
				}
				public String FICHAFAMILIAR_IDPattern(){
				
					return "";
				
				}
				public String FICHAFAMILIAR_IDOriginalDbColumnName(){
				
					return "FICHAFAMILIAR_ID";
				
				}

				
			    public BigDecimal VALOR_FINDRISK;

				public BigDecimal getVALOR_FINDRISK () {
					return this.VALOR_FINDRISK;
				}

				public Boolean VALOR_FINDRISKIsNullable(){
				    return true;
				}
				public Boolean VALOR_FINDRISKIsKey(){
				    return false;
				}
				public Integer VALOR_FINDRISKLength(){
				    return 0;
				}
				public Integer VALOR_FINDRISKPrecision(){
				    return null;
				}
				public String VALOR_FINDRISKDefault(){
				
					return "";
				
				}
				public String VALOR_FINDRISKComment(){
				
				    return "";
				
				}
				public String VALOR_FINDRISKPattern(){
				
					return "";
				
				}
				public String VALOR_FINDRISKOriginalDbColumnName(){
				
					return "VALOR_FINDRISK";
				
				}

				
			    public String CATEGORIA_FINDRISK;

				public String getCATEGORIA_FINDRISK () {
					return this.CATEGORIA_FINDRISK;
				}

				public Boolean CATEGORIA_FINDRISKIsNullable(){
				    return true;
				}
				public Boolean CATEGORIA_FINDRISKIsKey(){
				    return false;
				}
				public Integer CATEGORIA_FINDRISKLength(){
				    return 15;
				}
				public Integer CATEGORIA_FINDRISKPrecision(){
				    return 0;
				}
				public String CATEGORIA_FINDRISKDefault(){
				
					return null;
				
				}
				public String CATEGORIA_FINDRISKComment(){
				
				    return "";
				
				}
				public String CATEGORIA_FINDRISKPattern(){
				
					return "";
				
				}
				public String CATEGORIA_FINDRISKOriginalDbColumnName(){
				
					return "CATEGORIA_FINDRISK";
				
				}

				
			    public String MOMENTO_VIDA;

				public String getMOMENTO_VIDA () {
					return this.MOMENTO_VIDA;
				}

				public Boolean MOMENTO_VIDAIsNullable(){
				    return true;
				}
				public Boolean MOMENTO_VIDAIsKey(){
				    return false;
				}
				public Integer MOMENTO_VIDALength(){
				    return 4000;
				}
				public Integer MOMENTO_VIDAPrecision(){
				    return 0;
				}
				public String MOMENTO_VIDADefault(){
				
					return null;
				
				}
				public String MOMENTO_VIDAComment(){
				
				    return "";
				
				}
				public String MOMENTO_VIDAPattern(){
				
					return "";
				
				}
				public String MOMENTO_VIDAOriginalDbColumnName(){
				
					return "MOMENTO_VIDA";
				
				}

				
			    public String FRAMINGHAM;

				public String getFRAMINGHAM () {
					return this.FRAMINGHAM;
				}

				public Boolean FRAMINGHAMIsNullable(){
				    return true;
				}
				public Boolean FRAMINGHAMIsKey(){
				    return false;
				}
				public Integer FRAMINGHAMLength(){
				    return 4000;
				}
				public Integer FRAMINGHAMPrecision(){
				    return 0;
				}
				public String FRAMINGHAMDefault(){
				
					return null;
				
				}
				public String FRAMINGHAMComment(){
				
				    return "";
				
				}
				public String FRAMINGHAMPattern(){
				
					return "";
				
				}
				public String FRAMINGHAMOriginalDbColumnName(){
				
					return "FRAMINGHAM";
				
				}

				
			    public String RIESGO_FRAMINGHAM;

				public String getRIESGO_FRAMINGHAM () {
					return this.RIESGO_FRAMINGHAM;
				}

				public Boolean RIESGO_FRAMINGHAMIsNullable(){
				    return true;
				}
				public Boolean RIESGO_FRAMINGHAMIsKey(){
				    return false;
				}
				public Integer RIESGO_FRAMINGHAMLength(){
				    return 4000;
				}
				public Integer RIESGO_FRAMINGHAMPrecision(){
				    return 0;
				}
				public String RIESGO_FRAMINGHAMDefault(){
				
					return null;
				
				}
				public String RIESGO_FRAMINGHAMComment(){
				
				    return "";
				
				}
				public String RIESGO_FRAMINGHAMPattern(){
				
					return "";
				
				}
				public String RIESGO_FRAMINGHAMOriginalDbColumnName(){
				
					return "RIESGO_FRAMINGHAM";
				
				}

				
			    public String RIESGO_COLOMBIA;

				public String getRIESGO_COLOMBIA () {
					return this.RIESGO_COLOMBIA;
				}

				public Boolean RIESGO_COLOMBIAIsNullable(){
				    return true;
				}
				public Boolean RIESGO_COLOMBIAIsKey(){
				    return false;
				}
				public Integer RIESGO_COLOMBIALength(){
				    return 4000;
				}
				public Integer RIESGO_COLOMBIAPrecision(){
				    return 0;
				}
				public String RIESGO_COLOMBIADefault(){
				
					return null;
				
				}
				public String RIESGO_COLOMBIAComment(){
				
				    return "";
				
				}
				public String RIESGO_COLOMBIAPattern(){
				
					return "";
				
				}
				public String RIESGO_COLOMBIAOriginalDbColumnName(){
				
					return "RIESGO_COLOMBIA";
				
				}

				
			    public BigDecimal EBAS_ID;

				public BigDecimal getEBAS_ID () {
					return this.EBAS_ID;
				}

				public Boolean EBAS_IDIsNullable(){
				    return true;
				}
				public Boolean EBAS_IDIsKey(){
				    return false;
				}
				public Integer EBAS_IDLength(){
				    return 0;
				}
				public Integer EBAS_IDPrecision(){
				    return 0;
				}
				public String EBAS_IDDefault(){
				
					return "";
				
				}
				public String EBAS_IDComment(){
				
				    return "";
				
				}
				public String EBAS_IDPattern(){
				
					return "";
				
				}
				public String EBAS_IDOriginalDbColumnName(){
				
					return "EBAS_ID";
				
				}

				
			    public String TSEGUIMIENTO;

				public String getTSEGUIMIENTO () {
					return this.TSEGUIMIENTO;
				}

				public Boolean TSEGUIMIENTOIsNullable(){
				    return true;
				}
				public Boolean TSEGUIMIENTOIsKey(){
				    return false;
				}
				public Integer TSEGUIMIENTOLength(){
				    return 11;
				}
				public Integer TSEGUIMIENTOPrecision(){
				    return 0;
				}
				public String TSEGUIMIENTODefault(){
				
					return null;
				
				}
				public String TSEGUIMIENTOComment(){
				
				    return "";
				
				}
				public String TSEGUIMIENTOPattern(){
				
					return "";
				
				}
				public String TSEGUIMIENTOOriginalDbColumnName(){
				
					return "TSEGUIMIENTO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.IDENTIFICACION_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.CONSECUTIVO = readString(dis);
					
						this.GESTOR_ID = (BigDecimal) dis.readObject();
					
					this.GESTOR_NOMBRE = readString(dis);
					
					this.FFINALIZACION = readDate(dis);
					
					this.FREGISTRO = readDate(dis);
					
					this.TREGIMEN_SALUD = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.EPS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
					this.PREPAGADA = readString(dis);
					
						this.FICHAFAMILIAR_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_FINDRISK = (BigDecimal) dis.readObject();
					
					this.CATEGORIA_FINDRISK = readString(dis);
					
					this.MOMENTO_VIDA = readString(dis);
					
					this.FRAMINGHAM = readString(dis);
					
					this.RIESGO_FRAMINGHAM = readString(dis);
					
					this.RIESGO_COLOMBIA = readString(dis);
					
						this.EBAS_ID = (BigDecimal) dis.readObject();
					
					this.TSEGUIMIENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.IDENTIFICACION_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.CONSECUTIVO = readString(dis);
					
						this.GESTOR_ID = (BigDecimal) dis.readObject();
					
					this.GESTOR_NOMBRE = readString(dis);
					
					this.FFINALIZACION = readDate(dis);
					
					this.FREGISTRO = readDate(dis);
					
					this.TREGIMEN_SALUD = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.EPS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
					this.PREPAGADA = readString(dis);
					
						this.FICHAFAMILIAR_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_FINDRISK = (BigDecimal) dis.readObject();
					
					this.CATEGORIA_FINDRISK = readString(dis);
					
					this.MOMENTO_VIDA = readString(dis);
					
					this.FRAMINGHAM = readString(dis);
					
					this.RIESGO_FRAMINGHAM = readString(dis);
					
					this.RIESGO_COLOMBIA = readString(dis);
					
						this.EBAS_ID = (BigDecimal) dis.readObject();
					
					this.TSEGUIMIENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDENTIFICACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.CONSECUTIVO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GESTOR_ID);
					
					// String
				
						writeString(this.GESTOR_NOMBRE,dos);
					
					// java.util.Date
				
						writeDate(this.FFINALIZACION,dos);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.TREGIMEN_SALUD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.EPS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
					// String
				
						writeString(this.PREPAGADA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHAFAMILIAR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_FINDRISK);
					
					// String
				
						writeString(this.CATEGORIA_FINDRISK,dos);
					
					// String
				
						writeString(this.MOMENTO_VIDA,dos);
					
					// String
				
						writeString(this.FRAMINGHAM,dos);
					
					// String
				
						writeString(this.RIESGO_FRAMINGHAM,dos);
					
					// String
				
						writeString(this.RIESGO_COLOMBIA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EBAS_ID);
					
					// String
				
						writeString(this.TSEGUIMIENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IDENTIFICACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.CONSECUTIVO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GESTOR_ID);
					
					// String
				
						writeString(this.GESTOR_NOMBRE,dos);
					
					// java.util.Date
				
						writeDate(this.FFINALIZACION,dos);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.TREGIMEN_SALUD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.EPS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
					// String
				
						writeString(this.PREPAGADA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHAFAMILIAR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_FINDRISK);
					
					// String
				
						writeString(this.CATEGORIA_FINDRISK,dos);
					
					// String
				
						writeString(this.MOMENTO_VIDA,dos);
					
					// String
				
						writeString(this.FRAMINGHAM,dos);
					
					// String
				
						writeString(this.RIESGO_FRAMINGHAM,dos);
					
					// String
				
						writeString(this.RIESGO_COLOMBIA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EBAS_ID);
					
					// String
				
						writeString(this.TSEGUIMIENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",IDENTIFICACION_ID="+String.valueOf(IDENTIFICACION_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",CONSECUTIVO="+CONSECUTIVO);
		sb.append(",GESTOR_ID="+String.valueOf(GESTOR_ID));
		sb.append(",GESTOR_NOMBRE="+GESTOR_NOMBRE);
		sb.append(",FFINALIZACION="+String.valueOf(FFINALIZACION));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",TREGIMEN_SALUD="+TREGIMEN_SALUD);
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",EPS="+EPS);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
		sb.append(",PREPAGADA="+PREPAGADA);
		sb.append(",FICHAFAMILIAR_ID="+String.valueOf(FICHAFAMILIAR_ID));
		sb.append(",VALOR_FINDRISK="+String.valueOf(VALOR_FINDRISK));
		sb.append(",CATEGORIA_FINDRISK="+CATEGORIA_FINDRISK);
		sb.append(",MOMENTO_VIDA="+MOMENTO_VIDA);
		sb.append(",FRAMINGHAM="+FRAMINGHAM);
		sb.append(",RIESGO_FRAMINGHAM="+RIESGO_FRAMINGHAM);
		sb.append(",RIESGO_COLOMBIA="+RIESGO_COLOMBIA);
		sb.append(",EBAS_ID="+String.valueOf(EBAS_ID));
		sb.append(",TSEGUIMIENTO="+TSEGUIMIENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
out2Struct out2 = new out2Struct();





	
	/**
	 * [tOracleOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_2", false);
		start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tOracleOutput_2 = 0;
		






        int updateKeyCount_tOracleOutput_2 = 1;
        if(updateKeyCount_tOracleOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_2 == 22 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_2 = 0;
    int nb_line_update_tOracleOutput_2 = 0;
    int nb_line_inserted_tOracleOutput_2 = 0;
    int nb_line_deleted_tOracleOutput_2 = 0;
    int nb_line_rejected_tOracleOutput_2 = 0;

    int tmp_batchUpdateCount_tOracleOutput_2 = 0;

    int deletedCount_tOracleOutput_2=0;
    int updatedCount_tOracleOutput_2=0;
    int insertedCount_tOracleOutput_2=0;
    int rowsToCommitCount_tOracleOutput_2=0;
    int rejectedCount_tOracleOutput_2=0;

    boolean whetherReject_tOracleOutput_2 = false;

    java.sql.Connection conn_tOracleOutput_2 = null;

    //optional table
    String dbschema_tOracleOutput_2 = null;
    String tableName_tOracleOutput_2 = null;
                    String driverClass_tOracleOutput_2 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_2);
                String url_tOracleOutput_2 = null;
                    url_tOracleOutput_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_2 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_2 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_2 = decryptedPassword_tOracleOutput_2;
                dbschema_tOracleOutput_2 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_2 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_2.put("user",dbUser_tOracleOutput_2);
                    atnParamsPrope_tOracleOutput_2.put("password",dbPwd_tOracleOutput_2);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_2.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_2 = java.sql.DriverManager.getConnection(url_tOracleOutput_2, atnParamsPrope_tOracleOutput_2);
        resourceMap.put("conn_tOracleOutput_2", conn_tOracleOutput_2);
            conn_tOracleOutput_2.setAutoCommit(false);
            int commitEvery_tOracleOutput_2 = 1000;
            int commitCounter_tOracleOutput_2 = 0;
        int count_tOracleOutput_2=0;

        if(dbschema_tOracleOutput_2 == null || dbschema_tOracleOutput_2.trim().length() == 0) {
            tableName_tOracleOutput_2 = ("BFFA_IDENTIFICACION");
        } else {
            tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "." + ("BFFA_IDENTIFICACION");
        }
                java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement("SELECT COUNT(1) FROM " + tableName_tOracleOutput_2 + " WHERE ID = ?");
                resourceMap.put("pstmt_tOracleOutput_2", pstmt_tOracleOutput_2);
                String insert_tOracleOutput_2 = "INSERT INTO " + tableName_tOracleOutput_2 + " (ID,IDENTIFICACION_ID,PERSONAS_ID,CONSECUTIVO,GESTOR_ID,GESTOR_NOMBRE,FFINALIZACION,FREGISTRO,TREGIMEN_SALUD,UORG_ID,EPS,RECOMENDACIONES,PREPAGADA,FICHAFAMILIAR_ID,VALOR_FINDRISK,CATEGORIA_FINDRISK,MOMENTO_VIDA,FRAMINGHAM,RIESGO_FRAMINGHAM,RIESGO_COLOMBIA,EBAS_ID,TSEGUIMIENTO) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    
                java.sql.PreparedStatement pstmtInsert_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(insert_tOracleOutput_2);
                resourceMap.put("pstmtInsert_tOracleOutput_2", pstmtInsert_tOracleOutput_2);
                String update_tOracleOutput_2 = "UPDATE " + tableName_tOracleOutput_2 + " SET IDENTIFICACION_ID = ?,PERSONAS_ID = ?,CONSECUTIVO = ?,GESTOR_ID = ?,GESTOR_NOMBRE = ?,FFINALIZACION = ?,FREGISTRO = ?,TREGIMEN_SALUD = ?,UORG_ID = ?,EPS = ?,RECOMENDACIONES = ?,PREPAGADA = ?,FICHAFAMILIAR_ID = ?,VALOR_FINDRISK = ?,CATEGORIA_FINDRISK = ?,MOMENTO_VIDA = ?,FRAMINGHAM = ?,RIESGO_FRAMINGHAM = ?,RIESGO_COLOMBIA = ?,EBAS_ID = ?,TSEGUIMIENTO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmtUpdate_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(update_tOracleOutput_2);
                resourceMap.put("pstmtUpdate_tOracleOutput_2", pstmtUpdate_tOracleOutput_2);





 



/**
 * [tOracleOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_3.setFetchSize(1000);


		    String dbquery_tOracleInput_3 = "SELECT  TO_NUMBER(FI.ID || CF.PERSONA_ID) AS ID\n        ,FI.ID AS IDENTIFICACION_ID\n        ,CF.PERSONA_ID AS PERSONA"
+"S_ID\n        ,FFA.CONSECUTIVO\n        ,GP.ID AS GESTOR_ID\n        ,TRIM( GP.PRIMER_NOMBRE ) || ' ' ||\n         TRIM("
+" GP.SEGUNDO_NOMBRE ) || ' ' ||\n         TRIM( GP.PRIMER_APELLIDO ) || ' ' ||\n         TRIM( GP.SEGUNDO_APELLIDO ) AS G"
+"ESTOR_NOMBRE\n        ,FI.HFINALIZACION AS FFINALIZACION\n        ,FI.FREGISTRO \n        ,GTR.NOMBRE AS TREGIMEN_SALUD"
+"\n        ,FI.UORG_ID\n        ,TRIM( EPS.DESCRIPCION ) AS EPS\n        ,CF.RECOMENDACIONES\n        ,TRIM(PREPAGADA.DESC"
+"RIPCION) AS PREPAGADA\n        ,FI.FICHAFAMILIAR_ID \n        ,RIESGO.FINDRISK AS VALOR_FINDRISK  \n        ,CASE \n    "
+"       WHEN RIESGO.FINDRISK >= 12 THEN 'Riesgo alto'  \n           WHEN RIESGO.FINDRISK BETWEEN 7 AND 11 THEN 'Riesgo mo"
+"derado'\n           WHEN RIESGO.FINDRISK < 7 THEN 'Riesgo bajo'\n           ELSE '' \n         END AS CATEGORIA_FINDRISK"
+"\n         ,NVL( BGR.DESCRIPCION, 'No registra fecha de nacimiento' ) AS MOMENTO_VIDA\n         ,FRAMI.ANALISIS AS FRAMI"
+"NGHAM\n         ,FRAMI.PUNTAJE AS RIESGO_FRAMINGHAM\n         ,FRAMI.PUNTAJE_CORREGIDO AS RIESGO_COLOMBIA\n         ,NVL"
+"(GVS.EBAS_ID, FFAE.EBAS_ID ) AS EBAS_ID\n         ,TIPO.NOMBRE AS TSEGUIMIENTO\nFROM FFA_IDENTIFICACION FI \nINNER JOIN "
+"FFA_FICHAFAMILIAR FFA ON FFA.ID = FI.FICHAFAMILIAR_ID \nINNER JOIN (\n    SELECT    \n    FFA.ID AS FFA_ID,\n    CASE WH"
+"EN COUNT(FI.ID) > 1 THEN 'Actualizado' ELSE 'Nuevo' END AS NOMBRE\n    FROM  FFA_FICHAFAMILIAR FFA \n    INNER JOIN FFA_"
+"IDENTIFICACION FI ON FFA.ID = FI.FICHAFAMILIAR_ID    \n    WHERE FI.ESTADO = 'Terminada'\n    AND FI.ESTREGISTRO_ID = 1"
+"\n    "+context.CONDITION+" \n    GROUP BY FFA.ID \n) TIPO ON TIPO.FFA_ID = FFA.ID\nINNER JOIN (\nSELECT  ROW_NUMBER() OVER (PARTITION BY CF.PERSO"
+"NA_ID,CF.IDENTIFICACION_ID  ORDER BY CF.ID DESC) R ,CF.*\nFROM FFA_COMPOSICION_FAMILIAR CF WHERE CF.ESTREGISTRO_ID = 1\n"
+") CF  ON CF.FICHAFAMILIAR_ID = FI.FICHAFAMILIAR_ID AND CF.ESTREGISTRO_ID = 1 AND CF.R < 2\nINNER JOIN GEN_USUARIOS US ON"
+" US.ID = FI.GESTOR\nINNER JOIN GEN_PERSONAS GP ON GP.ID = US.PERSONAS_ID\nINNER JOIN GEN_PERSONAS GPR ON GPR.ID = CF.PER"
+"SONA_ID\nLEFT JOIN AFI_EPS PREPAGADA ON PREPAGADA.ID = CF.PREPAGADA \nLEFT JOIN AFI_EPS EPS ON EPS.ID = CF.EPS_ID\nLEFT "
+"JOIN GEN_TREGIMENSALUD GTR ON GTR.ID = CF.TREGIMENSALUD_ID\nLEFT JOIN GEN_GESTORESVIDASANA GVS ON GVS.ID = FI.GESTORESVI"
+"DASANA_ID AND GVS.ESTADO = 'Activo'\nLEFT JOIN FFA_FICHAFAMILIAR_EBAS FFAE ON FFAE.FICHAFAMILIAR_ID = FI.FICHAFAMILIAR_I"
+"D  AND FFAE.ESTADO = 'Activo' \nLEFT JOIN GEN_RANGOEDAD BGR ON  BGR.CODIGO = 'REP12'\n                            AND GP"
+"R.FECHA_NACIMIENTO >add_months(FI.HFINALIZACION,-(valor_mayor+1)*12)  \n                            AND GPR.fecha_nacimi"
+"ento <= ADD_MONTHS(FI.HFINALIZACION,-(vALOR_Menor*12))\nLEFT JOIN ( \n  SELECT ROW_NUMBER() OVER (PARTITION BY FR.IDENTI"
+"FICACION_ID,FR.PERSONAS_ID  ORDER BY FR.FREGISTRO DESC) R   \n         ,FR.PERSONAS_ID\n         ,FR.IDENTIFICACION_ID "
+"\n         ,FR.FINDRISK\n  FROM GEN_HRIESGOSCV FR \n  WHERE FR.ESTREGISTRO_ID = 1 \n    AND FR.IDENTIFICACION_ID  IS NOT "
+"NULL\n) RIESGO ON RIESGO.PERSONAS_ID = CF.PERSONA_ID AND RIESGO.IDENTIFICACION_ID = FI.ID AND RIESGO.R < 2\nLEFT JOIN ("
+"\n  SELECT * FROM (\n  SELECT FI.ID AS IDENTIFICACION_ID\n         ,PA.SIGLA\n         ,nvl(to_char(HE.VALOR), REPLACE ( "
+" HE.OBSERVACION, ';',',')) AS RESULTADO \n  FROM GEN_TEXAMENES TE \n  INNER JOIN GEN_PARAMEXAMENES PA ON PA.TEXAMENES_ID"
+" = TE.ID\n  INNER JOIN GEN_HEXAMENES HE ON HE.PARAMEXAMENES_ID = PA.ID \n  INNER JOIN FFA_IDENTIFICACION FI ON FI.ID = H"
+"E.IDENTIFICACION_ID\n  WHERE TE.SIGLA = 'TSFRM'\n  ) PIVOT (MAX (RESULTADO) FOR SIGLA IN ( 'FRMANA' AS ANALISIS , 'FRMPT"
+"N' AS PUNTAJE, 'FRMPTC' AS PUNTAJE_CORREGIDO ))\n) FRAMI ON FRAMI.IDENTIFICACION_ID = FI.ID \n\nWHERE FI.ESTADO = 'Termi"
+"nada'   	  \n  AND FI.ESTREGISTRO_ID = 1\n   "+context.CONDITION+" \n";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row3.ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row3.ID = rs_tOracleInput_3.getBigDecimal(1);
					} else {
				
						row3.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row3.IDENTIFICACION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(2) != null) {
						row3.IDENTIFICACION_ID = rs_tOracleInput_3.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 3) {
								row3.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(3) != null) {
						row3.PERSONAS_ID = rs_tOracleInput_3.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 4) {
								row3.CONSECUTIVO = null;
							} else {
	                         		
        	row3.CONSECUTIVO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 5) {
								row3.GESTOR_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(5) != null) {
						row3.GESTOR_ID = rs_tOracleInput_3.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 6) {
								row3.GESTOR_NOMBRE = null;
							} else {
	                         		
        	row3.GESTOR_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 7) {
								row3.FFINALIZACION = null;
							} else {
										
			row3.FFINALIZACION = routines.system.JDBCUtil.getDate(rs_tOracleInput_3, 7);
		                    }
							if(colQtyInRs_tOracleInput_3 < 8) {
								row3.FREGISTRO = null;
							} else {
										
			row3.FREGISTRO = routines.system.JDBCUtil.getDate(rs_tOracleInput_3, 8);
		                    }
							if(colQtyInRs_tOracleInput_3 < 9) {
								row3.TREGIMEN_SALUD = null;
							} else {
	                         		
        	row3.TREGIMEN_SALUD = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 10) {
								row3.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(10) != null) {
						row3.UORG_ID = rs_tOracleInput_3.getBigDecimal(10);
					} else {
				
						row3.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 11) {
								row3.EPS = null;
							} else {
	                         		
        	row3.EPS = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 12) {
								row3.RECOMENDACIONES = null;
							} else {
	                         		
        	row3.RECOMENDACIONES = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 13) {
								row3.PREPAGADA = null;
							} else {
	                         		
        	row3.PREPAGADA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 14) {
								row3.FICHAFAMILIAR_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(14) != null) {
						row3.FICHAFAMILIAR_ID = rs_tOracleInput_3.getBigDecimal(14);
					} else {
				
						row3.FICHAFAMILIAR_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 15) {
								row3.VALOR_FINDRISK = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(15) != null) {
						row3.VALOR_FINDRISK = rs_tOracleInput_3.getBigDecimal(15);
					} else {
				
						row3.VALOR_FINDRISK = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 16) {
								row3.CATEGORIA_FINDRISK = null;
							} else {
	                         		
        	row3.CATEGORIA_FINDRISK = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 17) {
								row3.MOMENTO_VIDA = null;
							} else {
	                         		
        	row3.MOMENTO_VIDA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 17, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 18) {
								row3.FRAMINGHAM = null;
							} else {
	                         		
        	row3.FRAMINGHAM = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 18, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 19) {
								row3.RIESGO_FRAMINGHAM = null;
							} else {
	                         		
        	row3.RIESGO_FRAMINGHAM = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 19, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 20) {
								row3.RIESGO_COLOMBIA = null;
							} else {
	                         		
        	row3.RIESGO_COLOMBIA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 20, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 21) {
								row3.EBAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(21) != null) {
						row3.EBAS_ID = rs_tOracleInput_3.getBigDecimal(21);
					} else {
				
						row3.EBAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 22) {
								row3.TSEGUIMIENTO = null;
							} else {
	                         		
        	row3.TSEGUIMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 22, false);
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.ID = row3.ID ;
out2_tmp.IDENTIFICACION_ID = row3.IDENTIFICACION_ID ;
out2_tmp.PERSONAS_ID = row3.PERSONAS_ID ;
out2_tmp.CONSECUTIVO = row3.CONSECUTIVO ;
out2_tmp.GESTOR_ID = row3.GESTOR_ID ;
out2_tmp.GESTOR_NOMBRE = row3.GESTOR_NOMBRE ;
out2_tmp.FFINALIZACION = row3.FFINALIZACION ;
out2_tmp.FREGISTRO = row3.FREGISTRO ;
out2_tmp.TREGIMEN_SALUD = row3.TREGIMEN_SALUD ;
out2_tmp.UORG_ID = row3.UORG_ID ;
out2_tmp.EPS = row3.EPS ;
out2_tmp.RECOMENDACIONES = row3.RECOMENDACIONES ;
out2_tmp.PREPAGADA = row3.PREPAGADA ;
out2_tmp.FICHAFAMILIAR_ID = row3.FICHAFAMILIAR_ID ;
out2_tmp.VALOR_FINDRISK = row3.VALOR_FINDRISK ;
out2_tmp.CATEGORIA_FINDRISK = row3.CATEGORIA_FINDRISK ;
out2_tmp.MOMENTO_VIDA = row3.MOMENTO_VIDA ;
out2_tmp.FRAMINGHAM = row3.FRAMINGHAM ;
out2_tmp.RIESGO_FRAMINGHAM = row3.RIESGO_FRAMINGHAM ;
out2_tmp.RIESGO_COLOMBIA = row3.RIESGO_COLOMBIA ;
out2_tmp.EBAS_ID = row3.EBAS_ID ;
out2_tmp.TSEGUIMIENTO = row3.TSEGUIMIENTO ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tOracleOutput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out2"
						
						);
					}
					



        whetherReject_tOracleOutput_2 = false;
                    pstmt_tOracleOutput_2.setBigDecimal(1, out2.ID);

            int checkCount_tOracleOutput_2 = -1;
            try (java.sql.ResultSet rs_tOracleOutput_2 = pstmt_tOracleOutput_2.executeQuery()) {
                while(rs_tOracleOutput_2.next()) {
                    checkCount_tOracleOutput_2 = rs_tOracleOutput_2.getInt(1);
                }
            }
            if(checkCount_tOracleOutput_2 > 0) {
                        pstmtUpdate_tOracleOutput_2.setBigDecimal(1, out2.IDENTIFICACION_ID);

                        pstmtUpdate_tOracleOutput_2.setBigDecimal(2, out2.PERSONAS_ID);

                        if(out2.CONSECUTIVO == null) {
pstmtUpdate_tOracleOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_2.setString(3, out2.CONSECUTIVO);
}

                        pstmtUpdate_tOracleOutput_2.setBigDecimal(4, out2.GESTOR_ID);

                        if(out2.GESTOR_NOMBRE == null) {
pstmtUpdate_tOracleOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_2.setString(5, out2.GESTOR_NOMBRE);
}

                        if(out2.FFINALIZACION != null) {
pstmtUpdate_tOracleOutput_2.setObject(6, new java.sql.Timestamp(out2.FFINALIZACION.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tOracleOutput_2.setNull(6, java.sql.Types.DATE);
}

                        if(out2.FREGISTRO != null) {
pstmtUpdate_tOracleOutput_2.setObject(7, new java.sql.Timestamp(out2.FREGISTRO.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tOracleOutput_2.setNull(7, java.sql.Types.DATE);
}

                        if(out2.TREGIMEN_SALUD == null) {
pstmtUpdate_tOracleOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_2.setString(8, out2.TREGIMEN_SALUD);
}

                        pstmtUpdate_tOracleOutput_2.setBigDecimal(9, out2.UORG_ID);

                        if(out2.EPS == null) {
pstmtUpdate_tOracleOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_2.setString(10, out2.EPS);
}

                        if(out2.RECOMENDACIONES == null) {
pstmtUpdate_tOracleOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_2.setString(11, out2.RECOMENDACIONES);
}

                        if(out2.PREPAGADA == null) {
pstmtUpdate_tOracleOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_2.setString(12, out2.PREPAGADA);
}

                        pstmtUpdate_tOracleOutput_2.setBigDecimal(13, out2.FICHAFAMILIAR_ID);

                        pstmtUpdate_tOracleOutput_2.setBigDecimal(14, out2.VALOR_FINDRISK);

                        if(out2.CATEGORIA_FINDRISK == null) {
pstmtUpdate_tOracleOutput_2.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_2.setString(15, out2.CATEGORIA_FINDRISK);
}

                        if(out2.MOMENTO_VIDA == null) {
pstmtUpdate_tOracleOutput_2.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_2.setString(16, out2.MOMENTO_VIDA);
}

                        if(out2.FRAMINGHAM == null) {
pstmtUpdate_tOracleOutput_2.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_2.setString(17, out2.FRAMINGHAM);
}

                        if(out2.RIESGO_FRAMINGHAM == null) {
pstmtUpdate_tOracleOutput_2.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_2.setString(18, out2.RIESGO_FRAMINGHAM);
}

                        if(out2.RIESGO_COLOMBIA == null) {
pstmtUpdate_tOracleOutput_2.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_2.setString(19, out2.RIESGO_COLOMBIA);
}

                        pstmtUpdate_tOracleOutput_2.setBigDecimal(20, out2.EBAS_ID);

                        if(out2.TSEGUIMIENTO == null) {
pstmtUpdate_tOracleOutput_2.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_2.setString(21, out2.TSEGUIMIENTO);
}

                        pstmtUpdate_tOracleOutput_2.setBigDecimal(22 + count_tOracleOutput_2, out2.ID);

                try {
                    int processedCount_tOracleOutput_2 = pstmtUpdate_tOracleOutput_2.executeUpdate();
                    updatedCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                    rowsToCommitCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                    nb_line_tOracleOutput_2++;
                } catch(java.lang.Exception e_tOracleOutput_2) {
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
                    whetherReject_tOracleOutput_2 = true;
                        nb_line_tOracleOutput_2++;
                            System.err.print(e_tOracleOutput_2.getMessage());
                }
            } else {
                        pstmtInsert_tOracleOutput_2.setBigDecimal(1, out2.ID);

                        pstmtInsert_tOracleOutput_2.setBigDecimal(2, out2.IDENTIFICACION_ID);

                        pstmtInsert_tOracleOutput_2.setBigDecimal(3, out2.PERSONAS_ID);

                        if(out2.CONSECUTIVO == null) {
pstmtInsert_tOracleOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_2.setString(4, out2.CONSECUTIVO);
}

                        pstmtInsert_tOracleOutput_2.setBigDecimal(5, out2.GESTOR_ID);

                        if(out2.GESTOR_NOMBRE == null) {
pstmtInsert_tOracleOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_2.setString(6, out2.GESTOR_NOMBRE);
}

                        if(out2.FFINALIZACION != null) {
pstmtInsert_tOracleOutput_2.setObject(7, new java.sql.Timestamp(out2.FFINALIZACION.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tOracleOutput_2.setNull(7, java.sql.Types.DATE);
}

                        if(out2.FREGISTRO != null) {
pstmtInsert_tOracleOutput_2.setObject(8, new java.sql.Timestamp(out2.FREGISTRO.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tOracleOutput_2.setNull(8, java.sql.Types.DATE);
}

                        if(out2.TREGIMEN_SALUD == null) {
pstmtInsert_tOracleOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_2.setString(9, out2.TREGIMEN_SALUD);
}

                        pstmtInsert_tOracleOutput_2.setBigDecimal(10, out2.UORG_ID);

                        if(out2.EPS == null) {
pstmtInsert_tOracleOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_2.setString(11, out2.EPS);
}

                        if(out2.RECOMENDACIONES == null) {
pstmtInsert_tOracleOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_2.setString(12, out2.RECOMENDACIONES);
}

                        if(out2.PREPAGADA == null) {
pstmtInsert_tOracleOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_2.setString(13, out2.PREPAGADA);
}

                        pstmtInsert_tOracleOutput_2.setBigDecimal(14, out2.FICHAFAMILIAR_ID);

                        pstmtInsert_tOracleOutput_2.setBigDecimal(15, out2.VALOR_FINDRISK);

                        if(out2.CATEGORIA_FINDRISK == null) {
pstmtInsert_tOracleOutput_2.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_2.setString(16, out2.CATEGORIA_FINDRISK);
}

                        if(out2.MOMENTO_VIDA == null) {
pstmtInsert_tOracleOutput_2.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_2.setString(17, out2.MOMENTO_VIDA);
}

                        if(out2.FRAMINGHAM == null) {
pstmtInsert_tOracleOutput_2.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_2.setString(18, out2.FRAMINGHAM);
}

                        if(out2.RIESGO_FRAMINGHAM == null) {
pstmtInsert_tOracleOutput_2.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_2.setString(19, out2.RIESGO_FRAMINGHAM);
}

                        if(out2.RIESGO_COLOMBIA == null) {
pstmtInsert_tOracleOutput_2.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_2.setString(20, out2.RIESGO_COLOMBIA);
}

                        pstmtInsert_tOracleOutput_2.setBigDecimal(21, out2.EBAS_ID);

                        if(out2.TSEGUIMIENTO == null) {
pstmtInsert_tOracleOutput_2.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_2.setString(22, out2.TSEGUIMIENTO);
}

                try {
                    int processedCount_tOracleOutput_2 = pstmtInsert_tOracleOutput_2.executeUpdate();
                    insertedCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                    rowsToCommitCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                    nb_line_tOracleOutput_2++;
                } catch(java.lang.Exception e_tOracleOutput_2) {
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
                    whetherReject_tOracleOutput_2 = true;
                        nb_line_tOracleOutput_2++;
                            System.err.print(e_tOracleOutput_2.getMessage());
                }
            }
                commitCounter_tOracleOutput_2++;
                if(commitEvery_tOracleOutput_2 <= commitCounter_tOracleOutput_2) {
                    if(rowsToCommitCount_tOracleOutput_2 != 0){
                    	
                    }
                    conn_tOracleOutput_2.commit();
                    if(rowsToCommitCount_tOracleOutput_2 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_2 = 0;
                    }
                    commitCounter_tOracleOutput_2=0;
                }

 


	tos_count_tOracleOutput_2++;

/**
 * [tOracleOutput_2 main ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tOracleOutput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
	



	
        if(pstmtUpdate_tOracleOutput_2 != null){
            pstmtUpdate_tOracleOutput_2.close();
            resourceMap.remove("pstmtUpdate_tOracleOutput_2");
        }
        if(pstmtInsert_tOracleOutput_2 != null){
            pstmtInsert_tOracleOutput_2.close();
            resourceMap.remove("pstmtInsert_tOracleOutput_2");
        }
        if(pstmt_tOracleOutput_2 != null) {
            pstmt_tOracleOutput_2.close();
            resourceMap.remove("pstmt_tOracleOutput_2");
        }
    resourceMap.put("statementClosed_tOracleOutput_2", true);
		if(commitCounter_tOracleOutput_2 > 0 && rowsToCommitCount_tOracleOutput_2 != 0) {
			
		}
		conn_tOracleOutput_2.commit();
		if(commitCounter_tOracleOutput_2 > 0 && rowsToCommitCount_tOracleOutput_2 != 0) {
			
			rowsToCommitCount_tOracleOutput_2 = 0;
		}
		commitCounter_tOracleOutput_2 = 0;
		
		
		conn_tOracleOutput_2 .close();
		
		resourceMap.put("finish_tOracleOutput_2", true);
   	

	
	nb_line_deleted_tOracleOutput_2=nb_line_deleted_tOracleOutput_2+ deletedCount_tOracleOutput_2;
	nb_line_update_tOracleOutput_2=nb_line_update_tOracleOutput_2 + updatedCount_tOracleOutput_2;
	nb_line_inserted_tOracleOutput_2=nb_line_inserted_tOracleOutput_2 + insertedCount_tOracleOutput_2;
	nb_line_rejected_tOracleOutput_2=nb_line_rejected_tOracleOutput_2 + rejectedCount_tOracleOutput_2;
	
        globalMap.put("tOracleOutput_2_NB_LINE",nb_line_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",nb_line_update_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_2", true);
end_Hash.put("tOracleOutput_2", System.currentTimeMillis());




/**
 * [tOracleOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tOracleInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tOracleOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tOracleOutput_2 = null;
                if ((pstmtUpdateToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tOracleOutput_2")) != null) {
                    pstmtUpdateToClose_tOracleOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tOracleOutput_2 = null;
                if ((pstmtInsertToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tOracleOutput_2")) != null) {
                    pstmtInsertToClose_tOracleOutput_2.close();
                }
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_2 = null;
                if ((pstmtToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_2")) != null) {
                    pstmtToClose_tOracleOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_2") == null){
            java.sql.Connection ctn_tOracleOutput_2 = null;
            if((ctn_tOracleOutput_2 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_2")) != null){
                try {
                    ctn_tOracleOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_2) {
                    String errorMessage_tOracleOutput_2 = "failed to close the connection in tOracleOutput_2 :" + sqlEx_tOracleOutput_2.getMessage();
                    System.err.println(errorMessage_tOracleOutput_2);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 160;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal IDENTIFICACION_ID;

				public BigDecimal getIDENTIFICACION_ID () {
					return this.IDENTIFICACION_ID;
				}

				public Boolean IDENTIFICACION_IDIsNullable(){
				    return true;
				}
				public Boolean IDENTIFICACION_IDIsKey(){
				    return false;
				}
				public Integer IDENTIFICACION_IDLength(){
				    return 80;
				}
				public Integer IDENTIFICACION_IDPrecision(){
				    return 0;
				}
				public String IDENTIFICACION_IDDefault(){
				
					return null;
				
				}
				public String IDENTIFICACION_IDComment(){
				
				    return "";
				
				}
				public String IDENTIFICACION_IDPattern(){
				
					return "";
				
				}
				public String IDENTIFICACION_IDOriginalDbColumnName(){
				
					return "IDENTIFICACION_ID";
				
				}

				
			    public BigDecimal PREGUNTAS_ID;

				public BigDecimal getPREGUNTAS_ID () {
					return this.PREGUNTAS_ID;
				}

				public Boolean PREGUNTAS_IDIsNullable(){
				    return true;
				}
				public Boolean PREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTAS_IDLength(){
				    return 80;
				}
				public Integer PREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String PREGUNTAS_IDDefault(){
				
					return null;
				
				}
				public String PREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTAS_IDOriginalDbColumnName(){
				
					return "PREGUNTAS_ID";
				
				}

				
			    public String RTA_ABIERTA;

				public String getRTA_ABIERTA () {
					return this.RTA_ABIERTA;
				}

				public Boolean RTA_ABIERTAIsNullable(){
				    return true;
				}
				public Boolean RTA_ABIERTAIsKey(){
				    return false;
				}
				public Integer RTA_ABIERTALength(){
				    return 500;
				}
				public Integer RTA_ABIERTAPrecision(){
				    return 0;
				}
				public String RTA_ABIERTADefault(){
				
					return null;
				
				}
				public String RTA_ABIERTAComment(){
				
				    return "";
				
				}
				public String RTA_ABIERTAPattern(){
				
					return "";
				
				}
				public String RTA_ABIERTAOriginalDbColumnName(){
				
					return "RTA_ABIERTA";
				
				}

				
			    public String RTA_CERRADA;

				public String getRTA_CERRADA () {
					return this.RTA_CERRADA;
				}

				public Boolean RTA_CERRADAIsNullable(){
				    return true;
				}
				public Boolean RTA_CERRADAIsKey(){
				    return false;
				}
				public Integer RTA_CERRADALength(){
				    return 100;
				}
				public Integer RTA_CERRADAPrecision(){
				    return 0;
				}
				public String RTA_CERRADADefault(){
				
					return null;
				
				}
				public String RTA_CERRADAComment(){
				
				    return "";
				
				}
				public String RTA_CERRADAPattern(){
				
					return "";
				
				}
				public String RTA_CERRADAOriginalDbColumnName(){
				
					return "RTA_CERRADA";
				
				}

				
			    public String RESPUESTA;

				public String getRESPUESTA () {
					return this.RESPUESTA;
				}

				public Boolean RESPUESTAIsNullable(){
				    return true;
				}
				public Boolean RESPUESTAIsKey(){
				    return false;
				}
				public Integer RESPUESTALength(){
				    return 602;
				}
				public Integer RESPUESTAPrecision(){
				    return 0;
				}
				public String RESPUESTADefault(){
				
					return null;
				
				}
				public String RESPUESTAComment(){
				
				    return "";
				
				}
				public String RESPUESTAPattern(){
				
					return "";
				
				}
				public String RESPUESTAOriginalDbColumnName(){
				
					return "RESPUESTA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out3Struct other = (out3Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out3Struct other) {

		other.ID = this.ID;
	            other.IDENTIFICACION_ID = this.IDENTIFICACION_ID;
	            other.PREGUNTAS_ID = this.PREGUNTAS_ID;
	            other.RTA_ABIERTA = this.RTA_ABIERTA;
	            other.RTA_CERRADA = this.RTA_CERRADA;
	            other.RESPUESTA = this.RESPUESTA;
	            
	}

	public void copyKeysDataTo(out3Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.IDENTIFICACION_ID = (BigDecimal) dis.readObject();
					
						this.PREGUNTAS_ID = (BigDecimal) dis.readObject();
					
					this.RTA_ABIERTA = readString(dis);
					
					this.RTA_CERRADA = readString(dis);
					
					this.RESPUESTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.IDENTIFICACION_ID = (BigDecimal) dis.readObject();
					
						this.PREGUNTAS_ID = (BigDecimal) dis.readObject();
					
					this.RTA_ABIERTA = readString(dis);
					
					this.RTA_CERRADA = readString(dis);
					
					this.RESPUESTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDENTIFICACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PREGUNTAS_ID);
					
					// String
				
						writeString(this.RTA_ABIERTA,dos);
					
					// String
				
						writeString(this.RTA_CERRADA,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IDENTIFICACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PREGUNTAS_ID);
					
					// String
				
						writeString(this.RTA_ABIERTA,dos);
					
					// String
				
						writeString(this.RTA_CERRADA,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",IDENTIFICACION_ID="+String.valueOf(IDENTIFICACION_ID));
		sb.append(",PREGUNTAS_ID="+String.valueOf(PREGUNTAS_ID));
		sb.append(",RTA_ABIERTA="+RTA_ABIERTA);
		sb.append(",RTA_CERRADA="+RTA_CERRADA);
		sb.append(",RESPUESTA="+RESPUESTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 160;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal IDENTIFICACION_ID;

				public BigDecimal getIDENTIFICACION_ID () {
					return this.IDENTIFICACION_ID;
				}

				public Boolean IDENTIFICACION_IDIsNullable(){
				    return true;
				}
				public Boolean IDENTIFICACION_IDIsKey(){
				    return false;
				}
				public Integer IDENTIFICACION_IDLength(){
				    return 80;
				}
				public Integer IDENTIFICACION_IDPrecision(){
				    return 0;
				}
				public String IDENTIFICACION_IDDefault(){
				
					return null;
				
				}
				public String IDENTIFICACION_IDComment(){
				
				    return "";
				
				}
				public String IDENTIFICACION_IDPattern(){
				
					return "";
				
				}
				public String IDENTIFICACION_IDOriginalDbColumnName(){
				
					return "IDENTIFICACION_ID";
				
				}

				
			    public BigDecimal PREGUNTAS_ID;

				public BigDecimal getPREGUNTAS_ID () {
					return this.PREGUNTAS_ID;
				}

				public Boolean PREGUNTAS_IDIsNullable(){
				    return true;
				}
				public Boolean PREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTAS_IDLength(){
				    return 80;
				}
				public Integer PREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String PREGUNTAS_IDDefault(){
				
					return null;
				
				}
				public String PREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTAS_IDOriginalDbColumnName(){
				
					return "PREGUNTAS_ID";
				
				}

				
			    public String RTA_ABIERTA;

				public String getRTA_ABIERTA () {
					return this.RTA_ABIERTA;
				}

				public Boolean RTA_ABIERTAIsNullable(){
				    return true;
				}
				public Boolean RTA_ABIERTAIsKey(){
				    return false;
				}
				public Integer RTA_ABIERTALength(){
				    return 500;
				}
				public Integer RTA_ABIERTAPrecision(){
				    return 0;
				}
				public String RTA_ABIERTADefault(){
				
					return null;
				
				}
				public String RTA_ABIERTAComment(){
				
				    return "";
				
				}
				public String RTA_ABIERTAPattern(){
				
					return "";
				
				}
				public String RTA_ABIERTAOriginalDbColumnName(){
				
					return "RTA_ABIERTA";
				
				}

				
			    public String RTA_CERRADA;

				public String getRTA_CERRADA () {
					return this.RTA_CERRADA;
				}

				public Boolean RTA_CERRADAIsNullable(){
				    return true;
				}
				public Boolean RTA_CERRADAIsKey(){
				    return false;
				}
				public Integer RTA_CERRADALength(){
				    return 100;
				}
				public Integer RTA_CERRADAPrecision(){
				    return 0;
				}
				public String RTA_CERRADADefault(){
				
					return null;
				
				}
				public String RTA_CERRADAComment(){
				
				    return "";
				
				}
				public String RTA_CERRADAPattern(){
				
					return "";
				
				}
				public String RTA_CERRADAOriginalDbColumnName(){
				
					return "RTA_CERRADA";
				
				}

				
			    public String RESPUESTA;

				public String getRESPUESTA () {
					return this.RESPUESTA;
				}

				public Boolean RESPUESTAIsNullable(){
				    return true;
				}
				public Boolean RESPUESTAIsKey(){
				    return false;
				}
				public Integer RESPUESTALength(){
				    return 602;
				}
				public Integer RESPUESTAPrecision(){
				    return 0;
				}
				public String RESPUESTADefault(){
				
					return null;
				
				}
				public String RESPUESTAComment(){
				
				    return "";
				
				}
				public String RESPUESTAPattern(){
				
					return "";
				
				}
				public String RESPUESTAOriginalDbColumnName(){
				
					return "RESPUESTA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.IDENTIFICACION_ID = (BigDecimal) dis.readObject();
					
						this.PREGUNTAS_ID = (BigDecimal) dis.readObject();
					
					this.RTA_ABIERTA = readString(dis);
					
					this.RTA_CERRADA = readString(dis);
					
					this.RESPUESTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.IDENTIFICACION_ID = (BigDecimal) dis.readObject();
					
						this.PREGUNTAS_ID = (BigDecimal) dis.readObject();
					
					this.RTA_ABIERTA = readString(dis);
					
					this.RTA_CERRADA = readString(dis);
					
					this.RESPUESTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDENTIFICACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PREGUNTAS_ID);
					
					// String
				
						writeString(this.RTA_ABIERTA,dos);
					
					// String
				
						writeString(this.RTA_CERRADA,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IDENTIFICACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PREGUNTAS_ID);
					
					// String
				
						writeString(this.RTA_ABIERTA,dos);
					
					// String
				
						writeString(this.RTA_CERRADA,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",IDENTIFICACION_ID="+String.valueOf(IDENTIFICACION_ID));
		sb.append(",PREGUNTAS_ID="+String.valueOf(PREGUNTAS_ID));
		sb.append(",RTA_ABIERTA="+RTA_ABIERTA);
		sb.append(",RTA_CERRADA="+RTA_CERRADA);
		sb.append(",RESPUESTA="+RESPUESTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
out3Struct out3 = new out3Struct();





	
	/**
	 * [tOracleOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_3", false);
		start_Hash.put("tOracleOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tOracleOutput_3 = 0;
		






        int updateKeyCount_tOracleOutput_3 = 1;
        if(updateKeyCount_tOracleOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_3 == 6 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_3 = 0;
    int nb_line_update_tOracleOutput_3 = 0;
    int nb_line_inserted_tOracleOutput_3 = 0;
    int nb_line_deleted_tOracleOutput_3 = 0;
    int nb_line_rejected_tOracleOutput_3 = 0;

    int tmp_batchUpdateCount_tOracleOutput_3 = 0;

    int deletedCount_tOracleOutput_3=0;
    int updatedCount_tOracleOutput_3=0;
    int insertedCount_tOracleOutput_3=0;
    int rowsToCommitCount_tOracleOutput_3=0;
    int rejectedCount_tOracleOutput_3=0;

    boolean whetherReject_tOracleOutput_3 = false;

    java.sql.Connection conn_tOracleOutput_3 = null;

    //optional table
    String dbschema_tOracleOutput_3 = null;
    String tableName_tOracleOutput_3 = null;
                    String driverClass_tOracleOutput_3 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_3);
                String url_tOracleOutput_3 = null;
                    url_tOracleOutput_3 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_3 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_3 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_3 = decryptedPassword_tOracleOutput_3;
                dbschema_tOracleOutput_3 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_3 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_3.put("user",dbUser_tOracleOutput_3);
                    atnParamsPrope_tOracleOutput_3.put("password",dbPwd_tOracleOutput_3);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_3.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_3 = java.sql.DriverManager.getConnection(url_tOracleOutput_3, atnParamsPrope_tOracleOutput_3);
        resourceMap.put("conn_tOracleOutput_3", conn_tOracleOutput_3);
            conn_tOracleOutput_3.setAutoCommit(false);
            int commitEvery_tOracleOutput_3 = 1000;
            int commitCounter_tOracleOutput_3 = 0;
        int count_tOracleOutput_3=0;

        if(dbschema_tOracleOutput_3 == null || dbschema_tOracleOutput_3.trim().length() == 0) {
            tableName_tOracleOutput_3 = ("BFFA_RESPUESTAS");
        } else {
            tableName_tOracleOutput_3 = dbschema_tOracleOutput_3 + "." + ("BFFA_RESPUESTAS");
        }
                java.sql.PreparedStatement pstmt_tOracleOutput_3 = conn_tOracleOutput_3.prepareStatement("SELECT COUNT(1) FROM " + tableName_tOracleOutput_3 + " WHERE ID = ?");
                resourceMap.put("pstmt_tOracleOutput_3", pstmt_tOracleOutput_3);
                String insert_tOracleOutput_3 = "INSERT INTO " + tableName_tOracleOutput_3 + " (ID,IDENTIFICACION_ID,PREGUNTAS_ID,RTA_ABIERTA,RTA_CERRADA,RESPUESTA) VALUES (?,?,?,?,?,?)";    
                java.sql.PreparedStatement pstmtInsert_tOracleOutput_3 = conn_tOracleOutput_3.prepareStatement(insert_tOracleOutput_3);
                resourceMap.put("pstmtInsert_tOracleOutput_3", pstmtInsert_tOracleOutput_3);
                String update_tOracleOutput_3 = "UPDATE " + tableName_tOracleOutput_3 + " SET IDENTIFICACION_ID = ?,PREGUNTAS_ID = ?,RTA_ABIERTA = ?,RTA_CERRADA = ?,RESPUESTA = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmtUpdate_tOracleOutput_3 = conn_tOracleOutput_3.prepareStatement(update_tOracleOutput_3);
                resourceMap.put("pstmtUpdate_tOracleOutput_3", pstmtUpdate_tOracleOutput_3);





 



/**
 * [tOracleOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_4.setFetchSize(1000);


		    String dbquery_tOracleInput_4 = "SELECT  PRE.FICHA_ID || PRE.PERSONAS_ID|| PRE.PREGUNTAS_ID AS ID \n       ,PRE.FICHA_ID || PRE.PERSONAS_ID AS IDENTIFIC"
+"ACION_ID    \n       ,PRE.PREGUNTAS_ID\n       ,DATOS.RTA_ABIERTA\n       ,DATOS.RTA_CERRADA\n       ,DATOS.RESPUESTA\nF"
+"ROM (  \n  SELECT FI.ID AS FICHA_ID\n         ,CF.PERSONA_ID AS PERSONAS_ID\n         ,GPR.ID || DECODE ( GTP.NOMBRE\n  "
+"                           ,'MULTISELECT'\n                             , GTR.ID\n                             , ''  ) A"
+"S PREGUNTAS_ID       \n         ,COALESCE ( DECODE ( GTP.NOMBRE\n                              ,'COMBO_COMBO'\n         "
+"                     , GTR2.VPREDETERMINADO\n                              , NULL )\n                    , TO_CHAR (FR.O"
+"PCION2, 'DD/MM/YYYY')\n                    , FR.OPCION1 ) AS RTA_ABIERTA\n         ,GTR.VPREDETERMINADO AS RTA_CERRADA  "
+"   \n         ,CASE           \n            WHEN GTP.NOMBRE = 'COMBO_TEXTO' \n              OR GTP.NOMBRE = 'COMBO_OTRO'"
+"\n              OR GTP.NOMBRE = 'COMBO_NUMERICO'\n              OR GTP.NOMBRE = 'COMBO_TEXTO_FIJO'\n              OR GTP"
+".NOMBRE = 'COMBO'\n            THEN DECODE ( FR.TRESPUESTAS_ID\n                          , NULL\n                      "
+"    , FR.OPCION1\n                          , DECODE (  FR.OPCION1\n                                      , NULL\n      "
+"                                , GTR.VPREDETERMINADO\n                                      , GTR.VPREDETERMINADO || ',"
+" ' || FR.OPCION1 ) ) \n            WHEN GTP.NOMBRE = 'MULTISELECT'\n            THEN DECODE ( TRIM ( UPPER ( GTR.VPREDET"
+"ERMINADO ) )\n                          , 'OTRO'\n                          , FR.OPCION1\n                          , '1"
+"' )            \n            WHEN GTP.NOMBRE = 'RANGO_NUMERICO' \n              OR GTP.NOMBRE = 'ABIERTA'\n             "
+" OR GTP.NOMBRE = 'AREA'\n            THEN FR.OPCION1\n            WHEN GTP.NOMBRE = 'FECHA_NORMAL' \n            THEN TO"
+"_CHAR (FR.OPCION2, 'DD/MM/YYYY')\n            WHEN GTP.NOMBRE = 'COMBO_COMBO' \n            THEN CASE\n                 "
+" WHEN FR.TRESPUESTAS_ID IS NULL \n                  THEN FR.OPCION1\n                  WHEN GPR.SIGLA = 'FF079' AND FR.C"
+"OMPOSICION_FAMILIAR_ID IS NOT NULL\n                  THEN GTR.VPREDETERMINADO || ', Tipo de problema visual: ' || GTR2."
+"VPREDETERMINADO\n                  WHEN GPR.SIGLA = 'FF080' AND FR.COMPOSICION_FAMILIAR_ID IS NOT NULL\n                "
+"  THEN GTR.VPREDETERMINADO || ', Problemas auditivos corregidos: ' || GTR2.VPREDETERMINADO\n                  WHEN FR.CO"
+"MPOSICION_FAMILIAR_ID IS NOT NULL\n                  THEN GTR.VPREDETERMINADO || ', Resultado: ' || GTR2.VPREDETERMINADO"
+"\n                  WHEN GTR2.VPREDETERMINADO IS NULL \n                  THEN GTR.VPREDETERMINADO\n                  EL"
+"SE GTR.VPREDETERMINADO || ', ' || GTR2.VPREDETERMINADO\n                END           \n          END AS RESPUESTA\n    "
+"     \n  FROM FFA_IDENTIFICACION FI \n  INNER JOIN (\n		SELECT  ROW_NUMBER() OVER (PARTITION BY CF.PERSONA_ID,CF.IDENTIF"
+"ICACION_ID  ORDER BY CF.ID DESC) R ,CF.*\n		FROM FFA_COMPOSICION_FAMILIAR CF WHERE CF.ESTREGISTRO_ID = 1\n	) CF ON CF.FI"
+"CHAFAMILIAR_ID = FI.FICHAFAMILIAR_ID AND CF.ESTREGISTRO_ID = 1 AND CF.R < 2\n  INNER JOIN ( \n    SELECT  ROW_NUMBER() O"
+"VER (PARTITION BY FR.COMPOSICION_FAMILIAR_ID, FR.PREGUNTAS_ID, FR.TRESPUESTAS_ID, FR.OPCION1, FR.OPCION2, FR.IDENTIFICAC"
+"ION_ID  ORDER BY FR.ID DESC) R2 ,FR.*\n    FROM FFA_RESPUESTAS FR WHERE FR.ESTREGISTRO_ID = 1  AND FR.ESTADO = 'Activo'"
+"\n  )FR ON FR.IDENTIFICACION_ID = FI.ID AND R2 < 2 AND ( FR.COMPOSICION_FAMILIAR_ID IS NULL OR FR.COMPOSICION_FAMILIAR_ID"
+" = CF.ID )\n  INNER JOIN GEN_PREGUNTAS GPR ON GPR.ID = FR.PREGUNTAS_ID\n  INNER JOIN GEN_TPREGUNTAS GTP ON GTP.ID = GPR."
+"TPREGUNTAS_ID \n  LEFT JOIN  GEN_TRESPUESTAS GTR ON GTR.ID = FR.TRESPUESTAS_ID\n  LEFT JOIN  GEN_TRESPUESTAS GTR2 ON TO_"
+"CHAR( GTR2.ID ) = FR.OPCION1\n  WHERE FI.ESTADO = 'Terminada' \n    AND FI.FICHAFAMILIAR_ID IS NOT NULL\n    AND FI.ESTR"
+"EGISTRO_ID = 1\n    AND ( FR.TRESPUESTAS_ID IS NOT NULL OR FR.OPCION1 IS NOT NULL OR FR.OPCION2 IS NOT NULL )  \n    AND"
+" GPR.SIGLA <>  'FF025'\n   "+context.CONDITION+" \n  UNION\n  SELECT  FI.ID AS FICHA_ID\n         ,CF.PERSONA_ID AS PERSONAS_ID\n         ,GPR.ID || TI.TIPO AS PREGUNT"
+"AS_ID       \n         ,FR.OPCION1  AS RTA_ABIERTA\n         ,GTR.VPREDETERMINADO AS RTA_CERRADA     \n         ,DECODE "
+"( TI.TIPO, 1, GTR.VPREDETERMINADO, FR.OPCION1) AS RESPUESTA \n  FROM FFA_IDENTIFICACION FI \n  INNER JOIN (\n		SELECT  R"
+"OW_NUMBER() OVER (PARTITION BY CF.PERSONA_ID,CF.IDENTIFICACION_ID  ORDER BY CF.ID DESC) R ,CF.*\n		FROM FFA_COMPOSICION_"
+"FAMILIAR CF WHERE CF.ESTREGISTRO_ID = 1\n	) CF ON CF.FICHAFAMILIAR_ID = FI.FICHAFAMILIAR_ID AND CF.ESTREGISTRO_ID = 1 AN"
+"D CF.R < 2\n  INNER JOIN ( \n    SELECT  ROW_NUMBER() OVER (PARTITION BY FR.COMPOSICION_FAMILIAR_ID, FR.PREGUNTAS_ID, FR"
+".TRESPUESTAS_ID, FR.OPCION1, FR.OPCION2, FR.IDENTIFICACION_ID  ORDER BY FR.ID DESC) R2 ,FR.*\n    FROM FFA_RESPUESTAS FR"
+" WHERE FR.ESTREGISTRO_ID = 1  AND FR.ESTADO = 'Activo'\n  )FR ON FR.IDENTIFICACION_ID = FI.ID AND R2 < 2 AND ( FR.COMPOS"
+"ICION_FAMILIAR_ID IS NULL OR FR.COMPOSICION_FAMILIAR_ID = CF.ID )\n  INNER JOIN GEN_PREGUNTAS GPR ON GPR.ID = FR.PREGUNT"
+"AS_ID\n  INNER JOIN GEN_TPREGUNTAS GTP ON GTP.ID = GPR.TPREGUNTAS_ID\n  LEFT JOIN  GEN_TRESPUESTAS GTR ON GTR.ID = FR.TR"
+"ESPUESTAS_ID\n  FULL OUTER JOIN ( \n   SELECT 1 AS TIPO, '(Respuesta cerrada)' AS CATEGORIA FROM DUAL\n   UNION\n   SELE"
+"CT 2 AS TIPO, '(Respuesta abierta)' AS CATEGORIA FROM DUAL\n  ) TI ON TI.TIPO IN (1,2)\n  WHERE FI.ESTADO = 'Terminada' "
+"\n    AND FI.FICHAFAMILIAR_ID IS NOT NULL\n    AND FI.ESTREGISTRO_ID = 1\n    AND ( FR.TRESPUESTAS_ID IS NOT NULL OR FR."
+"OPCION1 IS NOT NULL OR FR.OPCION2 IS NOT NULL )  \n    AND GPR.SIGLA =  'FF025'\n     "+context.CONDITION+"  \n   \n) DATOS\nRIGHT JOIN ( \n  SELECT \n    FI.ID AS FICHA_ID\n    ,CF.PERSONA_ID AS PERSONAS_ID \n    ,PREGUNTAS.P"
+"REGUNTAS_ID     \n  FROM FFA_IDENTIFICACION FI\n  INNER JOIN (\n    SELECT  ROW_NUMBER() OVER (PARTITION BY CF.PERSONA_I"
+"D,CF.IDENTIFICACION_ID  ORDER BY CF.ID DESC) R ,CF.*\n    FROM FFA_COMPOSICION_FAMILIAR CF WHERE CF.ESTREGISTRO_ID = 1\n"
+"  ) CF ON CF.FICHAFAMILIAR_ID = FI.FICHAFAMILIAR_ID AND CF.ESTREGISTRO_ID = 1 AND CF.R < 2\n  FULL OUTER JOIN (  \n    S"
+"ELECT  GPR.ID || GTR.ID AS PREGUNTAS_ID            \n            ,NVL( GPR.ESTREGISTRO_ID, 1 ) AS ESTREGISTRO_ID_PREGUNT"
+"A               \n    FROM GEN_PREGUNTAS GPR\n    LEFT JOIN GEN_TPREGUNTAS GTP ON GTP.ID = GPR.TPREGUNTAS_ID AND GTP.NOM"
+"BRE = 'MULTISELECT'\n    LEFT JOIN GEN_TRESPUESTAS GTR ON GTR.PREGUNTAS_ID = GPR.ID AND GTP.ID IS NOT NULL      \n    WH"
+"ERE GPR.ESTREGISTRO_ID = 1 \n      AND GPR.SIGLA LIKE 'FF%'      \n      AND GPR.SIGLA <> 'FF025'\n    UNION\n    select"
+"  GPR.ID || TI.TIPO AS PREGUNTAS_ID             \n            ,NVL( GPR.ESTREGISTRO_ID, 1 ) AS ESTREGISTRO_ID_PREGUNTA  "
+"           \n    FROM GEN_PREGUNTAS GPR \n    FULL OUTER JOIN ( \n     SELECT 1 AS TIPO, '(Respuesta cerrada)' AS CATEGO"
+"RIA FROM DUAL\n     UNION\n     SELECT 2 AS TIPO, '(Respuesta abierta)' AS CATEGORIA FROM DUAL\n    ) TI ON TI.TIPO IN ("
+"1,2)\n    WHERE GPR.SIGLA = 'FF025'\n  ) PREGUNTAS ON PREGUNTAS.ESTREGISTRO_ID_PREGUNTA = FI.ESTREGISTRO_ID\n  WHERE FI."
+"ESTADO = 'Terminada'\n    AND FI.FICHAFAMILIAR_ID IS NOT NULL\n    AND FI.ESTREGISTRO_ID = 1\n    "+context.CONDITION+" \n) PRE ON PRE.PREGUNTAS_ID = DATOS.PREGUNTAS_ID AND PRE.FICHA_ID = DATOS.FICHA_ID AND PRE.PERSONAS_ID = DATOS.PERSONA"
+"S_ID\n";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row4.ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row4.ID = rs_tOracleInput_4.getBigDecimal(1);
					} else {
				
						row4.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row4.IDENTIFICACION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(2) != null) {
						row4.IDENTIFICACION_ID = rs_tOracleInput_4.getBigDecimal(2);
					} else {
				
						row4.IDENTIFICACION_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row4.PREGUNTAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(3) != null) {
						row4.PREGUNTAS_ID = rs_tOracleInput_4.getBigDecimal(3);
					} else {
				
						row4.PREGUNTAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 4) {
								row4.RTA_ABIERTA = null;
							} else {
	                         		
        	row4.RTA_ABIERTA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 5) {
								row4.RTA_CERRADA = null;
							} else {
	                         		
        	row4.RTA_CERRADA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 6) {
								row4.RESPUESTA = null;
							} else {
	                         		
        	row4.RESPUESTA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 6, false);
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp.ID = row4.ID ;
out3_tmp.IDENTIFICACION_ID = row4.IDENTIFICACION_ID ;
out3_tmp.PREGUNTAS_ID = row4.PREGUNTAS_ID ;
out3_tmp.RTA_ABIERTA = row4.RTA_ABIERTA ;
out3_tmp.RTA_CERRADA = row4.RTA_CERRADA ;
out3_tmp.RESPUESTA = row4.RESPUESTA ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tOracleOutput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out3"
						
						);
					}
					



        whetherReject_tOracleOutput_3 = false;
                    pstmt_tOracleOutput_3.setBigDecimal(1, out3.ID);

            int checkCount_tOracleOutput_3 = -1;
            try (java.sql.ResultSet rs_tOracleOutput_3 = pstmt_tOracleOutput_3.executeQuery()) {
                while(rs_tOracleOutput_3.next()) {
                    checkCount_tOracleOutput_3 = rs_tOracleOutput_3.getInt(1);
                }
            }
            if(checkCount_tOracleOutput_3 > 0) {
                        pstmtUpdate_tOracleOutput_3.setBigDecimal(1, out3.IDENTIFICACION_ID);

                        pstmtUpdate_tOracleOutput_3.setBigDecimal(2, out3.PREGUNTAS_ID);

                        if(out3.RTA_ABIERTA == null) {
pstmtUpdate_tOracleOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(3, out3.RTA_ABIERTA);
}

                        if(out3.RTA_CERRADA == null) {
pstmtUpdate_tOracleOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(4, out3.RTA_CERRADA);
}

                        if(out3.RESPUESTA == null) {
pstmtUpdate_tOracleOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(5, out3.RESPUESTA);
}

                        pstmtUpdate_tOracleOutput_3.setBigDecimal(6 + count_tOracleOutput_3, out3.ID);

                try {
                    int processedCount_tOracleOutput_3 = pstmtUpdate_tOracleOutput_3.executeUpdate();
                    updatedCount_tOracleOutput_3 += processedCount_tOracleOutput_3;
                    rowsToCommitCount_tOracleOutput_3 += processedCount_tOracleOutput_3;
                    nb_line_tOracleOutput_3++;
                } catch(java.lang.Exception e_tOracleOutput_3) {
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
                    whetherReject_tOracleOutput_3 = true;
                        nb_line_tOracleOutput_3++;
                            System.err.print(e_tOracleOutput_3.getMessage());
                }
            } else {
                        pstmtInsert_tOracleOutput_3.setBigDecimal(1, out3.ID);

                        pstmtInsert_tOracleOutput_3.setBigDecimal(2, out3.IDENTIFICACION_ID);

                        pstmtInsert_tOracleOutput_3.setBigDecimal(3, out3.PREGUNTAS_ID);

                        if(out3.RTA_ABIERTA == null) {
pstmtInsert_tOracleOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(4, out3.RTA_ABIERTA);
}

                        if(out3.RTA_CERRADA == null) {
pstmtInsert_tOracleOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(5, out3.RTA_CERRADA);
}

                        if(out3.RESPUESTA == null) {
pstmtInsert_tOracleOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(6, out3.RESPUESTA);
}

                try {
                    int processedCount_tOracleOutput_3 = pstmtInsert_tOracleOutput_3.executeUpdate();
                    insertedCount_tOracleOutput_3 += processedCount_tOracleOutput_3;
                    rowsToCommitCount_tOracleOutput_3 += processedCount_tOracleOutput_3;
                    nb_line_tOracleOutput_3++;
                } catch(java.lang.Exception e_tOracleOutput_3) {
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
                    whetherReject_tOracleOutput_3 = true;
                        nb_line_tOracleOutput_3++;
                            System.err.print(e_tOracleOutput_3.getMessage());
                }
            }
                commitCounter_tOracleOutput_3++;
                if(commitEvery_tOracleOutput_3 <= commitCounter_tOracleOutput_3) {
                    if(rowsToCommitCount_tOracleOutput_3 != 0){
                    	
                    }
                    conn_tOracleOutput_3.commit();
                    if(rowsToCommitCount_tOracleOutput_3 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_3 = 0;
                    }
                    commitCounter_tOracleOutput_3=0;
                }

 


	tos_count_tOracleOutput_3++;

/**
 * [tOracleOutput_3 main ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tOracleOutput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
	



	
        if(pstmtUpdate_tOracleOutput_3 != null){
            pstmtUpdate_tOracleOutput_3.close();
            resourceMap.remove("pstmtUpdate_tOracleOutput_3");
        }
        if(pstmtInsert_tOracleOutput_3 != null){
            pstmtInsert_tOracleOutput_3.close();
            resourceMap.remove("pstmtInsert_tOracleOutput_3");
        }
        if(pstmt_tOracleOutput_3 != null) {
            pstmt_tOracleOutput_3.close();
            resourceMap.remove("pstmt_tOracleOutput_3");
        }
    resourceMap.put("statementClosed_tOracleOutput_3", true);
		if(commitCounter_tOracleOutput_3 > 0 && rowsToCommitCount_tOracleOutput_3 != 0) {
			
		}
		conn_tOracleOutput_3.commit();
		if(commitCounter_tOracleOutput_3 > 0 && rowsToCommitCount_tOracleOutput_3 != 0) {
			
			rowsToCommitCount_tOracleOutput_3 = 0;
		}
		commitCounter_tOracleOutput_3 = 0;
		
		
		conn_tOracleOutput_3 .close();
		
		resourceMap.put("finish_tOracleOutput_3", true);
   	

	
	nb_line_deleted_tOracleOutput_3=nb_line_deleted_tOracleOutput_3+ deletedCount_tOracleOutput_3;
	nb_line_update_tOracleOutput_3=nb_line_update_tOracleOutput_3 + updatedCount_tOracleOutput_3;
	nb_line_inserted_tOracleOutput_3=nb_line_inserted_tOracleOutput_3 + insertedCount_tOracleOutput_3;
	nb_line_rejected_tOracleOutput_3=nb_line_rejected_tOracleOutput_3 + rejectedCount_tOracleOutput_3;
	
        globalMap.put("tOracleOutput_3_NB_LINE",nb_line_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_UPDATED",nb_line_update_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_3);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_3", true);
end_Hash.put("tOracleOutput_3", System.currentTimeMillis());




/**
 * [tOracleOutput_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tOracleInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tOracleOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_3") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tOracleOutput_3 = null;
                if ((pstmtUpdateToClose_tOracleOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tOracleOutput_3")) != null) {
                    pstmtUpdateToClose_tOracleOutput_3.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tOracleOutput_3 = null;
                if ((pstmtInsertToClose_tOracleOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tOracleOutput_3")) != null) {
                    pstmtInsertToClose_tOracleOutput_3.close();
                }
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_3 = null;
                if ((pstmtToClose_tOracleOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_3")) != null) {
                    pstmtToClose_tOracleOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_3") == null){
            java.sql.Connection ctn_tOracleOutput_3 = null;
            if((ctn_tOracleOutput_3 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_3")) != null){
                try {
                    ctn_tOracleOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_3) {
                    String errorMessage_tOracleOutput_3 = "failed to close the connection in tOracleOutput_3 :" + sqlEx_tOracleOutput_3.getMessage();
                    System.err.println(errorMessage_tOracleOutput_3);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal FICHAFAMILIAR_ID;

				public BigDecimal getFICHAFAMILIAR_ID () {
					return this.FICHAFAMILIAR_ID;
				}

				public Boolean FICHAFAMILIAR_IDIsNullable(){
				    return true;
				}
				public Boolean FICHAFAMILIAR_IDIsKey(){
				    return false;
				}
				public Integer FICHAFAMILIAR_IDLength(){
				    return 0;
				}
				public Integer FICHAFAMILIAR_IDPrecision(){
				    return null;
				}
				public String FICHAFAMILIAR_IDDefault(){
				
					return "";
				
				}
				public String FICHAFAMILIAR_IDComment(){
				
				    return "";
				
				}
				public String FICHAFAMILIAR_IDPattern(){
				
					return "";
				
				}
				public String FICHAFAMILIAR_IDOriginalDbColumnName(){
				
					return "FICHAFAMILIAR_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String OBSERVACION;

				public String getOBSERVACION () {
					return this.OBSERVACION;
				}

				public Boolean OBSERVACIONIsNullable(){
				    return false;
				}
				public Boolean OBSERVACIONIsKey(){
				    return false;
				}
				public Integer OBSERVACIONLength(){
				    return 4000;
				}
				public Integer OBSERVACIONPrecision(){
				    return 0;
				}
				public String OBSERVACIONDefault(){
				
					return null;
				
				}
				public String OBSERVACIONComment(){
				
				    return "";
				
				}
				public String OBSERVACIONPattern(){
				
					return "";
				
				}
				public String OBSERVACIONOriginalDbColumnName(){
				
					return "OBSERVACION";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 10;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out4Struct other = (out4Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out4Struct other) {

		other.ID = this.ID;
	            other.FICHAFAMILIAR_ID = this.FICHAFAMILIAR_ID;
	            other.PERSONAS_ID = this.PERSONAS_ID;
	            other.OBSERVACION = this.OBSERVACION;
	            other.ESTADO = this.ESTADO;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            
	}

	public void copyKeysDataTo(out4Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.FICHAFAMILIAR_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACION = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.FICHAFAMILIAR_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACION = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHAFAMILIAR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.OBSERVACION,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHAFAMILIAR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.OBSERVACION,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FICHAFAMILIAR_ID="+String.valueOf(FICHAFAMILIAR_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",OBSERVACION="+OBSERVACION);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal FICHAFAMILIAR_ID;

				public BigDecimal getFICHAFAMILIAR_ID () {
					return this.FICHAFAMILIAR_ID;
				}

				public Boolean FICHAFAMILIAR_IDIsNullable(){
				    return true;
				}
				public Boolean FICHAFAMILIAR_IDIsKey(){
				    return false;
				}
				public Integer FICHAFAMILIAR_IDLength(){
				    return 0;
				}
				public Integer FICHAFAMILIAR_IDPrecision(){
				    return null;
				}
				public String FICHAFAMILIAR_IDDefault(){
				
					return "";
				
				}
				public String FICHAFAMILIAR_IDComment(){
				
				    return "";
				
				}
				public String FICHAFAMILIAR_IDPattern(){
				
					return "";
				
				}
				public String FICHAFAMILIAR_IDOriginalDbColumnName(){
				
					return "FICHAFAMILIAR_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String OBSERVACION;

				public String getOBSERVACION () {
					return this.OBSERVACION;
				}

				public Boolean OBSERVACIONIsNullable(){
				    return false;
				}
				public Boolean OBSERVACIONIsKey(){
				    return false;
				}
				public Integer OBSERVACIONLength(){
				    return 4000;
				}
				public Integer OBSERVACIONPrecision(){
				    return 0;
				}
				public String OBSERVACIONDefault(){
				
					return null;
				
				}
				public String OBSERVACIONComment(){
				
				    return "";
				
				}
				public String OBSERVACIONPattern(){
				
					return "";
				
				}
				public String OBSERVACIONOriginalDbColumnName(){
				
					return "OBSERVACION";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 10;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.FICHAFAMILIAR_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACION = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.FICHAFAMILIAR_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACION = readString(dis);
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHAFAMILIAR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.OBSERVACION,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHAFAMILIAR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.OBSERVACION,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FICHAFAMILIAR_ID="+String.valueOf(FICHAFAMILIAR_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",OBSERVACION="+OBSERVACION);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
out4Struct out4 = new out4Struct();





	
	/**
	 * [tOracleOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_4", false);
		start_Hash.put("tOracleOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tOracleOutput_4 = 0;
		






        int updateKeyCount_tOracleOutput_4 = 1;
        if(updateKeyCount_tOracleOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_4 == 6 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_4 = 0;
    int nb_line_update_tOracleOutput_4 = 0;
    int nb_line_inserted_tOracleOutput_4 = 0;
    int nb_line_deleted_tOracleOutput_4 = 0;
    int nb_line_rejected_tOracleOutput_4 = 0;

    int tmp_batchUpdateCount_tOracleOutput_4 = 0;

    int deletedCount_tOracleOutput_4=0;
    int updatedCount_tOracleOutput_4=0;
    int insertedCount_tOracleOutput_4=0;
    int rowsToCommitCount_tOracleOutput_4=0;
    int rejectedCount_tOracleOutput_4=0;

    boolean whetherReject_tOracleOutput_4 = false;

    java.sql.Connection conn_tOracleOutput_4 = null;

    //optional table
    String dbschema_tOracleOutput_4 = null;
    String tableName_tOracleOutput_4 = null;
                    String driverClass_tOracleOutput_4 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_4);
                String url_tOracleOutput_4 = null;
                    url_tOracleOutput_4 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_4 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_4 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_4 = decryptedPassword_tOracleOutput_4;
                dbschema_tOracleOutput_4 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_4 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_4.put("user",dbUser_tOracleOutput_4);
                    atnParamsPrope_tOracleOutput_4.put("password",dbPwd_tOracleOutput_4);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_4.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_4 = java.sql.DriverManager.getConnection(url_tOracleOutput_4, atnParamsPrope_tOracleOutput_4);
        resourceMap.put("conn_tOracleOutput_4", conn_tOracleOutput_4);
            conn_tOracleOutput_4.setAutoCommit(false);
            int commitEvery_tOracleOutput_4 = 1000;
            int commitCounter_tOracleOutput_4 = 0;
        int count_tOracleOutput_4=0;

        if(dbschema_tOracleOutput_4 == null || dbschema_tOracleOutput_4.trim().length() == 0) {
            tableName_tOracleOutput_4 = ("BFFA_OBSERVACIONES");
        } else {
            tableName_tOracleOutput_4 = dbschema_tOracleOutput_4 + "." + ("BFFA_OBSERVACIONES");
        }
                java.sql.PreparedStatement pstmt_tOracleOutput_4 = conn_tOracleOutput_4.prepareStatement("SELECT COUNT(1) FROM " + tableName_tOracleOutput_4 + " WHERE ID = ?");
                resourceMap.put("pstmt_tOracleOutput_4", pstmt_tOracleOutput_4);
                String insert_tOracleOutput_4 = "INSERT INTO " + tableName_tOracleOutput_4 + " (ID,FICHAFAMILIAR_ID,PERSONAS_ID,OBSERVACION,ESTADO,ESTREGISTRO_ID) VALUES (?,?,?,?,?,?)";    
                java.sql.PreparedStatement pstmtInsert_tOracleOutput_4 = conn_tOracleOutput_4.prepareStatement(insert_tOracleOutput_4);
                resourceMap.put("pstmtInsert_tOracleOutput_4", pstmtInsert_tOracleOutput_4);
                String update_tOracleOutput_4 = "UPDATE " + tableName_tOracleOutput_4 + " SET FICHAFAMILIAR_ID = ?,PERSONAS_ID = ?,OBSERVACION = ?,ESTADO = ?,ESTREGISTRO_ID = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmtUpdate_tOracleOutput_4 = conn_tOracleOutput_4.prepareStatement(update_tOracleOutput_4);
                resourceMap.put("pstmtUpdate_tOracleOutput_4", pstmtUpdate_tOracleOutput_4);





 



/**
 * [tOracleOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_5.setFetchSize(1000);


		    String dbquery_tOracleInput_5 = "SELECT  OB.ID\n        ,OB.FICHAFAMILIAR_ID\n        ,CF.PERSONA_ID AS PERSONAS_ID\n        ,OB.OBSERVACION\n        ,O"
+"B.ESTADO\n        ,OB.ESTREGISTRO_ID\nFROM FFA_OBSERVACIONES OB\nLEFT JOIN FFA_COMPOSICION_FAMILIAR CF ON CF.ID = OB.COM"
+"POSICION_FFA_ID\n  "+context.CONDITION_PRINCIPAL ;
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row5.ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row5.ID = rs_tOracleInput_5.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row5.FICHAFAMILIAR_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(2) != null) {
						row5.FICHAFAMILIAR_ID = rs_tOracleInput_5.getBigDecimal(2);
					} else {
				
						row5.FICHAFAMILIAR_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 3) {
								row5.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(3) != null) {
						row5.PERSONAS_ID = rs_tOracleInput_5.getBigDecimal(3);
					} else {
				
						row5.PERSONAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 4) {
								row5.OBSERVACION = null;
							} else {
	                         		
        	row5.OBSERVACION = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 5) {
								row5.ESTADO = null;
							} else {
	                         		
        	row5.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 6) {
								row5.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(6) != null) {
						row5.ESTREGISTRO_ID = rs_tOracleInput_5.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out4 = null;


// # Output table : 'out4'
out4_tmp.ID = row5.ID ;
out4_tmp.FICHAFAMILIAR_ID = row5.FICHAFAMILIAR_ID ;
out4_tmp.PERSONAS_ID = row5.PERSONAS_ID ;
out4_tmp.OBSERVACION = row5.OBSERVACION ;
out4_tmp.ESTADO = row5.ESTADO ;
out4_tmp.ESTREGISTRO_ID = row5.ESTREGISTRO_ID ;
out4 = out4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tOracleOutput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out4"
						
						);
					}
					



        whetherReject_tOracleOutput_4 = false;
                    pstmt_tOracleOutput_4.setBigDecimal(1, out4.ID);

            int checkCount_tOracleOutput_4 = -1;
            try (java.sql.ResultSet rs_tOracleOutput_4 = pstmt_tOracleOutput_4.executeQuery()) {
                while(rs_tOracleOutput_4.next()) {
                    checkCount_tOracleOutput_4 = rs_tOracleOutput_4.getInt(1);
                }
            }
            if(checkCount_tOracleOutput_4 > 0) {
                        pstmtUpdate_tOracleOutput_4.setBigDecimal(1, out4.FICHAFAMILIAR_ID);

                        pstmtUpdate_tOracleOutput_4.setBigDecimal(2, out4.PERSONAS_ID);

                        if(out4.OBSERVACION == null) {
pstmtUpdate_tOracleOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_4.setString(3, out4.OBSERVACION);
}

                        if(out4.ESTADO == null) {
pstmtUpdate_tOracleOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_4.setString(4, out4.ESTADO);
}

                        pstmtUpdate_tOracleOutput_4.setBigDecimal(5, out4.ESTREGISTRO_ID);

                        pstmtUpdate_tOracleOutput_4.setBigDecimal(6 + count_tOracleOutput_4, out4.ID);

                try {
                    int processedCount_tOracleOutput_4 = pstmtUpdate_tOracleOutput_4.executeUpdate();
                    updatedCount_tOracleOutput_4 += processedCount_tOracleOutput_4;
                    rowsToCommitCount_tOracleOutput_4 += processedCount_tOracleOutput_4;
                    nb_line_tOracleOutput_4++;
                } catch(java.lang.Exception e_tOracleOutput_4) {
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
                    whetherReject_tOracleOutput_4 = true;
                        nb_line_tOracleOutput_4++;
                            System.err.print(e_tOracleOutput_4.getMessage());
                }
            } else {
                        pstmtInsert_tOracleOutput_4.setBigDecimal(1, out4.ID);

                        pstmtInsert_tOracleOutput_4.setBigDecimal(2, out4.FICHAFAMILIAR_ID);

                        pstmtInsert_tOracleOutput_4.setBigDecimal(3, out4.PERSONAS_ID);

                        if(out4.OBSERVACION == null) {
pstmtInsert_tOracleOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_4.setString(4, out4.OBSERVACION);
}

                        if(out4.ESTADO == null) {
pstmtInsert_tOracleOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_4.setString(5, out4.ESTADO);
}

                        pstmtInsert_tOracleOutput_4.setBigDecimal(6, out4.ESTREGISTRO_ID);

                try {
                    int processedCount_tOracleOutput_4 = pstmtInsert_tOracleOutput_4.executeUpdate();
                    insertedCount_tOracleOutput_4 += processedCount_tOracleOutput_4;
                    rowsToCommitCount_tOracleOutput_4 += processedCount_tOracleOutput_4;
                    nb_line_tOracleOutput_4++;
                } catch(java.lang.Exception e_tOracleOutput_4) {
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
                    whetherReject_tOracleOutput_4 = true;
                        nb_line_tOracleOutput_4++;
                            System.err.print(e_tOracleOutput_4.getMessage());
                }
            }
                commitCounter_tOracleOutput_4++;
                if(commitEvery_tOracleOutput_4 <= commitCounter_tOracleOutput_4) {
                    if(rowsToCommitCount_tOracleOutput_4 != 0){
                    	
                    }
                    conn_tOracleOutput_4.commit();
                    if(rowsToCommitCount_tOracleOutput_4 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_4 = 0;
                    }
                    commitCounter_tOracleOutput_4=0;
                }

 


	tos_count_tOracleOutput_4++;

/**
 * [tOracleOutput_4 main ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tOracleOutput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
	



	
        if(pstmtUpdate_tOracleOutput_4 != null){
            pstmtUpdate_tOracleOutput_4.close();
            resourceMap.remove("pstmtUpdate_tOracleOutput_4");
        }
        if(pstmtInsert_tOracleOutput_4 != null){
            pstmtInsert_tOracleOutput_4.close();
            resourceMap.remove("pstmtInsert_tOracleOutput_4");
        }
        if(pstmt_tOracleOutput_4 != null) {
            pstmt_tOracleOutput_4.close();
            resourceMap.remove("pstmt_tOracleOutput_4");
        }
    resourceMap.put("statementClosed_tOracleOutput_4", true);
		if(commitCounter_tOracleOutput_4 > 0 && rowsToCommitCount_tOracleOutput_4 != 0) {
			
		}
		conn_tOracleOutput_4.commit();
		if(commitCounter_tOracleOutput_4 > 0 && rowsToCommitCount_tOracleOutput_4 != 0) {
			
			rowsToCommitCount_tOracleOutput_4 = 0;
		}
		commitCounter_tOracleOutput_4 = 0;
		
		
		conn_tOracleOutput_4 .close();
		
		resourceMap.put("finish_tOracleOutput_4", true);
   	

	
	nb_line_deleted_tOracleOutput_4=nb_line_deleted_tOracleOutput_4+ deletedCount_tOracleOutput_4;
	nb_line_update_tOracleOutput_4=nb_line_update_tOracleOutput_4 + updatedCount_tOracleOutput_4;
	nb_line_inserted_tOracleOutput_4=nb_line_inserted_tOracleOutput_4 + insertedCount_tOracleOutput_4;
	nb_line_rejected_tOracleOutput_4=nb_line_rejected_tOracleOutput_4 + rejectedCount_tOracleOutput_4;
	
        globalMap.put("tOracleOutput_4_NB_LINE",nb_line_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_UPDATED",nb_line_update_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_4);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_4", true);
end_Hash.put("tOracleOutput_4", System.currentTimeMillis());




/**
 * [tOracleOutput_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tOracleOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_4") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tOracleOutput_4 = null;
                if ((pstmtUpdateToClose_tOracleOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tOracleOutput_4")) != null) {
                    pstmtUpdateToClose_tOracleOutput_4.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tOracleOutput_4 = null;
                if ((pstmtInsertToClose_tOracleOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tOracleOutput_4")) != null) {
                    pstmtInsertToClose_tOracleOutput_4.close();
                }
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_4 = null;
                if ((pstmtToClose_tOracleOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_4")) != null) {
                    pstmtToClose_tOracleOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_4") == null){
            java.sql.Connection ctn_tOracleOutput_4 = null;
            if((ctn_tOracleOutput_4 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_4")) != null){
                try {
                    ctn_tOracleOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_4) {
                    String errorMessage_tOracleOutput_4 = "failed to close the connection in tOracleOutput_4 :" + sqlEx_tOracleOutput_4.getMessage();
                    System.err.println(errorMessage_tOracleOutput_4);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 80;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String PREGUNTA_SIGLA;

				public String getPREGUNTA_SIGLA () {
					return this.PREGUNTA_SIGLA;
				}

				public Boolean PREGUNTA_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PREGUNTA_SIGLAIsKey(){
				    return false;
				}
				public Integer PREGUNTA_SIGLALength(){
				    return 50;
				}
				public Integer PREGUNTA_SIGLAPrecision(){
				    return 0;
				}
				public String PREGUNTA_SIGLADefault(){
				
					return null;
				
				}
				public String PREGUNTA_SIGLAComment(){
				
				    return "";
				
				}
				public String PREGUNTA_SIGLAPattern(){
				
					return "";
				
				}
				public String PREGUNTA_SIGLAOriginalDbColumnName(){
				
					return "PREGUNTA_SIGLA";
				
				}

				
			    public String OPCION;

				public String getOPCION () {
					return this.OPCION;
				}

				public Boolean OPCIONIsNullable(){
				    return true;
				}
				public Boolean OPCIONIsKey(){
				    return false;
				}
				public Integer OPCIONLength(){
				    return 100;
				}
				public Integer OPCIONPrecision(){
				    return 0;
				}
				public String OPCIONDefault(){
				
					return null;
				
				}
				public String OPCIONComment(){
				
				    return "";
				
				}
				public String OPCIONPattern(){
				
					return "";
				
				}
				public String OPCIONOriginalDbColumnName(){
				
					return "OPCION";
				
				}

				
			    public String PREGUNTA;

				public String getPREGUNTA () {
					return this.PREGUNTA;
				}

				public Boolean PREGUNTAIsNullable(){
				    return true;
				}
				public Boolean PREGUNTAIsKey(){
				    return false;
				}
				public Integer PREGUNTALength(){
				    return 1128;
				}
				public Integer PREGUNTAPrecision(){
				    return 0;
				}
				public String PREGUNTADefault(){
				
					return null;
				
				}
				public String PREGUNTAComment(){
				
				    return "";
				
				}
				public String PREGUNTAPattern(){
				
					return "";
				
				}
				public String PREGUNTAOriginalDbColumnName(){
				
					return "PREGUNTA";
				
				}

				
			    public String PREGUNTA_ESTADO;

				public String getPREGUNTA_ESTADO () {
					return this.PREGUNTA_ESTADO;
				}

				public Boolean PREGUNTA_ESTADOIsNullable(){
				    return true;
				}
				public Boolean PREGUNTA_ESTADOIsKey(){
				    return false;
				}
				public Integer PREGUNTA_ESTADOLength(){
				    return 10;
				}
				public Integer PREGUNTA_ESTADOPrecision(){
				    return 0;
				}
				public String PREGUNTA_ESTADODefault(){
				
					return null;
				
				}
				public String PREGUNTA_ESTADOComment(){
				
				    return "";
				
				}
				public String PREGUNTA_ESTADOPattern(){
				
					return "";
				
				}
				public String PREGUNTA_ESTADOOriginalDbColumnName(){
				
					return "PREGUNTA_ESTADO";
				
				}

				
			    public BigDecimal PREGUNTA_ESTREGISTRO_ID;

				public BigDecimal getPREGUNTA_ESTREGISTRO_ID () {
					return this.PREGUNTA_ESTREGISTRO_ID;
				}

				public Boolean PREGUNTA_ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean PREGUNTA_ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTA_ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer PREGUNTA_ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String PREGUNTA_ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String PREGUNTA_ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTA_ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTA_ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "PREGUNTA_ESTREGISTRO_ID";
				
				}

				
			    public String OPCION_ESTADO;

				public String getOPCION_ESTADO () {
					return this.OPCION_ESTADO;
				}

				public Boolean OPCION_ESTADOIsNullable(){
				    return true;
				}
				public Boolean OPCION_ESTADOIsKey(){
				    return false;
				}
				public Integer OPCION_ESTADOLength(){
				    return 10;
				}
				public Integer OPCION_ESTADOPrecision(){
				    return 0;
				}
				public String OPCION_ESTADODefault(){
				
					return null;
				
				}
				public String OPCION_ESTADOComment(){
				
				    return "";
				
				}
				public String OPCION_ESTADOPattern(){
				
					return "";
				
				}
				public String OPCION_ESTADOOriginalDbColumnName(){
				
					return "OPCION_ESTADO";
				
				}

				
			    public BigDecimal OPCION_ESTREGISTRO_ID;

				public BigDecimal getOPCION_ESTREGISTRO_ID () {
					return this.OPCION_ESTREGISTRO_ID;
				}

				public Boolean OPCION_ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean OPCION_ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer OPCION_ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer OPCION_ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String OPCION_ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String OPCION_ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String OPCION_ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String OPCION_ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "OPCION_ESTREGISTRO_ID";
				
				}

				
			    public BigDecimal ENCUESTAS_ID;

				public BigDecimal getENCUESTAS_ID () {
					return this.ENCUESTAS_ID;
				}

				public Boolean ENCUESTAS_IDIsNullable(){
				    return false;
				}
				public Boolean ENCUESTAS_IDIsKey(){
				    return false;
				}
				public Integer ENCUESTAS_IDLength(){
				    return 0;
				}
				public Integer ENCUESTAS_IDPrecision(){
				    return null;
				}
				public String ENCUESTAS_IDDefault(){
				
					return "";
				
				}
				public String ENCUESTAS_IDComment(){
				
				    return "";
				
				}
				public String ENCUESTAS_IDPattern(){
				
					return "";
				
				}
				public String ENCUESTAS_IDOriginalDbColumnName(){
				
					return "ENCUESTAS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out1Struct other = (out1Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out1Struct other) {

		other.ID = this.ID;
	            other.PREGUNTA_SIGLA = this.PREGUNTA_SIGLA;
	            other.OPCION = this.OPCION;
	            other.PREGUNTA = this.PREGUNTA;
	            other.PREGUNTA_ESTADO = this.PREGUNTA_ESTADO;
	            other.PREGUNTA_ESTREGISTRO_ID = this.PREGUNTA_ESTREGISTRO_ID;
	            other.OPCION_ESTADO = this.OPCION_ESTADO;
	            other.OPCION_ESTREGISTRO_ID = this.OPCION_ESTREGISTRO_ID;
	            other.ENCUESTAS_ID = this.ENCUESTAS_ID;
	            
	}

	public void copyKeysDataTo(out1Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.PREGUNTA_SIGLA = readString(dis);
					
					this.OPCION = readString(dis);
					
					this.PREGUNTA = readString(dis);
					
					this.PREGUNTA_ESTADO = readString(dis);
					
						this.PREGUNTA_ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.OPCION_ESTADO = readString(dis);
					
						this.OPCION_ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.ENCUESTAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.PREGUNTA_SIGLA = readString(dis);
					
					this.OPCION = readString(dis);
					
					this.PREGUNTA = readString(dis);
					
					this.PREGUNTA_ESTADO = readString(dis);
					
						this.PREGUNTA_ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.OPCION_ESTADO = readString(dis);
					
						this.OPCION_ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.ENCUESTAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.PREGUNTA_SIGLA,dos);
					
					// String
				
						writeString(this.OPCION,dos);
					
					// String
				
						writeString(this.PREGUNTA,dos);
					
					// String
				
						writeString(this.PREGUNTA_ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PREGUNTA_ESTREGISTRO_ID);
					
					// String
				
						writeString(this.OPCION_ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OPCION_ESTREGISTRO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ENCUESTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.PREGUNTA_SIGLA,dos);
					
					// String
				
						writeString(this.OPCION,dos);
					
					// String
				
						writeString(this.PREGUNTA,dos);
					
					// String
				
						writeString(this.PREGUNTA_ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PREGUNTA_ESTREGISTRO_ID);
					
					// String
				
						writeString(this.OPCION_ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.OPCION_ESTREGISTRO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ENCUESTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",PREGUNTA_SIGLA="+PREGUNTA_SIGLA);
		sb.append(",OPCION="+OPCION);
		sb.append(",PREGUNTA="+PREGUNTA);
		sb.append(",PREGUNTA_ESTADO="+PREGUNTA_ESTADO);
		sb.append(",PREGUNTA_ESTREGISTRO_ID="+String.valueOf(PREGUNTA_ESTREGISTRO_ID));
		sb.append(",OPCION_ESTADO="+OPCION_ESTADO);
		sb.append(",OPCION_ESTREGISTRO_ID="+String.valueOf(OPCION_ESTREGISTRO_ID));
		sb.append(",ENCUESTAS_ID="+String.valueOf(ENCUESTAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 80;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String PREGUNTA_SIGLA;

				public String getPREGUNTA_SIGLA () {
					return this.PREGUNTA_SIGLA;
				}

				public Boolean PREGUNTA_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PREGUNTA_SIGLAIsKey(){
				    return false;
				}
				public Integer PREGUNTA_SIGLALength(){
				    return 50;
				}
				public Integer PREGUNTA_SIGLAPrecision(){
				    return 0;
				}
				public String PREGUNTA_SIGLADefault(){
				
					return null;
				
				}
				public String PREGUNTA_SIGLAComment(){
				
				    return "";
				
				}
				public String PREGUNTA_SIGLAPattern(){
				
					return "";
				
				}
				public String PREGUNTA_SIGLAOriginalDbColumnName(){
				
					return "PREGUNTA_SIGLA";
				
				}

				
			    public String OPCION;

				public String getOPCION () {
					return this.OPCION;
				}

				public Boolean OPCIONIsNullable(){
				    return true;
				}
				public Boolean OPCIONIsKey(){
				    return false;
				}
				public Integer OPCIONLength(){
				    return 100;
				}
				public Integer OPCIONPrecision(){
				    return 0;
				}
				public String OPCIONDefault(){
				
					return null;
				
				}
				public String OPCIONComment(){
				
				    return "";
				
				}
				public String OPCIONPattern(){
				
					return "";
				
				}
				public String OPCIONOriginalDbColumnName(){
				
					return "OPCION";
				
				}

				
			    public String PREGUNTA;

				public String getPREGUNTA () {
					return this.PREGUNTA;
				}

				public Boolean PREGUNTAIsNullable(){
				    return true;
				}
				public Boolean PREGUNTAIsKey(){
				    return false;
				}
				public Integer PREGUNTALength(){
				    return 1167;
				}
				public Integer PREGUNTAPrecision(){
				    return 0;
				}
				public String PREGUNTADefault(){
				
					return null;
				
				}
				public String PREGUNTAComment(){
				
				    return "";
				
				}
				public String PREGUNTAPattern(){
				
					return "";
				
				}
				public String PREGUNTAOriginalDbColumnName(){
				
					return "PREGUNTA";
				
				}

				
			    public String PREGUNTA_ESTADO;

				public String getPREGUNTA_ESTADO () {
					return this.PREGUNTA_ESTADO;
				}

				public Boolean PREGUNTA_ESTADOIsNullable(){
				    return true;
				}
				public Boolean PREGUNTA_ESTADOIsKey(){
				    return false;
				}
				public Integer PREGUNTA_ESTADOLength(){
				    return 10;
				}
				public Integer PREGUNTA_ESTADOPrecision(){
				    return 0;
				}
				public String PREGUNTA_ESTADODefault(){
				
					return null;
				
				}
				public String PREGUNTA_ESTADOComment(){
				
				    return "";
				
				}
				public String PREGUNTA_ESTADOPattern(){
				
					return "";
				
				}
				public String PREGUNTA_ESTADOOriginalDbColumnName(){
				
					return "PREGUNTA_ESTADO";
				
				}

				
			    public BigDecimal PREGUNTA_ESTREGISTRO_ID;

				public BigDecimal getPREGUNTA_ESTREGISTRO_ID () {
					return this.PREGUNTA_ESTREGISTRO_ID;
				}

				public Boolean PREGUNTA_ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean PREGUNTA_ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTA_ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer PREGUNTA_ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String PREGUNTA_ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String PREGUNTA_ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTA_ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTA_ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "PREGUNTA_ESTREGISTRO_ID";
				
				}

				
			    public String OPCION_ESTADO;

				public String getOPCION_ESTADO () {
					return this.OPCION_ESTADO;
				}

				public Boolean OPCION_ESTADOIsNullable(){
				    return true;
				}
				public Boolean OPCION_ESTADOIsKey(){
				    return false;
				}
				public Integer OPCION_ESTADOLength(){
				    return 10;
				}
				public Integer OPCION_ESTADOPrecision(){
				    return 0;
				}
				public String OPCION_ESTADODefault(){
				
					return null;
				
				}
				public String OPCION_ESTADOComment(){
				
				    return "";
				
				}
				public String OPCION_ESTADOPattern(){
				
					return "";
				
				}
				public String OPCION_ESTADOOriginalDbColumnName(){
				
					return "OPCION_ESTADO";
				
				}

				
			    public BigDecimal OPCION_ESTREGISTRO_ID;

				public BigDecimal getOPCION_ESTREGISTRO_ID () {
					return this.OPCION_ESTREGISTRO_ID;
				}

				public Boolean OPCION_ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean OPCION_ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer OPCION_ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer OPCION_ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String OPCION_ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String OPCION_ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String OPCION_ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String OPCION_ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "OPCION_ESTREGISTRO_ID";
				
				}

				
			    public BigDecimal ENCUESTAS_ID;

				public BigDecimal getENCUESTAS_ID () {
					return this.ENCUESTAS_ID;
				}

				public Boolean ENCUESTAS_IDIsNullable(){
				    return true;
				}
				public Boolean ENCUESTAS_IDIsKey(){
				    return false;
				}
				public Integer ENCUESTAS_IDLength(){
				    return 0;
				}
				public Integer ENCUESTAS_IDPrecision(){
				    return null;
				}
				public String ENCUESTAS_IDDefault(){
				
					return "";
				
				}
				public String ENCUESTAS_IDComment(){
				
				    return "";
				
				}
				public String ENCUESTAS_IDPattern(){
				
					return "";
				
				}
				public String ENCUESTAS_IDOriginalDbColumnName(){
				
					return "ENCUESTAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.PREGUNTA_SIGLA = readString(dis);
					
					this.OPCION = readString(dis);
					
					this.PREGUNTA = readString(dis);
					
					this.PREGUNTA_ESTADO = readString(dis);
					
						this.PREGUNTA_ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.OPCION_ESTADO = readString(dis);
					
						this.OPCION_ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.ENCUESTAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.PREGUNTA_SIGLA = readString(dis);
					
					this.OPCION = readString(dis);
					
					this.PREGUNTA = readString(dis);
					
					this.PREGUNTA_ESTADO = readString(dis);
					
						this.PREGUNTA_ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.OPCION_ESTADO = readString(dis);
					
						this.OPCION_ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.ENCUESTAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.PREGUNTA_SIGLA,dos);
					
					// String
				
						writeString(this.OPCION,dos);
					
					// String
				
						writeString(this.PREGUNTA,dos);
					
					// String
				
						writeString(this.PREGUNTA_ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PREGUNTA_ESTREGISTRO_ID);
					
					// String
				
						writeString(this.OPCION_ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OPCION_ESTREGISTRO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ENCUESTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.PREGUNTA_SIGLA,dos);
					
					// String
				
						writeString(this.OPCION,dos);
					
					// String
				
						writeString(this.PREGUNTA,dos);
					
					// String
				
						writeString(this.PREGUNTA_ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PREGUNTA_ESTREGISTRO_ID);
					
					// String
				
						writeString(this.OPCION_ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.OPCION_ESTREGISTRO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ENCUESTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",PREGUNTA_SIGLA="+PREGUNTA_SIGLA);
		sb.append(",OPCION="+OPCION);
		sb.append(",PREGUNTA="+PREGUNTA);
		sb.append(",PREGUNTA_ESTADO="+PREGUNTA_ESTADO);
		sb.append(",PREGUNTA_ESTREGISTRO_ID="+String.valueOf(PREGUNTA_ESTREGISTRO_ID));
		sb.append(",OPCION_ESTADO="+OPCION_ESTADO);
		sb.append(",OPCION_ESTREGISTRO_ID="+String.valueOf(OPCION_ESTREGISTRO_ID));
		sb.append(",ENCUESTAS_ID="+String.valueOf(ENCUESTAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_1Struct implements routines.system.IPersistableRow<after_tOracleInput_1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 80;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String PREGUNTA_SIGLA;

				public String getPREGUNTA_SIGLA () {
					return this.PREGUNTA_SIGLA;
				}

				public Boolean PREGUNTA_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PREGUNTA_SIGLAIsKey(){
				    return false;
				}
				public Integer PREGUNTA_SIGLALength(){
				    return 50;
				}
				public Integer PREGUNTA_SIGLAPrecision(){
				    return 0;
				}
				public String PREGUNTA_SIGLADefault(){
				
					return null;
				
				}
				public String PREGUNTA_SIGLAComment(){
				
				    return "";
				
				}
				public String PREGUNTA_SIGLAPattern(){
				
					return "";
				
				}
				public String PREGUNTA_SIGLAOriginalDbColumnName(){
				
					return "PREGUNTA_SIGLA";
				
				}

				
			    public String OPCION;

				public String getOPCION () {
					return this.OPCION;
				}

				public Boolean OPCIONIsNullable(){
				    return true;
				}
				public Boolean OPCIONIsKey(){
				    return false;
				}
				public Integer OPCIONLength(){
				    return 100;
				}
				public Integer OPCIONPrecision(){
				    return 0;
				}
				public String OPCIONDefault(){
				
					return null;
				
				}
				public String OPCIONComment(){
				
				    return "";
				
				}
				public String OPCIONPattern(){
				
					return "";
				
				}
				public String OPCIONOriginalDbColumnName(){
				
					return "OPCION";
				
				}

				
			    public String PREGUNTA;

				public String getPREGUNTA () {
					return this.PREGUNTA;
				}

				public Boolean PREGUNTAIsNullable(){
				    return true;
				}
				public Boolean PREGUNTAIsKey(){
				    return false;
				}
				public Integer PREGUNTALength(){
				    return 1167;
				}
				public Integer PREGUNTAPrecision(){
				    return 0;
				}
				public String PREGUNTADefault(){
				
					return null;
				
				}
				public String PREGUNTAComment(){
				
				    return "";
				
				}
				public String PREGUNTAPattern(){
				
					return "";
				
				}
				public String PREGUNTAOriginalDbColumnName(){
				
					return "PREGUNTA";
				
				}

				
			    public String PREGUNTA_ESTADO;

				public String getPREGUNTA_ESTADO () {
					return this.PREGUNTA_ESTADO;
				}

				public Boolean PREGUNTA_ESTADOIsNullable(){
				    return true;
				}
				public Boolean PREGUNTA_ESTADOIsKey(){
				    return false;
				}
				public Integer PREGUNTA_ESTADOLength(){
				    return 10;
				}
				public Integer PREGUNTA_ESTADOPrecision(){
				    return 0;
				}
				public String PREGUNTA_ESTADODefault(){
				
					return null;
				
				}
				public String PREGUNTA_ESTADOComment(){
				
				    return "";
				
				}
				public String PREGUNTA_ESTADOPattern(){
				
					return "";
				
				}
				public String PREGUNTA_ESTADOOriginalDbColumnName(){
				
					return "PREGUNTA_ESTADO";
				
				}

				
			    public BigDecimal PREGUNTA_ESTREGISTRO_ID;

				public BigDecimal getPREGUNTA_ESTREGISTRO_ID () {
					return this.PREGUNTA_ESTREGISTRO_ID;
				}

				public Boolean PREGUNTA_ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean PREGUNTA_ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTA_ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer PREGUNTA_ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String PREGUNTA_ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String PREGUNTA_ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTA_ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTA_ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "PREGUNTA_ESTREGISTRO_ID";
				
				}

				
			    public String OPCION_ESTADO;

				public String getOPCION_ESTADO () {
					return this.OPCION_ESTADO;
				}

				public Boolean OPCION_ESTADOIsNullable(){
				    return true;
				}
				public Boolean OPCION_ESTADOIsKey(){
				    return false;
				}
				public Integer OPCION_ESTADOLength(){
				    return 10;
				}
				public Integer OPCION_ESTADOPrecision(){
				    return 0;
				}
				public String OPCION_ESTADODefault(){
				
					return null;
				
				}
				public String OPCION_ESTADOComment(){
				
				    return "";
				
				}
				public String OPCION_ESTADOPattern(){
				
					return "";
				
				}
				public String OPCION_ESTADOOriginalDbColumnName(){
				
					return "OPCION_ESTADO";
				
				}

				
			    public BigDecimal OPCION_ESTREGISTRO_ID;

				public BigDecimal getOPCION_ESTREGISTRO_ID () {
					return this.OPCION_ESTREGISTRO_ID;
				}

				public Boolean OPCION_ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean OPCION_ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer OPCION_ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer OPCION_ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String OPCION_ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String OPCION_ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String OPCION_ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String OPCION_ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "OPCION_ESTREGISTRO_ID";
				
				}

				
			    public BigDecimal ENCUESTAS_ID;

				public BigDecimal getENCUESTAS_ID () {
					return this.ENCUESTAS_ID;
				}

				public Boolean ENCUESTAS_IDIsNullable(){
				    return true;
				}
				public Boolean ENCUESTAS_IDIsKey(){
				    return false;
				}
				public Integer ENCUESTAS_IDLength(){
				    return 0;
				}
				public Integer ENCUESTAS_IDPrecision(){
				    return null;
				}
				public String ENCUESTAS_IDDefault(){
				
					return "";
				
				}
				public String ENCUESTAS_IDComment(){
				
				    return "";
				
				}
				public String ENCUESTAS_IDPattern(){
				
					return "";
				
				}
				public String ENCUESTAS_IDOriginalDbColumnName(){
				
					return "ENCUESTAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.PREGUNTA_SIGLA = readString(dis);
					
					this.OPCION = readString(dis);
					
					this.PREGUNTA = readString(dis);
					
					this.PREGUNTA_ESTADO = readString(dis);
					
						this.PREGUNTA_ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.OPCION_ESTADO = readString(dis);
					
						this.OPCION_ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.ENCUESTAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.PREGUNTA_SIGLA = readString(dis);
					
					this.OPCION = readString(dis);
					
					this.PREGUNTA = readString(dis);
					
					this.PREGUNTA_ESTADO = readString(dis);
					
						this.PREGUNTA_ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.OPCION_ESTADO = readString(dis);
					
						this.OPCION_ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.ENCUESTAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.PREGUNTA_SIGLA,dos);
					
					// String
				
						writeString(this.OPCION,dos);
					
					// String
				
						writeString(this.PREGUNTA,dos);
					
					// String
				
						writeString(this.PREGUNTA_ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PREGUNTA_ESTREGISTRO_ID);
					
					// String
				
						writeString(this.OPCION_ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OPCION_ESTREGISTRO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ENCUESTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.PREGUNTA_SIGLA,dos);
					
					// String
				
						writeString(this.OPCION,dos);
					
					// String
				
						writeString(this.PREGUNTA,dos);
					
					// String
				
						writeString(this.PREGUNTA_ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PREGUNTA_ESTREGISTRO_ID);
					
					// String
				
						writeString(this.OPCION_ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.OPCION_ESTREGISTRO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ENCUESTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",PREGUNTA_SIGLA="+PREGUNTA_SIGLA);
		sb.append(",OPCION="+OPCION);
		sb.append(",PREGUNTA="+PREGUNTA);
		sb.append(",PREGUNTA_ESTADO="+PREGUNTA_ESTADO);
		sb.append(",PREGUNTA_ESTREGISTRO_ID="+String.valueOf(PREGUNTA_ESTREGISTRO_ID));
		sb.append(",OPCION_ESTADO="+OPCION_ESTADO);
		sb.append(",OPCION_ESTREGISTRO_ID="+String.valueOf(OPCION_ESTREGISTRO_ID));
		sb.append(",ENCUESTAS_ID="+String.valueOf(ENCUESTAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_2Process(globalMap);

		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();





	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






        int updateKeyCount_tOracleOutput_1 = 1;
        if(updateKeyCount_tOracleOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_1 == 9 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
        dbschema_tOracleOutput_1 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("BFFA_PREGUNTAS");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("BFFA_PREGUNTAS");
        }
                java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement("SELECT COUNT(1) FROM " + tableName_tOracleOutput_1 + " WHERE ID = ?");
                resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (ID,PREGUNTA_SIGLA,OPCION,PREGUNTA,PREGUNTA_ESTADO,PREGUNTA_ESTREGISTRO_ID,OPCION_ESTADO,OPCION_ESTREGISTRO_ID,ENCUESTAS_ID) VALUES (?,?,?,?,?,?,?,?,?)";    
                java.sql.PreparedStatement pstmtInsert_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                resourceMap.put("pstmtInsert_tOracleOutput_1", pstmtInsert_tOracleOutput_1);
                String update_tOracleOutput_1 = "UPDATE " + tableName_tOracleOutput_1 + " SET PREGUNTA_SIGLA = ?,OPCION = ?,PREGUNTA = ?,PREGUNTA_ESTADO = ?,PREGUNTA_ESTREGISTRO_ID = ?,OPCION_ESTADO = ?,OPCION_ESTREGISTRO_ID = ?,ENCUESTAS_ID = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmtUpdate_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(update_tOracleOutput_1);
                resourceMap.put("pstmtUpdate_tOracleOutput_1", pstmtUpdate_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_1.setFetchSize(1000);


		    String dbquery_tOracleInput_1 = "SELECT  GPR.ID || GTR.ID AS ID\n        ,GPR.SIGLA|| GTR.ID AS PREGUNTA_SIGLA\n        ,GTR.VPREDETERMINADO AS OPCION\n"
+"        ,DECODE ( GTR.ID \n                  , NULL\n                  , GPR.PREGUNTA\n                  , GPR.PREGUNTA "
+"|| '('||ROW_NUMBER() OVER (PARTITION BY GPR.SIGLA, GTR.VPREDETERMINADO  ORDER BY GTR.ID )||'.'||GTR.VPREDETERMINADO || '"
+")' ) AS PREGUNTA \n        ,NVL( GPR.ESTADO, 'Activo' ) AS PREGUNTA_ESTADO\n        ,NVL( GPR.ESTREGISTRO_ID, 1 ) AS PRE"
+"GUNTA_ESTREGISTRO_ID\n        ,NVL( GTR.ESTADO, 'Activo' ) AS OPCION_ESTADO\n        ,NVL( GTR.ESTREGISTRO_ID, 1 )  AS O"
+"PCION_ESTREGISTRO_ID\n        ,GPR.ENCUESTAS_ID         \nFROM GEN_PREGUNTAS GPR\nLEFT JOIN GEN_TPREGUNTAS GTP ON GTP.ID"
+" = GPR.TPREGUNTAS_ID  AND  GTP.NOMBRE = 'MULTISELECT' \nLEFT JOIN GEN_TRESPUESTAS GTR ON GTR.PREGUNTAS_ID = GPR.ID AND G"
+"TP.ID IS NOT NULL\nWHERE GPR.ESTREGISTRO_ID = 1 \n  AND GPR.SIGLA LIKE 'FF%'\n  AND GPR.SIGLA <> 'FF025'\nUNION\nselect "
+" GPR.ID || TI.TIPO\n        ,GPR.SIGLA || TI.TIPO AS PREGUNTA_SIGLA\n        ,NULL AS OPCION\n        ,GPR.PREGUNTA || T"
+"I.CATEGORIA AS PREGUNTA \n        ,NVL( GPR.ESTADO, 'Activo' ) AS PREGUNTA_ESTADO\n        ,NVL( GPR.ESTREGISTRO_ID, 1 )"
+" AS  PREGUNTA_ESTREGISTRO_ID\n        ,'Activo'  AS OPCION_ESTADO\n        , 1  AS OPCION_ESTREGISTRO_ID\n        ,GPR.E"
+"NCUESTAS_ID        \nFROM GEN_PREGUNTAS GPR \nFULL OUTER JOIN ( \n SELECT 1 AS TIPO, '(Respuesta cerrada)' AS CATEGORIA "
+"FROM DUAL\n UNION\n SELECT 2 AS TIPO, '(Respuesta abierta)' AS CATEGORIA FROM DUAL\n) TI ON TI.TIPO IN (1,2)\nWHERE GPR."
+"SIGLA = 'FF025'";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row1.ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row1.ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
						row1.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row1.PREGUNTA_SIGLA = null;
							} else {
	                         		
        	row1.PREGUNTA_SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row1.OPCION = null;
							} else {
	                         		
        	row1.OPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 4) {
								row1.PREGUNTA = null;
							} else {
	                         		
        	row1.PREGUNTA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 5) {
								row1.PREGUNTA_ESTADO = null;
							} else {
	                         		
        	row1.PREGUNTA_ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 6) {
								row1.PREGUNTA_ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(6) != null) {
						row1.PREGUNTA_ESTREGISTRO_ID = rs_tOracleInput_1.getBigDecimal(6);
					} else {
				
						row1.PREGUNTA_ESTREGISTRO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 7) {
								row1.OPCION_ESTADO = null;
							} else {
	                         		
        	row1.OPCION_ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 8) {
								row1.OPCION_ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(8) != null) {
						row1.OPCION_ESTREGISTRO_ID = rs_tOracleInput_1.getBigDecimal(8);
					} else {
				
						row1.OPCION_ESTREGISTRO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 9) {
								row1.ENCUESTAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(9) != null) {
						row1.ENCUESTAS_ID = rs_tOracleInput_1.getBigDecimal(9);
					} else {
				
						row1.ENCUESTAS_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row2Struct row2 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row2HashKey.ID = row1.ID ;
                        		    		
                        		    		    row2HashKey.PREGUNTA_SIGLA = row1.PREGUNTA_SIGLA ;
                        		    		
                        		    		    row2HashKey.OPCION = row1.OPCION ;
                        		    		
                        		    		    row2HashKey.PREGUNTA = row1.PREGUNTA ;
                        		    		
                        		    		    row2HashKey.PREGUNTA_ESTADO = row1.PREGUNTA_ESTADO ;
                        		    		
                        		    		    row2HashKey.PREGUNTA_ESTREGISTRO_ID = row1.PREGUNTA_ESTREGISTRO_ID ;
                        		    		
                        		    		    row2HashKey.OPCION_ESTADO = row1.OPCION_ESTADO ;
                        		    		
                        		    		    row2HashKey.OPCION_ESTREGISTRO_ID = row1.OPCION_ESTREGISTRO_ID ;
                        		    		
                        		    		    row2HashKey.ENCUESTAS_ID = row1.ENCUESTAS_ID ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.ID = '" + row2HashKey.ID + "', row2.PREGUNTA_SIGLA = '" + row2HashKey.PREGUNTA_SIGLA + "', row2.OPCION = '" + row2HashKey.OPCION + "', row2.PREGUNTA = '" + row2HashKey.PREGUNTA + "', row2.PREGUNTA_ESTADO = '" + row2HashKey.PREGUNTA_ESTADO + "', row2.PREGUNTA_ESTREGISTRO_ID = '" + row2HashKey.PREGUNTA_ESTREGISTRO_ID + "', row2.OPCION_ESTADO = '" + row2HashKey.OPCION_ESTADO + "', row2.OPCION_ESTREGISTRO_ID = '" + row2HashKey.OPCION_ESTREGISTRO_ID + "', row2.ENCUESTAS_ID = '" + row2HashKey.ENCUESTAS_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;

if(!rejectedInnerJoin_tMap_1 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'out1'
// # Filter conditions 
if( rejectedInnerJoin_tMap_1 ) {
out1_tmp.ID = row1.ID ;
out1_tmp.PREGUNTA_SIGLA = row1.PREGUNTA_SIGLA ;
out1_tmp.OPCION = row1.OPCION ;
out1_tmp.PREGUNTA = row1.PREGUNTA ;
out1_tmp.PREGUNTA_ESTADO = row1.PREGUNTA_ESTADO ;
out1_tmp.PREGUNTA_ESTREGISTRO_ID = row1.PREGUNTA_ESTREGISTRO_ID ;
out1_tmp.OPCION_ESTADO = row1.OPCION_ESTADO ;
out1_tmp.OPCION_ESTREGISTRO_ID = row1.OPCION_ESTREGISTRO_ID ;
out1_tmp.ENCUESTAS_ID = row1.ENCUESTAS_ID ;
out1 = out1_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                    pstmt_tOracleOutput_1.setBigDecimal(1, out1.ID);

            int checkCount_tOracleOutput_1 = -1;
            try (java.sql.ResultSet rs_tOracleOutput_1 = pstmt_tOracleOutput_1.executeQuery()) {
                while(rs_tOracleOutput_1.next()) {
                    checkCount_tOracleOutput_1 = rs_tOracleOutput_1.getInt(1);
                }
            }
            if(checkCount_tOracleOutput_1 > 0) {
                        if(out1.PREGUNTA_SIGLA == null) {
pstmtUpdate_tOracleOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(1, out1.PREGUNTA_SIGLA);
}

                        if(out1.OPCION == null) {
pstmtUpdate_tOracleOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(2, out1.OPCION);
}

                        if(out1.PREGUNTA == null) {
pstmtUpdate_tOracleOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(3, out1.PREGUNTA);
}

                        if(out1.PREGUNTA_ESTADO == null) {
pstmtUpdate_tOracleOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(4, out1.PREGUNTA_ESTADO);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(5, out1.PREGUNTA_ESTREGISTRO_ID);

                        if(out1.OPCION_ESTADO == null) {
pstmtUpdate_tOracleOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(6, out1.OPCION_ESTADO);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(7, out1.OPCION_ESTREGISTRO_ID);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(8, out1.ENCUESTAS_ID);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(9 + count_tOracleOutput_1, out1.ID);

                try {
                    int processedCount_tOracleOutput_1 = pstmtUpdate_tOracleOutput_1.executeUpdate();
                    updatedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    nb_line_tOracleOutput_1++;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                        nb_line_tOracleOutput_1++;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }
            } else {
                        pstmtInsert_tOracleOutput_1.setBigDecimal(1, out1.ID);

                        if(out1.PREGUNTA_SIGLA == null) {
pstmtInsert_tOracleOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(2, out1.PREGUNTA_SIGLA);
}

                        if(out1.OPCION == null) {
pstmtInsert_tOracleOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(3, out1.OPCION);
}

                        if(out1.PREGUNTA == null) {
pstmtInsert_tOracleOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(4, out1.PREGUNTA);
}

                        if(out1.PREGUNTA_ESTADO == null) {
pstmtInsert_tOracleOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(5, out1.PREGUNTA_ESTADO);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(6, out1.PREGUNTA_ESTREGISTRO_ID);

                        if(out1.OPCION_ESTADO == null) {
pstmtInsert_tOracleOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(7, out1.OPCION_ESTADO);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(8, out1.OPCION_ESTREGISTRO_ID);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(9, out1.ENCUESTAS_ID);

                try {
                    int processedCount_tOracleOutput_1 = pstmtInsert_tOracleOutput_1.executeUpdate();
                    insertedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    nb_line_tOracleOutput_1++;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                        nb_line_tOracleOutput_1++;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }
            }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(pstmtUpdate_tOracleOutput_1 != null){
            pstmtUpdate_tOracleOutput_1.close();
            resourceMap.remove("pstmtUpdate_tOracleOutput_1");
        }
        if(pstmtInsert_tOracleOutput_1 != null){
            pstmtInsert_tOracleOutput_1.close();
            resourceMap.remove("pstmtInsert_tOracleOutput_1");
        }
        if(pstmt_tOracleOutput_1 != null) {
            pstmt_tOracleOutput_1.close();
            resourceMap.remove("pstmt_tOracleOutput_1");
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tOracleOutput_1 = null;
                if ((pstmtUpdateToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tOracleOutput_1")) != null) {
                    pstmtUpdateToClose_tOracleOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tOracleOutput_1 = null;
                if ((pstmtInsertToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tOracleOutput_1")) != null) {
                    pstmtInsertToClose_tOracleOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_F5_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String PREGUNTA_SIGLA;

				public String getPREGUNTA_SIGLA () {
					return this.PREGUNTA_SIGLA;
				}

				public Boolean PREGUNTA_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PREGUNTA_SIGLAIsKey(){
				    return false;
				}
				public Integer PREGUNTA_SIGLALength(){
				    return null;
				}
				public Integer PREGUNTA_SIGLAPrecision(){
				    return null;
				}
				public String PREGUNTA_SIGLADefault(){
				
					return null;
				
				}
				public String PREGUNTA_SIGLAComment(){
				
				    return "";
				
				}
				public String PREGUNTA_SIGLAPattern(){
				
					return "";
				
				}
				public String PREGUNTA_SIGLAOriginalDbColumnName(){
				
					return "PREGUNTA_SIGLA";
				
				}

				
			    public String OPCION;

				public String getOPCION () {
					return this.OPCION;
				}

				public Boolean OPCIONIsNullable(){
				    return true;
				}
				public Boolean OPCIONIsKey(){
				    return false;
				}
				public Integer OPCIONLength(){
				    return null;
				}
				public Integer OPCIONPrecision(){
				    return null;
				}
				public String OPCIONDefault(){
				
					return null;
				
				}
				public String OPCIONComment(){
				
				    return "";
				
				}
				public String OPCIONPattern(){
				
					return "";
				
				}
				public String OPCIONOriginalDbColumnName(){
				
					return "OPCION";
				
				}

				
			    public String PREGUNTA;

				public String getPREGUNTA () {
					return this.PREGUNTA;
				}

				public Boolean PREGUNTAIsNullable(){
				    return true;
				}
				public Boolean PREGUNTAIsKey(){
				    return false;
				}
				public Integer PREGUNTALength(){
				    return null;
				}
				public Integer PREGUNTAPrecision(){
				    return null;
				}
				public String PREGUNTADefault(){
				
					return null;
				
				}
				public String PREGUNTAComment(){
				
				    return "";
				
				}
				public String PREGUNTAPattern(){
				
					return "";
				
				}
				public String PREGUNTAOriginalDbColumnName(){
				
					return "PREGUNTA";
				
				}

				
			    public String PREGUNTA_ESTADO;

				public String getPREGUNTA_ESTADO () {
					return this.PREGUNTA_ESTADO;
				}

				public Boolean PREGUNTA_ESTADOIsNullable(){
				    return true;
				}
				public Boolean PREGUNTA_ESTADOIsKey(){
				    return false;
				}
				public Integer PREGUNTA_ESTADOLength(){
				    return null;
				}
				public Integer PREGUNTA_ESTADOPrecision(){
				    return null;
				}
				public String PREGUNTA_ESTADODefault(){
				
					return null;
				
				}
				public String PREGUNTA_ESTADOComment(){
				
				    return "";
				
				}
				public String PREGUNTA_ESTADOPattern(){
				
					return "";
				
				}
				public String PREGUNTA_ESTADOOriginalDbColumnName(){
				
					return "PREGUNTA_ESTADO";
				
				}

				
			    public BigDecimal PREGUNTA_ESTREGISTRO_ID;

				public BigDecimal getPREGUNTA_ESTREGISTRO_ID () {
					return this.PREGUNTA_ESTREGISTRO_ID;
				}

				public Boolean PREGUNTA_ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean PREGUNTA_ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTA_ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer PREGUNTA_ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String PREGUNTA_ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String PREGUNTA_ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTA_ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTA_ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "PREGUNTA_ESTREGISTRO_ID";
				
				}

				
			    public String OPCION_ESTADO;

				public String getOPCION_ESTADO () {
					return this.OPCION_ESTADO;
				}

				public Boolean OPCION_ESTADOIsNullable(){
				    return true;
				}
				public Boolean OPCION_ESTADOIsKey(){
				    return false;
				}
				public Integer OPCION_ESTADOLength(){
				    return null;
				}
				public Integer OPCION_ESTADOPrecision(){
				    return null;
				}
				public String OPCION_ESTADODefault(){
				
					return null;
				
				}
				public String OPCION_ESTADOComment(){
				
				    return "";
				
				}
				public String OPCION_ESTADOPattern(){
				
					return "";
				
				}
				public String OPCION_ESTADOOriginalDbColumnName(){
				
					return "OPCION_ESTADO";
				
				}

				
			    public BigDecimal OPCION_ESTREGISTRO_ID;

				public BigDecimal getOPCION_ESTREGISTRO_ID () {
					return this.OPCION_ESTREGISTRO_ID;
				}

				public Boolean OPCION_ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean OPCION_ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer OPCION_ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer OPCION_ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String OPCION_ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String OPCION_ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String OPCION_ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String OPCION_ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "OPCION_ESTREGISTRO_ID";
				
				}

				
			    public BigDecimal ENCUESTAS_ID;

				public BigDecimal getENCUESTAS_ID () {
					return this.ENCUESTAS_ID;
				}

				public Boolean ENCUESTAS_IDIsNullable(){
				    return true;
				}
				public Boolean ENCUESTAS_IDIsKey(){
				    return false;
				}
				public Integer ENCUESTAS_IDLength(){
				    return null;
				}
				public Integer ENCUESTAS_IDPrecision(){
				    return null;
				}
				public String ENCUESTAS_IDDefault(){
				
					return "";
				
				}
				public String ENCUESTAS_IDComment(){
				
				    return "";
				
				}
				public String ENCUESTAS_IDPattern(){
				
					return "";
				
				}
				public String ENCUESTAS_IDOriginalDbColumnName(){
				
					return "ENCUESTAS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
						result = prime * result + ((this.PREGUNTA_SIGLA == null) ? 0 : this.PREGUNTA_SIGLA.hashCode());
					
						result = prime * result + ((this.OPCION == null) ? 0 : this.OPCION.hashCode());
					
						result = prime * result + ((this.PREGUNTA == null) ? 0 : this.PREGUNTA.hashCode());
					
						result = prime * result + ((this.PREGUNTA_ESTADO == null) ? 0 : this.PREGUNTA_ESTADO.hashCode());
					
						result = prime * result + ((this.PREGUNTA_ESTREGISTRO_ID == null) ? 0 : this.PREGUNTA_ESTREGISTRO_ID.hashCode());
					
						result = prime * result + ((this.OPCION_ESTADO == null) ? 0 : this.OPCION_ESTADO.hashCode());
					
						result = prime * result + ((this.OPCION_ESTREGISTRO_ID == null) ? 0 : this.OPCION_ESTREGISTRO_ID.hashCode());
					
						result = prime * result + ((this.ENCUESTAS_ID == null) ? 0 : this.ENCUESTAS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					
						if (this.PREGUNTA_SIGLA == null) {
							if (other.PREGUNTA_SIGLA != null)
								return false;
						
						} else if (!this.PREGUNTA_SIGLA.equals(other.PREGUNTA_SIGLA))
						
							return false;
					
						if (this.OPCION == null) {
							if (other.OPCION != null)
								return false;
						
						} else if (!this.OPCION.equals(other.OPCION))
						
							return false;
					
						if (this.PREGUNTA == null) {
							if (other.PREGUNTA != null)
								return false;
						
						} else if (!this.PREGUNTA.equals(other.PREGUNTA))
						
							return false;
					
						if (this.PREGUNTA_ESTADO == null) {
							if (other.PREGUNTA_ESTADO != null)
								return false;
						
						} else if (!this.PREGUNTA_ESTADO.equals(other.PREGUNTA_ESTADO))
						
							return false;
					
						if (this.PREGUNTA_ESTREGISTRO_ID == null) {
							if (other.PREGUNTA_ESTREGISTRO_ID != null)
								return false;
						
						} else if (!this.PREGUNTA_ESTREGISTRO_ID.equals(other.PREGUNTA_ESTREGISTRO_ID))
						
							return false;
					
						if (this.OPCION_ESTADO == null) {
							if (other.OPCION_ESTADO != null)
								return false;
						
						} else if (!this.OPCION_ESTADO.equals(other.OPCION_ESTADO))
						
							return false;
					
						if (this.OPCION_ESTREGISTRO_ID == null) {
							if (other.OPCION_ESTREGISTRO_ID != null)
								return false;
						
						} else if (!this.OPCION_ESTREGISTRO_ID.equals(other.OPCION_ESTREGISTRO_ID))
						
							return false;
					
						if (this.ENCUESTAS_ID == null) {
							if (other.ENCUESTAS_ID != null)
								return false;
						
						} else if (!this.ENCUESTAS_ID.equals(other.ENCUESTAS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.ID = this.ID;
	            other.PREGUNTA_SIGLA = this.PREGUNTA_SIGLA;
	            other.OPCION = this.OPCION;
	            other.PREGUNTA = this.PREGUNTA;
	            other.PREGUNTA_ESTADO = this.PREGUNTA_ESTADO;
	            other.PREGUNTA_ESTREGISTRO_ID = this.PREGUNTA_ESTREGISTRO_ID;
	            other.OPCION_ESTADO = this.OPCION_ESTADO;
	            other.OPCION_ESTREGISTRO_ID = this.OPCION_ESTREGISTRO_ID;
	            other.ENCUESTAS_ID = this.ENCUESTAS_ID;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.ID = this.ID;
	            	other.PREGUNTA_SIGLA = this.PREGUNTA_SIGLA;
	            	other.OPCION = this.OPCION;
	            	other.PREGUNTA = this.PREGUNTA;
	            	other.PREGUNTA_ESTADO = this.PREGUNTA_ESTADO;
	            	other.PREGUNTA_ESTREGISTRO_ID = this.PREGUNTA_ESTREGISTRO_ID;
	            	other.OPCION_ESTADO = this.OPCION_ESTADO;
	            	other.OPCION_ESTREGISTRO_ID = this.OPCION_ESTREGISTRO_ID;
	            	other.ENCUESTAS_ID = this.ENCUESTAS_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_F5_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_F5_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_F5_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_F5_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.PREGUNTA_SIGLA = readString(dis);
					
					this.OPCION = readString(dis);
					
					this.PREGUNTA = readString(dis);
					
					this.PREGUNTA_ESTADO = readString(dis);
					
						this.PREGUNTA_ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.OPCION_ESTADO = readString(dis);
					
						this.OPCION_ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.ENCUESTAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_F5_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.PREGUNTA_SIGLA = readString(dis);
					
					this.OPCION = readString(dis);
					
					this.PREGUNTA = readString(dis);
					
					this.PREGUNTA_ESTADO = readString(dis);
					
						this.PREGUNTA_ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.OPCION_ESTADO = readString(dis);
					
						this.OPCION_ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.ENCUESTAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.PREGUNTA_SIGLA,dos);
					
					// String
				
						writeString(this.OPCION,dos);
					
					// String
				
						writeString(this.PREGUNTA,dos);
					
					// String
				
						writeString(this.PREGUNTA_ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PREGUNTA_ESTREGISTRO_ID);
					
					// String
				
						writeString(this.OPCION_ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OPCION_ESTREGISTRO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ENCUESTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.PREGUNTA_SIGLA,dos);
					
					// String
				
						writeString(this.OPCION,dos);
					
					// String
				
						writeString(this.PREGUNTA,dos);
					
					// String
				
						writeString(this.PREGUNTA_ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PREGUNTA_ESTREGISTRO_ID);
					
					// String
				
						writeString(this.OPCION_ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.OPCION_ESTREGISTRO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ENCUESTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",PREGUNTA_SIGLA="+PREGUNTA_SIGLA);
		sb.append(",OPCION="+OPCION);
		sb.append(",PREGUNTA="+PREGUNTA);
		sb.append(",PREGUNTA_ESTADO="+PREGUNTA_ESTADO);
		sb.append(",PREGUNTA_ESTREGISTRO_ID="+String.valueOf(PREGUNTA_ESTREGISTRO_ID));
		sb.append(",OPCION_ESTADO="+OPCION_ESTADO);
		sb.append(",OPCION_ESTREGISTRO_ID="+String.valueOf(OPCION_ESTREGISTRO_ID));
		sb.append(",ENCUESTAS_ID="+String.valueOf(ENCUESTAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PREGUNTA_SIGLA, other.PREGUNTA_SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.OPCION, other.OPCION);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PREGUNTA, other.PREGUNTA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PREGUNTA_ESTADO, other.PREGUNTA_ESTADO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PREGUNTA_ESTREGISTRO_ID, other.PREGUNTA_ESTREGISTRO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.OPCION_ESTADO, other.OPCION_ESTADO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.OPCION_ESTREGISTRO_ID, other.OPCION_ESTREGISTRO_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ENCUESTAS_ID, other.ENCUESTAS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tOracleInput_2 - inputs:(after_tOracleInput_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_2.setFetchSize(1000);


		    String dbquery_tOracleInput_2 = "SELECT  ID\n        ,PREGUNTA_SIGLA\n        ,OPCION\n        ,PREGUNTA\n        ,PREGUNTA_ESTADO\n        ,PREGUNTA_ES"
+"TREGISTRO_ID\n        ,OPCION_ESTADO\n        ,OPCION_ESTREGISTRO_ID\n		,ENCUESTAS_ID\nFROM BFFA_PREGUNTAS";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row2.ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row2.ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row2.PREGUNTA_SIGLA = null;
							} else {
	                         		
        	row2.PREGUNTA_SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row2.OPCION = null;
							} else {
	                         		
        	row2.OPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 4) {
								row2.PREGUNTA = null;
							} else {
	                         		
        	row2.PREGUNTA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 5) {
								row2.PREGUNTA_ESTADO = null;
							} else {
	                         		
        	row2.PREGUNTA_ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 6) {
								row2.PREGUNTA_ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(6) != null) {
						row2.PREGUNTA_ESTREGISTRO_ID = rs_tOracleInput_2.getBigDecimal(6);
					} else {
				
						row2.PREGUNTA_ESTREGISTRO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 7) {
								row2.OPCION_ESTADO = null;
							} else {
	                         		
        	row2.OPCION_ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 8) {
								row2.OPCION_ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(8) != null) {
						row2.OPCION_ESTREGISTRO_ID = rs_tOracleInput_2.getBigDecimal(8);
					} else {
				
						row2.OPCION_ESTREGISTRO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 9) {
								row2.ENCUESTAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(9) != null) {
						row2.ENCUESTAS_ID = rs_tOracleInput_2.getBigDecimal(9);
					} else {
				
						row2.ENCUESTAS_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.ID = row2.ID;
				
				row2_HashRow.PREGUNTA_SIGLA = row2.PREGUNTA_SIGLA;
				
				row2_HashRow.OPCION = row2.OPCION;
				
				row2_HashRow.PREGUNTA = row2.PREGUNTA;
				
				row2_HashRow.PREGUNTA_ESTADO = row2.PREGUNTA_ESTADO;
				
				row2_HashRow.PREGUNTA_ESTREGISTRO_ID = row2.PREGUNTA_ESTREGISTRO_ID;
				
				row2_HashRow.OPCION_ESTADO = row2.OPCION_ESTADO;
				
				row2_HashRow.OPCION_ESTREGISTRO_ID = row2.OPCION_ESTREGISTRO_ID;
				
				row2_HashRow.ENCUESTAS_ID = row2.ENCUESTAS_ID;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final FichaFamiliar FichaFamiliarClass = new FichaFamiliar();

        int exitCode = FichaFamiliarClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = FichaFamiliar.class.getClassLoader().getResourceAsStream("rep_inicio_f5/fichafamiliar_1_3/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = FichaFamiliar.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("COM_EPS_ID", "id_BigDecimal");
                        if(context.getStringValue("COM_EPS_ID") == null) {
                            context.COM_EPS_ID = null;
                        } else {
                            try{
                                context.COM_EPS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COM_EPS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COM_EPS_ID", e.getMessage()));
                                context.COM_EPS_ID=null;
                            }
                        }
                        context.setContextType("COM_FICHA_ID", "id_BigDecimal");
                        if(context.getStringValue("COM_FICHA_ID") == null) {
                            context.COM_FICHA_ID = null;
                        } else {
                            try{
                                context.COM_FICHA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COM_FICHA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COM_FICHA_ID", e.getMessage()));
                                context.COM_FICHA_ID=null;
                            }
                        }
                        context.setContextType("COM_FREGISTRO", "id_Date");
                        if(context.getStringValue("COM_FREGISTRO") == null) {
                            context.COM_FREGISTRO = null;
                        } else {
                            String context_COM_FREGISTRO_value = context.getProperty("COM_FREGISTRO");
                            try{
                                if (context_COM_FREGISTRO_value == null){
                                    context_COM_FREGISTRO_value = "";
                                }
                                int context_COM_FREGISTRO_pos = context_COM_FREGISTRO_value.indexOf(";");
                                String context_COM_FREGISTRO_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_COM_FREGISTRO_pos > -1){
                                    context_COM_FREGISTRO_pattern = context_COM_FREGISTRO_value.substring(0, context_COM_FREGISTRO_pos);
                                    context_COM_FREGISTRO_value = context_COM_FREGISTRO_value.substring(context_COM_FREGISTRO_pos + 1);
                                }

                                context.COM_FREGISTRO=(java.util.Date)(new java.text.SimpleDateFormat(context_COM_FREGISTRO_pattern).parse(context_COM_FREGISTRO_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_COM_FREGISTRO_longValue = Long.valueOf(context_COM_FREGISTRO_value);
                                    context.COM_FREGISTRO = new java.util.Date(context_COM_FREGISTRO_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "COM_FREGISTRO", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.COM_FREGISTRO=null;
                                }
                            }
                        }
                        context.setContextType("COM_OPCION1", "id_String");
                        if(context.getStringValue("COM_OPCION1") == null) {
                            context.COM_OPCION1 = null;
                        } else {
                            context.COM_OPCION1=(String) context.getProperty("COM_OPCION1");
                        }
                        context.setContextType("COM_OPCION2", "id_Date");
                        if(context.getStringValue("COM_OPCION2") == null) {
                            context.COM_OPCION2 = null;
                        } else {
                            String context_COM_OPCION2_value = context.getProperty("COM_OPCION2");
                            try{
                                if (context_COM_OPCION2_value == null){
                                    context_COM_OPCION2_value = "";
                                }
                                int context_COM_OPCION2_pos = context_COM_OPCION2_value.indexOf(";");
                                String context_COM_OPCION2_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_COM_OPCION2_pos > -1){
                                    context_COM_OPCION2_pattern = context_COM_OPCION2_value.substring(0, context_COM_OPCION2_pos);
                                    context_COM_OPCION2_value = context_COM_OPCION2_value.substring(context_COM_OPCION2_pos + 1);
                                }

                                context.COM_OPCION2=(java.util.Date)(new java.text.SimpleDateFormat(context_COM_OPCION2_pattern).parse(context_COM_OPCION2_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_COM_OPCION2_longValue = Long.valueOf(context_COM_OPCION2_value);
                                    context.COM_OPCION2 = new java.util.Date(context_COM_OPCION2_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "COM_OPCION2", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.COM_OPCION2=null;
                                }
                            }
                        }
                        context.setContextType("COM_PERSONA_ID", "id_BigDecimal");
                        if(context.getStringValue("COM_PERSONA_ID") == null) {
                            context.COM_PERSONA_ID = null;
                        } else {
                            try{
                                context.COM_PERSONA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COM_PERSONA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COM_PERSONA_ID", e.getMessage()));
                                context.COM_PERSONA_ID=null;
                            }
                        }
                        context.setContextType("COM_RECOMENDACIONES", "id_String");
                        if(context.getStringValue("COM_RECOMENDACIONES") == null) {
                            context.COM_RECOMENDACIONES = null;
                        } else {
                            context.COM_RECOMENDACIONES=(String) context.getProperty("COM_RECOMENDACIONES");
                        }
                        context.setContextType("COM_RESPUESTA", "id_String");
                        if(context.getStringValue("COM_RESPUESTA") == null) {
                            context.COM_RESPUESTA = null;
                        } else {
                            context.COM_RESPUESTA=(String) context.getProperty("COM_RESPUESTA");
                        }
                        context.setContextType("COM_SIGLA", "id_String");
                        if(context.getStringValue("COM_SIGLA") == null) {
                            context.COM_SIGLA = null;
                        } else {
                            context.COM_SIGLA=(String) context.getProperty("COM_SIGLA");
                        }
                        context.setContextType("COM_TPREGUNTAS_ID", "id_BigDecimal");
                        if(context.getStringValue("COM_TPREGUNTAS_ID") == null) {
                            context.COM_TPREGUNTAS_ID = null;
                        } else {
                            try{
                                context.COM_TPREGUNTAS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COM_TPREGUNTAS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COM_TPREGUNTAS_ID", e.getMessage()));
                                context.COM_TPREGUNTAS_ID=null;
                            }
                        }
                        context.setContextType("COM_TREGIMENSALUD_ID", "id_BigDecimal");
                        if(context.getStringValue("COM_TREGIMENSALUD_ID") == null) {
                            context.COM_TREGIMENSALUD_ID = null;
                        } else {
                            try{
                                context.COM_TREGIMENSALUD_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COM_TREGIMENSALUD_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COM_TREGIMENSALUD_ID", e.getMessage()));
                                context.COM_TREGIMENSALUD_ID=null;
                            }
                        }
                        context.setContextType("COM_TRESPUESTAS_ID", "id_BigDecimal");
                        if(context.getStringValue("COM_TRESPUESTAS_ID") == null) {
                            context.COM_TRESPUESTAS_ID = null;
                        } else {
                            try{
                                context.COM_TRESPUESTAS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COM_TRESPUESTAS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COM_TRESPUESTAS_ID", e.getMessage()));
                                context.COM_TRESPUESTAS_ID=null;
                            }
                        }
                        context.setContextType("COM_VPREDETERMINADO", "id_String");
                        if(context.getStringValue("COM_VPREDETERMINADO") == null) {
                            context.COM_VPREDETERMINADO = null;
                        } else {
                            context.COM_VPREDETERMINADO=(String) context.getProperty("COM_VPREDETERMINADO");
                        }
                        context.setContextType("PER_EPS_ID", "id_BigDecimal");
                        if(context.getStringValue("PER_EPS_ID") == null) {
                            context.PER_EPS_ID = null;
                        } else {
                            try{
                                context.PER_EPS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PER_EPS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PER_EPS_ID", e.getMessage()));
                                context.PER_EPS_ID=null;
                            }
                        }
                        context.setContextType("PER_FICHA_ID", "id_BigDecimal");
                        if(context.getStringValue("PER_FICHA_ID") == null) {
                            context.PER_FICHA_ID = null;
                        } else {
                            try{
                                context.PER_FICHA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PER_FICHA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PER_FICHA_ID", e.getMessage()));
                                context.PER_FICHA_ID=null;
                            }
                        }
                        context.setContextType("PER_FREGISTRO", "id_Date");
                        if(context.getStringValue("PER_FREGISTRO") == null) {
                            context.PER_FREGISTRO = null;
                        } else {
                            String context_PER_FREGISTRO_value = context.getProperty("PER_FREGISTRO");
                            try{
                                if (context_PER_FREGISTRO_value == null){
                                    context_PER_FREGISTRO_value = "";
                                }
                                int context_PER_FREGISTRO_pos = context_PER_FREGISTRO_value.indexOf(";");
                                String context_PER_FREGISTRO_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_PER_FREGISTRO_pos > -1){
                                    context_PER_FREGISTRO_pattern = context_PER_FREGISTRO_value.substring(0, context_PER_FREGISTRO_pos);
                                    context_PER_FREGISTRO_value = context_PER_FREGISTRO_value.substring(context_PER_FREGISTRO_pos + 1);
                                }

                                context.PER_FREGISTRO=(java.util.Date)(new java.text.SimpleDateFormat(context_PER_FREGISTRO_pattern).parse(context_PER_FREGISTRO_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_PER_FREGISTRO_longValue = Long.valueOf(context_PER_FREGISTRO_value);
                                    context.PER_FREGISTRO = new java.util.Date(context_PER_FREGISTRO_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "PER_FREGISTRO", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.PER_FREGISTRO=null;
                                }
                            }
                        }
                        context.setContextType("PER_OPCION1", "id_String");
                        if(context.getStringValue("PER_OPCION1") == null) {
                            context.PER_OPCION1 = null;
                        } else {
                            context.PER_OPCION1=(String) context.getProperty("PER_OPCION1");
                        }
                        context.setContextType("PER_OPCION2", "id_Date");
                        if(context.getStringValue("PER_OPCION2") == null) {
                            context.PER_OPCION2 = null;
                        } else {
                            String context_PER_OPCION2_value = context.getProperty("PER_OPCION2");
                            try{
                                if (context_PER_OPCION2_value == null){
                                    context_PER_OPCION2_value = "";
                                }
                                int context_PER_OPCION2_pos = context_PER_OPCION2_value.indexOf(";");
                                String context_PER_OPCION2_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_PER_OPCION2_pos > -1){
                                    context_PER_OPCION2_pattern = context_PER_OPCION2_value.substring(0, context_PER_OPCION2_pos);
                                    context_PER_OPCION2_value = context_PER_OPCION2_value.substring(context_PER_OPCION2_pos + 1);
                                }

                                context.PER_OPCION2=(java.util.Date)(new java.text.SimpleDateFormat(context_PER_OPCION2_pattern).parse(context_PER_OPCION2_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_PER_OPCION2_longValue = Long.valueOf(context_PER_OPCION2_value);
                                    context.PER_OPCION2 = new java.util.Date(context_PER_OPCION2_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "PER_OPCION2", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.PER_OPCION2=null;
                                }
                            }
                        }
                        context.setContextType("PER_PERSONA_ID", "id_BigDecimal");
                        if(context.getStringValue("PER_PERSONA_ID") == null) {
                            context.PER_PERSONA_ID = null;
                        } else {
                            try{
                                context.PER_PERSONA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PER_PERSONA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PER_PERSONA_ID", e.getMessage()));
                                context.PER_PERSONA_ID=null;
                            }
                        }
                        context.setContextType("PER_RECOMENDACIONES", "id_String");
                        if(context.getStringValue("PER_RECOMENDACIONES") == null) {
                            context.PER_RECOMENDACIONES = null;
                        } else {
                            context.PER_RECOMENDACIONES=(String) context.getProperty("PER_RECOMENDACIONES");
                        }
                        context.setContextType("PER_RESPUESTA", "id_String");
                        if(context.getStringValue("PER_RESPUESTA") == null) {
                            context.PER_RESPUESTA = null;
                        } else {
                            context.PER_RESPUESTA=(String) context.getProperty("PER_RESPUESTA");
                        }
                        context.setContextType("PER_SIGLA", "id_String");
                        if(context.getStringValue("PER_SIGLA") == null) {
                            context.PER_SIGLA = null;
                        } else {
                            context.PER_SIGLA=(String) context.getProperty("PER_SIGLA");
                        }
                        context.setContextType("PER_TPREGUNTAS_ID", "id_BigDecimal");
                        if(context.getStringValue("PER_TPREGUNTAS_ID") == null) {
                            context.PER_TPREGUNTAS_ID = null;
                        } else {
                            try{
                                context.PER_TPREGUNTAS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PER_TPREGUNTAS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PER_TPREGUNTAS_ID", e.getMessage()));
                                context.PER_TPREGUNTAS_ID=null;
                            }
                        }
                        context.setContextType("PER_TREGIMENSALUD_ID", "id_BigDecimal");
                        if(context.getStringValue("PER_TREGIMENSALUD_ID") == null) {
                            context.PER_TREGIMENSALUD_ID = null;
                        } else {
                            try{
                                context.PER_TREGIMENSALUD_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PER_TREGIMENSALUD_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PER_TREGIMENSALUD_ID", e.getMessage()));
                                context.PER_TREGIMENSALUD_ID=null;
                            }
                        }
                        context.setContextType("PER_TRESPUESTAS_ID", "id_BigDecimal");
                        if(context.getStringValue("PER_TRESPUESTAS_ID") == null) {
                            context.PER_TRESPUESTAS_ID = null;
                        } else {
                            try{
                                context.PER_TRESPUESTAS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PER_TRESPUESTAS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PER_TRESPUESTAS_ID", e.getMessage()));
                                context.PER_TRESPUESTAS_ID=null;
                            }
                        }
                        context.setContextType("PER_VPREDETERMINADO", "id_String");
                        if(context.getStringValue("PER_VPREDETERMINADO") == null) {
                            context.PER_VPREDETERMINADO = null;
                        } else {
                            context.PER_VPREDETERMINADO=(String) context.getProperty("PER_VPREDETERMINADO");
                        }
                        context.setContextType("ACTUALIZACION_TOTAL", "id_Boolean");
                        if(context.getStringValue("ACTUALIZACION_TOTAL") == null) {
                            context.ACTUALIZACION_TOTAL = null;
                        } else {
                            try{
                                context.ACTUALIZACION_TOTAL=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("ACTUALIZACION_TOTAL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ACTUALIZACION_TOTAL", e.getMessage()));
                                context.ACTUALIZACION_TOTAL=null;
                            }
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("CONDITION", "id_String");
                        if(context.getStringValue("CONDITION") == null) {
                            context.CONDITION = null;
                        } else {
                            context.CONDITION=(String) context.getProperty("CONDITION");
                        }
                        context.setContextType("CONDITION_PRINCIPAL", "id_String");
                        if(context.getStringValue("CONDITION_PRINCIPAL") == null) {
                            context.CONDITION_PRINCIPAL = null;
                        } else {
                            context.CONDITION_PRINCIPAL=(String) context.getProperty("CONDITION_PRINCIPAL");
                        }
                        context.setContextType("ERROR", "id_String");
                        if(context.getStringValue("ERROR") == null) {
                            context.ERROR = null;
                        } else {
                            context.ERROR=(String) context.getProperty("ERROR");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FANTERIOR", "id_String");
                        if(context.getStringValue("FANTERIOR") == null) {
                            context.FANTERIOR = null;
                        } else {
                            context.FANTERIOR=(String) context.getProperty("FANTERIOR");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("FECHA_TERMINACION", "id_String");
                        if(context.getStringValue("FECHA_TERMINACION") == null) {
                            context.FECHA_TERMINACION = null;
                        } else {
                            context.FECHA_TERMINACION=(String) context.getProperty("FECHA_TERMINACION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("ID_SOLICITUD", "id_Integer");
                        if(context.getStringValue("ID_SOLICITUD") == null) {
                            context.ID_SOLICITUD = null;
                        } else {
                            try{
                                context.ID_SOLICITUD=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ID_SOLICITUD"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ID_SOLICITUD", e.getMessage()));
                                context.ID_SOLICITUD=null;
                            }
                        }
                        context.setContextType("JOB", "id_String");
                        if(context.getStringValue("JOB") == null) {
                            context.JOB = null;
                        } else {
                            context.JOB=(String) context.getProperty("JOB");
                        }
                        context.setContextType("LAST_DAYS", "id_Integer");
                        if(context.getStringValue("LAST_DAYS") == null) {
                            context.LAST_DAYS = null;
                        } else {
                            try{
                                context.LAST_DAYS=routines.system.ParserUtils.parseTo_Integer (context.getProperty("LAST_DAYS"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "LAST_DAYS", e.getMessage()));
                                context.LAST_DAYS=null;
                            }
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("LOGS_STAT", "id_String");
                        if(context.getStringValue("LOGS_STAT") == null) {
                            context.LOGS_STAT = null;
                        } else {
                            context.LOGS_STAT=(String) context.getProperty("LOGS_STAT");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("RutaSistema", "id_String");
                        if(context.getStringValue("RutaSistema") == null) {
                            context.RutaSistema = null;
                        } else {
                            context.RutaSistema=(String) context.getProperty("RutaSistema");
                        }
                        context.setContextType("ABIERTA", "id_BigDecimal");
                        if(context.getStringValue("ABIERTA") == null) {
                            context.ABIERTA = null;
                        } else {
                            try{
                                context.ABIERTA=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ABIERTA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ABIERTA", e.getMessage()));
                                context.ABIERTA=null;
                            }
                        }
                        context.setContextType("AREA", "id_BigDecimal");
                        if(context.getStringValue("AREA") == null) {
                            context.AREA = null;
                        } else {
                            try{
                                context.AREA=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AREA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AREA", e.getMessage()));
                                context.AREA=null;
                            }
                        }
                        context.setContextType("COMBO", "id_BigDecimal");
                        if(context.getStringValue("COMBO") == null) {
                            context.COMBO = null;
                        } else {
                            try{
                                context.COMBO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COMBO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COMBO", e.getMessage()));
                                context.COMBO=null;
                            }
                        }
                        context.setContextType("COMBO_COMBO", "id_BigDecimal");
                        if(context.getStringValue("COMBO_COMBO") == null) {
                            context.COMBO_COMBO = null;
                        } else {
                            try{
                                context.COMBO_COMBO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COMBO_COMBO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COMBO_COMBO", e.getMessage()));
                                context.COMBO_COMBO=null;
                            }
                        }
                        context.setContextType("COMBO_NUMERICO", "id_BigDecimal");
                        if(context.getStringValue("COMBO_NUMERICO") == null) {
                            context.COMBO_NUMERICO = null;
                        } else {
                            try{
                                context.COMBO_NUMERICO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COMBO_NUMERICO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COMBO_NUMERICO", e.getMessage()));
                                context.COMBO_NUMERICO=null;
                            }
                        }
                        context.setContextType("COMBO_OTRO", "id_BigDecimal");
                        if(context.getStringValue("COMBO_OTRO") == null) {
                            context.COMBO_OTRO = null;
                        } else {
                            try{
                                context.COMBO_OTRO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COMBO_OTRO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COMBO_OTRO", e.getMessage()));
                                context.COMBO_OTRO=null;
                            }
                        }
                        context.setContextType("COMBO_TEXTO", "id_BigDecimal");
                        if(context.getStringValue("COMBO_TEXTO") == null) {
                            context.COMBO_TEXTO = null;
                        } else {
                            try{
                                context.COMBO_TEXTO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COMBO_TEXTO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COMBO_TEXTO", e.getMessage()));
                                context.COMBO_TEXTO=null;
                            }
                        }
                        context.setContextType("COMBO_TEXTO_FIJO", "id_BigDecimal");
                        if(context.getStringValue("COMBO_TEXTO_FIJO") == null) {
                            context.COMBO_TEXTO_FIJO = null;
                        } else {
                            try{
                                context.COMBO_TEXTO_FIJO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COMBO_TEXTO_FIJO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COMBO_TEXTO_FIJO", e.getMessage()));
                                context.COMBO_TEXTO_FIJO=null;
                            }
                        }
                        context.setContextType("FECHA_NORMAL", "id_BigDecimal");
                        if(context.getStringValue("FECHA_NORMAL") == null) {
                            context.FECHA_NORMAL = null;
                        } else {
                            try{
                                context.FECHA_NORMAL=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("FECHA_NORMAL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "FECHA_NORMAL", e.getMessage()));
                                context.FECHA_NORMAL=null;
                            }
                        }
                        context.setContextType("MULTISELECT", "id_BigDecimal");
                        if(context.getStringValue("MULTISELECT") == null) {
                            context.MULTISELECT = null;
                        } else {
                            try{
                                context.MULTISELECT=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("MULTISELECT"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "MULTISELECT", e.getMessage()));
                                context.MULTISELECT=null;
                            }
                        }
                        context.setContextType("RANGO_NUMERICO", "id_BigDecimal");
                        if(context.getStringValue("RANGO_NUMERICO") == null) {
                            context.RANGO_NUMERICO = null;
                        } else {
                            try{
                                context.RANGO_NUMERICO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("RANGO_NUMERICO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "RANGO_NUMERICO", e.getMessage()));
                                context.RANGO_NUMERICO=null;
                            }
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("COM_EPS_ID")) {
                context.COM_EPS_ID = (BigDecimal) parentContextMap.get("COM_EPS_ID");
            }if (parentContextMap.containsKey("COM_FICHA_ID")) {
                context.COM_FICHA_ID = (BigDecimal) parentContextMap.get("COM_FICHA_ID");
            }if (parentContextMap.containsKey("COM_FREGISTRO")) {
                context.COM_FREGISTRO = (java.util.Date) parentContextMap.get("COM_FREGISTRO");
            }if (parentContextMap.containsKey("COM_OPCION1")) {
                context.COM_OPCION1 = (String) parentContextMap.get("COM_OPCION1");
            }if (parentContextMap.containsKey("COM_OPCION2")) {
                context.COM_OPCION2 = (java.util.Date) parentContextMap.get("COM_OPCION2");
            }if (parentContextMap.containsKey("COM_PERSONA_ID")) {
                context.COM_PERSONA_ID = (BigDecimal) parentContextMap.get("COM_PERSONA_ID");
            }if (parentContextMap.containsKey("COM_RECOMENDACIONES")) {
                context.COM_RECOMENDACIONES = (String) parentContextMap.get("COM_RECOMENDACIONES");
            }if (parentContextMap.containsKey("COM_RESPUESTA")) {
                context.COM_RESPUESTA = (String) parentContextMap.get("COM_RESPUESTA");
            }if (parentContextMap.containsKey("COM_SIGLA")) {
                context.COM_SIGLA = (String) parentContextMap.get("COM_SIGLA");
            }if (parentContextMap.containsKey("COM_TPREGUNTAS_ID")) {
                context.COM_TPREGUNTAS_ID = (BigDecimal) parentContextMap.get("COM_TPREGUNTAS_ID");
            }if (parentContextMap.containsKey("COM_TREGIMENSALUD_ID")) {
                context.COM_TREGIMENSALUD_ID = (BigDecimal) parentContextMap.get("COM_TREGIMENSALUD_ID");
            }if (parentContextMap.containsKey("COM_TRESPUESTAS_ID")) {
                context.COM_TRESPUESTAS_ID = (BigDecimal) parentContextMap.get("COM_TRESPUESTAS_ID");
            }if (parentContextMap.containsKey("COM_VPREDETERMINADO")) {
                context.COM_VPREDETERMINADO = (String) parentContextMap.get("COM_VPREDETERMINADO");
            }if (parentContextMap.containsKey("PER_EPS_ID")) {
                context.PER_EPS_ID = (BigDecimal) parentContextMap.get("PER_EPS_ID");
            }if (parentContextMap.containsKey("PER_FICHA_ID")) {
                context.PER_FICHA_ID = (BigDecimal) parentContextMap.get("PER_FICHA_ID");
            }if (parentContextMap.containsKey("PER_FREGISTRO")) {
                context.PER_FREGISTRO = (java.util.Date) parentContextMap.get("PER_FREGISTRO");
            }if (parentContextMap.containsKey("PER_OPCION1")) {
                context.PER_OPCION1 = (String) parentContextMap.get("PER_OPCION1");
            }if (parentContextMap.containsKey("PER_OPCION2")) {
                context.PER_OPCION2 = (java.util.Date) parentContextMap.get("PER_OPCION2");
            }if (parentContextMap.containsKey("PER_PERSONA_ID")) {
                context.PER_PERSONA_ID = (BigDecimal) parentContextMap.get("PER_PERSONA_ID");
            }if (parentContextMap.containsKey("PER_RECOMENDACIONES")) {
                context.PER_RECOMENDACIONES = (String) parentContextMap.get("PER_RECOMENDACIONES");
            }if (parentContextMap.containsKey("PER_RESPUESTA")) {
                context.PER_RESPUESTA = (String) parentContextMap.get("PER_RESPUESTA");
            }if (parentContextMap.containsKey("PER_SIGLA")) {
                context.PER_SIGLA = (String) parentContextMap.get("PER_SIGLA");
            }if (parentContextMap.containsKey("PER_TPREGUNTAS_ID")) {
                context.PER_TPREGUNTAS_ID = (BigDecimal) parentContextMap.get("PER_TPREGUNTAS_ID");
            }if (parentContextMap.containsKey("PER_TREGIMENSALUD_ID")) {
                context.PER_TREGIMENSALUD_ID = (BigDecimal) parentContextMap.get("PER_TREGIMENSALUD_ID");
            }if (parentContextMap.containsKey("PER_TRESPUESTAS_ID")) {
                context.PER_TRESPUESTAS_ID = (BigDecimal) parentContextMap.get("PER_TRESPUESTAS_ID");
            }if (parentContextMap.containsKey("PER_VPREDETERMINADO")) {
                context.PER_VPREDETERMINADO = (String) parentContextMap.get("PER_VPREDETERMINADO");
            }if (parentContextMap.containsKey("ACTUALIZACION_TOTAL")) {
                context.ACTUALIZACION_TOTAL = (Boolean) parentContextMap.get("ACTUALIZACION_TOTAL");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("CONDITION")) {
                context.CONDITION = (String) parentContextMap.get("CONDITION");
            }if (parentContextMap.containsKey("CONDITION_PRINCIPAL")) {
                context.CONDITION_PRINCIPAL = (String) parentContextMap.get("CONDITION_PRINCIPAL");
            }if (parentContextMap.containsKey("ERROR")) {
                context.ERROR = (String) parentContextMap.get("ERROR");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FANTERIOR")) {
                context.FANTERIOR = (String) parentContextMap.get("FANTERIOR");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("FECHA_TERMINACION")) {
                context.FECHA_TERMINACION = (String) parentContextMap.get("FECHA_TERMINACION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("ID_SOLICITUD")) {
                context.ID_SOLICITUD = (Integer) parentContextMap.get("ID_SOLICITUD");
            }if (parentContextMap.containsKey("JOB")) {
                context.JOB = (String) parentContextMap.get("JOB");
            }if (parentContextMap.containsKey("LAST_DAYS")) {
                context.LAST_DAYS = (Integer) parentContextMap.get("LAST_DAYS");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("LOGS_STAT")) {
                context.LOGS_STAT = (String) parentContextMap.get("LOGS_STAT");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("RutaSistema")) {
                context.RutaSistema = (String) parentContextMap.get("RutaSistema");
            }if (parentContextMap.containsKey("ABIERTA")) {
                context.ABIERTA = (BigDecimal) parentContextMap.get("ABIERTA");
            }if (parentContextMap.containsKey("AREA")) {
                context.AREA = (BigDecimal) parentContextMap.get("AREA");
            }if (parentContextMap.containsKey("COMBO")) {
                context.COMBO = (BigDecimal) parentContextMap.get("COMBO");
            }if (parentContextMap.containsKey("COMBO_COMBO")) {
                context.COMBO_COMBO = (BigDecimal) parentContextMap.get("COMBO_COMBO");
            }if (parentContextMap.containsKey("COMBO_NUMERICO")) {
                context.COMBO_NUMERICO = (BigDecimal) parentContextMap.get("COMBO_NUMERICO");
            }if (parentContextMap.containsKey("COMBO_OTRO")) {
                context.COMBO_OTRO = (BigDecimal) parentContextMap.get("COMBO_OTRO");
            }if (parentContextMap.containsKey("COMBO_TEXTO")) {
                context.COMBO_TEXTO = (BigDecimal) parentContextMap.get("COMBO_TEXTO");
            }if (parentContextMap.containsKey("COMBO_TEXTO_FIJO")) {
                context.COMBO_TEXTO_FIJO = (BigDecimal) parentContextMap.get("COMBO_TEXTO_FIJO");
            }if (parentContextMap.containsKey("FECHA_NORMAL")) {
                context.FECHA_NORMAL = (BigDecimal) parentContextMap.get("FECHA_NORMAL");
            }if (parentContextMap.containsKey("MULTISELECT")) {
                context.MULTISELECT = (BigDecimal) parentContextMap.get("MULTISELECT");
            }if (parentContextMap.containsKey("RANGO_NUMERICO")) {
                context.RANGO_NUMERICO = (BigDecimal) parentContextMap.get("RANGO_NUMERICO");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_origen_Password");
			parametersToEncrypt.add("db_destino_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_2) {
globalMap.put("tPrejob_2_SUBPROCESS_STATE", -1);

e_tPrejob_2.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}catch (java.lang.Error e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : FichaFamiliar");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tOracleConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));
            connections.put("conn_tOracleConnection_2", globalMap.get("conn_tOracleConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     678262 characters generated by Talend Open Studio for ESB 
 *     on the October 16, 2024, 12:28:30 AM COT
 ************************************************************************************************/